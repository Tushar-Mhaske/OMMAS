/*----------------------------------------------------------------------------------------

 * Project Id:

 * Project Name:OMMAS

 * File Name: MasterDAL.cs

 * Author : Vikram Nandanwar,Ashish Markande, Abhishek Kamble, Rohit Jadhav.

 * Creation Date :06/Apr/2013

 * Desc : This class is used as data access layer to perform Save,Edit,Delete and listing of master data  screens.  
 * ---------------------------------------------------------------------------------------*/
using PMGSY.Common;
using PMGSY.Controllers;
using PMGSY.Extensions;
using PMGSY.Models;
using PMGSY.Models.Master;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Core;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
namespace PMGSY.DAL.Master
{
    public class MasterDAL : IMasterDAL
    {
        // PMGSYEntities dbContext = new PMGSYEntities();
        PMGSYEntities dbContext = null;
        Dictionary<string, string> decryptedParameters = null;
        string[] encryptedParameters = null;

        private int UnitId = 0;
        private int TerrainId = 0;
        private int SurfaceCode = 0;
        private int ScourFoundationCode = 0;
        private int gradeId = 0;
        private int ContClassCode = 0;
        private int ContRegCode = 0;
        private int QualId = 0;
        private int StreamsId = 0;
        private int AgencyCode = 0;
        private int ReasonCode = 0;
        private int constructionCode = 0;
        private int cdWorksCode = 0;
        private int fundCode = 0;
        private int VidhanSabhaTermId = 0;
        private int RegionCode = 0;
        private int AutoBodyCode = 0;
        private int ChecklistCode = 0;
        private int HeadCode = 0;
        private int QcCode = 0;
        private int TACode = 0;
        private int MpMemberId = 0;
        private int QualityMonitorCode = 0;
        private int AccountCode = 0;
        private int NodalOfficerCode = 0;


        enum Scheme
        {
            PMGSYI = 1,
            PMGSYII,
            RCPLWE,
            PMGSYIII

        }


        #region Growth Score

        public Boolean DeleteScoreSubItem(int masterScoreId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_GROWTH_SCORE growthScoreViewModel = dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_ID == masterScoreId).FirstOrDefault();

                if (growthScoreViewModel == null)
                {
                    return false;
                }

                dbContext.MASTER_GROWTH_SCORE.Remove(growthScoreViewModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Score details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditGrowthScoreSubItemDetails(GrowthScoreSubItemViewModel growthScoreViewModel, ref string message)
        {
            try
            {
                bool flagScourFoundationAddEdit = false;
                dbContext = new PMGSYEntities();
                encryptedParameters = growthScoreViewModel.EncryptedScoreCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ScourFoundationCode = Convert.ToInt32(decryptedParameters["ScoreID"].ToString());

                int parentId = dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_ID == ScourFoundationCode).Select(a => a.MAST_PARENT_ID).FirstOrDefault();

                Int32 recordCount = dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_NAME.ToUpper() == growthScoreViewModel.ScoreName.ToUpper() && m.MAST_SCORE_ID != ScourFoundationCode && m.MAST_SCORE_ID != ScourFoundationCode && (m.MAST_PARENT_ID == parentId || m.MAST_PARENT_ID == 0)).Count();

                if (recordCount > 0)
                {
                    message = "Score Sub Item Name already exists.";
                    return false;
                }

                MASTER_GROWTH_SCORE growthScourModel = dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_ID == ScourFoundationCode).FirstOrDefault();//CloneScourFoundationModel(masterScourFoundationTypeViewModel, flagScourFoundationAddEdit);
                //MASTER_CDWORKS_TYPE master = dbContext.MASTER_CDWORKS_TYPE.Where(m => m.MAST_CDWORKS_CODE == cdWorksCode).FirstOrDefault();

                //growthScourModel.MAST_SCORE_ID = growthScoreViewModel.ScoreId;
                //growthScourModel.MAST_SCORE_LEVEL = Convert.ToByte(growthScoreViewModel.ScoreLevel);
                growthScourModel.MAST_SCORE_NAME = growthScoreViewModel.ScoreName;
                growthScourModel.MAST_SCORE_TYPE = dbContext.MASTER_GROWTH_SCORE.Where(cp => (Int32?)cp.MAST_SCORE_ID == ScourFoundationCode).Select(a => a.MAST_SCORE_TYPE).FirstOrDefault(); //growthScoreViewModel.ScoreType;
                growthScourModel.MAST_SCORE_VALUE = growthScoreViewModel.ScoreValue;

                dbContext = new PMGSYEntities();
                dbContext.Entry(growthScourModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public GrowthScoreSubItemViewModel GetScoreSubItemDetails_ByScoreID(int scoreID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.FirstOrDefault(m => m.IMS_SC_FD_CODE == scourFoundationCode);
                MASTER_GROWTH_SCORE growthScore = dbContext.MASTER_GROWTH_SCORE.FirstOrDefault(m => m.MAST_SCORE_ID == scoreID);
                GrowthScoreSubItemViewModel scoreModel = new GrowthScoreSubItemViewModel();
                if (growthScore != null)
                {
                    //scoreModel = CloneScourFoundationObject(growthScore);
                    scoreModel.EncryptedScoreCode = URLEncrypt.EncryptParameters1(new string[] { "ScoreID =" + growthScore.MAST_SCORE_ID.ToString().Trim() });
                    scoreModel.ScoreId = scoreID;
                    scoreModel.ScoreLevel = growthScore.MAST_SCORE_LEVEL;
                    scoreModel.ScoreName = growthScore.MAST_SCORE_NAME;
                    scoreModel.ScoreType = growthScore.MAST_SCORE_TYPE;
                    scoreModel.ScoreValue = growthScore.MAST_SCORE_VALUE;
                    scoreModel.hdnScoreCode = Convert.ToString(growthScore.MAST_PARENT_ID);
                    scoreModel.ParentId = growthScore.MAST_PARENT_ID;
                }
                return scoreModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool AddScoreSubItemDetails(GrowthScoreSubItemViewModel objScore, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                int parentId = Convert.ToInt32(objScore.hdnScoreCode);

                if (dbContext.MASTER_GROWTH_SCORE.Where(s => s.MAST_SCORE_NAME.ToUpper() == objScore.ScoreName.Trim().ToUpper() && (s.MAST_PARENT_ID == parentId || s.MAST_PARENT_ID == 0)).Any())
                {
                    message = "Score Sub Item details already exist.";
                    return false;
                }

                bool flagScourFoundationAddEdit = true;
                //MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = CloneScourFoundationModel(masterScourFoundationTypeViewModel, flagScourFoundationAddEdit);
                //masterScourFoundationModel.IMS_SC_FD_CODE = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Max(cp => (Int32?)cp.IMS_SC_FD_CODE) == null ? 1 : (Int32)dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Max(cp => (Int32?)cp.IMS_SC_FD_CODE) + 1;

                MASTER_GROWTH_SCORE growthScore = new MASTER_GROWTH_SCORE();

                growthScore.MAST_PARENT_ID = Convert.ToInt32(objScore.hdnScoreCode);
                growthScore.MAST_SCORE_ID = dbContext.MASTER_GROWTH_SCORE.Max(cp => (Int32?)cp.MAST_SCORE_ID) == null ? 1 : (Int32)dbContext.MASTER_GROWTH_SCORE.Max(cp => (Int32?)cp.MAST_SCORE_ID) + 1;
                growthScore.MAST_SCORE_LEVEL = 2;
                growthScore.MAST_SCORE_NAME = objScore.ScoreName.Trim();
                growthScore.MAST_SCORE_TYPE = dbContext.MASTER_GROWTH_SCORE.Where(cp => (Int32?)cp.MAST_SCORE_ID == growthScore.MAST_PARENT_ID).Select(a => a.MAST_SCORE_TYPE).FirstOrDefault();
                growthScore.MAST_SCORE_VALUE = objScore.ScoreValue;

                dbContext = new PMGSYEntities();
                dbContext.MASTER_GROWTH_SCORE.Add(growthScore);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public Array ListScoreSubItems(string SfType, int? page, int? rows, string sidx, string sord, out long totalRecords, int scoreId)
        {

            SfType = SfType.Replace("*", "");

            try
            {

                dbContext = new PMGSYEntities();
                var lstMasterScourFoundationDetails = (from growthScore in dbContext.MASTER_GROWTH_SCORE
                                                       where (growthScore.MAST_PARENT_ID == scoreId)
                                                       select new
                                                       {
                                                           growthScore.MAST_SCORE_ID,
                                                           growthScore.MAST_SCORE_NAME,
                                                           growthScore.MAST_SCORE_VALUE,
                                                           growthScore.MAST_SCORE_TYPE,
                                                           growthScore.MAST_PARENT_ID
                                                       }).ToList();
                totalRecords = lstMasterScourFoundationDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_SCORE_NAME":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.MAST_SCORE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_SCORE_TYPE":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.MAST_SCORE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_SCORE_NAME":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderByDescending(x => x.MAST_SCORE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_SCORE_TYPE":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderByDescending(x => x.MAST_SCORE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                }
                else
                {

                    lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.MAST_SCORE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                return lstMasterScourFoundationDetails.Select(item => new
                {
                    cell = new[]{
                      //item.IMS_SC_FD_NAME.Trim(), 
                      //              item.IMS_SC_FD_TYPE.Trim().ToUpper()=="S"?"Scour":"Foundation",
                      // URLEncrypt.EncryptParameters1(new string[]{"ScourID="+item.IMS_SC_FD_CODE.ToString().Trim()})
                                    //item.MAST_SCORE_ID.ToString(), 
                                    item.MAST_SCORE_NAME.Trim(),
                                    item.MAST_SCORE_VALUE.ToString(), 
                                    //item.MAST_SCORE_TYPE.Trim().ToUpper()=="H"?"Highest":"Cumulative",
                                    URLEncrypt.EncryptParameters1(new string[]{"ScoreID="+item.MAST_SCORE_ID.ToString().Trim()}),
                                    //"<a href='#' title='Click here to Edit the Score Details' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditGrowthScore('"+ PMGSY.Common.URLEncrypt.EncryptParameters1(new string[] { "ScoreId =" /*+  item.MAST_PARENT_ID.ToString().Trim() + "$" */ + item.MAST_SCORE_ID.ToString().Trim() }) + "'); return false;'>Edit</a>",
                                    //"<a href='#' title='Click here to Delete the Score Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('"+ PMGSY.Common.URLEncrypt.EncryptParameters1(new string[] { "ScoreId =" /*+ item.MAST_PARENT_ID.ToString().Trim()  + "$"*/ + item.MAST_SCORE_ID.ToString().Trim() }) + "'); return false;>Delete</a>",
                                    item.MAST_PARENT_ID.ToString()
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterGrowthScore(int masterScoreId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                while (dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_ID == masterScoreId || m.MAST_PARENT_ID == masterScoreId).Count() != 0)
                {
                    MASTER_GROWTH_SCORE growthScoreViewModel = dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_ID == masterScoreId || m.MAST_PARENT_ID == masterScoreId).FirstOrDefault();

                    if (growthScoreViewModel == null)
                    {
                        return false;
                    }

                    dbContext.MASTER_GROWTH_SCORE.Remove(growthScoreViewModel);
                    dbContext.SaveChanges();
                }
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Score details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public bool EditMasterGrowthScore(GrowthScoreViewModel growthScoreViewModel, ref string message)
        {
            try
            {
                bool flagScourFoundationAddEdit = false;
                dbContext = new PMGSYEntities();
                encryptedParameters = growthScoreViewModel.EncryptedScoreCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ScourFoundationCode = Convert.ToInt32(decryptedParameters["ScoreID"].ToString());

                Int32 recordCount = dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_NAME.ToUpper() == growthScoreViewModel.ScoreName.Trim().ToUpper() && m.MAST_SCORE_ID != ScourFoundationCode && m.MAST_SCORE_TYPE == growthScoreViewModel.ScoreType).Count();

                if (recordCount > 0)
                {
                    message = "Score Name already exists.";
                    return false;
                }

                MASTER_GROWTH_SCORE growthScourModel = dbContext.MASTER_GROWTH_SCORE.Where(m => m.MAST_SCORE_ID == ScourFoundationCode).FirstOrDefault();//CloneScourFoundationModel(masterScourFoundationTypeViewModel, flagScourFoundationAddEdit);
                //MASTER_CDWORKS_TYPE master = dbContext.MASTER_CDWORKS_TYPE.Where(m => m.MAST_CDWORKS_CODE == cdWorksCode).FirstOrDefault();

                //growthScourModel.MAST_SCORE_ID = growthScoreViewModel.ScoreId;
                //growthScourModel.MAST_SCORE_LEVEL = Convert.ToByte(growthScoreViewModel.ScoreLevel);
                growthScourModel.MAST_SCORE_NAME = growthScoreViewModel.ScoreName;
                growthScourModel.MAST_SCORE_TYPE = growthScoreViewModel.ScoreType;
                growthScourModel.MAST_SCORE_VALUE = growthScoreViewModel.ScoreValue;

                dbContext = new PMGSYEntities();
                dbContext.Entry(growthScourModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public GrowthScoreViewModel GetGrowthScoreDetails_ByScoreID(int scoreID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.FirstOrDefault(m => m.IMS_SC_FD_CODE == scourFoundationCode);
                MASTER_GROWTH_SCORE growthScore = dbContext.MASTER_GROWTH_SCORE.FirstOrDefault(m => m.MAST_SCORE_ID == scoreID);
                GrowthScoreViewModel scoreModel = new GrowthScoreViewModel();
                if (growthScore != null)
                {
                    //scoreModel = CloneScourFoundationObject(growthScore);
                    scoreModel.EncryptedScoreCode = URLEncrypt.EncryptParameters1(new string[] { "ScoreID =" + growthScore.MAST_SCORE_ID.ToString().Trim() });
                    scoreModel.ScoreId = scoreID;
                    scoreModel.ScoreLevel = growthScore.MAST_SCORE_LEVEL;
                    scoreModel.ScoreName = growthScore.MAST_SCORE_NAME;
                    scoreModel.ScoreType = growthScore.MAST_SCORE_TYPE;
                    scoreModel.ScoreValue = growthScore.MAST_SCORE_VALUE;
                }
                return scoreModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool AddMasterGrowthScore(GrowthScoreViewModel objScore, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();


                if (dbContext.MASTER_GROWTH_SCORE.Where(s => s.MAST_SCORE_NAME.ToUpper() == objScore.ScoreName.ToUpper()).Any())
                {
                    message = "Score details already exist.";
                    return false;
                }

                bool flagScourFoundationAddEdit = true;
                //MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = CloneScourFoundationModel(masterScourFoundationTypeViewModel, flagScourFoundationAddEdit);
                //masterScourFoundationModel.IMS_SC_FD_CODE = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Max(cp => (Int32?)cp.IMS_SC_FD_CODE) == null ? 1 : (Int32)dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Max(cp => (Int32?)cp.IMS_SC_FD_CODE) + 1;

                MASTER_GROWTH_SCORE growthScore = new MASTER_GROWTH_SCORE();

                growthScore.MAST_PARENT_ID = 0;
                growthScore.MAST_SCORE_ID = dbContext.MASTER_GROWTH_SCORE.Max(cp => (Int32?)cp.MAST_SCORE_ID) == null ? 1 : (Int32)dbContext.MASTER_GROWTH_SCORE.Max(cp => (Int32?)cp.MAST_SCORE_ID) + 1;
                growthScore.MAST_SCORE_LEVEL = 1;
                growthScore.MAST_SCORE_NAME = objScore.ScoreName.Trim();
                growthScore.MAST_SCORE_TYPE = objScore.ScoreType;
                growthScore.MAST_SCORE_VALUE = objScore.ScoreValue;

                dbContext = new PMGSYEntities();
                dbContext.MASTER_GROWTH_SCORE.Add(growthScore);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array ListGrowthMasterScoreType(string SfType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {

            SfType = SfType.Replace("*", "");

            try
            {

                dbContext = new PMGSYEntities();
                var lstMasterScourFoundationDetails = (from growthScore in dbContext.MASTER_GROWTH_SCORE
                                                       where (growthScore.MAST_PARENT_ID == 0)
                                                       select new
                                                       {
                                                           growthScore.MAST_SCORE_ID,
                                                           growthScore.MAST_SCORE_NAME,
                                                           growthScore.MAST_SCORE_VALUE,
                                                           growthScore.MAST_SCORE_TYPE,
                                                           growthScore.MAST_PARENT_ID
                                                       }).ToList();
                totalRecords = lstMasterScourFoundationDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_SCORE_NAME":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.MAST_SCORE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_SCORE_TYPE":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.MAST_SCORE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_SCORE_NAME":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderByDescending(x => x.MAST_SCORE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_SCORE_TYPE":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderByDescending(x => x.MAST_SCORE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                }
                else
                {

                    lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.MAST_SCORE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                return lstMasterScourFoundationDetails.Select(item => new
                {
                    cell = new[]{
                      //item.IMS_SC_FD_NAME.Trim(), 
                      //              item.IMS_SC_FD_TYPE.Trim().ToUpper()=="S"?"Scour":"Foundation",
                      // URLEncrypt.EncryptParameters1(new string[]{"ScourID="+item.IMS_SC_FD_CODE.ToString().Trim()})
                                    //item.MAST_SCORE_ID.ToString(), 
                                    item.MAST_SCORE_NAME.Trim(),
                                    item.MAST_SCORE_VALUE.ToString(),
                                    item.MAST_SCORE_TYPE.Trim().ToUpper()=="H"?"Highest":"Cumulative",
                                    URLEncrypt.EncryptParameters1(new string[]{"ScoreID="+item.MAST_SCORE_ID.ToString().Trim()}),
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='DisplayScoreDetails(\""+ PMGSY.Common.URLEncrypt.EncryptParameters1(new string[] { "ParentId ="+ item.MAST_SCORE_ID.ToString().Trim() }) +"\"); return false;'>Sub Item Details</a>",
                                    //"<a href='#' title='Click here to Edit the Score Details' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditGrowthScore('"+ PMGSY.Common.URLEncrypt.EncryptParameters1(new string[] { "ScoreId =" /*+  item.MAST_PARENT_ID.ToString().Trim() + "$" */ + item.MAST_SCORE_ID.ToString().Trim() }) + "'); return false;'>Edit</a>",
                                    //"<a href='#' title='Click here to Delete the Score Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('"+ PMGSY.Common.URLEncrypt.EncryptParameters1(new string[] { "ScoreId =" /*+ item.MAST_PARENT_ID.ToString().Trim()  + "$"*/ + item.MAST_SCORE_ID.ToString().Trim() }) + "'); return false;>Delete</a>",
                                    item.MAST_PARENT_ID.ToString()
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region MASTER_CDWORKS_CONSTRUCTION_TYPE

        public bool AddConstructionType(CDWorksConstructionViewModel constructionModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Where(m => m.MAST_CDWORKS_NAME.ToUpper() == constructionModel.MAST_CDWORKS_NAME.ToUpper()).Any())
                {
                    message = "CD Works Type is already exist.";
                    return false;
                }

                MASTER_CDWORKS_TYPE_CONSTRUCTION master = new MASTER_CDWORKS_TYPE_CONSTRUCTION();
                Int32? maxCode = dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Max(cd => (Int32?)cd.MAST_CDWORKS_CODE);
                maxCode = maxCode == null ? 0 : maxCode;
                master.MAST_CDWORKS_CODE = (Int32)maxCode + 1;
                master.MAST_CDWORKS_NAME = constructionModel.MAST_CDWORKS_NAME;
                dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListConstructionType(int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_CDWORKS_TYPE_CONSTRUCTION> list = dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.ToList<MASTER_CDWORKS_TYPE_CONSTRUCTION>();
                IQueryable<MASTER_CDWORKS_TYPE_CONSTRUCTION> query = list.AsQueryable<MASTER_CDWORKS_TYPE_CONSTRUCTION>();
                totalRecords = query.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_CDWORKS_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_CDWORKS_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_CDWORKS_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = query.Select(constructionDetails => new
                {

                    constructionDetails.MAST_CDWORKS_CODE,
                    constructionDetails.MAST_CDWORKS_NAME

                }).ToArray();

                return result.Select(constructionDetails => new
                {
                    cell = new[]{

                    constructionDetails.MAST_CDWORKS_NAME.ToString(),
                    URLEncrypt.EncryptParameters1(new string[]{"ConstructionCode =" + constructionDetails.MAST_CDWORKS_CODE.ToString().Trim()})
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }

            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteConstructionType(int constructionCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CDWORKS_TYPE_CONSTRUCTION master = dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Find(constructionCode);
                if (master == null)
                {
                    return false;
                }
                dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditConstructionType(CDWorksConstructionViewModel constructionModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = constructionModel.EncryptedConstructionCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                constructionCode = Convert.ToInt32(decryptedParameters["ConstructionCode"].ToString());

                int recordCount = dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Where(m => m.MAST_CDWORKS_NAME.ToUpper() == constructionModel.MAST_CDWORKS_NAME.ToUpper() && m.MAST_CDWORKS_CODE != constructionCode).Count();
                if (recordCount > 0)
                {
                    message = "CD Works Type is already exist.";
                    return false;
                }

                MASTER_CDWORKS_TYPE_CONSTRUCTION master = dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Where(m => m.MAST_CDWORKS_CODE == constructionCode).FirstOrDefault();


                master.MAST_CDWORKS_NAME = constructionModel.MAST_CDWORKS_NAME;

                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public CDWorksConstructionViewModel GetConstructionTypeDetails(int constructionCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CDWORKS_TYPE_CONSTRUCTION master = dbContext.MASTER_CDWORKS_TYPE_CONSTRUCTION.Where(m => m.MAST_CDWORKS_CODE == constructionCode).FirstOrDefault();
                CDWorksConstructionViewModel model = null;
                if (master != null)
                {
                    model = new CDWorksConstructionViewModel()
                    {
                        EncryptedConstructionCode = URLEncrypt.EncryptParameters1(new string[] { "ConstructionCode=" + master.MAST_CDWORKS_CODE.ToString().Trim() }),
                        MAST_CDWORKS_NAME = master.MAST_CDWORKS_NAME.ToString(),
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_CDWORKS_TYPE

        public bool AddCdWorks(CDWorksViewModel cdworksViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_CDWORKS_TYPE.Where(m => m.MAST_CDWORKS_NAME.ToUpper() == cdworksViewModel.MAST_CDWORKS_NAME.ToUpper() && m.MAST_CDWORKS_CODE != cdworksViewModel.MAST_CDWORKS_CODE).Any())
                {
                    message = "Cd Works Length details already exist.";
                    return false;
                }

                MASTER_CDWORKS_TYPE master = new MASTER_CDWORKS_TYPE();
                master.MAST_CDWORKS_CODE = dbContext.MASTER_CDWORKS_TYPE.Max(cp => (Int32?)cp.MAST_CDWORKS_CODE) == null ? 1 : (Int32)dbContext.MASTER_CDWORKS_TYPE.Max(cp => (Int32?)cp.MAST_CDWORKS_CODE) + 1;

                master.MAST_CDWORKS_NAME = cdworksViewModel.MAST_CDWORKS_NAME;

                dbContext.MASTER_CDWORKS_TYPE.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool EditCdWorks(CDWorksViewModel cdworksViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = cdworksViewModel.EncryptedCdWorksCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                cdWorksCode = Convert.ToInt32(decryptedParameters["CdWorksCode"].ToString());
                int recordCount = dbContext.MASTER_CDWORKS_TYPE.Where(m => m.MAST_CDWORKS_NAME.ToUpper() == cdworksViewModel.MAST_CDWORKS_NAME.ToUpper() && m.MAST_CDWORKS_CODE != cdWorksCode).Count();
                if (recordCount > 0)
                {
                    message = "Cd Works Length details already exist.";
                    return false;
                }

                MASTER_CDWORKS_TYPE master = dbContext.MASTER_CDWORKS_TYPE.Where(m => m.MAST_CDWORKS_CODE == cdWorksCode).FirstOrDefault();
                master.MAST_CDWORKS_NAME = cdworksViewModel.MAST_CDWORKS_NAME;
                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListCdWorks(int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_CDWORKS_TYPE> list = dbContext.MASTER_CDWORKS_TYPE.ToList<MASTER_CDWORKS_TYPE>();
                IQueryable<MASTER_CDWORKS_TYPE> query = list.AsQueryable<MASTER_CDWORKS_TYPE>();
                totalRecords = list.Count;
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_CDWORKS_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_CDWORKS_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_CDWORKS_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = query.Select(cdWorksDetails => new
                {

                    cdWorksDetails.MAST_CDWORKS_CODE,
                    cdWorksDetails.MAST_CDWORKS_NAME

                }).ToArray();

                return result.Select(cdWorksDetails => new
                {
                    cell = new[]{
                    cdWorksDetails.MAST_CDWORKS_NAME.ToString(),
                    URLEncrypt.EncryptParameters1(new string[]{"CdWorksCode =" + cdWorksDetails.MAST_CDWORKS_CODE.ToString().Trim()}),
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteCdWorks(int cdWorksType)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CDWORKS_TYPE master = dbContext.MASTER_CDWORKS_TYPE.Find(cdWorksType);
                if (master == null)
                {
                    return false;
                }
                dbContext.MASTER_CDWORKS_TYPE.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public CDWorksViewModel GetCdWorksDetails(int cdWorksCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CDWORKS_TYPE master = dbContext.MASTER_CDWORKS_TYPE.Where(m => m.MAST_CDWORKS_CODE == cdWorksCode).FirstOrDefault();
                CDWorksViewModel model = null;
                if (master != null)
                {
                    model = new CDWorksViewModel()
                    {
                        EncryptedCdWorksCode = URLEncrypt.EncryptParameters1(new string[] { "CdWorksCode=" + master.MAST_CDWORKS_CODE.ToString().Trim() }),
                        MAST_CDWORKS_NAME = master.MAST_CDWORKS_NAME.ToString(),
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_FUNDING_AGENCY

        public bool AddFundingAgency(FundingAgencyViewModel fundingModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_NAME.ToUpper() == fundingModel.MAST_FUNDING_AGENCY_NAME.ToUpper() && m.MAST_FUNDING_AGENCY_CODE != fundingModel.MAST_FUNDING_AGENCY_CODE).Any())
                {
                    message = "Funding Agency name already exist.";
                    return false;
                }

                MASTER_FUNDING_AGENCY master = new MASTER_FUNDING_AGENCY();
                master.MAST_FUNDING_AGENCY_CODE = dbContext.MASTER_FUNDING_AGENCY.Max(cp => (Int32?)cp.MAST_FUNDING_AGENCY_CODE) == null ? 1 : (Int32)dbContext.MASTER_FUNDING_AGENCY.Max(cp => (Int32?)cp.MAST_FUNDING_AGENCY_CODE) + 1;
                master.MAST_FUNDING_AGENCY_NAME = fundingModel.MAST_FUNDING_AGENCY_NAME;
                dbContext.MASTER_FUNDING_AGENCY.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListFundingAgency(int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_FUNDING_AGENCY> list = dbContext.MASTER_FUNDING_AGENCY.ToList<MASTER_FUNDING_AGENCY>();

                IQueryable<MASTER_FUNDING_AGENCY> query = list.AsQueryable<MASTER_FUNDING_AGENCY>();

                totalRecords = list.Count;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = query.Select(fundDetails => new
                {

                    fundDetails.MAST_FUNDING_AGENCY_CODE,
                    fundDetails.MAST_FUNDING_AGENCY_NAME

                }).ToArray();

                return result.Select(fundDetails => new
                {
                    cell = new[]{

                    fundDetails.MAST_FUNDING_AGENCY_NAME.ToString(),
                    URLEncrypt.EncryptParameters1(new string[]{"FundCode =" + fundDetails.MAST_FUNDING_AGENCY_CODE.ToString().Trim()}),
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteFundingAgency(int fundCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_FUNDING_AGENCY master = dbContext.MASTER_FUNDING_AGENCY.Find(fundCode);
                if (master == null)
                {
                    return false;
                }
                dbContext.MASTER_FUNDING_AGENCY.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditFundingAgency(FundingAgencyViewModel fundingModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = fundingModel.EncryptedFundCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                fundCode = Convert.ToInt32(decryptedParameters["FundCode"].ToString());

                int recordCount = dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_NAME.ToUpper() == fundingModel.MAST_FUNDING_AGENCY_NAME.ToUpper() && m.MAST_FUNDING_AGENCY_CODE != fundCode).Count();
                if (recordCount > 0)
                {
                    message = "Funding Agency name already exist.";
                    return false;
                }

                MASTER_FUNDING_AGENCY master = dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == fundCode).FirstOrDefault();


                master.MAST_FUNDING_AGENCY_NAME = fundingModel.MAST_FUNDING_AGENCY_NAME;

                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public FundingAgencyViewModel EditFundingAgency(string id)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int fundCode = Convert.ToInt32(id);
                MASTER_FUNDING_AGENCY master = dbContext.MASTER_FUNDING_AGENCY.Find(fundCode);
                if (master != null)
                {
                    FundingAgencyViewModel model = new FundingAgencyViewModel();
                    model.MAST_FUNDING_AGENCY_CODE = master.MAST_FUNDING_AGENCY_CODE;
                    model.MAST_FUNDING_AGENCY_NAME = master.MAST_FUNDING_AGENCY_NAME;
                    return model;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public FundingAgencyViewModel GetFundingAgencyDetails(int fundCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_FUNDING_AGENCY master = dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == fundCode).FirstOrDefault();
                FundingAgencyViewModel model = null;
                if (master != null)
                {
                    model = new FundingAgencyViewModel()
                    {
                        EncryptedFundCode = URLEncrypt.EncryptParameters1(new string[] { "FundCode=" + master.MAST_FUNDING_AGENCY_CODE.ToString().Trim() }),
                        MAST_FUNDING_AGENCY_NAME = master.MAST_FUNDING_AGENCY_NAME.ToString(),
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_ROAD_CATEGORY

        public Array ListRoadCategory(int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_ROAD_CATEGORY> list = dbContext.MASTER_ROAD_CATEGORY.ToList<MASTER_ROAD_CATEGORY>();

                IQueryable<MASTER_ROAD_CATEGORY> query = list.AsQueryable<MASTER_ROAD_CATEGORY>();

                totalRecords = list.Count;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_ROAD_CAT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_ROAD_CAT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_ROAD_CAT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = query.Select(roadDetails => new
                {

                    roadDetails.MAST_ROAD_CAT_CODE,
                    roadDetails.MAST_ROAD_CAT_NAME,
                    roadDetails.MAST_ROAD_SHORT_DESC

                }).ToArray();


                return result.Select(roadDetails => new
                {
                    cell = new[]{

                    roadDetails.MAST_ROAD_CAT_NAME.ToString(),
                    roadDetails.MAST_ROAD_SHORT_DESC.ToString(),
                    roadDetails.MAST_ROAD_CAT_CODE==8?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"RoadCode="+roadDetails.MAST_ROAD_CAT_CODE.ToString().Trim()})
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteRoadCategory(int roadCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_ROAD_CATEGORY master = dbContext.MASTER_ROAD_CATEGORY.Find(roadCode);
                if (master == null)
                {
                    return false;
                }
                dbContext.MASTER_ROAD_CATEGORY.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditRoadCategory(RoadCategoryViewModel roadCategoryModel, ref string message)
        {
            int roadCode = 0;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = roadCategoryModel.EncryptedRoadCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                roadCode = Convert.ToInt32(decryptedParameters["RoadCode"].ToString());

                if (dbContext.MASTER_ROAD_CATEGORY.Where(m => m.MAST_ROAD_CAT_NAME.ToUpper() == roadCategoryModel.MAST_ROAD_CAT_NAME.ToUpper() && m.MAST_ROAD_CAT_CODE != roadCode).Any())
                {
                    message = "Road Category name already exist.";
                    return false;
                }

                MASTER_ROAD_CATEGORY master = dbContext.MASTER_ROAD_CATEGORY.Where(m => m.MAST_ROAD_CAT_CODE == roadCode).FirstOrDefault();
                master.MAST_ROAD_CAT_NAME = roadCategoryModel.MAST_ROAD_CAT_NAME;
                master.MAST_ROAD_SHORT_DESC = roadCategoryModel.MAST_ROAD_SHORT_DESC;
                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddRoadCategory(RoadCategoryViewModel model, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int recordCount = dbContext.MASTER_ROAD_CATEGORY.Where(m => m.MAST_ROAD_CAT_NAME.ToUpper() == model.MAST_ROAD_CAT_NAME.ToUpper() && m.MAST_ROAD_CAT_CODE != model.MAST_ROAD_CAT_CODE).Count();
                if (recordCount > 0)
                {
                    message = "Road Category name already exist.";
                    return false;
                }

                MASTER_ROAD_CATEGORY master = new MASTER_ROAD_CATEGORY();

                master.MAST_ROAD_CAT_CODE = dbContext.MASTER_ROAD_CATEGORY.Max(cp => (Int32?)cp.MAST_ROAD_CAT_CODE) == null ? 1 : (Int32)dbContext.MASTER_ROAD_CATEGORY.Max(cp => (Int32?)cp.MAST_ROAD_CAT_CODE) + 1;
                master.MAST_ROAD_CAT_NAME = model.MAST_ROAD_CAT_NAME;
                master.MAST_ROAD_SHORT_DESC = model.MAST_ROAD_SHORT_DESC;
                dbContext.MASTER_ROAD_CATEGORY.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public RoadCategoryViewModel EditRoadCategory(string id)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int roadId = Convert.ToInt32(id);
                MASTER_ROAD_CATEGORY master = dbContext.MASTER_ROAD_CATEGORY.Find(roadId);
                if (master != null)
                {
                    RoadCategoryViewModel model = new RoadCategoryViewModel();
                    model.MAST_ROAD_CAT_CODE = master.MAST_ROAD_CAT_CODE;
                    model.MAST_ROAD_CAT_NAME = master.MAST_ROAD_CAT_NAME;
                    model.MAST_ROAD_SHORT_DESC = master.MAST_ROAD_SHORT_DESC;
                    return model;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public RoadCategoryViewModel GetRoadDetails(int roadCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_ROAD_CATEGORY master = dbContext.MASTER_ROAD_CATEGORY.Where(m => m.MAST_ROAD_CAT_CODE == roadCode).FirstOrDefault();
                RoadCategoryViewModel model = null;
                if (master != null)
                {
                    model = new RoadCategoryViewModel()
                    {
                        EncryptedRoadCode = URLEncrypt.EncryptParameters1(new string[] { "RoadCode=" + master.MAST_ROAD_CAT_CODE.ToString().Trim() }),
                        MAST_ROAD_CAT_NAME = master.MAST_ROAD_CAT_NAME.ToString(),
                        MAST_ROAD_SHORT_DESC = master.MAST_ROAD_SHORT_DESC
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_SOIL_TYPE

        public bool AddSoilType(SoilTypeViewModel soilTypeModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_SOIL_TYPE.Where(m => m.MAST_SOIL_TYPE_NAME == soilTypeModel.MAST_SOIL_TYPE_NAME && m.MAST_SOIL_TYPE_CODE != soilTypeModel.MAST_SOIL_TYPE_CODE).Any())
                {
                    message = "Soil Type name already exist.";
                    return false;
                }

                MASTER_SOIL_TYPE master = new MASTER_SOIL_TYPE();

                master.MAST_SOIL_TYPE_CODE = dbContext.MASTER_SOIL_TYPE.Max(cp => (Int32?)cp.MAST_SOIL_TYPE_CODE) == null ? 1 : (Int32)dbContext.MASTER_SOIL_TYPE.Max(cp => (Int32?)cp.MAST_SOIL_TYPE_CODE) + 1;
                master.MAST_SOIL_TYPE_NAME = soilTypeModel.MAST_SOIL_TYPE_NAME;
                dbContext.MASTER_SOIL_TYPE.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListSoilType(int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_SOIL_TYPE> list = dbContext.MASTER_SOIL_TYPE.ToList<MASTER_SOIL_TYPE>();
                IQueryable<MASTER_SOIL_TYPE> query = list.AsQueryable<MASTER_SOIL_TYPE>();
                totalRecords = query.Count();


                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_SOIL_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_SOIL_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_SOIL_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = query.Select(soilDetails => new
                {

                    soilDetails.MAST_SOIL_TYPE_CODE,
                    soilDetails.MAST_SOIL_TYPE_NAME
                }).ToArray();
                return result.Select(soilDetails => new
                {
                    cell = new[] {
                    soilDetails.MAST_SOIL_TYPE_NAME,
                    URLEncrypt.EncryptParameters1(new string[]{"SoilCode="+soilDetails.MAST_SOIL_TYPE_CODE.ToString().Trim()})
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteSoilType(int soilCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_SOIL_TYPE master = dbContext.MASTER_SOIL_TYPE.Find(soilCode);
                if (master == null)
                {
                    return false;
                }
                dbContext.MASTER_SOIL_TYPE.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditSoilType(SoilTypeViewModel soilTypeModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int soilCode = 0;
                encryptedParameters = soilTypeModel.EncryptedSoilCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                soilCode = Convert.ToInt32(decryptedParameters["SoilCode"].ToString());

                int recordCount = dbContext.MASTER_SOIL_TYPE.Where(m => m.MAST_SOIL_TYPE_NAME.ToUpper() == soilTypeModel.MAST_SOIL_TYPE_NAME.ToUpper() && m.MAST_SOIL_TYPE_CODE != soilCode).Count();
                if (recordCount > 0)
                {
                    message = "Soil Type name already exist.";
                    return false;
                }

                MASTER_SOIL_TYPE master = dbContext.MASTER_SOIL_TYPE.Where(m => m.MAST_SOIL_TYPE_CODE == soilCode).FirstOrDefault();

                master.MAST_SOIL_TYPE_NAME = soilTypeModel.MAST_SOIL_TYPE_NAME;

                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public SoilTypeViewModel GetSoilDetails(int soilCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_SOIL_TYPE master = dbContext.MASTER_SOIL_TYPE.Where(m => m.MAST_SOIL_TYPE_CODE == soilCode).FirstOrDefault();
                SoilTypeViewModel model = null;
                if (master != null)
                {
                    model = new SoilTypeViewModel()
                    {
                        EncryptedSoilCode = URLEncrypt.EncryptParameters1(new string[] { "SoilCode=" + master.MAST_SOIL_TYPE_CODE.ToString().Trim() }),
                        MAST_SOIL_TYPE_NAME = master.MAST_SOIL_TYPE_NAME.ToString(),
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_TRAFFIC_TYPE

        public bool AddTrafficType(TrafficTypeViewModel trafficModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_TRAFFIC_TYPE.Where(m => m.MAST_TRAFFIC_NAME.ToUpper() == trafficModel.MAST_TRAFFIC_NAME.ToUpper() && m.MAST_TRAFFIC_CODE != trafficModel.MAST_TRAFFIC_CODE).Any())
                {
                    message = "Traffic Type name already exist.";
                    return false;
                }

                MASTER_TRAFFIC_TYPE master = new MASTER_TRAFFIC_TYPE();
                master.MAST_TRAFFIC_CODE = dbContext.MASTER_TRAFFIC_TYPE.Max(cp => (Int32?)cp.MAST_TRAFFIC_CODE) == null ? 1 : (Int32)dbContext.MASTER_TRAFFIC_TYPE.Max(cp => (Int32?)cp.MAST_TRAFFIC_CODE) + 1;
                master.MAST_TRAFFIC_NAME = trafficModel.MAST_TRAFFIC_NAME;
                master.MAST_TRAFFIC_STATUS = "Y";
                dbContext.MASTER_TRAFFIC_TYPE.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListTrafficType(string statusType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //List<MASTER_TRAFFIC_TYPE> list = dbContext.MASTER_TRAFFIC_TYPE.ToList<MASTER_TRAFFIC_TYPE>();
                //IQueryable<MASTER_TRAFFIC_TYPE> query = list.AsQueryable<MASTER_TRAFFIC_TYPE>();
                var listTraffic = (from list in dbContext.MASTER_TRAFFIC_TYPE
                                   where
                                   (statusType == "%" ? "1" : list.MAST_TRAFFIC_STATUS) == (statusType == "%" ? "1" : statusType)
                                   select new
                                   {
                                       list.MAST_TRAFFIC_NAME,
                                       list.MAST_TRAFFIC_STATUS,
                                       list.MAST_TRAFFIC_CODE

                                   }).ToList();

                totalRecords = listTraffic.Count;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_TRAFFIC_NAME":
                                // query = query.OrderBy(x => x.MAST_TRAFFIC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                listTraffic = listTraffic.OrderBy(x => x.MAST_TRAFFIC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_TRAFFIC_STATUS":
                                listTraffic = listTraffic.OrderBy(x => x.MAST_TRAFFIC_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                listTraffic = listTraffic.OrderByDescending(x => x.MAST_TRAFFIC_STATUS).ThenBy(x => x.MAST_TRAFFIC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_TRAFFIC_NAME":
                                listTraffic = listTraffic.OrderByDescending(x => x.MAST_TRAFFIC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_TRAFFIC_STATUS":
                                listTraffic = listTraffic.OrderByDescending(x => x.MAST_TRAFFIC_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                break;
                        }


                    }
                }
                else
                {
                    listTraffic = listTraffic.OrderByDescending(x => x.MAST_TRAFFIC_STATUS).ThenBy(x => x.MAST_TRAFFIC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = listTraffic.Select(trafficDetails => new
                {

                    trafficDetails.MAST_TRAFFIC_CODE,
                    trafficDetails.MAST_TRAFFIC_NAME,
                    trafficDetails.MAST_TRAFFIC_STATUS

                }).ToArray();

                return result.Select(trafficDetails => new
                {
                    cell = new[]{

                    trafficDetails.MAST_TRAFFIC_NAME.ToString(),
                    trafficDetails.MAST_TRAFFIC_STATUS.ToString().Trim() == "Y"?"Active":"Inactive",
                   // "<a href='#' class='ui-icon ui-icon-closethick' onClick=changeType('"+URLEncrypt.EncryptParameters1(new string[]{"TrafficCode =" + trafficDetails.MAST_TRAFFIC_CODE.ToString().Trim()})+"')>"+(trafficDetails.MAST_TRAFFIC_STATUS=="Y"?"Not in use":"In use")+"</a>",
              
                 "<a href='#'  onClick=changeType('"+URLEncrypt.EncryptParameters1(new string[]{"TrafficCode =" + trafficDetails.MAST_TRAFFIC_CODE.ToString().Trim()})+"')>"+(trafficDetails.MAST_TRAFFIC_STATUS=="Y"?"<center><span class='ui-icon ui-icon-circle-close' title='Inactive' ></span></center>":"<center><span class='ui-icon  ui-icon-circle-check' title='Active' ></span></center>")+"</a>",

                    URLEncrypt.EncryptParameters1(new string[]{"TrafficCode =" + trafficDetails.MAST_TRAFFIC_CODE.ToString().Trim()}),
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        public bool DeleteTrafficType(int trafficCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_TRAFFIC_TYPE master = dbContext.MASTER_TRAFFIC_TYPE.Find(trafficCode);
                dbContext.MASTER_TRAFFIC_TYPE.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditTrafficType(TrafficTypeViewModel trafficModel, ref string message)
        {
            int trafficCode = 0;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = trafficModel.EncryptedStateCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                trafficCode = Convert.ToInt32(decryptedParameters["TrafficCode"].ToString());

                int recordCount = dbContext.MASTER_TRAFFIC_TYPE.Where(m => m.MAST_TRAFFIC_NAME.ToUpper() == trafficModel.MAST_TRAFFIC_NAME.ToUpper() && m.MAST_TRAFFIC_CODE != trafficCode).Count();

                if (recordCount > 0)
                {
                    message = "Traffic Type name already exist.";
                    return false;
                }

                MASTER_TRAFFIC_TYPE master = dbContext.MASTER_TRAFFIC_TYPE.Where(m => m.MAST_TRAFFIC_CODE == trafficCode).FirstOrDefault();


                master.MAST_TRAFFIC_NAME = trafficModel.MAST_TRAFFIC_NAME;


                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public TrafficTypeViewModel EditTrafficType(string id)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int trafficCode = Convert.ToInt32(id);
                MASTER_TRAFFIC_TYPE master = dbContext.MASTER_TRAFFIC_TYPE.Find(trafficCode);
                if (master != null)
                {
                    TrafficTypeViewModel model = new TrafficTypeViewModel();
                    model.MAST_TRAFFIC_CODE = master.MAST_TRAFFIC_CODE;
                    model.MAST_TRAFFIC_NAME = master.MAST_TRAFFIC_NAME;
                    model.MAST_TRAFFIC_STATUS = master.MAST_TRAFFIC_STATUS;
                    return model;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public TrafficTypeViewModel GetTrafficDetails(int trafficCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_TRAFFIC_TYPE master = dbContext.MASTER_TRAFFIC_TYPE.Where(m => m.MAST_TRAFFIC_CODE == trafficCode).FirstOrDefault();
                TrafficTypeViewModel model = null;
                if (master != null)
                {
                    model = new TrafficTypeViewModel()
                    {
                        EncryptedStateCode = URLEncrypt.EncryptParameters1(new string[] { "TrafficCode=" + master.MAST_TRAFFIC_CODE.ToString().Trim() }),
                        MAST_TRAFFIC_NAME = master.MAST_TRAFFIC_NAME.ToString(),
                        MAST_TRAFFIC_STATUS = master.MAST_TRAFFIC_STATUS
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool ChangeTrafficType(int trafficCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_TRAFFIC_TYPE master = dbContext.MASTER_TRAFFIC_TYPE.Find(trafficCode);

                if (master.MAST_TRAFFIC_STATUS == "Y")
                {
                    master.MAST_TRAFFIC_STATUS = "N";
                }
                else
                {
                    master.MAST_TRAFFIC_STATUS = "Y";
                }
                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_CONTRACTOR

        //public bool checkPan_Tan(string message)
        //{
        //    if (message == "P")
        //    {
        //        var filter = "^([a-zA-Z]){5}([0-9]){4}([a-zA-Z]){1}?$";
        //        if (filter.(message))
        //        {
        //            return true;
        //        }
        //        else
        //        {
        //            return false;
        //        }
        //    }
        //    else
        //    {
        //        var filter = "^([a-zA-Z]){4}([0-9]){5}([a-zA-Z]){1}?$";
        //        if (filter.test(message))
        //        {
        //            return true;
        //        }
        //        else
        //        {
        //            return false;
        //        }

        //    }
        //}

        public bool AddContractor(MasterContractorViewModel model, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_CONTRACTOR.Where(m => m.MAST_CON_PAN.ToUpper() == model.MAST_CON_PAN.ToUpper() && m.MAST_CON_ID != model.MAST_CON_ID).Any())
                {
                    message = "PAN number already exist.";
                    return false;
                }

                // Added on 20 April 2020
                if (string.IsNullOrEmpty(model.MAST_CON_PAN.ToUpper()))
                {
                    message = "PAN Number can not be empty.";
                    return false;
                }
                else if (model.MAST_CON_PAN.Length != 10)
                {
                    message = "PAN Number is not valid. PAN Length is Invalid";
                    return false;
                }
                else
                {
                    Regex regex = new Regex("([A-Z]){5}([0-9]){4}([A-Z]){1}$");
                    //if (!regex.IsMatch(model.MAST_CON_PAN.ToUpper()))
                    if (string.Equals(model.MAST_CON_SUP_FLAG, "C") && !regex.IsMatch(model.MAST_CON_PAN.ToUpper()))
                    {
                        message = model.MAST_CON_PAN.ToUpper() + " This PAN Number is not in correct format.";
                        return false;
                    }
                }
                // Added on 20 April 2020




                MASTER_CONTRACTOR master = new MASTER_CONTRACTOR();

                master.MAST_CON_ID = dbContext.MASTER_CONTRACTOR.Max(cp => (Int32?)cp.MAST_CON_ID) == null ? 1 : (Int32)dbContext.MASTER_CONTRACTOR.Max(cp => (Int32?)cp.MAST_CON_ID) + 1;
                master.MAST_CON_ADDR1 = (model.MAST_CON_ADDR1 == null ? null : model.MAST_CON_ADDR1.ToString());
                master.MAST_CON_ADDR2 = (model.MAST_CON_ADDR2 == null ? null : model.MAST_CON_ADDR2.ToString());
                master.MAST_CON_COMPANY_NAME = (model.MAST_CON_COMPANY_NAME == null ? null : model.MAST_CON_COMPANY_NAME.ToString());
                master.MAST_CON_EMAIL = (model.MAST_CON_EMAIL == null ? null : model.MAST_CON_EMAIL);
                master.MAST_CON_EXPIRY_DATE = model.MAST_CON_EXPIRY_DATE == string.Empty ? null : ConvertStringToDate(model.MAST_CON_EXPIRY_DATE);
                master.MAST_CON_FAX = (model.MAST_CON_FAX == null ? null : model.MAST_CON_FAX.ToString());
                master.MAST_CON_FNAME = (model.MAST_CON_FNAME == null ? string.Empty : model.MAST_CON_FNAME);
                master.MAST_CON_LEGAL_HEIR_FNAME = (model.MAST_CON_LEGAL_HEIR_FNAME == null ? null : model.MAST_CON_LEGAL_HEIR_FNAME.ToString());
                master.MAST_CON_LEGAL_HEIR_LNAME = (model.MAST_CON_LEGAL_HEIR_LNAME == null ? null : model.MAST_CON_LEGAL_HEIR_LNAME.ToString());
                master.MAST_CON_LEGAL_HEIR_MNAME = (model.MAST_CON_LEGAL_HEIR_MNAME == null ? null : model.MAST_CON_LEGAL_HEIR_MNAME.ToString());
                master.MAST_CON_LNAME = (model.MAST_CON_LNAME == null ? null : model.MAST_CON_LNAME.ToString());
                master.MAST_CON_MNAME = (model.MAST_CON_MNAME == null ? null : model.MAST_CON_MNAME.ToString());
                master.MAST_CON_MOBILE = (model.MAST_CON_MOBILE == null ? null : model.MAST_CON_MOBILE.ToString());
                master.MAST_CON_PAN = (model.MAST_CON_PAN == null ? null : model.MAST_CON_PAN.ToString());
                master.MAST_CON_PHONE1 = (model.MAST_CON_PHONE1 == null ? null : model.MAST_CON_PHONE1.ToString());
                master.MAST_CON_PHONE2 = (model.MAST_CON_PHONE2 == null ? null : model.MAST_CON_PHONE2.ToString());
                master.MAST_CON_PIN = (model.MAST_CON_PIN == null ? null : model.MAST_CON_PIN.ToString());
                master.MAST_CON_REMARKS = (model.MAST_CON_REMARKS == null ? null : model.MAST_CON_REMARKS.ToString());
                master.MAST_CON_STATUS = "A";
                master.MAST_CON_STD_FAX = (model.MAST_CON_STD_FAX == null ? null : model.MAST_CON_STD_FAX.ToString());
                master.MAST_CON_STD1 = (model.MAST_CON_STD1 == null ? null : model.MAST_CON_STD1.ToString());
                master.MAST_CON_STD2 = (model.MAST_CON_STD2 == null ? null : model.MAST_CON_STD2.ToString());
                master.MAST_CON_SUP_FLAG = model.MAST_CON_SUP_FLAG.ToString();
                master.MAST_DISTRICT_CODE_ADDR = model.MAST_DISTRICT_CODE_ADDR;
                master.MAST_STATE_CODE_ADDR = model.MAST_STATE_CODE_ADDR;
                master.MAST_LOCK_STATUS = "N";
                //added by Pradip Patil [11/05/2017 6:50 PM]
                //master.MAST_CON_AADHAR = model.AadharNumber.ToString();

                //Added by abhishek kamble 27-nov-2013
                master.USERID = PMGSYSession.Current.UserId;
                master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.MASTER_CONTRACTOR.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_STATE> GetAllStates()
        {
            try
            {
                dbContext = new PMGSYEntities();
                return dbContext.MASTER_STATE.ToList<MASTER_STATE>();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_DISTRICT> GetAllDistricts(int stateCode)
        {
            try
            {

                dbContext = new PMGSYEntities();
                List<MASTER_DISTRICT> list = dbContext.MASTER_DISTRICT.Where(m => m.MAST_STATE_CODE == stateCode).ToList<MASTER_DISTRICT>();
                return list;


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        //added by ujjwal saket on25-10-2013 to display list of mapped district in Other Agencies

        public List<MASTER_DISTRICT> GetAllDistricts(int stateCode, int adminCode)
        {
            try
            {

                dbContext = new PMGSYEntities();

                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(x => x.ADMIN_ND_CODE == adminCode).Select(x => x.MAST_AGENCY_CODE).FirstOrDefault();
                string agencyType = dbContext.MASTER_AGENCY.Where(x => x.MAST_AGENCY_CODE == agencyCode).Select(x => x.MAST_AGENCY_TYPE).FirstOrDefault();

                if (agencyType == "G")
                {
                    List<MASTER_DISTRICT> list = dbContext.MASTER_DISTRICT.Where(m => m.MAST_STATE_CODE == stateCode).ToList<MASTER_DISTRICT>();
                    return list;
                }
                else
                {

                    List<MASTER_DISTRICT> list = (from aad in dbContext.ADMIN_AGENCY_DISTRICT
                                                  join md in dbContext.MASTER_DISTRICT on aad.MAST_DISTRICT_CODE equals md.MAST_DISTRICT_CODE
                                                  where aad.ADMIN_ND_CODE == adminCode
                                                  select md).ToList<MASTER_DISTRICT>();

                    return list;



                }


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }//finish addition

        //added by ujjwal saket on25-10-2013 to display list of mapped district in Other Agencies

        public List<MASTER_DISTRICT> GetAllDistrictsByAdminNDCode(int stateCode, int adminCode)
        {
            try
            {

                dbContext = new PMGSYEntities();

                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(x => x.ADMIN_ND_CODE == adminCode).Select(x => x.MAST_AGENCY_CODE).FirstOrDefault();
                string agencyType = dbContext.MASTER_AGENCY.Where(x => x.MAST_AGENCY_CODE == agencyCode).Select(x => x.MAST_AGENCY_TYPE).FirstOrDefault();

                if (agencyType != "O")
                {
                    List<MASTER_DISTRICT> list = dbContext.MASTER_DISTRICT.Where(m => m.MAST_STATE_CODE == stateCode && m.MAST_DISTRICT_ACTIVE == "Y").ToList<MASTER_DISTRICT>();
                    return list;
                }
                else
                {

                    List<MASTER_DISTRICT> list = (from aad in dbContext.ADMIN_AGENCY_DISTRICT
                                                  join md in dbContext.MASTER_DISTRICT on aad.MAST_DISTRICT_CODE equals md.MAST_DISTRICT_CODE
                                                  where aad.ADMIN_ND_CODE == adminCode &&
                                                         md.MAST_DISTRICT_ACTIVE == "Y"
                                                  select md).ToList<MASTER_DISTRICT>();

                    return list;



                }


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }//finish addition

        public List<Models.MASTER_DISTRICT> GetAllDistrictsByStateCode(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<Models.MASTER_DISTRICT> districtList = dbContext.MASTER_DISTRICT.Where(d => d.MAST_STATE_CODE == stateCode && d.MAST_DISTRICT_ACTIVE == "Y").OrderBy(d => d.MAST_DISTRICT_NAME).ToList<Models.MASTER_DISTRICT>();



                return districtList;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public MasterContractorViewModel EditContractor(int id)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CONTRACTOR master = dbContext.MASTER_CONTRACTOR.Where(m => m.MAST_CON_ID == id).FirstOrDefault();
                MasterContractorViewModel model = null;
                if (master != null)
                {

                    model = new MasterContractorViewModel()
                    {
                        EncryptedContractorCode = URLEncrypt.EncryptParameters1(new string[] { "ContractorCode=" + master.MAST_CON_ID.ToString().Trim() }),
                        MAST_CON_ADDR1 = (master.MAST_CON_ADDR1 == null ? string.Empty : master.MAST_CON_ADDR1.ToString()),
                        MAST_CON_ADDR2 = (master.MAST_CON_ADDR2 == null ? string.Empty : master.MAST_CON_ADDR2.ToString()),
                        MAST_CON_COMPANY_NAME = (master.MAST_CON_COMPANY_NAME == null ? string.Empty : master.MAST_CON_COMPANY_NAME.ToString()),
                        MAST_CON_EMAIL = (master.MAST_CON_EMAIL == null ? string.Empty : master.MAST_CON_EMAIL.ToString()),
                        MAST_CON_EXPIRY_DATE = master.MAST_CON_EXPIRY_DATE == null ? string.Empty : Convert.ToDateTime(master.MAST_CON_EXPIRY_DATE).ToString("dd/MM/yyyy"), //== null?string.Empty:(Convert.ToDateTime(master.MAST_CON_EXPIRY_DATE)),
                        MAST_CON_FAX = (master.MAST_CON_FAX == null ? string.Empty : master.MAST_CON_FAX.ToString()),
                        MAST_CON_FNAME = (master.MAST_CON_FNAME == null ? string.Empty : master.MAST_CON_FNAME.ToString()),
                        MAST_CON_LEGAL_HEIR_FNAME = (master.MAST_CON_LEGAL_HEIR_FNAME == null ? string.Empty : master.MAST_CON_LEGAL_HEIR_FNAME.ToString()),
                        MAST_CON_LEGAL_HEIR_LNAME = (master.MAST_CON_LEGAL_HEIR_LNAME == null ? string.Empty : master.MAST_CON_LEGAL_HEIR_LNAME.ToString()),
                        MAST_CON_LEGAL_HEIR_MNAME = (master.MAST_CON_LEGAL_HEIR_MNAME == null ? string.Empty : master.MAST_CON_LEGAL_HEIR_MNAME.ToString()),
                        MAST_CON_LNAME = (master.MAST_CON_LNAME == null ? string.Empty : master.MAST_CON_LNAME.ToString()),
                        MAST_CON_MNAME = (master.MAST_CON_MNAME == null ? string.Empty : master.MAST_CON_MNAME.ToString()),
                        MAST_CON_MOBILE = (master.MAST_CON_MOBILE == null ? string.Empty : master.MAST_CON_MOBILE.ToString()),
                        MAST_CON_PAN = (master.MAST_CON_PAN == null ? string.Empty : master.MAST_CON_PAN.ToString()),
                        MAST_CON_PHONE1 = (master.MAST_CON_PHONE1 == null ? string.Empty : master.MAST_CON_PHONE1.ToString()),
                        MAST_CON_PHONE2 = (master.MAST_CON_PHONE2 == null ? string.Empty : master.MAST_CON_PHONE2.ToString()),
                        MAST_CON_PIN = (master.MAST_CON_PIN == null ? string.Empty : master.MAST_CON_PIN.ToString()),
                        MAST_CON_REMARKS = (master.MAST_CON_REMARKS == null ? string.Empty : master.MAST_CON_REMARKS.ToString()),
                        MAST_CON_STATUS = (master.MAST_CON_STATUS == null ? string.Empty : master.MAST_CON_STATUS.ToString()),
                        MAST_CON_STD_FAX = (master.MAST_CON_STD_FAX == null ? string.Empty : master.MAST_CON_STD_FAX.ToString()),
                        MAST_CON_STD1 = (master.MAST_CON_STD1 == null ? string.Empty : master.MAST_CON_STD1.ToString()),
                        MAST_CON_STD2 = (master.MAST_CON_STD2 == null ? string.Empty : master.MAST_CON_STD2.ToString()),
                        MAST_CON_SUP_FLAG = (master.MAST_CON_SUP_FLAG == null ? string.Empty : master.MAST_CON_SUP_FLAG.ToString()),
                        MAST_DISTRICT_CODE_ADDR = master.MAST_DISTRICT_CODE_ADDR,
                        MAST_STATE_CODE_ADDR = master.MAST_STATE_CODE_ADDR,
                        Mast_Con_Status_Flag = master.MAST_CON_STATUS,
                        //AadharNumber = master.MAST_CON_AADHAR ?? String.Empty,  //Added By Pradip Patil [12/05/2017]
                    };

                    model.DistrictName = dbContext.MASTER_DISTRICT.Where(m => m.MAST_DISTRICT_CODE == model.MAST_DISTRICT_CODE_ADDR).Select(m => m.MAST_DISTRICT_NAME).FirstOrDefault();
                    model.StateName = dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.MAST_STATE_CODE_ADDR).Select(m => m.MAST_STATE_NAME).FirstOrDefault();

                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterContractorViewModel CloneObject(MASTER_CONTRACTOR master)
        {
            try
            {
                MasterContractorViewModel model = new MasterContractorViewModel();
                model.MAST_CON_ADDR1 = master.MAST_CON_ADDR1;
                model.MAST_CON_ADDR2 = master.MAST_CON_ADDR2;
                model.MAST_CON_COMPANY_NAME = master.MAST_CON_COMPANY_NAME;
                model.MAST_CON_EMAIL = master.MAST_CON_EMAIL;
                model.MAST_CON_EXPIRY_DATE = Convert.ToDateTime(master.MAST_CON_EXPIRY_DATE).ToString("dd/MM/yyyy");
                model.MAST_CON_FAX = master.MAST_CON_FAX;
                model.MAST_CON_FNAME = master.MAST_CON_FNAME;
                model.MAST_CON_LEGAL_HEIR_FNAME = master.MAST_CON_LEGAL_HEIR_FNAME;
                model.MAST_CON_LEGAL_HEIR_LNAME = master.MAST_CON_LEGAL_HEIR_LNAME;
                model.MAST_CON_LEGAL_HEIR_MNAME = master.MAST_CON_LEGAL_HEIR_MNAME;
                model.MAST_CON_LNAME = master.MAST_CON_LNAME;
                model.MAST_CON_MNAME = master.MAST_CON_MNAME;
                model.MAST_CON_MOBILE = master.MAST_CON_MOBILE;
                model.MAST_CON_PAN = master.MAST_CON_PAN;
                model.MAST_CON_PHONE1 = master.MAST_CON_PHONE1;
                model.MAST_CON_PHONE2 = master.MAST_CON_PHONE2;
                model.MAST_CON_PIN = master.MAST_CON_PIN;
                model.MAST_CON_REMARKS = master.MAST_CON_REMARKS;
                model.MAST_CON_STATUS = master.MAST_CON_STATUS;
                model.MAST_CON_STD_FAX = master.MAST_CON_STD_FAX;
                model.MAST_CON_STD1 = master.MAST_CON_STD1;
                model.MAST_CON_STD2 = master.MAST_CON_STD2;
                model.MAST_CON_SUP_FLAG = master.MAST_CON_SUP_FLAG;
                model.MAST_DISTRICT_CODE_ADDR = master.MAST_DISTRICT_CODE_ADDR;
                model.MAST_STATE_CODE_ADDR = master.MAST_STATE_CODE_ADDR;
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public MASTER_CONTRACTOR CloneModel(MASTER_CONTRACTOR master, MasterContractorViewModel model)
        {
            try
            {

                master.MAST_CON_ADDR1 = (model.MAST_CON_ADDR1 == null ? null : model.MAST_CON_ADDR1.ToString());
                master.MAST_CON_ADDR2 = (model.MAST_CON_ADDR2 == null ? null : model.MAST_CON_ADDR2.ToString());
                master.MAST_CON_COMPANY_NAME = (model.MAST_CON_COMPANY_NAME == null ? null : model.MAST_CON_COMPANY_NAME.ToString());
                master.MAST_CON_EMAIL = (model.MAST_CON_EMAIL == null ? null : model.MAST_CON_EMAIL);
                master.MAST_CON_EXPIRY_DATE = model.MAST_CON_EXPIRY_DATE == string.Empty ? null : ConvertStringToDate(model.MAST_CON_EXPIRY_DATE); //Convert.ToDateTime(model.MAST_CON_EXPIRY_DATE);
                master.MAST_CON_FAX = (model.MAST_CON_FAX == null ? null : model.MAST_CON_FAX.ToString());
                master.MAST_CON_FNAME = (model.MAST_CON_FNAME == null ? null : model.MAST_CON_FNAME);
                master.MAST_CON_LEGAL_HEIR_FNAME = (model.MAST_CON_LEGAL_HEIR_FNAME == null ? null : model.MAST_CON_LEGAL_HEIR_FNAME.ToString());
                master.MAST_CON_LEGAL_HEIR_LNAME = (model.MAST_CON_LEGAL_HEIR_LNAME == null ? null : model.MAST_CON_LEGAL_HEIR_LNAME.ToString());
                master.MAST_CON_LEGAL_HEIR_MNAME = (model.MAST_CON_LEGAL_HEIR_MNAME == null ? null : model.MAST_CON_LEGAL_HEIR_MNAME.ToString());
                master.MAST_CON_LNAME = (model.MAST_CON_LNAME == null ? null : model.MAST_CON_LNAME.ToString());
                master.MAST_CON_MNAME = (model.MAST_CON_MNAME == null ? null : model.MAST_CON_MNAME.ToString());
                master.MAST_CON_MOBILE = (model.MAST_CON_MOBILE == null ? null : model.MAST_CON_MOBILE.ToString());
                master.MAST_CON_PAN = (model.MAST_CON_PAN == null ? null : model.MAST_CON_PAN.ToString());
                master.MAST_CON_PHONE1 = (model.MAST_CON_PHONE1 == null ? null : model.MAST_CON_PHONE1.ToString());
                master.MAST_CON_PHONE2 = (model.MAST_CON_PHONE2 == null ? null : model.MAST_CON_PHONE2.ToString());
                master.MAST_CON_PIN = (model.MAST_CON_PIN == null ? null : model.MAST_CON_PIN.ToString());
                master.MAST_CON_REMARKS = (model.MAST_CON_REMARKS == null ? null : model.MAST_CON_REMARKS.ToString());

                master.MAST_CON_STD_FAX = (model.MAST_CON_STD_FAX == null ? null : model.MAST_CON_STD_FAX.ToString());
                master.MAST_CON_STD1 = (model.MAST_CON_STD1 == null ? null : model.MAST_CON_STD1.ToString());
                master.MAST_CON_STD2 = (model.MAST_CON_STD2 == null ? null : model.MAST_CON_STD2.ToString());
                master.MAST_CON_SUP_FLAG = model.MAST_CON_SUP_FLAG.ToString();
                master.MAST_STATE_CODE_ADDR = model.MAST_STATE_CODE_ADDR;  //change by deepak 1 july 2014
                master.MAST_DISTRICT_CODE_ADDR = model.MAST_DISTRICT_CODE_ADDR; //change by deepak 1 july 2014

                //added by Pradip Patil [11/05/2017 7:20 PM]
                //master.MAST_CON_AADHAR = model.AadharNumber ?? null;

                //Added by abhishek kamble 27-nov-2013
                master.USERID = PMGSYSession.Current.UserId;
                master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                //Added by abhishek kamble 4-Apr-2014
                master.MAST_CON_STATUS = model.Mast_Con_Status_Flag;

                return master;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public bool EditContractor(MasterContractorViewModel model, ref string message)
        {
            int contractorCode = 0;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = model.EncryptedContractorCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                contractorCode = Convert.ToInt32(decryptedParameters["ContractorCode"].ToString());


                int recordCount = dbContext.MASTER_CONTRACTOR.Where(m => m.MAST_CON_PAN.ToUpper() == model.MAST_CON_PAN.ToUpper() && m.MAST_CON_ID != contractorCode).Count();
                if (recordCount > 0)
                {
                    message = "PAN number already exist.";
                    return false;
                }

                //changed by vikky [06-01-2022]
                if (dbContext.REAT_CONTRACTOR_DETAILS.Any(m => m.MAST_CON_ID == contractorCode && m.reat_STATUS != null && m.reat_STATUS == "A") && model.xmlRelaxationStatus == false)
                {
                    message = "You can not update this Contractor/Supplier details. These details are used in REAT.";
                    return false;
                    // return Json(new { success = "false", message = "You can not delete this Contractor/Supplier details. These details are used in REAT." }, JsonRequestBehavior.AllowGet);
                }




                // Added on 20 April 2020
                if (string.IsNullOrEmpty(model.MAST_CON_PAN.ToUpper()))
                {
                    message = "PAN Number can not be empty.";
                    return false;
                }
                else if (model.MAST_CON_PAN.Length != 10)
                {
                    message = "PAN Number is not valid. PAN Length is Invalid";
                    return false;
                }
                else
                {
                    Regex regex = new Regex("([A-Z]){5}([0-9]){4}([A-Z]){1}$");
                    if (!regex.IsMatch(model.MAST_CON_PAN.ToUpper()))
                    {
                        message = model.MAST_CON_PAN.ToUpper() + " This PAN Number is not in correct format.";
                        return false;
                    }
                }
                // Added on 20 April 2020



                MASTER_CONTRACTOR master = dbContext.MASTER_CONTRACTOR.Where(m => m.MAST_CON_ID == contractorCode).FirstOrDefault();
                master = CloneModel(master, model);


                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public Array ListContractor(int page, int rows, string sidx, string sord, out long totalRecords)
        {

            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_CONTRACTOR> list = dbContext.MASTER_CONTRACTOR.ToList<MASTER_CONTRACTOR>();
                IQueryable<MASTER_CONTRACTOR> query = list.AsQueryable<MASTER_CONTRACTOR>();

                totalRecords = list.Count;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = query.Select(contractorDetails => new
                {
                    contractorDetails.MAST_CON_ID,
                    contractorDetails.MAST_CON_FNAME,
                    contractorDetails.MAST_CON_MNAME,
                    contractorDetails.MAST_CON_LNAME,
                    contractorDetails.MAST_CON_ADDR1,
                    contractorDetails.MAST_CON_ADDR2,
                    contractorDetails.MAST_CON_COMPANY_NAME,
                    contractorDetails.MAST_CON_EMAIL,
                    contractorDetails.MAST_CON_MOBILE,
                    contractorDetails.MAST_CON_PAN,
                    contractorDetails.MAST_DISTRICT_CODE_ADDR,
                    contractorDetails.MAST_STATE_CODE_ADDR,
                    contractorDetails.MAST_LOCK_STATUS

                }).ToArray();

                return result.Select(contractorDetails => new
                {
                    cell = new[] {
                contractorDetails.MAST_CON_FNAME.ToString(),
                contractorDetails.MAST_CON_MNAME.ToString(),
                contractorDetails.MAST_CON_LNAME.ToString(),
                contractorDetails.MAST_CON_ADDR1.ToString(),
                contractorDetails.MAST_CON_ADDR2.ToString(),
                contractorDetails.MAST_CON_COMPANY_NAME.ToString(),
                contractorDetails.MAST_CON_EMAIL.ToString(),
                contractorDetails.MAST_CON_MOBILE.ToString(),
                contractorDetails.MAST_CON_PAN.ToString(),
                contractorDetails.MAST_DISTRICT_CODE_ADDR.ToString(),
                contractorDetails.MAST_STATE_CODE_ADDR.ToString(),
                URLEncrypt.EncryptParameters1(new string[]{"ContractorCode =" + contractorDetails.MAST_CON_ID.ToString().Trim()})
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetContractorList(string state, string district, string contractorName, string status, string contrsuppType, string panno, int page, int rows, string sidx, string sord, out long totalRecords, string filters)
        {
            try
            {
                string nameSearch = contractorName;
                string panSearch = panno;
                string contsuppType = contrsuppType;
                string distSearch = string.Empty;
                string comSearch = string.Empty;
                string addSearch = string.Empty;
                string stateSearch = string.Empty;
                string mobSearch = string.Empty;
                string emailSearch = string.Empty;
                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();

                int districtCode = Convert.ToInt32(district);
                int stateCode = Convert.ToInt32(state);

                PMGSYEntities dbContext = new PMGSYEntities();

                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "CONTRACTOR_NAME":
                                nameSearch = item.data;
                                break;
                            case "MAST_CON_PAN":
                                panSearch = item.data;
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                comSearch = item.data;
                                break;
                            case "ADDR":
                                addSearch = item.data;
                                break;
                            case "MAST_DISTRICT_CODE":
                                distSearch = item.data;
                                break;
                            case "MAST_STATE_NAME":
                                stateSearch = item.data;
                                break;
                            case "MAST_CON_MOBILE":
                                mobSearch = item.data;
                                break;
                            case "MAST_CON_EMAIL":
                                emailSearch = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                var list = from contractor in dbContext.MASTER_CONTRACTOR
                           join state1 in dbContext.MASTER_STATE on contractor.MAST_STATE_CODE_ADDR equals state1.MAST_STATE_CODE
                           join district1 in dbContext.MASTER_DISTRICT on contractor.MAST_DISTRICT_CODE_ADDR equals district1.MAST_DISTRICT_CODE
                           where
                           //contractor.MAST_CON_STATUS == "A" &&
                           (contractor.MAST_CON_SUP_FLAG == "S" || contractor.MAST_CON_SUP_FLAG == "C") &&
                           (districtCode == 0 ? 1 : contractor.MAST_DISTRICT_CODE_ADDR) == (districtCode == 0 ? 1 : districtCode) &&
                           (stateCode == 0 ? 1 : contractor.MAST_STATE_CODE_ADDR) == (stateCode == 0 ? 1 : stateCode) &&
                           (status == string.Empty ? "%" : contractor.MAST_CON_STATUS) == (status == string.Empty ? "%" : status) &&
                           (contsuppType == string.Empty ? "%" : contractor.MAST_CON_SUP_FLAG) == (contsuppType == string.Empty ? "%" : contsuppType) &&
                           ((nameSearch == string.Empty ? "%" : contractor.MAST_CON_FNAME).Contains(nameSearch == string.Empty ? "%" : nameSearch) ||
                           (nameSearch == string.Empty ? "%" : contractor.MAST_CON_MNAME).Contains(nameSearch == string.Empty ? "%" : nameSearch) ||
                           (nameSearch == string.Empty ? "%" : contractor.MAST_CON_LNAME).Contains(nameSearch == string.Empty ? "%" : nameSearch)) &&
                           (panSearch == string.Empty ? "%" : contractor.MAST_CON_PAN).Contains(panSearch == string.Empty ? "%" : panSearch) &&
                           (comSearch == string.Empty ? "%" : contractor.MAST_CON_COMPANY_NAME).Contains(comSearch == string.Empty ? "%" : comSearch) &&
                           (addSearch == string.Empty ? "%" : contractor.MAST_CON_ADDR1).Contains(addSearch == string.Empty ? "%" : addSearch) &&
                           (distSearch == string.Empty ? "%" : district1.MAST_DISTRICT_NAME).Contains(distSearch == string.Empty ? "%" : distSearch) &&
                           (stateSearch == string.Empty ? "%" : state1.MAST_STATE_NAME).Contains(stateSearch == string.Empty ? "%" : stateSearch) &&
                           (mobSearch == string.Empty ? "%" : contractor.MAST_CON_MOBILE).Contains(mobSearch == string.Empty ? "%" : mobSearch) &&
                           (emailSearch == string.Empty ? "%" : contractor.MAST_CON_EMAIL).Contains(emailSearch == string.Empty ? "%" : emailSearch)

                           select new
                           {
                               contractor.MAST_CON_ID,
                               contractor.MAST_CON_FNAME,
                               contractor.MAST_CON_MNAME,
                               contractor.MAST_CON_LNAME,
                               contractor.MAST_CON_PAN,
                               contractor.MAST_CON_COMPANY_NAME,
                               contractor.MAST_CON_ADDR1,
                               contractor.MAST_CON_ADDR2,
                               district1.MAST_DISTRICT_NAME,
                               state1.MAST_STATE_NAME,
                               contractor.MAST_CON_MOBILE,
                               contractor.MAST_CON_EMAIL,
                               contractor.MAST_DISTRICT_CODE_ADDR,
                               contractor.MAST_LOCK_STATUS,
                               contractor.MAST_CON_STATUS,
                               regState = contractor.MASTER_CONTRACTOR_REGISTRATION.Where(x => x.MAST_CON_ID == contractor.MAST_CON_ID).Select(x => x.MAST_REG_STATE).FirstOrDefault()
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                list = list.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "ADDR":
                                list = list.OrderBy(x => x.MAST_CON_ADDR1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_PAN":
                                list = list.OrderBy(x => x.MAST_CON_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                list = list.OrderBy(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_DISTRICT_CODE":
                                list = list.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_CODE":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_MOBILE":
                                list = list.OrderBy(x => x.MAST_CON_MOBILE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_EMAIL":
                                list = list.OrderBy(x => x.MAST_CON_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                list = list.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "ADDR":
                                list = list.OrderByDescending(x => x.MAST_CON_ADDR1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_PAN":
                                list = list.OrderByDescending(x => x.MAST_CON_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                list = list.OrderByDescending(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_DISTRICT_CODE":
                                list = list.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_CODE":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_MOBILE":
                                list = list.OrderByDescending(x => x.MAST_CON_MOBILE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_EMAIL":
                                list = list.OrderByDescending(x => x.MAST_CON_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                break;
                        }
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }

                var result = list.Select(contractorDetails => new
                {
                    contractorDetails.MAST_CON_ID,
                    contractorDetails.MAST_CON_FNAME,
                    contractorDetails.MAST_CON_MNAME,
                    contractorDetails.MAST_CON_LNAME,
                    contractorDetails.MAST_CON_PAN,
                    contractorDetails.MAST_CON_COMPANY_NAME,
                    contractorDetails.MAST_CON_ADDR1,
                    contractorDetails.MAST_CON_ADDR2,
                    contractorDetails.MAST_DISTRICT_NAME,
                    contractorDetails.MAST_STATE_NAME,
                    contractorDetails.MAST_CON_MOBILE,
                    contractorDetails.MAST_CON_EMAIL,
                    contractorDetails.MAST_DISTRICT_CODE_ADDR,
                    contractorDetails.MAST_LOCK_STATUS,
                    contractorDetails.MAST_CON_STATUS,
                    contractorDetails.regState
                }).ToArray();


                var gridData = result.Select(contractorDetails => new
                {
                    cell = new[]{
                    (contractorDetails.MAST_CON_FNAME==null?"NA":contractorDetails.MAST_CON_FNAME.ToString())+" "+(contractorDetails.MAST_CON_MNAME==null?string.Empty:contractorDetails.MAST_CON_MNAME.ToString())+" "+(contractorDetails.MAST_CON_LNAME==null?string.Empty:contractorDetails.MAST_CON_LNAME.ToString()),
                    contractorDetails.MAST_CON_STATUS=="A"?"Active": contractorDetails.MAST_CON_STATUS=="B"?"Blacklisted" :contractorDetails.MAST_CON_STATUS=="I"?"Inactive":"Exprired",
                    contractorDetails.MAST_CON_PAN==null?"NA":contractorDetails.MAST_CON_PAN.ToString(),
                    contractorDetails.MAST_CON_COMPANY_NAME==null?"NA":contractorDetails.MAST_CON_COMPANY_NAME.ToString(),

                    contractorDetails.MAST_DISTRICT_NAME==null?string.Empty:contractorDetails.MAST_DISTRICT_NAME.ToString(),
                    contractorDetails.MAST_STATE_NAME==null?string.Empty:contractorDetails.MAST_STATE_NAME.ToString(),
                    contractorDetails.MAST_CON_MOBILE==null?"NA":contractorDetails.MAST_CON_MOBILE.ToString(),
                    contractorDetails.MAST_CON_EMAIL==null?"NA":contractorDetails.MAST_CON_EMAIL.ToString(),

                     URLEncrypt.EncryptParameters1(new string[]{"ContractorCode =" + contractorDetails.MAST_CON_ID.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new string[]{"ContractorCode =" + contractorDetails.MAST_CON_ID.ToString().Trim(),"DistrictCode="+contractorDetails.MAST_DISTRICT_CODE_ADDR.ToString().Trim()}),
                   

                     // 09 Sept 2020
                    contractorDetails.MAST_LOCK_STATUS=="N"?URLEncrypt.EncryptParameters1(new string[]{"ContractorCode =" + contractorDetails.MAST_CON_ID.ToString().Trim()}):string.Empty,
                   (dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m=>m.MAST_CON_ID == contractorDetails.MAST_CON_ID).Count()>0 ||  contractorDetails.MAST_LOCK_STATUS=="Y")?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ContractorCode =" + contractorDetails.MAST_CON_ID.ToString().Trim()}),


                   URLEncrypt.EncryptParameters1(new string[]{"ContractorCode =" + contractorDetails.MAST_CON_ID.ToString().Trim(), "RegState=" + contractorDetails.regState.ToString().Trim() })
                }
                }).ToArray();

                return gridData;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteContractor(int id)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CONTRACTOR master = dbContext.MASTER_CONTRACTOR.Find(id);
                if (master == null)
                {
                    return false;
                }
                else
                {
                    var list = from item in dbContext.MASTER_CONTRACTOR_REGISTRATION
                               where item.MAST_CON_ID == id
                               select item.MAST_CON_REG_NO;
                    recordCount = list.Count();
                    if (recordCount > 0)
                    {
                        return false;
                    }

                    //Added by abhishek kamble 27-nov-2013
                    master.USERID = PMGSYSession.Current.UserId;
                    master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    dbContext.MASTER_CONTRACTOR.Remove(master);
                    dbContext.SaveChanges();
                    return true;
                }
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetContractorRegistrationList(int id, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_CONTRACTOR.Find(id) == null)
                {
                    totalRecords = 0;
                    return null;
                }
                var list = (from item in dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID == id)
                            from item2 in dbContext.MASTER_STATE
                            from item3 in dbContext.MASTER_CON_CLASS_TYPE
                            where item.MAST_REG_STATE == item2.MAST_STATE_CODE && item.MAST_CON_CLASS == item3.MAST_CON_CLASS
                            select new
                            {
                                item.MAST_REG_CODE,
                                item2.MAST_STATE_NAME,
                                item.MAST_CON_VALID_FROM,
                                item.MAST_CON_VALID_TO,
                                item.MAST_REG_OFFICE,
                                item.MAST_REG_STATUS,
                                item3.MAST_CON_CLASS_TYPE_NAME

                            }).ToList();

                totalRecords = list.Count();

                var gridData = list.Select(c => new
                {
                    cell = new[] { c.MAST_REG_CODE.ToString(), c.MAST_STATE_NAME.ToString(), Convert.ToDateTime(c.MAST_CON_VALID_FROM).ToShortDateString(), Convert.ToDateTime(c.MAST_CON_VALID_TO).ToShortDateString(), c.MAST_REG_OFFICE.ToString(), c.MAST_REG_STATUS.ToString(), c.MAST_CON_CLASS_TYPE_NAME.ToString() }
                }).ToArray();
                return gridData;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool PanNumberSearchExistDAL(string panNumber, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.MASTER_CONTRACTOR.Any(a => a.MAST_CON_PAN.ToUpper() == panNumber.Trim().ToUpper()))
                {
                    if (Regex.IsMatch(panNumber.ToString(), @"^[\w]{3}(p|P|c|C|h|H|f|F|a|A|t|T|b|B|l|L|j|J|g|G)[\w][\d]{4}[\w]$"))
                    {
                        message = "PAN Already Exist";
                    }
                    if (Regex.IsMatch(panNumber.ToString(), "^([a-zA-Z]){4}([0-9]){5}([a-zA-Z]){1}?$"))
                    {
                        message = "TAN Already Exist";
                    }
                }
                else
                {
                    if (Regex.IsMatch(panNumber.ToString(), @"^[\w]{3}(p|P|c|C|h|H|f|F|a|A|t|T|b|B|l|L|j|J|g|G)[\w][\d]{4}[\w]$"))
                    {
                        message = "Entered PAN is Valid.";
                    }
                    if (Regex.IsMatch(panNumber.ToString(), "^([a-zA-Z]){4}([0-9]){5}([a-zA-Z]){1}?$"))
                    {
                        message = "Entered TAN is Valid.";
                    }
                    //message = "Entered PAN is Valid.";
                }
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not search PAN.";
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_LOKSABHA_TERM

        public Array GetLokSabhaTermList(int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_LOK_SABHA_TERM> list = dbContext.MASTER_LOK_SABHA_TERM.ToList<MASTER_LOK_SABHA_TERM>();

                IQueryable<MASTER_LOK_SABHA_TERM> query = list.AsQueryable<MASTER_LOK_SABHA_TERM>();

                totalRecords = list.Count;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "desc")
                    {
                        switch (sidx)
                        {
                            case "MAST_LS_START_DATE":
                                query = query.OrderBy(x => x.MAST_LS_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_LS_END_DATE":
                                query = query.OrderBy(x => x.MAST_LS_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_LS_TERM":
                                query = query.OrderBy(x => x.MAST_LS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                break;
                        }


                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_LS_START_DATE":
                                query = query.OrderByDescending(x => x.MAST_LS_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_LS_END_DATE":
                                query = query.OrderByDescending(x => x.MAST_LS_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_LS_TERM":
                                query = query.OrderByDescending(x => x.MAST_LS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                break;
                        }



                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_LS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = query.Select(loksabhaDetails => new
                {
                    loksabhaDetails.MAST_LS_TERM,
                    loksabhaDetails.MAST_LS_START_DATE,
                    loksabhaDetails.MAST_LS_END_DATE,
                    loksabhaDetails.MAST_LOCK_STATUS
                }).ToArray();

                return result.Select(loksabhaDetails => new
                {
                    cell = new[]{
                    loksabhaDetails.MAST_LS_TERM.ToString(),
                    loksabhaDetails.MAST_LS_START_DATE==null?"NA":Convert.ToDateTime(loksabhaDetails.MAST_LS_START_DATE).ToString("dd/MM/yyyy"),
                    loksabhaDetails.MAST_LS_END_DATE==null?"NA":Convert.ToDateTime(loksabhaDetails.MAST_LS_END_DATE).ToString("dd/MM/yyyy"),
                    loksabhaDetails.MAST_LOCK_STATUS=="N"?URLEncrypt.EncryptParameters1(new string[]{"LokSabhaCode =" + loksabhaDetails.MAST_LS_TERM.ToString().Trim()}):string.Empty
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddLokSabhaTerm(MasterLokSabhaTermViewModel model, ref string message)
        {
            try
            {
                var sDate = model.MAST_LS_START_DATE;
                var eDate = model.MAST_LS_END_DATE;
                int? maxTerm = 0;
                //   DateTime? previousTermEndDate = null;
                MASTER_LOK_SABHA_TERM master = null;

                DateTime? startDate = ConvertStringToDate(sDate);
                DateTime? endDate = ConvertStringToDate(eDate);
                dbContext = new PMGSYEntities();

                //  int recordCount = dbContext.MASTER_LOK_SABHA_TERM.Where(m => m.MAST_LS_START_DATE == startDate && m.MAST_LS_END_DATE == endDate).Count();
                if (dbContext.MASTER_LOK_SABHA_TERM.Where(m => m.MAST_LS_START_DATE == startDate && m.MAST_LS_END_DATE == endDate).Any())
                {
                    message = "Lok Sabha Term already exist.";
                    return false;
                }

                //added by koustubh Nakate on 28-05-2013 for date validation
                if (startDate != null)
                {
                    maxTerm = dbContext.MASTER_LOK_SABHA_TERM.Max(lt => (Int32?)lt.MAST_LS_TERM);

                    if (maxTerm != null)
                    {
                        master = dbContext.MASTER_LOK_SABHA_TERM.Find(maxTerm);

                        //previousTermEndDate = dbContext.MASTER_LOK_SABHA_TERM.Where(lt => lt.MAST_LS_TERM == maxTerm).Select(lt => lt.MAST_LS_END_DATE).FirstOrDefault();

                        if (master.MAST_LS_END_DATE == null)
                        {
                            if (master.MAST_LS_START_DATE >= startDate)
                            {
                                message = "Start Date of Lok Sabha Term should be greater than Start Date of previous term.";
                                return false;
                            }
                            master.MAST_LS_END_DATE = Convert.ToDateTime(startDate).AddDays(-1);
                            dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                        else
                        {
                            if (master.MAST_LS_END_DATE >= startDate)
                            {
                                message = "Start Date of Lok Sabha Term should be greater than End Date of previous term.";
                                return false;
                            }
                        }
                    }

                }

                master = new MASTER_LOK_SABHA_TERM();


                master.MAST_LS_TERM = dbContext.MASTER_LOK_SABHA_TERM.Max(cp => (Int32?)cp.MAST_LS_TERM) == null ? 1 : (Int32)dbContext.MASTER_LOK_SABHA_TERM.Max(cp => (Int32?)cp.MAST_LS_TERM) + 1;
                master.MAST_LS_START_DATE = ConvertStringToDate(model.MAST_LS_START_DATE);
                master.MAST_LS_END_DATE = ConvertStringToDate(model.MAST_LS_END_DATE);
                master.MAST_LOCK_STATUS = "N";

                dbContext.MASTER_LOK_SABHA_TERM.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditLokSabhaTerm(MasterLokSabhaTermViewModel model, ref string message)
        {
            try
            {
                int loksabhaCode = 0;
                int? previousTerm = 0;
                int? nextTerm = 0;
                MASTER_LOK_SABHA_TERM master_LokSabhaTerm = null;
                dbContext = new PMGSYEntities();
                encryptedParameters = model.EncryptedLokSabhaTermCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                loksabhaCode = Convert.ToInt32(decryptedParameters["LokSabhaCode"].ToString());

                System.DateTime? startDate = ConvertStringToDate(model.MAST_LS_START_DATE);
                System.DateTime? endDate = ConvertStringToDate(model.MAST_LS_END_DATE);

                int recordCount = dbContext.MASTER_LOK_SABHA_TERM.Where(m => m.MAST_LS_START_DATE == startDate && m.MAST_LS_END_DATE == endDate && m.MAST_LS_TERM != loksabhaCode).Count();
                if (recordCount > 0)
                {
                    message = "Lok Sabha Term already exist.";
                    return false;
                }

                //added by koustubh Nakate on 28-05-2013 for date validation
                if (startDate != null)
                {

                    previousTerm = loksabhaCode - 1;

                    master_LokSabhaTerm = dbContext.MASTER_LOK_SABHA_TERM.Where(lt => lt.MAST_LS_TERM == previousTerm).FirstOrDefault();

                    //previousTermEndDate = dbContext.MASTER_LOK_SABHA_TERM.Where(lt => lt.MAST_LS_TERM == maxTerm).Select(lt => lt.MAST_LS_END_DATE).FirstOrDefault();

                    if (master_LokSabhaTerm != null)
                    {
                        if (master_LokSabhaTerm.MAST_LS_END_DATE == null)
                        {
                            if (master_LokSabhaTerm.MAST_LS_START_DATE >= startDate)
                            {
                                message = "Start Date of Lok Sabha Term should be greater than Start Date of previous term.";
                                return false;
                            }

                            master_LokSabhaTerm.MAST_LS_END_DATE = Convert.ToDateTime(startDate).AddDays(-1);
                            dbContext.Entry(master_LokSabhaTerm).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                        else
                        {
                            if (master_LokSabhaTerm.MAST_LS_END_DATE >= startDate)
                            {
                                message = "Start Date of Lok Sabha Term should be greater than End Date of previous term.";
                                return false;
                            }
                        }
                    }

                }


                if (endDate != null)
                {

                    nextTerm = loksabhaCode + 1;

                    master_LokSabhaTerm = (from lokSabhaTerm in dbContext.MASTER_LOK_SABHA_TERM where lokSabhaTerm.MAST_LS_TERM == nextTerm select lokSabhaTerm).FirstOrDefault();   //dbContext.MASTER_LOK_SABHA_TERM.Find(nextTerm);


                    if (master_LokSabhaTerm != null)
                    {

                        if (master_LokSabhaTerm.MAST_LS_START_DATE <= endDate)
                        {
                            message = "End Date of Lok Sabha Term should be less than Start Date of next term.";
                            return false;
                        }
                    }

                }

                //end added by koustubh Nakate on 28-05-2013 for date validation

                MASTER_LOK_SABHA_TERM master = dbContext.MASTER_LOK_SABHA_TERM.Where(m => m.MAST_LS_TERM == loksabhaCode).FirstOrDefault();

                //master.MAST_TRAFFIC_CODE = trafficModel.MAST_TRAFFIC_CODE;
                master.MAST_LS_START_DATE = ConvertStringToDate(model.MAST_LS_START_DATE);
                master.MAST_LS_END_DATE = ConvertStringToDate(model.MAST_LS_END_DATE);

                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteLokSabhaTerm(int loksabhaTerm)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_LOK_SABHA_TERM master = dbContext.MASTER_LOK_SABHA_TERM.Find(loksabhaTerm);
                if (master == null)
                {
                    return false;
                }
                dbContext.MASTER_LOK_SABHA_TERM.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterLokSabhaTermViewModel GetLokSabhaTermDetails(int loksabhaTerm)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_LOK_SABHA_TERM master = dbContext.MASTER_LOK_SABHA_TERM.Where(m => m.MAST_LS_TERM == loksabhaTerm).FirstOrDefault();
                MasterLokSabhaTermViewModel model = null;
                if (master != null)
                {
                    model = new MasterLokSabhaTermViewModel()
                    {
                        EncryptedLokSabhaTermCode = URLEncrypt.EncryptParameters1(new string[] { "LokSabhaCode=" + master.MAST_LS_TERM.ToString().Trim() }),
                        MAST_LS_START_DATE = master.MAST_LS_START_DATE == null ? string.Empty : ConvertDateToString(master.MAST_LS_START_DATE),
                        MAST_LS_END_DATE = master.MAST_LS_END_DATE == null ? string.Empty : ConvertDateToString(master.MAST_LS_END_DATE),
                        MAST_LS_TERM = master.MAST_LS_TERM
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public DateTime? ConvertStringToDate(string dateToConvert)
        {

            if (dateToConvert != null)
            {

                DateTime MyDateTime;
                MyDateTime = new DateTime();
                MyDateTime = DateTime.ParseExact(dateToConvert, "dd/MM/yyyy",
                                                 null);

                return MyDateTime;
            }
            else
            {
                return null;
            }
        }

        public string ConvertDateToString(DateTime? date)
        {
            return Convert.ToDateTime(date).ToString("dd/MM/yyyy");
        }

        #endregion

        #region MASTER_DESIGNATION

        public Array GetDesignationList(string desigCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from item in dbContext.MASTER_DESIGNATION
                           where
                           (desigCode == string.Empty ? "%" : item.MAST_DESIG_TYPE) == (desigCode == string.Empty ? "%" : desigCode)
                           select new
                           {
                               item.MAST_DESIG_CODE,
                               item.MAST_DESIG_NAME,
                               item.MAST_DESIG_TYPE
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_DESIG_NAME":
                                list = list.OrderBy(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DESIG_TYPE":
                                list = list.OrderBy(x => x.MAST_DESIG_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_DESIG_NAME":
                                list = list.OrderByDescending(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DESIG_TYPE":
                                list = list.OrderByDescending(x => x.MAST_DESIG_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                break;
                        }
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_DESIG_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(desigDetails => new
                {

                    desigDetails.MAST_DESIG_CODE,
                    desigDetails.MAST_DESIG_NAME,
                    desigDetails.MAST_DESIG_TYPE,

                }).ToArray();

                return result.Select(desigDetails => new
                {
                    cell = new[]{
                    desigDetails.MAST_DESIG_NAME.ToString(),
                    desigDetails.MAST_DESIG_TYPE=="NO"?"Nodal Officer":(desigDetails.MAST_DESIG_TYPE=="TA"?"Technical Agency":(desigDetails.MAST_DESIG_TYPE=="QC"?"Quality Control":(desigDetails.MAST_DESIG_TYPE=="QM"?"Quality Monitor":string.Empty))),
                    URLEncrypt.EncryptParameters1(new string[]{"DesigCode =" + desigDetails.MAST_DESIG_CODE.ToString().Trim()}),
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddDesignation(MasterDesignationViewModel model, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_NAME.ToUpper() == model.MAST_DESIG_NAME.ToUpper() && m.MAST_DESIG_TYPE == model.MAST_DESIG_TYPE && m.MAST_DESIG_CODE != model.MAST_DESIG_CODE).Any())
                {
                    message = "Designation name already exist.";
                    return false;
                }

                MASTER_DESIGNATION master = new MASTER_DESIGNATION();

                master.MAST_DESIG_CODE = dbContext.MASTER_DESIGNATION.Max(cp => (Int32?)cp.MAST_DESIG_CODE) == null ? 1 : (Int32)dbContext.MASTER_DESIGNATION.Max(cp => (Int32?)cp.MAST_DESIG_CODE) + 1;
                master.MAST_DESIG_NAME = model.MAST_DESIG_NAME;
                master.MAST_DESIG_TYPE = model.MAST_DESIG_TYPE;

                dbContext.MASTER_DESIGNATION.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditDesignation(MasterDesignationViewModel model, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int desigCode = 0;
                encryptedParameters = model.EncryptedDesignationCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                desigCode = Convert.ToInt32(decryptedParameters["DesigCode"].ToString());

                int recordCount = dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_NAME.ToUpper() == model.MAST_DESIG_NAME.ToUpper() && m.MAST_DESIG_TYPE == model.MAST_DESIG_TYPE && m.MAST_DESIG_CODE != desigCode).Count();
                if (recordCount > 0)
                {
                    message = "Designation name already exist.";
                    return false;
                }

                MASTER_DESIGNATION master = dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_CODE == desigCode).FirstOrDefault();

                master.MAST_DESIG_NAME = model.MAST_DESIG_NAME;
                master.MAST_DESIG_TYPE = model.MAST_DESIG_TYPE;

                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteDesignation(int desigCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_DESIGNATION master = dbContext.MASTER_DESIGNATION.Find(desigCode);
                if (master == null)
                {
                    return false;
                }
                dbContext.MASTER_DESIGNATION.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterDesignationViewModel GetDesignationDetails(string desigCode)
        {
            int code = Convert.ToInt32(desigCode);
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_DESIGNATION master = dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_CODE == code).FirstOrDefault();
                MasterDesignationViewModel model = null;
                if (master != null)
                {
                    model = new MasterDesignationViewModel()
                    {
                        EncryptedDesignationCode = URLEncrypt.EncryptParameters1(new string[] { "DesigCode=" + master.MAST_DESIG_CODE.ToString().Trim() }),
                        MAST_DESIG_NAME = master.MAST_DESIG_NAME,
                        MAST_DESIG_TYPE = master.MAST_DESIG_TYPE
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region MASTER_MLA_MEMBERS

        public bool AddMLAMembers(MasterMLAMembersViewModel memberModel, ref string message)
        {
            try
            {
                var sDate = memberModel.MAST_MEMBER_START_DATE;
                var eDate = memberModel.MAST_MEMBER_END_DATE;

                System.DateTime? startDate = ConvertStringToDate(sDate);
                System.DateTime? endDate = ConvertStringToDate(eDate);

                dbContext = new PMGSYEntities();
                //commented by koustubh nakate on 19/08/2013 because it is not in use
                //  int recordCount = dbContext.MASTER_MLA_MEMBERS.Where(m => m.MAST_STATE_CODE == memberModel.MAST_STATE_CODE && m.MAST_MLA_CONST_CODE == memberModel.MAST_MLA_CONST_CODE && m.MAST_VS_TERM == memberModel.MAST_VS_TERM && m.MAST_MEMBER.ToUpper() == memberModel.MAST_MEMBER.ToUpper()).Count();

                if (dbContext.MASTER_MLA_MEMBERS.Any(m => m.MAST_STATE_CODE == memberModel.MAST_STATE_CODE && m.MAST_MLA_CONST_CODE == memberModel.MAST_MLA_CONST_CODE && m.MAST_VS_TERM == memberModel.MAST_VS_TERM && m.MAST_MEMBER.ToUpper() == memberModel.MAST_MEMBER.ToUpper()))
                {
                    message = "MLA Member details already exist.";
                    return false;
                }


                MASTER_VIDHAN_SABHA_TERM vidhanSabhaTermDetails = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(vt => vt.MAST_VS_TERM == memberModel.MAST_VS_TERM && vt.MAST_STATE_CODE == memberModel.MAST_STATE_CODE).FirstOrDefault();

                if (vidhanSabhaTermDetails != null)
                {
                    if (!string.IsNullOrEmpty(memberModel.MAST_MEMBER_START_DATE) && vidhanSabhaTermDetails.MAST_VS_START_DATE != null)
                    {
                        if (vidhanSabhaTermDetails.MAST_VS_START_DATE > ConvertStringToDate(memberModel.MAST_MEMBER_START_DATE))
                        {
                            message = "MLA Member start date must be greater than or equal to vidhan sabha term start date.";
                            return false;
                        }
                    }

                    if (!string.IsNullOrEmpty(memberModel.MAST_MEMBER_END_DATE) && vidhanSabhaTermDetails.MAST_VS_END_DATE != null)
                    {

                        if (vidhanSabhaTermDetails.MAST_VS_END_DATE < ConvertStringToDate(memberModel.MAST_MEMBER_END_DATE))
                        {
                            message = "MLA Member end date must be less than or equal to vidhan sabha term end date.";
                            return false;
                        }
                    }
                }



                MASTER_MLA_MEMBERS master = new MASTER_MLA_MEMBERS();

                master.MAST_MEMBER_ID = dbContext.MASTER_MLA_MEMBERS.Max(cp => (Int32?)cp.MAST_MEMBER_ID) == null ? 1 : (Int32)dbContext.MASTER_MLA_MEMBERS.Max(cp => (Int32?)cp.MAST_MEMBER_ID) + 1;
                master.MAST_MEMBER = memberModel.MAST_MEMBER;
                master.MAST_MEMBER_PARTY = memberModel.MAST_MEMBER_PARTY;
                master.MAST_MEMBER_START_DATE = ConvertStringToDate(memberModel.MAST_MEMBER_START_DATE);
                master.MAST_MEMBER_END_DATE = ConvertStringToDate(memberModel.MAST_MEMBER_END_DATE);
                master.MAST_MLA_CONST_CODE = memberModel.MAST_MLA_CONST_CODE;
                master.MAST_STATE_CODE = memberModel.MAST_STATE_CODE;
                master.MAST_VS_TERM = memberModel.MAST_VS_TERM;
                master.MAST_LOCK_STATUS = "N";

                dbContext.MASTER_MLA_MEMBERS.Add(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMLAMembers(int stateCode, int term, int constCode, string memberName, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from member in dbContext.MASTER_MLA_MEMBERS
                           join state in dbContext.MASTER_STATE on member.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join constituency in dbContext.MASTER_MLA_CONSTITUENCY on member.MAST_MLA_CONST_CODE equals constituency.MAST_MLA_CONST_CODE
                           where
                           (stateCode == 0 ? 1 : member.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                           (constCode == 0 ? 1 : member.MAST_MLA_CONST_CODE) == (constCode == 0 ? 1 : constCode) &&
                           (term == 0 ? 1 : member.MAST_VS_TERM) == (term == 0 ? 1 : term) &&
                           (memberName == string.Empty ? "%" : member.MAST_MEMBER).Contains(memberName == string.Empty ? "%" : memberName)
                           select new
                           {
                               member.MAST_MEMBER,
                               member.MAST_MEMBER_END_DATE,
                               member.MAST_MEMBER_ID,
                               member.MAST_MEMBER_PARTY,
                               member.MAST_MEMBER_START_DATE,
                               constituency.MAST_MLA_CONST_NAME,
                               state.MAST_STATE_NAME,
                               member.MAST_VS_TERM,
                               member.MAST_LOCK_STATUS
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_MEMBER":
                                list = list.OrderBy(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MEMBER_END_DATE":
                                list = list.OrderBy(x => x.MAST_MEMBER_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MEMBER_PARTY":
                                list = list.OrderBy(x => x.MAST_MEMBER_PARTY).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MEMBER_START_DATE":
                                list = list.OrderBy(x => x.MAST_MEMBER_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MLA_CONST_NAME":
                                list = list.OrderBy(x => x.MAST_MLA_CONST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_VS_TERM":
                                list = list.OrderBy(x => x.MAST_VS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenByDescending(x => x.MAST_VS_TERM).ThenBy(x => x.MAST_MLA_CONST_NAME).ThenBy(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_MEMBER":
                                list = list.OrderByDescending(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MEMBER_END_DATE":
                                list = list.OrderByDescending(x => x.MAST_MEMBER_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MEMBER_PARTY":
                                list = list.OrderByDescending(x => x.MAST_MEMBER_PARTY).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MEMBER_START_DATE":
                                list = list.OrderByDescending(x => x.MAST_MEMBER_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_MLA_CONST_NAME":
                                list = list.OrderByDescending(x => x.MAST_MLA_CONST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_VS_TERM":
                                list = list.OrderByDescending(x => x.MAST_VS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                break;
                        }
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenByDescending(x => x.MAST_VS_TERM).ThenBy(x => x.MAST_MLA_CONST_NAME).ThenBy(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(memberDetails => new
                {
                    memberDetails.MAST_MEMBER_END_DATE,
                    memberDetails.MAST_MEMBER,
                    memberDetails.MAST_MEMBER_ID,
                    memberDetails.MAST_MEMBER_PARTY,
                    memberDetails.MAST_MEMBER_START_DATE,
                    memberDetails.MAST_MLA_CONST_NAME,
                    memberDetails.MAST_STATE_NAME,
                    memberDetails.MAST_VS_TERM,
                    memberDetails.MAST_LOCK_STATUS
                }).ToArray();

                return result.Select(memberDetails => new
                {
                    cell = new[]{

                    memberDetails.MAST_MEMBER==null?string.Empty:memberDetails.MAST_MEMBER.ToString(),
                    memberDetails.MAST_MEMBER_PARTY==null?string.Empty:memberDetails.MAST_MEMBER_PARTY.ToString(),
                    memberDetails.MAST_MLA_CONST_NAME==null?string.Empty:memberDetails.MAST_MLA_CONST_NAME.ToString(),
                    memberDetails.MAST_STATE_NAME==null?string.Empty:memberDetails.MAST_STATE_NAME.ToString(),
                    memberDetails.MAST_VS_TERM==0?string.Empty:memberDetails.MAST_VS_TERM.ToString(),
                    memberDetails.MAST_MEMBER_START_DATE==null?"NA":Convert.ToDateTime(memberDetails.MAST_MEMBER_START_DATE).ToString("dd/MM/yyyy"),
                    memberDetails.MAST_MEMBER_END_DATE==null?"NA":Convert.ToDateTime(memberDetails.MAST_MEMBER_END_DATE).ToString("dd/MM/yyyy"),
                    memberDetails.MAST_LOCK_STATUS=="N"?URLEncrypt.EncryptParameters1(new string[]{"MemberCode =" + memberDetails.MAST_MEMBER_ID.ToString().Trim()}):string.Empty
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteMLAMembers(int memberCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_MLA_MEMBERS master = dbContext.MASTER_MLA_MEMBERS.Where(m => m.MAST_MEMBER_ID == memberCode).FirstOrDefault();
                dbContext.MASTER_MLA_MEMBERS.Remove(master);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditMLAMembers(MasterMLAMembersViewModel memberModel, ref string message)
        {
            int memberCode = 0;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = memberModel.EncryptedMembersCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                memberCode = Convert.ToInt32(decryptedParameters["MemberCode"].ToString());

                int recordCount = dbContext.MASTER_MLA_MEMBERS.Where(m => m.MAST_VS_TERM == memberModel.MAST_VS_TERM && m.MAST_STATE_CODE == memberModel.MAST_STATE_CODE && m.MAST_MLA_CONST_CODE == memberModel.MAST_MLA_CONST_CODE && m.MAST_MEMBER.ToUpper() == memberModel.MAST_MEMBER.ToUpper() && m.MAST_MEMBER_ID != memberCode).Count();
                if (recordCount > 0)
                {
                    message = "Member Information already exist.";
                    return false;
                }

                MASTER_VIDHAN_SABHA_TERM vidhanSabhaTermDetails = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(vt => vt.MAST_VS_TERM == memberModel.MAST_VS_TERM && vt.MAST_STATE_CODE == memberModel.MAST_STATE_CODE).FirstOrDefault();

                if (vidhanSabhaTermDetails != null)
                {
                    if (!string.IsNullOrEmpty(memberModel.MAST_MEMBER_START_DATE) && vidhanSabhaTermDetails.MAST_VS_START_DATE != null)
                    {
                        if (vidhanSabhaTermDetails.MAST_VS_START_DATE > ConvertStringToDate(memberModel.MAST_MEMBER_START_DATE))
                        {
                            message = "MLA Member start date must be greater than or equal to vidhan sabha term start date.";
                            return false;
                        }
                    }

                    if (!string.IsNullOrEmpty(memberModel.MAST_MEMBER_END_DATE) && vidhanSabhaTermDetails.MAST_VS_END_DATE != null)
                    {

                        if (vidhanSabhaTermDetails.MAST_VS_END_DATE < ConvertStringToDate(memberModel.MAST_MEMBER_END_DATE))
                        {
                            message = "MLA Member end date must be less than or equal to vidhan sabha term end date.";
                            return false;
                        }
                    }
                }

                MASTER_MLA_MEMBERS master = dbContext.MASTER_MLA_MEMBERS.Where(m => m.MAST_MEMBER_ID == memberCode).FirstOrDefault();

                master.MAST_MEMBER = memberModel.MAST_MEMBER;
                master.MAST_MEMBER_END_DATE = ConvertStringToDate(memberModel.MAST_MEMBER_END_DATE);
                master.MAST_MEMBER_PARTY = memberModel.MAST_MEMBER_PARTY;
                master.MAST_MEMBER_START_DATE = ConvertStringToDate(memberModel.MAST_MEMBER_START_DATE);
                master.MAST_MLA_CONST_CODE = memberModel.MAST_MLA_CONST_CODE;
                master.MAST_STATE_CODE = memberModel.MAST_STATE_CODE;
                master.MAST_VS_TERM = memberModel.MAST_VS_TERM;

                dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterMLAMembersViewModel GetMemberDetails(int memberCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_MLA_MEMBERS master = dbContext.MASTER_MLA_MEMBERS.Where(m => m.MAST_MEMBER_ID == memberCode).FirstOrDefault();
                MasterMLAMembersViewModel model = null;
                if (master != null)
                {
                    model = new MasterMLAMembersViewModel()
                    {
                        EncryptedMembersCode = URLEncrypt.EncryptParameters1(new string[] { "MemberCode=" + master.MAST_MEMBER_ID.ToString().Trim() }),
                        MAST_MEMBER = master.MAST_MEMBER.ToString(),
                        MAST_MEMBER_END_DATE = (master.MAST_MEMBER_END_DATE == null ? string.Empty : (ConvertDateToString(master.MAST_MEMBER_END_DATE))),
                        MAST_MEMBER_PARTY = master.MAST_MEMBER_PARTY,
                        MAST_MEMBER_START_DATE = (master.MAST_MEMBER_START_DATE == null ? string.Empty : (ConvertDateToString(master.MAST_MEMBER_START_DATE))),
                        MAST_MLA_CONST_CODE = master.MAST_MLA_CONST_CODE,
                        MAST_STATE_CODE = master.MAST_STATE_CODE,
                        MAST_VS_TERM = master.MAST_VS_TERM,
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_MLA_CONSTITUENCY> GetAllConstituency(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                return dbContext.MASTER_MLA_CONSTITUENCY.Where(m => m.MAST_STATE_CODE == stateCode).ToList<MASTER_MLA_CONSTITUENCY>();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_VIDHAN_SABHA_TERM> GetAllVidhanSabhaTerms(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                return dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_STATE_CODE == stateCode).ToList<MASTER_VIDHAN_SABHA_TERM>();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<Models.MASTER_MLA_MEMBERS> GetMembersByStateCode(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<Models.MASTER_MLA_MEMBERS> stateList = dbContext.MASTER_MLA_MEMBERS.Where(v => v.MAST_STATE_CODE == stateCode).OrderBy(v => v.MAST_MEMBER).ToList<Models.MASTER_MLA_MEMBERS>();

                stateList.Insert(0, new Models.MASTER_MLA_MEMBERS() { MAST_MEMBER_ID = 0, MAST_MEMBER = "--Select--" });

                return stateList;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        #endregion

        #region ADMIN_DEPARTMENT

        public bool AddAdminDepartment(AdminDepartmentViewModel adminModel, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                if (adminModel.MAST_ND_TYPE.Equals("S") || adminModel.MAST_ND_TYPE.Equals("D"))
                {

                    if (adminModel.MAST_ND_TYPE.Equals("S"))
                    {
                        if (dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_AGENCY_CODE == adminModel.MAST_AGENCY_CODE && m.MAST_ND_TYPE == adminModel.MAST_ND_TYPE).Count() > 0)
                        {
                            message = "SRRDA details with selected agency already exist.";
                            return false;
                        }
                        else
                        {
                            recordCount = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_NAME.ToUpper() == adminModel.ADMIN_ND_NAME.ToUpper() && m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_ND_TYPE == adminModel.MAST_ND_TYPE).Count();
                            if (recordCount > 0)
                            {
                                message = "SRRDA details with name '" + adminModel.ADMIN_ND_NAME + "'  already exist.";
                                return false;
                            }
                        }

                    }
                    else if (adminModel.MAST_ND_TYPE.Equals("D"))
                    {
                        recordCount = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_NAME.ToUpper() == adminModel.ADMIN_ND_NAME.ToUpper() && m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_AGENCY_CODE == adminModel.MAST_AGENCY_CODE && m.MAST_ND_TYPE == adminModel.MAST_ND_TYPE).Count();

                        if (recordCount > 0)
                        {
                            message = "DPIU details already exist.";
                            return false;
                        }
                    }




                    ADMIN_DEPARTMENT admin = CloneModelToObject(new ADMIN_DEPARTMENT(), adminModel);
                    dbContext = new PMGSYEntities();

                    admin.ADMIN_ND_CODE = dbContext.ADMIN_DEPARTMENT.Max(cp => (Int32?)cp.ADMIN_ND_CODE) == null ? 1 : (Int32)dbContext.ADMIN_DEPARTMENT.Max(cp => (Int32?)cp.ADMIN_ND_CODE) + 1;

                    if (adminModel.MAST_ND_TYPE.Equals("S"))
                    {
                        admin.MAST_PARENT_ND_CODE = admin.ADMIN_ND_CODE;
                    }
                    else if (adminModel.MAST_ND_TYPE.Equals("D"))
                    {
                        admin.MAST_PARENT_ND_CODE = adminModel.MAST_PARENT_ND_CODE;
                        admin.ADMIN_EPAY_DPIU_CODE = GetMaxEPAYDPIUCode(adminModel.MAST_STATE_CODE);
                        dbContext = new PMGSYEntities();

                    }

                    dbContext.ADMIN_DEPARTMENT.Add(admin);
                    dbContext.SaveChanges();
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public Int32 GetMaxEPAYDPIUCode(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? maxCode = 0;

                maxCode = (from DPIU in dbContext.ADMIN_DEPARTMENT where DPIU.MAST_STATE_CODE == stateCode select (Int32?)DPIU.ADMIN_EPAY_DPIU_CODE).Max();

                if (maxCode == null)
                {
                    maxCode = 1;
                }
                else
                {
                    maxCode = maxCode + 1;
                }

                return (Int32)maxCode;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                throw ex;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        //changes by koustubh Nakate on 16-05-2013 for Admin Department
        public Array ListAdminDepartmentList(int stateCode, int agencyCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from admin in dbContext.ADMIN_DEPARTMENT
                           join state in dbContext.MASTER_STATE on admin.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join district in dbContext.MASTER_DISTRICT on admin.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into newDistrict
                           from district in newDistrict.DefaultIfEmpty()
                           join agency in dbContext.MASTER_AGENCY on admin.MAST_AGENCY_CODE equals agency.MAST_AGENCY_CODE
                           where
                           admin.MAST_ND_TYPE == "S" &&
                           (stateCode == 0 ? 1 : admin.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                           // (districtCode == 0 ? 1 : admin.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode) &&
                           (agencyCode == 0 ? 1 : admin.MAST_AGENCY_CODE) == (agencyCode == 0 ? 1 : agencyCode)
                           //(departmentName == string.Empty ? "%" : admin.MAST_ND_TYPE) == (departmentName == string.Empty ? "%" : departmentName)
                           //admin.MAST_PARENT_ND_CODE == null
                           //(memberName == string.Empty ? "%" : member.MAST_MEMBER).Contains(memberName == string.Empty ? "%" : memberName)

                           select new
                           {
                               admin.ADMIN_ND_CODE,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               admin.MAST_PARENT_ND_CODE,
                               admin.MAST_ND_TYPE,
                               admin.ADMIN_ND_NAME,
                               admin.ADMIN_ND_ADDRESS1,
                               admin.ADMIN_ND_ADDRESS2,
                               district.MAST_DISTRICT_NAME,
                               admin.ADMIN_ND_PIN,
                               admin.ADMIN_ND_STD1,
                               admin.ADMIN_ND_STD2,
                               admin.ADMIN_ND_PHONE1,
                               admin.ADMIN_ND_PHONE2,
                               admin.ADMIN_ND_STD_FAX,
                               admin.ADMIN_ND_FAX,
                               admin.ADMIN_ND_MOBILE_NO,
                               admin.ADMIN_ND_EMAIL,
                               admin.ADMIN_ND_REMARKS,
                               admin.ADMIN_SBD_DATE,
                               admin.ADMIN_PDF_KEY,
                               admin.ADMIN_EMAIL_CC,
                               admin.ADMIN_ND_TAN_NO,
                               admin.ADMIN_BANK_AUTH_ENABLED,
                               admin.ADMIN_BA_ENABLE_DATE,
                               admin.ADMIN_EPAY_MAIL,
                               admin.ADMIN_EPAY_ENABLE_DATE,
                               admin.ADMIN_EREMITTANCE_ENABLED,
                               admin.ADMIN_EREMIT_ENABLED_DATE,
                               admin.MAST_STATE_CODE,
                               agency.MAST_AGENCY_TYPE //Added By Ashish Markande on 9/10/2013
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "ADMIN_ND_NAME":
                                list = list.OrderBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_AGENCY_NAME":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            /* case "MAST_DISTRICT_NAME":
                                 list = list.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                 break;
                             case "ADMIN_ND_TAN_NO":
                                 list = list.OrderBy(x => x.ADMIN_ND_TAN_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                 break;*/
                            case "ADMIN_SBD_DATE":
                                list = list.OrderBy(x => x.ADMIN_SBD_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            /*case "ADMIN_BA_ENABLE_DATE":
                                list = list.OrderBy(x => x.ADMIN_BA_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ADMIN_EREMIT_ENABLED_DATE":
                                list = list.OrderBy(x => x.ADMIN_EREMIT_ENABLED_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;*/
                            case "ADMIN_PDF_KEY":
                                list = list.OrderBy(x => x.ADMIN_PDF_KEY).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ADMIN_ND_NAME":
                                list = list.OrderByDescending(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_AGENCY_NAME":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            /* case "MAST_DISTRICT_NAME":
                                 list = list.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                 break;
                             case "ADMIN_ND_TAN_NO":
                                 list = list.OrderByDescending(x => x.ADMIN_ND_TAN_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                 break;*/
                            case "ADMIN_SBD_DATE":
                                list = list.OrderByDescending(x => x.ADMIN_SBD_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            /* case "ADMIN_BA_ENABLE_DATE":
                                 list = list.OrderByDescending(x => x.ADMIN_BA_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                 break;
                             case "ADMIN_EREMIT_ENABLED_DATE":
                                 list = list.OrderByDescending(x => x.ADMIN_EREMIT_ENABLED_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                 break;*/
                            case "ADMIN_PDF_KEY":
                                list = list.OrderByDescending(x => x.ADMIN_PDF_KEY).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(adminDetails => new
                {
                    adminDetails.ADMIN_ND_CODE,
                    adminDetails.ADMIN_ND_NAME,
                    adminDetails.MAST_ND_TYPE,
                    adminDetails.MAST_AGENCY_NAME,
                    adminDetails.ADMIN_ND_ADDRESS1,
                    adminDetails.ADMIN_ND_ADDRESS2,
                    adminDetails.MAST_DISTRICT_NAME,
                    adminDetails.MAST_STATE_NAME,
                    adminDetails.ADMIN_ND_STD1,
                    adminDetails.ADMIN_ND_PHONE1,
                    adminDetails.ADMIN_ND_MOBILE_NO,
                    adminDetails.ADMIN_ND_EMAIL,
                    adminDetails.ADMIN_ND_REMARKS,
                    adminDetails.ADMIN_SBD_DATE,
                    adminDetails.ADMIN_BA_ENABLE_DATE,
                    adminDetails.ADMIN_ND_TAN_NO,
                    adminDetails.ADMIN_PDF_KEY,
                    adminDetails.ADMIN_EREMIT_ENABLED_DATE,
                    adminDetails.MAST_STATE_CODE,
                    adminDetails.MAST_AGENCY_TYPE

                }).ToArray();

                string res = result.Select(x => x.MAST_AGENCY_TYPE.ToString()).FirstOrDefault();

                return result.Select(adminDetails => new
                {
                    id = adminDetails.ADMIN_ND_CODE.ToString().Trim(),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{

                    adminDetails.ADMIN_ND_NAME == null?string.Empty:adminDetails.ADMIN_ND_NAME.ToString(),
                    adminDetails.MAST_AGENCY_NAME==null?string.Empty:adminDetails.MAST_AGENCY_NAME.ToString(),
                    //(adminDetails.ADMIN_ND_ADDRESS1 == null?string.Empty:adminDetails.ADMIN_ND_ADDRESS1.ToString())+" "+(adminDetails.ADMIN_ND_ADDRESS2 == null?string.Empty:adminDetails.ADMIN_ND_ADDRESS2.ToString()),
                   // adminDetails.MAST_DISTRICT_NAME == null?string.Empty:adminDetails.MAST_DISTRICT_NAME.ToString(),
                    adminDetails.MAST_STATE_NAME == null?string.Empty:adminDetails.MAST_STATE_NAME.ToString(),//+"<a href='#' onClick=addDPIUData('"+URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.MAST_STATE_NAME.ToString().Trim()})+"')>Add DPIU</a>",
                    //(adminDetails.ADMIN_ND_STD1 == null?string.Empty:adminDetails.ADMIN_ND_STD1)+" "+(adminDetails.ADMIN_ND_PHONE1==null?string.Empty:adminDetails.ADMIN_ND_PHONE1.ToString()),
                    //adminDetails.ADMIN_ND_MOBILE_NO==null?string.Empty:adminDetails.ADMIN_ND_MOBILE_NO.ToString(),
                    //adminDetails.ADMIN_ND_EMAIL==null?string.Empty:adminDetails.ADMIN_ND_EMAIL.ToString(),
                    //adminDetails.ADMIN_ND_REMARKS == null?string.Empty:adminDetails.ADMIN_ND_REMARKS.ToString(),
                    //adminDetails.ADMIN_ND_TAN_NO == null?null:adminDetails.ADMIN_ND_TAN_NO.ToString(),
                    adminDetails.ADMIN_SBD_DATE == null?"-":Convert.ToDateTime(adminDetails.ADMIN_SBD_DATE).ToString("dd/MM/yyyy"),
                    //adminDetails.ADMIN_BA_ENABLE_DATE == null?"-":Convert.ToDateTime(adminDetails.ADMIN_BA_ENABLE_DATE).ToString("dd/MM/yyyy"),
                    //adminDetails.ADMIN_EREMIT_ENABLED_DATE == null?"-":Convert.ToDateTime(adminDetails.ADMIN_EREMIT_ENABLED_DATE).ToString("dd/MM/yyyy"),
                    adminDetails.ADMIN_PDF_KEY == null?string.Empty:adminDetails.ADMIN_PDF_KEY.ToString(),
                    //adminDetails.MAST_ND_TYPE == "S"? URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()}):string.Empty,                   
                    //Added By Ashish Markande on 9/10/2013
                   // adminDetails.MAST_AGENCY_TYPE.ToString()=="O"?URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim(),"StateCode =" + adminDetails.MAST_STATE_CODE.ToString().Trim(),"StateName =" + adminDetails.MAST_STATE_NAME.ToString().Trim(),"AdminName =" + adminDetails.ADMIN_ND_NAME.ToString().Replace("/","")}):string.Empty,
                   // adminDetails.MAST_AGENCY_TYPE.ToString()=="O"?URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim(),"StateCode =" + adminDetails.MAST_STATE_CODE.ToString().Trim(),"StateName =" + adminDetails.MAST_STATE_NAME.ToString().Trim(),"AdminName =" + adminDetails.ADMIN_ND_NAME.ToString().Replace("/","")}):string.Empty,
                    adminDetails.MAST_AGENCY_TYPE.ToString()=="O"?
                                                             PMGSYSession.Current.RoleCode==23?
                                                             ("<center><table><tr><td  style='border:none'><a href='#' title='Map Districts' onClick ='MapDistricts(\"" + URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim(),"StateCode =" + adminDetails.MAST_STATE_CODE.ToString().Trim(),"StateName =" + adminDetails.MAST_STATE_NAME.ToString().Trim(),"AdminName =" + adminDetails.ADMIN_ND_NAME.ToString().Replace("/","")}) + "\");' >Map Districts</a></td></tr></table></center>")
                                                            :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>")
                                                            :("<center><table><tr><td  style='border:none'>-</td></tr></table></center>"),
                    adminDetails.MAST_AGENCY_TYPE.ToString()=="O"?
                                                             ("<center><table><tr><td  style='border:none'><a href='#' title='View Mapped Districts' onClick ='MappedDistricts(\"" + URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim(),"StateCode =" + adminDetails.MAST_STATE_CODE.ToString().Trim(),"StateName =" + adminDetails.MAST_STATE_NAME.ToString().Trim(),"AdminName =" + adminDetails.ADMIN_ND_NAME.ToString().Replace("/","")}) + "\");' >Mapped Districts</a></td></tr></table></center>")
                                                            :("<center><table><tr><td  style='border:none'>-</td></tr></table></center>"),
                   URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()})

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteAdminDepartment(int adminCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_DEPARTMENT admin = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == adminCode).FirstOrDefault();

                if (dbContext.ADMIN_DEPARTMENT.Any(ad => ad.MAST_PARENT_ND_CODE == admin.ADMIN_ND_CODE))
                {
                    if (admin.MAST_ND_TYPE.Equals("S"))
                    {
                        message = "You can not delete this SRRDA details.";
                    }
                    else
                    {
                        message = "You can not delete this DPIU details.";
                    }
                    return false;
                }

                //Added by abhishek kamble 27-nov-2013
                admin.USERID = PMGSYSession.Current.UserId;
                admin.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(admin).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_DEPARTMENT.Remove(admin);
                dbContext.SaveChanges();

                if (admin.MAST_ND_TYPE.Equals("S"))
                {
                    message = "SRRDA details deleted successfully.";
                }
                else
                {
                    message = "DPIU details deleted successfully.";
                }
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditAdminDepartment(AdminDepartmentViewModel adminModel, ref string message)
        {
            try
            {
                if (adminModel.MAST_ND_TYPE.Equals("S") || adminModel.MAST_ND_TYPE.Equals("D"))
                {
                    int recordCount = 0;

                    int adminCode = 0;
                    dbContext = new PMGSYEntities();
                    encryptedParameters = adminModel.EncryptedAdminCode.Split('/');
                    if (!(encryptedParameters.Length == 3))
                    {
                        return false;
                    }

                    decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    adminCode = Convert.ToInt32(decryptedParameters["AdminCode"].ToString());



                    if (adminModel.MAST_ND_TYPE.Equals("S"))
                    {

                        if (dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_AGENCY_CODE == adminModel.MAST_AGENCY_CODE && m.MAST_ND_TYPE == adminModel.MAST_ND_TYPE && m.ADMIN_ND_CODE != adminCode).Count() > 0)
                        {
                            message = "SRRDA details with selected agency,already exist.";
                            return false;
                        }
                        else
                        {
                            recordCount = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_NAME.ToUpper() == adminModel.ADMIN_ND_NAME.ToUpper() && m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_ND_TYPE == adminModel.MAST_ND_TYPE && m.ADMIN_ND_CODE != adminCode).Count();
                            if (recordCount > 0)
                            {
                                message = "SRRDA details with name '" + adminModel.ADMIN_ND_NAME + "',already exist.";
                                return false;
                            }
                        }

                    }
                    else if (adminModel.MAST_ND_TYPE.Equals("D"))
                    {
                        recordCount = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_NAME.ToUpper() == adminModel.ADMIN_ND_NAME.ToUpper() && m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_AGENCY_CODE == adminModel.MAST_AGENCY_CODE && m.MAST_ND_TYPE == adminModel.MAST_ND_TYPE && m.ADMIN_ND_CODE != adminCode).Count();

                        if (recordCount > 0)
                        {
                            message = "DPIU details already exist.";
                            return false;
                        }
                    }

                    /*recordCount = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_NAME.ToUpper() == adminModel.ADMIN_ND_NAME.ToUpper() && m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_AGENCY_CODE==adminModel.MAST_AGENCY_CODE && m.ADMIN_ND_CODE != adminCode).Count();
                    if (recordCount > 0)
                    {
                        message = "Admin details already exist.";
                        return false;
                    }*/

                    ADMIN_DEPARTMENT admin = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == adminCode).FirstOrDefault();
                    admin = CloneModelToObject(admin, adminModel);
                    // admin.ADMIN_ND_CODE = adminCode;
                    dbContext = new PMGSYEntities();
                    dbContext.Entry(admin).State = System.Data.Entity.EntityState.Modified;

                    /*var currentProduct = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == adminCode).FirstOrDefault(); ;
                    dbContext.Entry(currentProduct).CurrentValues.SetValues(admin);*/
                    //dbContext.Entry(admin).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public AdminDepartmentViewModel GetAdminDetails(int adminCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_DEPARTMENT admin = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == adminCode).FirstOrDefault();
                AdminDepartmentViewModel model = null;
                if (admin != null)
                {
                    model = new AdminDepartmentViewModel()
                    {
                        EncryptedAdminCode = URLEncrypt.EncryptParameters1(new string[] { "AdminCode=" + admin.ADMIN_ND_CODE.ToString().Trim() }),

                        MAST_STATE_CODE = admin.MAST_STATE_CODE,
                        MAST_AGENCY_CODE = admin.MAST_AGENCY_CODE,
                        MAST_PARENT_ND_CODE = admin.MAST_PARENT_ND_CODE,
                        MAST_ND_TYPE = admin.MAST_ND_TYPE,
                        ADMIN_ND_NAME = admin.ADMIN_ND_NAME,
                        ADMIN_ND_ADDRESS1 = admin.ADMIN_ND_ADDRESS1,
                        ADMIN_ND_ADDRESS2 = admin.ADMIN_ND_ADDRESS2,
                        MAST_DISTRICT_CODE = admin.MAST_DISTRICT_CODE,
                        ADMIN_ND_PIN = admin.ADMIN_ND_PIN,
                        ADMIN_ND_STD1 = admin.ADMIN_ND_STD1,
                        ADMIN_ND_STD2 = admin.ADMIN_ND_STD2,
                        ADMIN_ND_PHONE1 = admin.ADMIN_ND_PHONE1,
                        ADMIN_ND_PHONE2 = admin.ADMIN_ND_PHONE2,
                        ADMIN_ND_STD_FAX = admin.ADMIN_ND_STD_FAX,
                        ADMIN_ND_FAX = admin.ADMIN_ND_FAX,
                        ADMIN_ND_MOBILE_NO = admin.ADMIN_ND_MOBILE_NO,
                        ADMIN_ND_EMAIL = admin.ADMIN_ND_EMAIL,
                        ADMIN_ND_REMARKS = admin.ADMIN_ND_REMARKS,
                        ADMIN_SBD_DATE = (admin.ADMIN_SBD_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_SBD_DATE)),
                        ADMIN_PDF_KEY = admin.ADMIN_PDF_KEY,
                        ADMIN_EMAIL_CC = admin.ADMIN_EMAIL_CC,
                        ADMIN_ND_TAN_NO = admin.ADMIN_ND_TAN_NO,
                        ADMIN_BANK_AUTH_ENABLED = admin.ADMIN_BANK_AUTH_ENABLED,
                        ADMIN_BA_ENABLE_DATE = (admin.ADMIN_BA_ENABLE_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_BA_ENABLE_DATE)),
                        ADMIN_EPAY_MAIL = admin.ADMIN_EPAY_MAIL,
                        ADMIN_EPAY_ENABLE_DATE = (admin.ADMIN_EPAY_ENABLE_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_EPAY_ENABLE_DATE)),
                        ADMIN_EREMITTANCE_ENABLED = admin.ADMIN_EREMITTANCE_ENABLED,
                        ADMIN_EREMIT_ENABLED_DATE = (admin.ADMIN_EREMIT_ENABLED_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_EREMIT_ENABLED_DATE)),
                        STATE_NAME = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == admin.MAST_STATE_CODE).Select(a => a.MAST_STATE_NAME).FirstOrDefault(),
                        District_Name = dbContext.MASTER_DISTRICT.Where(a => a.MAST_DISTRICT_CODE == admin.MAST_DISTRICT_CODE).Select(a => a.MAST_DISTRICT_NAME).FirstOrDefault(),
                        Agency_Name = dbContext.MASTER_AGENCY.Where(a => a.MAST_AGENCY_CODE == admin.MAST_AGENCY_CODE).Select(a => a.MAST_AGENCY_NAME).FirstOrDefault(),
                        PIUActive = admin.ADMIN_ND_ACTIVE,
                        PIU_Close_DATE = (admin.ADMIN_ND_CLOSE_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_ND_CLOSE_DATE)),
                        Mast_Parent_ND_Name = dbContext.ADMIN_DEPARTMENT.Where(a => a.ADMIN_ND_CODE == admin.MAST_PARENT_ND_CODE).Select(a => a.ADMIN_ND_NAME).FirstOrDefault(),
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public AdminDepartmentViewModel CloneObjectToModel(ADMIN_DEPARTMENT admin)
        {
            try
            {
                AdminDepartmentViewModel model = new AdminDepartmentViewModel();

                model.MAST_STATE_CODE = admin.MAST_STATE_CODE;
                model.MAST_AGENCY_CODE = admin.MAST_AGENCY_CODE;
                model.MAST_PARENT_ND_CODE = admin.MAST_PARENT_ND_CODE;
                model.MAST_ND_TYPE = (admin.MAST_ND_TYPE == null ? string.Empty : admin.MAST_ND_TYPE);
                model.ADMIN_ND_NAME = (admin.ADMIN_ND_NAME == null ? string.Empty : admin.ADMIN_ND_NAME);
                model.ADMIN_ND_ADDRESS1 = (admin.ADMIN_ND_ADDRESS1 == null ? string.Empty : admin.ADMIN_ND_ADDRESS1);
                model.ADMIN_ND_ADDRESS2 = (admin.ADMIN_ND_ADDRESS2 == null ? string.Empty : admin.ADMIN_ND_ADDRESS2);
                model.MAST_DISTRICT_CODE = admin.MAST_DISTRICT_CODE;
                model.ADMIN_ND_PIN = (admin.ADMIN_ND_PIN == null ? string.Empty : admin.ADMIN_ND_PIN);
                model.ADMIN_ND_STD1 = (admin.ADMIN_ND_STD1 == null ? string.Empty : admin.ADMIN_ND_STD1);
                model.ADMIN_ND_STD2 = (admin.ADMIN_ND_STD2 == null ? string.Empty : admin.ADMIN_ND_STD2);
                model.ADMIN_ND_PHONE1 = (admin.ADMIN_ND_PHONE1 == null ? string.Empty : admin.ADMIN_ND_PHONE1);
                model.ADMIN_ND_PHONE2 = (admin.ADMIN_ND_PHONE2 == null ? string.Empty : admin.ADMIN_ND_PHONE2);
                model.ADMIN_ND_STD_FAX = (admin.ADMIN_ND_STD_FAX == null ? string.Empty : admin.ADMIN_ND_STD_FAX);
                model.ADMIN_ND_FAX = (admin.ADMIN_ND_FAX == null ? string.Empty : admin.ADMIN_ND_FAX);
                model.ADMIN_ND_MOBILE_NO = (admin.ADMIN_ND_MOBILE_NO == null ? string.Empty : admin.ADMIN_ND_MOBILE_NO);
                model.ADMIN_ND_EMAIL = (admin.ADMIN_ND_EMAIL == null ? string.Empty : admin.ADMIN_ND_EMAIL);
                model.ADMIN_ND_REMARKS = (admin.ADMIN_ND_REMARKS == null ? string.Empty : admin.ADMIN_ND_REMARKS);
                model.ADMIN_SBD_DATE = (admin.ADMIN_SBD_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_SBD_DATE));
                model.ADMIN_PDF_KEY = (admin.ADMIN_PDF_KEY == null ? string.Empty : admin.ADMIN_PDF_KEY);
                model.ADMIN_EMAIL_CC = (admin.ADMIN_EMAIL_CC == null ? string.Empty : admin.ADMIN_EMAIL_CC);
                model.ADMIN_ND_TAN_NO = (admin.ADMIN_ND_TAN_NO == null ? string.Empty : admin.ADMIN_ND_TAN_NO);
                model.ADMIN_BANK_AUTH_ENABLED = (admin.ADMIN_BANK_AUTH_ENABLED == null ? string.Empty : admin.ADMIN_BANK_AUTH_ENABLED);
                model.ADMIN_BA_ENABLE_DATE = (admin.ADMIN_BA_ENABLE_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_BA_ENABLE_DATE));
                model.ADMIN_EPAY_MAIL = (admin.ADMIN_EPAY_MAIL == null ? string.Empty : admin.ADMIN_EPAY_MAIL);
                model.ADMIN_EPAY_ENABLE_DATE = (admin.ADMIN_EPAY_ENABLE_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_EPAY_ENABLE_DATE));
                model.ADMIN_EREMITTANCE_ENABLED = (admin.ADMIN_EREMITTANCE_ENABLED == null ? string.Empty : admin.ADMIN_EREMITTANCE_ENABLED);
                model.ADMIN_EREMIT_ENABLED_DATE = (admin.ADMIN_EREMIT_ENABLED_DATE == null ? string.Empty : ConvertDateToString(admin.ADMIN_EREMIT_ENABLED_DATE));

                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public ADMIN_DEPARTMENT CloneModelToObject(ADMIN_DEPARTMENT admin, AdminDepartmentViewModel model)
        {
            try
            {
                //ADMIN_DEPARTMENT admin = new ADMIN_DEPARTMENT();

                admin.MAST_STATE_CODE = model.MAST_STATE_CODE;
                admin.MAST_AGENCY_CODE = model.MAST_AGENCY_CODE;
                // admin.MAST_PARENT_ND_CODE = model.MAST_PARENT_ND_CODE;
                admin.MAST_ND_TYPE = (model.MAST_ND_TYPE == null ? string.Empty : model.MAST_ND_TYPE.ToString());
                admin.ADMIN_ND_NAME = (model.ADMIN_ND_NAME == null ? string.Empty : model.ADMIN_ND_NAME.ToString());
                admin.ADMIN_ND_ADDRESS1 = (model.ADMIN_ND_ADDRESS1 == null ? null : model.ADMIN_ND_ADDRESS1.ToString());
                admin.ADMIN_ND_ADDRESS2 = (model.ADMIN_ND_ADDRESS2 == null ? null : model.ADMIN_ND_ADDRESS2.ToString());
                admin.MAST_DISTRICT_CODE = (model.MAST_DISTRICT_CODE == 0 ? null : model.MAST_DISTRICT_CODE);
                admin.ADMIN_ND_PIN = (model.ADMIN_ND_PIN == null ? null : model.ADMIN_ND_PIN.ToString());
                admin.ADMIN_ND_STD1 = (model.ADMIN_ND_STD1 == null ? null : model.ADMIN_ND_STD1.ToString());
                admin.ADMIN_ND_STD2 = (model.ADMIN_ND_STD2 == null ? null : model.ADMIN_ND_STD2.ToString());
                admin.ADMIN_ND_PHONE1 = (model.ADMIN_ND_PHONE1 == null ? null : model.ADMIN_ND_PHONE1.ToString());
                admin.ADMIN_ND_PHONE2 = (model.ADMIN_ND_PHONE2 == null ? null : model.ADMIN_ND_PHONE2.ToString());
                admin.ADMIN_ND_STD_FAX = (model.ADMIN_ND_STD_FAX == null ? null : model.ADMIN_ND_STD_FAX.ToString());
                admin.ADMIN_ND_FAX = (model.ADMIN_ND_FAX == null ? null : model.ADMIN_ND_FAX.ToString());
                admin.ADMIN_ND_MOBILE_NO = (model.ADMIN_ND_MOBILE_NO == null ? null : model.ADMIN_ND_MOBILE_NO.ToString());
                admin.ADMIN_ND_EMAIL = (model.ADMIN_ND_EMAIL == null ? null : model.ADMIN_ND_EMAIL.ToString());
                admin.ADMIN_ND_REMARKS = (model.ADMIN_ND_REMARKS == null ? null : model.ADMIN_ND_REMARKS.ToString());
                admin.ADMIN_SBD_DATE = ConvertStringToDate(model.ADMIN_SBD_DATE);
                admin.ADMIN_PDF_KEY = (model.ADMIN_PDF_KEY == null ? null : model.ADMIN_PDF_KEY.ToString());
                admin.ADMIN_EMAIL_CC = (model.ADMIN_EMAIL_CC == null ? null : model.ADMIN_EMAIL_CC.ToString());
                admin.ADMIN_ND_TAN_NO = (model.ADMIN_ND_TAN_NO == null ? null : model.ADMIN_ND_TAN_NO.ToString());
                admin.ADMIN_BANK_AUTH_ENABLED = (model.ADMIN_BANK_AUTH_ENABLED == null ? "N" : model.ADMIN_BANK_AUTH_ENABLED.ToString());
                admin.ADMIN_BA_ENABLE_DATE = ConvertStringToDate(model.ADMIN_BA_ENABLE_DATE);
                admin.ADMIN_EPAY_MAIL = (model.ADMIN_EPAY_MAIL == null ? "N" : model.ADMIN_EPAY_MAIL.ToString());
                admin.ADMIN_EPAY_ENABLE_DATE = ConvertStringToDate(model.ADMIN_EPAY_ENABLE_DATE);
                admin.ADMIN_EREMITTANCE_ENABLED = (model.ADMIN_EREMITTANCE_ENABLED == null ? "N" : model.ADMIN_EREMITTANCE_ENABLED.ToString());
                admin.ADMIN_EREMIT_ENABLED_DATE = ConvertStringToDate(model.ADMIN_EREMIT_ENABLED_DATE);
                admin.ADMIN_ND_ACTIVE = (model.PIUActive == null ? "Y" : model.PIUActive.ToString());
                admin.ADMIN_ND_CLOSE_DATE = ConvertStringToDate(model.PIU_Close_DATE);
                //Added by abhishek kamble 27-nov-2013
                admin.USERID = PMGSYSession.Current.UserId;
                admin.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                return admin;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_AGENCY> GetAgencyNames()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_AGENCY> agencyList = dbContext.MASTER_AGENCY.OrderBy(a => a.MAST_AGENCY_NAME).ToList<MASTER_AGENCY>();
                return agencyList;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public AdminDepartmentViewModel AddStateAdmin()
        {
            try
            {
                AdminDepartmentViewModel model = new AdminDepartmentViewModel();
                model.MAST_ND_TYPE = "S";
                model.ADMIN_BANK_AUTH_ENABLED = "N";
                model.ADMIN_EPAY_MAIL = "N";
                model.ADMIN_EREMITTANCE_ENABLED = "N";
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }



        #endregion

        #region PIU DepartMent
        public Array GetDPIUListDAL(int stateCode, int agencyCode, int adminNDCode, string activeflag, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from admin in dbContext.ADMIN_DEPARTMENT
                           join state in dbContext.MASTER_STATE on admin.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join district in dbContext.MASTER_DISTRICT on admin.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into newDistrict
                           from district in newDistrict.DefaultIfEmpty()
                           join agency in dbContext.MASTER_AGENCY on admin.MAST_AGENCY_CODE equals agency.MAST_AGENCY_CODE
                           where
                           admin.MAST_ND_TYPE == "D" &&
                           (adminNDCode == 0 ? 1 : admin.MAST_PARENT_ND_CODE) == (adminNDCode == 0 ? 1 : adminNDCode) &&
                           (stateCode == 0 ? 1 : admin.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                           // (districtCode == 0 ? 1 : admin.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode) &&
                           (agencyCode == 0 ? 1 : admin.MAST_AGENCY_CODE) == (agencyCode == 0 ? 1 : agencyCode) &&
                           (activeflag == "%" ? "%" : admin.ADMIN_ND_ACTIVE) == (activeflag == "%" ? "%" : activeflag)

                           select new
                           {
                               admin.ADMIN_ND_CODE,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               admin.MAST_PARENT_ND_CODE,
                               admin.MAST_ND_TYPE,
                               admin.ADMIN_ND_NAME,
                               admin.ADMIN_ND_TAN_NO,
                               admin.ADMIN_BANK_AUTH_ENABLED,
                               admin.ADMIN_BA_ENABLE_DATE,
                               admin.ADMIN_EPAY_MAIL,
                               admin.ADMIN_EPAY_ENABLE_DATE,
                               admin.ADMIN_EREMITTANCE_ENABLED,
                               admin.ADMIN_EREMIT_ENABLED_DATE,
                               admin.MAST_STATE_CODE,
                               district.MAST_DISTRICT_NAME,
                               admin.ADMIN_ND_ACTIVE,
                               admin.ADMIN_ND_CLOSE_DATE
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "DPIUName":
                                list = list.OrderBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "TANNo":
                                list = list.OrderBy(x => x.ADMIN_ND_TAN_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabled":
                                list = list.OrderBy(x => x.ADMIN_BANK_AUTH_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabledDate":
                                list = list.OrderBy(x => x.ADMIN_BA_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabled":
                                list = list.OrderBy(x => x.ADMIN_EPAY_MAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabledDate":
                                list = list.OrderBy(x => x.ADMIN_EPAY_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabled":
                                list = list.OrderBy(x => x.ADMIN_EREMITTANCE_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabledDate":
                                list = list.OrderBy(x => x.ADMIN_EREMIT_ENABLED_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Disrtict":
                                list = list.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Active":
                                list = list.OrderBy(x => x.ADMIN_ND_ACTIVE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "CloseDate":
                                list = list.OrderBy(x => x.ADMIN_ND_CLOSE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "DPIUName":
                                list = list.OrderByDescending(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "TANNo":
                                list = list.OrderByDescending(x => x.ADMIN_ND_TAN_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabled":
                                list = list.OrderByDescending(x => x.ADMIN_BANK_AUTH_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabledDate":
                                list = list.OrderByDescending(x => x.ADMIN_BA_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabled":
                                list = list.OrderByDescending(x => x.ADMIN_EPAY_MAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabledDate":
                                list = list.OrderByDescending(x => x.ADMIN_EPAY_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabled":
                                list = list.OrderByDescending(x => x.ADMIN_EREMITTANCE_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabledDate":
                                list = list.OrderByDescending(x => x.ADMIN_EREMIT_ENABLED_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Disrtict":
                                list = list.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Active":
                                list = list.OrderByDescending(x => x.ADMIN_ND_ACTIVE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "CloseDate":
                                list = list.OrderByDescending(x => x.ADMIN_ND_CLOSE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                }
                else
                {
                    list = list.OrderBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(adminDetails => new
                {
                    adminDetails.ADMIN_ND_CODE,
                    adminDetails.ADMIN_ND_NAME,
                    adminDetails.MAST_ND_TYPE,
                    adminDetails.MAST_AGENCY_NAME,
                    adminDetails.MAST_STATE_NAME,
                    /* adminDetails.ADMIN_ND_ADDRESS1,
                    adminDetails.ADMIN_ND_ADDRESS2,
                    adminDetails.MAST_DISTRICT_NAME,
                    
                    adminDetails.ADMIN_ND_STD1,
                    adminDetails.ADMIN_ND_PHONE1,
                    adminDetails.ADMIN_ND_MOBILE_NO,
                    adminDetails.ADMIN_ND_EMAIL,
                    adminDetails.ADMIN_ND_REMARKS,
                    adminDetails.ADMIN_SBD_DATE,*/
                    adminDetails.ADMIN_ND_TAN_NO,
                    adminDetails.ADMIN_BANK_AUTH_ENABLED,
                    adminDetails.ADMIN_BA_ENABLE_DATE,
                    adminDetails.ADMIN_EPAY_MAIL,
                    adminDetails.ADMIN_EPAY_ENABLE_DATE,
                    adminDetails.ADMIN_EREMITTANCE_ENABLED,
                    adminDetails.ADMIN_EREMIT_ENABLED_DATE,
                    adminDetails.MAST_STATE_CODE,
                    adminDetails.MAST_DISTRICT_NAME,
                    adminDetails.ADMIN_ND_CLOSE_DATE,
                    adminDetails.ADMIN_ND_ACTIVE
                }).ToArray();

                return result.Select(adminDetails => new
                {
                    //id = adminDetails.ADMIN_ND_CODE.ToString().Trim(),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{

                    adminDetails.ADMIN_ND_NAME == null?"NA":adminDetails.ADMIN_ND_NAME.ToString(),
                    adminDetails.MAST_DISTRICT_NAME==null?"NA":adminDetails.MAST_DISTRICT_NAME.ToString(),
                    adminDetails.ADMIN_ND_TAN_NO == null?"NA":adminDetails.ADMIN_ND_TAN_NO.ToString(),
                    adminDetails.ADMIN_BANK_AUTH_ENABLED=="Y"?"Yes":"No",
                    adminDetails.ADMIN_BA_ENABLE_DATE == null? "NA":Convert.ToDateTime(adminDetails.ADMIN_BA_ENABLE_DATE).ToString("dd/MM/yyyy"),
                    adminDetails.ADMIN_EPAY_MAIL=="Y"?"Yes":"No",
                    adminDetails.ADMIN_EPAY_ENABLE_DATE == null? "NA":Convert.ToDateTime(adminDetails.ADMIN_EPAY_ENABLE_DATE).ToString("dd/MM/yyyy"),
                    adminDetails.ADMIN_EREMITTANCE_ENABLED=="Y"?"Yes":"No",
                    adminDetails.ADMIN_EREMIT_ENABLED_DATE == null? "NA":Convert.ToDateTime(adminDetails.ADMIN_EREMIT_ENABLED_DATE).ToString("dd/MM/yyyy"),
                    adminDetails.ADMIN_ND_ACTIVE=="Y"?"Yes":"No",
                    adminDetails.ADMIN_ND_CLOSE_DATE == null? "NA":Convert.ToDateTime(adminDetails.ADMIN_ND_CLOSE_DATE).ToString("dd/MM/yyyy"),
                   
                    //(adminDetails.ADMIN_ND_ADDRESS1 == null?string.Empty:adminDetails.ADMIN_ND_ADDRESS1.ToString())+" "+(adminDetails.ADMIN_ND_ADDRESS2 == null?string.Empty:adminDetails.ADMIN_ND_ADDRESS2.ToString()),
                   // adminDetails.MAST_DISTRICT_NAME == null?string.Empty:adminDetails.MAST_DISTRICT_NAME.ToString(),            
                    //(adminDetails.ADMIN_ND_STD1 == null?string.Empty:adminDetails.ADMIN_ND_STD1)+" "+(adminDetails.ADMIN_ND_PHONE1==null?string.Empty:adminDetails.ADMIN_ND_PHONE1.ToString()),
                    //adminDetails.ADMIN_ND_MOBILE_NO==null?string.Empty:adminDetails.ADMIN_ND_MOBILE_NO.ToString(),
                    //adminDetails.ADMIN_ND_EMAIL==null?string.Empty:adminDetails.ADMIN_ND_EMAIL.ToString(),
                    //adminDetails.ADMIN_ND_REMARKS == null?string.Empty:adminDetails.ADMIN_ND_REMARKS.ToString(),
                                
                    //adminDetails.ADMIN_BA_ENABLE_DATE == null?"-":Convert.ToDateTime(adminDetails.ADMIN_BA_ENABLE_DATE).ToString("dd/MM/yyyy"),
                    //adminDetails.ADMIN_EREMIT_ENABLED_DATE == null?"-":Convert.ToDateTime(adminDetails.ADMIN_EREMIT_ENABLED_DATE).ToString("dd/MM/yyyy"),
                   // adminDetails.ADMIN_PDF_KEY == null?string.Empty:adminDetails.ADMIN_PDF_KEY.ToString(),
                    //adminDetails.MAST_ND_TYPE == "S"? URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()}):string.Empty,                   
                    
                    URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()})

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        public List<Models.ADMIN_DEPARTMENT> GetSSRDAByStateAgencyCode(int stateCode, int agencyCode, bool isAllPopulate)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<Models.ADMIN_DEPARTMENT> departmentList = dbContext.ADMIN_DEPARTMENT.Where(d => d.MAST_STATE_CODE == stateCode && d.MAST_AGENCY_CODE == agencyCode && d.MAST_ND_TYPE == "S").OrderBy(d => d.ADMIN_ND_NAME).ToList<Models.ADMIN_DEPARTMENT>();

                if (isAllPopulate == true)
                {
                    departmentList.Insert(0, new ADMIN_DEPARTMENT { ADMIN_ND_CODE = 0, ADMIN_ND_NAME = "--All--" });

                }
                else
                {
                    departmentList.Insert(0, new ADMIN_DEPARTMENT { ADMIN_ND_CODE = 0, ADMIN_ND_NAME = "--Select--" });

                }

                return departmentList;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Populate Agencies of specific states
        /// </summary>
        /// <param name="stateCode"></param>
        /// <param name="isAllSelected"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateAgencies(int stateCode, bool isAllSelected = false)
        {
            List<SelectListItem> lstAgencies = new List<SelectListItem>();
            SelectListItem item;

            try
            {
                dbContext = new PMGSYEntities();
                var query = (from ma in dbContext.MASTER_AGENCY
                             join md in dbContext.ADMIN_DEPARTMENT on ma.MAST_AGENCY_CODE equals md.MAST_AGENCY_CODE
                             where md.MAST_STATE_CODE == stateCode &&
                             md.MAST_ND_TYPE == "S"
                             select new
                             {
                                 Text = ma.MAST_AGENCY_NAME,
                                 Value = ma.MAST_AGENCY_CODE
                                 //Selected = (ma.MAST_AGENCY_TYPE == "G" ? true : false)
                             }).OrderBy(c => c.Text).ToList().Distinct();

                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text;
                    item.Value = data.Value.ToString();
                    //item.Selected = data.Selected;
                    lstAgencies.Add(item);
                }

                if (isAllSelected == false)
                {
                    lstAgencies.Insert(0, (new SelectListItem { Text = "Select Agency", Value = "-1", Selected = true }));
                }
                else if (isAllSelected == true)
                {
                    lstAgencies.Insert(0, (new SelectListItem { Text = "All Agencies", Value = "0", Selected = true }));
                }

                return lstAgencies;
            }
            catch
            {
                return lstAgencies;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Populate Agencies of specific states
        /// </summary>
        /// <param name="stateCode"></param>
        /// <param name="isAllSelected"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateAgenciesByDepartementWise(int stateCode, int deptId, bool isAllSelected = false)
        {
            List<SelectListItem> lstAgencies = new List<SelectListItem>();
            SelectListItem item;

            try
            {
                dbContext = new PMGSYEntities();

                var query = (from ma in dbContext.MASTER_AGENCY
                             join md in dbContext.ADMIN_DEPARTMENT on ma.MAST_AGENCY_CODE equals md.MAST_AGENCY_CODE
                             where md.MAST_STATE_CODE == stateCode &&
                             md.MAST_ND_TYPE == "S" &&
                            ((deptId == 0 ? 1 : md.ADMIN_ND_CODE) == (deptId == 0 ? 1 : deptId))
                             select new
                             {
                                 Text = ma.MAST_AGENCY_NAME,
                                 Value = ma.MAST_AGENCY_CODE
                                 //Selected = (ma.MAST_AGENCY_TYPE == "G" ? true : false)
                             }).OrderBy(c => c.Text).ToList().Distinct();

                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text;
                    item.Value = data.Value.ToString();
                    //item.Selected = data.Selected;
                    lstAgencies.Add(item);
                }

                if (isAllSelected == false)
                {
                    lstAgencies.Insert(0, (new SelectListItem { Text = "Select Agency", Value = "-1", Selected = true }));
                }
                else if (isAllSelected == true)
                {
                    lstAgencies.Insert(0, (new SelectListItem { Text = "All Agencies", Value = "0", Selected = true }));
                }

                return lstAgencies;
            }
            catch
            {
                return lstAgencies;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        public List<Models.ADMIN_DEPARTMENT> GetSSRDAByState(int stateCode, bool isAllPopulate = false)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<Models.ADMIN_DEPARTMENT> departmentList = dbContext.ADMIN_DEPARTMENT.Where(d => d.MAST_STATE_CODE == stateCode && d.MAST_ND_TYPE == "S").OrderBy(d => d.ADMIN_ND_NAME).ToList<Models.ADMIN_DEPARTMENT>();

                if (isAllPopulate == true)
                {
                    departmentList.Insert(0, new ADMIN_DEPARTMENT { ADMIN_ND_CODE = 0, ADMIN_ND_NAME = "--All--" });

                }
                else if (isAllPopulate == false)
                {
                    departmentList.Insert(0, new ADMIN_DEPARTMENT { ADMIN_ND_CODE = 0, ADMIN_ND_NAME = "--Select--" });

                }

                return departmentList;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        #endregion

        #region Unit DAL defination

        public bool AddMasterUnit(MasterUnitsTypeViewModel masterUnitViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_UNITS.Any(m => m.MAST_UNIT_NAME == masterUnitViewModel.MAST_UNIT_NAME))
                {
                    message = "Unit details already exist.";
                    return false;
                }

                bool flagUnitAddEdit = true;
                MASTER_UNITS masterUnitModel = CloneUnitModel(masterUnitViewModel, flagUnitAddEdit);
                masterUnitModel.MAST_UNIT_CODE = dbContext.MASTER_UNITS.Max(cp => (Int32?)cp.MAST_UNIT_CODE) == null ? 1 : (Int32)dbContext.MASTER_UNITS.Max(cp => (Int32?)cp.MAST_UNIT_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_UNITS.Add(masterUnitModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditMasterUnit(MasterUnitsTypeViewModel masterUnitsViewModel, ref string message)
        {
            bool flagUnitAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterUnitsViewModel.EncryptedUnitCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                UnitId = Convert.ToInt32(decryptedParameters["UnitID"].ToString());

                Int32 recordCount = dbContext.MASTER_UNITS.Where(m => m.MAST_UNIT_NAME.ToUpper() == masterUnitsViewModel.MAST_UNIT_NAME.ToUpper() && m.MAST_UNIT_CODE != UnitId).Count();
                if (recordCount > 0)
                {
                    message = "Unit Name already exists.";
                    return false;
                }

                MASTER_UNITS masterUnitModel = CloneUnitModel(masterUnitsViewModel, flagUnitAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterUnitModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterUnit(int masterUnitId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_UNITS masterUnitModel = dbContext.MASTER_UNITS.Where(m => m.MAST_UNIT_CODE == masterUnitId).FirstOrDefault();

                if (masterUnitModel == null)
                {
                    return false;
                }

                dbContext.MASTER_UNITS.Remove(masterUnitModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Unit details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterUnit(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_UNITS> lstMasterUnitDetails = dbContext.MASTER_UNITS.ToList<MASTER_UNITS>();
                totalRecords = lstMasterUnitDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {

                        switch (sidx)
                        {
                            case "MAST_UNIT_NAME":
                                lstMasterUnitDetails = lstMasterUnitDetails.OrderBy(x => x.MAST_UNIT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_UNITS>();
                                break;

                            case "MAST_UNIT_SHORT_NAME":
                                lstMasterUnitDetails = lstMasterUnitDetails.OrderBy(x => x.MAST_UNIT_SHORT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_UNITS>();
                                break;
                            case "MAST_UNIT_DIMENSION":
                                lstMasterUnitDetails = lstMasterUnitDetails.OrderBy(x => x.MAST_UNIT_DIMENSION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_UNITS>();
                                break;
                        }


                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "MAST_UNIT_NAME":
                                lstMasterUnitDetails = lstMasterUnitDetails.OrderByDescending(x => x.MAST_UNIT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_UNITS>();
                                break;

                            case "MAST_UNIT_SHORT_NAME":
                                lstMasterUnitDetails = lstMasterUnitDetails.OrderByDescending(x => x.MAST_UNIT_SHORT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_UNITS>();
                                break;
                            case "MAST_UNIT_DIMENSION":
                                lstMasterUnitDetails = lstMasterUnitDetails.OrderByDescending(x => x.MAST_UNIT_DIMENSION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_UNITS>();
                                break;
                        }

                    }
                }
                else
                {
                    lstMasterUnitDetails = lstMasterUnitDetails.OrderBy(x => x.MAST_UNIT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_UNITS>();
                }

                return lstMasterUnitDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_UNIT_NAME,
                                    item.MAST_UNIT_SHORT_NAME.ToString(),
                                    item.MAST_UNIT_DIMENSION.ToString()==String.Empty?"-":item.MAST_UNIT_DIMENSION.ToString(),
                       URLEncrypt.EncryptParameters1(new string[]{"UnitID="+item.MAST_UNIT_CODE.ToString().Trim()})
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterUnitsTypeViewModel GetUnitDetails_ByUnitCode(int unitCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_UNITS masterUnitModel = dbContext.MASTER_UNITS.FirstOrDefault(m => m.MAST_UNIT_CODE == unitCode);
                MasterUnitsTypeViewModel masterUnitViewModel = null;
                if (masterUnitModel != null)
                {
                    masterUnitViewModel = CloneUnitObject(masterUnitModel);

                }
                return masterUnitViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterUnitsTypeViewModel CloneUnitObject(MASTER_UNITS masterUnitModel)
        {
            try
            {
                MasterUnitsTypeViewModel masterUnitViewModel = new MasterUnitsTypeViewModel();

                masterUnitViewModel.EncryptedUnitCode = URLEncrypt.EncryptParameters1(new string[] { "UnitID =" + masterUnitModel.MAST_UNIT_CODE.ToString().Trim() });
                masterUnitViewModel.MAST_UNIT_CODE = masterUnitModel.MAST_UNIT_CODE;
                masterUnitViewModel.MAST_UNIT_NAME = masterUnitModel.MAST_UNIT_NAME;
                masterUnitViewModel.MAST_UNIT_SHORT_NAME = masterUnitModel.MAST_UNIT_SHORT_NAME;
                masterUnitViewModel.MAST_UNIT_DIMENSION = masterUnitModel.MAST_UNIT_DIMENSION;

                return masterUnitViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        public MASTER_UNITS CloneUnitModel(MasterUnitsTypeViewModel masterUnitsViewModel, bool flagUnitAddEdit)
        {
            try
            {
                MASTER_UNITS masterUnitModel = new MASTER_UNITS();

                if (flagUnitAddEdit)
                {
                    masterUnitModel.MAST_UNIT_CODE = masterUnitsViewModel.MAST_UNIT_CODE;
                }
                else
                {
                    masterUnitModel.MAST_UNIT_CODE = UnitId;
                }

                masterUnitModel.MAST_UNIT_NAME = masterUnitsViewModel.MAST_UNIT_NAME;
                masterUnitModel.MAST_UNIT_SHORT_NAME = masterUnitsViewModel.MAST_UNIT_SHORT_NAME;
                masterUnitModel.MAST_UNIT_DIMENSION = masterUnitsViewModel.MAST_UNIT_DIMENSION;

                return masterUnitModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        #endregion Unit DAL defination

        #region Terrain DAL defination

        public bool AddMasterTerrainType(MasterTerrainTypeViewModel masterTerrainTypeViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_TERRAIN_TYPE.Any(m => m.MAST_TERRAIN_TYPE_NAME == masterTerrainTypeViewModel.MAST_TERRAIN_TYPE_NAME))
                {
                    message = "Terrain details already exist.";
                    return false;
                }

                if (masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_TO != null && masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_FROM == null)
                {
                    message = "Please enter Slope From.";
                    return false;
                }

                if (masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_TO == null && masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_FROM != null)
                {
                    message = "Please enter Slope To.";
                    return false;
                }

                bool flagTerrainAddEdit = true;
                MASTER_TERRAIN_TYPE masterTerrainTypeModel = CloneTerrainModel(masterTerrainTypeViewModel, flagTerrainAddEdit);
                masterTerrainTypeModel.MAST_TERRAIN_TYPE_CODE = dbContext.MASTER_TERRAIN_TYPE.Max(cp => (Int32?)cp.MAST_TERRAIN_TYPE_CODE) == null ? 1 : (Int32)dbContext.MASTER_TERRAIN_TYPE.Max(cp => (Int32?)cp.MAST_TERRAIN_TYPE_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_TERRAIN_TYPE.Add(masterTerrainTypeModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        public bool EditMasterTerrainType(MasterTerrainTypeViewModel masterTerrainTypeViewModel, ref string message)
        {
            bool flagTerrainAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterTerrainTypeViewModel.EncryptedTerrainCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                TerrainId = Convert.ToInt32(decryptedParameters["TerrainID"].ToString());

                Int32 recordCount = dbContext.MASTER_TERRAIN_TYPE.Where(m => m.MAST_TERRAIN_TYPE_NAME.ToUpper() == masterTerrainTypeViewModel.MAST_TERRAIN_TYPE_NAME.ToUpper() && m.MAST_TERRAIN_TYPE_CODE != TerrainId).Count();
                if (recordCount > 0)
                {
                    message = "Terrain details already exists.";
                    return false;
                }

                if (masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_TO != null && masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_FROM == null)
                {
                    message = "Please enter Slope From.";
                    return false;
                }

                if (masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_TO == null && masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_FROM != null)
                {
                    message = "Please enter Slope To.";
                    return false;
                }

                MASTER_TERRAIN_TYPE masterTerrainTypeModel = CloneTerrainModel(masterTerrainTypeViewModel, flagTerrainAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterTerrainTypeModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterTerrainType(int masterTerrainTypeId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_TERRAIN_TYPE masterTerrainTypeModel = dbContext.MASTER_TERRAIN_TYPE.Where(m => m.MAST_TERRAIN_TYPE_CODE == masterTerrainTypeId).FirstOrDefault();

                if (masterTerrainTypeModel == null)
                {
                    return false;
                }

                dbContext.MASTER_TERRAIN_TYPE.Remove(masterTerrainTypeModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Terrain details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterTerrainType(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_TERRAIN_TYPE> lstMasterTerrainTypeDetails = dbContext.MASTER_TERRAIN_TYPE.ToList<MASTER_TERRAIN_TYPE>();
                totalRecords = lstMasterTerrainTypeDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_TERRAIN_TYPE_NAME":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderBy(x => x.MAST_TERRAIN_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                            case "MAST_TERRAIN_SLOP_FROM":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderBy(x => x.MAST_TERRAIN_SLOP_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                            case "MAST_TERRAIN_SLOP_TO":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderBy(x => x.MAST_TERRAIN_SLOP_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                            case "MAST_TERRAIN_ROADWAY_WIDTH":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderBy(x => x.MAST_TERRAIN_ROADWAY_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_TERRAIN_TYPE_NAME":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderByDescending(x => x.MAST_TERRAIN_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                            case "MAST_TERRAIN_SLOP_FROM":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderByDescending(x => x.MAST_TERRAIN_SLOP_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                            case "MAST_TERRAIN_SLOP_TO":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderByDescending(x => x.MAST_TERRAIN_SLOP_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                            case "MAST_TERRAIN_ROADWAY_WIDTH":
                                lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderByDescending(x => x.MAST_TERRAIN_ROADWAY_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                                break;
                        }


                    }
                }
                else
                {
                    lstMasterTerrainTypeDetails = lstMasterTerrainTypeDetails.OrderBy(x => x.MAST_TERRAIN_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_TERRAIN_TYPE>();
                }

                return lstMasterTerrainTypeDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_TERRAIN_TYPE_NAME,
                                    item.MAST_TERRAIN_SLOP_FROM.ToString()==String.Empty?"-":item.MAST_TERRAIN_SLOP_FROM.ToString(),
                                    item.MAST_TERRAIN_SLOP_TO.ToString()==String.Empty?"-":item.MAST_TERRAIN_SLOP_TO.ToString(),
                                    item.MAST_TERRAIN_ROADWAY_WIDTH.ToString(),
                       URLEncrypt.EncryptParameters1(new string[]{"TerrainID="+item.MAST_TERRAIN_TYPE_CODE.ToString().Trim()})
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterTerrainTypeViewModel GetTerrainTypeDetails_ByTerrainCode(int terrainCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_TERRAIN_TYPE masterTerrainTypeModel = dbContext.MASTER_TERRAIN_TYPE.FirstOrDefault(m => m.MAST_TERRAIN_TYPE_CODE == terrainCode);
                MasterTerrainTypeViewModel masterTerrainTypeViewModel = null;
                if (masterTerrainTypeModel != null)
                {
                    masterTerrainTypeViewModel = CloneTerrainObject(masterTerrainTypeModel);

                }
                return masterTerrainTypeViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterTerrainTypeViewModel CloneTerrainObject(MASTER_TERRAIN_TYPE masterTerrainModel)
        {
            try
            {
                MasterTerrainTypeViewModel masterTerrainViewModel = new MasterTerrainTypeViewModel();

                masterTerrainViewModel.EncryptedTerrainCode = URLEncrypt.EncryptParameters1(new string[] { "TerrainID =" + masterTerrainModel.MAST_TERRAIN_TYPE_CODE.ToString().Trim() });
                masterTerrainViewModel.MAST_TERRAIN_TYPE_CODE = masterTerrainModel.MAST_TERRAIN_TYPE_CODE;
                masterTerrainViewModel.MAST_TERRAIN_TYPE_NAME = masterTerrainModel.MAST_TERRAIN_TYPE_NAME;
                masterTerrainViewModel.MAST_TERRAIN_SLOP_FROM = masterTerrainModel.MAST_TERRAIN_SLOP_FROM;
                masterTerrainViewModel.MAST_TERRAIN_SLOP_TO = masterTerrainModel.MAST_TERRAIN_SLOP_TO;
                masterTerrainViewModel.MAST_TERRAIN_ROADWAY_WIDTH = masterTerrainModel.MAST_TERRAIN_ROADWAY_WIDTH;

                return masterTerrainViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public MASTER_TERRAIN_TYPE CloneTerrainModel(MasterTerrainTypeViewModel masterTerrainTypeViewModel, bool flagTerrainAddEdit)
        {
            try
            {
                MASTER_TERRAIN_TYPE masterTerrainTypeModel = new MASTER_TERRAIN_TYPE();

                if (flagTerrainAddEdit)
                {
                    masterTerrainTypeModel.MAST_TERRAIN_TYPE_CODE = masterTerrainTypeViewModel.MAST_TERRAIN_TYPE_CODE;
                }
                else
                {
                    masterTerrainTypeModel.MAST_TERRAIN_TYPE_CODE = TerrainId;
                }

                masterTerrainTypeModel.MAST_TERRAIN_TYPE_NAME = masterTerrainTypeViewModel.MAST_TERRAIN_TYPE_NAME;
                masterTerrainTypeModel.MAST_TERRAIN_SLOP_FROM = masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_FROM;
                masterTerrainTypeModel.MAST_TERRAIN_SLOP_TO = masterTerrainTypeViewModel.MAST_TERRAIN_SLOP_TO;
                masterTerrainTypeModel.MAST_TERRAIN_ROADWAY_WIDTH = masterTerrainTypeViewModel.MAST_TERRAIN_ROADWAY_WIDTH;

                return masterTerrainTypeModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        #endregion Terrain DAL defination

        #region Surface DAL defination

        public bool AddMasterSurface(MasterSurfaceViewModel masterSurfaceViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_SURFACE.Any(s => s.MAST_SURFACE_NAME == masterSurfaceViewModel.MAST_SURFACE_NAME))
                {
                    message = "Surface details already exist.";
                    return false;
                }

                bool flagSurfaceAddEdit = true;
                MASTER_SURFACE masterSurfaceModel = CloneSurfaceModel(masterSurfaceViewModel, flagSurfaceAddEdit);
                masterSurfaceModel.MAST_SURFACE_CODE = dbContext.MASTER_SURFACE.Max(cp => (Int32?)cp.MAST_SURFACE_CODE) == null ? 1 : (Int32)dbContext.MASTER_SURFACE.Max(cp => (Int32?)cp.MAST_SURFACE_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_SURFACE.Add(masterSurfaceModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool EditMasterSurface(MasterSurfaceViewModel masterSurfaceViewModel, ref string message)
        {
            bool flagSurfaceAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterSurfaceViewModel.EncryptedSurfaceCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                SurfaceCode = Convert.ToInt32(decryptedParameters["SurfaceID"].ToString());

                Int32 recordCount = dbContext.MASTER_SURFACE.Where(m => m.MAST_SURFACE_NAME.ToUpper() == masterSurfaceViewModel.MAST_SURFACE_NAME.ToUpper() && m.MAST_SURFACE_CODE != SurfaceCode).Count();
                if (recordCount > 0)
                {
                    message = "Surface Name already exists.";
                    return false;
                }

                MASTER_SURFACE masterSurfaceModel = CloneSurfaceModel(masterSurfaceViewModel, flagSurfaceAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterSurfaceModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterSurface(int masterSurfaceId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_SURFACE masterSurfaceModel = dbContext.MASTER_SURFACE.Where(m => m.MAST_SURFACE_CODE == masterSurfaceId).FirstOrDefault();

                if (masterSurfaceModel == null)
                {
                    return false;
                }

                dbContext.MASTER_SURFACE.Remove(masterSurfaceModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Surface details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterSurface(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_SURFACE> lstMasterSurfaceDetails = dbContext.MASTER_SURFACE.ToList<MASTER_SURFACE>();
                totalRecords = lstMasterSurfaceDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        lstMasterSurfaceDetails = lstMasterSurfaceDetails.OrderBy(x => x.MAST_SURFACE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_SURFACE>();

                    }
                    else
                    {

                        lstMasterSurfaceDetails = lstMasterSurfaceDetails.OrderByDescending(x => x.MAST_SURFACE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_SURFACE>();

                    }
                }
                else
                {

                    lstMasterSurfaceDetails = lstMasterSurfaceDetails.OrderBy(x => x.MAST_SURFACE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_SURFACE>();
                }

                return lstMasterSurfaceDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_SURFACE_NAME.Trim(),
                       URLEncrypt.EncryptParameters1(new string[]{"SurfaceID="+item.MAST_SURFACE_CODE.ToString().Trim()})
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterSurfaceViewModel GetSurfaceDetails_BySurfaceCode(int surfaceCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_SURFACE masterSurfaceModel = dbContext.MASTER_SURFACE.FirstOrDefault(m => m.MAST_SURFACE_CODE == surfaceCode);
                MasterSurfaceViewModel masterSurfaceViewModel = null;
                if (masterSurfaceModel != null)
                {
                    masterSurfaceViewModel = CloneSurfaceObject(masterSurfaceModel);

                }
                return masterSurfaceViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterSurfaceViewModel CloneSurfaceObject(MASTER_SURFACE masterSurfaceModel)
        {
            try
            {

                MasterSurfaceViewModel masterSurfaceViewModel = new MasterSurfaceViewModel();

                masterSurfaceViewModel.EncryptedSurfaceCode = URLEncrypt.EncryptParameters1(new string[] { "SurfaceID =" + masterSurfaceModel.MAST_SURFACE_CODE.ToString().Trim() });
                masterSurfaceViewModel.MAST_SURFACE_CODE = masterSurfaceModel.MAST_SURFACE_CODE;
                masterSurfaceViewModel.MAST_SURFACE_NAME = masterSurfaceModel.MAST_SURFACE_NAME;
                return masterSurfaceViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        public MASTER_SURFACE CloneSurfaceModel(MasterSurfaceViewModel masterSurfaceViewModel, bool flagAddEdit)
        {
            try
            {
                MASTER_SURFACE masterSurface = new MASTER_SURFACE();

                if (flagAddEdit)
                {
                    masterSurface.MAST_SURFACE_CODE = masterSurfaceViewModel.MAST_SURFACE_CODE;
                }
                else
                {
                    masterSurface.MAST_SURFACE_CODE = masterSurfaceViewModel.MAST_SURFACE_CODE = SurfaceCode;
                }

                masterSurface.MAST_SURFACE_NAME = masterSurfaceViewModel.MAST_SURFACE_NAME;
                return masterSurface;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }




        #endregion Surface DAL defination

        #region Scour Foundation Type DAL defination

        public bool AddMasterScourFoundationType(MasterScourFoundationTypeViewModel masterScourFoundationTypeViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();


                if (dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Where(s => s.IMS_SC_FD_NAME.ToUpper() == masterScourFoundationTypeViewModel.IMS_SC_FD_NAME.ToUpper() && s.IMS_SC_FD_TYPE == masterScourFoundationTypeViewModel.IMS_SC_FD_TYPE).Any())
                {
                    message = "Scour/Foundation details already exist.";
                    return false;
                }

                bool flagScourFoundationAddEdit = true;
                MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = CloneScourFoundationModel(masterScourFoundationTypeViewModel, flagScourFoundationAddEdit);
                masterScourFoundationModel.IMS_SC_FD_CODE = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Max(cp => (Int32?)cp.IMS_SC_FD_CODE) == null ? 1 : (Int32)dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Max(cp => (Int32?)cp.IMS_SC_FD_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Add(masterScourFoundationModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool EditMasterScourFoundationType(MasterScourFoundationTypeViewModel masterScourFoundationTypeViewModel, ref string message)
        {
            try
            {
                bool flagScourFoundationAddEdit = false;
                dbContext = new PMGSYEntities();
                encryptedParameters = masterScourFoundationTypeViewModel.EncryptedScourCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ScourFoundationCode = Convert.ToInt32(decryptedParameters["ScourID"].ToString());

                Int32 recordCount = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Where(m => m.IMS_SC_FD_NAME.ToUpper() == masterScourFoundationTypeViewModel.IMS_SC_FD_NAME.ToUpper() && m.IMS_SC_FD_CODE != ScourFoundationCode && m.IMS_SC_FD_TYPE == masterScourFoundationTypeViewModel.IMS_SC_FD_TYPE).Count();

                if (recordCount > 0)
                {
                    message = "Scour/Foundation Name is already exist.";
                    return false;
                }

                MASTER_SCOUR_FOUNDATION_TYPE masterScourModel = CloneScourFoundationModel(masterScourFoundationTypeViewModel, flagScourFoundationAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterScourModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterScourFoundationType(int masterScourFoundationTypeId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Where(m => m.IMS_SC_FD_CODE == masterScourFoundationTypeId).FirstOrDefault();

                if (masterScourFoundationModel == null)
                {
                    return false;
                }

                dbContext.MASTER_SCOUR_FOUNDATION_TYPE.Remove(masterScourFoundationModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Scour/Foundation details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterScourFoundationType(string SfType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {

            SfType = SfType.Replace("*", "");

            try
            {

                dbContext = new PMGSYEntities();
                var lstMasterScourFoundationDetails = (from scourFoundation in dbContext.MASTER_SCOUR_FOUNDATION_TYPE
                                                       where (SfType == string.Empty ? "%" : scourFoundation.IMS_SC_FD_TYPE.ToUpper()).StartsWith(SfType == string.Empty ? "%" : SfType.ToUpper())
                                                       select new
                                                       {
                                                           scourFoundation.IMS_SC_FD_CODE,
                                                           scourFoundation.IMS_SC_FD_NAME,
                                                           scourFoundation.IMS_SC_FD_TYPE
                                                       }).ToList();



                totalRecords = lstMasterScourFoundationDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_SC_FD_NAME":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.IMS_SC_FD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_SC_FD_TYPE":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.IMS_SC_FD_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "IMS_SC_FD_NAME":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderByDescending(x => x.IMS_SC_FD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_SC_FD_TYPE":
                                lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderByDescending(x => x.IMS_SC_FD_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                }
                else
                {

                    lstMasterScourFoundationDetails = lstMasterScourFoundationDetails.OrderBy(x => x.IMS_SC_FD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                return lstMasterScourFoundationDetails.Select(item => new
                {
                    cell = new[]{
                                    item.IMS_SC_FD_NAME.Trim(),
                                    item.IMS_SC_FD_TYPE.Trim().ToUpper()=="S"?"Scour":"Foundation",
                       URLEncrypt.EncryptParameters1(new string[]{"ScourID="+item.IMS_SC_FD_CODE.ToString().Trim()})
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public MasterScourFoundationTypeViewModel GetScourFoundationDetails_ByScourFoundationCode(int scourFoundationCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = dbContext.MASTER_SCOUR_FOUNDATION_TYPE.FirstOrDefault(m => m.IMS_SC_FD_CODE == scourFoundationCode);
                MasterScourFoundationTypeViewModel masterScourFoundationViewModel = null;
                if (masterScourFoundationModel != null)
                {
                    masterScourFoundationViewModel = CloneScourFoundationObject(masterScourFoundationModel);

                }
                return masterScourFoundationViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MASTER_SCOUR_FOUNDATION_TYPE CloneScourFoundationModel(MasterScourFoundationTypeViewModel masterScourFoundationTypeViewModel, bool flagAddEdit)
        {
            try
            {
                MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationModel = new MASTER_SCOUR_FOUNDATION_TYPE();

                if (flagAddEdit)
                {
                    masterScourFoundationModel.IMS_SC_FD_CODE = masterScourFoundationTypeViewModel.IMS_SC_FD_CODE;
                }
                else
                {
                    masterScourFoundationModel.IMS_SC_FD_CODE = ScourFoundationCode;
                }


                masterScourFoundationModel.IMS_SC_FD_NAME = masterScourFoundationTypeViewModel.IMS_SC_FD_NAME;
                masterScourFoundationModel.IMS_SC_FD_TYPE = masterScourFoundationTypeViewModel.IMS_SC_FD_TYPE;

                return masterScourFoundationModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public MasterScourFoundationTypeViewModel CloneScourFoundationObject(MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationTypeModel)
        {
            try
            {

                MasterScourFoundationTypeViewModel masterScourFoundationTypeViewModel = new MasterScourFoundationTypeViewModel();

                masterScourFoundationTypeViewModel.EncryptedScourCode = URLEncrypt.EncryptParameters1(new string[] { "ScourID =" + masterScourFoundationTypeModel.IMS_SC_FD_CODE.ToString().Trim() });
                masterScourFoundationTypeViewModel.IMS_SC_FD_CODE = masterScourFoundationTypeModel.IMS_SC_FD_CODE;
                masterScourFoundationTypeViewModel.IMS_SC_FD_NAME = masterScourFoundationTypeModel.IMS_SC_FD_NAME;
                masterScourFoundationTypeViewModel.IMS_SC_FD_TYPE = masterScourFoundationTypeModel.IMS_SC_FD_TYPE;

                return masterScourFoundationTypeViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }



        public List<SelectListItem> GetScourFoundation()
        {
            List<SelectListItem> ScourFoundaation = new List<SelectListItem>();
            ScourFoundaation.Add(
              new SelectListItem()
              {
                  Text = "Foundation",
                  Value = "F"
              }
              );
            ScourFoundaation.Add(
              new SelectListItem()
              {
                  Text = "Scour",
                  Value = "S"
              }
              );

            return ScourFoundaation;
        }


        #endregion Scour Foundation Type DAL declaration

        #region Grade DAL defination

        public bool AddMasterGradeType(MasterGradeTypeViewModel masterGradeTypeViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_GRADE_TYPE.Any(m => m.MAST_GRADE_NAME == masterGradeTypeViewModel.MAST_GRADE_NAME && m.MAST_GRADE_SHORT_NAME == masterGradeTypeViewModel.MAST_GRADE_SHORT_NAME))
                {
                    message = "Grade details already exist.";
                    return false;
                }

                bool flagGradeAddEdit = true;
                MASTER_GRADE_TYPE masterGradeTypeModel = CloneGradeModel(masterGradeTypeViewModel, flagGradeAddEdit);
                masterGradeTypeModel.MAST_GRADE_CODE = dbContext.MASTER_GRADE_TYPE.Max(cp => (Int32?)cp.MAST_GRADE_CODE) == null ? 1 : (Int32)dbContext.MASTER_GRADE_TYPE.Max(cp => (Int32)cp.MAST_GRADE_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_GRADE_TYPE.Add(masterGradeTypeModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        public bool EditMasterGradeType(MasterGradeTypeViewModel masterGradeTypeViewModel, ref string message)
        {
            bool flagGradeAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterGradeTypeViewModel.EncryptedGradeCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                gradeId = Convert.ToInt32(decryptedParameters["GradeID"].ToString());

                Int32 recordCount = dbContext.MASTER_GRADE_TYPE.Where(m => m.MAST_GRADE_NAME.ToUpper() == masterGradeTypeViewModel.MAST_GRADE_NAME.ToUpper() && m.MAST_GRADE_CODE != gradeId && m.MAST_GRADE_SHORT_NAME == masterGradeTypeViewModel.MAST_GRADE_SHORT_NAME).Count();
                if (recordCount > 0)
                {
                    message = "Grade Name already exists.";
                    return false;
                }

                MASTER_GRADE_TYPE masterGradeTypeModel = CloneGradeModel(masterGradeTypeViewModel, flagGradeAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterGradeTypeModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterGradeType(int masterGradeTypeId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_GRADE_TYPE masterGradeTypeModel = dbContext.MASTER_GRADE_TYPE.Where(m => m.MAST_GRADE_CODE == masterGradeTypeId).FirstOrDefault();

                if (masterGradeTypeModel == null)
                {
                    return false;
                }

                dbContext.MASTER_GRADE_TYPE.Remove(masterGradeTypeModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Grade details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterGradeType(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_GRADE_TYPE> lstMasterGradeTypeDetails = dbContext.MASTER_GRADE_TYPE.ToList<MASTER_GRADE_TYPE>();
                totalRecords = lstMasterGradeTypeDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_GRADE_NAME":
                                lstMasterGradeTypeDetails = lstMasterGradeTypeDetails.OrderBy(x => x.MAST_GRADE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_GRADE_TYPE>();
                                break;

                            case "MAST_GRADE_SHORT_NAME":
                                lstMasterGradeTypeDetails = lstMasterGradeTypeDetails.OrderBy(x => x.MAST_GRADE_SHORT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_GRADE_TYPE>();
                                break;
                        }

                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "MAST_GRADE_NAME":
                                lstMasterGradeTypeDetails = lstMasterGradeTypeDetails.OrderByDescending(x => x.MAST_GRADE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_GRADE_TYPE>();
                                break;

                            case "MAST_GRADE_SHORT_NAME":
                                lstMasterGradeTypeDetails = lstMasterGradeTypeDetails.OrderByDescending(x => x.MAST_GRADE_SHORT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_GRADE_TYPE>();
                                break;
                        }


                    }
                }
                else
                {

                    lstMasterGradeTypeDetails = lstMasterGradeTypeDetails.OrderBy(x => x.MAST_GRADE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_GRADE_TYPE>();
                }

                return lstMasterGradeTypeDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_GRADE_NAME.Trim(),
                                    item.MAST_GRADE_SHORT_NAME.Trim(),
                       URLEncrypt.EncryptParameters1(new string[]{"GradeID="+item.MAST_GRADE_CODE.ToString().Trim()})
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterGradeTypeViewModel GetGradeTypeDetails_ByGradeCode(int gradeCode)
        {

            try
            {
                dbContext = new PMGSYEntities();
                MASTER_GRADE_TYPE masterGradeTypeModel = dbContext.MASTER_GRADE_TYPE.FirstOrDefault(m => m.MAST_GRADE_CODE == gradeCode);
                MasterGradeTypeViewModel masterGradeTypeViewModel = null;
                if (masterGradeTypeModel != null)
                {
                    masterGradeTypeViewModel = CloneGradeObject(masterGradeTypeModel);

                }
                return masterGradeTypeViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterGradeTypeViewModel CloneGradeObject(MASTER_GRADE_TYPE masterGradeModel)
        {
            try
            {
                MasterGradeTypeViewModel masterGradeViewModel = new MasterGradeTypeViewModel();

                masterGradeViewModel.EncryptedGradeCode = URLEncrypt.EncryptParameters1(new string[] { "GradeID =" + masterGradeModel.MAST_GRADE_CODE.ToString().Trim() });
                masterGradeViewModel.MAST_GRADE_CODE = masterGradeModel.MAST_GRADE_CODE;
                masterGradeViewModel.MAST_GRADE_NAME = masterGradeModel.MAST_GRADE_NAME;
                masterGradeViewModel.MAST_GRADE_SHORT_NAME = masterGradeModel.MAST_GRADE_SHORT_NAME;
                return masterGradeViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public MASTER_GRADE_TYPE CloneGradeModel(MasterGradeTypeViewModel masterGradeTypeViewModel, bool flagAddEdit)
        {
            try
            {
                MASTER_GRADE_TYPE masterGradeTypeModel = new MASTER_GRADE_TYPE();

                if (flagAddEdit)
                {
                    masterGradeTypeModel.MAST_GRADE_CODE = masterGradeTypeViewModel.MAST_GRADE_CODE;
                }
                else
                {
                    masterGradeTypeModel.MAST_GRADE_CODE = gradeId;
                }
                masterGradeTypeModel.MAST_GRADE_NAME = masterGradeTypeViewModel.MAST_GRADE_NAME;
                masterGradeTypeModel.MAST_GRADE_SHORT_NAME = masterGradeTypeViewModel.MAST_GRADE_SHORT_NAME;
                return masterGradeTypeModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        //Added By Abhishek kamble 21-Feb-2014

        public List<SelectListItem> PopulateGradeShortNames()
        {
            List<SelectListItem> lstGrades = new List<SelectListItem>();

            lstGrades.Add(new SelectListItem { Value = "0", Text = "--Select--" });
            lstGrades.Add(new SelectListItem { Value = "I", Text = "I" });
            lstGrades.Add(new SelectListItem { Value = "NA", Text = "NA" });
            lstGrades.Add(new SelectListItem { Value = "S", Text = "S" });
            lstGrades.Add(new SelectListItem { Value = "U", Text = "U" });

            return lstGrades;
        }
        #endregion Grade DAL defination

        #region Component Type DAL defination

        public bool AddMasterComponentType(MasterComponentTypeViewModel masterComponentTypeViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_COMPONENT_TYPE.Any(m => m.MAST_COMPONENT_NAME == masterComponentTypeViewModel.MAST_COMPONENT_NAME))
                {
                    message = "Component details already exist.";
                    return false;
                }

                MASTER_COMPONENT_TYPE masterComponentTypeModel = CloneComponentModel(masterComponentTypeViewModel);
                masterComponentTypeModel.MAST_COMPONENT_CODE = dbContext.MASTER_COMPONENT_TYPE.Max(cp => (Int32?)cp.MAST_COMPONENT_CODE) == null ? 1 : (Int32)dbContext.MASTER_COMPONENT_TYPE.Max(cp => (Int32?)cp.MAST_COMPONENT_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_COMPONENT_TYPE.Add(masterComponentTypeModel);
                dbContext.SaveChanges();
                return true;

            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        public bool EditMasterComponentType(MasterComponentTypeViewModel masterComponentTypeViewModel, ref string message)
        {
            int ComponentId = 0;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterComponentTypeViewModel.EncryptedStateCode.Split('/');


                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ComponentId = Convert.ToInt32(decryptedParameters["CompID"].ToString());

                Int32 recordCount = dbContext.MASTER_COMPONENT_TYPE.Where(m => m.MAST_COMPONENT_NAME.ToUpper() == masterComponentTypeViewModel.MAST_COMPONENT_NAME.ToUpper() && m.MAST_COMPONENT_CODE != ComponentId).Count();
                if (recordCount > 0)
                {
                    message = "Component Name already exists.";
                    return false;
                }


                MASTER_COMPONENT_TYPE masterComponetTypeModel = CloneComponentModel(masterComponentTypeViewModel);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterComponetTypeModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterComponentType(int masterComponentTypeId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_COMPONENT_TYPE masterComponentTypeModel = dbContext.MASTER_COMPONENT_TYPE.Where(m => m.MAST_COMPONENT_CODE == masterComponentTypeId).FirstOrDefault();

                if (masterComponentTypeModel == null)
                {
                    return false;
                }

                dbContext.MASTER_COMPONENT_TYPE.Remove(masterComponentTypeModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Component details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterComponentType(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {

            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_COMPONENT_TYPE> lstMasterComponentTypeDetails = dbContext.MASTER_COMPONENT_TYPE.ToList<MASTER_COMPONENT_TYPE>();
                totalRecords = lstMasterComponentTypeDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        lstMasterComponentTypeDetails = lstMasterComponentTypeDetails.OrderBy(x => x.MAST_COMPONENT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_COMPONENT_TYPE>();

                    }
                    else
                    {

                        lstMasterComponentTypeDetails = lstMasterComponentTypeDetails.OrderByDescending(x => x.MAST_COMPONENT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_COMPONENT_TYPE>();

                    }
                }
                else
                {

                    lstMasterComponentTypeDetails = lstMasterComponentTypeDetails.OrderBy(x => x.MAST_COMPONENT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_COMPONENT_TYPE>();
                }


                return lstMasterComponentTypeDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_COMPONENT_NAME.Trim(),
                       URLEncrypt.EncryptParameters1(new string[]{"CompID="+item.MAST_COMPONENT_CODE.ToString().Trim()})

                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterComponentTypeViewModel GetComponentDetails_ByComponentCode(int componentCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_COMPONENT_TYPE masterComponetTypeModel = dbContext.MASTER_COMPONENT_TYPE.FirstOrDefault(m => m.MAST_COMPONENT_CODE == componentCode);
                MasterComponentTypeViewModel masterComponetTypeViewModel = null;
                if (masterComponetTypeModel != null)
                {
                    masterComponetTypeViewModel = CloneComponentObject(masterComponetTypeModel);

                }
                return masterComponetTypeViewModel;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MASTER_COMPONENT_TYPE CloneComponentModel(MasterComponentTypeViewModel masterComponentTypeViewModel)
        {
            try
            {
                MASTER_COMPONENT_TYPE masterComponentTypeModel = new MASTER_COMPONENT_TYPE();

                masterComponentTypeModel.MAST_COMPONENT_CODE = masterComponentTypeViewModel.MAST_COMPONENT_CODE;
                masterComponentTypeModel.MAST_COMPONENT_NAME = masterComponentTypeViewModel.MAST_COMPONENT_NAME;

                return masterComponentTypeModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public MasterComponentTypeViewModel CloneComponentObject(MASTER_COMPONENT_TYPE masterComponentTypeModel)
        {
            try
            {
                MasterComponentTypeViewModel masterComponentTypeViewModel = new MasterComponentTypeViewModel();

                masterComponentTypeViewModel.EncryptedStateCode = URLEncrypt.EncryptParameters1(new string[] { "CompID =" + masterComponentTypeModel.MAST_COMPONENT_CODE.ToString().Trim() });
                masterComponentTypeViewModel.MAST_COMPONENT_CODE = masterComponentTypeModel.MAST_COMPONENT_CODE;
                masterComponentTypeViewModel.MAST_COMPONENT_NAME = masterComponentTypeModel.MAST_COMPONENT_NAME;
                return masterComponentTypeViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }
        #endregion Component Type DAL defination

        #region Contractor Class Type  DAL defination
        public bool AddMasterContractorClassType(MasterContractorClassTypeViewModel masterContractorClassTypeViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_CON_CLASS_TYPE.Where(m => m.MAST_CON_CLASS_TYPE_NAME == masterContractorClassTypeViewModel.MAST_CON_CLASS_TYPE_NAME).Where(m => m.MAST_STATE_CODE == masterContractorClassTypeViewModel.MAST_STATE_CODE).Any())
                {
                    message = "Contractor Class Type details already exist.";
                    return false;
                }
                bool flagContClassAddEdit = true;
                MASTER_CON_CLASS_TYPE masterContClassTypeModel = CloneContractorClassModel(masterContractorClassTypeViewModel, flagContClassAddEdit);
                masterContClassTypeModel.MAST_CON_CLASS = dbContext.MASTER_CON_CLASS_TYPE.Max(cp => (Int32?)cp.MAST_CON_CLASS) == null ? 1 : (Int32)dbContext.MASTER_CON_CLASS_TYPE.Max(cp => (Int32?)cp.MAST_CON_CLASS) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_CON_CLASS_TYPE.Add(masterContClassTypeModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public bool EditMasterContractorClassType(MasterContractorClassTypeViewModel masterContractorClassTypeViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                encryptedParameters = masterContractorClassTypeViewModel.EncryptedContClassCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ContClassCode = Convert.ToInt32(decryptedParameters["ContClassID"].ToString());

                Int32 recordCount = dbContext.MASTER_CON_CLASS_TYPE.Where(m => m.MAST_CON_CLASS_TYPE_NAME.ToUpper() == masterContractorClassTypeViewModel.MAST_CON_CLASS_TYPE_NAME.ToUpper() && m.MAST_CON_CLASS != ContClassCode && m.MAST_STATE_CODE == masterContractorClassTypeViewModel.MAST_STATE_CODE).Count();
                if (recordCount > 0)
                {
                    message = "Contractor Class Type details  already exist.";
                    return false;
                }
                bool flagContClassAddEdit = false;
                MASTER_CON_CLASS_TYPE masterContClassTypeModel = CloneContractorClassModel(masterContractorClassTypeViewModel, flagContClassAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterContClassTypeModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterContractorClassType(int masterContractorClassId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CON_CLASS_TYPE masterMasterContClassTypeModel = dbContext.MASTER_CON_CLASS_TYPE.Where(m => m.MAST_CON_CLASS == masterContractorClassId).FirstOrDefault();

                if (masterMasterContClassTypeModel == null)
                {
                    return false;
                }

                //Added by abhishek kamble 27-nov-2013
                masterMasterContClassTypeModel.USERID = PMGSYSession.Current.UserId;
                masterMasterContClassTypeModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterMasterContClassTypeModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.MASTER_CON_CLASS_TYPE.Remove(masterMasterContClassTypeModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Contractor Class Type details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterContractorClassType(int statecode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            //changes by koustubh nakate on 16/08/2013 for role wise populate details
            try
            {
                dbContext = new PMGSYEntities();

                int stateCode = statecode;

                var lstMasterContClassTypeDetails = from contrClassDetails in dbContext.MASTER_CON_CLASS_TYPE
                                                    join stateDetails in dbContext.MASTER_STATE
                                                    on contrClassDetails.MAST_STATE_CODE equals stateDetails.MAST_STATE_CODE

                                                    where
                                                        (stateCode == 0 ? 1 : contrClassDetails.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode)

                                                    select new { contrClassDetails.MAST_CON_CLASS, contrClassDetails.MAST_CON_CLASS_TYPE_NAME, stateDetails.MAST_STATE_NAME, contrClassDetails.MAST_STATE_CODE };

                totalRecords = lstMasterContClassTypeDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_CON_CLASS_TYPE_NAME":
                                lstMasterContClassTypeDetails = lstMasterContClassTypeDetails.OrderBy(x => x.MAST_CON_CLASS_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "StateName":
                                lstMasterContClassTypeDetails = lstMasterContClassTypeDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstMasterContClassTypeDetails = lstMasterContClassTypeDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_CON_CLASS_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_CON_CLASS_TYPE_NAME":
                                lstMasterContClassTypeDetails = lstMasterContClassTypeDetails.OrderByDescending(x => x.MAST_CON_CLASS_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "StateName":
                                lstMasterContClassTypeDetails = lstMasterContClassTypeDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstMasterContClassTypeDetails = lstMasterContClassTypeDetails.OrderByDescending(x => x.MAST_CON_CLASS_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstMasterContClassTypeDetails = lstMasterContClassTypeDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_CON_CLASS_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstMasterContClassTypeDetails.Select(contrClassDetails => new
                {
                    contrClassDetails.MAST_CON_CLASS,
                    contrClassDetails.MAST_CON_CLASS_TYPE_NAME,
                    contrClassDetails.MAST_STATE_NAME,
                    contrClassDetails.MAST_STATE_CODE
                }).ToArray();

                return result.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_CON_CLASS_TYPE_NAME==string.Empty? "NA":item.MAST_CON_CLASS_TYPE_NAME.Trim(),
                                    item.MAST_STATE_NAME.Trim(),
                                    URLEncrypt.EncryptParameters1(new string[]{"ContClassID="+item.MAST_CON_CLASS.ToString().Trim()}),

                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterContractorClassTypeViewModel GetContractorClassDetails_ByClassCode(int masterContractorClassId)
        {
            try
            {
                dbContext = new PMGSYEntities();

                MASTER_CON_CLASS_TYPE masterContClassTypeModel = dbContext.MASTER_CON_CLASS_TYPE.FirstOrDefault(m => m.MAST_CON_CLASS == masterContractorClassId);
                MasterContractorClassTypeViewModel masterContClassTypeViewModel = null;
                if (masterContClassTypeModel != null)
                {
                    masterContClassTypeViewModel = CloneContractorClassObject(masterContClassTypeModel);
                }
                return masterContClassTypeViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MASTER_CON_CLASS_TYPE CloneContractorClassModel(MasterContractorClassTypeViewModel masterComponentTypeViewModel, bool flagContClassAddEdit)
        {
            MASTER_CON_CLASS_TYPE masterContractorClassTypeModel = new MASTER_CON_CLASS_TYPE();

            if (flagContClassAddEdit)
            {
                masterContractorClassTypeModel.MAST_CON_CLASS = masterComponentTypeViewModel.MAST_CON_CLASS;
            }
            else
            {
                masterContractorClassTypeModel.MAST_CON_CLASS = ContClassCode;
            }

            masterContractorClassTypeModel.MAST_CON_CLASS_TYPE_NAME = masterComponentTypeViewModel.MAST_CON_CLASS_TYPE_NAME;
            masterContractorClassTypeModel.MAST_STATE_CODE = masterComponentTypeViewModel.MAST_STATE_CODE;

            //Added by abhishek kamble 27-nov-2013
            masterContractorClassTypeModel.USERID = PMGSYSession.Current.UserId;
            masterContractorClassTypeModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

            return masterContractorClassTypeModel;
        }

        public MasterContractorClassTypeViewModel CloneContractorClassObject(MASTER_CON_CLASS_TYPE masterContractorClassTypeModel)
        {
            MasterContractorClassTypeViewModel masterContractorClassViewModel = new MasterContractorClassTypeViewModel();

            masterContractorClassViewModel.EncryptedContClassCode = URLEncrypt.EncryptParameters1(new string[] { "ContClassID =" + masterContractorClassTypeModel.MAST_CON_CLASS.ToString().Trim() });

            masterContractorClassViewModel.MAST_CON_CLASS_TYPE_NAME = masterContractorClassTypeModel.MAST_CON_CLASS_TYPE_NAME;
            masterContractorClassViewModel.MAST_STATE_CODE = masterContractorClassTypeModel.MAST_STATE_CODE;

            return masterContractorClassViewModel;
        }


        #endregion Contractor Class Type  DAL defination

        #region Contractor Registration DAL defination

        public bool AddMasterContractorReg(MasterContractorRegistrationViewModel masterContractorRegViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                int mastContId = masterContractorRegViewModel.MAST_CON_ID;

                int conStateCode = masterContractorRegViewModel.MAST_REG_STATE;

                int conRegExistForself = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID == mastContId && m.MAST_REG_STATE == conStateCode && m.MAST_REG_STATUS == "A").Count();

                int conRegExistForOthers = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID != mastContId && m.MAST_CON_REG_NO == masterContractorRegViewModel.MAST_CON_REG_NO && m.MAST_REG_STATE == conStateCode && m.MAST_CON_REG_NO != null).Count();


                if (conRegExistForself > 0)
                {
                    message = "Contractor/Supplier Registration details already exist for selected state.";
                    return false;
                }
                else if (conRegExistForOthers > 0)
                {
                    message = "Contractor/Supplier Registration details with Registration Number '" + masterContractorRegViewModel.MAST_CON_REG_NO + "' is already exist for selected state.";
                    return false;
                }
                else if (conRegExistForself > 0 && conRegExistForOthers > 0)
                {
                    message = "Contractor/Supplier Registration details already exist for selected state.";
                    return false;
                }

                bool flagContClassAddEdit = true;
                MASTER_CONTRACTOR_REGISTRATION masterContRegModel = CloneContractorRegModel(new MASTER_CONTRACTOR_REGISTRATION(), masterContractorRegViewModel, flagContClassAddEdit);

                dbContext = new PMGSYEntities();
                dbContext.MASTER_CONTRACTOR_REGISTRATION.Add(masterContRegModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }



        public bool EditMasterContractorReg(MasterContractorRegistrationViewModel masterContractorRegViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                int conID = 0;
                encryptedParameters = masterContractorRegViewModel.EncryptedRegCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ContRegCode = Convert.ToInt32(decryptedParameters["ContRegCode"].ToString());
                conID = Convert.ToInt32(decryptedParameters["conID"].ToString());


                Int32 recordCount = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID == conID && m.MAST_REG_CODE != ContRegCode && m.MAST_REG_STATE == masterContractorRegViewModel.MAST_REG_STATE && m.MAST_CON_REG_NO == masterContractorRegViewModel.MAST_CON_REG_NO && m.MAST_REG_STATUS == "A").Count();

                if (recordCount > 0)
                {
                    message = "Contractor/Supplier Registration details is already exist for selected state.";
                    return false;
                }


                MASTER_CONTRACTOR_REGISTRATION masterContRegModel = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(cr => cr.MAST_CON_ID == conID && cr.MAST_REG_CODE == ContRegCode).FirstOrDefault();

                if (masterContRegModel == null)
                {
                    return false;
                }

                masterContRegModel.MAST_CON_REG_NO = masterContractorRegViewModel.MAST_CON_REG_NO;
                masterContRegModel.MAST_CON_CLASS = masterContractorRegViewModel.MAST_CON_CLASS;
                masterContRegModel.MAST_CON_VALID_FROM = ConvertStringToDate(masterContractorRegViewModel.MAST_CON_VALID_FROM);
                masterContRegModel.MAST_CON_VALID_TO = ConvertStringToDate(masterContractorRegViewModel.MAST_CON_VALID_TO);
                masterContRegModel.MAST_REG_STATE = masterContractorRegViewModel.MAST_REG_STATE;
                masterContRegModel.MAST_REG_OFFICE = masterContractorRegViewModel.MAST_REG_OFFICE == null ? null : masterContractorRegViewModel.MAST_REG_OFFICE;
                masterContRegModel.MAST_REG_STATUS = masterContractorRegViewModel.MAST_REG_STATUS;

                //Added by abhishek kamble 27-nov-2013
                masterContRegModel.USERID = PMGSYSession.Current.UserId;
                masterContRegModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                // added on 19-01-2022 by Srishti Tyagi
                masterContRegModel.FUND_TYPE = masterContractorRegViewModel.FUND_TYPE;

                dbContext.Entry(masterContRegModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        // Added on 25-01-2022 by Srishti Tyagi
        public bool EditMasterContractorRegFundType(MasterContractorRegistrationViewModel masterContractorRegViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                int conID = 0;
                encryptedParameters = masterContractorRegViewModel.EncryptedRegCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ContRegCode = Convert.ToInt32(decryptedParameters["ContRegCode"].ToString());
                conID = Convert.ToInt32(decryptedParameters["conID"].ToString());


                Int32 recordCount = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID == conID && m.MAST_REG_CODE != ContRegCode && m.MAST_REG_STATE == masterContractorRegViewModel.MAST_REG_STATE && m.MAST_CON_REG_NO == masterContractorRegViewModel.MAST_CON_REG_NO && m.MAST_REG_STATUS == "A").Count();

                if (recordCount > 0)
                {
                    message = "Contractor/Supplier Registration details is already exist for selected state.";
                    return false;
                }


                MASTER_CONTRACTOR_REGISTRATION masterContRegModel = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(cr => cr.MAST_CON_ID == conID && cr.MAST_REG_CODE == ContRegCode).FirstOrDefault();

                if (masterContRegModel == null)
                {
                    return false;
                }

                masterContRegModel.FUND_TYPE = masterContractorRegViewModel.FUND_TYPE;

                dbContext.Entry(masterContRegModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterContractorReg(int ContRegId, int ContRegCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                MASTER_CONTRACTOR_REGISTRATION masterContRegModel = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID == ContRegId && m.MAST_REG_CODE == ContRegCode).FirstOrDefault();

                if (masterContRegModel == null)
                {
                    return false;
                }


                //Added by abhishek kamble 27-nov-2013
                masterContRegModel.USERID = PMGSYSession.Current.UserId;
                masterContRegModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterContRegModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.MASTER_CONTRACTOR_REGISTRATION.Remove(masterContRegModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Contractor/Supplier Registration details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterContractorReg(int? page, int? rows, string sidx, string sord, out long totalRecords, int contId, int conRegStateId)
        {
            try
            {
                dbContext = new PMGSYEntities();

                var lstMasterContRegDetails = (from item in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                               from item1 in dbContext.MASTER_STATE
                                               from item2 in dbContext.MASTER_CON_CLASS_TYPE
                                               where item.MAST_CON_ID == contId
                                                  && item.MAST_REG_STATE == item1.MAST_STATE_CODE
                                                  && item.MAST_CON_CLASS == item2.MAST_CON_CLASS
                                               select new
                                               {
                                                   item.MAST_CON_ID,
                                                   item.MAST_REG_CODE,
                                                   item.MAST_CON_REG_NO,
                                                   item2.MAST_CON_CLASS_TYPE_NAME,
                                                   item.MAST_CON_VALID_FROM,
                                                   item.MAST_CON_VALID_TO,
                                                   item.MAST_REG_OFFICE,
                                                   item1.MAST_STATE_NAME,
                                                   item.MAST_REG_STATUS,
                                                   item.MAST_REG_STATE,
                                                   item.MAST_LOCK_STATUS

                                               }).ToList();


                totalRecords = lstMasterContRegDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {

                        switch (sidx)
                        {
                            case "MAST_CON_REG_NO":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_CON_REG_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CON_CLASS_TYPE_NAME":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_CON_CLASS_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CON_VALID_FROM":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_CON_VALID_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CON_VALID_TO":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_CON_VALID_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_REG_OFFICE":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_REG_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_STATE_NAME":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_REG_STATUS":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_REG_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }


                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "MAST_CON_REG_NO":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderByDescending(x => x.MAST_CON_REG_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CON_CLASS_TYPE_NAME":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderByDescending(x => x.MAST_CON_CLASS_TYPE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CON_VALID_FROM":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderByDescending(x => x.MAST_CON_VALID_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CON_VALID_TO":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderByDescending(x => x.MAST_CON_VALID_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_REG_OFFICE":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderByDescending(x => x.MAST_REG_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_STATE_NAME":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_REG_STATUS":
                                lstMasterContRegDetails = lstMasterContRegDetails.OrderByDescending(x => x.MAST_REG_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {

                    lstMasterContRegDetails = lstMasterContRegDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }



                return lstMasterContRegDetails.Select(item => new
                {
                    cell = new[]{
                                 item.MAST_STATE_NAME,
                                 item.MAST_CON_REG_NO.ToString(),
                                 item.MAST_CON_CLASS_TYPE_NAME,
                                 item.MAST_CON_VALID_FROM==null?"NA": Convert.ToDateTime(item.MAST_CON_VALID_FROM).ToString("dd/MM/yyyy"),
                                 item.MAST_CON_VALID_TO==null?"NA": Convert.ToDateTime(item.MAST_CON_VALID_TO).ToString("dd/MM/yyyy"),
                                 item.MAST_REG_OFFICE==null?"NA":item.MAST_REG_OFFICE.Trim(),
                                 item.MAST_REG_STATUS.ToUpper()=="A"?"Active":"InActive",

                                 item.MAST_REG_STATUS=="A"? "<center><table><tr><td  style='border-color:white'><a href='#' title='DeActivate' onClick ='ChangeStatusToInActive(\"" + URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+item.MAST_CON_ID.ToString(),"ContRegCode="+item.MAST_REG_CODE.ToString()}) + "\");' >DeActivate</a></td></tr></table></center>": "<center><table><tr><td  style='border:none'><a href='#' title='Activate' onClick ='ChangeStatusToActive(\"" + URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+item.MAST_CON_ID.ToString(),"ContRegCode="+item.MAST_REG_CODE.ToString()}) + "\");' >Activate</a></td></tr></table></center>",
                                 item.MAST_LOCK_STATUS=="N"?URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+item.MAST_CON_ID.ToString().Trim(),"ContRegCode="+item.MAST_REG_CODE.ToString().Trim()}) :string.Empty
                    }
                }).ToArray();


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public MasterContractorRegistrationViewModel GetContRegDetails_ByConId_RegCode(int ContRegId, int ContRegCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CONTRACTOR_REGISTRATION masterContRegModel = dbContext.MASTER_CONTRACTOR_REGISTRATION.FirstOrDefault(m => m.MAST_CON_ID == ContRegId && m.MAST_REG_CODE == ContRegCode);
                MasterContractorRegistrationViewModel masterContRegViewModel = null;
                if (masterContRegModel != null)
                {
                    masterContRegViewModel = CloneContractorRegObject(masterContRegModel);
                }
                masterContRegViewModel.ContractorName = dbContext.MASTER_CONTRACTOR.Where(m => m.MAST_CON_ID == ContRegId).Select(m => m.MAST_CON_FNAME).FirstOrDefault() + " " + dbContext.MASTER_CONTRACTOR.Where(m => m.MAST_CON_ID == ContRegId).Select(m => m.MAST_CON_MNAME).FirstOrDefault() + " " + dbContext.MASTER_CONTRACTOR.Where(m => m.MAST_CON_ID == ContRegId).Select(m => m.MAST_CON_LNAME).FirstOrDefault();
                masterContRegViewModel.ContractorClassType = dbContext.MASTER_CON_CLASS_TYPE.Where(m => m.MAST_CON_CLASS == masterContRegModel.MAST_CON_CLASS).Select(m => m.MAST_CON_CLASS_TYPE_NAME).FirstOrDefault();
                return masterContRegViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MASTER_CONTRACTOR_REGISTRATION CloneContractorRegModel(MASTER_CONTRACTOR_REGISTRATION masterContractorRegModel, MasterContractorRegistrationViewModel masterContractorRegViewModel, bool flagContClassAddEdit)
        {


            if (flagContClassAddEdit)
            {

                masterContractorRegModel.MAST_REG_CODE = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID == masterContractorRegViewModel.MAST_CON_ID).Max(cp => (Int32?)cp.MAST_REG_CODE) == null ? 1 : (Int32)dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(m => m.MAST_CON_ID == masterContractorRegViewModel.MAST_CON_ID).Max(cp => (Int32?)cp.MAST_REG_CODE) + 1;
                masterContractorRegModel.MAST_CON_ID = masterContractorRegViewModel.MAST_CON_ID;
                masterContractorRegModel.MAST_REG_STATUS = "A";
                masterContractorRegModel.MAST_LOCK_STATUS = "N";

            }

            masterContractorRegModel.MAST_CON_REG_NO = masterContractorRegViewModel.MAST_CON_REG_NO;
            masterContractorRegModel.MAST_CON_CLASS = masterContractorRegViewModel.MAST_CON_CLASS;
            masterContractorRegModel.MAST_CON_VALID_FROM = ConvertStringToDate(masterContractorRegViewModel.MAST_CON_VALID_FROM);
            masterContractorRegModel.MAST_CON_VALID_TO = ConvertStringToDate(masterContractorRegViewModel.MAST_CON_VALID_TO);
            masterContractorRegModel.MAST_REG_STATE = masterContractorRegViewModel.MAST_REG_STATE;
            masterContractorRegModel.MAST_REG_OFFICE = masterContractorRegViewModel.MAST_REG_OFFICE == null ? null : masterContractorRegViewModel.MAST_REG_OFFICE;
            masterContractorRegModel.FUND_TYPE = masterContractorRegViewModel.FUND_TYPE;

            //Added by abhishek kamble 27-nov-2013
            masterContractorRegModel.USERID = PMGSYSession.Current.UserId;
            masterContractorRegModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

            return masterContractorRegModel;
        }

        public MasterContractorRegistrationViewModel CloneContractorRegObject(MASTER_CONTRACTOR_REGISTRATION masterContractorRegModel)
        {
            MasterContractorRegistrationViewModel masterContractorRegViewModel = new MasterContractorRegistrationViewModel();

            masterContractorRegViewModel.EncryptedRegCode = URLEncrypt.EncryptParameters1(new string[] { "ContRegCode =" + masterContractorRegModel.MAST_REG_CODE.ToString().Trim(), "conID=" + masterContractorRegModel.MAST_CON_ID.ToString().Trim() });
            masterContractorRegViewModel.MAST_CON_ID = masterContractorRegModel.MAST_CON_ID;
            masterContractorRegViewModel.EncryptedContractor = URLEncrypt.EncryptParameters1(new string[] { "ContRegID=" + masterContractorRegModel.MAST_CON_ID.ToString().Trim(), "RegState=" + masterContractorRegModel.MAST_REG_STATE.ToString().Trim() });
            masterContractorRegViewModel.MAST_CON_REG_NO = masterContractorRegModel.MAST_CON_REG_NO;
            masterContractorRegViewModel.MAST_CON_CLASS = masterContractorRegModel.MAST_CON_CLASS;
            masterContractorRegViewModel.MAST_CON_VALID_FROM = masterContractorRegModel.MAST_CON_VALID_FROM == null ? String.Empty : ConvertDateToString(masterContractorRegModel.MAST_CON_VALID_FROM);
            masterContractorRegViewModel.MAST_CON_VALID_TO = masterContractorRegModel.MAST_CON_VALID_TO == null ? String.Empty : ConvertDateToString(masterContractorRegModel.MAST_CON_VALID_TO);
            masterContractorRegViewModel.MAST_REG_STATE = masterContractorRegModel.MAST_REG_STATE;
            masterContractorRegViewModel.MAST_REG_OFFICE = masterContractorRegModel.MAST_REG_OFFICE;
            masterContractorRegViewModel.MAST_REG_STATUS = masterContractorRegModel.MAST_REG_STATUS;

            // added on 18-01-2022 by Srishti Tyagi
            masterContractorRegViewModel.FUND_TYPE = masterContractorRegModel.FUND_TYPE;

            return masterContractorRegViewModel;
        }


        public List<SelectListItem> GetAllContClassByRegState(int mastContRegState)
        {
            try
            {

                dbContext = new PMGSYEntities();
                //List<MASTER_CON_CLASS_TYPE> classTypeList = dbContext.MASTER_CON_CLASS_TYPE.Where(m => m.MAST_STATE_CODE == mastContRegState).ToList<MASTER_CON_CLASS_TYPE>();
                List<SelectListItem> lstClassTypes = new List<SelectListItem>();
                var classTypes = (from item in dbContext.MASTER_CON_CLASS_TYPE
                                  where item.MAST_STATE_CODE == mastContRegState
                                  select new
                                  {
                                      item.MAST_CON_CLASS,
                                      item.MAST_CON_CLASS_TYPE_NAME
                                  }).ToList().Distinct();
                lstClassTypes.Insert(0, new SelectListItem { Text = "Select Class Type", Value = "0" });

                foreach (var item in classTypes)
                {
                    lstClassTypes.Add(new SelectListItem { Text = item.MAST_CON_CLASS_TYPE_NAME, Value = item.MAST_CON_CLASS.ToString() });
                }
                lstClassTypes.OrderBy(m => m.Text).ToList().Distinct();
                return lstClassTypes;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        public List<MASTER_STATE> getStateNameByRegStateCode()
        {
            try
            {
                dbContext = new PMGSYEntities();

                List<MASTER_STATE> stateList = dbContext.MASTER_STATE.ToList<MASTER_STATE>();

                return stateList;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetContractorRegList(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstContractors = (from item in dbContext.MASTER_CONTRACTOR
                                      join registration in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                      on item.MAST_CON_ID equals registration.MAST_CON_ID
                                      join state in dbContext.MASTER_STATE
                                      on registration.MAST_REG_STATE equals state.MAST_STATE_CODE
                                      where
                                      (stateCode == 0 ? 1 : registration.MAST_REG_STATE) == (stateCode == 0 ? 1 : stateCode) &&
                                       (contractorNo == 0 ? 1 : item.MAST_CON_ID) == (contractorNo == 0 ? 1 : contractorNo) &&
                                          //(districtCode == 0 ? 1 : item.MAST_DISTRICT_CODE_ADDR) == (districtCode == 0 ? 1 : districtCode) &&
                                          (districtCode == 0 ? 1 : (item.MASTER_CONTRACTOR_BANK.FirstOrDefault(x => x.MAST_DISTRICT_CODE == districtCode).MAST_DISTRICT_CODE)) == (districtCode == 0 ? 1 : districtCode) &&
                                      //(districtCode == 0 ? 1 : ((!(item.MASTER_CONTRACTOR_BANK.Any(x => x.MAST_CON_ID == item.MAST_CON_ID))) ? 1 : (item.MASTER_CONTRACTOR_BANK.FirstOrDefault(x => x.MAST_DISTRICT_CODE == districtCode).MAST_DISTRICT_CODE))) == (districtCode == 0 ? 1 : ((!(item.MASTER_CONTRACTOR_BANK.Any(x => x.MAST_CON_ID == item.MAST_CON_ID))) ? 1 : districtCode)) &&
                                      (status == string.Empty ? "%" : registration.MAST_REG_STATUS) == (status == string.Empty ? "%" : status) &&
                                      (conStatus == string.Empty ? "%" : item.MAST_CON_STATUS) == (conStatus == string.Empty ? "%" : conStatus) &&
                                      (contractorName == string.Empty ? "%" : (item.MAST_CON_FNAME.ToUpper())).Contains(contractorName == string.Empty ? "%" : contractorName.ToUpper().Trim()) &&
                                      (panNumber == string.Empty ? "%" : item.MAST_CON_PAN.ToUpper()).Contains(panNumber == string.Empty ? "%" : panNumber.ToUpper().Trim()) &&
                                      (classType == 0 ? 1 : registration.MAST_CON_CLASS) == (classType == 0 ? 1 : classType) &&
                                      (regNo == string.Empty ? "%" : registration.MAST_CON_REG_NO.ToUpper()).Contains(regNo == string.Empty ? "%" : regNo.ToUpper().Trim()) &&
                                      (companyName == string.Empty ? "%" : item.MAST_CON_COMPANY_NAME.ToUpper()).Contains(companyName == string.Empty ? "%" : companyName.ToUpper().Trim())
                                      select new
                                      {
                                          item.MAST_CON_ID,
                                          item.MAST_CON_MNAME,
                                          item.MAST_CON_LNAME,
                                          item.MAST_CON_FNAME,
                                          registration.MAST_CON_REG_NO,
                                          registration.MASTER_CON_CLASS_TYPE,
                                          registration.MAST_REG_OFFICE,
                                          registration.MAST_REG_STATE,
                                          registration.MAST_REG_STATUS,
                                          registration.MAST_CON_VALID_FROM,
                                          registration.MAST_CON_VALID_TO,
                                          state.MAST_STATE_NAME,
                                          registration.MAST_REG_CODE,
                                          registration.MAST_CON_CLASS,
                                          item.MAST_CON_STATUS,
                                          item.MAST_CON_PAN,
                                          item.MAST_CON_COMPANY_NAME,
                                          MAST_LOCK_STATUS = item.MASTER_CONTRACTOR_BANK.Where(a => a.MAST_CON_ID == item.MAST_CON_ID).Select(b => b.MAST_LOCK_STATUS).FirstOrDefault()
                                      });

                totalRecords = lstContractors.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_REG_NO":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_REG_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_REG_OFFICE":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_REG_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_FROM":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_VALID_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_TO":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_VALID_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_PAN":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_REG_NO":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_REG_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_REG_OFFICE":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_REG_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_FROM":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_VALID_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_TO":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_VALID_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_PAN":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var gridData = lstContractors.Select(contractorDetails =>
                    new
                    {
                        contractorDetails.MAST_CON_ID,
                        contractorDetails.MAST_CON_FNAME,
                        contractorDetails.MAST_CON_MNAME,
                        contractorDetails.MAST_CON_LNAME,
                        contractorDetails.MAST_CON_REG_NO,
                        contractorDetails.MAST_REG_OFFICE,
                        contractorDetails.MAST_CON_VALID_FROM,
                        contractorDetails.MAST_CON_VALID_TO,
                        contractorDetails.MAST_STATE_NAME,
                        contractorDetails.MAST_REG_CODE,
                        contractorDetails.MAST_REG_STATUS,
                        contractorDetails.MASTER_CON_CLASS_TYPE,
                        contractorDetails.MAST_CON_CLASS,
                        contractorDetails.MAST_CON_STATUS,
                        contractorDetails.MAST_CON_COMPANY_NAME,
                        contractorDetails.MAST_CON_PAN,
                        contractorDetails.MAST_REG_STATE,
                        contractorDetails.MAST_LOCK_STATUS
                    }).ToArray();

                return gridData.Select(m => new
                {
                    cell = new[]
                    {
                        //m.MAST_STATE_NAME.ToString(),
                        (m.MAST_CON_FNAME==null?"NA":m.MAST_CON_FNAME.ToString())+" "+(m.MAST_CON_MNAME==null?string.Empty:m.MAST_CON_MNAME.ToString())+" "+(m.MAST_CON_LNAME==null?string.Empty:m.MAST_CON_LNAME.ToString()) + " (" + Convert.ToString(m.MAST_CON_ID) + ")",
                        m.MAST_CON_COMPANY_NAME,
                        m.MAST_CON_PAN,
                        m.MAST_CON_REG_NO == null?string.Empty:m.MAST_CON_REG_NO.ToString(),
                        m.MAST_REG_OFFICE == null?string.Empty:m.MAST_REG_OFFICE.ToString(),
                        m.MAST_STATE_NAME == null?string.Empty:m.MAST_STATE_NAME.ToString(),
                        m.MAST_CON_VALID_FROM==null?"-":Convert.ToDateTime(m.MAST_CON_VALID_FROM).ToString("dd/MM/yyyy"),
                        m.MAST_CON_VALID_TO==null?"-":Convert.ToDateTime(m.MAST_CON_VALID_TO).ToString("dd/MM/yyyy"),
                        m.MAST_REG_STATUS == "A"?"Active":"Inactive",
                        m.MAST_CON_STATUS == "A"?"Active": m.MAST_CON_STATUS =="I"?"Inactive": m.MAST_CON_STATUS =="E"?"Expired":"Blacklisted",
                        dbContext.MASTER_CON_CLASS_TYPE.Where(a=>a.MAST_CON_CLASS == m.MAST_CON_CLASS).Select(a=>a.MAST_CON_CLASS_TYPE_NAME).FirstOrDefault().ToString(),
                        (m.MAST_LOCK_STATUS == "Y" || PMGSYSession.Current.RoleCode == 46) ? "-" : URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+m.MAST_CON_ID.ToString().Trim(),"ContRegCode="+m.MAST_REG_CODE.ToString().Trim()}),
                        (m.MAST_LOCK_STATUS == "Y" || PMGSYSession.Current.RoleCode == 46) ? "-" : URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+m.MAST_CON_ID.ToString().Trim(),"ContRegCode="+m.MAST_REG_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+m.MAST_CON_ID.ToString().Trim(),"RegState="+m.MAST_REG_STATE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+m.MAST_CON_ID.ToString().Trim(),"ContRegCode="+m.MAST_REG_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+m.MAST_CON_ID.ToString().Trim(),"ContRegCode="+m.MAST_REG_CODE.ToString().Trim()}),
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> PopulateContractors(int stateCode)
        {
            dbContext = new PMGSYEntities();
            List<SelectListItem> lstContDetails = new List<SelectListItem>();
            try
            {
                //commented by Vikram
                var lstAllContractors = (from item in dbContext.MASTER_CONTRACTOR
                                         where //item.MAST_STATE_CODE_ADDR == stateCode &&
                                         item.MAST_CON_STATUS == "A" && (item.MAST_CON_SUP_FLAG == "C" || item.MAST_CON_SUP_FLAG == "S")
                                         select new
                                         {
                                             MAST_CON_NAME = (item.MAST_CON_FNAME == null ? string.Empty : item.MAST_CON_FNAME) + " " + (item.MAST_CON_MNAME == null ? string.Empty : item.MAST_CON_MNAME) + " " + (item.MAST_CON_LNAME == null ? string.Empty : item.MAST_CON_LNAME) + " (Pan-" + (item.MAST_CON_PAN == null ? string.Empty : item.MAST_CON_PAN) + ")",//+"(ID-"+item.MAST_CON_ID+")",
                                             MAST_CON_ID = item.MAST_CON_ID
                                         }).ToList().OrderBy(m => m.MAST_CON_NAME).Distinct();



                // new code added by Vikram - list of contractors or suppliers which are active and not registered in stateCode
                var lstContractorswithnoregforstate = (from item in lstAllContractors
                                                       join registration in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                                       on item.MAST_CON_ID equals registration.MAST_CON_ID
                                                       where
                                                       registration.MAST_REG_STATE != stateCode
                                                       select new
                                                       {
                                                           MAST_CON_NAME = item.MAST_CON_NAME,
                                                           MAST_CON_ID = item.MAST_CON_ID
                                                       }).ToList().OrderBy(m => m.MAST_CON_NAME).Distinct();

                // new code added by Vikram - list of contractors or suppliers which are active and registration is inactive in stateCode
                var lstContractorswithnoActiveRegforState = (from item in lstAllContractors
                                                             join registration in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                                             on item.MAST_CON_ID equals registration.MAST_CON_ID
                                                             where
                                                             registration.MAST_REG_STATE == stateCode &&
                                                             registration.MAST_REG_STATUS == "I"
                                                             select new
                                                             {
                                                                 MAST_CON_NAME = item.MAST_CON_NAME,
                                                                 MAST_CON_ID = item.MAST_CON_ID
                                                             }).ToList().OrderBy(m => m.MAST_CON_NAME).Distinct();

                //union of above two lists
                var lstContractors = lstAllContractors.Union(lstContractorswithnoregforstate.Union(lstContractorswithnoActiveRegforState).Distinct().ToList());

                lstContDetails.Insert(0, new SelectListItem { Text = "Select Contractor/Supplier", Value = "0" });

                foreach (var item in lstContractors)
                {
                    lstContDetails.Add(new SelectListItem { Text = item.MAST_CON_NAME, Value = item.MAST_CON_ID.ToString() });
                }
                //lstContDetails.OrderBy(m => m.Text).ToList().Distinct();
                return lstContDetails;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> PopulateContractorsByPan(int stateCode, string panSearch)
        {
            dbContext = new PMGSYEntities();
            List<SelectListItem> lstContDetails = new List<SelectListItem>();
            try
            {
                var lstAllContractors = (from item in dbContext.MASTER_CONTRACTOR
                                         where //item.MAST_STATE_CODE_ADDR == stateCode &&
                                         item.MAST_CON_STATUS == "A" && (item.MAST_CON_SUP_FLAG == "C" || item.MAST_CON_SUP_FLAG == "S")
                                         && ((panSearch == "" ? "%" : item.MAST_CON_PAN).Contains(panSearch == "" ? "%" : panSearch))
                                         select new
                                         {
                                             MAST_CON_NAME = (item.MAST_CON_FNAME == null ? string.Empty : item.MAST_CON_FNAME) + " " + (item.MAST_CON_MNAME == null ? string.Empty : item.MAST_CON_MNAME) + " " + (item.MAST_CON_LNAME == null ? string.Empty : item.MAST_CON_LNAME) + " (Pan-" + (item.MAST_CON_PAN == null ? string.Empty : item.MAST_CON_PAN) + ")",//+"(ID-"+item.MAST_CON_ID+")",
                                             MAST_CON_ID = item.MAST_CON_ID
                                         }).ToList().OrderBy(m => m.MAST_CON_NAME).Distinct();

                var lstContractorswithnoregforstate = (from item in dbContext.MASTER_CONTRACTOR
                                                       join registration in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                                       on item.MAST_CON_ID equals registration.MAST_CON_ID
                                                       where
                                                       (stateCode == 0 ? (1 == 1) : registration.MAST_REG_STATE != stateCode) &&
                                                       item.MAST_CON_STATUS == "A" && (item.MAST_CON_SUP_FLAG == "C" || item.MAST_CON_SUP_FLAG == "S")
                                                       && ((panSearch == "" ? "%" : item.MAST_CON_PAN).Contains(panSearch == "" ? "%" : panSearch))
                                                       select new
                                                       {
                                                           MAST_CON_NAME = (item.MAST_CON_FNAME == null ? string.Empty : item.MAST_CON_FNAME) + " " + (item.MAST_CON_MNAME == null ? string.Empty : item.MAST_CON_MNAME) + " " + (item.MAST_CON_LNAME == null ? string.Empty : item.MAST_CON_LNAME) + " (Pan-" + (item.MAST_CON_PAN == null ? string.Empty : item.MAST_CON_PAN) + ")",//+"(ID-"+item.MAST_CON_ID+")",
                                                           MAST_CON_ID = item.MAST_CON_ID
                                                       }).ToList().OrderBy(m => m.MAST_CON_NAME).Distinct();

                // new code added by Vikram - list of contractors or suppliers which are active and registration is inactive in stateCode
                var lstContractorswithnoActiveRegforState = (from item in dbContext.MASTER_CONTRACTOR
                                                             join registration in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                                             on item.MAST_CON_ID equals registration.MAST_CON_ID
                                                             where
                                                             (stateCode == 0 ? (1 == 1) : registration.MAST_REG_STATE == stateCode) &&
                                                             registration.MAST_REG_STATUS == "I" &&
                                                             item.MAST_CON_STATUS == "A" && (item.MAST_CON_SUP_FLAG == "C" || item.MAST_CON_SUP_FLAG == "S")
                                                             && ((panSearch == "" ? "%" : item.MAST_CON_PAN).Contains(panSearch == "" ? "%" : panSearch))
                                                             select new
                                                             {
                                                                 MAST_CON_NAME = (item.MAST_CON_FNAME == null ? string.Empty : item.MAST_CON_FNAME) + " " + (item.MAST_CON_MNAME == null ? string.Empty : item.MAST_CON_MNAME) + " " + (item.MAST_CON_LNAME == null ? string.Empty : item.MAST_CON_LNAME) + " (Pan-" + (item.MAST_CON_PAN == null ? string.Empty : item.MAST_CON_PAN) + ")",//+"(ID-"+item.MAST_CON_ID+")",
                                                                 MAST_CON_ID = item.MAST_CON_ID
                                                             }).ToList().OrderBy(m => m.MAST_CON_NAME).Distinct();

                //union of above two lists
                var lstContractors = lstAllContractors.Union(lstContractorswithnoregforstate.Union(lstContractorswithnoActiveRegforState)).Distinct().ToList();

                lstContDetails.Insert(0, new SelectListItem { Text = "Select Contractor/Supplier", Value = "0" });

                foreach (var item in lstContractors)
                {
                    lstContDetails.Add(new SelectListItem { Text = item.MAST_CON_NAME, Value = item.MAST_CON_ID.ToString() });
                }
                //lstContDetails.OrderBy(m => m.Text).ToList().Distinct();
                return lstContDetails;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> PopulateContractorsForEdit(int stateCode)
        {
            dbContext = new PMGSYEntities();
            List<SelectListItem> lstContDetails = new List<SelectListItem>();
            try
            {
                var lstContractors = (from item in dbContext.MASTER_CONTRACTOR
                                      where item.MAST_STATE_CODE_ADDR == stateCode &&
                                      //item.MAST_CON_STATUS == "A" && (item.MAST_CON_SUP_FLAG == "C" || item.MAST_CON_SUP_FLAG == "S")
                                      (item.MAST_CON_SUP_FLAG == "C" || item.MAST_CON_SUP_FLAG == "S")
                                      select new
                                      {
                                          MAST_CON_NAME = (item.MAST_CON_FNAME == null ? string.Empty : item.MAST_CON_FNAME) + " " + (item.MAST_CON_MNAME == null ? string.Empty : item.MAST_CON_MNAME) + " " + (item.MAST_CON_LNAME == null ? string.Empty : item.MAST_CON_LNAME) + " (Pan-" + (item.MAST_CON_PAN == null ? string.Empty : item.MAST_CON_PAN) + ")",//+"(ID-"+item.MAST_CON_ID+")",
                                          MAST_CON_ID = item.MAST_CON_ID
                                      }).ToList().OrderBy(m => m.MAST_CON_NAME).Distinct();

                lstContDetails.Insert(0, new SelectListItem { Text = "Select Contractor/Supplier", Value = "0" });

                foreach (var item in lstContractors)
                {
                    lstContDetails.Add(new SelectListItem { Text = item.MAST_CON_NAME, Value = item.MAST_CON_ID.ToString() });
                }
                //lstContDetails.OrderBy(m => m.Text).ToList().Distinct();
                return lstContDetails;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetViewContractorRegistrationList(int? page, int? rows, string sidx, string sord, out long totalRecords, int ContRegId, int ContRegCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstContractors = (from item in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                      where
                                      (ContRegId == 0 ? 1 : item.MAST_CON_ID) == (ContRegId == 0 ? 1 : ContRegId) &&
                                      (ContRegCode == 0 ? 1 : item.MAST_REG_CODE) == (ContRegCode == 0 ? 1 : ContRegCode)

                                      select new
                                      {
                                          item.MAST_CON_ID,
                                          item.MASTER_CONTRACTOR.MAST_CON_FNAME,
                                          item.MASTER_CONTRACTOR.MAST_CON_MNAME,
                                          item.MASTER_CONTRACTOR.MAST_CON_LNAME,
                                          item.MASTER_CON_CLASS_TYPE.MAST_CON_CLASS,
                                          item.MAST_CON_REG_NO,
                                          item.MAST_REG_OFFICE,
                                          item.MAST_CON_VALID_FROM,
                                          item.MAST_CON_VALID_TO,
                                          item.MAST_REG_STATUS

                                      });

                totalRecords = lstContractors.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_REG_NO":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_REG_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_REG_OFFICE":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_REG_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_FROM":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_VALID_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_TO":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_VALID_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_REG_STATUS":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_REG_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;

                            default:
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_REG_NO":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_REG_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_REG_OFFICE":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_REG_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_FROM":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_VALID_FROM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_VALID_TO":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_VALID_TO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_REG_STATUS":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_REG_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var gridData = lstContractors.Select(contractorDetails =>
                    new
                    {
                        contractorDetails.MAST_CON_ID,
                        contractorDetails.MAST_CON_FNAME,
                        contractorDetails.MAST_CON_MNAME,
                        contractorDetails.MAST_CON_LNAME,
                        contractorDetails.MAST_CON_REG_NO,
                        contractorDetails.MAST_REG_OFFICE,
                        contractorDetails.MAST_CON_VALID_FROM,
                        contractorDetails.MAST_CON_VALID_TO,
                        contractorDetails.MAST_CON_CLASS,
                        contractorDetails.MAST_REG_STATUS

                    }).ToArray();

                return gridData.Select(m => new
                {
                    cell = new[]
                    {
                        //m.MAST_STATE_NAME.ToString(),
                        (m.MAST_CON_FNAME==null?"NA":m.MAST_CON_FNAME.ToString())+" "+(m.MAST_CON_MNAME==null?string.Empty:m.MAST_CON_MNAME.ToString())+" "+(m.MAST_CON_LNAME==null?string.Empty:m.MAST_CON_LNAME.ToString()),
                        m.MAST_CON_REG_NO == null?string.Empty:m.MAST_CON_REG_NO.ToString(),
                        m.MAST_REG_OFFICE == null?string.Empty:m.MAST_REG_OFFICE.ToString(),
                        m.MAST_CON_VALID_FROM==null?"-":Convert.ToDateTime(m.MAST_CON_VALID_FROM).ToString("dd/MM/yyyy"),
                        m.MAST_CON_VALID_TO==null?"-":Convert.ToDateTime(m.MAST_CON_VALID_TO).ToString("dd/MM/yyyy"),
                        m.MAST_CON_CLASS==null?string.Empty:m.MAST_CON_CLASS.ToString().Trim(),
                        m.MAST_REG_STATUS == "A"?"Active":"Inactive"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        #endregion Contractor Registration DAL defination
        #region Contractor Details
        public Array GetContractorAgreementListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstContractors = (from item in dbContext.MASTER_CONTRACTOR
                                      join agreement in dbContext.TEND_AGREEMENT_MASTER
                                     on item.MAST_CON_ID equals agreement.MAST_CON_ID
                                      //join state in dbContext.MASTER_STATE
                                      //on agreement.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                      //join district in dbContext.MASTER_DISTRICT
                                      //on agreement.MAST_DISTRICT_CODE equals district.MAST_STATE_CODE
                                      where
                                        (contractorNo == 0 ? 1 : item.MAST_CON_ID) == (contractorNo == 0 ? 1 : contractorNo)
                                      select new
                                      {
                                          item.MAST_CON_ID,
                                          item.MAST_CON_MNAME,
                                          item.MAST_CON_LNAME,
                                          item.MAST_CON_FNAME,
                                          agreement.MASTER_STATE.MAST_STATE_NAME,
                                          agreement.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                          item.MAST_CON_STATUS,
                                          item.MAST_CON_PAN,
                                          item.MAST_CON_COMPANY_NAME,
                                          agreement.TEND_TENDER_AMOUNT,
                                          agreement.TEND_AGREEMENT_NUMBER,
                                          agreement.TEND_DATE_OF_AGREEMENT,
                                          agreement.TEND_AGREEMENT_START_DATE,
                                          agreement.TEND_AGREEMENT_END_DATE,
                                          agreement.TEND_AGREEMENT_AMOUNT,
                                          agreement.TEND_IS_AGREEMENT_FINALIZED,
                                          agreement.TEND_AGREEMENT_TYPE,
                                          agreement.TEND_AMOUNT_YEAR1,
                                          agreement.TEND_AMOUNT_YEAR2,
                                          agreement.TEND_AMOUNT_YEAR3,
                                          agreement.TEND_AMOUNT_YEAR4,
                                          agreement.TEND_AMOUNT_YEAR5,
                                          agreement.TEND_AMOUNT_YEAR6,
                                          agreement.TEND_AGREEMENT_STATUS

                                      });

                totalRecords = lstContractors.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_NUMBER":
                                lstContractors = lstContractors.OrderBy(x => x.TEND_AGREEMENT_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_START_DATE":
                                lstContractors = lstContractors.OrderBy(x => x.TEND_AGREEMENT_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_END_DATE":
                                lstContractors = lstContractors.OrderBy(x => x.TEND_AGREEMENT_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_IS_AGREEMENT_FINALIZED":
                                lstContractors = lstContractors.OrderBy(x => x.TEND_IS_AGREEMENT_FINALIZED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_STATUS":
                                lstContractors = lstContractors.OrderBy(x => x.TEND_AGREEMENT_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_NUMBER":
                                lstContractors = lstContractors.OrderByDescending(x => x.TEND_AGREEMENT_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_START_DATE":
                                lstContractors = lstContractors.OrderByDescending(x => x.TEND_AGREEMENT_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_END_DATE":
                                lstContractors = lstContractors.OrderByDescending(x => x.TEND_AGREEMENT_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_IS_AGREEMENT_FINALIZED":
                                lstContractors = lstContractors.OrderByDescending(x => x.TEND_IS_AGREEMENT_FINALIZED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "TEND_AGREEMENT_STATUS":
                                lstContractors = lstContractors.OrderByDescending(x => x.TEND_AGREEMENT_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var gridData = lstContractors.Select(contractorDetails =>
                    new
                    {
                        contractorDetails.MAST_CON_ID,
                        contractorDetails.MAST_CON_FNAME,
                        contractorDetails.MAST_CON_MNAME,
                        contractorDetails.MAST_CON_LNAME,
                        contractorDetails.MAST_STATE_NAME,
                        contractorDetails.MAST_CON_STATUS,
                        contractorDetails.MAST_CON_COMPANY_NAME,
                        contractorDetails.MAST_CON_PAN,
                        contractorDetails.MAST_DISTRICT_NAME,
                        contractorDetails.TEND_TENDER_AMOUNT,
                        contractorDetails.TEND_AGREEMENT_NUMBER,
                        contractorDetails.TEND_DATE_OF_AGREEMENT,
                        contractorDetails.TEND_AGREEMENT_START_DATE,
                        contractorDetails.TEND_AGREEMENT_END_DATE,
                        contractorDetails.TEND_AGREEMENT_AMOUNT,
                        contractorDetails.TEND_IS_AGREEMENT_FINALIZED,
                        contractorDetails.TEND_AGREEMENT_TYPE,
                        contractorDetails.TEND_AMOUNT_YEAR1,
                        contractorDetails.TEND_AMOUNT_YEAR2,
                        contractorDetails.TEND_AMOUNT_YEAR3,
                        contractorDetails.TEND_AMOUNT_YEAR4,
                        contractorDetails.TEND_AMOUNT_YEAR5,
                        contractorDetails.TEND_AMOUNT_YEAR6,
                        contractorDetails.TEND_AGREEMENT_STATUS,

                    }).ToArray();

                return gridData.Select(m => new
                {
                    cell = new[]
                    {
                        (m.MAST_CON_FNAME==null?"NA":m.MAST_CON_FNAME.ToString())+" "+(m.MAST_CON_MNAME==null?string.Empty:m.MAST_CON_MNAME.ToString())+" "+(m.MAST_CON_LNAME==null?string.Empty:m.MAST_CON_LNAME.ToString()),
                        m.MAST_CON_COMPANY_NAME==null?"":m.MAST_CON_COMPANY_NAME.ToString(),
                        m.MAST_STATE_NAME==null?"": m.MAST_STATE_NAME.ToString(),
                        m.MAST_DISTRICT_NAME==null?"": m.MAST_DISTRICT_NAME.ToString(),
                        m.TEND_AGREEMENT_NUMBER==null?"":m.TEND_AGREEMENT_NUMBER.ToString(),
                        m.TEND_AGREEMENT_START_DATE==null?"-":Convert.ToDateTime(m.TEND_AGREEMENT_START_DATE).ToString("dd/MM/yyyy"),
                        m.TEND_AGREEMENT_END_DATE==null?"-":Convert.ToDateTime(m.TEND_AGREEMENT_END_DATE).ToString("dd/MM/yyyy"),
                        m.TEND_AGREEMENT_AMOUNT==null?"":m.TEND_AGREEMENT_AMOUNT.ToString(),
                         PMGSYSession.Current.PMGSYScheme==1?(m.TEND_AMOUNT_YEAR1==null?0:(m.TEND_AMOUNT_YEAR1)+(m.TEND_AMOUNT_YEAR2==null?0:m.TEND_AMOUNT_YEAR2)+(m.TEND_AMOUNT_YEAR3==null?0:m.TEND_AMOUNT_YEAR3)+(m.TEND_AMOUNT_YEAR4==null?0:m.TEND_AMOUNT_YEAR4)+(m.TEND_AMOUNT_YEAR5==null?0:m.TEND_AMOUNT_YEAR5)).ToString():((m.TEND_AMOUNT_YEAR1==null?0:m.TEND_AMOUNT_YEAR1)+(m.TEND_AMOUNT_YEAR2==null?0:m.TEND_AMOUNT_YEAR2)+(m.TEND_AMOUNT_YEAR3==null?0:m.TEND_AMOUNT_YEAR3)+(m.TEND_AMOUNT_YEAR4==null?0:m.TEND_AMOUNT_YEAR4)+(m.TEND_AMOUNT_YEAR5==null?0:m.TEND_AMOUNT_YEAR5)+(m.TEND_AMOUNT_YEAR6==null?0:m.TEND_AMOUNT_YEAR6)).ToString(),
                        m.TEND_AGREEMENT_STATUS == "C"?"Complete": m.TEND_AGREEMENT_STATUS =="P"?"In Progress": m.TEND_AGREEMENT_STATUS =="W"?"Terminated":"",
                        m.TEND_IS_AGREEMENT_FINALIZED == "Y"?"Yes":"No",

                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetContractorIMSMaintenanceListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstContractors = (from item in dbContext.MASTER_CONTRACTOR
                                      join imsContract in dbContext.MANE_IMS_CONTRACT
                                     on item.MAST_CON_ID equals imsContract.MAST_CON_ID
                                      join registration in dbContext.MASTER_CONTRACTOR_REGISTRATION
                                      on imsContract.MAST_CON_ID equals registration.MAST_CON_ID
                                      join state in dbContext.MASTER_STATE
                                      //on item.MAST_STATE_CODE_ADDR equals state.MAST_STATE_CODE
                                      on imsContract.IMS_SANCTIONED_PROJECTS.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                      where
                                      (stateCode == 0 ? 1 : registration.MAST_REG_STATE) == (stateCode == 0 ? 1 : stateCode) &&
                                       (contractorNo == 0 ? 1 : item.MAST_CON_ID) == (contractorNo == 0 ? 1 : contractorNo) &&
                                      // (districtCode == 0 ? 1 : item.MAST_DISTRICT_CODE_ADDR) == (districtCode == 0 ? 1 : districtCode) &&
                                      (status == string.Empty ? "%" : registration.MAST_REG_STATUS) == (status == string.Empty ? "%" : status) &&
                                      (conStatus == string.Empty ? "%" : item.MAST_CON_STATUS) == (conStatus == string.Empty ? "%" : conStatus) &&
                                      (contractorName == string.Empty ? "%" : item.MAST_CON_FNAME).StartsWith(contractorName == string.Empty ? "%" : contractorName) &&
                                      (panNumber == string.Empty ? "%" : item.MAST_CON_PAN).Contains(panNumber == string.Empty ? "%" : panNumber) &&
                                      (classType == 0 ? 1 : registration.MAST_CON_CLASS) == (classType == 0 ? 1 : classType) &&
                                      (regNo == string.Empty ? "%" : registration.MAST_CON_REG_NO).Contains(regNo == string.Empty ? "%" : regNo) &&
                                      (companyName == string.Empty ? "%" : item.MAST_CON_COMPANY_NAME).Contains(companyName == string.Empty ? "%" : companyName)
                                      select new
                                      {
                                          item.MAST_CON_ID,
                                          item.MAST_CON_MNAME,
                                          item.MAST_CON_LNAME,
                                          item.MAST_CON_FNAME,
                                          registration.MAST_CON_REG_NO,
                                          registration.MASTER_CON_CLASS_TYPE,
                                          registration.MAST_REG_OFFICE,
                                          registration.MAST_REG_STATE,
                                          registration.MAST_REG_STATUS,
                                          registration.MAST_CON_VALID_FROM,
                                          registration.MAST_CON_VALID_TO,
                                          state.MAST_STATE_NAME,
                                          registration.MAST_REG_CODE,
                                          registration.MAST_CON_CLASS,
                                          item.MAST_CON_STATUS,
                                          item.MAST_CON_PAN,
                                          item.MAST_CON_COMPANY_NAME,
                                          imsContract.MANE_AGREEMENT_NUMBER,
                                          imsContract.MANE_CONTRACT_NUMBER,
                                          imsContract.MANE_AGREEMENT_DATE,
                                          imsContract.MANE_CONTRACT_FINALIZED,
                                          imsContract.MANE_YEAR1_AMOUNT,
                                          imsContract.MANE_YEAR2_AMOUNT,
                                          imsContract.MANE_YEAR3_AMOUNT,
                                          imsContract.MANE_YEAR4_AMOUNT,
                                          imsContract.MANE_YEAR5_AMOUNT,
                                          imsContract.MANE_YEAR6_AMOUNT,
                                          imsContract.MANE_CONTRACT_STATUS

                                      });

                totalRecords = lstContractors.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_AGREEMENT_NUMBER":
                                lstContractors = lstContractors.OrderBy(x => x.MANE_AGREEMENT_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_CONTRACT_NUMBER":
                                lstContractors = lstContractors.OrderBy(x => x.MANE_CONTRACT_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_AGREEMENT_DATE":
                                lstContractors = lstContractors.OrderBy(x => x.MANE_AGREEMENT_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_CONTRACT_FINALIZED":
                                lstContractors = lstContractors.OrderBy(x => x.MANE_CONTRACT_FINALIZED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_CONTRACT_STATUS":
                                lstContractors = lstContractors.OrderBy(x => x.MANE_CONTRACT_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_AGREEMENT_NUMBER":
                                lstContractors = lstContractors.OrderByDescending(x => x.MANE_AGREEMENT_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_CONTRACT_NUMBER":
                                lstContractors = lstContractors.OrderByDescending(x => x.MANE_CONTRACT_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_AGREEMENT_DATE":
                                lstContractors = lstContractors.OrderByDescending(x => x.MANE_AGREEMENT_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_CONTRACT_FINALIZED":
                                lstContractors = lstContractors.OrderByDescending(x => x.MANE_CONTRACT_FINALIZED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MANE_CONTRACT_STATUS":
                                lstContractors = lstContractors.OrderByDescending(x => x.MANE_CONTRACT_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var gridData = lstContractors.Select(contractorDetails =>
                    new
                    {
                        contractorDetails.MAST_CON_ID,
                        contractorDetails.MAST_CON_FNAME,
                        contractorDetails.MAST_CON_MNAME,
                        contractorDetails.MAST_CON_LNAME,
                        contractorDetails.MAST_CON_REG_NO,
                        contractorDetails.MAST_REG_OFFICE,
                        contractorDetails.MAST_CON_VALID_FROM,
                        contractorDetails.MAST_CON_VALID_TO,
                        contractorDetails.MAST_STATE_NAME,
                        contractorDetails.MAST_REG_CODE,
                        contractorDetails.MAST_REG_STATUS,
                        contractorDetails.MASTER_CON_CLASS_TYPE,
                        contractorDetails.MAST_CON_CLASS,
                        contractorDetails.MAST_CON_STATUS,
                        contractorDetails.MAST_CON_COMPANY_NAME,
                        contractorDetails.MAST_CON_PAN,
                        contractorDetails.MANE_AGREEMENT_NUMBER,
                        contractorDetails.MANE_CONTRACT_NUMBER,
                        contractorDetails.MANE_AGREEMENT_DATE,
                        contractorDetails.MANE_CONTRACT_FINALIZED,
                        contractorDetails.MANE_YEAR1_AMOUNT,
                        contractorDetails.MANE_YEAR2_AMOUNT,
                        contractorDetails.MANE_YEAR3_AMOUNT,
                        contractorDetails.MANE_YEAR4_AMOUNT,
                        contractorDetails.MANE_YEAR5_AMOUNT,
                        contractorDetails.MANE_YEAR6_AMOUNT,
                        contractorDetails.MANE_CONTRACT_STATUS

                    }).ToArray();

                return gridData.Select(m => new
                {
                    cell = new[]
                    {
                         (m.MAST_CON_FNAME==null?"NA":m.MAST_CON_FNAME.ToString())+" "+(m.MAST_CON_MNAME==null?string.Empty:m.MAST_CON_MNAME.ToString())+" "+(m.MAST_CON_LNAME==null?string.Empty:m.MAST_CON_LNAME.ToString()),
                        m.MAST_CON_COMPANY_NAME==null?"":m.MAST_CON_COMPANY_NAME.ToString(),
                        m.MAST_STATE_NAME==null?"": m.MAST_STATE_NAME.ToString(),
                        m.MANE_AGREEMENT_NUMBER==null?"": m.MANE_AGREEMENT_NUMBER.ToString(),
                        m.MANE_CONTRACT_NUMBER==null?"":m.MANE_CONTRACT_NUMBER.ToString(),
                        m.MANE_AGREEMENT_DATE==null?"-":Convert.ToDateTime(m.MANE_AGREEMENT_DATE).ToString("dd/MM/yyyy"),
                         PMGSYSession.Current.PMGSYScheme==1?(m.MANE_YEAR1_AMOUNT==null?0:(m.MANE_YEAR1_AMOUNT)+(m.MANE_YEAR2_AMOUNT==null?0:m.MANE_YEAR2_AMOUNT)+(m.MANE_YEAR3_AMOUNT==null?0:m.MANE_YEAR3_AMOUNT)+(m.MANE_YEAR4_AMOUNT==null?0:m.MANE_YEAR4_AMOUNT)+(m.MANE_YEAR5_AMOUNT==null?0:m.MANE_YEAR5_AMOUNT)).ToString():((m.MANE_YEAR1_AMOUNT==null?0:m.MANE_YEAR1_AMOUNT)+(m.MANE_YEAR2_AMOUNT==null?0:m.MANE_YEAR2_AMOUNT)+(m.MANE_YEAR3_AMOUNT==null?0:m.MANE_YEAR3_AMOUNT)+(m.MANE_YEAR4_AMOUNT==null?0:m.MANE_YEAR4_AMOUNT)+(m.MANE_YEAR5_AMOUNT==null?0:m.MANE_YEAR5_AMOUNT)+(m.MANE_YEAR6_AMOUNT==null?0:m.MANE_YEAR6_AMOUNT)).ToString(),
                        m.MANE_CONTRACT_STATUS == "C"?"Complete": m.MANE_CONTRACT_STATUS =="P"?"In Progress": m.MANE_CONTRACT_STATUS =="I"?"In Complete":"",
                        m.MANE_CONTRACT_FINALIZED == "Y"?"Yes":"No",

                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetContractorPaymentListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstContractors = (from item in dbContext.MASTER_CONTRACTOR
                                      join billDetails in dbContext.ACC_BILL_DETAILS
                                      on item.MAST_CON_ID equals billDetails.MAST_CON_ID
                                      join billMaster in dbContext.ACC_BILL_MASTER
                                      on billDetails.BILL_ID equals billMaster.BILL_ID
                                      join txnMaster in dbContext.ACC_MASTER_TXN
                                      on billMaster.TXN_ID equals txnMaster.TXN_ID
                                      where
                                     (contractorNo == 0 ? 1 : item.MAST_CON_ID) == (contractorNo == 0 ? 1 : contractorNo)
                                      select new
                                      {
                                          item.MAST_CON_ID,
                                          item.MAST_CON_MNAME,
                                          item.MAST_CON_LNAME,
                                          item.MAST_CON_FNAME,
                                          item.MAST_CON_COMPANY_NAME,
                                          billMaster.BILL_MONTH,
                                          billMaster.BILL_YEAR,
                                          billMaster.BILL_DATE,
                                          billMaster.GROSS_AMOUNT,
                                          billMaster.BILL_NO,
                                          billMaster.ACC_MASTER_TXN.TXN_DESC,
                                          billMaster.BILL_TYPE,
                                          billMaster.BILL_FINALIZED
                                      });

                totalRecords = lstContractors.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_MONTH":
                                lstContractors = lstContractors.OrderBy(x => x.BILL_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_YEAR":
                                lstContractors = lstContractors.OrderBy(x => x.BILL_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_DATE":
                                lstContractors = lstContractors.OrderBy(x => x.BILL_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_NO":
                                lstContractors = lstContractors.OrderBy(x => x.BILL_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_TYPE":
                                lstContractors = lstContractors.OrderBy(x => x.BILL_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_FINALIZED":
                                lstContractors = lstContractors.OrderBy(x => x.BILL_FINALIZED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "CONTRACTOR_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_MONTH":
                                lstContractors = lstContractors.OrderByDescending(x => x.BILL_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_YEAR":
                                lstContractors = lstContractors.OrderByDescending(x => x.BILL_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_DATE":
                                lstContractors = lstContractors.OrderByDescending(x => x.BILL_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_NO":
                                lstContractors = lstContractors.OrderByDescending(x => x.BILL_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_TYPE":
                                lstContractors = lstContractors.OrderByDescending(x => x.BILL_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "MAST_CON_COMPANY_NAME":
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_COMPANY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            case "BILL_FINALIZED":
                                lstContractors = lstContractors.OrderByDescending(x => x.BILL_FINALIZED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                            default:
                                lstContractors = lstContractors.OrderByDescending(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstContractors = lstContractors.OrderBy(x => x.MAST_CON_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var gridData = lstContractors.Select(contractorDetails =>
                    new
                    {
                        contractorDetails.MAST_CON_ID,
                        contractorDetails.MAST_CON_FNAME,
                        contractorDetails.MAST_CON_MNAME,
                        contractorDetails.MAST_CON_LNAME,
                        contractorDetails.MAST_CON_COMPANY_NAME,
                        contractorDetails.BILL_MONTH,
                        contractorDetails.BILL_YEAR,
                        contractorDetails.BILL_DATE,
                        contractorDetails.GROSS_AMOUNT,
                        contractorDetails.BILL_NO,
                        contractorDetails.TXN_DESC,
                        contractorDetails.BILL_TYPE,
                        contractorDetails.BILL_FINALIZED

                    }).ToArray();

                return gridData.Select(m => new
                {
                    cell = new[]
                    {
                        (m.MAST_CON_FNAME==null?"NA":m.MAST_CON_FNAME.ToString())+" "+(m.MAST_CON_MNAME==null?string.Empty:m.MAST_CON_MNAME.ToString())+" "+(m.MAST_CON_LNAME==null?string.Empty:m.MAST_CON_LNAME.ToString()),
                        m.MAST_CON_COMPANY_NAME==null?"":m.MAST_CON_COMPANY_NAME.ToString(),
                        m.BILL_MONTH==null?"":CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m.BILL_MONTH).ToString(),
                        m.BILL_YEAR==null?"": m.BILL_YEAR.ToString(),
                         m.BILL_NO==null?"":m.BILL_NO.ToString(),
                        m.BILL_DATE==null?"-":Convert.ToDateTime(m.BILL_DATE).ToString("dd/MM/yyyy"),
                        m.GROSS_AMOUNT==null?"":m.GROSS_AMOUNT.ToString(),
                        m.TXN_DESC==null?"":m.TXN_DESC.ToString(),
                        m.BILL_TYPE == "P"?"Payment": m.BILL_TYPE =="R"?"Receipt": m.BILL_TYPE =="O"?"Opening Balance":m.BILL_TYPE =="J"?"Transfer Entry Order":"",
                        m.BILL_FINALIZED == "Y"?"Yes":"No",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region VidhanSabhaTerm DAL Defination
        public bool AddMasterVidhanSabhaTerm(MasterVidhanSabhaTermViewModel masterVidhanSabhaTermViewModel, ref string message)
        {

            try
            {
                int? maxTerm = 0;
                MASTER_VIDHAN_SABHA_TERM masterVidhanSabhaModel = null;
                var sDate = masterVidhanSabhaTermViewModel.MAST_VS_START_DATE;
                var eDate = masterVidhanSabhaTermViewModel.MAST_VS_END_DATE;

                System.DateTime? startDate = ConvertStringToDate(sDate);
                System.DateTime? endDate = ConvertStringToDate(eDate);

                //var data = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(item => item.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE).Where(m => m.MAST_VS_TERM == dbContext.MASTER_VIDHAN_SABHA_TERM.Where(item => item.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE).Max(max => max.MAST_VS_TERM)).ToList();

                //System.DateTime? _endDate = null;
                //System.DateTime? _startDate = ConvertStringToDate(masterVidhanSabhaTermViewModel.MAST_VS_START_DATE);
                //foreach (var item in data)
                //{
                //    _endDate = item.MAST_VS_END_DATE;
                //}

                //if (_startDate < _endDate)
                //{
                //    message = " Start date must be greater than last Vidhan sabha term end date.";
                //    return false;
                //}

                //
                dbContext = new PMGSYEntities();
                // int vidhanSabhaTermExist = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE && m.MAST_VS_START_DATE == startDate && m.MAST_VS_END_DATE == endDate).Count();

                if (dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE && m.MAST_VS_START_DATE == startDate && m.MAST_VS_END_DATE == endDate).Any())
                {
                    message = "Vidhan Sabha Term details already exist.";
                    return false;
                }

                //added by koustubh Nakate on 28-05-2013 for date validation


                if (startDate != null)
                {
                    maxTerm = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(vt => vt.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE).Max(vt => (Int32?)vt.MAST_VS_TERM);

                    //maxTerm = from vidhanSabhaTerm in dbContext.MASTER_VIDHAN_SABHA_TERM where vidhanSabhaTerm.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE .Max(vt => vt.MAST_VS_TERM);

                    if (maxTerm != null)
                    {
                        masterVidhanSabhaModel = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(vt => vt.MAST_VS_TERM == maxTerm && vt.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE).FirstOrDefault();


                        if (masterVidhanSabhaModel.MAST_VS_END_DATE == null)
                        {
                            if (masterVidhanSabhaModel.MAST_VS_START_DATE >= startDate)
                            {
                                message = "Start Date of Vidhan Sabha Term should be greater than Start Date of previous term for selected state.";
                                return false;
                            }
                            masterVidhanSabhaModel.MAST_VS_END_DATE = Convert.ToDateTime(startDate).AddDays(-1);
                            dbContext.Entry(masterVidhanSabhaModel).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                        else
                        {
                            if (masterVidhanSabhaModel.MAST_VS_END_DATE >= startDate)
                            {
                                message = "Start Date of Vidhan Sabha Term should be greater than End Date of previous term for selected state.";
                                return false;
                            }
                        }
                    }

                }



                bool flagVidhanSabhaTermAddEdit = true;

                masterVidhanSabhaModel = CloneVidhanSabhaTermModel(masterVidhanSabhaTermViewModel, flagVidhanSabhaTermAddEdit);
                masterVidhanSabhaModel.MAST_VS_TERM = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE).Max(cp => (Int32?)cp.MAST_VS_TERM) == null ? 1 : (Int32)dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE).Max(cp => (Int32?)cp.MAST_VS_TERM) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_VIDHAN_SABHA_TERM.Add(masterVidhanSabhaModel);
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (DbEntityValidationException dbEx)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditMasterVidhanSabhaTerm(MasterVidhanSabhaTermViewModel masterVidhanSabhaTermViewModel, ref string message)
        {
            try
            {
                int? previousTerm = 0;
                int? nextTerm = 0;
                MASTER_VIDHAN_SABHA_TERM master_VidhanSabhaTerm = null;
                dbContext = new PMGSYEntities();
                encryptedParameters = masterVidhanSabhaTermViewModel.EncryptedVSTermCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                VidhanSabhaTermId = Convert.ToInt32(decryptedParameters["VidhanSabhaId"].ToString());

                System.DateTime? startDate = ConvertStringToDate(masterVidhanSabhaTermViewModel.MAST_VS_START_DATE);
                System.DateTime? endDate = ConvertStringToDate(masterVidhanSabhaTermViewModel.MAST_VS_END_DATE);


                Int32 recCount = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_VS_TERM != VidhanSabhaTermId && m.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE && m.MAST_VS_START_DATE == startDate && m.MAST_VS_END_DATE == endDate).Count();

                if (recCount > 0)
                {
                    message = "Vidhan Sabha Term details already exist";
                    return false;
                }


                //added by koustubh Nakate on 28-05-2013 for date validation
                if (startDate != null)
                {

                    previousTerm = VidhanSabhaTermId - 1;

                    master_VidhanSabhaTerm = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(vt => vt.MAST_VS_TERM == previousTerm && vt.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE).FirstOrDefault();

                    if (master_VidhanSabhaTerm != null)
                    {
                        if (master_VidhanSabhaTerm.MAST_VS_END_DATE == null)
                        {
                            if (master_VidhanSabhaTerm.MAST_VS_START_DATE >= startDate)
                            {
                                message = "Start Date of Vidhan Sabha Term should be greater than Start Date of previous term for selected state.";
                                return false;
                            }

                            master_VidhanSabhaTerm.MAST_VS_END_DATE = Convert.ToDateTime(startDate).AddDays(-1);
                            dbContext.Entry(master_VidhanSabhaTerm).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                        else
                        {
                            if (master_VidhanSabhaTerm.MAST_VS_END_DATE >= startDate)
                            {
                                message = "Start Date of Vidhan Sabha Term should be greater than End Date of previous term for selected state.";
                                return false;
                            }
                        }
                    }

                }


                if (endDate != null)
                {

                    nextTerm = VidhanSabhaTermId + 1;

                    master_VidhanSabhaTerm = (from vidhanSabhaTerm in dbContext.MASTER_VIDHAN_SABHA_TERM where vidhanSabhaTerm.MAST_VS_TERM == nextTerm && vidhanSabhaTerm.MAST_STATE_CODE == masterVidhanSabhaTermViewModel.MAST_STATE_CODE select vidhanSabhaTerm).FirstOrDefault();

                    if (master_VidhanSabhaTerm != null)
                    {

                        if (master_VidhanSabhaTerm.MAST_VS_START_DATE <= endDate)
                        {
                            message = "End Date of Vidhan Sabha Term should be less than Start Date of next term for selected state.";
                            return false;
                        }
                    }

                }

                //end added by koustubh Nakate on 28-05-2013 for date validation


                bool flagVidhanSabhaAddEdit = false;

                MASTER_VIDHAN_SABHA_TERM masterVidhanSabhaModel = CloneVidhanSabhaTermModel(masterVidhanSabhaTermViewModel, flagVidhanSabhaAddEdit);

                dbContext = new PMGSYEntities();
                dbContext.Entry(masterVidhanSabhaModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MASTER_VIDHAN_SABHA_TERM CloneVidhanSabhaTermModel(MasterVidhanSabhaTermViewModel masterVidhanSabhaTermViewModel, bool flagVidhanSabhaAddEdit)
        {
            try
            {
                MASTER_VIDHAN_SABHA_TERM masterVidhanSabhaModel = new MASTER_VIDHAN_SABHA_TERM();
                //  if (flagVidhanSabhaAddEdit)
                // {
                //  masterVidhanSabhaModel.MAST_VS_TERM = GetMaxVidhanSabhaTermCode(masterVidhanSabhaTermViewModel.MAST_STATE_CODE);


                //  }
                //  else
                if (!flagVidhanSabhaAddEdit)
                {
                    masterVidhanSabhaModel.MAST_VS_TERM = VidhanSabhaTermId;
                }
                //    }

                masterVidhanSabhaModel.MAST_LOCK_STATUS = "N";
                masterVidhanSabhaModel.MAST_STATE_CODE = masterVidhanSabhaTermViewModel.MAST_STATE_CODE;

                masterVidhanSabhaModel.MAST_VS_START_DATE = ConvertStringToDate(masterVidhanSabhaTermViewModel.MAST_VS_START_DATE);
                masterVidhanSabhaModel.MAST_VS_END_DATE = ConvertStringToDate(masterVidhanSabhaTermViewModel.MAST_VS_END_DATE);

                //masterVidhanSabhaModel.MAST_VS_START_DATE = Convert.ToDateTime(masterVidhanSabhaTermViewModel.MAST_VS_START_DATE);
                // masterVidhanSabhaModel.MAST_VS_END_DATE = Convert.ToDateTime(masterVidhanSabhaTermViewModel.MAST_VS_END_DATE);
                return masterVidhanSabhaModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public Boolean DeleteVidhanSabhaTerm(int stateCode, int VSTermId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_VIDHAN_SABHA_TERM masterVidhanSabhaModel = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_STATE_CODE == stateCode && m.MAST_VS_TERM == VSTermId).FirstOrDefault();


                if (masterVidhanSabhaModel == null)
                {
                    return false;
                }

                dbContext.MASTER_VIDHAN_SABHA_TERM.Remove(masterVidhanSabhaModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Vidhan Sabha Term details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListVidhanSabhaTerm(int stateCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                //join state in dbContext.MASTER_STATE
                //                              on qualityMonitor.MAST_STATE_CODE equals state.MAST_STATE_CODE into outerState
                //                              from state in outerState.DefaultIfEmpty()

                dbContext = new PMGSYEntities();
                var lstMasterVidhanSabhaDetails = (from VS in dbContext.MASTER_VIDHAN_SABHA_TERM
                                                   join state in dbContext.MASTER_STATE
                                                   on VS.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                                   where (stateCode == 0 ? 1 : state.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode)
                                                   select new
                                                   {
                                                       VS.MAST_VS_TERM,
                                                       VS.MAST_VS_START_DATE,
                                                       VS.MAST_VS_END_DATE,
                                                       state.MAST_STATE_NAME,
                                                       VS.MAST_STATE_CODE,
                                                       VS.MAST_LOCK_STATUS
                                                   }).ToList();

                totalRecords = lstMasterVidhanSabhaDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {

                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_VS_TERM":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderBy(x => x.MAST_VS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_VS_START_DATE":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderBy(x => x.MAST_VS_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_VS_END_DATE":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderBy(x => x.MAST_VS_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_VS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                        }


                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_VS_TERM":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderByDescending(x => x.MAST_VS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_VS_START_DATE":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderByDescending(x => x.MAST_VS_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_VS_END_DATE":
                                lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderByDescending(x => x.MAST_VS_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                        }
                    }
                }
                else
                {
                    lstMasterVidhanSabhaDetails = lstMasterVidhanSabhaDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_VS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }


                return lstMasterVidhanSabhaDetails.Select(item => new
                {
                    cell = new[]{
                        item.MAST_VS_TERM.ToString(),
                                    item.MAST_STATE_NAME.Trim(),
                                   item.MAST_VS_START_DATE==null?"NA":Convert.ToDateTime(item.MAST_VS_START_DATE).ToString("dd/MM/yyyy"),
                                   item.MAST_VS_END_DATE==null?"NA":Convert.ToDateTime(item.MAST_VS_END_DATE).ToString("dd/MM/yyyy"),
                                   item.MAST_LOCK_STATUS=="N"?URLEncrypt.EncryptParameters1(new string[]{"StateID="+item.MAST_STATE_CODE.ToString().Trim(),"VidhanSabhaId="+item.MAST_VS_TERM.ToString().Trim()}):string.Empty

                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterVidhanSabhaTermViewModel GetVidhanSabhaTerm_ByStateCode_TermId(int stateCode, int TermId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_VIDHAN_SABHA_TERM masterVidhanSabhaModel = dbContext.MASTER_VIDHAN_SABHA_TERM.FirstOrDefault(m => m.MAST_STATE_CODE == stateCode && m.MAST_VS_TERM == TermId);

                MasterVidhanSabhaTermViewModel masterVidhanSabhaViewModel = null;
                if (masterVidhanSabhaModel != null)
                {
                    masterVidhanSabhaViewModel = CloneVidhanSabhaTermObject(masterVidhanSabhaModel);
                }

                return masterVidhanSabhaViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterVidhanSabhaTermViewModel CloneVidhanSabhaTermObject(MASTER_VIDHAN_SABHA_TERM masterVidhanSabhaTermModel)
        {
            try
            {
                MasterVidhanSabhaTermViewModel masterVidhanSabhaViewModel = new MasterVidhanSabhaTermViewModel();

                masterVidhanSabhaViewModel.EncryptedVSTermCode = URLEncrypt.EncryptParameters1(new string[] { "VidhanSabhaId =" + masterVidhanSabhaTermModel.MAST_VS_TERM.ToString().Trim() });


                masterVidhanSabhaViewModel.MAST_STATE_CODE = masterVidhanSabhaTermModel.MAST_STATE_CODE;
                masterVidhanSabhaViewModel.MAST_VS_START_DATE = masterVidhanSabhaTermModel.MAST_VS_START_DATE == null ? string.Empty : ConvertDateToString(masterVidhanSabhaTermModel.MAST_VS_START_DATE);
                masterVidhanSabhaViewModel.MAST_VS_END_DATE = masterVidhanSabhaTermModel.MAST_VS_END_DATE == null ? string.Empty : ConvertDateToString(masterVidhanSabhaTermModel.MAST_VS_END_DATE);

                return masterVidhanSabhaViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public int GetMaxVidhanSabhaTermCode(int stateCode)
        {
            try
            {
                int? maxCode = 0;
                dbContext = new PMGSYEntities();

                if ((dbContext.MASTER_VIDHAN_SABHA_TERM.Any()))
                {
                    maxCode = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(m => m.MAST_STATE_CODE == stateCode).Max(vt => (Int32?)vt.MAST_VS_TERM);
                    maxCode = maxCode + 1;
                }
                else
                {
                    maxCode = 1;
                }

                return (int)maxCode;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                throw ex;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        #endregion VidhanSabhaTerm DAL Defination

        #region Region DAL Defination

        public bool AddMasterRegion(MasterRegionViewModel masterRegionViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.MASTER_REGION.Where(m => m.MAST_REGION_NAME == masterRegionViewModel.MAST_REGION_NAME && m.MAST_STATE_CODE == masterRegionViewModel.MAST_STATE_CODE).Any())
                {
                    message = "Region details already exist.";
                    return false;
                }


                bool flagRegionAddEdit = true;

                MASTER_REGION masterRegionModel = CloneMasterRegionModel(masterRegionViewModel, flagRegionAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.MASTER_REGION.Add(masterRegionModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (DbEntityValidationException dbEx)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool EditMasterRegion(MasterRegionViewModel masterRegionViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterRegionViewModel.EncryptedRegionCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                RegionCode = Convert.ToInt32(decryptedParameters["RegionCode"].ToString());

                Int32 recCount = dbContext.MASTER_REGION.Where(m => m.MAST_REGION_CODE != RegionCode && m.MAST_REGION_NAME == masterRegionViewModel.MAST_REGION_NAME && m.MAST_STATE_CODE == masterRegionViewModel.MAST_STATE_CODE).Count();

                if (recCount > 0)
                {
                    message = "Region details already exist";
                    return false;
                }

                MASTER_REGION masterRegionModel = dbContext.MASTER_REGION.Where(r => r.MAST_REGION_CODE == RegionCode).FirstOrDefault();
                if (masterRegionModel == null)
                {
                    return false;
                }

                masterRegionModel.MAST_REGION_NAME = masterRegionViewModel.MAST_REGION_NAME;

                dbContext.Entry(masterRegionModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MASTER_REGION CloneMasterRegionModel(MasterRegionViewModel masterRegionViewModel, bool flagRegionAddEdit)
        {
            try
            {
                MASTER_REGION masterRegionModel = new MASTER_REGION();
                if (flagRegionAddEdit)
                {
                    masterRegionModel.MAST_REGION_CODE = dbContext.MASTER_REGION.Max(cp => (Int32?)cp.MAST_REGION_CODE) == null ? 1 : (Int32)dbContext.MASTER_REGION.Max(cp => (Int32?)cp.MAST_REGION_CODE) + 1;
                    masterRegionModel.MAST_REGION_ACTIVE = "Y";
                }
                else
                {
                    masterRegionModel.MAST_REGION_CODE = RegionCode;
                }

                masterRegionModel.MAST_REGION_NAME = masterRegionViewModel.MAST_REGION_NAME;
                masterRegionModel.MAST_STATE_CODE = masterRegionViewModel.MAST_STATE_CODE;
                masterRegionModel.MAST_LOCK_STATUS = "N";

                return masterRegionModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        //changes by Koustubh Nakate on 10-05-2013 
        public Boolean DeleteMasterRegion(int regionCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_REGION masterRegionModel = dbContext.MASTER_REGION.Where(m => m.MAST_REGION_CODE == regionCode).FirstOrDefault();

                if (masterRegionModel == null)
                {
                    return false;
                }

                dbContext.MASTER_REGION.Remove(masterRegionModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Region details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        //changes by Koustubh Nakate on 10-05-2013 for sorting on all column and column sequence changes

        public Array ListMasterRegion(int stateCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                /* var lstMasterRegionDetails = (from region in dbContext.MASTER_REGION
                                               from state in dbContext.MASTER_STATE
                                               where region.MAST_STATE_CODE == state.MAST_STATE_CODE
                                               select new
                                               {
                                                   region.MAST_REGION_CODE,
                                                   region.MAST_REGION_NAME,
                                                   state.MAST_STATE_NAME,
                                                   region.MAST_STATE_CODE
                                               }).ToList();*/

                //changes by Koustubh Nakate on 10-05-2013 
                dbContext = new PMGSYEntities();
                var lstMasterRegionDetails = from regionDetails in dbContext.MASTER_REGION
                                             join stateDetails in dbContext.MASTER_STATE
                                             on regionDetails.MAST_STATE_CODE equals stateDetails.MAST_STATE_CODE
                                             where regionDetails.MAST_REGION_ACTIVE == "Y" &&
                                             stateDetails.MAST_STATE_ACTIVE == "Y" &&//Added By Abhishek kamble 5-May-2014
                                             (stateCode == 0 ? 1 : regionDetails.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode)
                                             select new { regionDetails.MAST_REGION_CODE, regionDetails.MAST_REGION_NAME, stateDetails.MAST_STATE_NAME, regionDetails.MAST_STATE_CODE, regionDetails.MAST_LOCK_STATUS };


                totalRecords = lstMasterRegionDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_REGION_NAME":
                                lstMasterRegionDetails = lstMasterRegionDetails.OrderBy(x => x.MAST_REGION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstMasterRegionDetails = lstMasterRegionDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstMasterRegionDetails = lstMasterRegionDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_REGION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_REGION_NAME":
                                lstMasterRegionDetails = lstMasterRegionDetails.OrderByDescending(x => x.MAST_REGION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                lstMasterRegionDetails = lstMasterRegionDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstMasterRegionDetails = lstMasterRegionDetails.OrderByDescending(x => x.MAST_REGION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstMasterRegionDetails = lstMasterRegionDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_REGION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstMasterRegionDetails.Select(regionDetails => new
                {
                    regionDetails.MAST_REGION_CODE,
                    regionDetails.MAST_REGION_NAME,
                    regionDetails.MAST_STATE_NAME,
                    regionDetails.MAST_STATE_CODE,
                    regionDetails.MAST_LOCK_STATUS

                }).ToArray();

                return result.Select(regionDetails => new
                {
                    cell = new[]{
                                regionDetails.MAST_REGION_NAME,
                                regionDetails.MAST_STATE_NAME,
                                URLEncrypt.EncryptParameters1(new string[] { "RegionCode =" + regionDetails.MAST_REGION_CODE.ToString(), "StateCode =" + regionDetails.MAST_STATE_CODE.ToString(), "RegionName ="+  regionDetails.MAST_REGION_NAME.ToString(),"StateName ="+regionDetails.MAST_STATE_NAME.ToString()}),
                                URLEncrypt.EncryptParameters1(new string[] { "RegionCode =" + regionDetails.MAST_REGION_CODE.ToString(), "StateCode =" + regionDetails.MAST_STATE_CODE.ToString(), "RegionName ="+  regionDetails.MAST_REGION_NAME.ToString(),"StateName="+regionDetails.MAST_STATE_NAME.ToString()}),
                                regionDetails.MAST_LOCK_STATUS=="N"?URLEncrypt.EncryptParameters1(new string[]{"RegionId="+regionDetails.MAST_REGION_CODE.ToString().Trim()}):string.Empty
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public MasterRegionViewModel GetMasterRegion_ByRegionCode(int regionCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_REGION masterRegionModel = dbContext.MASTER_REGION.FirstOrDefault(m => m.MAST_REGION_CODE == regionCode);

                MasterRegionViewModel masterRegionViewModel = null;
                if (masterRegionModel != null)
                {
                    masterRegionViewModel = CloneRegionObject(masterRegionModel);
                }

                return masterRegionViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterRegionViewModel CloneRegionObject(MASTER_REGION masterRegionModel)
        {
            try
            {
                MasterRegionViewModel masterRegionViewModel = new MasterRegionViewModel();

                masterRegionViewModel.EncryptedRegionCode = URLEncrypt.EncryptParameters1(new string[] { "RegionCode =" + masterRegionModel.MAST_REGION_CODE.ToString().Trim() });

                masterRegionViewModel.MAST_REGION_NAME = masterRegionModel.MAST_REGION_NAME;
                masterRegionViewModel.MAST_STATE_CODE = masterRegionModel.MAST_STATE_CODE;

                return masterRegionViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }


        //Added By Abhishek kamble 24-Feb-2014
        public bool DeleteMappedDistrictRegionDetails(int regionId, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                Models.MASTER_REGION_DISTRICT_MAP mapRegionDistrictMaster = dbContext.MASTER_REGION_DISTRICT_MAP.Find(regionId);
                dbContext.MASTER_REGION_DISTRICT_MAP.Remove(mapRegionDistrictMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion Region DAL Defination

        #region Admin Autonomous Body DAL Defination
        public bool AddMasterAdminAutonomousBody(MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.ADMIN_AUTONOMOUS_BODY.Where(m => m.MAST_STATE_CODE == masterAdminAutonomousBodyViewModel.MAST_STATE_CODE).Any())
                {
                    message = "Autonomous Body details already exist.";
                    return false;
                }

                ADMIN_AUTONOMOUS_BODY masterAdminAutonomousBodyModel = CloneMasterAdminAutonomousBodyModel(masterAdminAutonomousBodyViewModel);
                dbContext = new PMGSYEntities();
                dbContext.ADMIN_AUTONOMOUS_BODY.Add(masterAdminAutonomousBodyModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }

            catch (DbEntityValidationException dbEx)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool EditMasterAdminAutonomousBody(MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterAdminAutonomousBodyViewModel.EncryptedStateCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                AutoBodyCode = Convert.ToInt32(decryptedParameters["AutoBodyCode"].ToString());

                /*Int32 recCount = dbContext.ADMIN_AUTONOMOUS_BODY.Where(m => m.MAST_STATE_CODE != AutoBodyCode && m.ADMIN_AUTONOMOUS_BODY1 == masterAdminAutonomousBodyViewModel.ADMIN_AUTONOMOUS_BODY1).Count();

                if (recCount > 0)
                {
                    message = "Autonomous body details already exist";
                    return false;
                }*/

                masterAdminAutonomousBodyViewModel.MAST_STATE_CODE = AutoBodyCode;
                ADMIN_AUTONOMOUS_BODY masterAutonomousBodyModel = CloneMasterAdminAutonomousBodyModel(masterAdminAutonomousBodyViewModel);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterAutonomousBodyModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public ADMIN_AUTONOMOUS_BODY CloneMasterAdminAutonomousBodyModel(MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel)
        {
            try
            {
                ADMIN_AUTONOMOUS_BODY masterAutonomousBodyModel = new ADMIN_AUTONOMOUS_BODY();

                //
                masterAutonomousBodyModel.MAST_STATE_CODE = masterAdminAutonomousBodyViewModel.MAST_STATE_CODE;
                masterAutonomousBodyModel.ADMIN_AUTONOMOUS_BODY1 = masterAdminAutonomousBodyViewModel.ADMIN_AUTONOMOUS_BODY1 == null ? String.Empty : masterAdminAutonomousBodyViewModel.ADMIN_AUTONOMOUS_BODY1;

                //added by abhishek kamble 27-nov-2013
                masterAutonomousBodyModel.USERID = PMGSYSession.Current.UserId;
                masterAutonomousBodyModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                return masterAutonomousBodyModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public Boolean DeleteMasterAdminAutonomousBody(int stateCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_AUTONOMOUS_BODY masterAutonomousBodyModel = dbContext.ADMIN_AUTONOMOUS_BODY.Where(m => m.MAST_STATE_CODE == stateCode).FirstOrDefault();

                if (masterAutonomousBodyModel == null)
                {
                    return false;
                }

                //added by abhishek kamble 27-nov-2013
                masterAutonomousBodyModel.USERID = PMGSYSession.Current.UserId;
                masterAutonomousBodyModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterAutonomousBodyModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_AUTONOMOUS_BODY.Remove(masterAutonomousBodyModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Autonomous Body details.";
                return false;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterAdminAutonomousBody(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode)
        {
            //changes by koustubh nakate on 16/08/2013 for role wise populate details
            try
            {
                dbContext = new PMGSYEntities();

                //string roleName = PMGSYSession.Current.RoleName;
                //int stateCode = PMGSYSession.Current.StateCode;
                int StateCode = stateCode;

                var lstMasterAutoBodyDetails = (from autoBody in dbContext.ADMIN_AUTONOMOUS_BODY
                                                join state in dbContext.MASTER_STATE
                                                on autoBody.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                                //from state in dbContext.MASTER_STATE
                                                where //autoBody.MAST_STATE_CODE == state.MAST_STATE_CODE

                                                (StateCode == 0 ? 1 : autoBody.MAST_STATE_CODE) == (StateCode == 0 ? 1 : StateCode)

                                                select new
                                                {
                                                    autoBody.MAST_STATE_CODE,
                                                    autoBody.ADMIN_AUTONOMOUS_BODY1,
                                                    state.MAST_STATE_NAME
                                                }).ToList();

                totalRecords = lstMasterAutoBodyDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstMasterAutoBodyDetails = lstMasterAutoBodyDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_AUTONOMOUS_BODY1":
                                lstMasterAutoBodyDetails = lstMasterAutoBodyDetails.OrderBy(x => x.ADMIN_AUTONOMOUS_BODY1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                lstMasterAutoBodyDetails = lstMasterAutoBodyDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_AUTONOMOUS_BODY1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstMasterAutoBodyDetails = lstMasterAutoBodyDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_AUTONOMOUS_BODY1":
                                lstMasterAutoBodyDetails = lstMasterAutoBodyDetails.OrderByDescending(x => x.ADMIN_AUTONOMOUS_BODY1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstMasterAutoBodyDetails = lstMasterAutoBodyDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_AUTONOMOUS_BODY1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                }


                return lstMasterAutoBodyDetails.Select(item => new
                {
                    cell = new[]{
                                   item.ADMIN_AUTONOMOUS_BODY1,
                                    item.MAST_STATE_NAME,
                                   URLEncrypt.EncryptParameters1(new string[]{"AutoBodyCode="+item.MAST_STATE_CODE.ToString().Trim()})
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterAdminAutonomousBodyViewModel GetMasterAdminAutonomousBodyViewModel_ByStateCode(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_AUTONOMOUS_BODY masterAdminAutonomousBodyModel = dbContext.ADMIN_AUTONOMOUS_BODY.FirstOrDefault(m => m.MAST_STATE_CODE == stateCode);

                MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel = null;
                if (masterAdminAutonomousBodyModel != null)
                {
                    masterAdminAutonomousBodyViewModel = ClonerAdminAutonomousBodyObject(masterAdminAutonomousBodyModel);
                }

                return masterAdminAutonomousBodyViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterAdminAutonomousBodyViewModel ClonerAdminAutonomousBodyObject(ADMIN_AUTONOMOUS_BODY masterAdminAutonomousBodyModel)
        {
            try
            {
                MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel = new MasterAdminAutonomousBodyViewModel();

                masterAdminAutonomousBodyViewModel.EncryptedStateCode = URLEncrypt.EncryptParameters1(new string[] { "AutoBodyCode =" + masterAdminAutonomousBodyModel.MAST_STATE_CODE.ToString().Trim() });

                masterAdminAutonomousBodyViewModel.MAST_STATE_CODE = masterAdminAutonomousBodyModel.MAST_STATE_CODE;
                masterAdminAutonomousBodyViewModel.ADMIN_AUTONOMOUS_BODY1 = masterAdminAutonomousBodyModel.ADMIN_AUTONOMOUS_BODY1;

                return masterAdminAutonomousBodyViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        #endregion Admin Autonomous Body DAL Defination

        #region MP_Members DAL Defination

        public bool AddMasterMpMember(MasterMpMembersViewModel masterMpMemberViewModel, ref string message)
        {
            try
            {

                dbContext = new PMGSYEntities();
                int mpMemberExist = dbContext.MASTER_MP_MEMBERS.Where(m => m.MAST_LS_TERM == masterMpMemberViewModel.MAST_LS_TERM && m.MAST_MP_CONST_CODE == masterMpMemberViewModel.MAST_MP_CONST_CODE && m.MAST_MEMBER.ToUpper() == masterMpMemberViewModel.MAST_MEMBER.ToUpper()).Count();

                if (dbContext.MASTER_MP_MEMBERS.Where(m => m.MAST_LS_TERM == masterMpMemberViewModel.MAST_LS_TERM && m.MAST_MP_CONST_CODE == masterMpMemberViewModel.MAST_MP_CONST_CODE && m.MAST_MEMBER.ToUpper() == masterMpMemberViewModel.MAST_MEMBER.ToUpper()).Any())
                {
                    message = "MP Member details already exist.";
                    return false;
                }

                MASTER_LOK_SABHA_TERM lokSabhaTermDetails = dbContext.MASTER_LOK_SABHA_TERM.Where(lt => lt.MAST_LS_TERM == masterMpMemberViewModel.MAST_LS_TERM).FirstOrDefault();

                if (lokSabhaTermDetails != null)
                {
                    if (!string.IsNullOrEmpty(masterMpMemberViewModel.MAST_MEMBER_START_DATE) && lokSabhaTermDetails.MAST_LS_START_DATE != null)
                    {


                        if (lokSabhaTermDetails.MAST_LS_START_DATE > ConvertStringToDate(masterMpMemberViewModel.MAST_MEMBER_START_DATE))
                        {
                            message = "MP Member start date must be greater than or equal to selected lok sabha term start date.";
                            return false;
                        }
                    }

                    if (!string.IsNullOrEmpty(masterMpMemberViewModel.MAST_MEMBER_END_DATE) && lokSabhaTermDetails.MAST_LS_END_DATE != null)
                    {

                        if (lokSabhaTermDetails.MAST_LS_END_DATE < ConvertStringToDate(masterMpMemberViewModel.MAST_MEMBER_END_DATE))//commomFunction.GetStringToDateTime(masterMpMemberViewModel.MAST_MEMBER_END_DATE)
                        {
                            message = "MP Member end date must be less than or equal to selected lok sabha term end date.";
                            return false;
                        }
                    }
                }

                bool flagMpMemberAddEdit = true;

                MASTER_MP_MEMBERS masterMpMemberModel = CloneMpMemberModel(masterMpMemberViewModel, flagMpMemberAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.MASTER_MP_MEMBERS.Add(masterMpMemberModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditMasterMpMember(MasterMpMembersViewModel masterMpMemberViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterMpMemberViewModel.EncryptedMpMemberId.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                MpMemberId = Convert.ToInt32(decryptedParameters["MemberCode"].ToString());


                Int32 recordCount = dbContext.MASTER_MP_MEMBERS.Where(m => m.MAST_MEMBER_ID != MpMemberId && m.MAST_LS_TERM == masterMpMemberViewModel.MAST_LS_TERM && m.MAST_MP_CONST_CODE == masterMpMemberViewModel.MAST_MP_CONST_CODE && m.MAST_MEMBER.ToUpper() == masterMpMemberViewModel.MAST_MEMBER.ToUpper()).Count();

                if (recordCount > 0)
                {
                    message = "MP Member details already exist.";
                    return false;
                }


                MASTER_LOK_SABHA_TERM lokSabhaTermDetails = dbContext.MASTER_LOK_SABHA_TERM.Where(lt => lt.MAST_LS_TERM == masterMpMemberViewModel.MAST_LS_TERM).FirstOrDefault();

                if (lokSabhaTermDetails != null)
                {
                    if (!string.IsNullOrEmpty(masterMpMemberViewModel.MAST_MEMBER_START_DATE) && lokSabhaTermDetails.MAST_LS_START_DATE != null)
                    {
                        if (lokSabhaTermDetails.MAST_LS_START_DATE > ConvertStringToDate(masterMpMemberViewModel.MAST_MEMBER_START_DATE))
                        {
                            message = "MP Member start date must be greater than or equal to selected Lok Sabha Term start date.";
                            return false;
                        }
                    }

                    if (!string.IsNullOrEmpty(masterMpMemberViewModel.MAST_MEMBER_END_DATE) && lokSabhaTermDetails.MAST_LS_END_DATE != null)
                    {
                        if (lokSabhaTermDetails.MAST_LS_END_DATE < ConvertStringToDate(masterMpMemberViewModel.MAST_MEMBER_END_DATE))
                        {
                            message = "MP Member end date must be less than or equal to selected Lok Sabha Term end date.";
                            return false;
                        }
                    }
                }

                bool flagMpMemberAddEdit = false;

                masterMpMemberViewModel.MAST_MEMBER_ID = MpMemberId;

                MASTER_MP_MEMBERS masterMpMembersModel = CloneMpMemberModel(masterMpMemberViewModel, flagMpMemberAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterMpMembersModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMpMember(int Term, int ConstCode, int MemberId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_MP_MEMBERS masterMpMemberModel = dbContext.MASTER_MP_MEMBERS.Where(m => m.MAST_LS_TERM == Term && m.MAST_MP_CONST_CODE == ConstCode && m.MAST_MEMBER_ID == MemberId).FirstOrDefault();

                if (masterMpMemberModel == null)
                {
                    return false;
                }

                dbContext.MASTER_MP_MEMBERS.Remove(masterMpMemberModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this MP Member details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMpMember(int termCode, int stateCode, int constituencyCode, string memberName, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int StateCode = stateCode == 0 ? PMGSYSession.Current.StateCode : stateCode;
                memberName = memberName.Replace("*", "");
                memberName = memberName.Replace("%", "");

                var lstMasterMpMemberDetails = (from mpMember in dbContext.MASTER_MP_MEMBERS
                                                    //from lockSabhaTerm in dbContext.MASTER_LOK_SABHA_TERM
                                                    //from contituency in dbContext.MASTER_MP_CONSTITUENCY
                                                join lockSabhaTerm in dbContext.MASTER_LOK_SABHA_TERM
                                                on mpMember.MAST_LS_TERM equals lockSabhaTerm.MAST_LS_TERM
                                                join constituency in dbContext.MASTER_MP_CONSTITUENCY
                                               on mpMember.MAST_MP_CONST_CODE equals constituency.MAST_MP_CONST_CODE
                                                join state in dbContext.MASTER_STATE
                                                on constituency.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                                where (memberName == string.Empty ? "%" : mpMember.MAST_MEMBER.ToUpper()).StartsWith(memberName == string.Empty ? "%" : memberName.ToUpper()) &&
                                                (termCode == 0 ? 1 : lockSabhaTerm.MAST_LS_TERM) == (termCode == 0 ? 1 : termCode)
                                                &&
                                                (constituencyCode == 0 ? 1 : constituency.MAST_MP_CONST_CODE) == (constituencyCode == 0 ? 1 : constituencyCode) &&
                                                (StateCode == 0 ? 1 : constituency.MAST_STATE_CODE) == (StateCode == 0 ? 1 : StateCode)
                                                //where mpMember.MAST_LS_TERM == lockSabhaTerm.MAST_LS_TERM
                                                //  && mpMember.MAST_MP_CONST_CODE == contituency.MAST_MP_CONST_CODE

                                                select new
                                                {
                                                    mpMember.MAST_LS_TERM,
                                                    constituency.MAST_MP_CONST_NAME,
                                                    constituency.MAST_MP_CONST_CODE,
                                                    mpMember.MAST_MEMBER_ID,
                                                    mpMember.MAST_MEMBER,
                                                    mpMember.MAST_MEMBER_PARTY,
                                                    mpMember.MAST_MEMBER_START_DATE,
                                                    mpMember.MAST_MEMBER_END_DATE,
                                                    mpMember.MAST_LOCK_STATUS,
                                                    state.MAST_STATE_NAME
                                                }).ToList();


                totalRecords = lstMasterMpMemberDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_LS_TERM":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_LS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_MP_CONST_CODE":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_MP_CONST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_MEMBER":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_MEMBER_PARTY":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_MEMBER_PARTY).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_MEMBER_START_DATE":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_MEMBER_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_MEMBER_END_DATE":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_MEMBER_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_STATE_NAME":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderBy(x => x.MAST_LS_TERM).ThenBy(x => x.MAST_MP_CONST_NAME).ThenBy(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_LS_TERM":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_LS_TERM).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_MP_CONST_CODE":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_MP_CONST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_MEMBER":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_MEMBER_PARTY":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_MEMBER_PARTY).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_MEMBER_START_DATE":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_MEMBER_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_MEMBER_END_DATE":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_MEMBER_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_STATE_NAME":
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_LS_TERM).ThenBy(x => x.MAST_MP_CONST_NAME).ThenBy(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstMasterMpMemberDetails = lstMasterMpMemberDetails.OrderByDescending(x => x.MAST_LS_TERM).ThenBy(x => x.MAST_MP_CONST_NAME).ThenBy(x => x.MAST_MEMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                }

                return lstMasterMpMemberDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_MEMBER==String.Empty?"NA": item.MAST_MEMBER,
                                    item.MAST_MEMBER_PARTY==String.Empty?"NA":item.MAST_MEMBER_PARTY,
                                    item.MAST_MP_CONST_NAME,
                                    item.MAST_STATE_NAME.ToString(),
                                    item.MAST_LS_TERM.ToString(),
                                    item.MAST_MEMBER_START_DATE==null?"NA": Convert.ToDateTime(item.MAST_MEMBER_START_DATE).ToString("dd/MM/yyyy"),
                                    item.MAST_MEMBER_END_DATE==null?"NA": Convert.ToDateTime(item.MAST_MEMBER_END_DATE).ToString("dd/MM/yyyy"),
                                    item.MAST_LOCK_STATUS=="N"?URLEncrypt.EncryptParameters1(new string[]{"TermCode="+item.MAST_LS_TERM.ToString().Trim(),"ConstCode="+item.MAST_MP_CONST_CODE.ToString().Trim(),"MemberCode="+item.MAST_MEMBER_ID.ToString().Trim()}):string.Empty
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterMpMembersViewModel GetMpMember_ByTerm_ConstCode_MemberId(int Term, int ConstCode, int MemberId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_MP_MEMBERS masterMpMemberModel = dbContext.MASTER_MP_MEMBERS.FirstOrDefault(m => m.MAST_LS_TERM == Term && m.MAST_MP_CONST_CODE == ConstCode && m.MAST_MEMBER_ID == MemberId);


                MasterMpMembersViewModel masterMpMemberViewModel = null;
                if (masterMpMemberModel != null)
                {
                    masterMpMemberViewModel = CloneMpMemberObject(masterMpMemberModel);
                }
                return masterMpMemberViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MASTER_MP_MEMBERS CloneMpMemberModel(MasterMpMembersViewModel masterMpMemberViewModel, bool flagMpMemberAddEdit)
        {
            try
            {
                MASTER_MP_MEMBERS masterMpMemberModel = new MASTER_MP_MEMBERS();

                if (flagMpMemberAddEdit)
                {
                    masterMpMemberModel.MAST_MEMBER_ID = dbContext.MASTER_MP_MEMBERS.Max(cp => (Int32?)cp.MAST_MEMBER_ID) == null ? 1 : (Int32)dbContext.MASTER_MP_MEMBERS.Max(cp => (Int32?)cp.MAST_MEMBER_ID) + 1;
                }
                else
                {
                    masterMpMemberModel.MAST_MEMBER_ID = MpMemberId;
                }
                masterMpMemberModel.MAST_LS_TERM = masterMpMemberViewModel.MAST_LS_TERM;
                masterMpMemberModel.MAST_MP_CONST_CODE = masterMpMemberViewModel.MAST_MP_CONST_CODE;
                masterMpMemberModel.MAST_MEMBER = masterMpMemberViewModel.MAST_MEMBER;
                masterMpMemberModel.MAST_MEMBER_PARTY = masterMpMemberViewModel.MAST_MEMBER_PARTY;
                masterMpMemberModel.MAST_LOCK_STATUS = "N";

                masterMpMemberModel.MAST_MEMBER_START_DATE = ConvertStringToDate(masterMpMemberViewModel.MAST_MEMBER_START_DATE);
                masterMpMemberModel.MAST_MEMBER_END_DATE = ConvertStringToDate(masterMpMemberViewModel.MAST_MEMBER_END_DATE);

                return masterMpMemberModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public MasterMpMembersViewModel CloneMpMemberObject(MASTER_MP_MEMBERS masterMpMemberModel)
        {
            try
            {
                MasterMpMembersViewModel masterMpMembersViewModel = new MasterMpMembersViewModel();

                masterMpMembersViewModel.EncryptedMpMemberId = URLEncrypt.EncryptParameters1(new string[] { "MemberCode =" + masterMpMemberModel.MAST_MEMBER_ID.ToString().Trim() });

                masterMpMembersViewModel.MAST_LS_TERM = masterMpMemberModel.MAST_LS_TERM;
                masterMpMembersViewModel.MAST_MP_CONST_CODE = masterMpMemberModel.MAST_MP_CONST_CODE;
                masterMpMembersViewModel.MAST_MEMBER = masterMpMemberModel.MAST_MEMBER;
                masterMpMembersViewModel.MAST_MEMBER_PARTY = masterMpMemberModel.MAST_MEMBER_PARTY;

                masterMpMembersViewModel.MAST_MEMBER_START_DATE = masterMpMemberModel.MAST_MEMBER_START_DATE == null ? String.Empty : ConvertDateToString(masterMpMemberModel.MAST_MEMBER_START_DATE);

                masterMpMembersViewModel.MAST_MEMBER_END_DATE = masterMpMemberModel.MAST_MEMBER_END_DATE == null ? String.Empty : ConvertDateToString(masterMpMemberModel.MAST_MEMBER_END_DATE);

                return masterMpMembersViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public List<MASTER_LOK_SABHA_TERM> GetAllLockSabhaTerms()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_LOK_SABHA_TERM> list = dbContext.MASTER_LOK_SABHA_TERM.ToList<MASTER_LOK_SABHA_TERM>();
                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public List<MASTER_MP_CONSTITUENCY> GetAllMpConstituencyNames()
        {
            try
            {
                int stateCode = PMGSYSession.Current.StateCode;

                dbContext = new PMGSYEntities();
                //List<MASTER_MP_CONSTITUENCY> list = dbContext.MASTER_MP_CONSTITUENCY.ToList<MASTER_MP_CONSTITUENCY>();

                List<MASTER_MP_CONSTITUENCY> list = (from MP in dbContext.MASTER_MP_CONSTITUENCY
                                                     where
                                                     (stateCode == 0 ? 1 : MP.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode)
                                                     select MP).ToList<MASTER_MP_CONSTITUENCY>();

                // list.Insert(0, new MASTER_MP_CONSTITUENCY() { MAST_MP_CONST_CODE = 0, MAST_MP_CONST_NAME = "--Select--" });

                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public List<MASTER_MP_MEMBERS> GetAllMemberNamesByTermCode(int termCode, bool isSearch)
        {

            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_MP_MEMBERS> nameList = null;
                if (termCode == 0)
                {
                    nameList = dbContext.MASTER_MP_MEMBERS.OrderBy(m => m.MAST_MEMBER).ToList<MASTER_MP_MEMBERS>();
                }
                else
                {
                    nameList = dbContext.MASTER_MP_MEMBERS.Where(m => m.MAST_LS_TERM == termCode).OrderBy(m => m.MAST_MEMBER).ToList<MASTER_MP_MEMBERS>();
                }

                if (!isSearch)
                {
                    nameList.Insert(0, new MASTER_MP_MEMBERS() { MAST_LS_TERM = 0, MAST_MEMBER = "--Select--" });
                }
                return nameList;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }


        }


        #endregion MP_Members DAL Defination

        #region Quality Monitors DAL Defination

        //public bool AddMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message)
        //{
        //    try
        //    {

        //        dbContext = new PMGSYEntities();
        //        int recordCount = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.MAST_STATE_CODE == masterQualityMonitorViewModel.MAST_STATE_CODE
        //                          && qm.ADMIN_QM_FNAME.ToUpper() == masterQualityMonitorViewModel.ADMIN_QM_FNAME.ToUpper() && (qm.ADMIN_QM_MNAME == null ? string.Empty : qm.ADMIN_QM_MNAME.ToUpper()) == masterQualityMonitorViewModel.ADMIN_QM_MNAME.ToUpper() && (qm.ADMIN_QM_LNAME == null ? string.Empty : qm.ADMIN_QM_LNAME.ToUpper()) == masterQualityMonitorViewModel.ADMIN_QM_LNAME.ToUpper() && masterQualityMonitorViewModel.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN).Count();


        //        if (recordCount > 0)
        //        {
        //            message = "Quality Monitor details for selected state are already exist.";
        //            return false;
        //        }

        //        bool flagQualityMonitorAddEdit = true;

        //        ADMIN_QUALITY_MONITORS qualityMonitorsModel = CloneQualityMonitorModel(new ADMIN_QUALITY_MONITORS(), masterQualityMonitorViewModel, flagQualityMonitorAddEdit);
        //        dbContext = new PMGSYEntities();
        //        dbContext.ADMIN_QUALITY_MONITORS.Add(qualityMonitorsModel);
        //        dbContext.SaveChanges();
        //        return true;
        //    }

        //    catch (OptimisticConcurrencyException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return false;
        //    }
        //    catch (UpdateException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return false;
        //    }
        //    catch (Exception ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

        //        return false;
        //    }
        //    finally
        //    {
        //        if (dbContext != null)
        //        {
        //            dbContext.Dispose();
        //        }
        //    }
        //}

        public bool AddMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message, ref int AdminQMCode)
        {
            dbContext = new PMGSYEntities();

            using (TransactionScope objScope = new TransactionScope())
            {
                try
                {
                    //dbContext = new PMGSYEntities();
                    AdminQMCode = 0;
                    if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                    {
                        List<ADMIN_QUALITY_MONITORS> deEmpPanNo = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "N").ToList();
                        if (!(deEmpPanNo == null || deEmpPanNo.Count == 0)) //Registration of De-empaneled monitor will not be available to SQC/CQC-admin
                        {
                            message = "The monitor details cannot be added as PAN number used belongs to De-empaneled Monitor.";//added conditon for administrative reason on 22-12-2022
                            return false;
                        }
                    }

                    ADMIN_QUALITY_MONITORS empPanNo = new ADMIN_QUALITY_MONITORS();
                    empPanNo = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "Y").FirstOrDefault();
                    if (!(empPanNo == null))  //If monitor with same pan number is already empanelled then Details with same PAN number cannot be added.  //added on 21-12-2022
                    {
                        message = "The monitor details cannot be added as monitor with same PAN details is already empaneled";
                        return false;
                    }

                    List<ADMIN_QUALITY_MONITORS> demMontList = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "N" && (qm.ADMIN_QM_EMPANELLED_REASON == "P" || qm.ADMIN_QM_EMPANELLED_REASON == "AR")).ToList(); //If monitor is de-empaneled due to Performance (or Administrative Reasons --added on 15-12-2022)then new monitor with same PAN can't be added again (Added by Shreyas on 18-11-2022)
                    if (!(demMontList == null || demMontList.Count == 0))
                    {
                        //message = "You cannot update this Quality Monitor Details, because PAN number used belongs to De-empanelled monitor due to Performance";
                        message = "The monitor details cannot be added as de-empanelled due to performance or administrative reason.";  //added conditon for administrative reason on 21-12-2022
                        return false;
                    }

                    //Commented by Anand Singh on May 14, 2015
                    /*
                    dbContext = new PMGSYEntities();
                    int recordCount = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.MAST_STATE_CODE == masterQualityMonitorViewModel.MAST_STATE_CODE
                                      && qm.ADMIN_QM_FNAME.ToUpper() == masterQualityMonitorViewModel.ADMIN_QM_FNAME.ToUpper() && (qm.ADMIN_QM_MNAME == null ? string.Empty : qm.ADMIN_QM_MNAME.ToUpper()) == masterQualityMonitorViewModel.ADMIN_QM_MNAME.ToUpper() && (qm.ADMIN_QM_LNAME == null ? string.Empty : qm.ADMIN_QM_LNAME.ToUpper()) == masterQualityMonitorViewModel.ADMIN_QM_LNAME.ToUpper() && masterQualityMonitorViewModel.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN).Count();
                    */
                    dbContext = new PMGSYEntities();
                    // int recordCount = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_TYPE == masterQualityMonitorViewModel.ADMIN_QM_TYPE
                    //                  && (qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN || qm.ADMIN_QM_AADHAR_NO == masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO) && (qm.ADMIN_QM_EMPANELLED == "Y")).Count();
                    // qm.ADMIN_QM_EMPANELLED=="Y" Added By Sachin Solanki 12/02/2020

                    //Edited by Shreyas 
                    var recordCount1 = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_TYPE == masterQualityMonitorViewModel.ADMIN_QM_TYPE
                                      && ((qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && (qm.ADMIN_QM_PAN != null && qm.ADMIN_QM_PAN != "")) || (qm.ADMIN_QM_AADHAR_NO == masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO && (qm.ADMIN_QM_AADHAR_NO != null && qm.ADMIN_QM_AADHAR_NO != ""))) && (qm.ADMIN_QM_EMPANELLED == "Y")).ToList();

                    int recordCount = recordCount1.Count();
                    //var existingModel = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_TYPE == masterQualityMonitorViewModel.ADMIN_QM_TYPE
                    //            && (qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN || qm.ADMIN_QM_AADHAR_NO == masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO)).FirstOrDefault(); ;
                    var existingModel = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_TYPE == masterQualityMonitorViewModel.ADMIN_QM_TYPE
                               && ((qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && (qm.ADMIN_QM_PAN != null || qm.ADMIN_QM_PAN != "")) || (qm.ADMIN_QM_AADHAR_NO == masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO && (qm.ADMIN_QM_AADHAR_NO != null || qm.ADMIN_QM_AADHAR_NO != "")))).FirstOrDefault(); ;


                    // modified by pradip
                    if (recordCount > 0 && existingModel.ADMIN_QM_EMPANELLED != "B")
                    {
                        message = "Quality Monitor details for selected state are already exist.";
                        return false;
                    }

                    if (recordCount > 0 && existingModel.ADMIN_QM_EMPANELLED == "B")
                    {
                        message = "You cannot add this Quality Monitor Details, because PAN number used belongs to Blacklisted Monitor.";
                        return false;
                    }



                    ADMIN_QUALITY_MONITORS qualityMonitorsModel = CloneQualityMonitorModel(new ADMIN_QUALITY_MONITORS(), masterQualityMonitorViewModel, true);
                    dbContext = new PMGSYEntities();
                    dbContext.ADMIN_QUALITY_MONITORS.Add(qualityMonitorsModel);

                    var fileName = dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) == null ? "1" : (dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) + 1).ToString() + Path.GetExtension(masterQualityMonitorViewModel.FILE_NAME).ToString();
                    string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_PAN_FILE"];

                    masterQualityMonitorViewModel.File.SaveAs(Path.Combine(PhysicalPath, fileName));


                    dbContext.SaveChanges();
                    AdminQMCode = qualityMonitorsModel.ADMIN_QM_CODE;  //---Added by Shreyas on 06-01-2023
                    QUALITY_QM_CADRE_STATE cadreStateToAdd;
                    dbContext = new PMGSYEntities();
                    if (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE == "A")
                    {
                        foreach (int stateCode in masterQualityMonitorViewModel.MAST_CADRE_STATE_CODE)
                        {
                            cadreStateToAdd = new QUALITY_QM_CADRE_STATE
                            {
                                CADRE_ID = dbContext.QUALITY_QM_CADRE_STATE.Max(s => (Int32?)s.CADRE_ID) == null ? 1 : dbContext.QUALITY_QM_CADRE_STATE.Max(s => s.CADRE_ID) + 1,
                                MAST_STATE_CODE = stateCode,
                                ADMIN_QM_CODE = qualityMonitorsModel.ADMIN_QM_CODE
                            };
                            dbContext.QUALITY_QM_CADRE_STATE.Add(cadreStateToAdd);
                            dbContext.SaveChanges();

                        }
                    }
                    else if (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE == "S")
                    {
                        cadreStateToAdd = new QUALITY_QM_CADRE_STATE
                        {
                            CADRE_ID = dbContext.QUALITY_QM_CADRE_STATE.Max(s => (Int32?)s.CADRE_ID) == null ? 1 : dbContext.QUALITY_QM_CADRE_STATE.Max(s => s.CADRE_ID) + 1,
                            MAST_STATE_CODE = (int)masterQualityMonitorViewModel.MAST_STATE_CODE,
                            ADMIN_QM_CODE = qualityMonitorsModel.ADMIN_QM_CODE
                        };
                        dbContext.QUALITY_QM_CADRE_STATE.Add(cadreStateToAdd);
                        dbContext.SaveChanges();
                    }




                    return true;
                }

                catch (OptimisticConcurrencyException ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                catch (UpdateException ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                    objScope.Complete();
                }


            }
        }//By Aanand



        //public bool EditMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message)
        //{
        //    try
        //    {
        //        dbContext = new PMGSYEntities();
        //        encryptedParameters = masterQualityMonitorViewModel.EncryptedQmCode.Split('/');

        //        if (!(encryptedParameters.Length == 3))
        //        {
        //            return false;
        //        }

        //        decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
        //        QualityMonitorCode = Convert.ToInt32(decryptedParameters["QmCode"].ToString());


        //        int recordCount = dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE != QualityMonitorCode && m.MAST_STATE_CODE == masterQualityMonitorViewModel.MAST_STATE_CODE &&
        //                          m.ADMIN_QM_FNAME.ToUpper() == masterQualityMonitorViewModel.ADMIN_QM_FNAME.ToUpper() && (m.ADMIN_QM_MNAME == null ? string.Empty : m.ADMIN_QM_MNAME.ToUpper()) == masterQualityMonitorViewModel.ADMIN_QM_MNAME.ToUpper() && (m.ADMIN_QM_LNAME == null ? string.Empty : m.ADMIN_QM_LNAME.ToUpper()) == masterQualityMonitorViewModel.ADMIN_QM_LNAME.ToUpper()
        //                          && m.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN
        //                          ).Count();

        //        if (recordCount > 0)
        //        {
        //            message = "Quality Monitor details for selected state are already exist.";
        //            return false;
        //        }


        //        ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_CODE == QualityMonitorCode).FirstOrDefault();

        //        if (qualityMonitorModel == null)
        //        {
        //            return false;
        //        }

        //        qualityMonitorModel.ADMIN_QM_FNAME = masterQualityMonitorViewModel.ADMIN_QM_FNAME;
        //        qualityMonitorModel.ADMIN_QM_MNAME = masterQualityMonitorViewModel.ADMIN_QM_MNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MNAME;
        //        qualityMonitorModel.ADMIN_QM_LNAME = masterQualityMonitorViewModel.ADMIN_QM_LNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_LNAME;

        //        qualityMonitorModel.ADMIN_QM_DESG = (int)masterQualityMonitorViewModel.ADMIN_QM_DESG;//masterQualityMonitorViewModel.ADMIN_QM_DESG == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_DESG;


        //        qualityMonitorModel.ADMIN_QM_ADDRESS1 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1;
        //        qualityMonitorModel.ADMIN_QM_ADDRESS2 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2;

        //        qualityMonitorModel.MAST_DISTRICT_CODE = masterQualityMonitorViewModel.MAST_DISTRICT_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_DISTRICT_CODE
        //            ;
        //        qualityMonitorModel.MAST_STATE_CODE_ADDR = masterQualityMonitorViewModel.MAST_STATE_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_STATE_CODE;

        //        qualityMonitorModel.ADMIN_QM_PIN = masterQualityMonitorViewModel.ADMIN_QM_PIN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PIN;
        //        qualityMonitorModel.ADMIN_QM_STD1 = masterQualityMonitorViewModel.ADMIN_QM_STD1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD1;
        //        qualityMonitorModel.ADMIN_QM_STD2 = masterQualityMonitorViewModel.ADMIN_QM_STD2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD2;
        //        qualityMonitorModel.ADMIN_QM_PHONE1 = masterQualityMonitorViewModel.ADMIN_QM_PHONE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE1;
        //        qualityMonitorModel.ADMIN_QM_PHONE2 = masterQualityMonitorViewModel.ADMIN_QM_PHONE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE2;
        //        qualityMonitorModel.ADMIN_QM_FAX = masterQualityMonitorViewModel.ADMIN_QM_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_FAX;
        //        qualityMonitorModel.ADMIN_QM_STD_FAX = masterQualityMonitorViewModel.ADMIN_QM_STD_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD_FAX;
        //        qualityMonitorModel.ADMIN_QM_MOBILE1 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE1;
        //        qualityMonitorModel.ADMIN_QM_MOBILE2 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE2;
        //        qualityMonitorModel.ADMIN_QM_EMAIL = masterQualityMonitorViewModel.ADMIN_QM_EMAIL == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_EMAIL;
        //        qualityMonitorModel.ADMIN_QM_PAN = masterQualityMonitorViewModel.ADMIN_QM_PAN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PAN;
        //        qualityMonitorModel.ADMIN_QM_EMPANELLED = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED;
        //        qualityMonitorModel.ADMIN_QM_EMPANELLED_YEAR = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR;
        //        //qualityMonitorModel.ADMIN_QM_IMAGE = masterQualityMonitorViewModel.ADMIN_QM_IMAGE == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_IMAGE;
        //        qualityMonitorModel.ADMIN_QM_DOCPATH = masterQualityMonitorViewModel.ADMIN_QM_DOCPATH == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_DOCPATH;
        //        qualityMonitorModel.ADMIN_QM_REMARKS = masterQualityMonitorViewModel.ADMIN_QM_REMARKS == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_REMARKS;
        //        qualityMonitorModel.ADMIN_QM_AADHAR_NO = masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO;
        //        var userId = dbContext.ADMIN_QUALITY_MONITORS.Where(c => c.ADMIN_QM_CODE == QualityMonitorCode).Select(c => c.ADMIN_USER_ID).FirstOrDefault();
        //        if (userId != null && userId > 0)
        //        {
        //            UM_User_Master userMaster = dbContext.UM_User_Master.Find(userId);

        //            if (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED.Equals("N") && userMaster.IsActive == true)
        //            {
        //                userMaster.IsActive = false;
        //                dbContext.Entry(userMaster).State = System.Data.Entity.EntityState.Modified;
        //                dbContext.SaveChanges();
        //            }
        //            else if (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED.Equals("Y") && userMaster.IsActive == false)
        //            {
        //                userMaster.IsActive = true;
        //                dbContext.Entry(userMaster).State = System.Data.Entity.EntityState.Modified;
        //                dbContext.SaveChanges();
        //            }

        //            //reset IMEI
        //            var imeiDetails = dbContext.QUALITY_MOB_IMEI_NO.Where(m => m.UserId == userId).FirstOrDefault();
        //            if (imeiDetails != null && !(imeiDetails.ImeiNo.Equals(string.Empty)))
        //            {
        //                imeiDetails.ImeiNo = string.Empty;
        //                dbContext.Entry(imeiDetails).State = System.Data.Entity.EntityState.Modified;
        //                dbContext.SaveChanges();
        //            }
        //        }

        //        //added by abhishek kamble 27-nov-2013
        //        qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
        //        qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

        //        dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
        //        dbContext.SaveChanges();
        //        return true;
        //    }
        //    catch (OptimisticConcurrencyException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return false;
        //    }
        //    catch (UpdateException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return false;
        //    }
        //    catch (Exception ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return false;
        //    }
        //    finally
        //    {
        //        if (dbContext != null)
        //        {
        //            dbContext.Dispose();
        //        }
        //    }
        //}




        public bool EditMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message)
        {
            try
            {
                using (TransactionScope objScope = new TransactionScope())
                {
                    CommonFunctions objCommonFunc = new CommonFunctions();
                    dbContext = new PMGSYEntities();

                    ADMIN_QUALITY_MONITORS empPanNo = new ADMIN_QUALITY_MONITORS();
                    //empPanNo = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "Y" && masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "Y" && qm.ADMIN_QM_CODE!=masterQualityMonitorViewModel.ADMIN_QM_CODE).Any()? dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "Y" && masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "Y" && qm.ADMIN_QM_CODE != masterQualityMonitorViewModel.ADMIN_QM_CODE).FirstOrDefault() : null ;




                    encryptedParameters = masterQualityMonitorViewModel.EncryptedQmCode.Split('/');

                    if (!(encryptedParameters.Length == 3))
                    {
                        return false;
                    }

                    decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    QualityMonitorCode = Convert.ToInt32(decryptedParameters["QmCode"].ToString());


                    empPanNo = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "Y" && masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "Y" && qm.ADMIN_QM_CODE != QualityMonitorCode).FirstOrDefault();
                    if (!(empPanNo == null))  //If monitor with same pan number is already empanelled then Details with same PAN number cannot be updated.  //added on 21-12-2022
                    {
                        message = "The monitor details cannot be updated as monitor with same PAN details is already empaneled";
                        return false;
                    }

                    //int recordCount = dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE != QualityMonitorCode && m.ADMIN_QM_TYPE == masterQualityMonitorViewModel.ADMIN_QM_TYPE
                    //                  && (m.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN || m.ADMIN_QM_AADHAR_NO == masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO)).Count();

                    //if (recordCount > 0)
                    //{
                    //    message = "Quality Monitor details for selected state are already exist.";
                    //    return false;
                    //}

                    List<ADMIN_QUALITY_MONITORS> qualityMonitorModel2 = new List<ADMIN_QUALITY_MONITORS>();

                    ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_CODE == QualityMonitorCode).FirstOrDefault();
                    //if (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "N" && masterQualityMonitorViewModel.empanelledRemove == "P")
                    //{ 
                    //      qualityMonitorModel2 = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN== masterQualityMonitorViewModel.ADMIN_QM_PAN &&  qm.ADMIN_QM_CODE != QualityMonitorCode).FirstOrDefault();
                    //}

                    ADMIN_QUALITY_MONITORS qualityMonitorDemp = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_CODE == QualityMonitorCode && qm.ADMIN_QM_EMPANELLED == "N" && (qm.ADMIN_QM_EMPANELLED_REASON == "P" || qm.ADMIN_QM_EMPANELLED_REASON == "AR")).FirstOrDefault();
                    if (qualityMonitorDemp != null)
                    {
                        message = "The monitor details cannot be updated as de-empanelled due to performance or administrative reason.";  //added conditon for administrative reason on 14-12-2022
                        return false;
                    }


                    List<ADMIN_QUALITY_MONITORS> demMontList2 = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "N" && (qm.ADMIN_QM_EMPANELLED_REASON == "P" || qm.ADMIN_QM_EMPANELLED_REASON == "AR") && (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "Y" || (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "N" && (masterQualityMonitorViewModel.empanelledRemove != "P" || masterQualityMonitorViewModel.empanelledRemove != "AR")))).ToList(); //If user is de-empaneled due to Performance (OR Administrative reason --added on 14-12-2022-Shreyas) then any user with same PAN can't be empaneled again (Added by Shreyas on 11-11-2022)
                    if (!(demMontList2 == null || demMontList2.Count == 0))
                    {

                        message = "The monitor details cannot be updated as de-empanelled due to performance or administrative reason.";//added conditon for administrative reason on 14-12-2022
                        return false;
                    }


                    List<ADMIN_QUALITY_MONITORS> demMontList = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_EMPANELLED == "N" && (qm.ADMIN_QM_EMPANELLED_REASON == "P" || qm.ADMIN_QM_EMPANELLED_REASON == "AR")).ToList(); //If user is de-empaneled due to Performance (OR Administrative reason --added on 14-12-2022-Shreyas) then any user with same PAN can't be empaneled again (Added by Shreyas on 11-11-2022)
                    if (!(demMontList == null || demMontList.Count == 0))
                    {
                        //message = "You cannot update this Quality Monitor Details, because PAN number used belongs to De-empanelled monitor due to Performance";
                        message = "The monitor details cannot be updated as de-empanelled due to performance or administrative reason.";//added conditon for administrative reason on 14-12-2022
                        return false;
                    }


                    if (qualityMonitorModel == null)
                    {
                        return false;
                    }

                    // Added By pradip start -->

                    bool status = dbContext.ADMIN_QUALITY_MONITORS.Any(m => m.ADMIN_QM_PAN.ToUpper() == masterQualityMonitorViewModel.ADMIN_QM_PAN.ToUpper() && m.ADMIN_QM_EMPANELLED == "B");

                    if (status)
                    {
                        message = "You cannot update this Quality Monitor Details, because PAN number used belongs to Blacklisted Monitor";
                        return false;
                    }


                    masterQualityMonitorViewModel.MAST_STATE_CODE = masterQualityMonitorViewModel.ADMIN_QM_TYPE.Equals("S") ? masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR : (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE.Equals("A") ? masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR : (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE.Equals("C") ? masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR : masterQualityMonitorViewModel.MAST_STATE_CODE));

                    qualityMonitorModel.ADMIN_QM_FNAME = masterQualityMonitorViewModel.ADMIN_QM_FNAME;
                    qualityMonitorModel.ADMIN_QM_MNAME = masterQualityMonitorViewModel.ADMIN_QM_MNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MNAME;
                    qualityMonitorModel.ADMIN_QM_LNAME = masterQualityMonitorViewModel.ADMIN_QM_LNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_LNAME;

                    qualityMonitorModel.ADMIN_QM_DESG = (int)masterQualityMonitorViewModel.ADMIN_QM_DESG;//masterQualityMonitorViewModel.ADMIN_QM_DESG == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_DESG;


                    qualityMonitorModel.ADMIN_QM_ADDRESS1 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1;
                    qualityMonitorModel.ADMIN_QM_ADDRESS2 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2;

                    qualityMonitorModel.MAST_DISTRICT_CODE = masterQualityMonitorViewModel.MAST_DISTRICT_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_DISTRICT_CODE;
                    qualityMonitorModel.MAST_STATE_CODE = masterQualityMonitorViewModel.MAST_STATE_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_STATE_CODE;
                    qualityMonitorModel.MAST_STATE_CODE_ADDR = masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR == 0 ? null : masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR;

                    qualityMonitorModel.ADMIN_QM_PIN = masterQualityMonitorViewModel.ADMIN_QM_PIN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PIN;
                    qualityMonitorModel.ADMIN_QM_STD1 = masterQualityMonitorViewModel.ADMIN_QM_STD1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD1;
                    qualityMonitorModel.ADMIN_QM_STD2 = masterQualityMonitorViewModel.ADMIN_QM_STD2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD2;
                    qualityMonitorModel.ADMIN_QM_PHONE1 = masterQualityMonitorViewModel.ADMIN_QM_PHONE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE1;
                    qualityMonitorModel.ADMIN_QM_PHONE2 = masterQualityMonitorViewModel.ADMIN_QM_PHONE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE2;
                    qualityMonitorModel.ADMIN_QM_FAX = masterQualityMonitorViewModel.ADMIN_QM_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_FAX;
                    qualityMonitorModel.ADMIN_QM_STD_FAX = masterQualityMonitorViewModel.ADMIN_QM_STD_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD_FAX;
                    qualityMonitorModel.ADMIN_QM_MOBILE1 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE1;
                    qualityMonitorModel.ADMIN_QM_MOBILE2 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE2;
                    qualityMonitorModel.ADMIN_QM_EMAIL = masterQualityMonitorViewModel.ADMIN_QM_EMAIL == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_EMAIL;
                    qualityMonitorModel.ADMIN_QM_PAN = masterQualityMonitorViewModel.ADMIN_QM_PAN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PAN;
                    qualityMonitorModel.ADMIN_QM_EMPANELLED = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED;
                    qualityMonitorModel.ADMIN_QM_EMPANELLED_YEAR = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR;
                    //qualityMonitorModel.ADMIN_QM_IMAGE = masterQualityMonitorViewModel.ADMIN_QM_IMAGE == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_IMAGE;
                    qualityMonitorModel.ADMIN_QM_DOCPATH = masterQualityMonitorViewModel.ADMIN_QM_DOCPATH == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_DOCPATH;
                    qualityMonitorModel.ADMIN_QM_REMARKS = masterQualityMonitorViewModel.ADMIN_QM_REMARKS == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_REMARKS;
                    qualityMonitorModel.ADMIN_QM_SERVICE_TYPE = masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE;
                    qualityMonitorModel.ADMIN_QM_BIRTH_DATE = string.IsNullOrEmpty(masterQualityMonitorViewModel.ADMIN_QM_BIRTH_DATE) ? null : (DateTime?)objCommonFunc.GetStringToDateTime(masterQualityMonitorViewModel.ADMIN_QM_BIRTH_DATE);
                    qualityMonitorModel.ADMIN_QM_AADHAR_NO = masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO;

                    qualityMonitorModel.ADMIN_QM_EMPANELLED_MONTH = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_MONTH;
                    qualityMonitorModel.ADMIN_QM_SERVICE_TYPE = masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE.Equals("0") ? "D" : masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE;
                    //qualityMonitorModel.ADMIN_QM_BIRTH_DATE = objCommonFunc.GetStringToDateTime(masterQualityMonitorViewModel.ADMIN_QM_BIRTH_DATE);
                    //qualityMonitorModel.MAST_STATE_CODE = masterQualityMonitorViewModel.MAST_STATE_CODE;

                    //added by abhinav pathak on 22-08-2019
                    qualityMonitorModel.ADMIN_QM_DEEMPANEL_REMARKS = masterQualityMonitorViewModel.DeEmpanelledRemark;

                    qualityMonitorModel.ADMIN_QM_EMPANELLED_REASON = masterQualityMonitorViewModel.empanelledRemove;

                    qualityMonitorModel.ADMIN_QM_DEMPANELLED_DATE = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "N" ? ((DateTime?)objCommonFunc.GetStringToDateTime(masterQualityMonitorViewModel.ADMIN_QM_DEMPANELLED_DATE)) : null;  // Addded on 23-09-2022

                    qualityMonitorModel.ADMIN_QM_PAN_FILE = masterQualityMonitorViewModel.FILE_NAME == "" ? null : QualityMonitorCode.ToString() + Path.GetExtension(masterQualityMonitorViewModel.FILE_NAME).ToString();  // Added by Shreyas

                    var userId = dbContext.ADMIN_QUALITY_MONITORS.Where(c => c.ADMIN_QM_CODE == QualityMonitorCode).Select(c => c.ADMIN_USER_ID).FirstOrDefault();
                    if (userId != null && userId > 0)
                    {
                        UM_User_Master userMaster = dbContext.UM_User_Master.Find(userId);

                        if (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED.Equals("N") && userMaster.IsActive == true)
                        {
                            userMaster.IsActive = false;
                            dbContext.Entry(userMaster).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                        else if (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED.Equals("Y") && userMaster.IsActive == false)
                        {
                            userMaster.IsActive = true;
                            dbContext.Entry(userMaster).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }

                        //reset IMEI
                        var imeiDetails = dbContext.QUALITY_MOB_IMEI_NO.Where(m => m.UserId == userId).FirstOrDefault();
                        if (imeiDetails != null && !(imeiDetails.ImeiNo.Equals(string.Empty)))
                        {
                            imeiDetails.ImeiNo = string.Empty;
                            dbContext.Entry(imeiDetails).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                    }

                    //added by abhishek kamble 27-nov-2013
                    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    if (qualityMonitorModel.ADMIN_QM_TYPE == "I")
                    {
                        QUALITY_QM_CADRE_STATE cadreStateToAdd;

                        dbContext = new PMGSYEntities();

                        foreach (QUALITY_QM_CADRE_STATE cadreStateToDelete in dbContext.QUALITY_QM_CADRE_STATE.Where(s => s.ADMIN_QM_CODE == qualityMonitorModel.ADMIN_QM_CODE).ToList())
                        {
                            dbContext.QUALITY_QM_CADRE_STATE.Remove(cadreStateToDelete);
                            dbContext.SaveChanges();
                        }
                        if (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE == "A")
                        {
                            foreach (int stateCode in masterQualityMonitorViewModel.MAST_CADRE_STATE_CODE)
                            {
                                cadreStateToAdd = new QUALITY_QM_CADRE_STATE
                                {
                                    CADRE_ID = dbContext.QUALITY_QM_CADRE_STATE.Max(s => (Int32?)s.CADRE_ID) == null ? 1 : dbContext.QUALITY_QM_CADRE_STATE.Max(s => s.CADRE_ID) + 1,
                                    MAST_STATE_CODE = stateCode,
                                    ADMIN_QM_CODE = qualityMonitorModel.ADMIN_QM_CODE
                                };

                                dbContext.QUALITY_QM_CADRE_STATE.Add(cadreStateToAdd);
                                dbContext.SaveChanges();
                            }
                        }
                        else if (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE == "S")
                        {
                            cadreStateToAdd = new QUALITY_QM_CADRE_STATE
                            {
                                CADRE_ID = dbContext.QUALITY_QM_CADRE_STATE.Max(s => (Int32?)s.CADRE_ID) == null ? 1 : dbContext.QUALITY_QM_CADRE_STATE.Max(s => s.CADRE_ID) + 1,
                                MAST_STATE_CODE = (int)masterQualityMonitorViewModel.MAST_STATE_CODE,
                                ADMIN_QM_CODE = qualityMonitorModel.ADMIN_QM_CODE
                            };
                            dbContext.QUALITY_QM_CADRE_STATE.Add(cadreStateToAdd);
                            dbContext.SaveChanges();
                        }
                    }

                    if (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "N" && (masterQualityMonitorViewModel.empanelledRemove == "P" || masterQualityMonitorViewModel.empanelledRemove == "AR"))   //To de-empanell same user with other account (NQM/SQM) if deempanelled due to Performance if PAN number matches
                    {
                        qualityMonitorModel2 = dbContext.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_PAN == masterQualityMonitorViewModel.ADMIN_QM_PAN && qm.ADMIN_QM_CODE != QualityMonitorCode && qm.ADMIN_QM_EMPANELLED == "Y").ToList();





                        if (qualityMonitorModel2 != null)
                        {
                            foreach (var item in qualityMonitorModel2)
                            {


                                item.ADMIN_QM_EMPANELLED = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED;
                                item.ADMIN_QM_EMPANELLED_YEAR = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR;
                                item.ADMIN_QM_EMPANELLED_MONTH = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_MONTH;
                                item.ADMIN_QM_DEEMPANEL_REMARKS = masterQualityMonitorViewModel.DeEmpanelledRemark;

                                item.ADMIN_QM_EMPANELLED_REASON = masterQualityMonitorViewModel.empanelledRemove;

                                item.ADMIN_QM_DEMPANELLED_DATE = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED == "N" ? ((DateTime?)objCommonFunc.GetStringToDateTime(masterQualityMonitorViewModel.ADMIN_QM_DEMPANELLED_DATE)) : null;  // Addded on 23-09-2022

                                QualityMonitorCode = item.ADMIN_QM_CODE;
                                var user_Id = dbContext.ADMIN_QUALITY_MONITORS.Where(c => c.ADMIN_QM_CODE == QualityMonitorCode).Select(c => c.ADMIN_USER_ID).FirstOrDefault();
                                if (user_Id != null && userId > 0)
                                {
                                    UM_User_Master userMaster = dbContext.UM_User_Master.Find(user_Id);

                                    if (masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED.Equals("N") && userMaster.IsActive == true)
                                    {
                                        userMaster.IsActive = false;
                                        dbContext.Entry(userMaster).State = System.Data.Entity.EntityState.Modified;
                                        dbContext.SaveChanges();
                                    }

                                    //reset IMEI
                                    var imeiDetails = dbContext.QUALITY_MOB_IMEI_NO.Where(m => m.UserId == user_Id).FirstOrDefault();
                                    if (imeiDetails != null && !(imeiDetails.ImeiNo.Equals(string.Empty)))
                                    {
                                        imeiDetails.ImeiNo = string.Empty;
                                        dbContext.Entry(imeiDetails).State = System.Data.Entity.EntityState.Modified;
                                        dbContext.SaveChanges();
                                    }
                                }
                                dbContext.Entry(item).State = System.Data.Entity.EntityState.Modified;
                                dbContext.SaveChanges();
                            }
                        }
                    }


                    if (masterQualityMonitorViewModel.File != null && masterQualityMonitorViewModel.FILE_NAME != "")
                    {
                        var fileName = qualityMonitorModel.ADMIN_QM_PAN_FILE.ToString();
                        string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_PAN_FILE"];
                        masterQualityMonitorViewModel.File.SaveAs(Path.Combine(PhysicalPath, fileName));

                    }

                    objScope.Complete();
                }
                return true;

            }
            catch (DbEntityValidationException dbEx)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);

                        using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                        {
                            sw.WriteLine("Date :" + DateTime.Now.ToString());
                            sw.WriteLine("Method : " + "Application_Error()");
                            if (dbEx != null)
                                sw.WriteLine("EditMasterQualityMonitor Entity Validation Exception : " + dbEx.StackTrace.ToString());
                            if (dbEx.InnerException != null)
                                sw.WriteLine("EditMasterQualityMonitor Entity Validation innerException : " + dbEx.InnerException.ToString());
                            if (dbEx.InnerException.InnerException != null)
                                sw.WriteLine("EditMasterQualityMonitor Entity Validation innerException innerException : " + dbEx.InnerException.InnerException.ToString());
                            sw.WriteLine("---------------------------------------------------------------------------------------");
                            sw.Close();
                        }
                    }
                }
                //totalRecords = 0;
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                {
                    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    sw.WriteLine("Method : " + "Application_Error()");
                    if (ex != null)
                        sw.WriteLine("EditMasterQualityMonitor Optimistic Concurrency Exception : " + ex.StackTrace.ToString());
                    if (ex.InnerException != null)
                        sw.WriteLine("EditMasterQualityMonitor Optimistic Concurrency innerException : " + ex.InnerException.ToString());
                    if (ex.InnerException.InnerException != null)
                        sw.WriteLine("EditMasterQualityMonitor Optimistic Concurrency innerException innerException : " + ex.InnerException.InnerException.ToString());
                    sw.WriteLine("---------------------------------------------------------------------------------------");
                    sw.Close();
                }

                return false;
            }
            catch (UpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                {
                    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    sw.WriteLine("Method : " + "Application_Error()");
                    if (ex != null)
                        sw.WriteLine("EditMasterQualityMonitor Update Concurrency Exception : " + ex.StackTrace.ToString());
                    if (ex.InnerException != null)
                        sw.WriteLine("EditMasterQualityMonitor Update Concurrency innerException : " + ex.InnerException.ToString());
                    if (ex.InnerException.InnerException != null)
                        sw.WriteLine("EditMasterQualityMonitor Update Concurrency innerException innerException : " + ex.InnerException.InnerException.ToString());
                    sw.WriteLine("---------------------------------------------------------------------------------------");
                    sw.Close();
                }

                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                {
                    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    sw.WriteLine("Method : " + "Application_Error()");
                    if (ex != null)
                        sw.WriteLine("EditMasterQualityMonitor Exception : " + ex.StackTrace.ToString());
                    if (ex.InnerException != null)
                        sw.WriteLine("EditMasterQualityMonitor innerException : " + ex.InnerException.ToString());
                    if (ex.InnerException.InnerException != null)
                        sw.WriteLine("EditMasterQualityMonitor Update innerException : " + ex.InnerException.InnerException.ToString());
                    sw.WriteLine("---------------------------------------------------------------------------------------");
                    sw.Close();
                }

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }//By Aanand

        public Boolean DeleteQualityMonitor(int qualityMonitorCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Find(qualityMonitorCode);

                if (qualityMonitorModel == null)
                {
                    return false;
                }

                //If Schedule against monitor are exists then monitor can't be deleted.
                if (dbContext.QUALITY_QM_SCHEDULE.Where(c => c.ADMIN_QM_CODE == qualityMonitorCode).Any())
                {
                    message = "Schedule entries are exists for this monitor, So you can't delete.";
                    return false;
                }

                if (qualityMonitorModel.ADMIN_QM_EMPANELLED.Equals("Y"))
                {
                    qualityMonitorModel.ADMIN_QM_EMPANELLED = "N";
                    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "You can't delete Empanelled monitor. So it is de-empanelled.";
                    return false;
                }

                qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_QUALITY_MONITORS.Remove(qualityMonitorModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error ocurred while deletion of Quality Monitor.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        #region Allow SQC to Edit SQM Details
        //Changed by deendayal on 28/7/2017
        public bool CheckIdentityInformation(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, int QualityMonitorCode)
        {
            try
            {
                PMGSYEntities dbcontext = new PMGSYEntities();

                ADMIN_QUALITY_MONITORS qm = dbcontext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_QM_CODE == QualityMonitorCode).SingleOrDefault();

                bool isMiddleNameNull = qm.ADMIN_QM_MNAME == null;

                bool checkMiddleNameChanged = masterQualityMonitorViewModel.ADMIN_QM_MNAME == null;

                bool empanelled = qm.ADMIN_QM_EMPANELLED.Equals("N");

                bool status = empanelled || !qm.ADMIN_QM_FNAME.Equals(masterQualityMonitorViewModel.ADMIN_QM_FNAME) ||
                   !(isMiddleNameNull ? (masterQualityMonitorViewModel.ADMIN_QM_MNAME == null ? true : false) : (masterQualityMonitorViewModel.ADMIN_QM_MNAME.Equals(qm.ADMIN_QM_MNAME) ? true : false)) ||
                   !(String.IsNullOrEmpty(Convert.ToString(qm.ADMIN_QM_LNAME)) ? true : Convert.ToString(qm.ADMIN_QM_LNAME).Equals(masterQualityMonitorViewModel.ADMIN_QM_LNAME)) || //null check added by abhinav on 23-08-2019
                   !qm.ADMIN_QM_BIRTH_DATE.ToString().Split(' ')[0].ToString().Equals(masterQualityMonitorViewModel.ADMIN_QM_BIRTH_DATE) ||
                   !qm.ADMIN_QM_PAN.Equals(masterQualityMonitorViewModel.ADMIN_QM_PAN);

                if (!empanelled)
                {
                    if (!qm.ADMIN_QM_FNAME.Equals(masterQualityMonitorViewModel.ADMIN_QM_FNAME) ||
                        !(isMiddleNameNull ? (masterQualityMonitorViewModel.ADMIN_QM_MNAME == null ? true : false) : (masterQualityMonitorViewModel.ADMIN_QM_MNAME.Equals(qm.ADMIN_QM_MNAME) ? true : false)) ||
                        !(String.IsNullOrEmpty(Convert.ToString(qm.ADMIN_QM_LNAME)) ? true : Convert.ToString(qm.ADMIN_QM_LNAME).Equals(masterQualityMonitorViewModel.ADMIN_QM_LNAME)) || //null check added by abhinav on 23-08-2019 
                        !qm.ADMIN_QM_BIRTH_DATE.ToString().Split(' ')[0].ToString().Equals(masterQualityMonitorViewModel.ADMIN_QM_BIRTH_DATE) ||
                        !qm.ADMIN_QM_PAN.Equals(masterQualityMonitorViewModel.ADMIN_QM_PAN))
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "CheckIdentityInformationDAL()");
                dbContext.Dispose();
                return false;

            }

        }
        #endregion




        //public Array ListQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords)
        //{
        //    try
        //    {
        //        JavaScriptSerializer js = null;
        //        SearchJson test = new SearchJson();
        //        string firstName = string.Empty;
        //        if (filters != null)
        //        {
        //            js = new JavaScriptSerializer();
        //            test = js.Deserialize<SearchJson>(filters);

        //            foreach (rules item in test.rules)
        //            {
        //                switch (item.field)
        //                {
        //                    case "ADMIN_QM_FNAME": firstName = item.data;
        //                        break;
        //                    default:
        //                        break;
        //                }
        //            }
        //        }

        //        qmTypeName = qmTypeName.Replace("%", "");
        //        dbContext = new PMGSYEntities();
        //        var lstQualityMonitorDetails = (from qualityMonitor in dbContext.ADMIN_QUALITY_MONITORS
        //                                        join state in dbContext.MASTER_STATE
        //                                        on qualityMonitor.MAST_STATE_CODE equals state.MAST_STATE_CODE into outerState
        //                                        from state in outerState.DefaultIfEmpty()
        //                                        join district in dbContext.MASTER_DISTRICT
        //                                        on qualityMonitor.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into outerDistrict
        //                                        from district in outerDistrict.DefaultIfEmpty()
        //                                        join designation in dbContext.MASTER_DESIGNATION
        //                                        on qualityMonitor.ADMIN_QM_DESG equals designation.MAST_DESIG_CODE into outerDesignation
        //                                        from designation in outerDesignation.DefaultIfEmpty()
        //                                        where (
        //                                        //((firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper())) &&
        //                                        //((qmTypeName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_TYPE.ToUpper()).StartsWith(qmTypeName == string.Empty ? "%" : qmTypeName.ToUpper()))

        //                                       ( (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper())  ||
        //                                        (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_MNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
        //                                        (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_LNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()))  &&

        //                                        ((qmTypeName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_TYPE.ToUpper()).StartsWith(qmTypeName == string.Empty ? "%" : qmTypeName.ToUpper()))

        //                                        &&
        //                                        ((stateCode == 0 ? 1 : state.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode))
        //                                        &&
        //                                        ((districtCode == 0 ? 1 : district.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode))
        //                                        &&
        //                                        (qualityMonitor.ADMIN_QM_EMPANELLED == isEmpanelled)
        //                                        )
        //                                        select new
        //                                        {
        //                                            state.MAST_STATE_NAME,
        //                                            district.MAST_DISTRICT_NAME,
        //                                            designation.MAST_DESIG_NAME,
        //                                            qualityMonitor.ADMIN_QM_CODE,
        //                                            qualityMonitor.ADMIN_QM_FNAME,
        //                                            qualityMonitor.ADMIN_QM_MNAME,
        //                                            qualityMonitor.ADMIN_QM_LNAME,
        //                                            qualityMonitor.ADMIN_QM_ADDRESS1,
        //                                            qualityMonitor.ADMIN_QM_ADDRESS2,
        //                                            qualityMonitor.ADMIN_QM_PIN,
        //                                            qualityMonitor.ADMIN_QM_STD1,
        //                                            qualityMonitor.ADMIN_QM_STD2,
        //                                            qualityMonitor.ADMIN_QM_PHONE1,
        //                                            qualityMonitor.ADMIN_QM_PHONE2,
        //                                            qualityMonitor.ADMIN_QM_STD_FAX,
        //                                            qualityMonitor.ADMIN_QM_FAX,
        //                                            qualityMonitor.ADMIN_QM_MOBILE1,
        //                                            qualityMonitor.ADMIN_QM_MOBILE2,
        //                                            qualityMonitor.ADMIN_QM_EMAIL,
        //                                            qualityMonitor.ADMIN_QM_PAN,
        //                                            qualityMonitor.ADMIN_QM_PAN_FILE,
        //                                            qualityMonitor.ADMIN_QM_EMPANELLED,
        //                                            qualityMonitor.ADMIN_QM_EMPANELLED_YEAR,
        //                                            qualityMonitor.ADMIN_QM_REMARKS,
        //                                            qualityMonitor.ADMIN_QM_TYPE,
        //                                            qualityMonitor.ADMIN_QM_IMAGE,
        //                                            qualityMonitor.ADMIN_USER_ID,
        //                                            qualityMonitor.ADMIN_QM_DOCPATH,//Added By Abhishek 27-June-2014
        //                                        }).ToList();
        //        totalRecords = lstQualityMonitorDetails.Count();

        //        if (sidx.Trim() != string.Empty)
        //        {
        //            if (sord.ToString() == "asc")
        //            {
        //                switch (sidx)
        //                {
        //                    case "MAST_STATE_CODE":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "MAST_DISTRICT_CODE":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_FNAME":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "Address":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;


        //                    case "ADMIN_QM_DESG":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                    case "ADMIN_QM_PIN":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_PIN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_PHONE1":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_PHONE2":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;


        //                    case "ADMIN_QM_FAX":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_MOBILE1":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_MOBILE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_MOBILE2":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_MOBILE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                    case "ADMIN_QM_EMAIL":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                    case "PAN":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_EMPANELLED":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_EMPANELLED_YEAR":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "Remarks":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_TYPE":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    default:
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                }
        //            }
        //            else
        //            {

        //                switch (sidx)
        //                {
        //                    case "MAST_STATE_CODE":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "MAST_DISTRICT_CODE":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_FNAME":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "Address":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;


        //                    case "ADMIN_QM_DESG":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                    case "ADMIN_QM_PIN":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_PIN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_PHONE1":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_PHONE2":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;


        //                    case "ADMIN_QM_FAX":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_MOBILE1":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_MOBILE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_MOBILE2":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_MOBILE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                    case "ADMIN_QM_EMAIL":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                    case "PAN":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_EMPANELLED":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_EMPANELLED_YEAR":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "Remarks":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;

        //                    case "ADMIN_QM_TYPE":
        //                        lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
        //                        break;
        //                }
        //            }
        //        }
        //        else
        //        {
        //            lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

        //        }

        //        //Added By Abhishek to show image files
        //        string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
        //        string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD"];


        //        return lstQualityMonitorDetails.Select(item => new
        //        {
        //            cell = new[]{
        //                        item.ADMIN_QM_IMAGE==null?"":Path.Combine(VirtualDirectoryUrl, item.ADMIN_QM_IMAGE.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
        //                        item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME==null?"":item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME,
        //                        item.MAST_STATE_NAME==null?"-": item.MAST_STATE_NAME.Trim(),
        //                        item.MAST_DESIG_NAME==null?"-":item.MAST_DESIG_NAME,
        //                        ((item.ADMIN_QM_ADDRESS1+""+item.ADMIN_QM_ADDRESS2)==string.Empty?"-":"Address:-"+(item.ADMIN_QM_ADDRESS1+" "+item.ADMIN_QM_ADDRESS2+",  "))+(item.ADMIN_QM_STD1==null?string.Empty:"Phone1:-"+item.ADMIN_QM_STD1.ToString().Trim()+"-")+(item.ADMIN_QM_PHONE1==null?"-":(item.ADMIN_QM_PHONE1.ToString().Trim())+",  ")+(item.ADMIN_QM_STD2==null?string.Empty:"Phone2:-"+(item.ADMIN_QM_STD2.ToString().Trim())+"-")+(item.ADMIN_QM_PHONE2==null?string.Empty:(item.ADMIN_QM_PHONE2.ToString().Trim())+",  ")+(item.ADMIN_QM_STD_FAX==null?string.Empty:"Fax:-"+(item.ADMIN_QM_STD_FAX.ToString().Trim())+"-")+(item.ADMIN_QM_FAX==null?string.Empty:(item.ADMIN_QM_FAX.ToString().Trim())+",  ")+(item.ADMIN_QM_MOBILE1==null?string.Empty:"Mobile1:-"+(item.ADMIN_QM_MOBILE1.Trim())+",  ")+(item.ADMIN_QM_MOBILE2==null?string.Empty:"Mobile2:-"+ (item.ADMIN_QM_MOBILE2.ToString().Trim())+",  ")+(item.ADMIN_QM_EMAIL==null?string.Empty:"Email:-"+(item.ADMIN_QM_EMAIL.ToString().Trim()+",  ")+(item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+(item.MAST_DISTRICT_NAME.ToString())+",  ")+(item.ADMIN_QM_PIN==null?string.Empty:"PIN Code:-"+(item.ADMIN_QM_PIN.ToString()))) ,                                                          
        //                        item.ADMIN_QM_PAN==null?"-":(item.ADMIN_QM_PAN.Trim()==string.Empty?"-":item.ADMIN_QM_PAN.Trim()),

        //                        item.ADMIN_QM_PAN_FILE == null 
        //                            ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadQMPAN(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" 
        //                            : "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='UploadQMPAN(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>View</a>" ,

        //                        item.ADMIN_QM_EMPANELLED=="N"?"No":"Yes",
        //                        item.ADMIN_QM_EMPANELLED_YEAR==null?"-":item.ADMIN_QM_EMPANELLED_YEAR.ToString(),                                
        //                        item.ADMIN_QM_REMARKS==null?"-":(item.ADMIN_QM_REMARKS.Trim()==string.Empty?"-":item.ADMIN_QM_REMARKS.Trim()),                                
        //                        item.ADMIN_QM_TYPE==null?"-":(item.ADMIN_QM_TYPE.Trim()==string.Empty?"-":item.ADMIN_QM_TYPE.Trim()=="I"?"NQM":"SQM"),
        //                       // dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?"-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault(),
        //                        dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?                                                                                                                                         
        //                                                                                                                                 item.ADMIN_QM_TYPE.Trim()=="I"?
        //                                                                                                                                 (  dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
        //                                                                                                                                 "-":  dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault())


        //                                                                                                                                : item.ADMIN_QM_TYPE.Trim()=="S"?
        //                                                                                                                                (item.ADMIN_QM_EMPANELLED=="Y"?
        //                                                                                                                                ("<center><table><tr> <td  style='border:none'><span class='ui-icon ui-icon-circle-plus' title='Generate user id' onClick ='AddSQMUserLoginDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "QmCode="+item.ADMIN_QM_CODE.ToString().Trim()}) + "\");'></span></td></table></center>")
        //                                                                                                                                :"<span class='ui-icon ui-icon-locked ui-align-center'></span>")
        //                                                                                                                                :dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
        //                                                                                                                                "-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()

        //                                                                                                                                :dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
        //                                                                                                                                 "-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()
        //                                                                                                                                ,
        //                        item.ADMIN_QM_IMAGE == null 
        //                            ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadMasterQMFile(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" 
        //                            : "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='UploadMasterQMFile(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>View</a>" ,
        //                        URLEncrypt.EncryptParameters1(new string[]{"QmCode="+item.ADMIN_QM_CODE.ToString().Trim()})
        //                    }
        //        }).ToArray();
        //    }
        //    catch (Exception ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        totalRecords = 0;
        //        return null;
        //    }
        //    finally
        //    {
        //        if (dbContext != null)
        //        {
        //            dbContext.Dispose();
        //        }
        //    }
        //}


        public Array ListQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string firstName = string.Empty;
                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "ADMIN_QM_FNAME":
                                firstName = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                qmTypeName = qmTypeName.Replace("%", "");
                dbContext = new PMGSYEntities();
                var lstQualityMonitorDetails = (from qualityMonitor in dbContext.ADMIN_QUALITY_MONITORS
                                                join state in dbContext.MASTER_STATE
                                                on (qualityMonitor.MAST_STATE_CODE.Equals(null) ? qualityMonitor.MAST_STATE_CODE_ADDR : qualityMonitor.MAST_STATE_CODE) equals state.MAST_STATE_CODE into outerState
                                                from state in outerState.DefaultIfEmpty()
                                                join district in dbContext.MASTER_DISTRICT
                                                on qualityMonitor.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into outerDistrict
                                                from district in outerDistrict.DefaultIfEmpty()
                                                join designation in dbContext.MASTER_DESIGNATION
                                                on qualityMonitor.ADMIN_QM_DESG equals designation.MAST_DESIG_CODE into outerDesignation
                                                from designation in outerDesignation.DefaultIfEmpty()
                                                where (
                                               //((firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper())) &&
                                               //((qmTypeName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_TYPE.ToUpper()).StartsWith(qmTypeName == string.Empty ? "%" : qmTypeName.ToUpper()))

                                               ((firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                                (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_MNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                                (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_LNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper())) &&

                                                ((qmTypeName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_TYPE.ToUpper()).StartsWith(qmTypeName == string.Empty ? "%" : qmTypeName.ToUpper()))

                                                &&
                                                 ((stateCode == 0 ? 1 : (stateCode == 90 ? 1 : (stateCode == 91 ? 1 : state.MAST_STATE_CODE))) == (stateCode == 0 ? 1 : (stateCode == 90 ? 1 : (stateCode == 91 ? 1 : stateCode)))) // Added by deendayal on 28/7/2017

                                                &&
                                                ((districtCode == 0 ? 1 : district.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode))
                                                &&
                                                (qualityMonitor.ADMIN_QM_EMPANELLED == isEmpanelled)   // by pradip for filtering Blocked QM // && qualityMonitor.ADMIN_QM_EMPANELLED != "B"
                                                )
                                                &&
                                                  (stateCode == 90 ? qualityMonitor.ADMIN_QM_SERVICE_TYPE.Equals("A") : (stateCode == 91 ? qualityMonitor.ADMIN_QM_SERVICE_TYPE.Equals("C") : (stateCode != 0 ? (qualityMonitor.ADMIN_QM_SERVICE_TYPE.Equals("S") || qualityMonitor.ADMIN_QM_SERVICE_TYPE.Equals("D") || string.IsNullOrEmpty(qualityMonitor.ADMIN_QM_SERVICE_TYPE)) : true)))// Modified on 6/11/2017 to show all NQM list for all Service types(A,c,s,d,NULL)
                                                select new
                                                {
                                                    stateName = qualityMonitor.ADMIN_QM_SERVICE_TYPE.Equals("C") ? "Cental Govt." : (qualityMonitor.ADMIN_QM_SERVICE_TYPE.Equals("A") ? "Central Agency" : state.MAST_STATE_NAME),// Added by deendayal on 28/7/2017
                                                    district.MAST_DISTRICT_NAME,
                                                    designation.MAST_DESIG_NAME,
                                                    qualityMonitor.ADMIN_QM_CODE,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED_MONTH,

                                                    qualityMonitor.ADMIN_QM_FNAME,
                                                    qualityMonitor.ADMIN_QM_MNAME,
                                                    qualityMonitor.ADMIN_QM_LNAME,
                                                    qualityMonitor.ADMIN_QM_ADDRESS1,
                                                    qualityMonitor.ADMIN_QM_ADDRESS2,
                                                    qualityMonitor.ADMIN_QM_PIN,
                                                    qualityMonitor.ADMIN_QM_STD1,
                                                    qualityMonitor.ADMIN_QM_STD2,
                                                    qualityMonitor.ADMIN_QM_PHONE1,
                                                    qualityMonitor.ADMIN_QM_PHONE2,
                                                    qualityMonitor.ADMIN_QM_STD_FAX,
                                                    qualityMonitor.ADMIN_QM_FAX,
                                                    qualityMonitor.ADMIN_QM_MOBILE1,
                                                    qualityMonitor.ADMIN_QM_MOBILE2,
                                                    qualityMonitor.ADMIN_QM_EMAIL,
                                                    qualityMonitor.ADMIN_QM_PAN,
                                                    qualityMonitor.ADMIN_QM_PAN_FILE,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED_YEAR,
                                                    qualityMonitor.ADMIN_QM_REMARKS,
                                                    qualityMonitor.ADMIN_QM_TYPE,
                                                    qualityMonitor.ADMIN_QM_IMAGE,
                                                    qualityMonitor.ADMIN_USER_ID,
                                                    qualityMonitor.ADMIN_QM_DOCPATH,//Added By Abhishek 27-June-2014
                                                    qualityMonitor.ADMIN_QM_BIRTH_DATE,//Added by Anand Singh on May 19, 2015
                                                    qualityMonitor.ADMIN_QM_AADHAR_NO  //Added by Anand Singh on May 19, 2015
                                                }).ToList();
                totalRecords = lstQualityMonitorDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "stateName":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.stateName).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_DISTRICT_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_FNAME":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Address":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_DESG":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_PIN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_PIN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_FAX":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_MOBILE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_MOBILE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_EMAIL":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "PAN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED_YEAR":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Remarks":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_TYPE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.stateName).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "stateName":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.stateName).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_DISTRICT_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_FNAME":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Address":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_DESG":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_PIN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_PIN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_FAX":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_MOBILE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_MOBILE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_EMAIL":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "PAN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED_YEAR":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Remarks":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_TYPE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.stateName).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                }

                //Added By Abhishek to show image files
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD"];

                CommonFunctions commonFunction = new CommonFunctions();

                return lstQualityMonitorDetails.Select(item => new
                {

                    cell = new[]{
                                item.ADMIN_QM_IMAGE==null?"":Path.Combine(VirtualDirectoryUrl, item.ADMIN_QM_IMAGE.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME==null?"":item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME,
                                item.stateName==null?"-": item.stateName.Trim(),

                                item.MAST_DESIG_NAME==null?"-":item.MAST_DESIG_NAME,
                               // ((item.ADMIN_QM_ADDRESS1+""+item.ADMIN_QM_ADDRESS2)==string.Empty?"-":"Address:-"+(item.ADMIN_QM_ADDRESS1+" "+item.ADMIN_QM_ADDRESS2+",  "))+(item.ADMIN_QM_STD1==null?string.Empty:"Phone1:-"+item.ADMIN_QM_STD1.ToString().Trim()+"-")+(item.ADMIN_QM_PHONE1==null?"-":(item.ADMIN_QM_PHONE1.ToString().Trim())+",  ")+(item.ADMIN_QM_STD2==null?string.Empty:"Phone2:-"+(item.ADMIN_QM_STD2.ToString().Trim())+"-")+(item.ADMIN_QM_PHONE2==null?string.Empty:(item.ADMIN_QM_PHONE2.ToString().Trim())+",  ")+(item.ADMIN_QM_STD_FAX==null?string.Empty:"Fax:-"+(item.ADMIN_QM_STD_FAX.ToString().Trim())+"-")+(item.ADMIN_QM_FAX==null?string.Empty:(item.ADMIN_QM_FAX.ToString().Trim())+",  ")+(item.ADMIN_QM_MOBILE1==null?string.Empty:"Mobile1:-"+(item.ADMIN_QM_MOBILE1.Trim())+",  ")+(item.ADMIN_QM_MOBILE2==null?string.Empty:"Mobile2:-"+ (item.ADMIN_QM_MOBILE2.ToString().Trim())+",  ")+(item.ADMIN_QM_EMAIL==null?string.Empty:"Email:-"+(item.ADMIN_QM_EMAIL.ToString().Trim()+",  ")+(item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+(item.MAST_DISTRICT_NAME.ToString())+",  ")+(item.ADMIN_QM_PIN==null?string.Empty:"PIN Code:-"+(item.ADMIN_QM_PIN.ToString()))) ,                                                          
                                ((item.ADMIN_QM_ADDRESS1+""+item.ADMIN_QM_ADDRESS2)==string.Empty?"-":"Address:-"+(item.ADMIN_QM_ADDRESS1+" "+item.ADMIN_QM_ADDRESS2+",  ")) + ((item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+(item.MAST_DISTRICT_NAME.ToString())+",  ")+(item.ADMIN_QM_PIN==null?string.Empty:"PIN Code:-"+(item.ADMIN_QM_PIN.ToString()))) ,
                                ((item.ADMIN_QM_STD1==null?string.Empty:"Phone1:-"+item.ADMIN_QM_STD1.ToString().Trim()+"-")+(item.ADMIN_QM_PHONE1==null?"-":(item.ADMIN_QM_PHONE1.ToString().Trim())+",  ")+(item.ADMIN_QM_STD2==null?string.Empty:"Phone2:-"+(item.ADMIN_QM_STD2.ToString().Trim())+"-")+(item.ADMIN_QM_PHONE2==null?string.Empty:(item.ADMIN_QM_PHONE2.ToString().Trim())+",  ")+(item.ADMIN_QM_STD_FAX==null?string.Empty:"Fax:-"+(item.ADMIN_QM_STD_FAX.ToString().Trim())+"-")+(item.ADMIN_QM_FAX==null?string.Empty:(item.ADMIN_QM_FAX.ToString().Trim())+",  ")+(item.ADMIN_QM_MOBILE1==null?string.Empty:"Mobile1:-"+(item.ADMIN_QM_MOBILE1.Trim())+",  ")+(item.ADMIN_QM_MOBILE2==null?string.Empty:"Mobile2:-"+ (item.ADMIN_QM_MOBILE2.ToString().Trim())+",  ")),
                                ((item.ADMIN_QM_EMAIL==null?string.Empty:"Email:-"+(item.ADMIN_QM_EMAIL.ToString().Trim()+",  "))),  
                                //(item.ADMIN_QM_PAN==null?"-":(item.ADMIN_QM_PAN.Trim()==string.Empty?"---":item.ADMIN_QM_PAN.Trim())),
                                item.ADMIN_QM_PAN==null?"-":(item.ADMIN_QM_PAN.Trim()==string.Empty?"---":( item.ADMIN_QM_PAN_FILE == null  ? item.ADMIN_QM_PAN.Trim() : "<a href='#' onclick='DownloadQMPAN(\"" + URLEncrypt.EncryptParameters(new string[] { item.ADMIN_QM_PAN_FILE + "$" +  item.ADMIN_QM_CODE }) + "\"); return false;'>"+item.ADMIN_QM_PAN.Trim()+"</a>")),

                                (item.ADMIN_QM_AADHAR_NO==null?"---":(item.ADMIN_QM_AADHAR_NO.Trim()==string.Empty?"-":item.ADMIN_QM_AADHAR_NO.Trim())),

                                (item.ADMIN_QM_BIRTH_DATE==null?"---":commonFunction.GetDateTimeToString((DateTime)item.ADMIN_QM_BIRTH_DATE)),


                                item.ADMIN_QM_PAN_FILE == null
                                    ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadQMPAN(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>Upload</a>"
                                    : "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='UploadQMPAN(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>View</a>" ,

                              //  item.ADMIN_QM_EMPANELLED=="N"?"No":"Yes",                                
                                ( (item.ADMIN_QM_EMPANELLED_MONTH==null || item.ADMIN_QM_EMPANELLED_MONTH==0)?" ":CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(item.ADMIN_QM_EMPANELLED_MONTH.Value))+(item.ADMIN_QM_EMPANELLED_YEAR==null?"-":item.ADMIN_QM_EMPANELLED_YEAR.ToString()),
                                item.ADMIN_QM_REMARKS==null?"-":(item.ADMIN_QM_REMARKS.Trim()==string.Empty?"-":item.ADMIN_QM_REMARKS.Trim()),                                
                               // item.ADMIN_QM_TYPE==null?"-":(item.ADMIN_QM_TYPE.Trim()==string.Empty?"-":item.ADMIN_QM_TYPE.Trim()=="I"?"NQM":"SQM"),
                               // dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?"-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault(),
                                dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                         item.ADMIN_QM_TYPE.Trim()=="I"?
                                                                                                                                         (  dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                         "-":  dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault())


                                                                                                                                        : item.ADMIN_QM_TYPE.Trim()=="S"?
                                                                                                                                        (item.ADMIN_QM_EMPANELLED=="Y"?
                                                                                                                                        ("<center><table><tr> <td  style='border:none'><span class='ui-icon ui-icon-circle-plus' title='Generate user id' onClick ='AddSQMUserLoginDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "QmCode="+item.ADMIN_QM_CODE.ToString().Trim()}) + "\");'></span></td></table></center>")
                                                                                                                                        :"<span class='ui-icon ui-icon-locked ui-align-center'></span>")
                                                                                                                                        :dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                        "-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()

                                                                                                                                        :dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                         "-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()
                                                                                                                                        ,
                                item.ADMIN_QM_IMAGE == null
                                    ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadMasterQMFile(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>Upload</a>"
                                    : "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='UploadMasterQMFile(\"" + item.ADMIN_QM_CODE.ToString().Trim() + "\"); return false;'>View</a>" ,
                                URLEncrypt.EncryptParameters1(new string[]{"QmCode="+item.ADMIN_QM_CODE.ToString().Trim()}),
                              //  DateTime.Now.Year*12*30+DateTime.Now.Month*30+DateTime.Now.Day-(item.ADMIN_QM_BIRTH_DATE==null?1900*12*30+1*30+1:((DateTime)item.ADMIN_QM_BIRTH_DATE).Year*12*30+((DateTime)item.ADMIN_QM_BIRTH_DATE).Month*30+((DateTime)item.ADMIN_QM_BIRTH_DATE).Day)>70*12*30?"Y":"N",
                               item.ADMIN_QM_TYPE=="I" ? (DateTime.Now.Year*365.2425+DateTime.Now.Month*30+DateTime.Now.Day-(item.ADMIN_QM_BIRTH_DATE==null?1900*365.2425+1*30+1:((DateTime)item.ADMIN_QM_BIRTH_DATE).Year*365.2425+((DateTime)item.ADMIN_QM_BIRTH_DATE).Month*30+((DateTime)item.ADMIN_QM_BIRTH_DATE).Day)>67*365.2425?"Y":"N") : (item.ADMIN_QM_TYPE=="S" ? (DateTime.Now.Year*365.2425+DateTime.Now.Month*30+DateTime.Now.Day-(item.ADMIN_QM_BIRTH_DATE==null?1900*365.2425+1*30+1:((DateTime)item.ADMIN_QM_BIRTH_DATE).Year*365+((DateTime)item.ADMIN_QM_BIRTH_DATE).Month*30+((DateTime)item.ADMIN_QM_BIRTH_DATE).Day)>70*365.2425?"Y":"N"):"N") , //Changes by Shreyas 13-07-2022
                                  //  "<a href='#' class='ui-icon ui-icon-cancel ui-align-center'title='Click here to blacklist this monitor' onclick='blockQualityMonitor(\"" + URLEncrypt.EncryptParameters1(new string[]{"PAN="+item.ADMIN_QM_PAN.ToString().Trim()}) + "\"); return false;'>Block</a>" // by pradip
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ListQualityMonitor");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }// By Anand



        //public MasterAdminQualityMonitorViewModel GetQualityMonitor_ByQualityMonitorCode(int qualityMonitorCode)
        //{
        //    try
        //    {
        //        dbContext = new PMGSYEntities();
        //        ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.FirstOrDefault(m => m.ADMIN_QM_CODE == qualityMonitorCode);

        //        MasterAdminQualityMonitorViewModel qualityMonitorViewModel = null;
        //        if (qualityMonitorModel != null)
        //        {
        //            qualityMonitorViewModel = CloneQualityMonitorObject(qualityMonitorModel);

        //        }
        //        return qualityMonitorViewModel;
        //    }
        //    catch (Exception ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

        //        return null;
        //    }
        //    finally
        //    {
        //        if (dbContext != null)
        //        {
        //            dbContext.Dispose();
        //        }
        //    }
        //}
        public MasterAdminQualityMonitorViewModel GetQualityMonitor_ByQualityMonitorCode(int qualityMonitorCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.FirstOrDefault(m => m.ADMIN_QM_CODE == qualityMonitorCode);

                MasterAdminQualityMonitorViewModel qualityMonitorViewModel = null;
                if (qualityMonitorModel != null)
                {
                    qualityMonitorViewModel = CloneQualityMonitorObject(qualityMonitorModel);

                }
                return qualityMonitorViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }//By Aanand


        #region Quality Monitor Profile Information to NQM / SQM as Present in CQC / SQC
        //Added by Hrishikesh to provide Quality Monitor Profile Information to NQM / SQM as Present in CQC / SQC--start
        public MasterAdminQualityMonitorViewModel GetQMProfileInformationDAL(int userId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.FirstOrDefault(m => m.ADMIN_USER_ID == userId);
                //ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.FirstOrDefault(m => m.ADMIN_USER_ID == 9999999);      //check model null condition

                MasterAdminQualityMonitorViewModel qualityMonitorViewModel = new MasterAdminQualityMonitorViewModel();
                if (qualityMonitorModel != null)
                {
                    qualityMonitorViewModel = CloneQualityMonitorObject(qualityMonitorModel);

                    if (qualityMonitorViewModel.ADMIN_QM_TYPE != "S")
                    {
                        if (qualityMonitorViewModel.ADMIN_SERVICE_TYPE.Contains("0"))
                            qualityMonitorViewModel.Service_Type = "";
                        else if (qualityMonitorViewModel.ADMIN_SERVICE_TYPE.Contains("S"))
                            qualityMonitorViewModel.Service_Type = "State Government";
                        else if (qualityMonitorViewModel.ADMIN_SERVICE_TYPE.Contains("C"))
                            qualityMonitorViewModel.Service_Type = "Central Government";
                        else if (qualityMonitorViewModel.ADMIN_SERVICE_TYPE.Contains("A"))
                            qualityMonitorViewModel.Service_Type = "Central Agency";
                    }


                    var cadreState = qualityMonitorViewModel.MAST_STATE_CODE < 0 ? "" : dbContext.MASTER_STATE.Where(x => x.MAST_STATE_CODE == qualityMonitorViewModel.MAST_STATE_CODE).Select(x => x.MAST_STATE_NAME).FirstOrDefault();
                    //var cadreState = qualityMonitorViewModel.MAST_STATE_CODE > 0? 0:  dbContext.MASTER_STATE.Where(x => x.MAST_STATE_CODE == qualityMonitorViewModel.MAST_STATE_CODE).FirstOrDefault();
                    var homeStateName = qualityMonitorViewModel.MAST_STATE_CODE_ADDR < 0 ? "" : dbContext.MASTER_STATE.Where(x => x.MAST_STATE_CODE == qualityMonitorViewModel.MAST_STATE_CODE_ADDR).Select(x => x.MAST_STATE_NAME).FirstOrDefault();
                    var districtName = qualityMonitorViewModel.MAST_DISTRICT_CODE < 0 ? "" : dbContext.MASTER_DISTRICT.Where(x => x.MAST_DISTRICT_CODE == qualityMonitorViewModel.MAST_DISTRICT_CODE).Select(x => x.MAST_DISTRICT_NAME).FirstOrDefault();
                    var month = qualityMonitorViewModel.ADMIN_QM_EMPANELLED_MONTH == 0 ? "" : dbContext.MASTER_MONTH.Where(x => x.MAST_MONTH_CODE == qualityMonitorViewModel.ADMIN_QM_EMPANELLED_MONTH).Select(x => x.MAST_MONTH_FULL_NAME).FirstOrDefault();
                    var designation = qualityMonitorViewModel.ADMIN_QM_DESG < 0 ? "" : dbContext.MASTER_DESIGNATION.Where(x => x.MAST_DESIG_CODE == qualityMonitorViewModel.ADMIN_QM_DESG).Select(x => x.MAST_DESIG_NAME).FirstOrDefault();

                    qualityMonitorViewModel.Cadre_State = cadreState;
                    qualityMonitorViewModel.Home_State = homeStateName;

                    qualityMonitorViewModel.District_Name = districtName;
                    qualityMonitorViewModel.Empanelled_Month = month;
                    qualityMonitorViewModel.Designation = designation;


                }
                else
                { qualityMonitorViewModel = null; }
                return qualityMonitorViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }// end GetQMProfileInformationDAL()

        #endregion

        //public ADMIN_QUALITY_MONITORS CloneQualityMonitorModel(ADMIN_QUALITY_MONITORS qualityMonitorModel, MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, bool flagQualityMonitorAddEdit)
        //{
        //    try
        //    {
        //        if (flagQualityMonitorAddEdit)
        //        {
        //            qualityMonitorModel.ADMIN_QM_CODE = dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) == null ? 1 : (Int32)dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) + 1;
        //            qualityMonitorModel.ADMIN_QM_TYPE = masterQualityMonitorViewModel.ADMIN_QM_TYPE;
        //            qualityMonitorModel.MAST_STATE_CODE = masterQualityMonitorViewModel.MAST_STATE_CODE;
        //        }

        //        qualityMonitorModel.ADMIN_QM_FNAME = masterQualityMonitorViewModel.ADMIN_QM_FNAME;
        //        qualityMonitorModel.ADMIN_QM_MNAME = masterQualityMonitorViewModel.ADMIN_QM_MNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MNAME;
        //        qualityMonitorModel.ADMIN_QM_LNAME = masterQualityMonitorViewModel.ADMIN_QM_LNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_LNAME;

        //        qualityMonitorModel.ADMIN_QM_DESG = (int)masterQualityMonitorViewModel.ADMIN_QM_DESG;//masterQualityMonitorViewModel.ADMIN_QM_DESG == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_DESG;


        //        qualityMonitorModel.ADMIN_QM_ADDRESS1 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1;
        //        qualityMonitorModel.ADMIN_QM_ADDRESS2 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2;

        //        qualityMonitorModel.MAST_DISTRICT_CODE = masterQualityMonitorViewModel.MAST_DISTRICT_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_DISTRICT_CODE
        //            ;
        //        qualityMonitorModel.MAST_STATE_CODE_ADDR = masterQualityMonitorViewModel.MAST_STATE_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_STATE_CODE;

        //        qualityMonitorModel.ADMIN_QM_PIN = masterQualityMonitorViewModel.ADMIN_QM_PIN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PIN;
        //        qualityMonitorModel.ADMIN_QM_STD1 = masterQualityMonitorViewModel.ADMIN_QM_STD1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD1;
        //        qualityMonitorModel.ADMIN_QM_STD2 = masterQualityMonitorViewModel.ADMIN_QM_STD2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD2;
        //        qualityMonitorModel.ADMIN_QM_PHONE1 = masterQualityMonitorViewModel.ADMIN_QM_PHONE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE1;
        //        qualityMonitorModel.ADMIN_QM_PHONE2 = masterQualityMonitorViewModel.ADMIN_QM_PHONE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE2;
        //        qualityMonitorModel.ADMIN_QM_FAX = masterQualityMonitorViewModel.ADMIN_QM_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_FAX;
        //        qualityMonitorModel.ADMIN_QM_STD_FAX = masterQualityMonitorViewModel.ADMIN_QM_STD_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD_FAX;
        //        qualityMonitorModel.ADMIN_QM_MOBILE1 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE1;
        //        qualityMonitorModel.ADMIN_QM_MOBILE2 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE2;
        //        qualityMonitorModel.ADMIN_QM_EMAIL = masterQualityMonitorViewModel.ADMIN_QM_EMAIL == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_EMAIL;
        //        qualityMonitorModel.ADMIN_QM_PAN = masterQualityMonitorViewModel.ADMIN_QM_PAN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PAN;
        //        //qualityMonitorModel.ADMIN_QM_DEG = masterQualityMonitorViewModel.ADMIN_QM_DEG;
        //        qualityMonitorModel.ADMIN_QM_EMPANELLED = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED;
        //        qualityMonitorModel.ADMIN_QM_EMPANELLED_YEAR = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR;
        //        qualityMonitorModel.ADMIN_QM_IMAGE = masterQualityMonitorViewModel.ADMIN_QM_IMAGE == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_IMAGE;
        //        qualityMonitorModel.ADMIN_QM_DOCPATH = masterQualityMonitorViewModel.ADMIN_QM_DOCPATH == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_DOCPATH;
        //        qualityMonitorModel.ADMIN_QM_REMARKS = masterQualityMonitorViewModel.ADMIN_QM_REMARKS == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_REMARKS;
        //        //qualityMonitorModel.MAST_STATE_CODE_ADDR = masterQualityMonitorViewModel.MAST_STATE_CODE;
        //        qualityMonitorModel.ADMIN_QM_AADHAR_NO = masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_DOCPATH;
        //        //ADMIN_USER_ID not inserted

        //        //added by abhishek kamble 27-nov-2013
        //        qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
        //        qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

        //        return qualityMonitorModel;
        //    }
        //    catch (Exception ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

        //        return null;
        //    }
        //}


        public ADMIN_QUALITY_MONITORS CloneQualityMonitorModel(ADMIN_QUALITY_MONITORS qualityMonitorModel, MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, bool flagQualityMonitorAddEdit)
        {
            try
            {
                CommonFunctions objCommon = new CommonFunctions();
                if (flagQualityMonitorAddEdit)
                {
                    qualityMonitorModel.ADMIN_QM_CODE = dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) == null ? 1 : (Int32)dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) + 1;
                    qualityMonitorModel.ADMIN_QM_TYPE = masterQualityMonitorViewModel.ADMIN_QM_TYPE;

                }
                masterQualityMonitorViewModel.MAST_STATE_CODE = masterQualityMonitorViewModel.ADMIN_QM_TYPE.Equals("S") ? masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR : (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE.Equals("A") ? masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR : (masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE.Equals("C") ? masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR : masterQualityMonitorViewModel.MAST_STATE_CODE));

                qualityMonitorModel.ADMIN_QM_EMPANELLED_MONTH = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_MONTH;

                qualityMonitorModel.ADMIN_QM_FNAME = masterQualityMonitorViewModel.ADMIN_QM_FNAME;
                qualityMonitorModel.ADMIN_QM_MNAME = masterQualityMonitorViewModel.ADMIN_QM_MNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MNAME;
                qualityMonitorModel.ADMIN_QM_LNAME = masterQualityMonitorViewModel.ADMIN_QM_LNAME == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_LNAME;

                qualityMonitorModel.ADMIN_QM_DESG = (int)masterQualityMonitorViewModel.ADMIN_QM_DESG;//masterQualityMonitorViewModel.ADMIN_QM_DESG == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_DESG;


                qualityMonitorModel.ADMIN_QM_ADDRESS1 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS1;
                qualityMonitorModel.ADMIN_QM_ADDRESS2 = masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_ADDRESS2;

                qualityMonitorModel.MAST_STATE_CODE_ADDR = masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR == 0 ? null : masterQualityMonitorViewModel.MAST_STATE_CODE_ADDR;
                qualityMonitorModel.MAST_STATE_CODE = masterQualityMonitorViewModel.MAST_STATE_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_STATE_CODE;
                qualityMonitorModel.MAST_DISTRICT_CODE = masterQualityMonitorViewModel.MAST_DISTRICT_CODE == 0 ? null : masterQualityMonitorViewModel.MAST_DISTRICT_CODE;


                qualityMonitorModel.ADMIN_QM_PIN = masterQualityMonitorViewModel.ADMIN_QM_PIN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PIN;
                qualityMonitorModel.ADMIN_QM_STD1 = masterQualityMonitorViewModel.ADMIN_QM_STD1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD1;
                qualityMonitorModel.ADMIN_QM_STD2 = masterQualityMonitorViewModel.ADMIN_QM_STD2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD2;
                qualityMonitorModel.ADMIN_QM_PHONE1 = masterQualityMonitorViewModel.ADMIN_QM_PHONE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE1;
                qualityMonitorModel.ADMIN_QM_PHONE2 = masterQualityMonitorViewModel.ADMIN_QM_PHONE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PHONE2;
                qualityMonitorModel.ADMIN_QM_FAX = masterQualityMonitorViewModel.ADMIN_QM_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_FAX;
                qualityMonitorModel.ADMIN_QM_STD_FAX = masterQualityMonitorViewModel.ADMIN_QM_STD_FAX == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_STD_FAX;
                qualityMonitorModel.ADMIN_QM_MOBILE1 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE1 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE1;
                qualityMonitorModel.ADMIN_QM_MOBILE2 = masterQualityMonitorViewModel.ADMIN_QM_MOBILE2 == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_MOBILE2;
                qualityMonitorModel.ADMIN_QM_EMAIL = masterQualityMonitorViewModel.ADMIN_QM_EMAIL == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_EMAIL;
                qualityMonitorModel.ADMIN_QM_PAN = masterQualityMonitorViewModel.ADMIN_QM_PAN == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_PAN;
                qualityMonitorModel.ADMIN_QM_AADHAR_NO = masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_AADHAR_NO;

                //qualityMonitorModel.ADMIN_QM_DEG = masterQualityMonitorViewModel.ADMIN_QM_DEG;
                qualityMonitorModel.ADMIN_QM_EMPANELLED = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED;
                qualityMonitorModel.ADMIN_QM_EMPANELLED_YEAR = masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR == 0 ? null : masterQualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR;
                qualityMonitorModel.ADMIN_QM_IMAGE = masterQualityMonitorViewModel.ADMIN_QM_IMAGE == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_IMAGE;
                qualityMonitorModel.ADMIN_QM_DOCPATH = masterQualityMonitorViewModel.ADMIN_QM_DOCPATH == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_DOCPATH;
                qualityMonitorModel.ADMIN_QM_REMARKS = masterQualityMonitorViewModel.ADMIN_QM_REMARKS == string.Empty ? null : masterQualityMonitorViewModel.ADMIN_QM_REMARKS;
                qualityMonitorModel.ADMIN_QM_BIRTH_DATE = objCommon.GetStringToDateTime(masterQualityMonitorViewModel.ADMIN_QM_BIRTH_DATE);
                qualityMonitorModel.ADMIN_QM_SERVICE_TYPE = masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE.Equals("0") ? "D" : masterQualityMonitorViewModel.ADMIN_SERVICE_TYPE;
                //qualityMonitorModel.MAST_STATE_CODE_ADDR = masterQualityMonitorViewModel.MAST_STATE_CODE;

                //ADMIN_USER_ID not inserted

                //qualityMonitorModel.ADMIN_QM_PAN_FILE = masterQualityMonitorViewModel.FILE_NAME;   //Added by Shreyas on 09-01-2023
                qualityMonitorModel.ADMIN_QM_PAN_FILE = dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) == null ? "1" : (dbContext.ADMIN_QUALITY_MONITORS.Max(cp => (Int32?)cp.ADMIN_QM_CODE) + 1).ToString() + Path.GetExtension(masterQualityMonitorViewModel.FILE_NAME).ToString();



                //added by abhishek kamble 27-nov-2013
                qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                return qualityMonitorModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }//By Aanand


        public MasterAdminQualityMonitorViewModel CloneQualityMonitorObject(ADMIN_QUALITY_MONITORS qualityMonitorModel)
        {
            try
            {
                MasterAdminQualityMonitorViewModel qualityMonitorViewModel = new MasterAdminQualityMonitorViewModel();
                CommonFunctions fun = new CommonFunctions();
                qualityMonitorViewModel.EncryptedQmCode = URLEncrypt.EncryptParameters1(new string[] { "QmCode =" + qualityMonitorModel.ADMIN_QM_CODE.ToString().Trim() });

                qualityMonitorViewModel.ADMIN_QM_EMPANELLED_MONTH = qualityMonitorModel.ADMIN_QM_EMPANELLED_MONTH;
                qualityMonitorViewModel.ADMIN_QM_BIRTH_DATE = (qualityMonitorModel.ADMIN_QM_BIRTH_DATE == null ? "" : fun.GetDateTimeToString(qualityMonitorModel.ADMIN_QM_BIRTH_DATE.Value));
                qualityMonitorViewModel.ADMIN_SERVICE_TYPE = qualityMonitorModel.ADMIN_QM_SERVICE_TYPE;
                qualityMonitorViewModel.MAST_CADRE_STATE_CODE = qualityMonitorModel.QUALITY_QM_CADRE_STATE.Select(s => s.MAST_STATE_CODE).ToArray();

                qualityMonitorViewModel.ADMIN_QM_TYPE = qualityMonitorModel.ADMIN_QM_TYPE;
                qualityMonitorViewModel.MAST_STATE_CODE = qualityMonitorModel.MAST_STATE_CODE;
                qualityMonitorViewModel.ADMIN_QM_FNAME = qualityMonitorModel.ADMIN_QM_FNAME;
                qualityMonitorViewModel.ADMIN_QM_MNAME = qualityMonitorModel.ADMIN_QM_MNAME;
                qualityMonitorViewModel.ADMIN_QM_LNAME = qualityMonitorModel.ADMIN_QM_LNAME;
                qualityMonitorViewModel.ADMIN_QM_DESG = qualityMonitorModel.ADMIN_QM_DESG;
                qualityMonitorViewModel.ADMIN_QM_ADDRESS1 = qualityMonitorModel.ADMIN_QM_ADDRESS1;
                qualityMonitorViewModel.ADMIN_QM_ADDRESS2 = qualityMonitorModel.ADMIN_QM_ADDRESS2;
                qualityMonitorViewModel.MAST_DISTRICT_CODE = qualityMonitorModel.MAST_DISTRICT_CODE;
                qualityMonitorViewModel.MAST_STATE_CODE_ADDR = qualityMonitorModel.MAST_STATE_CODE_ADDR;
                // qualityMonitorViewModel.MAST_STATE_CODE_ADDR = qualityMonitorModel.MAST_STATE_CODE_ADDR;
                qualityMonitorViewModel.ADMIN_QM_PIN = qualityMonitorModel.ADMIN_QM_PIN;
                qualityMonitorViewModel.ADMIN_QM_STD1 = qualityMonitorModel.ADMIN_QM_STD1;
                qualityMonitorViewModel.ADMIN_QM_STD2 = qualityMonitorModel.ADMIN_QM_STD2;
                qualityMonitorViewModel.ADMIN_QM_PHONE1 = qualityMonitorModel.ADMIN_QM_PHONE1;
                qualityMonitorViewModel.ADMIN_QM_PHONE2 = qualityMonitorModel.ADMIN_QM_PHONE2;
                qualityMonitorViewModel.ADMIN_QM_STD_FAX = qualityMonitorModel.ADMIN_QM_STD_FAX;
                qualityMonitorViewModel.ADMIN_QM_FAX = qualityMonitorModel.ADMIN_QM_FAX;
                qualityMonitorViewModel.ADMIN_QM_MOBILE1 = qualityMonitorModel.ADMIN_QM_MOBILE1;
                qualityMonitorViewModel.ADMIN_QM_MOBILE2 = qualityMonitorModel.ADMIN_QM_MOBILE2;
                qualityMonitorViewModel.ADMIN_QM_EMAIL = qualityMonitorModel.ADMIN_QM_EMAIL;
                qualityMonitorViewModel.ADMIN_QM_PAN = qualityMonitorModel.ADMIN_QM_PAN;
                // qualityMonitorViewModel.ADMIN_QM_DEG = qualityMonitorModel.ADMIN_QM_DEG;
                qualityMonitorViewModel.ADMIN_QM_EMPANELLED = qualityMonitorModel.ADMIN_QM_EMPANELLED;
                qualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR = qualityMonitorModel.ADMIN_QM_EMPANELLED_YEAR;
                qualityMonitorViewModel.ADMIN_QM_IMAGE = qualityMonitorModel.ADMIN_QM_IMAGE;
                qualityMonitorViewModel.ADMIN_QM_DOCPATH = qualityMonitorModel.ADMIN_QM_DOCPATH;
                qualityMonitorViewModel.ADMIN_QM_REMARKS = qualityMonitorModel.ADMIN_QM_REMARKS;
                qualityMonitorViewModel.ADMIN_QM_AADHAR_NO = qualityMonitorModel.ADMIN_QM_AADHAR_NO;
                qualityMonitorViewModel.ADMIN_QM_EMPANELLED_REASON = qualityMonitorModel.ADMIN_QM_EMPANELLED_REASON; //add on 07-10-2022
                //added  by abhinav pathak
                #region added by abhinav pathak
                qualityMonitorViewModel.DeEmpanelledRemark = qualityMonitorModel.ADMIN_QM_DEEMPANEL_REMARKS;
                //qualityMonitorViewModel.admin_nd_code = Convert.ToInt32(qualityMonitorModel.ADMIN_QM_DEPARTMENT);
                #endregion

                qualityMonitorViewModel.FILE_NAME = qualityMonitorModel.ADMIN_QM_PAN_FILE;          //Add by Shreyas
                qualityMonitorViewModel.PAN_DOWNLOAD = URLEncrypt.EncryptParameters(new string[] { qualityMonitorModel.ADMIN_QM_PAN_FILE + "$" + qualityMonitorModel.ADMIN_QM_CODE });
                //qualityMonitorViewModel.PAN_DELETE = "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePANFileDetails('" + qualityMonitorModel.ADMIN_QM_CODE.ToString().Trim() + "'); return false;'>Delete</a>";
                //qualityMonitorViewModel.PAN_DELETE = qualityMonitorModel.ADMIN_QM_CODE.ToString().Trim();
                qualityMonitorViewModel.PAN_DELETE = URLEncrypt.EncryptParameters1(new string[] { "QmCode=" + qualityMonitorModel.ADMIN_QM_CODE.ToString().Trim() });

                return qualityMonitorViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        public List<MASTER_DESIGNATION> GetAllQmDesignation()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_DESIGNATION> list = dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_TYPE.ToUpper() == "QM").OrderBy(s => s.MAST_DESIG_NAME).ToList<MASTER_DESIGNATION>();
                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> GetYears()
        {
            List<SelectListItem> yearList = new List<SelectListItem>();

            yearList.Add(
                 new SelectListItem()
                 {
                     Text = "--Select--",
                     Value = "0"
                 }
                 );

            for (int i = DateTime.Now.Year; i >= 1990; i--)
            {

                yearList.Add(
                    new SelectListItem()
                    {
                        Text = i.ToString(),
                        Value = i.ToString()
                    }
                    );
            }
            return yearList;


        }

        public List<SelectListItem> GetQmTypes()
        {
            List<SelectListItem> qualityMonitorTypelist = new List<SelectListItem>();

            qualityMonitorTypelist.Add(
                new SelectListItem()
                {
                    Text = "All Types",
                    Value = ""
                }
                );

            qualityMonitorTypelist.Add(
                new SelectListItem()
                {
                    Text = "NQM",
                    Value = "I"
                }
                );
            qualityMonitorTypelist.Add(
             new SelectListItem()
             {
                 Text = "SQM",
                 Value = "S"
             }
             );
            return qualityMonitorTypelist;
        }

        public bool AddSQMUserLoginQualityMonitorDAL(int qualityMonitorCode, ref string message)
        {
            using (TransactionScope objScope = new TransactionScope())
            {
                dbContext = new PMGSYEntities();
                PMGSYEntities dbCon = new PMGSYEntities();

                UM_User_Master obj_User_Master = new UM_User_Master();
                try
                {
                    ADMIN_QUALITY_MONITORS qualityMonitorModel = dbCon.ADMIN_QUALITY_MONITORS.Where(qm => qm.ADMIN_QM_CODE == qualityMonitorCode).FirstOrDefault();
                    MasterAdminQualityMonitorViewModel qualityMonitorViewModel = null;
                    string userName = null;
                    if (qualityMonitorModel != null)
                    {
                        qualityMonitorViewModel = CloneQualityMonitorObject(qualityMonitorModel);
                        int stateCode = Convert.ToInt32(qualityMonitorViewModel.MAST_STATE_CODE);
                        //Get User Name with stateCode, ADMIN_QM_Code,QM_Type
                        userName = GetSQMUserName(stateCode, qualityMonitorCode, qualityMonitorViewModel.ADMIN_QM_TYPE, ref message);
                        if (userName == null)
                        {
                            message = "Empanelled year not set for that user please set Empanelled year and try again ";
                            return false;
                        }
                        if (dbContext.UM_User_Master.Any(u => u.UserName == userName.Trim()))
                        {
                            message = "User with same name already exists, Please choose different User Name ";
                            return false;
                        }

                        #region Create User store in UM_USER_MASTER Table
                        obj_User_Master.UserID = ((from userid in dbContext.UM_User_Master select userid.UserID).Max()) + 1;
                        obj_User_Master.UserName = userName;
                        obj_User_Master.LevelID = 4;
                        obj_User_Master.DefaultRoleID = 7;
                        obj_User_Master.CreatedBy = PMGSYSession.Current.UserId;
                        obj_User_Master.CreationDate = DateTime.Now;
                        obj_User_Master.IsActive = true;
                        obj_User_Master.IsFirstLogin = true;
                        obj_User_Master.IsLocked = false;

                        if (qualityMonitorViewModel.MAST_STATE_CODE == 0)
                            obj_User_Master.Mast_State_Code = null;
                        else
                            obj_User_Master.Mast_State_Code = qualityMonitorViewModel.MAST_STATE_CODE;

                        obj_User_Master.Mast_District_Code = null;
                        obj_User_Master.Admin_ND_Code = null;

                        obj_User_Master.Password = new Login().EncodePassword(obj_User_Master.UserName);
                        obj_User_Master.FailedPasswordAttempts = 0;
                        obj_User_Master.FailedPasswordAnswerAttempts = 0;
                        obj_User_Master.PreferedLanguageID = 1;
                        obj_User_Master.PreferedCssID = 1;
                        obj_User_Master.MaxConcurrentLoginsAllowed = 1;
                        obj_User_Master.Remarks = "";
                        dbContext.UM_User_Master.Add(obj_User_Master);
                        dbContext.SaveChanges();

                        //Assign userRoleMapping details
                        UM_User_Role_Mapping userRoleMapping = new UM_User_Role_Mapping();
                        userRoleMapping.ID = ((from uurm in dbContext.UM_User_Role_Mapping select uurm.ID).Max()) + 1;
                        userRoleMapping.UserId = obj_User_Master.UserID;
                        userRoleMapping.RoleId = 7;
                        dbContext.UM_User_Role_Mapping.Add(userRoleMapping);
                        dbContext.SaveChanges();

                        //Assign Security Question Answer
                        UM_Security_Question_Answer secQuestionAnswer = new UM_Security_Question_Answer();
                        secQuestionAnswer.UserID = obj_User_Master.UserID;
                        secQuestionAnswer.PasswordQuestionID = 44;              //Default Question is What is your name?
                        secQuestionAnswer.Answer = obj_User_Master.UserName;    //Default Answer is value of UserName
                        secQuestionAnswer.SetDate = DateTime.Now;
                        secQuestionAnswer.LastUpdatedDate = DateTime.Now;
                        dbContext.UM_Security_Question_Answer.Add(secQuestionAnswer);
                        dbContext.SaveChanges();
                        //Add all entities
                        #endregion

                    }


                    #region Update in ADMIN_QUALITY_MONITORS Column ADMIN_USER_ID
                    qualityMonitorModel.ADMIN_USER_ID = obj_User_Master.UserID;
                    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbCon.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbCon.SaveChanges();
                    #endregion
                    objScope.Complete();
                    return true;
                }
                catch (OptimisticConcurrencyException ex)
                {
                    //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    ErrorLog.LogError(ex, "Master.AddSQMUserLoginQualityMonitorDetailsDAL().OptimisticConcurrencyException");
                    return false;
                }
                catch (UpdateException ex)
                {
                    //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    ErrorLog.LogError(ex, "Master.AddSQMUserLoginQualityMonitorDetailsDAL().UpdateException");
                    return false;
                }
                catch (Exception ex)
                {
                    //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    ErrorLog.LogError(ex, "Master.AddSQMUserLoginQualityMonitorDetailsDAL()");
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }


        #region Pdf Upload BY Monitor

        /// <summary>
        /// Get the PDF Files List
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetPANFileListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int qmCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                List<ADMIN_QUALITY_MONITORS> listFiles = dbContext.ADMIN_QUALITY_MONITORS.Where(p => p.ADMIN_QM_CODE == qmCode && p.ADMIN_QM_PAN_FILE != null).ToList();
                IQueryable<ADMIN_QUALITY_MONITORS> query = listFiles.AsQueryable<ADMIN_QUALITY_MONITORS>();
                totalRecords = listFiles.Count();

                string VirtualDirectoryUrl = ConfigurationManager.AppSettings["QUALITY_MONITOR_PAN_FILE_VIRTUAL_PATH"];
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_PAN_FILE"];

                return query.Select(fileDetails => new
                {
                    id = fileDetails.ADMIN_QM_CODE,
                    cell = new[] {
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.ADMIN_QM_PAN_FILE + "$" +  fileDetails.ADMIN_QM_CODE }),
                                    "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePANFileDetails('" + fileDetails.ADMIN_QM_CODE.ToString().Trim() +"'); return false;'>Delete</a>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Add File Upload Details
        /// </summary>
        /// <param name="lst_ims_proposal_files"></param>
        /// <returns></returns>
        public string AddPANUploadDetailsDAL(List<QualityMonitorFileUploadViewModel> lstFileUploadViewModel)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitors = new ADMIN_QUALITY_MONITORS();
                string fileName = string.Empty;
                foreach (QualityMonitorFileUploadViewModel model in lstFileUploadViewModel)
                {
                    qualityMonitors = dbContext.ADMIN_QUALITY_MONITORS.Find(model.ADMIN_QM_CODE);
                    fileName = model.name;
                }

                qualityMonitors.ADMIN_QM_PAN_FILE = fileName;
                qualityMonitors.USERID = PMGSYSession.Current.UserId;
                qualityMonitors.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(qualityMonitors).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }



        /// <summary>
        ///  Delete File and File Details
        /// </summary>
        /// <param name="ims_proposal_files"></param>
        /// <returns></returns>
        public string DeletePANFileDetailsDAL(int qmCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS obj_files = dbContext.ADMIN_QUALITY_MONITORS.Find(qmCode);

                obj_files.ADMIN_QM_PAN_FILE = null;
                obj_files.USERID = PMGSYSession.Current.UserId;
                obj_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(obj_files).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion


        #region File Details

        public string AddFileUploadDetailsDAL(QualityMonitorFileUploadViewModel fileUploadViewModel)
        {
            try
            {
                dbContext = new PMGSYEntities();

                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == fileUploadViewModel.ADMIN_QM_CODE).FirstOrDefault();

                if (qualityMonitorModel == null)
                {
                    return ("An Error Occurred While Your Processing Request.");
                }
                else
                {
                    //image upload
                    if (fileUploadViewModel.file_type == "I")
                    {
                        qualityMonitorModel.ADMIN_QM_IMAGE = fileUploadViewModel.name;

                        //Added by abhishek kamble 27-nov-2013
                        qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                        qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();
                        return string.Empty;
                    }//Document Upload
                    else if (fileUploadViewModel.file_type == "D")
                    {
                        qualityMonitorModel.ADMIN_QM_DOCPATH = fileUploadViewModel.name;

                        //Added by abhishek kamble 27-nov-2013
                        qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                        qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();
                        return string.Empty;
                    }
                    else
                    {
                        return ("An Error Occurred While Your Processing Request.");
                    }
                }
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //For Listing the Images changed by deendayal on 05/19/2017
        public Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int ADMIN_QM_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();

                List<ADMIN_QUALITY_MONITORS> listQualityMonitorsFiles = dbContext.ADMIN_QUALITY_MONITORS.Where(p => p.ADMIN_QM_CODE == ADMIN_QM_CODE && p.ADMIN_QM_IMAGE != null).ToList();
                IQueryable<ADMIN_QUALITY_MONITORS> query = listQualityMonitorsFiles.AsQueryable<ADMIN_QUALITY_MONITORS>();
                totalRecords = listQualityMonitorsFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.ADMIN_QM_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.ADMIN_QM_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.ADMIN_QM_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD"];

                var iamge = query.Select(fileDetails => new
                {
                    id = fileDetails.ADMIN_QM_CODE,
                    cell = new[] {
                                    Path.Combine(VirtualDirectoryUrl, fileDetails.ADMIN_QM_IMAGE.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.ADMIN_QM_IMAGE  }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('"+ fileDetails.ADMIN_QM_CODE.ToString().Trim() + "','" + fileDetails.ADMIN_QM_IMAGE+ "'); return false;>Delete</a>",
                    }
                }).ToArray();

                var obj = query.Select(filedetails => new { code = filedetails.ADMIN_QM_CODE, fileName = filedetails.ADMIN_QM_IMAGE });



                return query.Select(fileDetails => new
                {
                    id = fileDetails.ADMIN_QM_CODE + " " + fileDetails.ADMIN_QM_IMAGE,
                    cell = new[] {
                                    Path.Combine(VirtualDirectoryUrl, fileDetails.ADMIN_QM_IMAGE.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.ADMIN_QM_IMAGE  }) +"\"); return false;'>Download</a>" ,
                                   "" //"<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('"+ fileDetails.ADMIN_QM_CODE.ToString().Trim() + "','" + fileDetails.ADMIN_QM_IMAGE+ "'); return false;>Delete</a>",                              
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //For Listing the Document Files
        public Array GetPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int ADMIN_QM_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<ADMIN_QUALITY_MONITORS> listQualityMonitorFiles = dbContext.ADMIN_QUALITY_MONITORS.Where(p => p.ADMIN_QM_CODE == ADMIN_QM_CODE && p.ADMIN_QM_DOCPATH != null).ToList();
                IQueryable<ADMIN_QUALITY_MONITORS> query = listQualityMonitorFiles.AsQueryable<ADMIN_QUALITY_MONITORS>();
                totalRecords = listQualityMonitorFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.ADMIN_QM_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.ADMIN_QM_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.ADMIN_QM_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_PDF_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_PDF_FILE_UPLOAD"];

                return query.Select(fileDetails => new
                {
                    id = fileDetails.ADMIN_QM_CODE,
                    cell = new[] {
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.ADMIN_QM_DOCPATH}),
                                    "<a href='#' title='Click here to delete the File' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('"  + fileDetails.ADMIN_QM_CODE.ToString().Trim() + "','" + fileDetails.ADMIN_QM_DOCPATH+"'); return false;'>Delete</a>",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        // Delete both PDF and Image Files
        public string DeleteFileDetailsDAL(int ADMIN_QM_CODE, string FILE_NAME)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == ADMIN_QM_CODE && m.ADMIN_QM_IMAGE == FILE_NAME).FirstOrDefault();

                if (qualityMonitorModel == null)
                {
                    return "There is an error while processing request.";
                }
                else
                {
                    qualityMonitorModel.ADMIN_QM_IMAGE = null;

                    //Added by abhishek kamble 27-nov-2013
                    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string DeletePdfFileDetailsDAL(int ADMIN_QM_CODE, string FILE_NAME)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == ADMIN_QM_CODE && m.ADMIN_QM_DOCPATH == FILE_NAME).FirstOrDefault();

                if (qualityMonitorModel == null)
                {
                    return "There is an error while processing request.";
                }
                else
                {
                    qualityMonitorModel.ADMIN_QM_DOCPATH = null;

                    //Added by abhishek kamble 27-nov-2013
                    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //public QualityMonitorFileUploadViewModel GetQuality

        #endregion

        public string GetSQMUserName(int selectedState, int selectedSQM, string qmType, ref string Message)
        {
            dbContext = new PMGSYEntities();
            string strUser = string.Empty;
            try
            {


                var shotStateCode = (from c in dbContext.MASTER_STATE
                                     where c.MAST_STATE_CODE == selectedState
                                     select c.MAST_STATE_SHORT_CODE.ToLower()).FirstOrDefault();
                var strEmpanlledyear = (from c in dbContext.ADMIN_QUALITY_MONITORS
                                        where c.ADMIN_QM_TYPE == qmType
                                        && c.ADMIN_QM_EMPANELLED == "Y" &&
                                        // c.ADMIN_USER_ID != null &&
                                        c.ADMIN_QM_CODE == selectedSQM  // &&
                                        //c.MAST_STATE_CODE==SelectedState
                                        select c.ADMIN_QM_EMPANELLED_YEAR).FirstOrDefault();
                if (strEmpanlledyear == null)
                {
                    Message = "User not have Empaneeled Year";
                    strUser = null;
                    return strUser;
                }
                string lenSqmCode = selectedSQM.ToString().Length.ToString();
                switch (lenSqmCode)
                {
                    case "1":
                        strUser = shotStateCode.ToString() + "0000" + selectedSQM + "" + strEmpanlledyear.ToString().Substring(strEmpanlledyear.ToString().Length - 2);
                        break;
                    case "2":
                        strUser = shotStateCode.ToString() + "000" + selectedSQM + "" + strEmpanlledyear.ToString().Substring(strEmpanlledyear.ToString().Length - 2);
                        break;
                    case "3":
                        strUser = shotStateCode.ToString() + "00" + selectedSQM + "" + strEmpanlledyear.ToString().Substring(strEmpanlledyear.ToString().Length - 2);
                        break;
                    case "4":
                        strUser = shotStateCode.ToString() + "0" + selectedSQM + "" + strEmpanlledyear.ToString().Substring(strEmpanlledyear.ToString().Length - 2);
                        break;
                    case "5":
                        strUser = shotStateCode.ToString() + "" + selectedSQM + "" + strEmpanlledyear.ToString().Substring(strEmpanlledyear.ToString().Length - 2);
                        break;
                    default:
                        break;
                }


            }
            catch (Exception ex)
            {

                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return strUser;
            }

            return strUser;
        }
        #endregion Quality Monitors DAL Defination

        #region Qualification Model


        public bool AddMasterQualification(MasterQualificationViewModel masterQualViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_QUALIFICATION.Any(m => m.MAST_QUALIFICATION_NAME.ToUpper() == masterQualViewModel.MAST_QUALIFICATION_NAME.ToUpper()))
                {
                    message = "Qualification details already exist.";
                    return false;

                }
                bool flagQualAddEdit = true;
                MASTER_QUALIFICATION masterQualificationModel = CloneQualModel(masterQualViewModel, flagQualAddEdit);
                masterQualificationModel.MAST_QUALIFICATION_CODE = dbContext.MASTER_QUALIFICATION.Max(pc => (Int32?)pc.MAST_QUALIFICATION_CODE) == null ? 1 : (Int32)dbContext.MASTER_QUALIFICATION.Max(pc => (Int32?)pc.MAST_QUALIFICATION_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_QUALIFICATION.Add(masterQualificationModel);
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }


        }

        public bool EditMasterQualification(MasterQualificationViewModel masterQualViewModel, ref string message)
        {
            bool flagAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterQualViewModel.EncryptedQualCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                QualId = Convert.ToInt32(decryptedParameters["QualId"]);

                Int32 rowCount = dbContext.MASTER_QUALIFICATION.Where(qual => qual.MAST_QUALIFICATION_NAME == masterQualViewModel.MAST_QUALIFICATION_NAME && qual.MAST_QUALIFICATION_CODE != QualId).Count();

                if (rowCount > 0)
                {
                    message = "Qualification Name already exists.";
                    return false;
                }


                MASTER_QUALIFICATION masterQualificationModel = CloneQualModel(masterQualViewModel, flagAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterQualificationModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterQualification(int qualId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_QUALIFICATION masterQualificationModel = dbContext.MASTER_QUALIFICATION.Where(qual => qual.MAST_QUALIFICATION_CODE == qualId).FirstOrDefault();
                if (masterQualificationModel == null)
                {
                    return false;
                }
                dbContext.MASTER_QUALIFICATION.Remove(masterQualificationModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }


        }

        public Array ListMasterQualification(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_QUALIFICATION> lstMasterQualification = dbContext.MASTER_QUALIFICATION.ToList<MASTER_QUALIFICATION>();
                totalRecords = lstMasterQualification.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        lstMasterQualification = lstMasterQualification.OrderBy(x => x.MAST_QUALIFICATION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList<MASTER_QUALIFICATION>();
                    }
                    else
                    {

                        lstMasterQualification = lstMasterQualification.OrderByDescending(x => x.MAST_QUALIFICATION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList<MASTER_QUALIFICATION>();

                    }
                }
                else
                {

                    lstMasterQualification = lstMasterQualification.OrderBy(x => x.MAST_QUALIFICATION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList<MASTER_QUALIFICATION>();
                }
                return lstMasterQualification.Select(item => new
                {
                    cell = new[]
                        {
                            item.MAST_QUALIFICATION_NAME,
                            URLEncrypt.EncryptParameters1(new string[]{"QualId="+item.MAST_QUALIFICATION_CODE.ToString().Trim()})
                        }
                }).ToArray();
            }


            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterQualificationViewModel GetQualificationDetails_ByQualCode(int QualCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_QUALIFICATION masterQualificationModel = dbContext.MASTER_QUALIFICATION.FirstOrDefault(m => m.MAST_QUALIFICATION_CODE == QualCode);
                MasterQualificationViewModel masterQualViewModel = null;
                if (masterQualificationModel != null)
                {
                    masterQualViewModel = CloneQualObject(masterQualificationModel);

                }
                return masterQualViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public MasterQualificationViewModel CloneQualObject(MASTER_QUALIFICATION masterQualificationModel)
        {
            try
            {
                MasterQualificationViewModel masterQualViewModel = new MasterQualificationViewModel();
                masterQualViewModel.EncryptedQualCode = URLEncrypt.EncryptParameters1(new string[] { "QualId =" + masterQualificationModel.MAST_QUALIFICATION_CODE.ToString().Trim() });
                masterQualViewModel.MAST_QUALIFICATION_CODE = masterQualificationModel.MAST_QUALIFICATION_CODE;
                masterQualViewModel.MAST_QUALIFICATION_NAME = masterQualificationModel.MAST_QUALIFICATION_NAME;
                return masterQualViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        public MASTER_QUALIFICATION CloneQualModel(MasterQualificationViewModel masterQualViewModel, bool flagQualAddEdit)
        {
            try
            {
                MASTER_QUALIFICATION masterQualificationModel = new MASTER_QUALIFICATION();

                if (flagQualAddEdit)
                {
                    masterQualificationModel.MAST_QUALIFICATION_CODE = masterQualViewModel.MAST_QUALIFICATION_CODE;
                }
                else
                {
                    masterQualificationModel.MAST_QUALIFICATION_CODE = QualId;
                }

                masterQualificationModel.MAST_QUALIFICATION_NAME = masterQualViewModel.MAST_QUALIFICATION_NAME;
                return masterQualificationModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }
        #endregion Qualification Model

        #region Streams

        public bool AddMasterStreams(MasterStreamsViewModel masterStreamsViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_STREAMS.Any(m => m.MAST_STREAM_NAME.ToUpper() == masterStreamsViewModel.MAST_STREAM_NAME.ToUpper() && m.MAST_STREAM_TYPE == masterStreamsViewModel.MAST_STREAM_TYPE))
                {
                    message = "Stream Name already exists.";
                    return false;
                }
                bool flagAddEdit = true;
                MASTER_STREAMS masterStreamsModel = CloneStreamModel(masterStreamsViewModel, flagAddEdit);
                masterStreamsModel.MAST_STREAM_CODE = dbContext.MASTER_STREAMS.Max(cp => (Int32?)cp.MAST_STREAM_CODE) == null ? 1 : (Int32)dbContext.MASTER_STREAMS.Max(cp => (Int32)cp.MAST_STREAM_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_STREAMS.Add(masterStreamsModel);
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditMasterStreams(MasterStreamsViewModel masterStreamsViewModel, ref string message)
        {
            bool flagAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterStreamsViewModel.EncryptecStreamsCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });

                StreamsId = Convert.ToInt32(decryptedParameters["StreamsId"]);

                Int32 rowCount = dbContext.MASTER_STREAMS.Where(m => m.MAST_STREAM_NAME.ToUpper() == masterStreamsViewModel.MAST_STREAM_NAME.ToUpper() && m.MAST_STREAM_CODE != StreamsId && m.MAST_STREAM_TYPE == masterStreamsViewModel.MAST_STREAM_TYPE).Count();

                if (rowCount > 0)
                {
                    message = "Stream Name already exists.";
                    return false;
                }

                MASTER_STREAMS masterStreamsModel = CloneStreamModel(masterStreamsViewModel, flagAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterStreamsModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }



        public Boolean DeleteMasterStreams(int streamsId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_STREAMS masterStreamsModel = dbContext.MASTER_STREAMS.Where(m => m.MAST_STREAM_CODE == streamsId).FirstOrDefault();
                if (masterStreamsModel == null)
                {
                    return false;
                }
                dbContext.MASTER_STREAMS.Remove(masterStreamsModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterStreams(string streamType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstMasterStreams = (from list in dbContext.MASTER_STREAMS
                                        where
                                        (streamType == string.Empty ? "%" : list.MAST_STREAM_TYPE) == (streamType == string.Empty ? "%" : streamType)
                                        select new
                                        {
                                            list.MAST_STREAM_CODE,
                                            list.MAST_STREAM_NAME,
                                            list.MAST_STREAM_TYPE
                                        }).ToList();
                totalRecords = lstMasterStreams.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "StreamsName":
                                lstMasterStreams = lstMasterStreams.OrderBy(x => x.MAST_STREAM_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();

                                break;

                            case "StreamsType":
                                lstMasterStreams = lstMasterStreams.OrderBy(x => x.MAST_STREAM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();

                                break;


                        }
                    }

                    else
                    {
                        switch (sidx)
                        {
                            case "StreamsType":
                                lstMasterStreams = lstMasterStreams.OrderByDescending(x => x.MAST_STREAM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "StreamsName":
                                lstMasterStreams = lstMasterStreams.OrderByDescending(x => x.MAST_STREAM_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }

                }



                return lstMasterStreams.Select(item => new
                {
                    cell = new[]
                        {
                            item.MAST_STREAM_NAME,
                            item.MAST_STREAM_TYPE=="P"?"PMGSY":(item.MAST_STREAM_TYPE=="O"?"Others":"States"),
                            URLEncrypt.EncryptParameters1(new string[]{"StreamsId="+item.MAST_STREAM_CODE.ToString().Trim()})
                        }
                }).ToArray();
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterStreamsViewModel GetStreamsDetails_ByStream(int StreamCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_STREAMS masterStreamsModel = dbContext.MASTER_STREAMS.FirstOrDefault(m => m.MAST_STREAM_CODE == StreamCode);
                MasterStreamsViewModel masterStreamsViewModel = null;
                if (masterStreamsModel != null)
                {
                    masterStreamsViewModel = CloneStreamsObject(masterStreamsModel);

                }
                return masterStreamsViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public List<SelectListItem> GetStreamsCode()
        {
            List<SelectListItem> items = new List<SelectListItem>();

            items.Add(new SelectListItem
            {
                Text = "Others",
                Value = "O"
            });
            items.Add(new SelectListItem
            {
                Text = "PMGSY",
                Value = "P"
            });
            items.Add(new SelectListItem
            {
                Text = "State",
                Value = "S",
                Selected = true
            });


            return items;
        }


        public MasterStreamsViewModel CloneStreamsObject(MASTER_STREAMS masterStreamsModel)
        {
            try
            {
                MasterStreamsViewModel masterStreamsViewModel = new MasterStreamsViewModel();
                masterStreamsViewModel.EncryptecStreamsCode = URLEncrypt.EncryptParameters1(new string[] { "StreamsId=" + masterStreamsModel.MAST_STREAM_CODE.ToString() });
                masterStreamsViewModel.MAST_STREAM_TYPE = masterStreamsModel.MAST_STREAM_TYPE;
                masterStreamsViewModel.MAST_STREAM_NAME = masterStreamsModel.MAST_STREAM_NAME;
                return masterStreamsViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public MASTER_STREAMS CloneStreamModel(MasterStreamsViewModel masterStreamsViewModel, bool flagAddEdit)
        {
            try
            {
                MASTER_STREAMS masterStreamsModel = new MASTER_STREAMS();
                if (flagAddEdit)
                {
                    masterStreamsModel.MAST_STREAM_CODE = masterStreamsViewModel.MAST_STREAM_CODE;

                }
                else
                {

                    masterStreamsModel.MAST_STREAM_CODE = StreamsId;

                }

                masterStreamsModel.MAST_STREAM_TYPE = masterStreamsViewModel.MAST_STREAM_TYPE;
                masterStreamsModel.MAST_STREAM_NAME = masterStreamsViewModel.MAST_STREAM_NAME;
                return masterStreamsModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }

        }


        #endregion Streams

        #region Master_Execution


        public bool AddMasterExecution(MasterExecutionItemViewModel masterExecutionView, ref string message)
        {
            bool flagAddEdit = true;
            try
            {
                dbContext = new PMGSYEntities();

                MASTER_EXECUTION_ITEM masterExecutionModel = CloneExecutionModel(masterExecutionView, flagAddEdit);
                masterExecutionModel.MAST_HEAD_CODE = dbContext.MASTER_EXECUTION_ITEM.Max(pc => (Int32?)pc.MAST_HEAD_CODE) == null ? 1 : (Int32)dbContext.MASTER_EXECUTION_ITEM.Max(pc => (Int32?)pc.MAST_HEAD_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_EXECUTION_ITEM.Add(masterExecutionModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditMasterExecution(MasterExecutionItemViewModel masterExecutionView, ref string message)
        {
            bool flagAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterExecutionView.EncryptedHeadCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                HeadCode = Convert.ToInt32(decryptedParameters["ExecutionId"]);

                MASTER_EXECUTION_ITEM masterExecutionModel = CloneExecutionModel(masterExecutionView, flagAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterExecutionModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterExecution(int ExecutionId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_EXECUTION_ITEM masterExecutionModel = dbContext.MASTER_EXECUTION_ITEM.Where(m => m.MAST_HEAD_CODE == ExecutionId).FirstOrDefault();
                if (masterExecutionModel == null)
                {
                    return false;

                }
                dbContext.MASTER_EXECUTION_ITEM.Remove(masterExecutionModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterExecution(string ItemType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstMasterExecution = (from list in dbContext.MASTER_EXECUTION_ITEM
                                          where
                                           (ItemType == string.Empty ? "%" : list.MAST_HEAD_TYPE.ToUpper()).StartsWith(ItemType == string.Empty ? "%" : ItemType.ToUpper())
                                          select new
                                          {
                                              list.MAST_HEAD_CODE,
                                              list.MAST_HEAD_DESC,
                                              list.MAST_HEAD_SH_DESC,
                                              list.MAST_HEAD_TYPE
                                          }).ToList();


                totalRecords = lstMasterExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "HeadDesc":
                                lstMasterExecution = lstMasterExecution.OrderBy(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HeadShDesc":
                                lstMasterExecution = lstMasterExecution.OrderBy(m => m.MAST_HEAD_SH_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HeadType":
                                lstMasterExecution = lstMasterExecution.OrderBy(m => m.MAST_HEAD_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "HeadDesc":
                                lstMasterExecution = lstMasterExecution.OrderByDescending(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HeadShDesc":
                                lstMasterExecution = lstMasterExecution.OrderByDescending(m => m.MAST_HEAD_SH_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HeadType":
                                lstMasterExecution = lstMasterExecution.OrderByDescending(m => m.MAST_HEAD_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }

                }

                return lstMasterExecution.Select(item => new
                {
                    cell = new[]
                    {
                        item.MAST_HEAD_DESC!=null?item.MAST_HEAD_DESC.Trim():item.MAST_HEAD_DESC,
                        item.MAST_HEAD_SH_DESC,
                        item.MAST_HEAD_TYPE=="R"?"Road":(item.MAST_HEAD_TYPE=="L"?"LSB":""),

                        URLEncrypt.EncryptParameters1(new string[]{"ExecutionId="+item.MAST_HEAD_CODE.ToString().Trim()})

                    }


                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterExecutionItemViewModel GetExecutionDetails_ByExecutionCode(int ExecutionId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_EXECUTION_ITEM masterExecutionModel = dbContext.MASTER_EXECUTION_ITEM.FirstOrDefault(m => m.MAST_HEAD_CODE == ExecutionId);
                MasterExecutionItemViewModel masterExecutionView = null;
                if (masterExecutionModel != null)
                {
                    masterExecutionView = CloneExecutionObject(masterExecutionModel);

                }
                return masterExecutionView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public MASTER_EXECUTION_ITEM CloneExecutionModel(MasterExecutionItemViewModel masterExecutionView, bool flagAddEdit)
        {
            try
            {
                MASTER_EXECUTION_ITEM masterExecutionModel = new MASTER_EXECUTION_ITEM();

                if (flagAddEdit)
                {
                    masterExecutionModel.MAST_HEAD_CODE = masterExecutionView.MAST_HEAD_CODE;
                }
                else
                {
                    masterExecutionModel.MAST_HEAD_CODE = HeadCode;
                }
                masterExecutionModel.MAST_HEAD_DESC = masterExecutionView.MAST_HEAD_DESC;
                masterExecutionModel.MAST_HEAD_SH_DESC = masterExecutionView.MAST_HEAD_SH_DESC;
                masterExecutionModel.MAST_HEAD_TYPE = masterExecutionView.MAST_HEAD_TYPE;
                return masterExecutionModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }


        }

        public MasterExecutionItemViewModel CloneExecutionObject(MASTER_EXECUTION_ITEM masterExecutionModel)
        {
            try
            {
                MasterExecutionItemViewModel masterExecutionView = new MasterExecutionItemViewModel();
                masterExecutionView.EncryptedHeadCode = URLEncrypt.EncryptParameters1(new string[] { "ExecutionId=" + masterExecutionModel.MAST_HEAD_CODE.ToString().Trim() });
                masterExecutionView.MAST_HEAD_DESC = masterExecutionView.MAST_HEAD_DESC != null ? masterExecutionModel.MAST_HEAD_DESC.ToString().Trim() : masterExecutionModel.MAST_HEAD_DESC;
                masterExecutionView.MAST_HEAD_SH_DESC = masterExecutionModel.MAST_HEAD_SH_DESC;
                masterExecutionView.MAST_HEAD_TYPE = masterExecutionModel.MAST_HEAD_TYPE;
                return masterExecutionView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }

        }
        public List<SelectListItem> getAllHeadTypes()
        {

            List<SelectListItem> headTypeList = new List<SelectListItem>();

            headTypeList.Add(
               new SelectListItem()
               {
                   Text = "All Items",
                   Value = ""
               }
               );
            headTypeList.Add(
             new SelectListItem()
             {
                 Text = "LSB",
                 Value = "L"
             }
             );
            headTypeList.Add(
                new SelectListItem()
                {
                    Text = "Road",
                    Value = "R"
                }
                );

            return headTypeList;
        }
        #endregion Master_Execution

        #region ChecklistPoint Defination

        public bool AddMasterChecklist(MasterChecklistPointsViewModel masterChecklistViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if ((dbContext.MASTER_CHECKLIST_POINTS.Any(s => s.MAST_CHECKLIST_ISSUES == masterChecklistViewModel.MAST_CHECKLIST_ISSUES)))
                {
                    message = "Checklist Point details already exist.";
                    return false;
                }

                bool flagChecklistAddEdit = true;
                MASTER_CHECKLIST_POINTS masterChecklistModel = CloneChecklistModel(masterChecklistViewModel, flagChecklistAddEdit);
                masterChecklistModel.MAST_CHECKLIST_POINTID = dbContext.MASTER_CHECKLIST_POINTS.Max(cp => (Int32?)cp.MAST_CHECKLIST_POINTID) == null ? 1 : (Int32)dbContext.MASTER_CHECKLIST_POINTS.Max(cp => (Int32?)cp.MAST_CHECKLIST_POINTID) + 1;

                dbContext = new PMGSYEntities();
                dbContext.MASTER_CHECKLIST_POINTS.Add(masterChecklistModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool EditMasterChecklist(MasterChecklistPointsViewModel masterChecklistViewModel, ref string message)
        {
            bool flagChecklistAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();

                encryptedParameters = masterChecklistViewModel.EncryptedChecklistCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ChecklistCode = Convert.ToInt32(decryptedParameters["ChecklistID"].ToString());

                Int32 recordCount = dbContext.MASTER_CHECKLIST_POINTS.Where(m => m.MAST_CHECKLIST_ISSUES.ToUpper() == masterChecklistViewModel.MAST_CHECKLIST_ISSUES.ToUpper() && m.MAST_CHECKLIST_POINTID != ChecklistCode).Count();
                if (recordCount > 0)
                {
                    message = "Checklist Point Issue  already exists.";
                    return false;
                }

                MASTER_CHECKLIST_POINTS masterChecklistModel = CloneChecklistModel(masterChecklistViewModel, flagChecklistAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterChecklistModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterChecklist(int masterChecklistId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CHECKLIST_POINTS masterChecklistModel = dbContext.MASTER_CHECKLIST_POINTS.Where(m => m.MAST_CHECKLIST_POINTID == masterChecklistId).FirstOrDefault();

                if (masterChecklistModel == null)
                {
                    return false;
                }

                //Added by Abhishek kamble 27-nov-2013
                masterChecklistModel.USERID = PMGSYSession.Current.UserId;
                masterChecklistModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterChecklistModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.MASTER_CHECKLIST_POINTS.Remove(masterChecklistModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterChecklist(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_CHECKLIST_POINTS> lstMasterChecklistDetails = dbContext.MASTER_CHECKLIST_POINTS.Where(m => m.MAST_CHECKLIST_ACTIVE == "Y").ToList<MASTER_CHECKLIST_POINTS>();

                totalRecords = lstMasterChecklistDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        lstMasterChecklistDetails = lstMasterChecklistDetails.OrderBy(x => x.MAST_CHECKLIST_ISSUES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_CHECKLIST_POINTS>();

                    }
                    else
                    {

                        lstMasterChecklistDetails = lstMasterChecklistDetails.OrderByDescending(x => x.MAST_CHECKLIST_ISSUES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_CHECKLIST_POINTS>();

                    }
                }
                else
                {

                    lstMasterChecklistDetails = lstMasterChecklistDetails.OrderBy(x => x.MAST_CHECKLIST_ISSUES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList<MASTER_CHECKLIST_POINTS>();
                }

                return lstMasterChecklistDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_CHECKLIST_ISSUES.Trim(),
                       URLEncrypt.EncryptParameters1(new string[]{"ChecklistID="+item.MAST_CHECKLIST_POINTID.ToString().Trim()})
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterChecklistPointsViewModel GetChecklistDetails_ByChecklistCode(int ChecklistCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CHECKLIST_POINTS masterChecklistModel = dbContext.MASTER_CHECKLIST_POINTS.FirstOrDefault(m => m.MAST_CHECKLIST_POINTID == ChecklistCode);
                MasterChecklistPointsViewModel masterChecklistViewModel = null;
                if (masterChecklistModel != null)
                {
                    masterChecklistViewModel = CloneChecklistObject(masterChecklistModel);

                }
                return masterChecklistViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MasterChecklistPointsViewModel CloneChecklistObject(MASTER_CHECKLIST_POINTS masterChecklistModel)
        {
            try
            {
                MasterChecklistPointsViewModel masterChecklistViewModel = new MasterChecklistPointsViewModel();

                masterChecklistViewModel.EncryptedChecklistCode = URLEncrypt.EncryptParameters1(new string[] { "ChecklistID =" + masterChecklistModel.MAST_CHECKLIST_POINTID.ToString().Trim() });
                masterChecklistViewModel.MAST_CHECKLIST_POINTID = masterChecklistModel.MAST_CHECKLIST_POINTID;
                masterChecklistViewModel.MAST_CHECKLIST_ISSUES = masterChecklistModel.MAST_CHECKLIST_ISSUES;
                return masterChecklistViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public MASTER_CHECKLIST_POINTS CloneChecklistModel(MasterChecklistPointsViewModel masterChecklistViewModel, bool flagAddEdit)
        {
            try
            {

                MASTER_CHECKLIST_POINTS masterChecklist = new MASTER_CHECKLIST_POINTS();

                if (flagAddEdit)
                {
                    masterChecklist.MAST_CHECKLIST_POINTID = masterChecklistViewModel.MAST_CHECKLIST_POINTID;
                }
                else
                {
                    masterChecklist.MAST_CHECKLIST_POINTID = masterChecklistViewModel.MAST_CHECKLIST_POINTID = ChecklistCode;
                }
                masterChecklist.MAST_CHECKLIST_ACTIVE = "Y";
                masterChecklist.MAST_CHECKLIST_ISSUES = masterChecklistViewModel.MAST_CHECKLIST_ISSUES;

                //Added by Abhishek kamble 27-nov-2013
                masterChecklist.USERID = PMGSYSession.Current.UserId;
                masterChecklist.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                return masterChecklist;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        #endregion ChecklistPoint Defination

        #region  Agency Defination

        public bool AddMasterAgency(MasterAgencyViewModel masterAgencyViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_AGENCY.Any(s => s.MAST_AGENCY_NAME == masterAgencyViewModel.MAST_AGENCY_NAME && s.MAST_AGENCY_TYPE.ToUpper() == masterAgencyViewModel.MAST_AGENCY_TYPE.ToUpper()))
                {
                    message = "Agency Name already exists.";
                    return false;
                }

                bool flagAddEdit = true;
                MASTER_AGENCY masterAgencyModel = CloneAgencyModel(masterAgencyViewModel, flagAddEdit);
                masterAgencyModel.MAST_AGENCY_CODE = dbContext.MASTER_AGENCY.Max(cp => (Int32?)cp.MAST_AGENCY_CODE) == null ? 1 : (Int32)dbContext.MASTER_AGENCY.Max(cp => (Int32?)cp.MAST_AGENCY_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_AGENCY.Add(masterAgencyModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public bool EditMasterAgency(MasterAgencyViewModel masterAgencyViewModel, ref string message)
        {
            bool flagAddEdit = false;
            try
            {

                dbContext = new PMGSYEntities();
                encryptedParameters = masterAgencyViewModel.EncryptedAgencyCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                AgencyCode = Convert.ToInt32(decryptedParameters["AgencyID"]);

                Int32 recordCount = dbContext.MASTER_AGENCY.Where(m => m.MAST_AGENCY_NAME.ToUpper() == masterAgencyViewModel.MAST_AGENCY_NAME.ToUpper() && m.MAST_AGENCY_CODE != AgencyCode && m.MAST_AGENCY_TYPE.ToUpper() == masterAgencyViewModel.MAST_AGENCY_TYPE.ToUpper()).Count();
                if (recordCount > 0)
                {
                    message = "Agency Name already exists.";
                    return false;
                }

                MASTER_AGENCY masterAgencyModel = CloneAgencyModel(masterAgencyViewModel, flagAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterAgencyModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterAgency(int masterAgencyId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_AGENCY masterAgencyModel = dbContext.MASTER_AGENCY.Where(m => m.MAST_AGENCY_CODE == masterAgencyId).FirstOrDefault();

                if (masterAgencyModel == null)
                {
                    return false;
                }


                //Added by abhishek kamble 27-nov-2013
                masterAgencyModel.USERID = PMGSYSession.Current.UserId;
                masterAgencyModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterAgencyModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.MASTER_AGENCY.Remove(masterAgencyModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterAgency(string agencyType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {

            try
            {
                dbContext = new PMGSYEntities();
                var lstMasterAgencyDetails = (from list in dbContext.MASTER_AGENCY
                                              where
                                              (agencyType == string.Empty ? "%" : list.MAST_AGENCY_TYPE) == (agencyType == string.Empty ? "%" : agencyType)
                                              select new
                                              {
                                                  list.MAST_AGENCY_CODE,
                                                  list.MAST_AGENCY_NAME,
                                                  list.MAST_AGENCY_TYPE

                                              }).ToList();
                totalRecords = lstMasterAgencyDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_AGENCY_NAME":
                                lstMasterAgencyDetails = lstMasterAgencyDetails.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_AGENCY_TYPE":
                                lstMasterAgencyDetails = lstMasterAgencyDetails.OrderBy(x => x.MAST_AGENCY_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_AGENCY_NAME":
                                lstMasterAgencyDetails = lstMasterAgencyDetails.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_AGENCY_TYPE":
                                lstMasterAgencyDetails = lstMasterAgencyDetails.OrderByDescending(x => x.MAST_AGENCY_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                }


                return lstMasterAgencyDetails.Select(item => new
                {
                    cell = new[]{
                                    item.MAST_AGENCY_NAME.Trim(),


                                    item.MAST_AGENCY_TYPE == "G"?"Government":(item.MAST_AGENCY_TYPE== "I"?"Proposal Inclusion":(item.MAST_AGENCY_TYPE == "O"?"Others":"")) ,
                                    item.MAST_AGENCY_CODE==26?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"AgencyID="+item.MAST_AGENCY_CODE.ToString().Trim()})
                            }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        public MasterAgencyViewModel GetAgencyDetails_ByAgencyCode(int AgencyCode)
        {

            try
            {
                dbContext = new PMGSYEntities();
                MASTER_AGENCY masterAgencyModel = dbContext.MASTER_AGENCY.FirstOrDefault(m => m.MAST_AGENCY_CODE == AgencyCode);
                MasterAgencyViewModel masterAgencyViewModel = null;
                if (masterAgencyModel != null)
                {
                    masterAgencyViewModel = CloneAgencyObject(masterAgencyModel);

                }
                return masterAgencyViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public MASTER_AGENCY CloneAgencyModel(MasterAgencyViewModel masterAgencyViewModel, bool flagAddEdit)
        {
            try
            {
                MASTER_AGENCY masterAgencyModel = new MASTER_AGENCY();

                if (flagAddEdit)
                {
                    masterAgencyModel.MAST_AGENCY_CODE = masterAgencyViewModel.MAST_AGENCY_CODE;
                }
                else
                {
                    masterAgencyModel.MAST_AGENCY_CODE = AgencyCode;
                }


                masterAgencyModel.MAST_AGENCY_NAME = masterAgencyViewModel.MAST_AGENCY_NAME;
                masterAgencyModel.MAST_AGENCY_TYPE = masterAgencyViewModel.MAST_AGENCY_TYPE;

                //Added by abhishek kamble 27-nov-2013
                masterAgencyModel.USERID = PMGSYSession.Current.UserId;
                masterAgencyModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                return masterAgencyModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }

        }

        public MasterAgencyViewModel CloneAgencyObject(MASTER_AGENCY masterAgencyModel)
        {
            try
            {
                MasterAgencyViewModel masterAgencyViewModel = new MasterAgencyViewModel();

                masterAgencyViewModel.EncryptedAgencyCode = URLEncrypt.EncryptParameters1(new string[] { "AgencyID=" + masterAgencyModel.MAST_AGENCY_CODE.ToString().Trim() });
                masterAgencyViewModel.MAST_AGENCY_CODE = masterAgencyModel.MAST_AGENCY_CODE;
                masterAgencyViewModel.MAST_AGENCY_NAME = masterAgencyModel.MAST_AGENCY_NAME;
                masterAgencyViewModel.MAST_AGENCY_TYPE = masterAgencyModel.MAST_AGENCY_TYPE;

                return masterAgencyViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        public List<SelectListItem> GetAgencyCode()
        {
            List<SelectListItem> list = new List<SelectListItem>();

            list.Add(new SelectListItem
            {
                Text = "Government",
                Value = "G"
            });

            list.Add(new SelectListItem
            {
                Text = "Others",
                Value = "O"
            });
            return list;
        }

        #endregion Master Agency Defination

        #region    Reason Defination

        public bool AddMasterReason(MasterReasonViewModel masterReasonViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.MASTER_REASON.Any(s => s.MAST_REASON_NAME == masterReasonViewModel.MAST_REASON_NAME && s.MAST_REASON_TYPE.ToUpper() == masterReasonViewModel.MAST_REASON_TYPE.ToUpper()))
                {
                    message = " Reason Name already exists.";
                    return false;
                }

                bool flagReasonAddEdit = true;
                MASTER_REASON masterReasonModel = CloneReasonModel(masterReasonViewModel, flagReasonAddEdit);
                masterReasonModel.MAST_REASON_CODE = dbContext.MASTER_REASON.Max(cp => (Int32?)cp.MAST_REASON_CODE) == null ? 1 : (Int32)dbContext.MASTER_REASON.Max(cp => (Int32?)cp.MAST_REASON_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.MASTER_REASON.Add(masterReasonModel);
                dbContext.SaveChanges();
                return true;
            }

            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public bool EditMasterReason(MasterReasonViewModel masterReasonViewModel, ref string message)
        {
            bool flagReasonAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = masterReasonViewModel.EncryptedReasonCode.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ReasonCode = Convert.ToInt32(decryptedParameters["ReasonID"].ToString());

                Int32 recordCount = dbContext.MASTER_REASON.Where(m => m.MAST_REASON_NAME.ToUpper() == masterReasonViewModel.MAST_REASON_NAME.ToUpper() && m.MAST_REASON_CODE != ReasonCode && m.MAST_REASON_TYPE.ToUpper() == masterReasonViewModel.MAST_REASON_TYPE.ToUpper()).Count();
                if (recordCount > 0)
                {
                    message = "Reason Name already exists.";
                    return false;
                }

                MASTER_REASON masterReasonModel = CloneReasonModel(masterReasonViewModel, flagReasonAddEdit);
                dbContext = new PMGSYEntities();
                dbContext.Entry(masterReasonModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteMasterReason(int masterReasonId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_REASON masterReasonModel = dbContext.MASTER_REASON.Where(m => m.MAST_REASON_CODE == masterReasonId).FirstOrDefault();

                if (masterReasonModel == null)
                {
                    return false;
                }

                dbContext.MASTER_REASON.Remove(masterReasonModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMasterReason(string reasonType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {

            try
            {
                dbContext = new PMGSYEntities();
                var lstMasterReasonDetails = (from list in dbContext.MASTER_REASON
                                              where
                                              (reasonType == string.Empty ? "%" : list.MAST_REASON_TYPE) == (reasonType == string.Empty ? "%" : reasonType)
                                              select new
                                              {
                                                  list.MAST_REASON_CODE,
                                                  list.MAST_REASON_NAME,
                                                  list.MAST_REASON_TYPE

                                              }).ToList();
                totalRecords = lstMasterReasonDetails.Count();

                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {

                            case "MAST_REASON_NAME":
                                lstMasterReasonDetails = lstMasterReasonDetails.OrderBy(x => x.MAST_REASON_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;



                            case "MAST_REASON_TYPE":
                                lstMasterReasonDetails = lstMasterReasonDetails.OrderBy(x => x.MAST_REASON_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_REASON_NAME":
                                lstMasterReasonDetails = lstMasterReasonDetails.OrderByDescending(x => x.MAST_REASON_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "MAST_REASON_TYPE":
                                lstMasterReasonDetails = lstMasterReasonDetails.OrderByDescending(x => x.MAST_REASON_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }

                var gridData = lstMasterReasonDetails.Select(item => new
                {
                    cell = new[]{
                    item.MAST_REASON_NAME.ToString(),

                    item.MAST_REASON_TYPE == "H"?"Habitation Not Connected":(item.MAST_REASON_TYPE== "I"?"Proposal Inclusion":(item.MAST_REASON_TYPE == "D"?"Delay in Project":( item.MAST_REASON_TYPE=="A"?"Account":( item.MAST_REASON_TYPE=="S"?"Proposal Rejection":"")))) ,
                    URLEncrypt.EncryptParameters1(new string[]{"ReasonID=" + item.MAST_REASON_CODE.ToString().Trim()}),
                }
                }).ToArray();

                return gridData;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterReasonViewModel GetReasonDetails_ByReasonCode(int reasonCode)
        {

            try
            {
                dbContext = new PMGSYEntities();
                MASTER_REASON masterReasonModel = dbContext.MASTER_REASON.FirstOrDefault(m => m.MAST_REASON_CODE == reasonCode);
                MasterReasonViewModel masterReasonViewModel = null;
                if (masterReasonModel != null)
                {
                    masterReasonViewModel = CloneReasonObject(masterReasonModel);

                }
                return masterReasonViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }


        }

        public MASTER_REASON CloneReasonModel(MasterReasonViewModel masterReasonViewModel, bool flagAddEdit)
        {
            try
            {
                MASTER_REASON masterReasonModel = new MASTER_REASON();

                if (flagAddEdit)
                {
                    masterReasonModel.MAST_REASON_CODE = masterReasonViewModel.MAST_REASON_CODE;
                }
                else
                {
                    masterReasonModel.MAST_REASON_CODE = ReasonCode;
                }


                masterReasonModel.MAST_REASON_NAME = masterReasonViewModel.MAST_REASON_NAME;
                masterReasonModel.MAST_REASON_TYPE = masterReasonViewModel.MAST_REASON_TYPE;

                return masterReasonModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }

        public MasterReasonViewModel CloneReasonObject(MASTER_REASON masterReasonModel)
        {
            try
            {
                MasterReasonViewModel masterReasonViewModel = new MasterReasonViewModel();

                masterReasonViewModel.EncryptedReasonCode = URLEncrypt.EncryptParameters1(new string[] { "ReasonID =" + masterReasonModel.MAST_REASON_CODE.ToString().Trim() });
                masterReasonViewModel.MAST_REASON_CODE = masterReasonModel.MAST_REASON_CODE;
                masterReasonViewModel.MAST_REASON_NAME = masterReasonModel.MAST_REASON_NAME;
                masterReasonViewModel.MAST_REASON_TYPE = masterReasonModel.MAST_REASON_TYPE;

                return masterReasonViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
        }



        public List<SelectListItem> GetReasonCode()
        {
            List<SelectListItem> list = new List<SelectListItem>();

            list.Add(new SelectListItem
            {
                Text = "Account",
                Value = "A"
            });
            list.Add(new SelectListItem
            {
                Text = "Delay In Project",
                Value = "D"
            });

            list.Add(new SelectListItem
            {
                Text = "Habitation Not Connected",
                Value = "H"
            });

            list.Add(new SelectListItem
            {
                Text = "Proposal Inclusion",
                Value = "I"
            });
            list.Add(new SelectListItem
            {
                Text = "Proposal Rejection",
                Value = "S"
            });
            return list;
        }
        #endregion   Reason

        #region Technical Agency Defination



        public bool AddAdminTechnicalAgency(AdminTechnicalAgencyViewModel adminTechnicalAgencyViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.ADMIN_TECHNICAL_AGENCY.Any(m => m.ADMIN_TA_NAME.ToUpper() == adminTechnicalAgencyViewModel.ADMIN_TA_NAME.ToUpper()))//&& m.ADMIN_TA_CONTACT_DESG == adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_DESG && m.ADMIN_TA_CONTACT_NAME == adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_NAME
                {
                    message = "Technical Agency Name already exists.";
                    return false;
                }
                bool flagAddEdit = true;
                ADMIN_TECHNICAL_AGENCY AdminTechnicalAgencyCode = CloneAdminTechnicalAgencyModel(new ADMIN_TECHNICAL_AGENCY(), adminTechnicalAgencyViewModel, flagAddEdit);

                AdminTechnicalAgencyCode.ADMIN_TA_CODE = dbContext.ADMIN_TECHNICAL_AGENCY.Max(cp => (Int32?)cp.ADMIN_TA_CODE) == null ? 1 : (Int32)dbContext.ADMIN_TECHNICAL_AGENCY.Max(cp => (Int32?)cp.ADMIN_TA_CODE) + 1;
                dbContext = new PMGSYEntities();
                dbContext.ADMIN_TECHNICAL_AGENCY.Add(AdminTechnicalAgencyCode);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditAdminTechnicalAgency(AdminTechnicalAgencyViewModel adminTechnicalAgencyViewModel, ref string message)
        {

            try
            {

                dbContext = new PMGSYEntities();
                encryptedParameters = adminTechnicalAgencyViewModel.EncryptedTACode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                TACode = Convert.ToInt32(decryptedParameters["TACode"].ToString());

                if (dbContext.ADMIN_TECHNICAL_AGENCY.Any(m => m.ADMIN_TA_NAME.ToUpper() == adminTechnicalAgencyViewModel.ADMIN_TA_NAME.ToUpper() && m.ADMIN_TA_CODE != TACode))//&& m.ADMIN_TA_CONTACT_DESG == adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_DESG && m.ADMIN_TA_CONTACT_NAME == adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_NAME
                {
                    message = "Technical Agency Name already exists.";
                    return false;
                }

                ADMIN_TECHNICAL_AGENCY adminTechnicalAgencyModel = new ADMIN_TECHNICAL_AGENCY();

                adminTechnicalAgencyModel = dbContext.ADMIN_TECHNICAL_AGENCY.Where(ta => ta.ADMIN_TA_CODE == TACode).FirstOrDefault();

                if (adminTechnicalAgencyModel == null)
                {
                    return false;
                }

                //adminTechnicalAgencyModel = CloneAdminTechnicalAgencyModel(adminTechnicalAgencyModel,adminTechnicalAgencyViewModel, flagAddEdit);

                adminTechnicalAgencyModel.ADMIN_TA_WEBISTE = adminTechnicalAgencyViewModel.ADMIN_TA_WEBISTE != null ? adminTechnicalAgencyViewModel.ADMIN_TA_WEBISTE.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_WEBISTE;

                adminTechnicalAgencyModel.ADMIN_TA_TYPE = adminTechnicalAgencyViewModel.ADMIN_TA_TYPE != null ? adminTechnicalAgencyViewModel.ADMIN_TA_TYPE.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_TYPE;

                adminTechnicalAgencyModel.ADMIN_TA_ADDRESS1 = adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS1 != null ? adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS1.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS1;

                adminTechnicalAgencyModel.ADMIN_TA_ADDRESS2 = adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS2 != null ? adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS2.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS2;

                adminTechnicalAgencyModel.ADMIN_TA_CONTACT_DESG = adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_DESG == 0 ? null : adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_DESG;

                adminTechnicalAgencyModel.ADMIN_TA_EMAIL = adminTechnicalAgencyViewModel.ADMIN_TA_EMAIL != null ? adminTechnicalAgencyViewModel.ADMIN_TA_EMAIL.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_EMAIL;

                adminTechnicalAgencyModel.ADMIN_TA_FAX = adminTechnicalAgencyViewModel.ADMIN_TA_FAX != null ? adminTechnicalAgencyViewModel.ADMIN_TA_FAX.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_FAX;

                adminTechnicalAgencyModel.ADMIN_TA_MOBILE_NO = adminTechnicalAgencyViewModel.ADMIN_TA_MOBILE_NO != null ? adminTechnicalAgencyViewModel.ADMIN_TA_MOBILE_NO.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_MOBILE_NO;

                adminTechnicalAgencyModel.ADMIN_TA_NAME = adminTechnicalAgencyViewModel.ADMIN_TA_NAME != null ? adminTechnicalAgencyViewModel.ADMIN_TA_NAME.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_NAME;

                adminTechnicalAgencyModel.ADMIN_TA_SERVICE_TAX = adminTechnicalAgencyViewModel.ADMIN_TA_SERVICE_TAX != null ? adminTechnicalAgencyViewModel.ADMIN_TA_SERVICE_TAX.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_SERVICE_TAX;

                adminTechnicalAgencyModel.ADMIN_TA_PHONE1 = adminTechnicalAgencyViewModel.ADMIN_TA_PHONE1 != null ? adminTechnicalAgencyViewModel.ADMIN_TA_PHONE1.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_PHONE1;

                adminTechnicalAgencyModel.ADMIN_TA_CONTACT_NAME = adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_NAME != null ? adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_NAME.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_NAME;

                adminTechnicalAgencyModel.ADMIN_TA_PHONE2 = adminTechnicalAgencyViewModel.ADMIN_TA_PHONE2 != null ? adminTechnicalAgencyViewModel.ADMIN_TA_PHONE2.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_PHONE2;

                adminTechnicalAgencyModel.ADMIN_TA_PIN = adminTechnicalAgencyViewModel.ADMIN_TA_PIN != null ? adminTechnicalAgencyViewModel.ADMIN_TA_PIN.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_PIN;

                adminTechnicalAgencyModel.ADMIN_TA_REMARKS = adminTechnicalAgencyViewModel.ADMIN_TA_REMARKS != null ? adminTechnicalAgencyViewModel.ADMIN_TA_REMARKS.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_REMARKS;

                adminTechnicalAgencyModel.ADMIN_TA_STD_FAX = adminTechnicalAgencyViewModel.ADMIN_TA_STD_FAX != null ? adminTechnicalAgencyViewModel.ADMIN_TA_STD_FAX.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_STD_FAX;

                adminTechnicalAgencyModel.ADMIN_TA_STD1 = adminTechnicalAgencyViewModel.ADMIN_TA_STD1 != null ? adminTechnicalAgencyViewModel.ADMIN_TA_STD1.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_STD1;

                adminTechnicalAgencyModel.ADMIN_TA_STD2 = adminTechnicalAgencyViewModel.ADMIN_TA_STD2 != null ? adminTechnicalAgencyViewModel.ADMIN_TA_STD2.Trim() : adminTechnicalAgencyViewModel.ADMIN_TA_STD2;

                adminTechnicalAgencyModel.MAST_DISTRICT_CODE = adminTechnicalAgencyViewModel.MAST_DISTRICT_CODE == 0 ? null : adminTechnicalAgencyViewModel.MAST_DISTRICT_CODE;

                adminTechnicalAgencyModel.MAST_STATE_CODE = adminTechnicalAgencyViewModel.MAST_STATE_CODE == 0 ? null : adminTechnicalAgencyViewModel.MAST_STATE_CODE;

                adminTechnicalAgencyModel.MASTER_DESIGNATION = adminTechnicalAgencyViewModel.MASTER_DESIGNATION;


                //added by abhishek kamble 27-nov-2013
                adminTechnicalAgencyModel.USERID = PMGSYSession.Current.UserId;
                adminTechnicalAgencyModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(adminTechnicalAgencyModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public Boolean DeleteAdminTechnicalAgency(int AdminTechnicalAgencyId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_TECHNICAL_AGENCY AdminTechnicalAgencyCode = dbContext.ADMIN_TECHNICAL_AGENCY.Where(m => m.ADMIN_TA_CODE == AdminTechnicalAgencyId).FirstOrDefault();
                if (AdminTechnicalAgencyCode == null)
                {
                    return false;
                }

                //added by abhishek kamble 27-nov-2013
                AdminTechnicalAgencyCode.USERID = PMGSYSession.Current.UserId;
                AdminTechnicalAgencyCode.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(AdminTechnicalAgencyCode).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_TECHNICAL_AGENCY.Remove(AdminTechnicalAgencyCode);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array ListdistrictTechnicalAgency(int? page, int? rows, string sidx, string sord, out long totalRecords, string agencyType, int stateCode, int districtCode)
        {
            try
            {
                //int stateCode = Convert.ToInt32(state);
                //int districtCode = Convert.ToInt32(district);
                dbContext = new PMGSYEntities();
                #region All Technical Agencies
                //if (agencyType == "0")
                //{
                //    var lstAdminTechnicalAgency = (from item in dbContext.ADMIN_TECHNICAL_AGENCY

                //                                   join ATS in dbContext.ADMIN_TA_STATE
                //                                   on new { a = item.ADMIN_TA_CODE, b = item.MAST_STATE_CODE, c = item.MAST_DISTRICT_CODE }
                //                                   equals new { a = ATS.ADMIN_TA_CODE, b = (int?)ATS.MAST_STATE_CODE, c = ATS.MAST_DISTRICT_CODE }
                //                                   //into outerAdminState
                //                                   //from ATS in outerAdminState.DefaultIfEmpty()


                //                                   where
                //                                   //(agencyType == "0" ? "%" : item.ADMIN_TA_TYPE) == (agencyType == "0" ? "%" : agencyType) &&
                //                                   (stateCode == 0 ? 1 : item.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                //                                   (districtCode == 0 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode)
                //                                   //&& ATS.MAST_IS_ACTIVE == "Y"
                //                                   //(state == string.Empty ? "%" : item.ADMIN_TA_NAME).Contains(taName == string.Empty ? "%" : taName)

                //                                   select new
                //                                   {
                //                                       item.ADMIN_TA_NAME,
                //                                       item.ADMIN_TA_CONTACT_NAME,
                //                                       ATS.MAST_START_DATE,
                //                                       ATS.MAST_END_DATE,
                //                                       item.ADMIN_TA_TYPE,
                //                                       item.MASTER_STATE.MAST_STATE_NAME,
                //                                       item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                //                                       ATS.MAST_IS_ACTIVE,
                //                                   }).ToList();



                //    totalRecords = lstAdminTechnicalAgency.Count();

                //    if (sidx.Trim() != string.Empty)
                //    {
                //        if (sord == "asc")
                //        {
                //            switch (sidx)
                //            {
                //                //case "StateName":
                //                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //                //    break;


                //                case "TAName":
                //                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //                    break;

                //                default:
                //                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_TYPE).ThenBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //                    break;

                //            }
                //        }
                //        else
                //        {
                //            switch (sidx)
                //            {
                //                //case "StateName":
                //                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //                //    break;

                //                case "TAName":
                //                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //                    break;
                //                default:
                //                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_TYPE).ThenBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //                    break;
                //            }
                //        }
                //    }
                //    else
                //    {
                //        lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_TYPE).ThenBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //    }

                //    var result = lstAdminTechnicalAgency.Select(item => new
                //    {
                //        item.ADMIN_TA_NAME,
                //        item.ADMIN_TA_CONTACT_NAME,
                //        item.MAST_START_DATE,
                //        item.MAST_END_DATE,
                //        item.ADMIN_TA_TYPE,
                //        item.MAST_STATE_NAME,
                //        item.MAST_DISTRICT_NAME,
                //        item.MAST_IS_ACTIVE,
                //    }
                //    ).ToArray();

                //    return result.Select(item => new
                //    {

                //        cell = new[]
                //{           
                //           item.ADMIN_TA_NAME ==null?"-":(item.ADMIN_TA_NAME.Trim()==string.Empty?"-":item.ADMIN_TA_NAME.Trim()),

                //           item.ADMIN_TA_CONTACT_NAME==null?"-":(item.ADMIN_TA_CONTACT_NAME==string.Empty?"-":item.ADMIN_TA_CONTACT_NAME.Trim()),

                //           item.MAST_START_DATE==null?"-":(item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()==string.Empty?"-":item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()),
                //           item.MAST_START_DATE==null?"-":(item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()==string.Empty?"-":item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()),
                //           item.ADMIN_TA_TYPE=="P"?"PTA":(item.ADMIN_TA_TYPE=="S"?"STA":""),
                //           item.MAST_STATE_NAME,
                //           item.MAST_DISTRICT_NAME,
                //           item.MAST_IS_ACTIVE,

                //            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Map States' onClick ='MapState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Map Districts' onClick ='MapDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map Districts</a></td></tr></table></center>",
                //            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Mapped States' onClick ='MappedState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Mapped Districts' onClick ='MappedDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped Districts</a></td></tr></table></center>",
                //            //URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()}),
                //            //URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()})

                //}
                //    }).ToArray();
                //}
                #endregion
                if (agencyType == "S")
                {
                    #region old Logic
                    //var lstAdminTechnicalAgency = (from item in dbContext.ADMIN_TECHNICAL_AGENCY

                    //                               join ATS in dbContext.ADMIN_TA_STATE
                    //                               on new { a = item.ADMIN_TA_CODE, b = item.MAST_STATE_CODE/*, c = item.MAST_DISTRICT_CODE*/ }
                    //                               equals new { a = ATS.ADMIN_TA_CODE, b = (int?)ATS.MAST_STATE_CODE/*, c = ATS.MAST_DISTRICT_CODE*/ }
                    //                               //into outerAdminState
                    //                               //from ATS in outerAdminState.DefaultIfEmpty()


                    //                               where
                    //                               item.ADMIN_TA_TYPE == "S" &&
                    //                               (stateCode == 0 ? 1 : ATS.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                    //                               (districtCode == 0 ? 1 : ATS.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode) 
                    //                               //&& ATS.MAST_IS_ACTIVE == "Y"
                    //                               //(state == string.Empty ? "%" : item.ADMIN_TA_NAME).Contains(taName == string.Empty ? "%" : taName)

                    //                               select new
                    //                               {

                    //                                   item.ADMIN_TA_NAME,
                    //                                   item.ADMIN_TA_CONTACT_NAME,
                    //                                   ATS.MAST_START_DATE,
                    //                                   ATS.MAST_END_DATE,
                    //                                   item.ADMIN_TA_TYPE,
                    //                                   //item.MASTER_STATE.MAST_STATE_NAME,
                    //                                   //item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                    //                                   ATS.MASTER_STATE.MAST_STATE_NAME,
                    //                                   ATS.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                    //                                   ATS.MAST_IS_ACTIVE,
                    //                               }).ToList()/*.GroupBy(e => new {                Select on distinct columns
                    //                                   e.ADMIN_TA_NAME,
                    //                                   e.ADMIN_TA_CONTACT_NAME,
                    //                                   e.MAST_START_DATE,
                    //                                   e.MAST_END_DATE,
                    //                                   e.ADMIN_TA_TYPE,
                    //                                   //e.MAST_STATE_NAME,
                    //                                   //e.MAST_DISTRICT_NAME,
                    //                                   //e.MAST_IS_ACTIVE,
                    //                                    }).Select(g => g.First());*/;
                    #endregion
                    var lstAdminTechnicalAgency = (from item in dbContext.ADMIN_TECHNICAL_AGENCY

                                                   from ATS in dbContext.ADMIN_TA_STATE
                                                   where
                                                   item.ADMIN_TA_CODE == ATS.ADMIN_TA_CODE &&
                                                   item.ADMIN_TA_TYPE == "S" &&
                                                   (stateCode == 0 ? 1 : ATS.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                                                   (districtCode == 0 ? 1 : ATS.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode)
                                                   //&& ATS.MAST_IS_ACTIVE == "Y"
                                                   //(state == string.Empty ? "%" : item.ADMIN_TA_NAME).Contains(taName == string.Empty ? "%" : taName)

                                                   select new
                                                   {

                                                       item.ADMIN_TA_NAME,
                                                       item.ADMIN_TA_CONTACT_NAME,
                                                       ATS.MAST_START_DATE,
                                                       ATS.MAST_END_DATE,
                                                       item.ADMIN_TA_TYPE,
                                                       //item.MASTER_STATE.MAST_STATE_NAME,
                                                       //item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                                       ATS.MASTER_STATE.MAST_STATE_NAME,
                                                       ATS.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                                       ATS.MAST_IS_FINALIZED,
                                                       ATS.MAST_IS_ENABLED,
                                                       ATS.MAST_IS_ACTIVE,
                                                   }).ToList()
                             ///Select on distinct columns
                             /*.GroupBy(e => new {                
                                 e.ADMIN_TA_NAME,
                                 e.ADMIN_TA_CONTACT_NAME,
                                 e.MAST_START_DATE,
                                 e.MAST_END_DATE,
                                 e.ADMIN_TA_TYPE,
                                 //e.MAST_STATE_NAME,
                                 //e.MAST_DISTRICT_NAME,
                                 //e.MAST_IS_ACTIVE,
                                  }).Select(g => g.First());*/;


                    totalRecords = lstAdminTechnicalAgency.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord == "asc")
                        {
                            switch (sidx)
                            {
                                //case "StateName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;


                                //case "TAName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;

                                default:
                                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.MAST_DISTRICT_NAME).ThenByDescending(m => m.MAST_START_DATE).ThenByDescending(m => m.MAST_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                    break;

                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                //case "StateName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;

                                //case "TAName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;
                                default:
                                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.MAST_DISTRICT_NAME).ThenByDescending(m => m.MAST_START_DATE).ThenByDescending(m => m.MAST_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.MAST_DISTRICT_NAME).ThenByDescending(m => m.MAST_START_DATE).ThenByDescending(m => m.MAST_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }

                    var result = lstAdminTechnicalAgency.Select(item => new
                    {
                        item.ADMIN_TA_NAME,
                        item.ADMIN_TA_CONTACT_NAME,
                        item.MAST_START_DATE,
                        item.MAST_END_DATE,
                        item.ADMIN_TA_TYPE,
                        item.MAST_STATE_NAME,
                        item.MAST_DISTRICT_NAME,
                        item.MAST_IS_FINALIZED,
                        item.MAST_IS_ENABLED,
                        item.MAST_IS_ACTIVE,
                    }
                    ).ToArray();

                    return result.Select(item => new
                    {

                        cell = new[]
                {
                           item.MAST_STATE_NAME,
                           item.MAST_DISTRICT_NAME==null?"-":item.MAST_DISTRICT_NAME,


                           item.MAST_START_DATE==null?"-":(item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()==string.Empty?"-":item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()),
                           item.MAST_END_DATE==null?"-":(Convert.ToDateTime(item.MAST_END_DATE).ToString("dd/MM/yyyy").Trim()==string.Empty?"-":Convert.ToDateTime(item.MAST_END_DATE).ToString("dd/MM/yyyy").Trim()),
                           item.ADMIN_TA_TYPE=="P"?"PTA":(item.ADMIN_TA_TYPE=="S"?"STA":""),
                           item.ADMIN_TA_NAME ==null?"-":(item.ADMIN_TA_NAME.Trim()==string.Empty?"-":item.ADMIN_TA_NAME.Trim()),

                           item.ADMIN_TA_CONTACT_NAME==null?"-":(item.ADMIN_TA_CONTACT_NAME==string.Empty?"-":item.ADMIN_TA_CONTACT_NAME.Trim()),
                           item.MAST_IS_FINALIZED == "Y"?"Yes":"No",
                           item.MAST_IS_ENABLED == "Y"?"Yes":"No",
                           item.MAST_IS_ACTIVE == "Y"?"Yes":"No",
                            
                            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Map States' onClick ='MapState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Map Districts' onClick ='MapDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map Districts</a></td></tr></table></center>",
                            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Mapped States' onClick ='MappedState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Mapped Districts' onClick ='MappedDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped Districts</a></td></tr></table></center>",
                            //URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()}),
                            //URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()})

                }
                    }).ToArray();
                }
                else
                {
                    var lstAdminTechnicalAgency = (from item in dbContext.ADMIN_TECHNICAL_AGENCY

                                                   from ATS in dbContext.ADMIN_TA_STATE
                                                       //on new { a = item.ADMIN_TA_CODE/*, b = item.MAST_STATE_CODE*/}
                                                       //equals new { a = ATS.ADMIN_TA_CODE/*, b = (int?)ATS.MAST_STATE_CODE*/}

                                                   where
                                                   item.ADMIN_TA_CODE == ATS.ADMIN_TA_CODE &&
                                                   item.ADMIN_TA_TYPE == "P" &&
                                                   (stateCode == 0 ? 1 : ATS.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode)
                                                   //&& ATS.MAST_IS_ACTIVE=="Y"
                                                   //(districtCode == 0 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode)
                                                   //(state == string.Empty ? "%" : item.ADMIN_TA_NAME).Contains(taName == string.Empty ? "%" : taName)

                                                   select new
                                                   {
                                                       item.ADMIN_TA_NAME,
                                                       item.ADMIN_TA_CONTACT_NAME,
                                                       ATS.MAST_START_DATE,
                                                       ATS.MAST_END_DATE,
                                                       item.ADMIN_TA_TYPE,
                                                       //item.MASTER_STATE.MAST_STATE_NAME,
                                                       //item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                                       ATS.MASTER_STATE.MAST_STATE_NAME,
                                                       ATS.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                                       ATS.MAST_IS_FINALIZED,
                                                       ATS.MAST_IS_ENABLED,
                                                       ATS.MAST_IS_ACTIVE,
                                                   }).ToList();



                    totalRecords = lstAdminTechnicalAgency.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord == "asc")
                        {
                            switch (sidx)
                            {
                                //case "StateName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;


                                //case "TAName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;

                                default:
                                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.MAST_DISTRICT_NAME).ThenByDescending(m => m.MAST_START_DATE).ThenByDescending(m => m.MAST_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                    break;

                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                //case "StateName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;

                                //case "TAName":
                                //    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                //    break;
                                default:
                                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.MAST_DISTRICT_NAME).ThenByDescending(m => m.MAST_START_DATE).ThenByDescending(m => m.MAST_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.MAST_DISTRICT_NAME).ThenByDescending(m => m.MAST_START_DATE).ThenByDescending(m => m.MAST_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }

                    var result = lstAdminTechnicalAgency.Select(item => new
                    {
                        item.ADMIN_TA_NAME,
                        item.ADMIN_TA_CONTACT_NAME,
                        item.MAST_START_DATE,
                        item.MAST_END_DATE,
                        item.ADMIN_TA_TYPE,
                        item.MAST_STATE_NAME,
                        item.MAST_DISTRICT_NAME,
                        item.MAST_IS_FINALIZED,
                        item.MAST_IS_ENABLED,
                        item.MAST_IS_ACTIVE,
                    }
                    ).ToArray();

                    return result.Select(item => new
                    {

                        cell = new[]
                {
                           item.MAST_STATE_NAME,
                           item.MAST_DISTRICT_NAME==null?"-":item.MAST_DISTRICT_NAME,

                           item.MAST_START_DATE==null?"-":(item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()==string.Empty?"-":item.MAST_START_DATE.ToString("dd/MM/yyyy").Trim()),
                           item.MAST_END_DATE==null?"-":(Convert.ToDateTime(item.MAST_END_DATE).ToString("dd/MM/yyyy").Trim()==string.Empty?"-":Convert.ToDateTime(item.MAST_END_DATE).ToString("dd/MM/yyyy").Trim()),
                           item.ADMIN_TA_TYPE=="P"?"PTA":(item.ADMIN_TA_TYPE=="S"?"STA":""),
                           item.ADMIN_TA_NAME ==null?"-":(item.ADMIN_TA_NAME.Trim()==string.Empty?"-":item.ADMIN_TA_NAME.Trim()),

                           item.ADMIN_TA_CONTACT_NAME==null?"-":(item.ADMIN_TA_CONTACT_NAME==string.Empty?"-":item.ADMIN_TA_CONTACT_NAME.Trim()),

                           item.MAST_IS_FINALIZED == "Y"?"Yes":"No",
                           item.MAST_IS_ENABLED == "Y"?"Yes":"No",
                           item.MAST_IS_ACTIVE == "Y"?"Yes":"No",
                            
                            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Map States' onClick ='MapState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Map Districts' onClick ='MapDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map Districts</a></td></tr></table></center>",
                            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Mapped States' onClick ='MappedState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Mapped Districts' onClick ='MappedDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped Districts</a></td></tr></table></center>",
                            //URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()}),
                            //URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()})

                }
                    }).ToArray();
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }


        }

        public Array ListadminTechnicalAgency(string taName, string taType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstAdminTechnicalAgency = (from item in dbContext.ADMIN_TECHNICAL_AGENCY

                                               join designation in dbContext.MASTER_DESIGNATION
                                               on item.ADMIN_TA_CONTACT_DESG equals designation.MAST_DESIG_CODE into outerDesg

                                               from designation in outerDesg.DefaultIfEmpty()

                                               join state in dbContext.MASTER_STATE
                                               on item.MAST_STATE_CODE equals state.MAST_STATE_CODE into outerState

                                               from state in outerState.DefaultIfEmpty()

                                               join district in dbContext.MASTER_DISTRICT
                                               on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into outerDistrict

                                               from district in outerDistrict.DefaultIfEmpty()

                                               where
                                               (taType == string.Empty ? "%" : item.ADMIN_TA_TYPE) == (taType == string.Empty ? "%" : taType) &&

                                               (taName == string.Empty ? "%" : item.ADMIN_TA_NAME).Contains(taName == string.Empty ? "%" : taName) &&
                                               (PMGSY.Extensions.PMGSYSession.Current.StateCode == 0 ? 1 : item.MAST_STATE_CODE) == (PMGSY.Extensions.PMGSYSession.Current.StateCode == 0 ? 1 : PMGSY.Extensions.PMGSYSession.Current.StateCode)


                                               select new
                                               {


                                                   item.ADMIN_TA_NAME,
                                                   item.ADMIN_TA_CONTACT_NAME,


                                                   designation.MAST_DESIG_NAME,
                                                   item.ADMIN_TA_CONTACT_DESG,

                                                   item.ADMIN_TA_ADDRESS1,
                                                   item.ADMIN_TA_ADDRESS2,


                                                   district.MAST_DISTRICT_NAME,

                                                   state.MAST_STATE_NAME,

                                                   item.ADMIN_TA_STD1,
                                                   item.ADMIN_TA_PHONE1,

                                                   item.ADMIN_TA_STD2,
                                                   item.ADMIN_TA_PHONE2,

                                                   item.ADMIN_TA_STD_FAX,
                                                   item.ADMIN_TA_FAX,

                                                   item.ADMIN_TA_MOBILE_NO,

                                                   item.ADMIN_TA_EMAIL,

                                                   item.ADMIN_TA_WEBISTE,

                                                   item.ADMIN_TA_REMARKS,

                                                   item.ADMIN_TA_TYPE,
                                                   item.ADMIN_TA_CODE,
                                                   item.ADMIN_TA_PIN,
                                               }).ToList();



                totalRecords = lstAdminTechnicalAgency.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "StateName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;


                            case "TAName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TADesignation":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_CONTACT_DESG).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TAAddr1":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "DistrictName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;


                            case "StdNo1":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "PhNo1":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_PHONE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Fax":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MobileNo":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_MOBILE_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Email":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "Website":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_WEBISTE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "Remark":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_REMARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ContactName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_CONTACT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "Level":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_TYPE).ThenBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "StateName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "TAName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "TADesignation":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_CONTACT_DESG).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "TAAddr1":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;


                            case "DistrictName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;



                            case "StdNo1":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;


                            case "PhNo1":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_PHONE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "Fax":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MobileNo":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_MOBILE_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "Email":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "Website":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_WEBISTE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;


                            case "Remark":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_REMARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "ContactName":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_CONTACT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "Level":
                                lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderByDescending(m => m.ADMIN_TA_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;


                        }

                    }
                }
                else
                {
                    lstAdminTechnicalAgency = lstAdminTechnicalAgency.OrderBy(m => m.ADMIN_TA_TYPE).ThenBy(m => m.ADMIN_TA_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }



                var result = lstAdminTechnicalAgency.Select(item => new

                {
                    item.ADMIN_TA_WEBISTE,
                    item.ADMIN_TA_TYPE,
                    item.ADMIN_TA_ADDRESS1,
                    item.ADMIN_TA_ADDRESS2,
                    item.ADMIN_TA_CODE,
                    item.ADMIN_TA_CONTACT_DESG,
                    item.ADMIN_TA_EMAIL,
                    item.ADMIN_TA_FAX,
                    item.ADMIN_TA_MOBILE_NO,
                    item.ADMIN_TA_NAME,
                    item.ADMIN_TA_PHONE1,
                    item.ADMIN_TA_PHONE2,
                    item.ADMIN_TA_PIN,
                    item.ADMIN_TA_REMARKS,
                    item.ADMIN_TA_STD_FAX,
                    item.ADMIN_TA_STD1,
                    item.ADMIN_TA_STD2,

                    item.ADMIN_TA_CONTACT_NAME,
                    item.MAST_DISTRICT_NAME,
                    item.MAST_STATE_NAME,
                    item.MAST_DESIG_NAME,
                }
                ).ToArray();

                return result.Select(item => new
                {

                    cell = new[]
                {
                           item.ADMIN_TA_NAME ==null?"-":(item.ADMIN_TA_NAME.Trim()==string.Empty?"-":item.ADMIN_TA_NAME.Trim()),

                           item.ADMIN_TA_CONTACT_NAME==null?"-":(item.ADMIN_TA_CONTACT_NAME==string.Empty?"-":item.ADMIN_TA_CONTACT_NAME.Trim()),

                           item.MAST_DESIG_NAME==null?"-":(item.MAST_DESIG_NAME.Trim()==string.Empty?"-":item.MAST_DESIG_NAME.Trim()),
                           //item.ADMIN_TA_ADDRESS1+""+item.ADMIN_TA_ADDRESS2,
                           //item.MAST_STATE_NAME==null?"-":item.MAST_STATE_NAME,
                           //item.MAST_DISTRICT_NAME==null?"-": item.MAST_DISTRICT_NAME.ToString(),
                           //(item.ADMIN_TA_STD1==null?"-":item.ADMIN_TA_STD1+"-")+(item.ADMIN_TA_PHONE1==null?"-":item.ADMIN_TA_PHONE1),
                           //(item.ADMIN_TA_STD2==null?"-": item.ADMIN_TA_STD2+"-")+(item.ADMIN_TA_PHONE2==null?"-":item.ADMIN_TA_PHONE2), 
                           //(item.ADMIN_TA_STD_FAX == null?"-":item.ADMIN_TA_STD_FAX.ToString())+"-"+(item.ADMIN_TA_FAX==null?string.Empty:item.ADMIN_TA_FAX.ToString()),
                           // item.ADMIN_TA_MOBILE_NO==null?"-":item.ADMIN_TA_MOBILE_NO,
                           // item.ADMIN_TA_EMAIL==null?"-": item.ADMIN_TA_EMAIL,
                           // item.ADMIN_TA_WEBISTE== null?"-":item.ADMIN_TA_WEBISTE,
                           // item.ADMIN_TA_REMARKS==null?"-":item.ADMIN_TA_REMARKS.ToString(),
                           //item.ADMIN_TA_PIN==null?"-":item.ADMIN_TA_PIN,
                            item.ADMIN_TA_TYPE=="P"?"PTA":(item.ADMIN_TA_TYPE=="S"?"STA":""),
                            
                            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Map States' onClick ='MapState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+item.ADMIN_TA_NAME.ToString()}) + "\");' >Map States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Map Districts' onClick ='MapDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+item.ADMIN_TA_NAME.ToString()}) + "\");' >Map Districts</a></td></tr></table></center>",
                            item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Map States' onClick ='MapState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Map Districts' onClick ='MapDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Map Districts</a></td></tr></table></center>",
                            //item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Mapped States' onClick ='MappedState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+item.ADMIN_TA_NAME.ToString()}) + "\");' >Mapped States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Mapped Districts' onClick ='MappedDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+item.ADMIN_TA_NAME.ToString()}) + "\");' >Mapped Districts</a></td></tr></table></center>",
                            /*Changed by Sammed Patil on 6Jun2014 Added TAType in encrypted parameters for disable state dropdown and view button on view as it is not used*/
                            item.ADMIN_TA_TYPE=="P"? "<center><table><tr><td  style='border:none'><a href='#' title='Mapped States' onClick ='MappedState(\"" + URLEncrypt.EncryptParameters1(new string[]{"TAType="+Convert.ToString(item.ADMIN_TA_TYPE),"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped States</a></td></tr></table></center>":"<center><table><tr><td  style='border:none'><a href='#' title='Mapped Districts' onClick ='MappedDistrict(\"" + URLEncrypt.EncryptParameters1(new string[]{"TAType="+Convert.ToString(item.ADMIN_TA_TYPE),"TACode="+item.ADMIN_TA_CODE.ToString(),"TAName="+Regex.Replace(item.ADMIN_TA_NAME, "/", @"&").ToString()}) + "\");' >Mapped Districts</a></td></tr></table></center>",
                            URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()}),
                            URLEncrypt.EncryptParameters1(new string[]{"TACode="+item.ADMIN_TA_CODE.ToString()})

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }


        }

        public AdminTechnicalAgencyViewModel GetAdminTA_ByTACode(int AdminTechnicalAgencyCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_TECHNICAL_AGENCY adminTechnicalAgencyCode = dbContext.ADMIN_TECHNICAL_AGENCY.FirstOrDefault(m => m.ADMIN_TA_CODE == AdminTechnicalAgencyCode);

                AdminTechnicalAgencyViewModel adminTechnicalAgencyView = null;
                if (adminTechnicalAgencyCode != null)
                {
                    adminTechnicalAgencyView = CloneAdminTechnicalAgencyObject(adminTechnicalAgencyCode);
                }
                return adminTechnicalAgencyView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public ADMIN_TECHNICAL_AGENCY CloneAdminTechnicalAgencyModel(ADMIN_TECHNICAL_AGENCY adminTechnicalAgencyCode, AdminTechnicalAgencyViewModel adminTechnicalAgencyViewModel, bool flagAddEdit)
        {
            try
            {

                adminTechnicalAgencyCode.ADMIN_TA_WEBISTE = adminTechnicalAgencyViewModel.ADMIN_TA_WEBISTE;

                adminTechnicalAgencyCode.ADMIN_TA_TYPE = adminTechnicalAgencyViewModel.ADMIN_TA_TYPE;

                adminTechnicalAgencyCode.ADMIN_TA_ADDRESS1 = adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS1;

                adminTechnicalAgencyCode.ADMIN_TA_ADDRESS2 = adminTechnicalAgencyViewModel.ADMIN_TA_ADDRESS2;

                adminTechnicalAgencyCode.ADMIN_TA_CONTACT_DESG = adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_DESG == 0 ? null : adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_DESG;

                adminTechnicalAgencyCode.ADMIN_TA_EMAIL = adminTechnicalAgencyViewModel.ADMIN_TA_EMAIL;

                adminTechnicalAgencyCode.ADMIN_TA_FAX = adminTechnicalAgencyViewModel.ADMIN_TA_FAX;

                adminTechnicalAgencyCode.ADMIN_TA_MOBILE_NO = adminTechnicalAgencyViewModel.ADMIN_TA_MOBILE_NO;

                adminTechnicalAgencyCode.ADMIN_TA_NAME = adminTechnicalAgencyViewModel.ADMIN_TA_NAME;

                adminTechnicalAgencyCode.ADMIN_TA_PHONE1 = adminTechnicalAgencyViewModel.ADMIN_TA_PHONE1;

                adminTechnicalAgencyCode.ADMIN_TA_CONTACT_NAME = adminTechnicalAgencyViewModel.ADMIN_TA_CONTACT_NAME;

                adminTechnicalAgencyCode.ADMIN_TA_PHONE2 = adminTechnicalAgencyViewModel.ADMIN_TA_PHONE2;

                adminTechnicalAgencyCode.ADMIN_TA_PIN = adminTechnicalAgencyViewModel.ADMIN_TA_PIN;

                adminTechnicalAgencyCode.ADMIN_TA_REMARKS = adminTechnicalAgencyViewModel.ADMIN_TA_REMARKS;

                adminTechnicalAgencyCode.ADMIN_TA_STD_FAX = adminTechnicalAgencyViewModel.ADMIN_TA_STD_FAX;

                adminTechnicalAgencyCode.ADMIN_TA_STD1 = adminTechnicalAgencyViewModel.ADMIN_TA_STD1;

                adminTechnicalAgencyCode.ADMIN_TA_STD2 = adminTechnicalAgencyViewModel.ADMIN_TA_STD2;

                adminTechnicalAgencyCode.MAST_DISTRICT_CODE = adminTechnicalAgencyViewModel.MAST_DISTRICT_CODE == 0 ? null : adminTechnicalAgencyViewModel.MAST_DISTRICT_CODE;

                adminTechnicalAgencyCode.MAST_STATE_CODE = adminTechnicalAgencyViewModel.MAST_STATE_CODE == 0 ? null : adminTechnicalAgencyViewModel.MAST_STATE_CODE;

                adminTechnicalAgencyCode.MASTER_DESIGNATION = adminTechnicalAgencyViewModel.MASTER_DESIGNATION;

                adminTechnicalAgencyCode.ADMIN_TA_SERVICE_TAX = adminTechnicalAgencyViewModel.ADMIN_TA_SERVICE_TAX;
                //added by abhishek kamble 27-nov-2013
                adminTechnicalAgencyCode.USERID = PMGSYSession.Current.UserId;
                adminTechnicalAgencyCode.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                return adminTechnicalAgencyCode;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public AdminTechnicalAgencyViewModel CloneAdminTechnicalAgencyObject(ADMIN_TECHNICAL_AGENCY AdminTechnicalAgencyCode)
        {
            try
            {
                AdminTechnicalAgencyViewModel adminTechnicalAgencyView = new AdminTechnicalAgencyViewModel();

                adminTechnicalAgencyView.EncryptedTACode = URLEncrypt.EncryptParameters1(new string[] { "TACode =" + AdminTechnicalAgencyCode.ADMIN_TA_CODE.ToString() });

                adminTechnicalAgencyView.ADMIN_TA_WEBISTE = AdminTechnicalAgencyCode.ADMIN_TA_WEBISTE;

                adminTechnicalAgencyView.ADMIN_TA_TYPE = AdminTechnicalAgencyCode.ADMIN_TA_TYPE;

                adminTechnicalAgencyView.ADMIN_TA_ADDRESS1 = AdminTechnicalAgencyCode.ADMIN_TA_ADDRESS1;

                adminTechnicalAgencyView.ADMIN_TA_ADDRESS2 = AdminTechnicalAgencyCode.ADMIN_TA_ADDRESS2;

                adminTechnicalAgencyView.ADMIN_TA_CONTACT_DESG = AdminTechnicalAgencyCode.ADMIN_TA_CONTACT_DESG;

                adminTechnicalAgencyView.ADMIN_TA_EMAIL = AdminTechnicalAgencyCode.ADMIN_TA_EMAIL;

                adminTechnicalAgencyView.ADMIN_TA_FAX = AdminTechnicalAgencyCode.ADMIN_TA_FAX;

                adminTechnicalAgencyView.ADMIN_TA_MOBILE_NO = AdminTechnicalAgencyCode.ADMIN_TA_MOBILE_NO;

                adminTechnicalAgencyView.ADMIN_TA_NAME = AdminTechnicalAgencyCode.ADMIN_TA_NAME;

                adminTechnicalAgencyView.ADMIN_TA_PHONE1 = AdminTechnicalAgencyCode.ADMIN_TA_PHONE1;

                adminTechnicalAgencyView.ADMIN_TA_PHONE2 = AdminTechnicalAgencyCode.ADMIN_TA_PHONE2;

                adminTechnicalAgencyView.ADMIN_TA_PIN = AdminTechnicalAgencyCode.ADMIN_TA_PIN;

                adminTechnicalAgencyView.ADMIN_TA_REMARKS = AdminTechnicalAgencyCode.ADMIN_TA_REMARKS;

                adminTechnicalAgencyView.ADMIN_TA_STD_FAX = AdminTechnicalAgencyCode.ADMIN_TA_STD_FAX;

                adminTechnicalAgencyView.ADMIN_TA_STD1 = AdminTechnicalAgencyCode.ADMIN_TA_STD1;

                adminTechnicalAgencyView.ADMIN_TA_STD2 = AdminTechnicalAgencyCode.ADMIN_TA_STD2;

                adminTechnicalAgencyView.MAST_DISTRICT_CODE = AdminTechnicalAgencyCode.MAST_DISTRICT_CODE;

                adminTechnicalAgencyView.ADMIN_TA_CONTACT_NAME = AdminTechnicalAgencyCode.ADMIN_TA_CONTACT_NAME;

                adminTechnicalAgencyView.MAST_STATE_CODE = AdminTechnicalAgencyCode.MAST_STATE_CODE;

                adminTechnicalAgencyView.MASTER_DESIGNATION = AdminTechnicalAgencyCode.MASTER_DESIGNATION;
                adminTechnicalAgencyView.ADMIN_TA_SERVICE_TAX = AdminTechnicalAgencyCode.ADMIN_TA_SERVICE_TAX;

                adminTechnicalAgencyView.ADMIN_STATE_NAME = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == AdminTechnicalAgencyCode.MAST_STATE_CODE).Select(a => a.MAST_STATE_NAME).FirstOrDefault();
                adminTechnicalAgencyView.ADMIN_DISTRICT_NAME = dbContext.MASTER_DISTRICT.Where(a => a.MAST_DISTRICT_CODE == AdminTechnicalAgencyCode.MAST_DISTRICT_CODE).Select(a => a.MAST_DISTRICT_NAME).FirstOrDefault();
                adminTechnicalAgencyView.ADMIN_DESIGNATION_NAME = dbContext.MASTER_DESIGNATION.Where(a => a.MAST_DESIG_CODE == AdminTechnicalAgencyCode.ADMIN_TA_CONTACT_DESG).Select(a => a.MAST_DESIG_NAME).FirstOrDefault();


                return adminTechnicalAgencyView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public List<MASTER_DESIGNATION> GetDesignationTA()
        {
            dbContext = new PMGSYEntities();
            List<MASTER_DESIGNATION> lstDesignation = dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_TYPE == "TA").ToList<MASTER_DESIGNATION>();
            return lstDesignation;
        }
        public List<MASTER_STATE> GetStatesTA()
        {
            dbContext = new PMGSYEntities();
            List<MASTER_STATE> lstState = dbContext.MASTER_STATE.ToList<MASTER_STATE>();
            return lstState;
        }

        public List<MASTER_DISTRICT> GetDistrictNameTA(int? stateId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_DISTRICT> list = dbContext.MASTER_DISTRICT.Where(m => m.MAST_STATE_CODE == stateId).ToList<MASTER_DISTRICT>();

                return list;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }

        public List<SelectListItem> GetTATypes()
        {
            List<SelectListItem> technicalAgencylist = new List<SelectListItem>();

            switch (PMGSYSession.Current.RoleCode)
            {
                case 36:
                    technicalAgencylist.Add(new SelectListItem()
                    {
                        Text = "STA",
                        Value = "S",
                        Selected = true
                    });
                    break;
                case 25:
                    technicalAgencylist.Add(new SelectListItem()
                    {
                        Text = "STA",
                        Value = "S"
                    });

                    technicalAgencylist.Add(new SelectListItem()
                    {
                        Text = "PTA",
                        Value = "P",
                        Selected = true
                    });
                    break;
                default:
                    technicalAgencylist.Add(new SelectListItem()
                    {
                        Text = "PTA",
                        Value = "P"
                    });
                    technicalAgencylist.Add(new SelectListItem()
                    {
                        Text = "STA",
                        Value = "S"
                    });
                    break;
            }





            return technicalAgencylist;
        }

        #endregion Technical Agency

        #region ADMIN_SQC

        public SelectList GetAllStatus()
        {
            List<Status> statusList = new List<Status>();

            foreach (var item in Status.lstStatus)
            {
                statusList.Add(new Status() { StatusID = item.Key, StatusDescription = item.Value });
            }

            return new SelectList(statusList, "StatusID", "StatusDescription");
        }

        //added by abhinav pathak on 28 nov 2018
        public List<SelectListItem> GetDepartmentListDAL(int id)
        {
            dbContext = new PMGSYEntities();
            try
            {
                List<SelectListItem> lstdept = new List<SelectListItem>();
                var listdept = (from item in dbContext.ADMIN_DEPARTMENT
                                select new
                                {
                                    item.MAST_STATE_CODE,
                                    item.ADMIN_ND_NAME,
                                    item.ADMIN_ND_CODE
                                }).ToList();


                foreach (var item in listdept)
                {
                    if (item.MAST_STATE_CODE == id)
                        lstdept.Add(new SelectListItem { Value = item.ADMIN_ND_CODE.ToString(), Text = item.ADMIN_ND_NAME.ToString() });

                }

                return lstdept;

            }
            catch (Exception ex)
            {
                return null;
            }

            finally
            {
                dbContext.Dispose();
            }


        }

        // Added by abhinav pathak on 28-11-2018

        public List<SelectListItem> GetDeptListForStates(int id)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<SelectListItem> lst = new List<SelectListItem>();
                List<ADMIN_DEPARTMENT> lspdept = new List<ADMIN_DEPARTMENT>();
                ADMIN_DEPARTMENT admindept = new ADMIN_DEPARTMENT();
                lspdept = dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_ND_TYPE == "S").ToList();

                var listdept = (from item in lspdept
                                select new
                                {
                                    item.MAST_STATE_CODE,
                                    item.ADMIN_ND_NAME,
                                    item.ADMIN_ND_CODE
                                }).ToList();


                foreach (var item in listdept)
                {
                    if (item.MAST_STATE_CODE == id)
                    {
                        lst.Add(new SelectListItem() { Value = item.ADMIN_ND_CODE.ToString(), Text = item.ADMIN_ND_NAME });
                    }

                }
                return lst;
            }

            catch (Exception ex)
            {
                return null;
            }

        }


        public bool AddAdminSqc(AdminSqcViewModel adminSqcViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //if (dbContext.ADMIN_SQC.Any(m => m.MAST_STATE_CODE == adminSqcViewModel.MAST_STATE_CODE && m.ADMIN_ACTIVE_STATUS == "Y"))
                //{
                //    message = "Quality Controller details for selected state already exists.";
                //    return false;
                //}

                bool flagAddEdit = true;
                // ADMIN_SQC AdminSqcCode = CloneAdminSqcModel(new ADMIN_SQC(), adminSqcViewModel, flagAddEdit);
                ADMIN_SQC adminSqcCode = new ADMIN_SQC();
                adminSqcCode.ADMIN_QC_CODE = adminSqcViewModel.ADMIN_QC_CODE;
                adminSqcCode.ADMIN_ACTIVE_STATUS = "Y";
                adminSqcCode.ADMIN_QC_TYPE = "S";
                adminSqcCode.MAST_STATE_CODE = adminSqcViewModel.MAST_STATE_CODE;
                adminSqcCode.MAST_STATE_CODE_ADDR = adminSqcViewModel.MAST_STATE_CODE;

                adminSqcCode.ADMIN_QC_ADDRESS1 = adminSqcViewModel.ADMIN_QC_ADDRESS1;
                adminSqcCode.ADMIN_QC_ADDRESS2 = adminSqcViewModel.ADMIN_QC_ADDRESS2;
                adminSqcCode.ADMIN_QC_DESG = (int)adminSqcViewModel.ADMIN_QC_DESG;
                adminSqcCode.ADMIN_QC_EMAIL = adminSqcViewModel.ADMIN_QC_EMAIL;
                adminSqcCode.ADMIN_QC_FAX = adminSqcViewModel.ADMIN_QC_FAX;
                adminSqcCode.ADMIN_QC_MOBILE = adminSqcViewModel.ADMIN_QC_MOBILE;
                adminSqcCode.ADMIN_QC_NAME = adminSqcViewModel.ADMIN_QC_NAME;
                adminSqcCode.ADMIN_QC_PHONE1 = adminSqcViewModel.ADMIN_QC_PHONE1;
                adminSqcCode.ADMIN_QC_PHONE2 = adminSqcViewModel.ADMIN_QC_PHONE2;
                adminSqcCode.ADMIN_QC_PIN = adminSqcViewModel.ADMIN_QC_PIN;
                adminSqcCode.ADMIN_QC_REMARKS = adminSqcViewModel.ADMIN_QC_REMARKS;
                adminSqcCode.ADMIN_QC_STD_FAX = adminSqcViewModel.ADMIN_QC_STD_FAX;
                adminSqcCode.ADMIN_QC_STD1 = adminSqcViewModel.ADMIN_QC_STD1;
                adminSqcCode.ADMIN_QC_STD2 = adminSqcViewModel.ADMIN_QC_STD2;
                adminSqcCode.MAST_DISTRICT_CODE = adminSqcViewModel.MAST_DISTRICT_CODE == 0 ? null : adminSqcViewModel.MAST_DISTRICT_CODE;
                adminSqcCode.ADMIN_QC_AADHAR_NO = adminSqcViewModel.ADMIN__QC_AADHAR_NO;
                //added by abhishek kamble 27-nov-2013
                adminSqcCode.ADMIN_ND_CODE = adminSqcViewModel.ADMIN_ND_CODE;


                adminSqcCode.USERID = PMGSYSession.Current.UserId;
                adminSqcCode.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                adminSqcCode.ADMIN_QC_CODE = dbContext.ADMIN_SQC.Max(cp => (Int32?)cp.ADMIN_QC_CODE) == null ? 1 : (Int32)dbContext.ADMIN_SQC.Max(cp => (Int32?)cp.ADMIN_QC_CODE) + 1;
                //  AdminSqcCode.ADMIN_ND_CODE = adminSqcViewModel.ADMIN_ND_CODE;

                dbContext = new PMGSYEntities();
                dbContext.ADMIN_SQC.Add(adminSqcCode);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditAdminSqc(AdminSqcViewModel adminSqcViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                encryptedParameters = adminSqcViewModel.EncryptedSqcCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                QcCode = Convert.ToInt32(decryptedParameters["QcCode"].ToString());
                int rowCount = dbContext.ADMIN_SQC.Where(m => m.MAST_STATE_CODE == adminSqcViewModel.MAST_STATE_CODE && m.ADMIN_ACTIVE_STATUS == "Y" && m.ADMIN_QC_CODE != QcCode).Count();
                //if (rowCount > 0)
                //{
                //    message = "Quality Controller details for selected state already exists.";
                //    return false;
                //}
                ADMIN_SQC adminSqcCode = dbContext.ADMIN_SQC.Where(m => m.ADMIN_QC_CODE == QcCode).FirstOrDefault();
                //if (adminSqcCode == null)
                //{
                //    return false;
                //}
                adminSqcCode.ADMIN_QC_CODE = QcCode;

                if (!adminSqcViewModel.IsActive)
                {
                    adminSqcCode.ADMIN_ACTIVE_ENDDATE = ConvertStringToDate(adminSqcViewModel.ADMIN_ACTIVE_ENDDATE);
                    adminSqcCode.ADMIN_ACTIVE_STATUS = "N";
                }
                else
                {
                    adminSqcCode.ADMIN_ACTIVE_ENDDATE = ConvertStringToDate(adminSqcViewModel.ADMIN_ACTIVE_ENDDATE);
                    adminSqcCode.ADMIN_ACTIVE_STATUS = "Y";
                }

                adminSqcCode.ADMIN_QC_ADDRESS1 = adminSqcViewModel.ADMIN_QC_ADDRESS1;
                adminSqcCode.ADMIN_QC_ADDRESS2 = adminSqcViewModel.ADMIN_QC_ADDRESS2;
                adminSqcCode.ADMIN_QC_DESG = (int)adminSqcViewModel.ADMIN_QC_DESG;
                adminSqcCode.ADMIN_QC_EMAIL = adminSqcViewModel.ADMIN_QC_EMAIL;
                adminSqcCode.ADMIN_QC_FAX = adminSqcViewModel.ADMIN_QC_FAX;
                adminSqcCode.ADMIN_QC_MOBILE = adminSqcViewModel.ADMIN_QC_MOBILE;
                adminSqcCode.ADMIN_QC_NAME = adminSqcViewModel.ADMIN_QC_NAME;
                adminSqcCode.ADMIN_QC_PHONE1 = adminSqcViewModel.ADMIN_QC_PHONE1;
                adminSqcCode.ADMIN_QC_PHONE2 = adminSqcViewModel.ADMIN_QC_PHONE2;
                adminSqcCode.ADMIN_QC_PIN = adminSqcViewModel.ADMIN_QC_PIN;
                adminSqcCode.ADMIN_QC_REMARKS = adminSqcViewModel.ADMIN_QC_REMARKS;
                adminSqcCode.ADMIN_QC_STD_FAX = adminSqcViewModel.ADMIN_QC_STD_FAX;
                adminSqcCode.ADMIN_QC_STD1 = adminSqcViewModel.ADMIN_QC_STD1;
                adminSqcCode.ADMIN_QC_STD2 = adminSqcViewModel.ADMIN_QC_STD2;
                adminSqcCode.MAST_DISTRICT_CODE = adminSqcViewModel.MAST_DISTRICT_CODE == 0 ? null : adminSqcViewModel.MAST_DISTRICT_CODE;
                adminSqcCode.ADMIN_QC_AADHAR_NO = adminSqcViewModel.ADMIN__QC_AADHAR_NO;
                //added by abhishek kamble 27-nov-2013

                adminSqcCode.USERID = PMGSYSession.Current.UserId;
                adminSqcCode.ADMIN_ND_CODE = adminSqcViewModel.ADMIN_ND_CODE;
                adminSqcCode.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(adminSqcCode).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Boolean DeleteAdminSqc(int AdminQcId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_SQC AdminSqcCode = dbContext.ADMIN_SQC.Where(m => m.ADMIN_QC_CODE == AdminQcId).FirstOrDefault();
                if (AdminQcId == null)
                {
                    return false;
                }

                //added by abhishek kamble 27-nov-2013
                AdminSqcCode.USERID = PMGSYSession.Current.UserId;
                AdminSqcCode.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(AdminSqcCode).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_SQC.Remove(AdminSqcCode);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        //changes by abhinav pathakon 29 nov 2018 
        public Array ListadminQc(int stateCode, int adminndCode, string status, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();

                //var list = (from adminSQC in dbContext.ADMIN_SQC
                //            join adminNdName in dbContext.ADMIN_DEPARTMENT on adminSQC.ADMIN_ND_CODE equals adminNdName.ADMIN_ND_CODE
                //            where (adminNdName.ADMIN_ND_CODE == (adminndCode == 0 ? adminSQC.ADMIN_ND_CODE : adminndCode))
                //            select new
                //            {
                //                adminNdName.ADMIN_ND_NAME
                //            }).ToList();

                var lstAdminSqc = (from adminSQC in dbContext.ADMIN_SQC
                                   join adminNdName in dbContext.ADMIN_DEPARTMENT on adminSQC.ADMIN_ND_CODE equals adminNdName.ADMIN_ND_CODE
                                   into adminDept
                                   from adminNdName in adminDept.DefaultIfEmpty()
                                   join stateDetails in dbContext.MASTER_STATE on adminSQC.MAST_STATE_CODE equals stateDetails.MAST_STATE_CODE
                                   join designation in dbContext.MASTER_DESIGNATION on adminSQC.ADMIN_QC_DESG equals designation.MAST_DESIG_CODE
                                   into outerDesg
                                   from designation in outerDesg.DefaultIfEmpty()
                                   join districtDetails in dbContext.MASTER_DISTRICT
                                   on adminSQC.MAST_DISTRICT_CODE equals districtDetails.MAST_DISTRICT_CODE into outerDistrict
                                   from districtDetails in outerDistrict.DefaultIfEmpty()
                                   where
                                   (stateCode == 0 ? 1 : adminSQC.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                                   (((adminNdName.ADMIN_ND_CODE == null) ? 0 : adminNdName.ADMIN_ND_CODE) == (adminndCode == 0 ? ((adminNdName.ADMIN_ND_CODE == null) ? 0 : adminNdName.ADMIN_ND_CODE) : adminndCode)) &&

                                   (status == "A" ? "%" : adminSQC.ADMIN_ACTIVE_STATUS) == (status == "A" ? "%" : status) &&

                                   adminSQC.ADMIN_QC_TYPE == "S"
                                   select new
                                   {
                                       adminSQC.ADMIN_QC_CODE,
                                       stateDetails.MAST_STATE_NAME,
                                       adminSQC.ADMIN_QC_NAME,
                                       designation.MAST_DESIG_NAME,
                                       adminSQC.ADMIN_QC_ADDRESS1,
                                       adminSQC.ADMIN_QC_ADDRESS2,
                                       districtDetails.MAST_DISTRICT_NAME,
                                       adminSQC.ADMIN_QC_PIN,
                                       adminSQC.ADMIN_QC_DESG,
                                       adminSQC.ADMIN_QC_STD1,
                                       adminSQC.ADMIN_QC_STD2,
                                       adminSQC.ADMIN_QC_PHONE1,
                                       adminSQC.ADMIN_QC_PHONE2,
                                       adminSQC.ADMIN_QC_STD_FAX,
                                       adminSQC.ADMIN_QC_FAX,
                                       adminSQC.ADMIN_QC_MOBILE,
                                       adminSQC.ADMIN_QC_EMAIL,
                                       adminSQC.ADMIN_ACTIVE_ENDDATE,
                                       adminSQC.ADMIN_QC_REMARKS,
                                       adminSQC.ADMIN_QC_TYPE,
                                       adminSQC.ADMIN_ACTIVE_STATUS,
                                       adminNdName.ADMIN_ND_NAME


                                   }).ToList();



                totalRecords = lstAdminSqc.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "StateName":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "QcName":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "QcDesignation":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_DESG).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "QcAddr1":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MobileNo":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_MOBILE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Email":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Remark":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_REMARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "StdNo1":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_PHONE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "PhNo1":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_PHONE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Fax":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_QC_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Status":
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.ADMIN_ACTIVE_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            default:
                                lstAdminSqc = lstAdminSqc.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.ADMIN_QC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "StateName":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "QcName":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "QcDesignation":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_DESG).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "QcAddr1":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MobileNo":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_MOBILE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Email":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Remark":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_REMARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "StdNo1":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_PHONE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "PhNo1":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_PHONE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Fax":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_QC_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Status":
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.ADMIN_ACTIVE_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstAdminSqc = lstAdminSqc.OrderByDescending(m => m.MAST_STATE_NAME).ThenBy(m => m.ADMIN_QC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }

                }
                else
                {
                    lstAdminSqc = lstAdminSqc.OrderBy(m => m.MAST_STATE_NAME).ThenBy(m => m.ADMIN_QC_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }
                var result = lstAdminSqc.Select(adminSQC => new
                {
                    adminSQC.ADMIN_QC_CODE,
                    adminSQC.MAST_STATE_NAME,
                    adminSQC.ADMIN_QC_NAME,
                    adminSQC.MAST_DESIG_NAME,
                    adminSQC.ADMIN_QC_ADDRESS1,
                    adminSQC.ADMIN_QC_ADDRESS2,
                    adminSQC.MAST_DISTRICT_NAME,
                    adminSQC.ADMIN_QC_PIN,
                    adminSQC.ADMIN_QC_DESG,
                    adminSQC.ADMIN_QC_STD1,
                    adminSQC.ADMIN_QC_STD2,
                    adminSQC.ADMIN_QC_PHONE1,
                    adminSQC.ADMIN_QC_PHONE2,
                    adminSQC.ADMIN_QC_STD_FAX,
                    adminSQC.ADMIN_QC_FAX,
                    adminSQC.ADMIN_QC_MOBILE,
                    adminSQC.ADMIN_QC_EMAIL,
                    adminSQC.ADMIN_ACTIVE_ENDDATE,
                    adminSQC.ADMIN_QC_REMARKS,
                    adminSQC.ADMIN_QC_TYPE,
                    adminSQC.ADMIN_ACTIVE_STATUS,
                    adminSQC.ADMIN_ND_NAME
                }
                ).ToArray();

                return result.Select(item => new
                {

                    cell = new[]
                {

                 item.ADMIN_QC_NAME ==null?"-":item.ADMIN_QC_NAME.ToString().Trim(),
                 item.MAST_STATE_NAME,
                 string.IsNullOrEmpty(item.ADMIN_ND_NAME) ? "-" : item.ADMIN_ND_NAME.Trim(),
                 item.MAST_DESIG_NAME==null?"-":item.MAST_DESIG_NAME.ToString().Trim(),
                 ((item.ADMIN_QC_ADDRESS1==null?string.Empty:"Address1:-"+item.ADMIN_QC_ADDRESS1.ToString().Trim()+",  ")+ (item.ADMIN_QC_ADDRESS2==null?string.Empty:"Address2:-"+item.ADMIN_QC_ADDRESS2.Trim()+",  ")+ (item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+item.MAST_DISTRICT_NAME.Trim()+",  ")+ (item.ADMIN_QC_PIN==null?string.Empty:"PINCode:-"+item.ADMIN_QC_PIN))==string.Empty?"-":((item.ADMIN_QC_ADDRESS1==null?string.Empty:"Address1:-"+item.ADMIN_QC_ADDRESS1.ToString().Trim()+",  ")+ (item.ADMIN_QC_ADDRESS2==null?string.Empty:"Address2:-"+item.ADMIN_QC_ADDRESS2.Trim()+",  ")+ (item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+item.MAST_DISTRICT_NAME.Trim() +",  ")+ (item.ADMIN_QC_PIN==null?string.Empty:"PINCode:-"+item.ADMIN_QC_PIN)),
                 ((item.ADMIN_QC_STD1==null?string.Empty:"Phone Number1:-"+(item.ADMIN_QC_STD1.Trim()+"-"))+ (item.ADMIN_QC_PHONE1==null?string.Empty:item.ADMIN_QC_PHONE1.Trim()+",  "))+((item.ADMIN_QC_STD2==null?string.Empty:"Phone Number2:-"+(item.ADMIN_QC_STD2.Trim()+"-"))+(item.ADMIN_QC_PHONE2==null?string.Empty:item.ADMIN_QC_PHONE2.Trim()+",  "))+((item.ADMIN_QC_STD_FAX==null?string.Empty:"FAX:-"+(item.ADMIN_QC_STD_FAX.Trim()+"-"))+(item.ADMIN_QC_FAX==null?string.Empty:item.ADMIN_QC_FAX.Trim()+",  "))+(item.ADMIN_QC_MOBILE==null?string.Empty:"Mobile:-"+item.ADMIN_QC_MOBILE.Trim()+",  ")+(item.ADMIN_QC_EMAIL==null?string.Empty:"Email:-"+(item.ADMIN_QC_EMAIL.Trim())),
                  item.ADMIN_QC_REMARKS==null?"-":(item.ADMIN_QC_REMARKS.Trim()==string.Empty?"-":item.ADMIN_QC_REMARKS.Trim()),
                 item.ADMIN_ACTIVE_STATUS=="Y"?"Active":"InActive",
                 URLEncrypt.EncryptParameters1(new string[]{"QcCode="+item.ADMIN_QC_CODE.ToString()})


                }

                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public AdminSqcViewModel GetAdminQc_ByQcCode(int AdminQcCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_SQC adminSqcCode = dbContext.ADMIN_SQC.FirstOrDefault(m => m.ADMIN_QC_CODE == AdminQcCode);
                //List<ADMIN_DEPARTMENT> admindept = List<ADMIN_DEPARTMENT>();
                ADMIN_DEPARTMENT admindept = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == adminSqcCode.ADMIN_ND_CODE).FirstOrDefault();

                AdminSqcViewModel adminSqcView = null;
                if (adminSqcCode != null)
                {
                    adminSqcView = CloneAdminSqcObject(adminSqcCode, admindept);
                }
                return adminSqcView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public ADMIN_SQC CloneAdminSqcModel(ADMIN_SQC adminSqcCode, AdminSqcViewModel adminSqcViewModel, bool flagAddEdit)
        {
            try
            {
                if (flagAddEdit)
                {
                    adminSqcCode.ADMIN_QC_CODE = adminSqcViewModel.ADMIN_QC_CODE;
                    adminSqcCode.ADMIN_ACTIVE_STATUS = "Y";
                    adminSqcCode.ADMIN_QC_TYPE = "S";
                    adminSqcCode.MAST_STATE_CODE = adminSqcViewModel.MAST_STATE_CODE;
                    adminSqcCode.MAST_STATE_CODE_ADDR = adminSqcViewModel.MAST_STATE_CODE;
                }

                adminSqcCode.ADMIN_QC_ADDRESS1 = adminSqcViewModel.ADMIN_QC_ADDRESS1;
                adminSqcCode.ADMIN_QC_ADDRESS2 = adminSqcViewModel.ADMIN_QC_ADDRESS2;
                adminSqcCode.ADMIN_QC_DESG = (int)adminSqcViewModel.ADMIN_QC_DESG;
                adminSqcCode.ADMIN_QC_EMAIL = adminSqcViewModel.ADMIN_QC_EMAIL;
                adminSqcCode.ADMIN_QC_FAX = adminSqcViewModel.ADMIN_QC_FAX;
                adminSqcCode.ADMIN_QC_MOBILE = adminSqcViewModel.ADMIN_QC_MOBILE;
                adminSqcCode.ADMIN_QC_NAME = adminSqcViewModel.ADMIN_QC_NAME;
                adminSqcCode.ADMIN_QC_PHONE1 = adminSqcViewModel.ADMIN_QC_PHONE1;
                adminSqcCode.ADMIN_QC_PHONE2 = adminSqcViewModel.ADMIN_QC_PHONE2;
                adminSqcCode.ADMIN_QC_PIN = adminSqcViewModel.ADMIN_QC_PIN;
                adminSqcCode.ADMIN_QC_REMARKS = adminSqcViewModel.ADMIN_QC_REMARKS;
                adminSqcCode.ADMIN_QC_STD_FAX = adminSqcViewModel.ADMIN_QC_STD_FAX;
                adminSqcCode.ADMIN_QC_STD1 = adminSqcViewModel.ADMIN_QC_STD1;
                adminSqcCode.ADMIN_QC_STD2 = adminSqcViewModel.ADMIN_QC_STD2;
                adminSqcCode.MAST_DISTRICT_CODE = adminSqcViewModel.MAST_DISTRICT_CODE == 0 ? null : adminSqcViewModel.MAST_DISTRICT_CODE;
                adminSqcCode.ADMIN_QC_AADHAR_NO = adminSqcViewModel.ADMIN__QC_AADHAR_NO;
                //added by abhishek kamble 27-nov-2013
                adminSqcCode.ADMIN_ND_CODE = adminSqcViewModel.ADMIN_ND_CODE;


                adminSqcCode.USERID = PMGSYSession.Current.UserId;
                adminSqcCode.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                return adminSqcCode;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public AdminSqcViewModel CloneAdminSqcObject(ADMIN_SQC adminSqcCode, ADMIN_DEPARTMENT admindept)
        {
            try
            {
                AdminSqcViewModel adminSqcView = new AdminSqcViewModel();
                adminSqcView.ADMIN_ND_NAME = admindept == null ? "Select Department" : admindept.ADMIN_ND_NAME.Trim();
                adminSqcView.ADMIN_ND_CODE = adminSqcCode.ADMIN_ND_CODE.HasValue ? Convert.ToInt32(adminSqcCode.ADMIN_ND_CODE) : 0;
                adminSqcView.EncryptedSqcCode = URLEncrypt.EncryptParameters1(new string[] { "QcCode =" + adminSqcCode.ADMIN_QC_CODE.ToString() });
                adminSqcView.ADMIN_ACTIVE_ENDDATE = adminSqcCode.ADMIN_ACTIVE_ENDDATE == null ? string.Empty : (ConvertDateToString(adminSqcCode.ADMIN_ACTIVE_ENDDATE));
                adminSqcView.ADMIN_ACTIVE_STATUS = adminSqcCode.ADMIN_ACTIVE_STATUS;
                adminSqcView.ADMIN_QC_ADDRESS1 = adminSqcCode.ADMIN_QC_ADDRESS1;
                adminSqcView.ADMIN_QC_ADDRESS2 = adminSqcCode.ADMIN_QC_ADDRESS2;
                adminSqcView.ADMIN_QC_DESG = adminSqcCode.ADMIN_QC_DESG;
                adminSqcView.ADMIN_QC_EMAIL = adminSqcCode.ADMIN_QC_EMAIL;
                adminSqcView.ADMIN_QC_FAX = adminSqcCode.ADMIN_QC_FAX;
                adminSqcView.ADMIN_QC_MOBILE = adminSqcCode.ADMIN_QC_MOBILE;
                adminSqcView.ADMIN_QC_NAME = adminSqcCode.ADMIN_QC_NAME;
                adminSqcView.ADMIN_QC_PHONE1 = adminSqcCode.ADMIN_QC_PHONE1;
                adminSqcView.ADMIN_QC_PHONE2 = adminSqcCode.ADMIN_QC_PHONE2;
                adminSqcView.ADMIN_QC_PIN = adminSqcCode.ADMIN_QC_PIN;
                adminSqcView.ADMIN_QC_REMARKS = adminSqcCode.ADMIN_QC_REMARKS;
                adminSqcView.ADMIN_QC_STD_FAX = adminSqcCode.ADMIN_QC_STD_FAX;
                adminSqcView.ADMIN_QC_STD1 = adminSqcCode.ADMIN_QC_STD1;
                adminSqcView.ADMIN_QC_STD2 = adminSqcCode.ADMIN_QC_STD2;
                adminSqcView.MAST_DISTRICT_CODE = adminSqcCode.MAST_DISTRICT_CODE;
                adminSqcView.MAST_STATE_CODE = adminSqcCode.MAST_STATE_CODE;
                adminSqcView.MAST_STATE_CODE_ADDR = adminSqcCode.MAST_STATE_CODE_ADDR;
                adminSqcView.MASTER_DESIGNATION = adminSqcCode.MASTER_DESIGNATION;
                adminSqcView.ADMIN__QC_AADHAR_NO = adminSqcCode.ADMIN_QC_AADHAR_NO;
                return adminSqcView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }

        }

        public List<MASTER_DESIGNATION> GetDesignation()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_DESIGNATION> lstDesignation = dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_TYPE == "QC").ToList<MASTER_DESIGNATION>();
                return lstDesignation;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        public List<MASTER_STATE> GetStates()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_STATE> lstState = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_ACTIVE == "Y").ToList<MASTER_STATE>();
                return lstState;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_DISTRICT> GetDistrictName(int stateId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_DISTRICT> list = dbContext.MASTER_DISTRICT.Where(m => m.MAST_STATE_CODE == stateId).ToList<MASTER_DISTRICT>();
                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion



        public List<MASTER_STATE> GetAllStateNames()
        {
            try
            {
                dbContext = new PMGSYEntities();
                return (from state in dbContext.MASTER_STATE.Where(m => m.MAST_STATE_ACTIVE == "Y") orderby state.MAST_STATE_NAME select state).ToList<MASTER_STATE>();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_DISTRICT> GetAllDistrictByStateCode(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_DISTRICT> districtList = dbContext.MASTER_DISTRICT.Where(d => d.MAST_STATE_CODE == stateCode && d.MAST_DISTRICT_ACTIVE == "Y").OrderBy(d => d.MAST_DISTRICT_NAME).ToList<MASTER_DISTRICT>();
                //districtList.Insert(0, new MASTER_DISTRICT() {MAST_DISTRICT_CODE= 0, MAST_DISTRICT_NAME = "--Select--" });
                return districtList;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> GetDesigType()
        {
            List<SelectListItem> list = new List<SelectListItem>();

            list.Add(new SelectListItem
            {
                Text = "Nodal Officer",
                Value = "NO"
            });
            list.Add(new SelectListItem
            {
                Text = "Quality Control",
                Value = "QC"
            });

            list.Add(new SelectListItem
            {
                Text = "Quality Monitors",
                Value = "QM"
            });
            list.Add(new SelectListItem
            {
                Text = "Technical Agency",
                Value = "TA"
            });

            return list;
        }

        public List<MASTER_MLA_CONSTITUENCY> GetConstituency()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_MLA_CONSTITUENCY> stateList = dbContext.MASTER_MLA_CONSTITUENCY.ToList<MASTER_MLA_CONSTITUENCY>();
                return stateList;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        //region added by Koustubh Nakate on 06/05/2013 for Region-District mapping

        #region Region-District-Mapping

        public bool MapRegionDistrictsDAL(string encryptedRegionCode, string encryptedDistrictCodes)
        {
            try
            {
                String[] districtCodes = null;
                int regionCode = 0;
                int districtCode = 0;
                Models.MASTER_REGION_DISTRICT_MAP master_regionDistricts = null;
                MasterDataEntryDAL masterDataEntryDAL = new MasterDataEntryDAL();
                encryptedParameters = encryptedRegionCode.Split('/');
                dbContext = new PMGSYEntities();
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                regionCode = Convert.ToInt32(decryptedParameters["RegionCode"].ToString());

                //for all district codes
                districtCodes = encryptedDistrictCodes.Split(',');

                if (districtCodes.Count() == 0)
                {
                    return false;
                }

                foreach (String item in districtCodes)
                {
                    encryptedParameters = null;
                    encryptedParameters = item.Split('/');
                    decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    districtCode = Convert.ToInt32(decryptedParameters["DistrictCode"].ToString());

                    //check record already exist with district code and region code if not then save else next                        
                    if (!(dbContext.MASTER_REGION_DISTRICT_MAP.Any(rd => rd.MAST_REGION_CODE == regionCode && rd.MAST_DISTRICT_CODE == districtCode)))
                    {
                        master_regionDistricts = new Models.MASTER_REGION_DISTRICT_MAP();

                        master_regionDistricts.MAST_REGION_ID = (Int32)masterDataEntryDAL.GetMaxCode(MasterDataEntryModules.RegionDistrict);
                        master_regionDistricts.MAST_REGION_CODE = regionCode;
                        master_regionDistricts.MAST_DISTRICT_CODE = districtCode;
                        master_regionDistricts.MAST_REGION_DISTRICT_ACTIVE = "Y";

                        master_regionDistricts.MAST_LOCK_STATUS = "N";

                        dbContext.MASTER_REGION_DISTRICT_MAP.Add(master_regionDistricts);
                        dbContext.SaveChanges();
                    }
                }
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public Array GetMappedDistrictDetailsListDAL_Region(int regionCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var query = from regionDistrict in dbContext.MASTER_REGION_DISTRICT_MAP
                            join districtDetails in dbContext.MASTER_DISTRICT
                            on regionDistrict.MAST_DISTRICT_CODE equals districtDetails.MAST_DISTRICT_CODE
                            where regionDistrict.MAST_REGION_DISTRICT_ACTIVE == "Y" &&
                            districtDetails.MAST_DISTRICT_ACTIVE == "Y" &&//Added By Abhishek kamble 5-May-2014
                            regionDistrict.MAST_REGION_CODE == regionCode
                            select new { regionDistrict.MAST_DISTRICT_CODE, districtDetails.MAST_DISTRICT_NAME, districtDetails.MAST_PMGSY_INCLUDED, districtDetails.MAST_IAP_DISTRICT, regionDistrict.MAST_REGION_ID };

                totalRecords = query == null ? 0 : query.Count();


                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "DistrictName":
                                query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsPMGSYIncluded":
                                query = query.OrderBy(x => x.MAST_PMGSY_INCLUDED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsIAPDistrict":
                                query = query.OrderBy(x => x.MAST_IAP_DISTRICT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }


                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "DistrictName":
                                query = query.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsPMGSYIncluded":
                                query = query.OrderByDescending(x => x.MAST_PMGSY_INCLUDED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsIAPDistrict":
                                query = query.OrderByDescending(x => x.MAST_IAP_DISTRICT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                query = query.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var result = query.Select(districtDetails => new
                {
                    districtDetails.MAST_DISTRICT_CODE,
                    districtDetails.MAST_DISTRICT_NAME,
                    districtDetails.MAST_PMGSY_INCLUDED,
                    districtDetails.MAST_IAP_DISTRICT,
                    districtDetails.MAST_REGION_ID
                }).ToArray();


                return result.Select(districtDetails => new
                {
                    cell = new[] {
                                    districtDetails.MAST_DISTRICT_NAME.ToString().Trim() ,
                                    districtDetails.MAST_PMGSY_INCLUDED.ToString().Trim()=="Y"?"Yes":"No",
                                    districtDetails.MAST_IAP_DISTRICT.ToString().Trim()=="Y"?"Yes":"No" ,
                                    "<a href='#' title='Click here to delete mapped district' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteMappedDistrictRegion('" + URLEncrypt.EncryptParameters1(new string[]{"RegionId="+districtDetails.MAST_REGION_ID.ToString().Trim()}) +"'); return false;'>Delete District</a>"
                                }
                }).ToArray();


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteMappedRegionDistrictDAL(int regionId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                Models.MASTER_REGION_DISTRICT_MAP mapRegionDistrictMaster = dbContext.MASTER_REGION_DISTRICT_MAP.Find(regionId);
                dbContext.MASTER_REGION_DISTRICT_MAP.Remove(mapRegionDistrictMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion Region-District-Mapping

        //added by koustubh Nakate on 16-05-2013 for getting DPIU List From AdminNDCode 
        #region DPIU LIST BY SRDA

        public Array GetDPIUListDAL_ByAdminNDCode(int adminNDCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from admin in dbContext.ADMIN_DEPARTMENT
                           join state in dbContext.MASTER_STATE on admin.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           //join district in dbContext.MASTER_DISTRICT on admin.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into newDistrict
                           //from district in newDistrict.DefaultIfEmpty()
                           join agency in dbContext.MASTER_AGENCY on admin.MAST_AGENCY_CODE equals agency.MAST_AGENCY_CODE
                           where
                           admin.MAST_ND_TYPE == "D" && admin.MAST_PARENT_ND_CODE == adminNDCode
                           select new
                           {
                               admin.ADMIN_ND_CODE,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               admin.MAST_PARENT_ND_CODE,
                               admin.MAST_ND_TYPE,
                               admin.ADMIN_ND_NAME,
                               /*admin.ADMIN_ND_ADDRESS1,
                               admin.ADMIN_ND_ADDRESS2,
                               district.MAST_DISTRICT_NAME,
                               admin.ADMIN_ND_PIN,
                               admin.ADMIN_ND_STD1,
                               admin.ADMIN_ND_STD2,
                               admin.ADMIN_ND_PHONE1,
                               admin.ADMIN_ND_PHONE2,
                               admin.ADMIN_ND_STD_FAX,
                               admin.ADMIN_ND_FAX,
                               admin.ADMIN_ND_MOBILE_NO,
                               admin.ADMIN_ND_EMAIL,
                               admin.ADMIN_ND_REMARKS,
                               admin.ADMIN_SBD_DATE,
                               admin.ADMIN_PDF_KEY,
                               admin.ADMIN_EMAIL_CC,*/
                               admin.ADMIN_ND_TAN_NO,
                               admin.ADMIN_BANK_AUTH_ENABLED,
                               admin.ADMIN_BA_ENABLE_DATE,
                               admin.ADMIN_EPAY_MAIL,
                               admin.ADMIN_EPAY_ENABLE_DATE,
                               admin.ADMIN_EREMITTANCE_ENABLED,
                               admin.ADMIN_EREMIT_ENABLED_DATE,
                               admin.MAST_STATE_CODE
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "DPIUName":
                                list = list.OrderBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "TANNo":
                                list = list.OrderBy(x => x.ADMIN_ND_TAN_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabled":
                                list = list.OrderBy(x => x.ADMIN_BANK_AUTH_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabledDate":
                                list = list.OrderBy(x => x.ADMIN_BA_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabled":
                                list = list.OrderBy(x => x.ADMIN_EPAY_MAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabledDate":
                                list = list.OrderBy(x => x.ADMIN_EPAY_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabled":
                                list = list.OrderBy(x => x.ADMIN_EREMITTANCE_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabledDate":
                                list = list.OrderBy(x => x.ADMIN_EREMIT_ENABLED_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "DPIUName":
                                list = list.OrderByDescending(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "TANNo":
                                list = list.OrderByDescending(x => x.ADMIN_ND_TAN_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabled":
                                list = list.OrderByDescending(x => x.ADMIN_BANK_AUTH_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "BAEnabledDate":
                                list = list.OrderByDescending(x => x.ADMIN_BA_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabled":
                                list = list.OrderByDescending(x => x.ADMIN_EPAY_MAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EPayEnabledDate":
                                list = list.OrderByDescending(x => x.ADMIN_EPAY_ENABLE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabled":
                                list = list.OrderByDescending(x => x.ADMIN_EREMITTANCE_ENABLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "ERemittanceEnabledDate":
                                list = list.OrderByDescending(x => x.ADMIN_EREMIT_ENABLED_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                }
                else
                {
                    list = list.OrderBy(x => x.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(adminDetails => new
                {
                    adminDetails.ADMIN_ND_CODE,
                    adminDetails.ADMIN_ND_NAME,
                    adminDetails.MAST_ND_TYPE,
                    adminDetails.MAST_AGENCY_NAME,
                    adminDetails.MAST_STATE_NAME,
                    /* adminDetails.ADMIN_ND_ADDRESS1,
                    adminDetails.ADMIN_ND_ADDRESS2,
                    adminDetails.MAST_DISTRICT_NAME,
                    
                    adminDetails.ADMIN_ND_STD1,
                    adminDetails.ADMIN_ND_PHONE1,
                    adminDetails.ADMIN_ND_MOBILE_NO,
                    adminDetails.ADMIN_ND_EMAIL,
                    adminDetails.ADMIN_ND_REMARKS,
                    adminDetails.ADMIN_SBD_DATE,*/
                    adminDetails.ADMIN_ND_TAN_NO,
                    adminDetails.ADMIN_BANK_AUTH_ENABLED,
                    adminDetails.ADMIN_BA_ENABLE_DATE,
                    adminDetails.ADMIN_EPAY_MAIL,
                    adminDetails.ADMIN_EPAY_ENABLE_DATE,
                    adminDetails.ADMIN_EREMITTANCE_ENABLED,
                    adminDetails.ADMIN_EREMIT_ENABLED_DATE,
                    adminDetails.MAST_STATE_CODE
                }).ToArray();

                return result.Select(adminDetails => new
                {
                    //id = adminDetails.ADMIN_ND_CODE.ToString().Trim(),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{

                    adminDetails.ADMIN_ND_NAME == null?"NA":adminDetails.ADMIN_ND_NAME.ToString(),
                    adminDetails.ADMIN_ND_TAN_NO == null?"NA":adminDetails.ADMIN_ND_TAN_NO.ToString(),
                    adminDetails.ADMIN_BANK_AUTH_ENABLED=="Y"?"Yes":"No",
                    adminDetails.ADMIN_BA_ENABLE_DATE == null? "NA":Convert.ToDateTime(adminDetails.ADMIN_BA_ENABLE_DATE).ToString("dd/MM/yyyy"),
                    adminDetails.ADMIN_EPAY_MAIL=="Y"?"Yes":"No",
                    adminDetails.ADMIN_EPAY_ENABLE_DATE == null? "NA":Convert.ToDateTime(adminDetails.ADMIN_EPAY_ENABLE_DATE).ToString("dd/MM/yyyy"),
                    adminDetails.ADMIN_EREMITTANCE_ENABLED=="Y"?"Yes":"No",
                    adminDetails.ADMIN_EREMIT_ENABLED_DATE == null? "NA":Convert.ToDateTime(adminDetails.ADMIN_EREMIT_ENABLED_DATE).ToString("dd/MM/yyyy"),

                   
                    //(adminDetails.ADMIN_ND_ADDRESS1 == null?string.Empty:adminDetails.ADMIN_ND_ADDRESS1.ToString())+" "+(adminDetails.ADMIN_ND_ADDRESS2 == null?string.Empty:adminDetails.ADMIN_ND_ADDRESS2.ToString()),
                   // adminDetails.MAST_DISTRICT_NAME == null?string.Empty:adminDetails.MAST_DISTRICT_NAME.ToString(),            
                    //(adminDetails.ADMIN_ND_STD1 == null?string.Empty:adminDetails.ADMIN_ND_STD1)+" "+(adminDetails.ADMIN_ND_PHONE1==null?string.Empty:adminDetails.ADMIN_ND_PHONE1.ToString()),
                    //adminDetails.ADMIN_ND_MOBILE_NO==null?string.Empty:adminDetails.ADMIN_ND_MOBILE_NO.ToString(),
                    //adminDetails.ADMIN_ND_EMAIL==null?string.Empty:adminDetails.ADMIN_ND_EMAIL.ToString(),
                    //adminDetails.ADMIN_ND_REMARKS == null?string.Empty:adminDetails.ADMIN_ND_REMARKS.ToString(),
                                
                    //adminDetails.ADMIN_BA_ENABLE_DATE == null?"-":Convert.ToDateTime(adminDetails.ADMIN_BA_ENABLE_DATE).ToString("dd/MM/yyyy"),
                    //adminDetails.ADMIN_EREMIT_ENABLED_DATE == null?"-":Convert.ToDateTime(adminDetails.ADMIN_EREMIT_ENABLED_DATE).ToString("dd/MM/yyyy"),
                   // adminDetails.ADMIN_PDF_KEY == null?string.Empty:adminDetails.ADMIN_PDF_KEY.ToString(),
                    //adminDetails.MAST_ND_TYPE == "S"? URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()}):string.Empty,                   
                    
                    URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim()})

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion DPIU LIST BY SRDA

        #region BankDetails
        public bool checkAlreadyExists(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.MASTER_CONTRACTOR_BANK.Where(m => m.MAST_CON_ID == contractorBankDetails.MAST_CON_ID && m.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && m.MAST_ACCOUNT_STATUS == "A").Count();
                if (recordCount > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        //Added By Abhishke kamble 20-feb-2014 start
        public bool IsBankDetailsExists(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.MASTER_CONTRACTOR_BANK.Where(m => m.MAST_CON_ID == contractorBankDetails.MAST_CON_ID && m.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && m.MAST_BANK_NAME == contractorBankDetails.MAST_BANK_NAME && m.MAST_ACCOUNT_NUMBER == contractorBankDetails.MAST_ACCOUNT_NUMBER
                    //Changed on 14DESC as per directions from Srinivas Sir
                    && m.MAST_IFSC_CODE == contractorBankDetails.MAST_IFSC_CODE).Count();

                if (recordCount > 0)
                {
                    message = "Bank Details are already exist.";
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        //Added By Abhishke kamble 20-feb-2014 end

        public bool checkAlreadyExistsNO(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.ADMIN_NO_BANK.Where(m => m.ADMIN_NO_OFFICER_CODE == contractorBankDetails.NodalOfficerCode && m.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && m.MAST_ACCOUNT_STATUS == "A").Count();
                if (recordCount > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        //Added By Sammed Patil 05-apr-2016 start
        public bool IsBankDetailsExistsNO(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.ADMIN_NO_BANK.Where(m => m.ADMIN_NO_OFFICER_CODE == contractorBankDetails.NodalOfficerCode && m.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && m.MAST_BANK_NAME == contractorBankDetails.MAST_BANK_NAME && m.MAST_ACCOUNT_NUMBER == contractorBankDetails.MAST_ACCOUNT_NUMBER).Count();

                if (recordCount > 0)
                {
                    message = "Bank Details are already exist.";
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        //Added By Sammed Patil 05-apr-2016 end

        public bool AddBankDetailsNO(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            bool flagAddEdit = true;
            bool recordCount = false;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.ADMIN_NO_BANK.Any(m => m.ADMIN_NO_OFFICER_CODE == contractorBankDetails.NodalOfficerCode && m.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && m.MAST_ACCOUNT_STATUS == "A");
                if (recordCount)
                {
                    int maxBankID = (from item in dbContext.ADMIN_NO_BANK
                                     where item.ADMIN_NO_OFFICER_CODE == contractorBankDetails.NodalOfficerCode
                                     select item.MAST_ACCOUNT_ID).Max();

                    ADMIN_NO_BANK master = (from item in dbContext.ADMIN_NO_BANK
                                            where item.MAST_ACCOUNT_ID == maxBankID &&
                                            item.ADMIN_NO_OFFICER_CODE == contractorBankDetails.NodalOfficerCode
                                            select item).FirstOrDefault();

                    master.MAST_ACCOUNT_STATUS = "I";

                    //Added by abhishek kamble 27-nov-2013
                    master.USERID = PMGSYSession.Current.UserId;
                    master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                }

                ADMIN_NO_BANK masterBankNO = new ADMIN_NO_BANK();
                masterBankNO.MAST_ACCOUNT_ID = dbContext.ADMIN_NO_BANK.Max(cp => (Int32?)cp.MAST_ACCOUNT_ID) == null ? 1 : (Int32)dbContext.ADMIN_NO_BANK.Max(cp => (Int32?)cp.MAST_ACCOUNT_ID) + 1;
                //masterBankNO = CloneBankDetailsModel(masterBankNO, contractorBankDetails, flagAddEdit);

                if (flagAddEdit)
                {
                    masterBankNO.ADMIN_NO_OFFICER_CODE = contractorBankDetails.NodalOfficerCode;
                    masterBankNO.MAST_ACCOUNT_STATUS = "A";
                    masterBankNO.MAST_LOCK_STATUS = "N";
                }

                masterBankNO.MAST_ACCOUNT_NUMBER = contractorBankDetails.MAST_ACCOUNT_NUMBER;
                masterBankNO.MAST_BANK_NAME = contractorBankDetails.MAST_BANK_NAME;
                masterBankNO.MAST_DISTRICT_CODE = contractorBankDetails.MAST_DISTRICT_CODE;
                masterBankNO.MAST_IFSC_CODE = contractorBankDetails.MAST_IFSC_CODE == null ? null : contractorBankDetails.MAST_IFSC_CODE.ToString().Trim();

                //Added by abhishek kamble 27-nov-2013
                masterBankNO.USERID = PMGSYSession.Current.UserId;
                masterBankNO.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext = new PMGSYEntities();

                dbContext.ADMIN_NO_BANK.Add(masterBankNO);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> GetBankListDAL()
        {
            Models.PMGSYEntities dbContext = new Models.PMGSYEntities();
            try
            {
                List<SelectListItem> bankList = new List<SelectListItem>();
                SelectListItem item = null;

                var list = dbContext.PFMS_BANK_MASTER.Select(x => new { x.PFMS_BANK_ID, x.PFMS_BANK_NAME }).ToList();
                foreach (var lst in list)
                {
                    item = new SelectListItem();
                    item.Text = lst.PFMS_BANK_NAME.Trim();
                    item.Value = lst.PFMS_BANK_ID.ToString().Trim();
                    bankList.Add(item);
                }
                return bankList;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetBankListDAL()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddContractorBankDetails(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            bool flagAddEdit = true;
            bool recordCount = false;
            try
            {
                dbContext = new PMGSYEntities();
                #region Contractor Bank Details accepted by PFMS should not be deleted
                //recordCount = dbContext.MASTER_CONTRACTOR_BANK.Any(m => m.MAST_CON_ID == contractorBankDetails.MAST_CON_ID && m.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && m.MAST_ACCOUNT_STATUS == "A");
                //if (recordCount)
                //{
                //    int maxBankID = (from item in dbContext.MASTER_CONTRACTOR_BANK
                //                     where item.MAST_CON_ID == contractorBankDetails.MAST_CON_ID
                //                     select item.MAST_ACCOUNT_ID).Max();

                //    MASTER_CONTRACTOR_BANK master = (from item in dbContext.MASTER_CONTRACTOR_BANK
                //                                     where item.MAST_ACCOUNT_ID == maxBankID &&
                //                                     item.MAST_CON_ID == contractorBankDetails.MAST_CON_ID
                //                                     select item).FirstOrDefault();

                //    master.MAST_ACCOUNT_STATUS = "I";

                //    //Added by abhishek kamble 27-nov-2013
                //    master.USERID = PMGSYSession.Current.UserId;
                //    master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                //    dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                //    dbContext.SaveChanges();
                //}
                #endregion
                MASTER_CONTRACTOR_BANK masterContractorBank = new MASTER_CONTRACTOR_BANK();
                masterContractorBank.MAST_ACCOUNT_ID = dbContext.MASTER_CONTRACTOR_BANK.Max(cp => (Int32?)cp.MAST_ACCOUNT_ID) == null ? 1 : (Int32)dbContext.MASTER_CONTRACTOR_BANK.Max(cp => (Int32?)cp.MAST_ACCOUNT_ID) + 1;
                masterContractorBank = CloneBankDetailsModel(masterContractorBank, contractorBankDetails, flagAddEdit);
                dbContext = new PMGSYEntities();


                dbContext.MASTER_CONTRACTOR_BANK.Add(masterContractorBank);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool ValidatePFMSBankDetailsDAL(string bankName, string ifscCode)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (dbContext.PFMS_BANK_MASTER.Where(x => x.PFMS_BANK_NAME.Contains(bankName.Trim())).Any() && dbContext.PFMS_BANK_BRANCHMASTER.Where(x => x.BankName == bankName.Trim() && x.IFSCCode.Contains(ifscCode.Trim())).Any())
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "MasterDAL.ValidatePFMSBankDetailsDAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditContractorBankDetails(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            // bool flagAddEdit = false;
            int ConID = 0;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = contractorBankDetails.EncryptedAccountId.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                AccountCode = Convert.ToInt32(decryptedParameters["AccountCode"]);
                ConID = Convert.ToInt32(decryptedParameters["ConID"]);
                //Added By Abhishek kamble 20-feb-2014
                Int32 recCount = dbContext.MASTER_CONTRACTOR_BANK.Where(cb => cb.MAST_CON_ID == ConID && cb.MAST_ACCOUNT_ID != AccountCode && cb.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && cb.MAST_ACCOUNT_NUMBER == contractorBankDetails.MAST_ACCOUNT_NUMBER && cb.MAST_BANK_NAME == contractorBankDetails.MAST_BANK_NAME).Count();
                if (recCount > 0)
                {
                    message = "Contractor Bank details already exists.";
                    return false;
                }

                Int32 recordCount = dbContext.MASTER_CONTRACTOR_BANK.Where(cb => cb.MAST_CON_ID == ConID && cb.MAST_ACCOUNT_ID != AccountCode && cb.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && cb.MAST_ACCOUNT_STATUS == "A").Count();
                if (recordCount > 0)
                {
                    message = "Contractor Bank details already exists for selected district.";
                    return false;
                }
                MASTER_CONTRACTOR_BANK masterContratorBank = dbContext.MASTER_CONTRACTOR_BANK.Where(cb => cb.MAST_CON_ID == ConID && cb.MAST_ACCOUNT_ID == AccountCode).FirstOrDefault();

                if (masterContratorBank == null)
                {
                    return false;
                }
                // masterContratorBank = CloneBankDetailsModel(masterContratorBank,contractorBankDetails, flagAddEdit);
                masterContratorBank.MAST_ACCOUNT_NUMBER = contractorBankDetails.MAST_ACCOUNT_NUMBER;
                masterContratorBank.MAST_BANK_NAME = contractorBankDetails.MAST_BANK_NAME;
                masterContratorBank.MAST_DISTRICT_CODE = contractorBankDetails.MAST_DISTRICT_CODE;
                masterContratorBank.MAST_ACCOUNT_STATUS = contractorBankDetails.MAST_ACCOUNT_STATUS;
                masterContratorBank.MAST_IFSC_CODE = contractorBankDetails.MAST_IFSC_CODE == null ? null : contractorBankDetails.MAST_IFSC_CODE.ToString().Trim();

                //Added by abhishek kamble 27-nov-2013
                masterContratorBank.USERID = PMGSYSession.Current.UserId;
                masterContratorBank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(masterContratorBank).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteContractorBankDetails(int accountId, int coustomerId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CONTRACTOR_BANK masterContractorBank = dbContext.MASTER_CONTRACTOR_BANK.Where(m => m.MAST_CON_ID == coustomerId && m.MAST_ACCOUNT_ID == accountId).FirstOrDefault();
                if (masterContractorBank == null)
                {
                    return false;
                }

                //Added by abhishek kamble 27-nov-2013
                masterContractorBank.USERID = PMGSYSession.Current.UserId;
                masterContractorBank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterContractorBank).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.MASTER_CONTRACTOR_BANK.Remove(masterContractorBank);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Bank details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool EditBankDetailsNO(MasterContractorBankDetails contractorBankDetails, ref string message)
        {
            // bool flagAddEdit = false;
            int NOId = 0;
            try
            {
                dbContext = new PMGSYEntities();
                encryptedParameters = contractorBankDetails.EncryptedAccountId.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                AccountCode = Convert.ToInt32(decryptedParameters["AccountCode"]);
                NOId = Convert.ToInt32(decryptedParameters["NodalOfficerCode"]);
                //Added By Abhishek kamble 20-feb-2014
                Int32 recCount = dbContext.ADMIN_NO_BANK.Where(cb => cb.ADMIN_NO_OFFICER_CODE == NOId && cb.MAST_ACCOUNT_ID != AccountCode && cb.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && cb.MAST_ACCOUNT_NUMBER == contractorBankDetails.MAST_ACCOUNT_NUMBER && cb.MAST_BANK_NAME == contractorBankDetails.MAST_BANK_NAME).Count();
                if (recCount > 0)
                {
                    message = "Bank details for Nodal Officer already exists.";
                    return false;
                }

                Int32 recordCount = dbContext.ADMIN_NO_BANK.Where(cb => cb.ADMIN_NO_OFFICER_CODE == NOId && cb.MAST_ACCOUNT_ID != AccountCode && cb.MAST_DISTRICT_CODE == contractorBankDetails.MAST_DISTRICT_CODE && cb.MAST_ACCOUNT_STATUS == "A").Count();
                if (recordCount > 0)
                {
                    message = "Nodal Officer Bank details already exists for selected district.";
                    return false;
                }
                ADMIN_NO_BANK masterContratorBank = dbContext.ADMIN_NO_BANK.Where(cb => cb.ADMIN_NO_OFFICER_CODE == NOId && cb.MAST_ACCOUNT_ID == AccountCode).FirstOrDefault();

                if (masterContratorBank == null)
                {
                    return false;
                }
                // masterContratorBank = CloneBankDetailsModel(masterContratorBank,contractorBankDetails, flagAddEdit);
                masterContratorBank.MAST_ACCOUNT_NUMBER = contractorBankDetails.MAST_ACCOUNT_NUMBER;
                masterContratorBank.MAST_BANK_NAME = contractorBankDetails.MAST_BANK_NAME;
                masterContratorBank.MAST_DISTRICT_CODE = contractorBankDetails.MAST_DISTRICT_CODE;
                masterContratorBank.MAST_ACCOUNT_STATUS = contractorBankDetails.MAST_ACCOUNT_STATUS;
                masterContratorBank.MAST_IFSC_CODE = contractorBankDetails.MAST_IFSC_CODE == null ? null : contractorBankDetails.MAST_IFSC_CODE.ToString().Trim();

                //Added by abhishek kamble 27-nov-2013
                masterContratorBank.USERID = PMGSYSession.Current.UserId;
                masterContratorBank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(masterContratorBank).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteBankDetailsNO(int accountId, int customerId, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_NO_BANK masterContractorBank = dbContext.ADMIN_NO_BANK.Where(m => m.ADMIN_NO_OFFICER_CODE == customerId && m.MAST_ACCOUNT_ID == accountId).FirstOrDefault();
                if (masterContractorBank == null)
                {
                    return false;
                }

                //Added by abhishek kamble 27-nov-2013
                masterContractorBank.USERID = PMGSYSession.Current.UserId;
                masterContractorBank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterContractorBank).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_NO_BANK.Remove(masterContractorBank);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Bank details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array ListBankDetailsNO(int NodalOfficerCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstContractorBankDetails = (from item in dbContext.ADMIN_NO_BANK

                                                join officers in dbContext.ADMIN_NODAL_OFFICERS
                                                on item.ADMIN_NO_OFFICER_CODE equals officers.ADMIN_NO_OFFICER_CODE

                                                join districts in dbContext.MASTER_DISTRICT
                                                on item.MAST_DISTRICT_CODE equals districts.MAST_DISTRICT_CODE

                                                join state in dbContext.MASTER_STATE
                                                on districts.MAST_STATE_CODE equals state.MAST_STATE_CODE

                                                where
                                                 (NodalOfficerCode == 0 ? 1 : item.ADMIN_NO_OFFICER_CODE) == (NodalOfficerCode == 0 ? 1 : NodalOfficerCode)
                                                select new
                                                {
                                                    item.MAST_ACCOUNT_ID,
                                                    item.MAST_ACCOUNT_NUMBER,
                                                    item.MAST_ACCOUNT_STATUS,
                                                    item.MAST_BANK_NAME,
                                                    officers.ADMIN_NO_FNAME,
                                                    officers.ADMIN_NO_MNAME,
                                                    officers.ADMIN_NO_LNAME,
                                                    districts.MAST_DISTRICT_NAME,
                                                    item.MAST_IFSC_CODE,
                                                    item.MAST_LOCK_STATUS,
                                                    item.ADMIN_NO_OFFICER_CODE,
                                                    state.MAST_STATE_NAME

                                                }).ToList();

                totalRecords = lstContractorBankDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.ADMIN_NO_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.ADMIN_NO_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                return lstContractorBankDetails.Select(item => new
                {
                    cell = new[]
                {
                    item.ADMIN_NO_FNAME +""+item.ADMIN_NO_MNAME+""+item.ADMIN_NO_LNAME,
                    item.MAST_DISTRICT_NAME.ToString(),
                    item.MAST_STATE_NAME==null?string.Empty:item.MAST_STATE_NAME.ToString(),
                    item.MAST_ACCOUNT_NUMBER==null?string.Empty:item.MAST_ACCOUNT_NUMBER.ToString(),
                    item.MAST_BANK_NAME==null?string.Empty:item.MAST_BANK_NAME.ToString(),
                    item.MAST_IFSC_CODE==null?"NA":item.MAST_IFSC_CODE,
                    item.MAST_ACCOUNT_STATUS=="A"?"Active":"InActive", 
                    //(item.MAST_ACCOUNT_STATUS=="A" && item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty
                    (item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"NodalOfficerCode="+item.ADMIN_NO_OFFICER_CODE.ToString().Trim()}):string.Empty //change on 17 june 2014 by deepak
                    
               
                }

                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array ListContractorBankDetails(int ContractorCode, int regState, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstContractorBankDetails = (from item in dbContext.MASTER_CONTRACTOR_BANK
                                                join contractor in dbContext.MASTER_CONTRACTOR
                                                on item.MAST_CON_ID equals contractor.MAST_CON_ID

                                                join districts in dbContext.MASTER_DISTRICT
                                                on item.MAST_DISTRICT_CODE equals districts.MAST_DISTRICT_CODE

                                                join state in dbContext.MASTER_STATE
                                                on districts.MAST_STATE_CODE equals state.MAST_STATE_CODE

                                                where
                                                 (ContractorCode == 0 ? 1 : item.MAST_CON_ID) == (ContractorCode == 0 ? 1 : ContractorCode)
                                                //&& ((regState == 0 ? 1 : item.MASTER_CONTRACTOR.MASTER_CONTRACTOR_REGISTRATION.FirstOrDefault(x => x.MAST_REG_STATE == state.MAST_STATE_CODE).MAST_REG_STATE) == (regState == 0 ? 1 : regState))
                                                ///Change to display contractor at all piu whose bank details are not registered
                                                //&& ((regState == 0 ? 1 : (!(item.MASTER_CONTRACTOR.MASTER_CONTRACTOR_REGISTRATION.Any(x => x.MAST_REG_STATE == state.MAST_STATE_CODE && x.MAST_CON_ID == item.MAST_CON_ID))) ? 1
                                                //: item.MASTER_CONTRACTOR.MASTER_CONTRACTOR_REGISTRATION.FirstOrDefault(x => x.MAST_REG_STATE == state.MAST_STATE_CODE).MAST_REG_STATE) == (regState == 0 ? 1 : regState))
                                                //&& ((PMGSYSession.Current.DistrictCode == 0 ? 1 : item.MAST_DISTRICT_CODE) == (PMGSYSession.Current.DistrictCode == 0 ? 1 : PMGSYSession.Current.DistrictCode))
                                                select new
                                                {
                                                    item.MAST_ACCOUNT_ID,
                                                    item.MAST_ACCOUNT_NUMBER,
                                                    item.MAST_ACCOUNT_STATUS,
                                                    item.MAST_BANK_NAME,
                                                    contractor.MAST_CON_FNAME,
                                                    contractor.MAST_CON_MNAME,
                                                    contractor.MAST_CON_LNAME,
                                                    districts.MAST_DISTRICT_NAME,
                                                    item.MAST_IFSC_CODE,
                                                    item.MAST_LOCK_STATUS,
                                                    item.MAST_CON_ID,
                                                    state.MAST_STATE_NAME,
                                                    item.USERID,
                                                    //acceptStatus = contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Any(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID) ? contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Where(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID //&& !(contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Where(y => y.MAST_CON_ID == item.MAST_CON_ID && y.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID && y.STATUS == "A")).Any()
                                                    //).OrderByDescending(c => c.ACK_RECV_DATE).Select(x => x.STATUS).FirstOrDefault() : "-",

                                                    //acceptStatus = !(contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Any(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID)) ? "-" 
                                                    //               : (contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Where(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID && x.PFMS_CON_ID != null && x.STATUS == "A").Any                                                                        ()) ? "A" 
                                                    //                     : (contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Where(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID && x.PFMS_CON_ID == null && x.STATUS == "R").Any                                                                        ()) ? "R" : "",

                                                    acceptStatus = !(dbContext.REAT_CONTRACTOR_DETAILS.Any(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID)) ? "-"
                                                                   : (dbContext.REAT_CONTRACTOR_DETAILS.Where(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID && x.REAT_CON_ID != null && x.reat_STATUS == "A").Any()) ? "A"
                                                                         : (dbContext.REAT_CONTRACTOR_DETAILS.Where(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID && x.REAT_CON_ID == null && x.reat_STATUS == "R").Any
                                                                         ()) ? "R" : "",


                                                    userName = item.UM_User_Master.UserName

                                                }).ToList();

                totalRecords = lstContractorBankDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_CON_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_CON_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                return lstContractorBankDetails.Select(item => new
                {
                    cell = new[]
                {
                    item.MAST_CON_FNAME +" "+item.MAST_CON_MNAME+" "+item.MAST_CON_LNAME,
                    item.MAST_DISTRICT_NAME.ToString(),
                    item.MAST_STATE_NAME==null?string.Empty:item.MAST_STATE_NAME.ToString(),
                    item.MAST_ACCOUNT_NUMBER==null?string.Empty:item.MAST_ACCOUNT_NUMBER.ToString(),
                    item.MAST_BANK_NAME==null?string.Empty:item.MAST_BANK_NAME.ToString(),
                    item.MAST_IFSC_CODE==null?"NA":item.MAST_IFSC_CODE,
                    item.MAST_ACCOUNT_STATUS=="A"?"Active":"InActive",
                    PMGSYSession.Current.RoleCode == 23?(item.MAST_ACCOUNT_STATUS!="A"?"<center><table><tr><td  style='border:none;'><span class='ui-icon ui-icon-plusthick' title='Make Status Active' onClick ='activateStatus(\"" +  URLEncrypt.EncryptParameters1(new string[] {"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}) + "\");'></span></td></tr></table></center>" :"-"):"NA",


                    //(item.MAST_ACCOUNT_STATUS=="A" && item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty
                    
                    (item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty, //change on 17 june 2014 by deepak
                    //Enable Action link if not finalised or latest entry is rejected
                    //(item.MAST_LOCK_STATUS=="N" || item.acceptStatus == "R")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty,
                    #region ref Code
                    //(PMGSYSession.Current.RoleCode == 36) 
                    //    ?(item.acceptStatus == "-" || item.acceptStatus == "R")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty
                    //    :(item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty, 
                    #endregion
                    (PMGSYSession.Current.RoleCode == 22) 
                                //? ((item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty) //change on 01 may 2018 by Pradip
                                ? ((item.MAST_LOCK_STATUS=="N")
                                    ? "<center><table><tr><td  style='border:none;'><span class='ui-icon ui-icon-plusthick' title='Finalize Bank Details' onClick ='finalizeBankDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]                                                                           {"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}) + "\");'></span></td></tr></table></center>"
                                    : "<center><table><tr><td style='border:none;'><span class='ui-icon ui-icon-locked' title='Bank Details are finalised'></span></td></tr></table></center>")
                                : (item.MAST_LOCK_STATUS=="N"
                                    ? "<center><table><tr><td  style='border:none;'><span class='ui-icon ui-icon-plusthick' title='Finalize Bank Details' onClick ='finalizeBankDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]                                                                           {"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}) + "\");'></span></td></tr></table></center>" //+ "\n Bank Details not finalized by PIU" 
                                    : "Bank Details finalized by " + (string.IsNullOrEmpty(item.userName) ? "" : item.userName)
                                ),
                                (string.IsNullOrEmpty(item.acceptStatus) ? "(Pending at PFMS)" : (item.acceptStatus) == "A" ? "(Accepted by PFMS)" :(item.acceptStatus) == "R" ? "(Rejected by PFMS)" : "Not Sent to PFMS")
                }

                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array ListContractorBankDetailsView(int ContractorCode, int regState, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstContractorBankDetails = (from item in dbContext.MASTER_CONTRACTOR_BANK
                                                join contractor in dbContext.MASTER_CONTRACTOR
                                                on item.MAST_CON_ID equals contractor.MAST_CON_ID

                                                join districts in dbContext.MASTER_DISTRICT
                                                on item.MAST_DISTRICT_CODE equals districts.MAST_DISTRICT_CODE

                                                join state in dbContext.MASTER_STATE
                                                on districts.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                                where
                                                 (ContractorCode == 0 ? 1 : item.MAST_CON_ID) == (ContractorCode == 0 ? 1 : ContractorCode)
                                                //&& ((regState == 0 ? 1 : item.MASTER_CONTRACTOR.MASTER_CONTRACTOR_REGISTRATION.FirstOrDefault(x => x.MAST_REG_STATE == state.MAST_STATE_CODE).MAST_REG_STATE) == (regState == 0 ? 1 : regState))
                                                //&& ((PMGSYSession.Current.DistrictCode == 0 ? 1 : item.MAST_DISTRICT_CODE) == (PMGSYSession.Current.DistrictCode == 0 ? 1 : PMGSYSession.Current.DistrictCode))
                                                select new
                                                {
                                                    item.MAST_ACCOUNT_ID,
                                                    item.MAST_ACCOUNT_NUMBER,
                                                    item.MAST_ACCOUNT_STATUS,
                                                    item.MAST_BANK_NAME,
                                                    contractor.MAST_CON_FNAME,
                                                    contractor.MAST_CON_MNAME,
                                                    contractor.MAST_CON_LNAME,
                                                    districts.MAST_DISTRICT_NAME,
                                                    item.MAST_IFSC_CODE,
                                                    item.MAST_LOCK_STATUS,
                                                    item.MAST_CON_ID,
                                                    state.MAST_STATE_NAME,
                                                    item.USERID,
                                                    acceptStatus = contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Any(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID) ? contractor.PFMS_OMMAS_CONTRACTOR_MAPPING.Where(x => x.MAST_CON_ID == item.MAST_CON_ID && x.MAST_ACCOUNT_ID == item.MAST_ACCOUNT_ID).Select(x => x.STATUS).FirstOrDefault() : "-",
                                                    userName = item.UM_User_Master.UserName

                                                }).ToList();

                totalRecords = lstContractorBankDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_CON_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_CON_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                return lstContractorBankDetails.Select(item => new
                {
                    cell = new[]
                {
                    item.MAST_CON_FNAME +""+item.MAST_CON_MNAME+""+item.MAST_CON_LNAME,
                    item.MAST_DISTRICT_NAME.ToString(),
                    item.MAST_STATE_NAME==null?string.Empty:item.MAST_STATE_NAME.ToString(),
                    item.MAST_ACCOUNT_NUMBER==null?string.Empty:item.MAST_ACCOUNT_NUMBER.ToString(),
                    item.MAST_BANK_NAME==null?string.Empty:item.MAST_BANK_NAME.ToString(),
                    item.MAST_IFSC_CODE==null?"NA":item.MAST_IFSC_CODE,
                    item.MAST_ACCOUNT_STATUS=="A"?"Active":"InActive", 
                    //(item.MAST_ACCOUNT_STATUS=="A" && item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty
                    (item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty, //change on 17 june 2014 by deepak
                    (PMGSYSession.Current.RoleCode == 22) 
                                //? ((item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty) //change on 01 may 2018 by Pradip
                                ? ((item.MAST_LOCK_STATUS=="N")
                                    ? "<center><table><tr><td  style='border:none;'><span class='ui-icon ui-icon-plusthick' title='Finalize Bank Details' onClick ='finalizeBankDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]                                                                           {"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}) + "\");'></span></td></tr></table></center>"
                                    : "<center><table><tr><td style='border:none;'><span class='ui-icon ui-icon-locked' title='Bank Details are finalised'></span></td></tr></table></center>")
                                : (item.MAST_LOCK_STATUS=="N"
                                    ? "<center><table><tr><td  style='border:none;'><span class='ui-icon ui-icon-plusthick' title='Finalize Bank Details' onClick ='finalizeBankDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]                                                                           {"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}) + "\");'></span></td></tr></table></center>" //+ "\n Bank Details not finalized by PIU" 
                                    : "Bank Details finalized by " + (string.IsNullOrEmpty(item.userName) ? "" : item.userName)
                                ),
                                (string.IsNullOrEmpty(item.acceptStatus) ? "(Pending at PFMS)" : (item.acceptStatus) == "A" ? "(Accepted by PFMS)" :(item.acceptStatus) == "R" ? "(Rejected by PFMS)" : "Not Sent to PFMS")
                }

                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public List<MASTER_DISTRICT> getContractorDistricts(int contractorId)
        {

            try
            {
                dbContext = new PMGSYEntities();
                int stateCode = (from item in dbContext.MASTER_CONTRACTOR
                                 where item.MAST_CON_ID == contractorId
                                 select item.MAST_STATE_CODE_ADDR).FirstOrDefault();
                List<MASTER_DISTRICT> districtList = dbContext.MASTER_DISTRICT.Where(d => d.MAST_STATE_CODE == stateCode && d.MAST_DISTRICT_ACTIVE == "Y").OrderBy(d => d.MAST_DISTRICT_NAME).ToList<MASTER_DISTRICT>();

                districtList.Insert(0, new MASTER_DISTRICT() { MAST_DISTRICT_CODE = 0, MAST_DISTRICT_NAME = "--Select--" });
                return districtList;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        public MASTER_CONTRACTOR_BANK CloneBankDetailsModel(MASTER_CONTRACTOR_BANK masterContractorBank, MasterContractorBankDetails contractorBankDetails, bool flagAddEdit)
        {
            try
            {
                if (flagAddEdit)
                {
                    masterContractorBank.MAST_CON_ID = contractorBankDetails.MAST_CON_ID;
                    masterContractorBank.MAST_ACCOUNT_STATUS = "A";
                    masterContractorBank.MAST_LOCK_STATUS = "N";
                }

                masterContractorBank.MAST_ACCOUNT_NUMBER = contractorBankDetails.MAST_ACCOUNT_NUMBER;
                masterContractorBank.MAST_BANK_NAME = contractorBankDetails.MAST_BANK_NAME;
                masterContractorBank.MAST_DISTRICT_CODE = contractorBankDetails.MAST_DISTRICT_CODE;
                masterContractorBank.MAST_IFSC_CODE = contractorBankDetails.MAST_IFSC_CODE == null ? null : contractorBankDetails.MAST_IFSC_CODE.ToString().Trim();

                //Added by abhishek kamble 27-nov-2013
                masterContractorBank.USERID = PMGSYSession.Current.UserId;
                masterContractorBank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                return masterContractorBank;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public MasterContractorBankDetails CloneBankDetailsObject(MASTER_CONTRACTOR_BANK masterContractorBank)
        {
            try
            {
                MasterContractorBankDetails contractorBankDetails = new MasterContractorBankDetails();
                contractorBankDetails.EncryptedAccountId = URLEncrypt.EncryptParameters1(new string[] { "AccountCode =" + masterContractorBank.MAST_ACCOUNT_ID.ToString().Trim(), "ConID =" + masterContractorBank.MAST_CON_ID.ToString().Trim() });
                contractorBankDetails.MAST_ACCOUNT_NUMBER = masterContractorBank.MAST_ACCOUNT_NUMBER;
                contractorBankDetails.MAST_ACCOUNT_STATUS = masterContractorBank.MAST_ACCOUNT_STATUS;
                contractorBankDetails.MAST_BANK_NAME = masterContractorBank.MAST_BANK_NAME;
                contractorBankDetails.MAST_DISTRICT_CODE = masterContractorBank.MAST_DISTRICT_CODE;
                contractorBankDetails.MAST_IFSC_CODE = masterContractorBank.MAST_IFSC_CODE == null ? string.Empty : masterContractorBank.MAST_IFSC_CODE.Trim();
                return contractorBankDetails;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
        }
        public MasterContractorBankDetails getContractorBankDetails_ByBankCode(int accountId, int ContractorId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CONTRACTOR_BANK masterContractorBank = dbContext.MASTER_CONTRACTOR_BANK.FirstOrDefault(m => m.MAST_CON_ID == ContractorId && m.MAST_ACCOUNT_ID == accountId);

                MasterContractorBankDetails contractorBankDetails = null;
                if (masterContractorBank != null)
                {
                    contractorBankDetails = CloneBankDetailsObject(masterContractorBank);
                }

                return contractorBankDetails;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string[] GetdetailsforPFMSValidation(int AccountCode, int ContractorCode)
        {
            dbContext = new PMGSYEntities();
            //string bankName = string.Empty, ifscCode = string.Empty;
            string[] arrBankDetails = new string[3];
            try
            {
                #region Validate Bank Details before finalize
                var bankDetails = dbContext.MASTER_CONTRACTOR_BANK.Where(x => x.MAST_ACCOUNT_ID == AccountCode && x.MAST_CON_ID == ContractorCode).Select(x => new { x.MAST_BANK_NAME, x.MAST_IFSC_CODE, x.MAST_ACCOUNT_STATUS }).ToList();
                if (bankDetails != null)
                {
                    foreach (var item in bankDetails)
                    {
                        arrBankDetails[0] = string.IsNullOrEmpty(item.MAST_BANK_NAME) ? "" : item.MAST_BANK_NAME.Trim();
                        arrBankDetails[1] = string.IsNullOrEmpty(item.MAST_IFSC_CODE) ? "" : item.MAST_IFSC_CODE.Trim();
                        arrBankDetails[2] = string.IsNullOrEmpty(item.MAST_ACCOUNT_STATUS) ? "" : item.MAST_ACCOUNT_STATUS.Trim();
                    }
                }
                #endregion

                return arrBankDetails;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "MASTERDAL.GetdetailsforPFMSValidation");
                return null;
            }
        }

        //added by pp 01-05-2018
        public Boolean FinalizeBankDetails(int AccountCode, int ContractorCode)
        {
            dbContext = new PMGSYEntities();
            try
            {


                MASTER_CONTRACTOR_BANK bank = dbContext.MASTER_CONTRACTOR_BANK.SingleOrDefault(s => s.MAST_ACCOUNT_ID == AccountCode && s.MAST_CON_ID == ContractorCode);
                dbContext.MASTER_CONTRACTOR_BANK.Attach(bank);
                bank.MAST_LOCK_STATUS = "Y";
                bank.FINALIZATION_DATE = DateTime.Now;
                bank.USERID = PMGSYSession.Current.UserId;
                bank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(bank).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "FinalizeBankDetails()");
                return false;
            }
        }

        public Boolean ActivateBankAccountStatusDAL(int AccountCode, int ContractorCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_CONTRACTOR_BANK bank = dbContext.MASTER_CONTRACTOR_BANK.SingleOrDefault(s => s.MAST_ACCOUNT_ID == AccountCode && s.MAST_CON_ID == ContractorCode);
                dbContext.MASTER_CONTRACTOR_BANK.Attach(bank);
                bank.MAST_ACCOUNT_STATUS = "A";
                bank.USERID = PMGSYSession.Current.UserId;
                bank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(bank).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ActivateBankAccountStatusDAL()");
                return false;
            }
        }

        #endregion BankDetails

        #region NodalOfficer
        public MasterContractorBankDetails getBankDetailsNO_ByBankCode(int accountId, int NodalOfficerCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_NO_BANK masterContractorBank = dbContext.ADMIN_NO_BANK.FirstOrDefault(m => m.ADMIN_NO_OFFICER_CODE == NodalOfficerCode && m.MAST_ACCOUNT_ID == accountId);

                MasterContractorBankDetails contractorBankDetails = new MasterContractorBankDetails();
                if (masterContractorBank != null)
                {
                    contractorBankDetails.EncryptedAccountId = URLEncrypt.EncryptParameters1(new string[] { "AccountCode =" + masterContractorBank.MAST_ACCOUNT_ID.ToString().Trim(), "NodalOfficerCode =" + masterContractorBank.ADMIN_NO_OFFICER_CODE.ToString().Trim() });
                    contractorBankDetails.MAST_ACCOUNT_NUMBER = masterContractorBank.MAST_ACCOUNT_NUMBER;
                    contractorBankDetails.MAST_ACCOUNT_STATUS = masterContractorBank.MAST_ACCOUNT_STATUS;
                    contractorBankDetails.MAST_BANK_NAME = masterContractorBank.MAST_BANK_NAME;
                    contractorBankDetails.MAST_DISTRICT_CODE = masterContractorBank.MAST_DISTRICT_CODE;
                    contractorBankDetails.MAST_IFSC_CODE = masterContractorBank.MAST_IFSC_CODE == null ? string.Empty : masterContractorBank.MAST_IFSC_CODE.Trim();
                }

                return contractorBankDetails;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddNodalOfficer(AdminNodalOfficerViewModel nodalOfficerView, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (nodalOfficerView.ADMIN_NO_MNAME != null && nodalOfficerView.ADMIN_NO_LNAME == null)
                {
                    if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                    {
                        System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                        if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                        {
                            message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                            return false;
                        }

                    }

                }
                else if (nodalOfficerView.ADMIN_NO_LNAME != null && nodalOfficerView.ADMIN_NO_MNAME == null)
                {
                    if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                    {
                        System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                        if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                        {
                            message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                            return false;
                        }

                    }
                }

                else if (nodalOfficerView.ADMIN_NO_LNAME == null && nodalOfficerView.ADMIN_NO_MNAME == null)
                {
                    if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                    {
                        System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                        if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                        {
                            message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                            return false;
                        }

                    }
                }

                else if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                {
                    System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                    if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                    {
                        message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                        return false;
                    }

                }
                bool flagAddEdit = true;
                ADMIN_NODAL_OFFICERS nodalOfficer = CloneAdminNodalOfficerModel(nodalOfficerView, flagAddEdit);
                nodalOfficer.ADMIN_NO_OFFICER_CODE = dbContext.ADMIN_NODAL_OFFICERS.Max(cp => (Int32?)cp.ADMIN_NO_OFFICER_CODE) == null ? 1 : (Int32)dbContext.ADMIN_NODAL_OFFICERS.Max(cp => (Int32?)cp.ADMIN_NO_OFFICER_CODE) + 1;

                dbContext = new PMGSYEntities();
                dbContext.ADMIN_NODAL_OFFICERS.Add(nodalOfficer);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        public bool EditNodalOfficer(AdminNodalOfficerViewModel nodalOfficerView, ref string message)
        {
            bool flagAddEdit = false;
            try
            {
                dbContext = new PMGSYEntities();
                if (nodalOfficerView.ADMIN_NO_MNAME != null && nodalOfficerView.ADMIN_NO_LNAME == null)
                {
                    if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                    {
                        System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                        if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                        {
                            message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                            return false;
                        }

                    }

                }
                else if (nodalOfficerView.ADMIN_NO_LNAME != null && nodalOfficerView.ADMIN_NO_MNAME == null)
                {
                    if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                    {
                        System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                        if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                        {
                            message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                            return false;
                        }

                    }
                }

                else if (nodalOfficerView.ADMIN_NO_LNAME == null && nodalOfficerView.ADMIN_NO_MNAME == null)
                {
                    if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                    {
                        System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                        if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                        {
                            message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                            return false;
                        }

                    }
                }

                else if ((dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Any()))
                {
                    System.DateTime? endDate = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_FNAME == nodalOfficerView.ADMIN_NO_FNAME && m.ADMIN_NO_MNAME == nodalOfficerView.ADMIN_NO_MNAME && m.ADMIN_NO_LNAME == nodalOfficerView.ADMIN_NO_LNAME && m.ADMIN_ND_CODE == nodalOfficerView.ADMIN_ND_CODE && m.ADMIN_NO_DESIGNATION == nodalOfficerView.ADMIN_NO_DESIGNATION && m.ADMIN_ACTIVE_STATUS == "N").Select(m => m.ADMIN_ACTIVE_END_DATE).FirstOrDefault();
                    if (ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) < endDate || ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE) == endDate)
                    {
                        message = "Start date must be greater than previous End date " + Convert.ToDateTime(endDate).ToString("dd/MM/yyyy");
                        return false;
                    }

                }
                encryptedParameters = nodalOfficerView.EncryptedOfficerCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                NodalOfficerCode = Convert.ToInt32(decryptedParameters["NodalOfficerCode"].ToString());
                ADMIN_NODAL_OFFICERS nodalOfficer = CloneAdminNodalOfficerModel(nodalOfficerView, flagAddEdit);
                dbContext = new PMGSYEntities();
                var currentProduct = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_OFFICER_CODE == NodalOfficerCode).FirstOrDefault(); ;
                dbContext.Entry(currentProduct).CurrentValues.SetValues(nodalOfficer);
                dbContext.SaveChanges();
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        public bool DeleteNodalOfficer(int OfficerCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_NODAL_OFFICERS nodalOfficer = dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_NO_OFFICER_CODE == OfficerCode).FirstOrDefault();
                if (nodalOfficer == null)
                {
                    return false;
                }

                //added by abhishek kamble 27-nov-2013
                nodalOfficer.USERID = PMGSYSession.Current.UserId;
                nodalOfficer.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(nodalOfficer).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_NODAL_OFFICERS.Remove(nodalOfficer);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListNodalOfficer(int stateCode, int officeCode, int designationCode, int NoTypeCode, string moduleType, string active, int? page, int? rows, string sidx, string sord, out long totalRecord)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstnodalOfficer = (from item in dbContext.ADMIN_NODAL_OFFICERS

                                       join designation in dbContext.MASTER_DESIGNATION
                                       on item.ADMIN_NO_DESIGNATION equals designation.MAST_DESIG_CODE into outerDesg
                                       from designation in outerDesg.DefaultIfEmpty()

                                       join district in dbContext.MASTER_DISTRICT
                                       on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into outerDistrict
                                       from district in outerDistrict.DefaultIfEmpty()

                                       join department in dbContext.ADMIN_DEPARTMENT
                                       on item.ADMIN_ND_CODE equals department.ADMIN_ND_CODE into outerDepartment
                                       from department in outerDepartment.DefaultIfEmpty()

                                       join NdType in dbContext.MASTER_PROFILE
                                       on item.ADMIN_NO_TYPE equals NdType.MAST_PROFILE_CODE

                                       where
                                      (officeCode == 0 ? 1 : department.ADMIN_ND_CODE) == (officeCode == 0 ? 1 : officeCode)
                                        &&
                                       (designationCode == 0 ? 1 : designation.MAST_DESIG_CODE) == (designationCode == 0 ? 1 : designationCode)
                                        &&
                                       (stateCode == 0 ? 1 : department.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) //chnage on 1 Aug 2014
                                       &&
                                       (NoTypeCode == 0 ? 1 : NdType.MAST_PROFILE_CODE) == (NoTypeCode == 0 ? 1 : NoTypeCode)
                                       &&
                                       ((moduleType == "%" ? "%" : item.ADMIN_MODULE) == (moduleType == "%" ? "%" : moduleType))
                                        &&
                                       ((active == "%" ? "%" : item.ADMIN_ACTIVE_STATUS) == (active == "%" ? "%" : active))

                                       &&
                                        (designation.MAST_DESIG_TYPE == "NO")

                                       select new
                                       {

                                           item.ADMIN_ACTIVE_END_DATE,
                                           item.ADMIN_ACTIVE_START_DATE,
                                           item.ADMIN_ACTIVE_STATUS,
                                           item.ADMIN_AUTH_CODE,
                                           district.MASTER_STATE.MAST_STATE_NAME,
                                           department.ADMIN_ND_NAME,
                                           item.ADMIN_NO_ADDRESS1,
                                           item.ADMIN_NO_ADDRESS2,
                                           designation.MAST_DESIG_NAME,
                                           item.ADMIN_NO_EMAIL,
                                           item.ADMIN_NO_FAX,
                                           item.ADMIN_NO_FNAME,
                                           item.ADMIN_NO_LEVEL,
                                           item.ADMIN_NO_LNAME,
                                           item.ADMIN_NO_MAIL_FLAG,
                                           item.ADMIN_NO_MNAME,
                                           item.ADMIN_NO_MOBILE,
                                           item.ADMIN_NO_OFFICE_PHONE,
                                           item.ADMIN_NO_OFFICE_STD,
                                           item.ADMIN_NO_OFFICER_CODE,
                                           item.ADMIN_NO_PIN,
                                           item.ADMIN_NO_REMARKS,
                                           item.ADMIN_NO_RESIDENCE_PHONE,
                                           item.ADMIN_NO_RESIDENCE_STD,
                                           item.ADMIN_NO_STD_FAX,
                                           item.ADMIN_NO_TYPE,
                                           district.MAST_DISTRICT_NAME,
                                           NdType.MAST_PROFILE_NAME

                                       }).ToList();

                totalRecord = lstnodalOfficer.Count();

                if (sidx.Trim() != null)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "NoName":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Name":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.ADMIN_NO_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Designation":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "NoType":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.MAST_PROFILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "StartDate":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.ADMIN_ACTIVE_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "EndDate":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.ADMIN_ACTIVE_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "StateName":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Active":
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.ADMIN_ACTIVE_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstnodalOfficer = lstnodalOfficer.OrderBy(m => m.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "NoName":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Name":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.ADMIN_NO_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Designation":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "NoType":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.MAST_PROFILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "StartDate":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.ADMIN_ACTIVE_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "EndDate":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.ADMIN_ACTIVE_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "StateName":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Active":
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.ADMIN_ACTIVE_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstnodalOfficer = lstnodalOfficer.OrderByDescending(m => m.ADMIN_ND_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }

                var result = lstnodalOfficer.Select(item => new
                {
                    item.ADMIN_ACTIVE_END_DATE,
                    item.ADMIN_ACTIVE_START_DATE,
                    item.ADMIN_ACTIVE_STATUS,
                    item.ADMIN_AUTH_CODE,
                    item.ADMIN_ND_NAME,
                    item.ADMIN_NO_ADDRESS1,
                    item.ADMIN_NO_ADDRESS2,
                    item.MAST_DESIG_NAME,
                    item.ADMIN_NO_EMAIL,
                    item.ADMIN_NO_FAX,
                    item.ADMIN_NO_FNAME,
                    item.ADMIN_NO_LEVEL,
                    item.ADMIN_NO_LNAME,
                    item.ADMIN_NO_MAIL_FLAG,
                    item.ADMIN_NO_MNAME,
                    item.ADMIN_NO_MOBILE,
                    item.ADMIN_NO_OFFICE_PHONE,
                    item.ADMIN_NO_OFFICE_STD,
                    item.ADMIN_NO_OFFICER_CODE,
                    item.ADMIN_NO_PIN,
                    item.ADMIN_NO_REMARKS,
                    item.ADMIN_NO_RESIDENCE_PHONE,
                    item.ADMIN_NO_RESIDENCE_STD,
                    item.ADMIN_NO_STD_FAX,
                    item.ADMIN_NO_TYPE,
                    item.MAST_DISTRICT_NAME,
                    item.MAST_STATE_NAME,
                    item.MAST_PROFILE_NAME

                }).ToArray();

                return result.Select(item => new
                {
                    cell = new[]
                      {

                          item.ADMIN_NO_FNAME +" "+item.ADMIN_NO_MNAME +" "+item.ADMIN_NO_LNAME==null?"NA":item.ADMIN_NO_FNAME +" "+item.ADMIN_NO_MNAME +" "+item.ADMIN_NO_LNAME,
                          item.MAST_DESIG_NAME==null?"NA":item.MAST_DESIG_NAME,
                          item.MAST_PROFILE_NAME==null?"NA":item.MAST_PROFILE_NAME.ToString(),
                          item.ADMIN_ND_NAME==null?"NA":item.ADMIN_ND_NAME,
                          item.MAST_STATE_NAME==null?"NA":item.MAST_STATE_NAME,
                          item.MAST_DISTRICT_NAME==null?"NA":item.MAST_DISTRICT_NAME,
                          item.ADMIN_ACTIVE_START_DATE==null?"NA":Convert.ToDateTime(item.ADMIN_ACTIVE_START_DATE).ToString("dd/MM/yyyy"),
                          item.ADMIN_ACTIVE_END_DATE==null?"NA":Convert.ToDateTime(item.ADMIN_ACTIVE_END_DATE).ToString("dd/MM/yyyy"),
                          item.ADMIN_ACTIVE_STATUS=="Y"?"Yes":"No",
                          //URLEncrypt.EncryptParameters1(new string[]{"ContRegID="+item.MAST_CON_ID.ToString().Trim(),"RegState="+item.MAST_REG_STATE.ToString().Trim()}),
                          URLEncrypt.EncryptParameters1(new string[]{"NodalOfficerCode="+item.ADMIN_NO_OFFICER_CODE.ToString()}),
                          URLEncrypt.EncryptParameters1(new string[]{"NodalOfficerCode="+item.ADMIN_NO_OFFICER_CODE.ToString()}),
                          URLEncrypt.EncryptParameters1(new string[]{"NodalOfficerCode="+item.ADMIN_NO_OFFICER_CODE.ToString()})
                      }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecord = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public AdminNodalOfficerViewModel GetAdminNodalOfficer_ByOfficerCode(int OfficerCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_NODAL_OFFICERS nodalOfficer = dbContext.ADMIN_NODAL_OFFICERS.FirstOrDefault(m => m.ADMIN_NO_OFFICER_CODE == OfficerCode);
                AdminNodalOfficerViewModel nodalOfficerView = null;
                if (nodalOfficer != null)
                {
                    nodalOfficerView = CloneAdminNodalOfficerObject(nodalOfficer);
                }
                return nodalOfficerView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public ADMIN_NODAL_OFFICERS CloneAdminNodalOfficerModel(AdminNodalOfficerViewModel nodalOfficerView, bool flagAddEdit)
        {
            try
            {
                ADMIN_NODAL_OFFICERS nodalOfficer = new ADMIN_NODAL_OFFICERS();
                if (flagAddEdit)
                {

                    nodalOfficer.ADMIN_ACTIVE_STATUS = "Y";
                }
                else
                {
                    nodalOfficer.ADMIN_NO_OFFICER_CODE = NodalOfficerCode;
                    nodalOfficer.ADMIN_ACTIVE_STATUS = nodalOfficerView.ADMIN_ACTIVE_STATUS;
                }
                nodalOfficer.ADMIN_ACTIVE_END_DATE = ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_END_DATE);
                nodalOfficer.ADMIN_ACTIVE_START_DATE = ConvertStringToDate(nodalOfficerView.ADMIN_ACTIVE_START_DATE);

                nodalOfficer.ADMIN_AUTH_CODE = nodalOfficerView.ADMIN_AUTH_CODE;
                nodalOfficer.ADMIN_ND_CODE = nodalOfficerView.ADMIN_ND_CODE;
                nodalOfficer.ADMIN_NO_ADDRESS1 = nodalOfficerView.ADMIN_NO_ADDRESS1;
                nodalOfficer.ADMIN_NO_ADDRESS2 = nodalOfficerView.ADMIN_NO_ADDRESS2;
                nodalOfficer.ADMIN_NO_DESIGNATION = Convert.ToInt32(nodalOfficerView.ADMIN_NO_DESIGNATION);
                nodalOfficer.ADMIN_NO_EMAIL = nodalOfficerView.ADMIN_NO_EMAIL;
                nodalOfficer.ADMIN_NO_FAX = nodalOfficerView.ADMIN_NO_FAX;
                nodalOfficer.ADMIN_NO_FNAME = nodalOfficerView.ADMIN_NO_FNAME;
                nodalOfficer.ADMIN_NO_LEVEL = "D";
                nodalOfficer.ADMIN_NO_MAIL_FLAG = nodalOfficerView.ADMIN_NO_MAIL_FLAG;
                nodalOfficer.ADMIN_NO_MNAME = nodalOfficerView.ADMIN_NO_MNAME;
                nodalOfficer.ADMIN_NO_MOBILE = nodalOfficerView.ADMIN_NO_MOBILE;
                nodalOfficer.ADMIN_NO_OFFICE_PHONE = nodalOfficerView.ADMIN_NO_OFFICE_PHONE;
                nodalOfficer.ADMIN_NO_OFFICE_STD = nodalOfficerView.ADMIN_NO_OFFICE_STD;
                nodalOfficer.ADMIN_NO_PIN = nodalOfficerView.ADMIN_NO_PIN;
                nodalOfficer.ADMIN_NO_REMARKS = nodalOfficerView.ADMIN_NO_REMARKS;
                nodalOfficer.ADMIN_NO_RESIDENCE_PHONE = nodalOfficerView.ADMIN_NO_RESIDENCE_PHONE;
                nodalOfficer.ADMIN_NO_RESIDENCE_STD = nodalOfficerView.ADMIN_NO_RESIDENCE_STD;
                nodalOfficer.ADMIN_NO_STD_FAX = nodalOfficerView.ADMIN_NO_STD_FAX;
                nodalOfficer.ADMIN_NO_TYPE = nodalOfficerView.ADMIN_NO_TYPE;
                nodalOfficer.MAST_DISTRICT_CODE = nodalOfficerView.MAST_DISTRICT_CODE == 0 ? null : nodalOfficer.MAST_DISTRICT_CODE = nodalOfficerView.MAST_DISTRICT_CODE;
                nodalOfficer.ADMIN_NO_LNAME = nodalOfficerView.ADMIN_NO_LNAME;
                nodalOfficer.ADMIN_AADHAR_NO = nodalOfficerView.ADMIN_AADHAR_NO;
                nodalOfficer.ADMIN_MODULE = "P";

                //added by abhishek kamble 27-nov-2013
                nodalOfficer.USERID = PMGSYSession.Current.UserId;
                nodalOfficer.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                return nodalOfficer;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }

        }

        public AdminNodalOfficerViewModel CloneAdminNodalOfficerObject(ADMIN_NODAL_OFFICERS nodalOfficer)
        {
            try
            {

                AdminNodalOfficerViewModel nodalOfficerView = new AdminNodalOfficerViewModel();

                nodalOfficerView.EncryptedOfficerCode = URLEncrypt.EncryptParameters1(new string[] { "NodalOfficerCode =" + nodalOfficer.ADMIN_NO_OFFICER_CODE.ToString() });

                nodalOfficerView.ADMIN_ACTIVE_END_DATE = nodalOfficer.ADMIN_ACTIVE_END_DATE == null ? string.Empty : ConvertDateToString(nodalOfficer.ADMIN_ACTIVE_END_DATE);
                nodalOfficerView.ADMIN_ACTIVE_START_DATE = nodalOfficer.ADMIN_ACTIVE_START_DATE == null ? string.Empty : ConvertDateToString(nodalOfficer.ADMIN_ACTIVE_START_DATE);
                nodalOfficerView.ADMIN_ACTIVE_STATUS = nodalOfficer.ADMIN_ACTIVE_STATUS;
                nodalOfficerView.ADMIN_AUTH_CODE = nodalOfficer.ADMIN_AUTH_CODE;
                nodalOfficerView.ADMIN_ND_CODE = nodalOfficer.ADMIN_ND_CODE;
                nodalOfficerView.ADMIN_NO_ADDRESS1 = nodalOfficer.ADMIN_NO_ADDRESS1;
                nodalOfficerView.ADMIN_NO_ADDRESS2 = nodalOfficer.ADMIN_NO_ADDRESS2;
                nodalOfficerView.ADMIN_NO_DESIGNATION = nodalOfficer.ADMIN_NO_DESIGNATION;
                nodalOfficerView.ADMIN_NO_EMAIL = nodalOfficer.ADMIN_NO_EMAIL;
                nodalOfficerView.ADMIN_NO_FAX = nodalOfficer.ADMIN_NO_FAX;
                nodalOfficerView.ADMIN_NO_FNAME = nodalOfficer.ADMIN_NO_FNAME;
                nodalOfficerView.ADMIN_NO_LEVEL = nodalOfficer.ADMIN_NO_LEVEL;
                nodalOfficerView.ADMIN_NO_LNAME = nodalOfficer.ADMIN_NO_LNAME;
                nodalOfficerView.ADMIN_NO_MAIL_FLAG = nodalOfficer.ADMIN_NO_MAIL_FLAG;
                nodalOfficerView.ADMIN_NO_MNAME = nodalOfficer.ADMIN_NO_MNAME;
                nodalOfficerView.ADMIN_NO_MOBILE = nodalOfficer.ADMIN_NO_MOBILE;
                nodalOfficerView.ADMIN_NO_OFFICE_PHONE = nodalOfficer.ADMIN_NO_OFFICE_PHONE;
                nodalOfficerView.ADMIN_NO_OFFICE_STD = nodalOfficer.ADMIN_NO_OFFICE_STD;
                nodalOfficerView.ADMIN_NO_PIN = nodalOfficer.ADMIN_NO_PIN;
                nodalOfficerView.ADMIN_NO_REMARKS = nodalOfficer.ADMIN_NO_REMARKS;
                nodalOfficerView.ADMIN_NO_RESIDENCE_PHONE = nodalOfficer.ADMIN_NO_RESIDENCE_PHONE;
                nodalOfficerView.ADMIN_NO_RESIDENCE_STD = nodalOfficer.ADMIN_NO_RESIDENCE_STD;
                nodalOfficerView.ADMIN_NO_STD_FAX = nodalOfficer.ADMIN_NO_STD_FAX;
                nodalOfficerView.ADMIN_NO_TYPE = nodalOfficer.ADMIN_NO_TYPE;
                nodalOfficerView.MAST_DISTRICT_CODE = nodalOfficer.MAST_DISTRICT_CODE;
                nodalOfficerView.ADMIN_MODULE = nodalOfficer.ADMIN_MODULE;
                nodalOfficerView.ADMIN_NAME = dbContext.ADMIN_DEPARTMENT.Where(a => a.ADMIN_ND_CODE == nodalOfficer.ADMIN_ND_CODE).Select(a => a.ADMIN_ND_NAME).FirstOrDefault();
                nodalOfficerView.ADMIN_DESIGNATION = dbContext.MASTER_DESIGNATION.Where(a => a.MAST_DESIG_CODE == nodalOfficer.ADMIN_NO_DESIGNATION).Select(a => a.MAST_DESIG_NAME).FirstOrDefault();
                nodalOfficerView.ADMIN_DISTRICT = dbContext.MASTER_DISTRICT.Where(a => a.MAST_DISTRICT_CODE == nodalOfficer.MAST_DISTRICT_CODE).Select(a => a.MAST_DISTRICT_NAME).FirstOrDefault();
                nodalOfficerView.ADMIN_TYPE = dbContext.MASTER_PROFILE.Where(a => a.MAST_PROFILE_CODE == nodalOfficer.ADMIN_NO_TYPE).Select(a => a.MAST_PROFILE_NAME).FirstOrDefault();
                nodalOfficerView.ADMIN_AADHAR_NO = nodalOfficer.ADMIN_AADHAR_NO;
                return nodalOfficerView;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> PopulateDistrict(string adminNdCode)
        {
            int AdminCode = Convert.ToInt32(adminNdCode);
            try
            {
                dbContext = new PMGSYEntities();
                List<SelectListItem> lstDistrict = new List<SelectListItem>();
                string type = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == AdminCode).Select(m => m.MAST_ND_TYPE).FirstOrDefault();
                if (type == "S")
                {
                    //var stateList = (from item in dbContext.ADMIN_DEPARTMENT
                    //             join state in dbContext.MASTER_STATE
                    //             on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                    //             join district in dbContext.MASTER_DISTRICT
                    //             on 
                    //             where item.ADMIN_ND_CODE == AdminCode
                    //             select new
                    //             {
                    //                 state.MAST_STATE_NAME,
                    //                 state.MAST_STATE_CODE
                    //             }).ToList();

                    var stateCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == AdminCode).Select(m => m.MAST_STATE_CODE).FirstOrDefault();

                    var districtList = (from item in dbContext.MASTER_DISTRICT
                                        where
                                        item.MAST_STATE_CODE == stateCode
                                        select new
                                        {
                                            item.MAST_DISTRICT_CODE,
                                            item.MAST_DISTRICT_NAME
                                        }).ToList();
                    foreach (var item in districtList)
                    {
                        lstDistrict.Add(new SelectListItem { Value = item.MAST_DISTRICT_CODE.ToString(), Text = item.MAST_DISTRICT_NAME });
                    }
                    // lstDistrict.Insert(0, new SelectListItem {Value="0",Text="Select District"});
                    //return lstDistrict;

                }
                else if (type == "D")
                {
                    var districtList = (from item in dbContext.ADMIN_DEPARTMENT
                                        join district in dbContext.MASTER_DISTRICT
                                        on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                        where item.ADMIN_ND_CODE == AdminCode
                                        select new
                                        {
                                            district.MAST_DISTRICT_CODE,
                                            district.MAST_DISTRICT_NAME
                                        }).ToList();
                    foreach (var item in districtList)
                    {
                        lstDistrict.Add(new SelectListItem { Value = item.MAST_DISTRICT_CODE.ToString(), Text = item.MAST_DISTRICT_NAME });
                    }
                    //lstDistrict.Insert(0, new SelectListItem { Value = "0", Text = "Select District" });

                }
                return lstDistrict;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_DESIGNATION> GetNodalDesignation()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_DESIGNATION> list = dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_TYPE == "NO").ToList<MASTER_DESIGNATION>();
                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<ADMIN_DEPARTMENT> GetAdminNdCode()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<ADMIN_DEPARTMENT> list = null;
                switch (PMGSYSession.Current.RoleCode)
                {
                    case 2:
                        list = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode || m.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).ToList<ADMIN_DEPARTMENT>();
                        break;
                    case 22:
                        list = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode || m.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).ToList<ADMIN_DEPARTMENT>();
                        break;
                    case 36:
                        list = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode || m.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).ToList<ADMIN_DEPARTMENT>();
                        break;
                    case 37:
                        list = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode || m.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).ToList<ADMIN_DEPARTMENT>();
                        break;
                    case 38:
                        list = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode || m.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).ToList<ADMIN_DEPARTMENT>();
                        break;
                    case 56:
                        list = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode || m.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).ToList<ADMIN_DEPARTMENT>();
                        break;
                    default:
                        list = dbContext.ADMIN_DEPARTMENT.ToList<ADMIN_DEPARTMENT>();
                        break;
                }



                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<ADMIN_DEPARTMENT> GetAdminNdCode_ByStateCode(int stateCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<ADMIN_DEPARTMENT> list = new List<ADMIN_DEPARTMENT>();

                var agencyCode = (from c in dbContext.ADMIN_DEPARTMENT
                                  where ((stateCode == 0 ? 1 : c.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode))
                                  && ((PMGSYSession.Current.AdminNdCode == 0 ? 1 : c.ADMIN_ND_CODE) == (PMGSYSession.Current.AdminNdCode == 0 ? 1 : PMGSYSession.Current.AdminNdCode))
                                  select c.MAST_AGENCY_CODE).Distinct().ToList();
                foreach (var item in agencyCode)
                {
                    var Data = (from nd in dbContext.ADMIN_DEPARTMENT
                                where ((stateCode == 0 ? 1 : nd.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode))
                                && ((item == 0 ? 1 : nd.MAST_AGENCY_CODE) == (item == 0 ? 1 : item))
                                select nd).OrderBy(nd => nd.ADMIN_ND_NAME).ToList<ADMIN_DEPARTMENT>();


                    foreach (var ad in Data)
                    {
                        list.Add(ad);

                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<MASTER_PROFILE> GetAdminNoType()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<MASTER_PROFILE> list = new List<MASTER_PROFILE>();
                if (PMGSYSession.Current.RoleCode != 47) //ITNOOA=47 RoleCode
                {
                    list = dbContext.MASTER_PROFILE.Where(m => m.MAST_PROFILE_STATUS == "Y").ToList<MASTER_PROFILE>();
                }
                else
                {
                    list = dbContext.MASTER_PROFILE.Where(m => m.MAST_PROFILE_STATUS == "Y" && m.MAST_PROFILE_CODE == 8).ToList<MASTER_PROFILE>();
                }
                return list;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion NodalOfficer

        #region Agency-State-District-Mapping


        public bool MapAgencyStatesDAL(string encryptedAgencyCode, string encryptedStateCodes, string startDate)
        {
            try
            {
                String[] stateCodes = null;
                int agencyCode = 0;
                int stateCode = 0;
                Models.ADMIN_TA_STATE admin_TAStates = null;
                MasterDataEntryDAL masterDataEntryDAL = new MasterDataEntryDAL();
                encryptedParameters = encryptedAgencyCode.Split('/');
                dbContext = new PMGSYEntities();
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                agencyCode = Convert.ToInt32(decryptedParameters["TACode"].ToString());

                //for all district codes
                stateCodes = encryptedStateCodes.Split(',');

                System.DateTime? startDatePTA = ConvertStringToDate(startDate);

                if (stateCodes.Count() == 0)
                {
                    return false;
                }

                foreach (String item in stateCodes)
                {
                    encryptedParameters = null;
                    encryptedParameters = item.Split('/');
                    decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    stateCode = Convert.ToInt32(decryptedParameters["StateCode"].ToString());

                    //check record already exist with district code and region code if not then save else next                        
                    if (!(dbContext.ADMIN_TA_STATE.Any(ta => ta.ADMIN_TA_CODE == agencyCode && ta.MAST_STATE_CODE == stateCode)))
                    {
                        admin_TAStates = new Models.ADMIN_TA_STATE();

                        admin_TAStates.ADMIN_TA_ID = (Int32)masterDataEntryDAL.GetMaxCode(MasterDataEntryModules.TAAgencyStateDistrict);
                        admin_TAStates.ADMIN_TA_CODE = agencyCode;
                        admin_TAStates.MAST_STATE_CODE = stateCode;

                        admin_TAStates.MAST_START_DATE = Convert.ToDateTime(startDatePTA);
                        admin_TAStates.MAST_IS_FINALIZED = "N";
                        admin_TAStates.MAST_IS_ACTIVE = "Y";
                        admin_TAStates.MAST_IS_ENABLED = "Y";           //change by Ujjwal Saket on 7/1/2014 from N to Y

                        //Added by abhishek kamble 27-nov-2013
                        admin_TAStates.USERID = PMGSYSession.Current.UserId;
                        admin_TAStates.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.ADMIN_TA_STATE.Add(admin_TAStates);
                        dbContext.SaveChanges();
                        //return true;
                    }
                    else if (dbContext.ADMIN_TA_STATE.Any(ta => ta.MAST_IS_ACTIVE == "N" && ta.MAST_END_DATE != null))
                    {
                        admin_TAStates = new Models.ADMIN_TA_STATE();

                        admin_TAStates.ADMIN_TA_ID = (Int32)masterDataEntryDAL.GetMaxCode(MasterDataEntryModules.TAAgencyStateDistrict);
                        admin_TAStates.ADMIN_TA_CODE = agencyCode;
                        admin_TAStates.MAST_STATE_CODE = stateCode;

                        admin_TAStates.MAST_START_DATE = Convert.ToDateTime(startDatePTA);
                        admin_TAStates.MAST_IS_FINALIZED = "N";
                        admin_TAStates.MAST_IS_ACTIVE = "Y";
                        admin_TAStates.MAST_IS_ENABLED = "Y";       //change by Ujjwal Saket on 7/1/2014 from N to Y

                        //Added by abhishek kamble 27-nov-2013
                        admin_TAStates.USERID = PMGSYSession.Current.UserId;
                        admin_TAStates.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.ADMIN_TA_STATE.Add(admin_TAStates);
                        dbContext.SaveChanges();
                        //   return true;
                    }

                }
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public bool MapAgencyDistrictsDAL(string encryptedAgencyCode, string encryptedDistrictCodes, string startDate)
        {
            try
            {
                String[] districtCodes = null;
                int agencyCode = 0;
                int stateCode = 0;
                int districtCode = 0;
                Models.ADMIN_TA_STATE admin_TAStates = null;
                MasterDataEntryDAL masterDataEntryDAL = new MasterDataEntryDAL();
                encryptedParameters = encryptedAgencyCode.Split('/');
                dbContext = new PMGSYEntities();
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                agencyCode = Convert.ToInt32(decryptedParameters["TACode"].ToString());

                //for all district codes
                districtCodes = encryptedDistrictCodes.Split(',');

                System.DateTime? startDateSTA = ConvertStringToDate(startDate);

                if (districtCodes.Count() == 0)
                {
                    return false;
                }

                foreach (String item in districtCodes)
                {
                    encryptedParameters = null;
                    encryptedParameters = item.Split('/');
                    decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    districtCode = Convert.ToInt32(decryptedParameters["DistrictCode"].ToString());
                    stateCode = Convert.ToInt32(decryptedParameters["StateCode"].ToString());

                    //check record already exist with district code and agency code if not then save else next                        
                    if (!(dbContext.ADMIN_TA_STATE.Any(ta => ta.ADMIN_TA_CODE == agencyCode && ta.MAST_DISTRICT_CODE == districtCode && ta.MAST_IS_ACTIVE == "Y" && ta.MAST_IS_ENABLED == "Y"))) //change by Deepak on 24-11-2014
                    {
                        admin_TAStates = new Models.ADMIN_TA_STATE();

                        admin_TAStates.ADMIN_TA_ID = (Int32)masterDataEntryDAL.GetMaxCode(MasterDataEntryModules.TAAgencyStateDistrict);
                        admin_TAStates.ADMIN_TA_CODE = agencyCode;
                        admin_TAStates.MAST_STATE_CODE = stateCode;
                        admin_TAStates.MAST_DISTRICT_CODE = districtCode;

                        admin_TAStates.MAST_START_DATE = Convert.ToDateTime(startDateSTA);
                        admin_TAStates.MAST_IS_FINALIZED = "N";
                        admin_TAStates.MAST_IS_ACTIVE = "Y";
                        admin_TAStates.MAST_IS_ENABLED = "Y";   //change by Ujjwal Saket on 7/1/2014 from N to Y


                        //Added by abhishek kamble 27-nov-2013
                        admin_TAStates.USERID = PMGSYSession.Current.UserId;
                        admin_TAStates.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.ADMIN_TA_STATE.Add(admin_TAStates);
                        dbContext.SaveChanges();
                    }
                }
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetMappedStateDetailsListDAL_Agency(int stateCode, int agencyCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var query = from agencyState in dbContext.ADMIN_TA_STATE
                            join stateDetails in dbContext.MASTER_STATE
                            on agencyState.MAST_STATE_CODE equals stateDetails.MAST_STATE_CODE
                            where
                            agencyState.ADMIN_TA_CODE == agencyCode
                            &&
                            ((stateCode == 0 ? 1 : stateDetails.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode))
                            //&& agencyState.MAST_IS_ACTIVE == "Y"
                            select new { agencyState.MAST_STATE_CODE, stateDetails.MAST_STATE_NAME, stateDetails.MAST_STATE_UT, stateDetails.MAST_STATE_TYPE, stateDetails.MAST_NIC_STATE_CODE, agencyState.ADMIN_TA_ID, agencyState.MAST_START_DATE, agencyState.MAST_END_DATE, agencyState.MAST_IS_FINALIZED, agencyState.MAST_IS_ENABLED, agencyState.MAST_IS_ACTIVE };

                //for testing purpose   
                //query = query.Where(s => s.MAST_STATE_TYPE != "D");
                //end for testing purpose

                totalRecords = query == null ? 0 : query.Count();


                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "StateName":
                                query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "StateUT":
                                query = query.OrderBy(x => x.MAST_STATE_UT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "StateType":
                                query = query.OrderBy(x => x.MAST_STATE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;


                            default:
                                query = query.OrderBy(x => x.MAST_IS_ACTIVE == "N").ThenBy(x => x.MAST_IS_ENABLED == "N").ThenBy(x => x.MAST_IS_FINALIZED == "Y").ThenBy(x => x.MAST_STATE_UT).ThenBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "StateName":
                                query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "StateUT":
                                query = query.OrderByDescending(x => x.MAST_STATE_UT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "StateType":
                                query = query.OrderByDescending(x => x.MAST_STATE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                query = query.OrderByDescending(x => x.MAST_IS_ACTIVE == "N").ThenBy(x => x.MAST_IS_ENABLED == "N").ThenBy(x => x.MAST_IS_FINALIZED == "Y").ThenBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_IS_ACTIVE == "N").ThenBy(x => x.MAST_IS_ENABLED == "N").ThenBy(x => x.MAST_IS_FINALIZED == "Y").ThenBy(x => x.MAST_STATE_UT).ThenBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }


                var result = query.Select(stateDetails => new
                {
                    stateDetails.MAST_STATE_CODE,
                    stateDetails.MAST_STATE_NAME,
                    stateDetails.MAST_STATE_UT,
                    stateDetails.MAST_STATE_TYPE,
                    stateDetails.MAST_NIC_STATE_CODE,
                    stateDetails.ADMIN_TA_ID,
                    stateDetails.MAST_START_DATE,
                    stateDetails.MAST_END_DATE,
                    stateDetails.MAST_IS_FINALIZED,
                    stateDetails.MAST_IS_ACTIVE,
                    stateDetails.MAST_IS_ENABLED

                }).ToArray();

                return result.Select(stateDetails => new
                {
                    cell = new[] {
                                    URLEncrypt.EncryptParameters1(new string[]{"AdminId="+stateDetails.ADMIN_TA_ID.ToString().Trim()}),
                                    stateDetails.MAST_STATE_NAME.Trim(),
                                    Models.MasterDataEntry.StateUT.lstStateUT[stateDetails.MAST_STATE_UT.Trim()].ToString(),
                                    Models.MasterDataEntry.StateType.lstStateType[stateDetails.MAST_STATE_TYPE.Trim()].ToString(),                      
                                    //stateDetails.MAST_NIC_STATE_CODE.ToString().Trim(),
                                    ConvertDateToString(stateDetails.MAST_START_DATE).ToString().Trim(),
                                    stateDetails.MAST_IS_FINALIZED.ToString()=="Y"?( stateDetails.MAST_IS_ENABLED.ToString()=="Y"? stateDetails.MAST_END_DATE==null?("-"):ConvertDateToString(stateDetails.MAST_END_DATE).ToString().Trim():(stateDetails.MAST_END_DATE==null?("-"):ConvertDateToString(stateDetails.MAST_END_DATE).ToString().Trim())):(stateDetails.MAST_END_DATE==null?("-"):ConvertDateToString(stateDetails.MAST_END_DATE).ToString().Trim()),
                                    stateDetails.MAST_IS_FINALIZED.ToString()=="N"?URLEncrypt.EncryptParameters1(new string[]{"AdminId="+stateDetails.ADMIN_TA_ID.ToString().Trim()}):string.Empty,
                                    //stateDetails.MAST_IS_FINALIZED.ToString()=="N"?"<a href='#' title='Click here to delete mapped state' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteMappedState('" + URLEncrypt.EncryptParameters1(new string[]{"AdminId="+stateDetails.ADMIN_TA_ID.ToString().Trim()}) +"'); return false;'>Delete State</a>":string.Empty
                                    //<a href='#' title='Click here to delete mapped state' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteMappedState('" + URLEncrypt.EncryptParameters1(new string[]{"AdminId="+stateDetails.ADMIN_TA_ID.ToString().Trim()}) +"'); return false;'>Delete State</a>"
                                    ////added by Ujjwal Saket on 7/1/2014 for End Date
                                    stateDetails.MAST_IS_FINALIZED.ToString()=="Y"?(stateDetails.MAST_IS_ACTIVE.ToString()=="Y"?"<center><table><tr><td  style='border:none'><a href='#' title='Enter End Date' onclick='StateEndDateDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]{"AdminId="+stateDetails.ADMIN_TA_ID.ToString().Trim()}) + "\");'> End Date </a> </td></tr></table></center>":"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='State is Deactivated' ></span></td></tr></table></center>"):"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='State is Not Finalized' ></span></td></tr></table></center>",
                                    stateDetails.MAST_IS_ACTIVE.ToString()=="Y"?(stateDetails.MAST_IS_FINALIZED.ToString()=="N"?URLEncrypt.EncryptParameters1(new string[]{"AdminId="+stateDetails.ADMIN_TA_ID.ToString().Trim()}):string.Empty):string.Empty

                   }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array GetMappedDistrictDetailsListDAL_Agency(int agencyCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            DateTime currDt = DateTime.Now;
            try
            {
                dbContext = new PMGSYEntities();
                var query = from agencyDistrict in dbContext.ADMIN_TA_STATE
                            join districtDetails in dbContext.MASTER_DISTRICT
                            on agencyDistrict.MAST_DISTRICT_CODE equals districtDetails.MAST_DISTRICT_CODE
                            join stateDetails in dbContext.MASTER_STATE
                            on agencyDistrict.MAST_STATE_CODE equals stateDetails.MAST_STATE_CODE
                            where
                            agencyDistrict.ADMIN_TA_CODE == agencyCode
                            //&& agencyDistrict.MAST_IS_ACTIVE == "Y"
                            select new { agencyDistrict.MAST_DISTRICT_CODE, stateDetails.MAST_STATE_NAME, districtDetails.MAST_DISTRICT_NAME, districtDetails.MAST_PMGSY_INCLUDED, districtDetails.MAST_IAP_DISTRICT, agencyDistrict.ADMIN_TA_ID, agencyDistrict.MAST_START_DATE, agencyDistrict.MAST_END_DATE, agencyDistrict.MAST_IS_FINALIZED, agencyDistrict.MAST_IS_ENABLED, agencyDistrict.MAST_IS_ACTIVE };

                totalRecords = query == null ? 0 : query.Count();


                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "StateName":
                                query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "DistrictName":
                                query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsPMGSYIncluded":
                                query = query.OrderBy(x => x.MAST_PMGSY_INCLUDED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsIAPDistrict":
                                query = query.OrderBy(x => x.MAST_IAP_DISTRICT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                query = query.OrderBy(x => x.MAST_IS_ACTIVE == "N").ThenBy(x => x.MAST_IS_ENABLED == "N").ThenBy(x => x.MAST_IS_FINALIZED == "Y").ThenBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }


                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "StateName":
                                query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "DistrictName":
                                query = query.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsPMGSYIncluded":
                                query = query.OrderByDescending(x => x.MAST_PMGSY_INCLUDED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsIAPDistrict":
                                query = query.OrderByDescending(x => x.MAST_IAP_DISTRICT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                query = query.OrderByDescending(x => x.MAST_IS_ACTIVE == "N").ThenBy(x => x.MAST_IS_ENABLED == "N").ThenBy(x => x.MAST_IS_FINALIZED == "Y").ThenBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_IS_ACTIVE == "N").ThenBy(x => x.MAST_IS_ENABLED == "N").ThenBy(x => x.MAST_IS_FINALIZED == "Y").ThenBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var result = query.Select(districtDetails => new
                {
                    districtDetails.MAST_DISTRICT_CODE,
                    districtDetails.MAST_STATE_NAME,
                    districtDetails.MAST_DISTRICT_NAME,
                    districtDetails.MAST_PMGSY_INCLUDED,
                    districtDetails.MAST_IAP_DISTRICT,
                    districtDetails.ADMIN_TA_ID,
                    districtDetails.MAST_START_DATE,
                    districtDetails.MAST_END_DATE,
                    districtDetails.MAST_IS_FINALIZED,
                    districtDetails.MAST_IS_ACTIVE,
                    districtDetails.MAST_IS_ENABLED
                }).ToArray();


                return result.Select(districtDetails => new
                {
                    cell = new[] {
                                    URLEncrypt.EncryptParameters1(new string[]{"AdminId="+districtDetails.ADMIN_TA_ID.ToString().Trim()}),
                                    districtDetails.MAST_DISTRICT_NAME.ToString().Trim() ,
                                    districtDetails.MAST_STATE_NAME.ToString().Trim() ,
                                    districtDetails.MAST_PMGSY_INCLUDED.ToString().Trim()=="Y"?"Yes":"No",
                                    districtDetails.MAST_IAP_DISTRICT.ToString().Trim()=="Y"?"Yes":"No" ,
                                    ConvertDateToString(districtDetails.MAST_START_DATE).ToString().Trim(),

                                    districtDetails.MAST_IS_FINALIZED.ToString()=="Y"?( districtDetails.MAST_IS_ENABLED.ToString()=="Y"? districtDetails.MAST_END_DATE==null?("-"):ConvertDateToString(districtDetails.MAST_END_DATE).ToString().Trim():(districtDetails.MAST_END_DATE==null?("-"):ConvertDateToString(districtDetails.MAST_END_DATE).ToString().Trim())):(districtDetails.MAST_END_DATE==null?("-"):ConvertDateToString(districtDetails.MAST_END_DATE).ToString().Trim()),
                                    districtDetails.MAST_IS_FINALIZED.ToString()=="N"?URLEncrypt.EncryptParameters1(new string[]{"AdminId="+districtDetails.ADMIN_TA_ID.ToString().Trim()}):string.Empty,
                                    //"<a href='#' title='Click here to delete mapped district' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteMappedDistrict('" + URLEncrypt.EncryptParameters1(new string[]{"AdminId="+districtDetails.ADMIN_TA_ID.ToString().Trim()}) +"'); return false;'>Delete District</a>"
                                    ////added by Ujjwal Saket on 7/1/2014 for End Date
                                    districtDetails.MAST_IS_FINALIZED.ToString()=="Y"?(districtDetails.MAST_IS_ACTIVE.ToString()=="Y"?"<center><table><tr><td  style='border:none'><a href='#' title='Enter End Date' onclick='DistrictEndDateDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]{"AdminId="+districtDetails.ADMIN_TA_ID.ToString().Trim()}) + "\");'> End Date </a> </td></tr></table></center>":"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='District is Deactivated' ></span></td></tr></table></center>"):"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='District is Not Finalized' ></span></td></tr></table></center>",
                                    districtDetails.MAST_IS_ACTIVE.ToString()=="Y"?(districtDetails.MAST_IS_FINALIZED.ToString()=="N"?URLEncrypt.EncryptParameters1(new string[]{"AdminId="+districtDetails.ADMIN_TA_ID.ToString().Trim()}):string.Empty):string.Empty,
                                    ///Changes for RCPLWE Map Scheme to STA
                                    ((districtDetails.MAST_END_DATE == null) || (districtDetails.MAST_END_DATE.HasValue ? districtDetails.MAST_END_DATE.Value >= currDt : false)) ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' title='Map Scheme' onclick='MapPMGSYScheme(\"" +  URLEncrypt.EncryptParameters1(new string[]{"AdminId="+districtDetails.ADMIN_TA_ID.ToString().Trim()}) + "\");'>Map Scheme</a>" : "-"
                                }
                }).ToArray();


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        //added by Ujjwal Saket on 8/1/2014 to return View Model to enter the district end date
        /// <summary>
        /// DAL method to return View Model to enter the district end date
        /// </summary>
        /// <param name="endDateDistrictViewModel"></param>
        /// <param name="adminTaId"></param>
        /// <returns></returns>
        public EndDateDistrictViewModel AddEndDateDistrictDAL(EndDateDistrictViewModel endDateDistrictViewModel, Int32 adminTaId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions objCommon = new CommonFunctions();
                string districtName = string.Empty;
                string districtStartDate = string.Empty;

                districtName = dbContext.MASTER_DISTRICT.Where(p => p.MAST_DISTRICT_CODE == (dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTaId).Select(x => x.MAST_DISTRICT_CODE).FirstOrDefault())).Select(x => x.MAST_DISTRICT_NAME).FirstOrDefault();
                districtStartDate = objCommon.GetDateTimeToString(dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTaId).Select(x => x.MAST_START_DATE).FirstOrDefault());

                endDateDistrictViewModel.EncryptedAdminId = URLEncrypt.EncryptParameters1(new string[] { "AdminId=" + adminTaId.ToString() });
                endDateDistrictViewModel.DistrictName = districtName == null ? "N.A." : districtName;
                endDateDistrictViewModel.StartDateDistrict = districtStartDate;

                return endDateDistrictViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }//finish addition



        //Edited by Ujjwal Saket on 8/1/2014
        /// <summary>
        /// DAL Method to Update the End Dates in STA login
        /// </summary>
        /// <param name="endDate"></param>
        /// <param name="encryptedadminId"></param>
        /// <returns></returns>
        public bool UpdateDistrictEndDateSTA_DAL(string endDate, string encryptedadminId, ref string message)
        {
            try
            {

                int adminId = 0;

                Models.ADMIN_TA_STATE admin_TAStates = null;
                MasterDataEntryDAL masterDataEntryDAL = new MasterDataEntryDAL();
                encryptedParameters = encryptedadminId.Split('/');
                dbContext = new PMGSYEntities();
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                adminId = Convert.ToInt32(decryptedParameters["AdminId"].ToString());



                System.DateTime? endDateSTA = ConvertStringToDate(endDate);

                System.DateTime startDateSTA = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminId).Select(x => x.MAST_START_DATE).FirstOrDefault();

                if (endDateSTA <= startDateSTA || endDateSTA > DateTime.Now)
                {
                    message = "End Date must be greater than Start Date and also less than Today's Date.";
                    return false;
                }

                admin_TAStates = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminId).FirstOrDefault<ADMIN_TA_STATE>();
                if (admin_TAStates == null)
                {
                    return false;
                }
                admin_TAStates.MAST_END_DATE = Convert.ToDateTime(endDateSTA);
                admin_TAStates.MAST_IS_ACTIVE = "N";
                admin_TAStates.MAST_IS_ENABLED = "N";

                //Added by abhishek kamble 27-nov-2013
                admin_TAStates.USERID = PMGSYSession.Current.UserId;
                admin_TAStates.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(admin_TAStates).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        //added by Ujjwal Saket on 8/1/2014 to return View Model to enter the state end date
        /// <summary>
        /// DAL method to return View Model to enter the state end date
        /// </summary>
        /// <param name="endDateDistrictViewModel"></param>
        /// <param name="adminTaId"></param>
        /// <returns></returns>
        public EndDateStateViewModel AddEndDateStateDAL(EndDateStateViewModel endDateStateViewModel, Int32 adminTaId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions objCommon = new CommonFunctions();
                string stateName = string.Empty;
                string stateStartDate = string.Empty;

                stateName = dbContext.MASTER_STATE.Where(p => p.MAST_STATE_CODE == (dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTaId).Select(x => x.MAST_STATE_CODE).FirstOrDefault())).Select(x => x.MAST_STATE_NAME).FirstOrDefault();
                stateStartDate = objCommon.GetDateTimeToString(dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTaId).Select(x => x.MAST_START_DATE).FirstOrDefault());

                endDateStateViewModel.EncryptedAdminId = URLEncrypt.EncryptParameters1(new string[] { "AdminId=" + adminTaId.ToString() });
                endDateStateViewModel.StateName = stateName;
                endDateStateViewModel.StartDateState = stateStartDate;

                return endDateStateViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }//finish addition

        //Edited by Ujjwal Saket on 8/1/2014
        /// <summary>
        /// DAL method to Update the End Date of PTA login
        /// </summary>
        /// <param name="endDate"></param>
        /// <param name="encryptedadminId"></param>
        /// <returns></returns>
        public bool UpdateStateEndDatePTA_DAL(string endDate, string encryptedadminId, ref string message)
        {
            try
            {

                int adminId = 0;

                Models.ADMIN_TA_STATE admin_TAStates = null;
                MasterDataEntryDAL masterDataEntryDAL = new MasterDataEntryDAL();
                encryptedParameters = encryptedadminId.Split('/');
                dbContext = new PMGSYEntities();
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                adminId = Convert.ToInt32(decryptedParameters["AdminId"].ToString());



                System.DateTime? endDatePTA = ConvertStringToDate(endDate);

                System.DateTime startDatePTA = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminId).Select(x => x.MAST_START_DATE).FirstOrDefault();

                if (endDatePTA <= startDatePTA || endDatePTA > DateTime.Now)
                {
                    message = "End Date must be greater than Start Date and also less than Today's Date.";
                    return false;
                }


                admin_TAStates = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminId).FirstOrDefault<ADMIN_TA_STATE>();
                if (admin_TAStates == null)
                {
                    return false;
                }
                admin_TAStates.MAST_END_DATE = Convert.ToDateTime(endDatePTA);
                admin_TAStates.MAST_IS_ACTIVE = "N";
                admin_TAStates.MAST_IS_ENABLED = "N";

                //Added by abhishek kamble 27-nov-2013
                admin_TAStates.USERID = PMGSYSession.Current.UserId;
                admin_TAStates.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(admin_TAStates).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public bool FinalizeMappedDistrictAgencyDAL(int adminId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_TA_STATE mapStateMaster = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminId).FirstOrDefault<ADMIN_TA_STATE>();

                if (mapStateMaster != null)
                {
                    mapStateMaster.MAST_IS_FINALIZED = "Y";
                }

                //Added by abhishek kamble 27-nov-2013
                mapStateMaster.USERID = PMGSYSession.Current.UserId;
                mapStateMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(mapStateMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool FinalizeMappedStateAgencyDAL(int adminId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_TA_STATE mapStateMaster = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminId).FirstOrDefault<ADMIN_TA_STATE>();

                if (mapStateMaster != null)
                {
                    mapStateMaster.MAST_IS_FINALIZED = "Y";
                }

                //Added by abhishek kamble 27-nov-2013
                mapStateMaster.USERID = PMGSYSession.Current.UserId;
                mapStateMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(mapStateMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteMappedStateAgencyDAL(int adminId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_TA_STATE mapStateMaster = dbContext.ADMIN_TA_STATE.Find(adminId);

                //Added by abhishek kamble 27-nov-2013
                mapStateMaster.USERID = PMGSYSession.Current.UserId;
                mapStateMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(mapStateMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_TA_STATE.Remove(mapStateMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteMappedDistrictAgencyDAL(int adminId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_TA_STATE mapDistrictMaster = dbContext.ADMIN_TA_STATE.Find(adminId);

                //Added by abhishek kamble 27-nov-2013
                mapDistrictMaster.USERID = PMGSYSession.Current.UserId;
                mapDistrictMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(mapDistrictMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();


                dbContext.ADMIN_TA_STATE.Remove(mapDistrictMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion Agency-State-District-Mapping

        public bool MapSRRDADistrictsDAL(string encryptedAdminCode, string encryptedDistrictCodes)
        {
            try
            {
                String[] districtCodes = null;
                int adminCode = 0;
                int districtCode = 0;
                Models.ADMIN_AGENCY_DISTRICT admin_agencyDistricts = null;
                MasterDataEntryDAL masterDataEntryDAL = new MasterDataEntryDAL();
                encryptedParameters = encryptedAdminCode.Split('/');
                dbContext = new PMGSYEntities();
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                adminCode = Convert.ToInt32(decryptedParameters["AdminCode"].ToString());

                //for all district codes
                districtCodes = encryptedDistrictCodes.Split(',');

                if (districtCodes.Count() == 0)
                {
                    return false;
                }

                foreach (String item in districtCodes)
                {
                    encryptedParameters = null;
                    encryptedParameters = item.Split('/');
                    decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    districtCode = Convert.ToInt32(decryptedParameters["DistrictCode"].ToString());

                    //check record already exist with district code and admin code if not then save else next                        
                    if (!(dbContext.ADMIN_AGENCY_DISTRICT.Any(ad => ad.ADMIN_ND_CODE == adminCode && ad.MAST_DISTRICT_CODE == districtCode)))
                    {
                        admin_agencyDistricts = new Models.ADMIN_AGENCY_DISTRICT();

                        admin_agencyDistricts.ADMIN_AGENCY_DISTRICT_ID = (Int32)masterDataEntryDAL.GetMaxCode(MasterDataEntryModules.SRRDADistrict);
                        admin_agencyDistricts.ADMIN_ND_CODE = adminCode;
                        admin_agencyDistricts.MAST_DISTRICT_CODE = districtCode;

                        //added by abhishek kamble 27-nov-2013
                        admin_agencyDistricts.USERID = PMGSYSession.Current.UserId;
                        admin_agencyDistricts.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.ADMIN_AGENCY_DISTRICT.Add(admin_agencyDistricts);
                        dbContext.SaveChanges();
                    }
                }
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteMappedSRRDADistrictDAL(int adminId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_AGENCY_DISTRICT mapDistrictMaster = dbContext.ADMIN_AGENCY_DISTRICT.Find(adminId);


                //added by abhishek kamble 27-nov-2013
                mapDistrictMaster.USERID = PMGSYSession.Current.UserId;
                mapDistrictMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(mapDistrictMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_AGENCY_DISTRICT.Remove(mapDistrictMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetMappedDistrictDetailsListDAL_SRRDA(int adminCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var query = from SRRDADistrict in dbContext.ADMIN_AGENCY_DISTRICT
                            join districtDetails in dbContext.MASTER_DISTRICT
                            on SRRDADistrict.MAST_DISTRICT_CODE equals districtDetails.MAST_DISTRICT_CODE
                            //join stateDetails in dbContext.MASTER_STATE
                            //on agencyDistrict.MAST_STATE_CODE equals stateDetails.MAST_STATE_CODE
                            where
                            SRRDADistrict.ADMIN_ND_CODE == adminCode
                            select new { SRRDADistrict.MAST_DISTRICT_CODE, districtDetails.MAST_DISTRICT_NAME, districtDetails.MAST_PMGSY_INCLUDED, districtDetails.MAST_IAP_DISTRICT, SRRDADistrict.ADMIN_AGENCY_DISTRICT_ID };

                totalRecords = query == null ? 0 : query.Count();


                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {

                            case "DistrictName":
                                query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsPMGSYIncluded":
                                query = query.OrderBy(x => x.MAST_PMGSY_INCLUDED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsIAPDistrict":
                                query = query.OrderBy(x => x.MAST_IAP_DISTRICT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }


                    }
                    else
                    {
                        switch (sidx)
                        {

                            case "DistrictName":
                                query = query.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsPMGSYIncluded":
                                query = query.OrderByDescending(x => x.MAST_PMGSY_INCLUDED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IsIAPDistrict":
                                query = query.OrderByDescending(x => x.MAST_IAP_DISTRICT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                query = query.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                                break;
                        }
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows));
                }


                var result = query.Select(districtDetails => new
                {
                    districtDetails.MAST_DISTRICT_CODE,
                    districtDetails.MAST_DISTRICT_NAME,
                    districtDetails.MAST_PMGSY_INCLUDED,
                    districtDetails.MAST_IAP_DISTRICT,
                    districtDetails.ADMIN_AGENCY_DISTRICT_ID
                }).ToArray();


                return result.Select(districtDetails => new
                {
                    cell = new[] {
                                    districtDetails.MAST_DISTRICT_NAME.ToString().Trim() ,
                                    districtDetails.MAST_PMGSY_INCLUDED.ToString().Trim()=="Y"?"Yes":"No",
                                    districtDetails.MAST_IAP_DISTRICT.ToString().Trim()=="Y"?"Yes":"No" ,
                                    PMGSYSession.Current.RoleCode==23?
                                    "<a href='#' title='Click here to delete mapped district' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteMappedDistrict('" + URLEncrypt.EncryptParameters1(new string[]{"AdminId="+districtDetails.ADMIN_AGENCY_DISTRICT_ID.ToString().Trim()}) +"'); return false;'>Delete District</a>"
                                    :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>")
                                }
                }).ToArray();


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Int32 GetVidhanSabhaTermDAL(int stateCode)
        {
            Int32? vidhanSabhaTerm = 0;
            try
            {
                dbContext = new PMGSYEntities();
                vidhanSabhaTerm = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(vt => vt.MAST_STATE_CODE == stateCode).Max(vt => (Int32?)vt.MAST_VS_TERM);

                if (vidhanSabhaTerm == null)
                {
                    vidhanSabhaTerm = 1;
                }
                else
                {
                    vidhanSabhaTerm = vidhanSabhaTerm + 1;
                }

                return (Int32)vidhanSabhaTerm;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return (Int32)vidhanSabhaTerm;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool GetLokSabhaTermDatesDAL(int lokSabhaTerm, ref string lokSabhaStartDate, ref string lokSabhaEndDate)
        {

            try
            {
                dbContext = new PMGSYEntities();
                MASTER_LOK_SABHA_TERM lokSabhaTermDetails = dbContext.MASTER_LOK_SABHA_TERM.Where(lt => lt.MAST_LS_TERM == lokSabhaTerm).FirstOrDefault();

                if (lokSabhaTermDetails == null)
                {
                    return false;
                }


                if (lokSabhaTermDetails.MAST_LS_START_DATE != null)
                {
                    lokSabhaStartDate = Convert.ToDateTime(lokSabhaTermDetails.MAST_LS_START_DATE.ToString()).ToString("dd/MM/yyyy");
                }
                if (lokSabhaTermDetails.MAST_LS_END_DATE != null)
                {
                    lokSabhaEndDate = Convert.ToDateTime(lokSabhaTermDetails.MAST_LS_END_DATE.ToString()).ToString("dd/MM/yyyy");
                }

                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool GetVidhanSabhaTermDatesDAL(int stateCode, int vidhanSabhaTerm, ref string vidhanSabhaStartDate, ref string vidhanSabhaEndDate)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_VIDHAN_SABHA_TERM vidhanSabhaTermDetails = dbContext.MASTER_VIDHAN_SABHA_TERM.Where(vt => vt.MAST_VS_TERM == vidhanSabhaTerm && vt.MAST_STATE_CODE == stateCode).FirstOrDefault();

                if (vidhanSabhaTermDetails == null)
                {
                    return false;
                }


                if (vidhanSabhaTermDetails.MAST_VS_START_DATE != null)
                {
                    vidhanSabhaStartDate = Convert.ToDateTime(vidhanSabhaTermDetails.MAST_VS_START_DATE.ToString()).ToString("dd/MM/yyyy");
                }
                if (vidhanSabhaTermDetails.MAST_VS_END_DATE != null)
                {
                    vidhanSabhaEndDate = Convert.ToDateTime(vidhanSabhaTermDetails.MAST_VS_END_DATE.ToString()).ToString("dd/MM/yyyy");
                }

                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool ContractorRegChangeStatusDAL(int conID, int ConRegCode, bool IsActive)
        {
            MASTER_CONTRACTOR_REGISTRATION contractorRegistration = null;
            try
            {
                dbContext = new PMGSYEntities();
                if (IsActive)
                {

                    contractorRegistration = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(cr => cr.MAST_CON_ID == conID && cr.MAST_REG_CODE == ConRegCode && cr.MAST_REG_STATUS == "A" && cr.MAST_LOCK_STATUS == "N").FirstOrDefault();

                    if (contractorRegistration == null)
                    {
                        return false;
                    }

                    contractorRegistration.MAST_REG_STATUS = "I";
                }
                else
                {

                    contractorRegistration = dbContext.MASTER_CONTRACTOR_REGISTRATION.Where(cr => cr.MAST_CON_ID == conID && cr.MAST_REG_CODE == ConRegCode && cr.MAST_REG_STATUS == "I" && cr.MAST_LOCK_STATUS == "N").FirstOrDefault();

                    if (contractorRegistration == null)
                    {
                        return false;
                    }

                    contractorRegistration.MAST_REG_STATUS = "A";
                }

                dbContext.Entry(contractorRegistration).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }//end function  ContractorRegChangeStatusDAL

        #region MASTER_TAX

        public Array GetTaxDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var taxDetailsList = dbContext.MASTER_TAXES.ToList();

                totalRecords = taxDetailsList.Count;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        taxDetailsList = taxDetailsList.OrderBy(x => x.MAST_TDS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        taxDetailsList = taxDetailsList.OrderByDescending(x => x.MAST_TDS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    taxDetailsList = taxDetailsList.OrderBy(x => x.MAST_TDS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = taxDetailsList.Select(taxDetails => new
                {
                    taxDetails.MAST_TDS_ID,
                    taxDetails.MAST_TDS,
                    taxDetails.MAST_TDS_SC,
                    taxDetails.MAST_EFFECTIVE_DATE,
                    taxDetails.SERVICE_TAX

                }).ToArray();

                return result.Select(taxDetails => new
                {
                    cell = new[]{

                    taxDetails.MAST_TDS == null?string.Empty:taxDetails.MAST_TDS.ToString(),
                    taxDetails.MAST_TDS_SC==null?string.Empty:taxDetails.MAST_TDS_SC.ToString(),
                    taxDetails.SERVICE_TAX==null?string.Empty:taxDetails.SERVICE_TAX.ToString(),
                    taxDetails.MAST_EFFECTIVE_DATE == null?"-":Convert.ToDateTime(taxDetails.MAST_EFFECTIVE_DATE).ToString("dd/MM/yyyy"),
                    URLEncrypt.EncryptParameters1(new string[]{"TaxCode =" + taxDetails.MAST_TDS_ID.ToString().Trim()}),
                }
                }).ToArray();


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public MasterTaxViewModel GetTaxDetails(int taxCode)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                MASTER_TAXES taxMaster = dbContext.MASTER_TAXES.Find(taxCode);
                MasterTaxViewModel taxModel = new MasterTaxViewModel();
                taxModel.Effective_Date = objCommon.GetDateTimeToString(taxMaster.MAST_EFFECTIVE_DATE);
                taxModel.Service_Charge = taxMaster.MAST_TDS_SC;
                taxModel.Service_TAX = taxMaster.SERVICE_TAX.HasValue ? taxMaster.SERVICE_TAX.Value : 0;
                taxModel.TDS = taxMaster.MAST_TDS;
                taxModel.EncryptedTaxCode = URLEncrypt.EncryptParameters1(new string[] { "TaxCode = " + taxMaster.MAST_TDS_ID });
                taxModel.Operation = "E";
                return taxModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteTaxDetailsDAL(int taxCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TAXES taxMaster = dbContext.MASTER_TAXES.Find(taxCode);
                dbContext.MASTER_TAXES.Remove(taxMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddTaxDetailsDAL(MasterTaxViewModel taxModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                MASTER_TAXES taxMaster = new MASTER_TAXES();
                if (dbContext.MASTER_TAXES.Any())
                {
                    taxMaster.MAST_TDS_ID = dbContext.MASTER_TAXES.Max(m => m.MAST_TDS_ID) + 1;
                }
                else
                {
                    taxMaster.MAST_TDS_ID = 1;
                }
                taxMaster.MAST_EFFECTIVE_DATE = objCommon.GetStringToDateTime(taxModel.Effective_Date);
                taxMaster.MAST_TDS = taxModel.TDS;
                taxMaster.MAST_TDS_SC = taxModel.Service_Charge;
                taxMaster.SERVICE_TAX = taxModel.Service_TAX;
                dbContext.MASTER_TAXES.Add(taxMaster);
                dbContext.SaveChanges();
                message = "Tax details added successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool EditTaxDetailsDAL(MasterTaxViewModel taxModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            int taxCode = 0;
            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            try
            {
                urlParameters = taxModel.EncryptedTaxCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                taxCode = Convert.ToInt32(decryptedParameters["TaxCode"]);
                MASTER_TAXES taxMaster = dbContext.MASTER_TAXES.Find(taxCode);
                taxMaster.MAST_EFFECTIVE_DATE = objCommon.GetStringToDateTime(taxModel.Effective_Date);
                taxMaster.MAST_TDS = taxModel.TDS;
                taxMaster.MAST_TDS_SC = taxModel.Service_Charge;
                taxMaster.SERVICE_TAX = taxModel.Service_TAX;
                dbContext.Entry(taxMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Tax details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        //Added By Abhishek kamble 8-Apr-2014        
        #region Technology

        /// <summary>
        /// List Technology Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListTechnologyDetails(string statusType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                // var masterTech = dbContext.MASTER_TECHNOLOGY.ToList();
                var masterTech = (from item in dbContext.MASTER_TECHNOLOGY
                                  where (statusType == "%" ? "1" : item.MAST_TECH_STATUS) == (statusType == "%" ? "1" : statusType)
                                  select new
                                  {
                                      item.MAST_TECH_NAME,
                                      item.MAST_TECH_DESC,
                                      item.MAST_TECH_STATUS,
                                      item.MAST_TECH_CODE,
                                      item.MAST_TECH_TYPE
                                  }).ToList();
                totalRecords = masterTech.Count;

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {

                        switch (sidx)
                        {
                            case "MAST_TECH_NAME":
                                masterTech = masterTech.OrderBy(x => x.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TECH_DESC":
                                masterTech = masterTech.OrderBy(x => x.MAST_TECH_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TECH_STATUS":
                                masterTech = masterTech.OrderBy(x => x.MAST_TECH_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TECH_TYPE":
                                masterTech = masterTech.OrderByDescending(x => x.MAST_TECH_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                masterTech = masterTech.OrderBy(x => x.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_TECH_NAME":
                                masterTech = masterTech.OrderByDescending(x => x.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TECH_DESC":
                                masterTech = masterTech.OrderByDescending(x => x.MAST_TECH_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TECH_STATUS":
                                masterTech = masterTech.OrderByDescending(x => x.MAST_TECH_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TECH_TYPE":
                                masterTech = masterTech.OrderByDescending(x => x.MAST_TECH_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                masterTech = masterTech.OrderByDescending(x => x.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                }

                return masterTech.Select(Details => new
                {
                    cell = new[]{
                    Details.MAST_TECH_NAME.ToString(),
                    Details.MAST_TECH_DESC.ToString(),
                    Details.MAST_TECH_STATUS=="Y"?"Active":"Inactive",
                    Details.MAST_TECH_TYPE == "E" ? "Technology with IRC Specifications(Mainstreaming of Existing Technology)" : Details.MAST_TECH_TYPE == "A" ? "Technology where IRC Specifications are not available.(IRC accredited Technology)" : "Non Accredited Technology",
                    URLEncrypt.EncryptParameters1(new String[]{"TechCode="+Details.MAST_TECH_CODE.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new String[]{"TechCode="+Details.MAST_TECH_CODE.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new String[]{"TechCode="+Details.MAST_TECH_CODE.ToString().Trim()})

                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// <summary>
        /// Save Technology Details
        /// </summary>
        /// <param name="techViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddTechnologyDetails(MasterTechnologyViewModel techViewModel, ref string message)
        {
            string[] arr;
            dbContext = new PMGSYEntities();
            try
            {
                //bool flg = AddTechnologyLayerDetails(techViewModel);
                //if (flg)
                {
                    MASTER_TECHNOLOGY masterTechnology = new MASTER_TECHNOLOGY();

                    //validation 
                    if (dbContext.MASTER_TECHNOLOGY.Where(m => m.MAST_TECH_NAME == techViewModel.MAST_TECH_NAME).Any())
                    {
                        message = "Technology Details already exist.";
                        return false;
                    }

                    if (dbContext.MASTER_TECHNOLOGY.Any())
                    {
                        masterTechnology.MAST_TECH_CODE = dbContext.MASTER_TECHNOLOGY.Max(m => m.MAST_TECH_CODE) + 1;
                    }
                    else
                    {
                        masterTechnology.MAST_TECH_CODE = 1;
                    }
                    masterTechnology.MAST_TECH_NAME = techViewModel.MAST_TECH_NAME;
                    masterTechnology.MAST_TECH_DESC = techViewModel.MAST_TECH_DESC;
                    masterTechnology.MAST_TECH_STATUS = "Y";
                    masterTechnology.MAST_TECH_TYPE = techViewModel.TechType;

                    dbContext.MASTER_TECHNOLOGY.Add(masterTechnology);

                    arr = techViewModel.arrLayer.Split(',');

                    if (arr.Length > 0)
                    {
                        for (int i = 0; i < arr.Length; i++)
                        {
                            MAST_TECH_LAYER_MAPPING techLayerMapping = new MAST_TECH_LAYER_MAPPING();

                            //validation 
                            if (dbContext.MAST_TECH_LAYER_MAPPING.Where(m => m.MAST_TECH_LAYER_ID == techLayerMapping.MAST_TECH_LAYER_ID && m.MAST_TECH_CODE == techViewModel.MAST_TECH_CODE).Any())
                            {
                                message = "Technology Layer Mapping Details already exist.";
                                return false;
                            }

                            if (dbContext.MAST_TECH_LAYER_MAPPING.Any())
                            {
                                techLayerMapping.MAST_TECH_LAYER_ID = dbContext.MAST_TECH_LAYER_MAPPING.Max(m => m.MAST_TECH_LAYER_ID) + 1;
                            }
                            else
                            {
                                techLayerMapping.MAST_TECH_LAYER_ID = 1;
                            }
                            techLayerMapping.MAST_TECH_CODE = masterTechnology.MAST_TECH_CODE;
                            techLayerMapping.MAST_HEAD_CODE = Convert.ToInt32(arr[i]);

                            dbContext.MAST_TECH_LAYER_MAPPING.Add(techLayerMapping);
                            dbContext.SaveChanges();
                        }

                        message = "Technology Details saved successfully.";
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                    dbContext.Dispose();
            }
        }


        /// <summary>
        /// Update Technology Details
        /// </summary>
        /// <param name="techViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditTechnologyDetails(MasterTechnologyViewModel techViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();

            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            try
            {
                int techCode = 0;
                urlParameters = techViewModel.EncryptedTechCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                techCode = Convert.ToInt32(decryptedParameters["TechCode"]);

                //validation 
                if (dbContext.MASTER_TECHNOLOGY.Where(m => m.MAST_TECH_NAME == techViewModel.MAST_TECH_NAME && m.MAST_TECH_CODE != techCode).Any())
                {
                    message = "Technology Details already exist.";
                    return false;
                }

                MASTER_TECHNOLOGY masterTechnology = dbContext.MASTER_TECHNOLOGY.Find(techCode);

                masterTechnology.MAST_TECH_DESC = techViewModel.MAST_TECH_DESC;
                masterTechnology.MAST_TECH_NAME = techViewModel.MAST_TECH_NAME;
                masterTechnology.MAST_TECH_TYPE = techViewModel.TechType;

                dbContext.Entry(masterTechnology).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Technology details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public MasterTechnologyViewModel GetTechnologyDetails(int techCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TECHNOLOGY masterTechnology = dbContext.MASTER_TECHNOLOGY.Find(techCode);
                MasterTechnologyViewModel technologyViewModel = new MasterTechnologyViewModel();

                technologyViewModel.MAST_TECH_DESC = masterTechnology.MAST_TECH_DESC;
                technologyViewModel.MAST_TECH_NAME = masterTechnology.MAST_TECH_NAME;
                technologyViewModel.TechType = masterTechnology.MAST_TECH_TYPE;

                if (masterTechnology.MAST_TECH_STATUS == "Y")
                {
                    technologyViewModel.status = true;
                }
                else
                {
                    technologyViewModel.status = false;
                }

                technologyViewModel.EncryptedTechCode = URLEncrypt.EncryptParameters1(new string[] { "TechCode=" + masterTechnology.MAST_TECH_CODE.ToString().Trim() });
                return technologyViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteTechnologyDetails(int technologyCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TECHNOLOGY techMaster = dbContext.MASTER_TECHNOLOGY.Find(technologyCode);
                dbContext.MASTER_TECHNOLOGY.Remove(techMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool ChangeTchnologyStatus(int technologyCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TECHNOLOGY techMaster = dbContext.MASTER_TECHNOLOGY.Find(technologyCode);

                if (techMaster.MAST_TECH_STATUS == "Y")
                {
                    techMaster.MAST_TECH_STATUS = "N";
                }
                else if (techMaster.MAST_TECH_STATUS == "N")
                {
                    techMaster.MAST_TECH_STATUS = "Y";
                }
                dbContext.Entry(techMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion Technology

        #region Test

        /// <summary>
        /// List Test Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListTestDetails(string statusType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                // var masterTest = dbContext.MASTER_TEST.ToList();
                var masterTest = (from item in dbContext.MASTER_TEST
                                  where (statusType == "%" ? "1" : item.MAST_TEST_STATUS) == (statusType == "%" ? "1" : statusType)
                                  select new
                                  {
                                      item.MAST_TEST_NAME,
                                      item.MAST_TEST_DESC,
                                      item.MAST_TEST_STATUS,
                                      item.MAST_TEST_CODE
                                  }).ToList();
                totalRecords = masterTest.Count;

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_TEST_NAME":
                                masterTest = masterTest.OrderBy(x => x.MAST_TEST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TEST_DESC":
                                masterTest = masterTest.OrderBy(x => x.MAST_TEST_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TEST_STATUS":
                                masterTest = masterTest.OrderBy(x => x.MAST_TEST_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                masterTest = masterTest.OrderBy(x => x.MAST_TEST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_TEST_NAME":
                                masterTest = masterTest.OrderByDescending(x => x.MAST_TEST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TEST_DESC":
                                masterTest = masterTest.OrderByDescending(x => x.MAST_TEST_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_TEST_STATUS":
                                masterTest = masterTest.OrderByDescending(x => x.MAST_TEST_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                masterTest = masterTest.OrderByDescending(x => x.MAST_TEST_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }

                return masterTest.Select(Details => new
                {
                    cell = new[]{
                    Details.MAST_TEST_NAME.ToString(),
                    Details.MAST_TEST_DESC.ToString(),
                    Details.MAST_TEST_STATUS=="Y"?"Active":"Inactive",
                    URLEncrypt.EncryptParameters1(new String[]{"TestCode="+Details.MAST_TEST_CODE.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new String[]{"TestCode="+Details.MAST_TEST_CODE.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new String[]{"TestCode="+Details.MAST_TEST_CODE.ToString().Trim()})
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Save Test Details.
        /// </summary>
        /// <param name="testViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddTestDetails(MasterTestViewModel testViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TEST masterTest = new MASTER_TEST();

                //validation 
                if (dbContext.MASTER_TEST.Where(m => m.MAST_TEST_NAME == testViewModel.MAST_TEST_NAME).Any())
                {
                    message = "Test Details already exist.";
                    return false;
                }

                if (dbContext.MASTER_TECHNOLOGY.Any())
                {
                    masterTest.MAST_TEST_CODE = dbContext.MASTER_TEST.Max(m => m.MAST_TEST_CODE) + 1;
                }
                else
                {
                    masterTest.MAST_TEST_CODE = 1;
                }
                masterTest.MAST_TEST_NAME = testViewModel.MAST_TEST_NAME;
                masterTest.MAST_TEST_DESC = testViewModel.MAST_TEST_DESC;
                masterTest.MAST_TEST_STATUS = "Y";

                dbContext.MASTER_TEST.Add(masterTest);
                dbContext.SaveChanges();
                message = "Test Details saved successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                    dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update Test Details
        /// </summary>
        /// <param name="testViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditTestDetails(MasterTestViewModel testViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();

            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            try
            {
                int testCode = 0;
                urlParameters = testViewModel.EncryptedTestCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                testCode = Convert.ToInt32(decryptedParameters["TestCode"]);

                //validation 
                if (dbContext.MASTER_TEST.Where(m => m.MAST_TEST_NAME == testViewModel.MAST_TEST_NAME && m.MAST_TEST_CODE != testCode).Any())
                {
                    message = "Test Details already exist.";
                    return false;
                }

                MASTER_TEST masterTestModel = dbContext.MASTER_TEST.Find(testCode);

                masterTestModel.MAST_TEST_DESC = testViewModel.MAST_TEST_DESC;
                masterTestModel.MAST_TEST_NAME = testViewModel.MAST_TEST_NAME;

                dbContext.Entry(masterTestModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Test details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Display Test Details
        /// </summary>
        /// <param name="testCode"></param>
        /// <returns></returns>
        public MasterTestViewModel GetTestDetails(int testCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TEST masterTestModel = dbContext.MASTER_TEST.Find(testCode);
                MasterTestViewModel testViewModel = new MasterTestViewModel();

                testViewModel.MAST_TEST_DESC = masterTestModel.MAST_TEST_DESC;
                testViewModel.MAST_TEST_NAME = masterTestModel.MAST_TEST_NAME;

                if (masterTestModel.MAST_TEST_STATUS == "Y")
                {
                    testViewModel.status = true;
                }
                else
                {
                    testViewModel.status = false;
                }

                testViewModel.EncryptedTestCode = URLEncrypt.EncryptParameters1(new string[] { "TestCode=" + masterTestModel.MAST_TEST_CODE.ToString().Trim() });
                return testViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete Test details.
        /// </summary>
        /// <param name="testCode"></param>
        /// <returns></returns>
        public bool DeleteTestDetails(int testCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TEST testMaster = dbContext.MASTER_TEST.Find(testCode);
                dbContext.MASTER_TEST.Remove(testMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Change Test status.
        /// </summary>
        /// <param name="testCode"></param>
        /// <returns></returns>
        public bool ChangeTestStatus(int testCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_TEST testMaster = dbContext.MASTER_TEST.Find(testCode);

                if (testMaster.MAST_TEST_STATUS == "Y")
                {
                    testMaster.MAST_TEST_STATUS = "N";
                }
                else if (testMaster.MAST_TEST_STATUS == "N")
                {
                    testMaster.MAST_TEST_STATUS = "Y";
                }
                dbContext.Entry(testMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion Test

        #region Alerts

        /// <summary>
        /// List Alert Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListAlertsDetails(string status, int? page, int? rows, String sidx, String sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var AlertDetails = (from alerts in dbContext.ADMIN_ALERTS
                                    where
                                    (status == "%" ? "%" : alerts.ALERT_STATUS) == (status == "%" ? "%" : status)
                                    select new
                                    {
                                        alerts.ALERT_ID,
                                        alerts.ALERT_HEADING,
                                        alerts.ALERT_TEXT,
                                        alerts.DISPLAY_START_DATE,
                                        alerts.DISPLAY_END_DATE,
                                        alerts.ALERT_STATUS,
                                    }
                                      ).ToList();

                totalRecords = AlertDetails.Count();

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.Trim().ToLower() == "asc")
                    {
                        switch (sidx)
                        {
                            case "ALERT_HEADING":
                                AlertDetails = AlertDetails.OrderBy(o => o.ALERT_HEADING).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ALERT_TEXT":
                                AlertDetails = AlertDetails.OrderBy(o => o.ALERT_TEXT).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "DISPLAY_START_DATE":
                                AlertDetails = AlertDetails.OrderBy(o => o.DISPLAY_START_DATE).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "DISPLAY_END_DATE":
                                AlertDetails = AlertDetails.OrderBy(o => o.DISPLAY_END_DATE).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ALERT_STATUS":
                                AlertDetails = AlertDetails.OrderBy(o => o.ALERT_STATUS).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                AlertDetails = AlertDetails.OrderBy(o => o.ALERT_HEADING).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ALERT_HEADING":
                                AlertDetails = AlertDetails.OrderByDescending(o => o.ALERT_HEADING).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ALERT_TEXT":
                                AlertDetails = AlertDetails.OrderByDescending(o => o.ALERT_TEXT).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "DISPLAY_START_DATE":
                                AlertDetails = AlertDetails.OrderByDescending(o => o.DISPLAY_START_DATE).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "DISPLAY_END_DATE":
                                AlertDetails = AlertDetails.OrderByDescending(o => o.DISPLAY_END_DATE).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ALERT_STATUS":
                                AlertDetails = AlertDetails.OrderByDescending(o => o.ALERT_STATUS).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                AlertDetails = AlertDetails.OrderByDescending(o => o.ALERT_HEADING).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    AlertDetails = AlertDetails.OrderBy(o => o.ALERT_HEADING).Skip(Convert.ToInt32(page) * Convert.ToInt32(rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                return AlertDetails.Select(Alerts => new
                {
                    cell = new[]{
                      Alerts.ALERT_HEADING,
                      Alerts.ALERT_TEXT,
                      Alerts.DISPLAY_START_DATE.ToString("dd/MM/yyyy"),
                      Alerts.DISPLAY_END_DATE==null?"-": Convert.ToDateTime(Alerts.DISPLAY_END_DATE).ToString("dd/MM/yyyy"),
                      Alerts.ALERT_STATUS=="Y"?"Active":"Inactive",
                      URLEncrypt.EncryptParameters1(new String[]{"AlertId="+Alerts.ALERT_ID.ToString().Trim()}),
                      URLEncrypt.EncryptParameters1(new String[]{"AlertId="+Alerts.ALERT_ID.ToString().Trim()}),
                      URLEncrypt.EncryptParameters1(new String[]{"AlertId="+Alerts.ALERT_ID.ToString().Trim()}),
                }
                }).ToArray();


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Save Alert Details
        /// </summary>
        /// <param name="AlertViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddAlertDetails(AdminAlertsViewModel AlertViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            ADMIN_ALERTS alertsModel = new ADMIN_ALERTS();
            CommonFunctions objCommonFunc = new CommonFunctions();
            try
            {
                if ((objCommonFunc.GetStringToDateTime(AlertViewModel.DISPLAY_START_DATE).Day < DateTime.Now.Day) || (objCommonFunc.GetStringToDateTime(AlertViewModel.DISPLAY_START_DATE).Month < DateTime.Now.Month) || (objCommonFunc.GetStringToDateTime(AlertViewModel.DISPLAY_START_DATE).Year < DateTime.Now.Year))
                {
                    message = "Start Date must be greater than or equal to today's date";
                    return false;
                }

                //Max Id
                if (dbContext.ADMIN_ALERTS.Any())
                {
                    alertsModel.ALERT_ID = dbContext.ADMIN_ALERTS.Max(m => m.ALERT_ID) + 1;
                }
                else
                {
                    alertsModel.ALERT_ID = 1;
                }
                alertsModel.ALERT_HEADING = AlertViewModel.ALERT_HEADING;
                alertsModel.ALERT_TEXT = AlertViewModel.ALERT_TEXT;
                alertsModel.INSERTION_DATE = DateTime.Now;
                alertsModel.DISPLAY_START_DATE = objCommonFunc.GetStringToDateTime(AlertViewModel.DISPLAY_START_DATE);

                if (AlertViewModel.DISPLAY_END_DATE != null)
                {
                    alertsModel.DISPLAY_END_DATE = objCommonFunc.GetStringToDateTime(AlertViewModel.DISPLAY_END_DATE);
                }

                alertsModel.ALERT_STATUS = "Y";
                dbContext.ADMIN_ALERTS.Add(alertsModel);
                dbContext.SaveChanges();
                message = "Alert details saved successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An Error occured while proccessing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Update Alert Details
        /// </summary>
        /// <param name="AlertViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditAlertDetails(AdminAlertsViewModel AlertViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            CommonFunctions objCommonFunc = new CommonFunctions();
            try
            {
                int alertId = 0;
                urlParameters = AlertViewModel.EncryptedAlertId.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                alertId = Convert.ToInt32(decryptedParameters["AlertId"]);

                ADMIN_ALERTS alertsModel = dbContext.ADMIN_ALERTS.Find(alertId);

                alertsModel.ALERT_HEADING = AlertViewModel.ALERT_HEADING;
                alertsModel.ALERT_TEXT = AlertViewModel.ALERT_TEXT;
                alertsModel.DISPLAY_START_DATE = objCommonFunc.GetStringToDateTime(AlertViewModel.DISPLAY_START_DATE);

                if (AlertViewModel.DISPLAY_END_DATE != null)
                {
                    alertsModel.DISPLAY_END_DATE = objCommonFunc.GetStringToDateTime(AlertViewModel.DISPLAY_END_DATE);
                }

                dbContext.Entry(alertsModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Alert details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An Error occured while proccessing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Get Alert Details
        /// </summary>
        /// <param name="AlertId"></param>
        /// <returns></returns>
        public AdminAlertsViewModel ViewAlertDetails(int AlertId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_ALERTS AlertModel = dbContext.ADMIN_ALERTS.Find(AlertId);
                AdminAlertsViewModel AlertViewModel = new AdminAlertsViewModel();
                CommonFunctions objCommonFucnt = new CommonFunctions();
                AlertViewModel.EncryptedAlertId = URLEncrypt.EncryptParameters1(new String[] { "AlertId=" + AlertModel.ALERT_ID.ToString() });

                AlertViewModel.ALERT_HEADING = AlertModel.ALERT_HEADING;
                AlertViewModel.ALERT_TEXT = AlertModel.ALERT_TEXT;
                AlertViewModel.DISPLAY_START_DATE = objCommonFucnt.GetDateTimeToString(AlertModel.DISPLAY_START_DATE);
                AlertViewModel.DISPLAY_END_DATE = AlertModel.DISPLAY_END_DATE == null ? null : objCommonFucnt.GetDateTimeToString(AlertModel.DISPLAY_END_DATE.Value);

                return AlertViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete Alert Details
        /// </summary>
        /// <param name="AlertId"></param>
        /// <returns></returns>
        public bool DeleteAlertDetails(int AlertId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_ALERTS AlertModel = dbContext.ADMIN_ALERTS.Find(AlertId);
                dbContext.ADMIN_ALERTS.Remove(AlertModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Change Alert Details
        /// </summary>
        /// <param name="AlertId"></param>
        /// <returns></returns>
        public bool ChangeAlertStatus(int AlertId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_ALERTS alertDetails = dbContext.ADMIN_ALERTS.Find(AlertId);
                if (alertDetails.ALERT_STATUS == "Y")
                {
                    alertDetails.ALERT_STATUS = "N";
                }
                else if (alertDetails.ALERT_STATUS == "N")
                {
                    alertDetails.ALERT_STATUS = "Y";
                }
                dbContext.Entry(alertDetails).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion Alerts

        #region PMGSY II

        /// <summary>
        /// List Test Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListPMGSYIIDetails(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var masterState = dbContext.MASTER_STATE.Where(m => m.MAST_STATE_ACTIVE == "Y").ToList();

                totalRecords = masterState.Count;

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                masterState = masterState.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_STATE_ACTIVE":
                                masterState = masterState.OrderBy(x => x.MAST_STATE_ACTIVE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                masterState = masterState.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                masterState = masterState.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_STATE_ACTIVE":
                                masterState = masterState.OrderByDescending(x => x.MAST_STATE_ACTIVE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                masterState = masterState.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }

                return masterState.Select(Details => new
                {
                    cell = new[]{
                    Details.MAST_STATE_NAME,
                    dbContext.MASTER_PMGSY2.Where(m=>m.MAST_STATE_CODE==Details.MAST_STATE_CODE).Any()? (Details.MASTER_PMGSY2.MAST_PMGSY2_ACTIVE== "Y"?"Active":"Inactive"):"-",
                    URLEncrypt.EncryptParameters1(new String[]{"StateCode="+Details.MAST_STATE_CODE.ToString().Trim()}),
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Change PMGSY II status.
        /// </summary>
        /// <param name="stateCode"></param>
        /// <returns></returns>
        public bool ChangePMGSY2Status(int stateCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.MASTER_PMGSY2.Where(m => m.MAST_STATE_CODE == stateCode).Any())
                {
                    MASTER_PMGSY2 masterPMGSY2Model = dbContext.MASTER_PMGSY2.Find(stateCode);

                    if (masterPMGSY2Model.MAST_PMGSY2_ACTIVE == "Y")
                    {
                        masterPMGSY2Model.MAST_PMGSY2_ACTIVE = "N";
                    }
                    else if (masterPMGSY2Model.MAST_PMGSY2_ACTIVE == "N")
                    {
                        masterPMGSY2Model.MAST_PMGSY2_ACTIVE = "Y";
                    }
                    dbContext.Entry(masterPMGSY2Model).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return true;
                }
                else
                {
                    MASTER_PMGSY2 masterPMGSY2Model = new MASTER_PMGSY2();
                    masterPMGSY2Model.MAST_STATE_CODE = stateCode;
                    masterPMGSY2Model.MAST_PMGSY2_ACTIVE = "Y";
                    dbContext.MASTER_PMGSY2.Add(masterPMGSY2Model);
                    dbContext.SaveChanges();
                    return true;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Check PMGSY II status
        /// </summary>
        /// <param name="stateCode"></param>
        /// <returns></returns>
        public bool IsPMGSY2Active(int stateCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.MASTER_PMGSY2.Where(m => m.MAST_STATE_CODE == stateCode).Any())
                {
                    string PMGSY2Active = dbContext.MASTER_PMGSY2.Where(m => m.MAST_STATE_CODE == stateCode).Select(s => s.MAST_PMGSY2_ACTIVE).FirstOrDefault();

                    if (PMGSY2Active == "Y")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return true;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return true;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion Test

        #region Feedback Category

        /// <summary>
        /// List Feedback Category Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListFeedbackCategoryDetails(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var feedbackCategory = dbContext.MASTER_FEEDBACK_CATEGORY.ToList();
                totalRecords = feedbackCategory.Count;

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_FEED_NAME":
                                feedbackCategory = feedbackCategory.OrderBy(x => x.MAST_FEED_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                feedbackCategory = feedbackCategory.OrderBy(x => x.MAST_FEED_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_FEED_NAME":
                                feedbackCategory = feedbackCategory.OrderByDescending(x => x.MAST_FEED_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                feedbackCategory = feedbackCategory.OrderByDescending(x => x.MAST_FEED_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }

                return feedbackCategory.Select(Details => new
                {
                    cell = new[]{
                    Details.MAST_FEED_NAME.ToString(),
                    URLEncrypt.EncryptParameters1(new String[]{"FeedbackId="+Details.MAST_FEED_ID.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new String[]{"FeedbackId="+Details.MAST_FEED_ID.ToString().Trim()}),
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Save Details.
        /// </summary>
        /// <param name="feedbackCategoryViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddFeedbackDetails(FeedbackCategoryViewModel feedbackCategoryViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_FEEDBACK_CATEGORY feedbackCategoryModel = new MASTER_FEEDBACK_CATEGORY();

                //validation 
                if (dbContext.MASTER_FEEDBACK_CATEGORY.Where(m => m.MAST_FEED_NAME == feedbackCategoryViewModel.MAST_FEED_NAME).Any())
                {
                    message = "Feedback Details already exist.";
                    return false;
                }

                if (dbContext.MASTER_FEEDBACK_CATEGORY.Any())
                {
                    feedbackCategoryModel.MAST_FEED_ID = dbContext.MASTER_FEEDBACK_CATEGORY.Max(m => m.MAST_FEED_ID) + 1;
                }
                else
                {
                    feedbackCategoryModel.MAST_FEED_ID = 1;
                }
                feedbackCategoryModel.MAST_FEED_NAME = feedbackCategoryViewModel.MAST_FEED_NAME;

                dbContext.MASTER_FEEDBACK_CATEGORY.Add(feedbackCategoryModel);
                dbContext.SaveChanges();
                message = "Feedback Details saved successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                    dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update Feedback Details
        /// </summary>
        /// <param name="feedbackCategoryViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditFeedbackDetails(FeedbackCategoryViewModel feedbackCategoryViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();

            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            try
            {
                int feedbackId = 0;
                urlParameters = feedbackCategoryViewModel.EncryptedFeedId.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                feedbackId = Convert.ToInt32(decryptedParameters["FeedbackId"]);

                //validation 
                if (dbContext.MASTER_FEEDBACK_CATEGORY.Where(m => m.MAST_FEED_NAME == feedbackCategoryViewModel.MAST_FEED_NAME && m.MAST_FEED_ID != feedbackId).Any())
                {
                    message = "Feedback Details already exist.";
                    return false;
                }

                MASTER_FEEDBACK_CATEGORY feedbackCategoryModel = dbContext.MASTER_FEEDBACK_CATEGORY.Find(feedbackId);

                feedbackCategoryModel.MAST_FEED_NAME = feedbackCategoryViewModel.MAST_FEED_NAME;

                dbContext.Entry(feedbackCategoryModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Feedback details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Display Feedback Details
        /// </summary>
        /// <param name="feebackId"></param>
        /// <returns></returns>
        public FeedbackCategoryViewModel GetFeedbackDetails(int feebackId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_FEEDBACK_CATEGORY feedbackCategoryModel = dbContext.MASTER_FEEDBACK_CATEGORY.Find(feebackId);
                FeedbackCategoryViewModel feedbackViewModel = new FeedbackCategoryViewModel();
                feedbackViewModel.MAST_FEED_NAME = feedbackCategoryModel.MAST_FEED_NAME;
                feedbackViewModel.EncryptedFeedId = URLEncrypt.EncryptParameters1(new string[] { "FeedbackId=" + feedbackCategoryModel.MAST_FEED_ID.ToString().Trim() });
                return feedbackViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete Details
        /// </summary>
        /// <param name="feedBackId"></param>
        /// <returns></returns>
        public bool DeleteFeedbackDetails(int feedBackId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_FEEDBACK_CATEGORY feedbackCategoryModel = dbContext.MASTER_FEEDBACK_CATEGORY.Find(feedBackId);
                dbContext.MASTER_FEEDBACK_CATEGORY.Remove(feedbackCategoryModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion Feedback Category

        #region Carriage

        /// <summary>
        /// List Carriage Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListCarriageDetails(string statusType, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                //  var masterCarriage =  dbContext.MASTER_CARRIAGE.Where(a => a.MAST_CARRIAGE_STATUS == statusType).ToList();
                var masterCarriage = (from item in dbContext.MASTER_CARRIAGE
                                      where (statusType == "%" ? "1" : item.MAST_CARRIAGE_STATUS) == (statusType == "%" ? "1" : statusType)
                                      select new
                                      {
                                          item.MAST_CARRIAGE_WIDTH,
                                          item.MAST_CARRIAGE_STATUS,
                                          item.MAST_CARRIAGE_CODE
                                      }).ToList();
                totalRecords = masterCarriage.Count();

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_CARRIAGE_WIDTH":
                                masterCarriage = masterCarriage.OrderBy(x => x.MAST_CARRIAGE_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CARRIAGE_STATUS":
                                masterCarriage = masterCarriage.OrderBy(x => x.MAST_CARRIAGE_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                masterCarriage = masterCarriage.OrderBy(x => x.MAST_CARRIAGE_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_CARRIAGE_WIDTH":
                                masterCarriage = masterCarriage.OrderByDescending(x => x.MAST_CARRIAGE_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_CARRIAGE_STATUS":
                                masterCarriage = masterCarriage.OrderByDescending(x => x.MAST_CARRIAGE_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                masterCarriage = masterCarriage.OrderByDescending(x => x.MAST_CARRIAGE_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }

                return masterCarriage.Select(Details => new
                {
                    cell = new[]{
                    Details.MAST_CARRIAGE_WIDTH.ToString(),
                    Details.MAST_CARRIAGE_STATUS=="Y"?"Active":"Inactive",
                    URLEncrypt.EncryptParameters1(new String[]{"CarriageCode="+Details.MAST_CARRIAGE_CODE.ToString()}),
                    URLEncrypt.EncryptParameters1(new String[]{"CarriageCode="+Details.MAST_CARRIAGE_CODE.ToString()}),
                    URLEncrypt.EncryptParameters1(new String[]{"CarriageCode="+Details.MAST_CARRIAGE_CODE.ToString()}),
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Save Carriage Details.
        /// </summary>
        /// <param name="carriageViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddCarriageDetails(MasterCarriageViewModel carriageViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_CARRIAGE masterCarriageModel = new MASTER_CARRIAGE();

                //validation 
                if (dbContext.MASTER_CARRIAGE.Where(m => m.MAST_CARRIAGE_WIDTH == carriageViewModel.MAST_CARRIAGE_WIDTH).Any())
                {
                    message = "Carriage Details already exist.";
                    return false;
                }

                if (dbContext.MASTER_CARRIAGE.Any())
                {
                    masterCarriageModel.MAST_CARRIAGE_CODE = dbContext.MASTER_CARRIAGE.Max(m => m.MAST_CARRIAGE_CODE) + 1;
                }
                else
                {
                    masterCarriageModel.MAST_CARRIAGE_CODE = 1;
                }
                masterCarriageModel.MAST_CARRIAGE_WIDTH = carriageViewModel.MAST_CARRIAGE_WIDTH;
                masterCarriageModel.MAST_CARRIAGE_STATUS = "Y";

                dbContext.MASTER_CARRIAGE.Add(masterCarriageModel);
                dbContext.SaveChanges();
                message = "Carriage Details saved successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                    dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update Carriage Details
        /// </summary>
        /// <param name="carriageViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditCarriageDetails(MasterCarriageViewModel carriageViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();

            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            try
            {
                int carriageCode = 0;
                urlParameters = carriageViewModel.EncryptedCarriageCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                carriageCode = Convert.ToInt32(decryptedParameters["CarriageCode"]);

                //validation 
                if (dbContext.MASTER_CARRIAGE.Where(m => m.MAST_CARRIAGE_WIDTH == carriageViewModel.MAST_CARRIAGE_WIDTH && m.MAST_CARRIAGE_CODE != carriageCode).Any())
                {
                    message = "Carriage Details already exist.";
                    return false;
                }

                MASTER_CARRIAGE masterCarriageModel = dbContext.MASTER_CARRIAGE.Find(carriageCode);

                masterCarriageModel.MAST_CARRIAGE_WIDTH = carriageViewModel.MAST_CARRIAGE_WIDTH;

                dbContext.Entry(masterCarriageModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Carriage details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Display Carriage Details
        /// </summary>
        /// <param name="carriageCode"></param>
        /// <returns></returns>
        public MasterCarriageViewModel GetCarriageDetails(int carriageCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_CARRIAGE masterCarriageModel = dbContext.MASTER_CARRIAGE.Find(carriageCode);
                MasterCarriageViewModel CarriageViewModel = new MasterCarriageViewModel();

                CarriageViewModel.MAST_CARRIAGE_WIDTH = masterCarriageModel.MAST_CARRIAGE_WIDTH;

                CarriageViewModel.EncryptedCarriageCode = URLEncrypt.EncryptParameters1(new string[] { "CarriageCode=" + masterCarriageModel.MAST_CARRIAGE_CODE.ToString().Trim() });
                return CarriageViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteCarriageDetails(int carriageCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_CARRIAGE masterCarriageModel = dbContext.MASTER_CARRIAGE.Find(carriageCode);
                dbContext.MASTER_CARRIAGE.Remove(masterCarriageModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool ChangeCarriageStatus(int carriageCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_CARRIAGE masterCarriageModel = dbContext.MASTER_CARRIAGE.Find(carriageCode);

                if (masterCarriageModel.MAST_CARRIAGE_STATUS == "Y")
                {
                    masterCarriageModel.MAST_CARRIAGE_STATUS = "N";
                }
                else if (masterCarriageModel.MAST_CARRIAGE_STATUS == "N")
                {
                    masterCarriageModel.MAST_CARRIAGE_STATUS = "Y";
                }
                dbContext.Entry(masterCarriageModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion Carriage

        #region Info


        /// <summary>
        /// returns information details list to display on grid
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListInfoDetails(string infoType, int infoStateCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var masterInfo = new List<MASTER_INFO>();
                if (infoType == "T")
                {

                    if (infoStateCode == 0)
                    {
                        masterInfo = dbContext.MASTER_INFO.Where(m => m.MAST_INFO_TYPE == infoType).ToList();
                    }
                    else
                    {
                        masterInfo = dbContext.MASTER_INFO.Where(m => m.MAST_INFO_TYPE == infoType && m.MAST_STATE_CODE == infoStateCode).ToList();
                    }
                }
                else
                {
                    masterInfo = dbContext.MASTER_INFO.Where(m => m.MAST_INFO_TYPE == infoType).ToList();
                }

                totalRecords = masterInfo.Count;

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_INFO_NAME":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_DESIGNATION":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_DESIGNATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_OFFICE":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_TELE_OFF":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_TELE_OFF).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MAST_INFO_TELE_RES":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_TELE_RES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_MOBILE":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_MOBILE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_FAX":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_EMAIL":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_TYPE":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_ACTIVE":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_ACTIVE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MAST_INFO_SORT":
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_SORT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            default:
                                masterInfo = masterInfo.OrderBy(x => x.MAST_INFO_SORT).ThenBy(x => x.MAST_INFO_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_INFO_NAME":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_DESIGNATION":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_DESIGNATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_OFFICE":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_OFFICE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_TELE_OFF":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_TELE_OFF).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MAST_INFO_TELE_RES":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_TELE_RES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_MOBILE":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_MOBILE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_FAX":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_EMAIL":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_TYPE":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            case "MAST_INFO_ACTIVE":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_ACTIVE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MAST_INFO_SORT":
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_SORT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;

                            default:
                                masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_SORT).ThenBy(x => x.MAST_INFO_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    masterInfo = masterInfo.OrderByDescending(x => x.MAST_INFO_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                return masterInfo.Select(details => new
                {
                    cell = new[]{
                         details.MAST_INFO_NAME,
                         details.MAST_INFO_DESIGNATION,
                         details.MAST_INFO_OFFICE,
                         dbContext.MASTER_STATE.Where(m=>m.MAST_STATE_CODE==details.MAST_STATE_CODE).Any()?details.MASTER_STATE.MAST_STATE_NAME:"-",
                         details.MAST_INFO_TELE_OFF,
                         details.MAST_INFO_TELE_RES,
                         details.MAST_INFO_MOBILE,
                         details.MAST_INFO_FAX,
                         details.MAST_INFO_EMAIL,
                         details.MAST_INFO_TYPE=="M"?"MRD":details.MAST_INFO_TYPE=="N"?"NRRDA":details.MAST_INFO_TYPE=="T"?"Trainers":"Accounts Trainer",
                         details.MAST_INFO_SORT.ToString(),
                         details.MAST_INFO_ACTIVE=="Y"?"Active":"Inactive",
                         URLEncrypt.EncryptParameters1(new String[]{"InfoCode="+details.MAST_INFO_CODE.ToString().Trim()}),
                         URLEncrypt.EncryptParameters1(new String[]{"InfoCode="+details.MAST_INFO_CODE.ToString().Trim()}),
                         URLEncrypt.EncryptParameters1(new String[]{"InfoCode="+details.MAST_INFO_CODE.ToString().Trim()}),
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Save the Information details.
        /// </summary>
        /// <param name="infoViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddInfoDetails(MasterInfoViewModel infoViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_INFO infoModel = new MASTER_INFO();

                //validation 
                //if (dbContext.MASTER_INFO.Where(m => m.MAST_INFO_NAME ==infoViewModel.MAST_INFO_NAME).Any())
                //{
                //    message = "Info Details already exist.";
                //    return false;
                //}

                if (dbContext.MASTER_INFO.Any())
                {
                    infoModel.MAST_INFO_CODE = dbContext.MASTER_INFO.Max(m => m.MAST_INFO_CODE) + 1;
                }
                else
                {
                    infoModel.MAST_INFO_CODE = 1;
                }

                infoModel.MAST_INFO_NAME = infoViewModel.MAST_INFO_NAME;
                infoModel.MAST_INFO_DESIGNATION = infoViewModel.MAST_INFO_DESIGNATION;
                infoModel.MAST_INFO_OFFICE = infoViewModel.MAST_INFO_OFFICE;
                infoModel.MAST_STATE_CODE = infoViewModel.MAST_STATE_CODE == 0 ? null : infoViewModel.MAST_STATE_CODE;
                infoModel.MAST_INFO_TELE_OFF = infoViewModel.MAST_INFO_TELE_OFF;
                infoModel.MAST_INFO_TELE_RES = infoViewModel.MAST_INFO_TELE_RES;
                infoModel.MAST_INFO_MOBILE = infoViewModel.MAST_INFO_MOBILE;
                infoModel.MAST_INFO_FAX = infoViewModel.MAST_INFO_FAX;
                infoModel.MAST_INFO_EMAIL = infoViewModel.MAST_INFO_EMAIL;
                infoModel.MAST_INFO_TYPE = infoViewModel.MAST_INFO_TYPE;
                infoModel.MAST_INFO_ACTIVE = "Y";
                infoModel.MAST_INFO_SORT = infoViewModel.MAST_SORT_ORDER;
                dbContext.MASTER_INFO.Add(infoModel);
                dbContext.SaveChanges();
                message = "Information Details saved successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                    dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update the Information details
        /// </summary>
        /// <param name="infoViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditInfoDetails(MasterInfoViewModel infoViewModel, ref string message)
        {
            dbContext = new PMGSYEntities();

            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            try
            {
                int InfoCode = 0;
                urlParameters = infoViewModel.EncryptedInfoCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                InfoCode = Convert.ToInt32(decryptedParameters["InfoCode"]);

                MASTER_INFO infoModel = dbContext.MASTER_INFO.Find(InfoCode);

                infoModel.MAST_INFO_NAME = infoViewModel.MAST_INFO_NAME;
                infoModel.MAST_INFO_DESIGNATION = infoViewModel.MAST_INFO_DESIGNATION;
                infoModel.MAST_INFO_OFFICE = infoViewModel.MAST_INFO_OFFICE;
                infoModel.MAST_STATE_CODE = infoViewModel.MAST_STATE_CODE == 0 ? null : infoViewModel.MAST_STATE_CODE;
                infoModel.MAST_INFO_TELE_OFF = infoViewModel.MAST_INFO_TELE_OFF;
                infoModel.MAST_INFO_TELE_RES = infoViewModel.MAST_INFO_TELE_RES;
                infoModel.MAST_INFO_MOBILE = infoViewModel.MAST_INFO_MOBILE;
                infoModel.MAST_INFO_FAX = infoViewModel.MAST_INFO_FAX;
                infoModel.MAST_INFO_EMAIL = infoViewModel.MAST_INFO_EMAIL;
                infoModel.MAST_INFO_SORT = infoViewModel.MAST_SORT_ORDER;
                dbContext.Entry(infoModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Information details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Get information details for editing.
        /// </summary>
        /// <param name="infoCode"></param>
        /// <returns></returns>
        public MasterInfoViewModel GetInfoDetails(int infoCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_INFO infoModel = dbContext.MASTER_INFO.Find(infoCode);
                MasterInfoViewModel infoViewModel = new MasterInfoViewModel();

                infoViewModel.MAST_INFO_NAME = infoModel.MAST_INFO_NAME;
                infoViewModel.MAST_INFO_DESIGNATION = infoModel.MAST_INFO_DESIGNATION;
                infoViewModel.MAST_INFO_OFFICE = infoModel.MAST_INFO_OFFICE;
                infoViewModel.MAST_STATE_CODE = infoModel.MAST_STATE_CODE;
                infoViewModel.MAST_INFO_TELE_OFF = infoModel.MAST_INFO_TELE_OFF;
                infoViewModel.MAST_INFO_TELE_RES = infoModel.MAST_INFO_TELE_RES;
                infoViewModel.MAST_INFO_MOBILE = infoModel.MAST_INFO_MOBILE;
                infoViewModel.MAST_INFO_FAX = infoModel.MAST_INFO_FAX;
                infoViewModel.MAST_INFO_EMAIL = infoModel.MAST_INFO_EMAIL;
                infoViewModel.MAST_INFO_TYPE = infoModel.MAST_INFO_TYPE;
                infoViewModel.MAST_SORT_ORDER = infoModel.MAST_INFO_SORT;
                infoViewModel.EncryptedInfoCode = URLEncrypt.EncryptParameters1(new string[] { "InfoCode=" + infoModel.MAST_INFO_CODE.ToString().Trim() });
                return infoViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete information details.
        /// </summary>
        /// <param name="infoCode"></param>
        /// <returns></returns>
        public bool DeleteInfoDetails(int infoCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_INFO infoModel = dbContext.MASTER_INFO.Find(infoCode);
                dbContext.MASTER_INFO.Remove(infoModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Change information Active status
        /// </summary>
        /// <param name="infoCode"></param>
        /// <returns></returns>
        public bool ChangeInfoStatus(int infoCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_INFO InfoModel = dbContext.MASTER_INFO.Find(infoCode);

                if (InfoModel.MAST_INFO_ACTIVE == "Y")
                {
                    InfoModel.MAST_INFO_ACTIVE = "N";
                }
                else if (InfoModel.MAST_INFO_ACTIVE == "N")
                {
                    InfoModel.MAST_INFO_ACTIVE = "Y";
                }
                dbContext.Entry(InfoModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Populate information Types.
        /// </summary>
        /// <returns></returns>
        public SelectList PopulateInfoTypes()
        {
            List<SelectListItem> lstTypes = new List<SelectListItem>();
            lstTypes.Add(new SelectListItem { Text = "--Select--", Value = "0" });
            lstTypes.Add(new SelectListItem { Text = "Accounts Trainers", Value = "A" });
            lstTypes.Add(new SelectListItem { Text = "MRD", Value = "M" });
            lstTypes.Add(new SelectListItem { Text = "NRRDA", Value = "N" });
            lstTypes.Add(new SelectListItem { Text = "Trainers", Value = "T" });
            return new SelectList(lstTypes, "Value", "Text");
        }

        #endregion Info

        public List<SelectListItem> PopulateClassTypes()
        {
            dbContext = new PMGSYEntities();
            try
            {
                List<SelectListItem> lstClassTypes = new List<SelectListItem>();
                var lstTypes = (from item in dbContext.MASTER_CON_CLASS_TYPE
                                select new
                                {
                                    item.MAST_CON_CLASS,
                                    item.MAST_CON_CLASS_TYPE_NAME
                                }).ToList();

                foreach (var item in lstTypes)
                {
                    lstClassTypes.Add(new SelectListItem { Value = item.MAST_CON_CLASS.ToString(), Text = item.MAST_CON_CLASS_TYPE_NAME.ToString() });
                }
                return lstClassTypes;
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        ///Added by Sammed Patil 1 Aug 2014
        #region Connectivity Status
        public bool AddEditConnectivityStatus(ConnectivityStatusViewModel conn)
        {
            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            PMGSY.Models.IMS_CONNECTIVITY conn_stat = new PMGSY.Models.IMS_CONNECTIVITY();
            try
            {
                //var q = (from f in dbContext.IMS_CONNECTIVITY
                //         where f.MAST_STATE_CODE == conn.hdnStateCode && f.MAST_DISTRICT_CODE == conn.hdnDistCode
                //         orderby f.MAST_DISTRICT_CODE
                //         select f).ToList();

                conn_stat = dbContext.IMS_CONNECTIVITY.Where(m => m.MAST_STATE_CODE == conn.hdnStateCode && m.MAST_DISTRICT_CODE == conn.hdnDistCode).FirstOrDefault();
                int q = 0;
                if (conn_stat == null)
                {
                    conn_stat = new PMGSY.Models.IMS_CONNECTIVITY();
                    q = 0;
                }
                else
                {
                    q = 1;
                }
                PMGSY.Common.CommonFunctions comm = new PMGSY.Common.CommonFunctions();

                //if (q != null)
                //{
                //adminFB.FEED_STATUS = FbRep.Feed_Reply.Trim();



                conn_stat.IMS_TNH_1000 = Convert.ToInt32(conn.t11);
                conn_stat.IMS_TNH_500 = Convert.ToInt32(conn.t12);
                conn_stat.IMS_TNH_250 = Convert.ToInt32(conn.t13);
                conn_stat.IMS_TNH = Convert.ToInt32(conn.t14);

                conn_stat.IMS_TNH_EL_499 = Convert.ToInt32(conn.t1El499);
                conn_stat.IMS_TNH_EL_249 = Convert.ToInt32(conn.t1El249);

                conn_stat.IMS_TNCH_1000 = Convert.ToInt32(conn.t21);
                conn_stat.IMS_TNCH_500 = Convert.ToInt32(conn.t22);
                conn_stat.IMS_TNCH_250 = Convert.ToInt32(conn.t23);
                conn_stat.IMS_TNCH = Convert.ToInt32(conn.t24);

                conn_stat.IMS_TNCH_EL_499 = Convert.ToInt32(conn.t2El499);
                conn_stat.IMS_TNCH_EL_249 = Convert.ToInt32(conn.t2El249);

                conn_stat.IMS_H2000_1000 = Convert.ToInt32(conn.t41);
                conn_stat.IMS_H2000_500 = Convert.ToInt32(conn.t42);
                conn_stat.IMS_H2000_250 = Convert.ToInt32(conn.t43);
                conn_stat.IMS_H2000 = Convert.ToInt32(conn.t44);

                conn_stat.IMS_H2000_EL_499 = Convert.ToInt32(conn.t4El499);
                conn_stat.IMS_H2000_EL_249 = Convert.ToInt32(conn.t4El249);

                conn_stat.IMS_H2001_1000 = Convert.ToInt32(conn.t51);
                conn_stat.IMS_H2001_500 = Convert.ToInt32(conn.t52);
                conn_stat.IMS_H2001_250 = Convert.ToInt32(conn.t53);
                conn_stat.IMS_H2001 = Convert.ToInt32(conn.t54);

                conn_stat.IMS_H2001_EL_499 = Convert.ToInt32(conn.t5El499);
                conn_stat.IMS_H2001_EL_249 = Convert.ToInt32(conn.t5El249);

                conn_stat.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;

                if (PMGSYSession.Current.PMGSYScheme == 1)
                {
                    conn_stat.IMS_YEAR = 2000;
                }
                else
                {
                    conn_stat.IMS_YEAR = 2011;
                }
                if (q > 0)
                {
                    dbContext.Entry(conn_stat).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                }
                else
                {
                    conn_stat.MAST_STATE_CODE = conn.hdnStateCode;
                    conn_stat.MAST_DISTRICT_CODE = conn.hdnDistCode;

                    dbContext.IMS_CONNECTIVITY.Add(conn_stat);
                    dbContext.SaveChanges();
                }

                //return true;
                //}

                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DelConnectivityStatus(ConnectivityStatusViewModel conn)
        {
            int recordCount = 0;
            PMGSY.Models.PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                IMS_CONNECTIVITY conn_stat = dbContext.IMS_CONNECTIVITY.Where(m => m.MAST_STATE_CODE == conn.hdnStateCode && m.MAST_DISTRICT_CODE == conn.hdnDistCode).FirstOrDefault();
                if (conn_stat == null)
                {
                    return false;
                }
                else
                {
                    dbContext.IMS_CONNECTIVITY.Remove(conn_stat);
                    dbContext.SaveChanges();
                    return true;
                }
            }
            catch (DbEntityValidationException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region Cluster Master

        #region Not Used this Listing
        public Array ListClusterDetailDAL(int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();

                var list = (from CL in dbContext.MASTER_CLUSTER
                            join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                            on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                            join BL in dbContext.MASTER_BLOCK
                            on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                            join HB in dbContext.MASTER_HABITATIONS
                            on CLH.MAST_HAB_CODE equals HB.MAST_HAB_CODE
                            join HBDTL in dbContext.MASTER_HABITATIONS_DETAILS
                            on HB.MAST_HAB_CODE equals HBDTL.MAST_HAB_CODE
                            join VL in dbContext.MASTER_VILLAGE
                            on HB.MAST_VILLAGE_CODE equals VL.MAST_VILLAGE_CODE
                            join DT in dbContext.MASTER_DISTRICT
                            on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                            join ST in dbContext.MASTER_STATE
                            on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                            where
                                 (stateCode == 0 ? 1 : ST.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                                 (districtCode == 0 ? 1 : DT.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode) &&
                                 (blockCode == 0 ? 1 : BL.MAST_BLOCK_CODE) == (blockCode == 0 ? 1 : blockCode) &&
                                  CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                            select new
                            {
                                CL.MAST_CLUSTER_CODE,
                                CL.MAST_CLUSTER_NAME,
                                CL.MAST_BLOCK_CODE,
                                CL.MAST_PMGSY_SCHEME,
                                CL.MAST_CLUSTER_ACTIVE,
                                CL.MAST_LOCK_STATUS,
                                HB.MAST_HAB_NAME,
                                CLH.MAST_HAB_CODE,
                                HB.MAST_VILLAGE_CODE,
                                VL.MAST_VILLAGE_NAME,
                                BL.MAST_BLOCK_NAME,
                                BL.MAST_DISTRICT_CODE,
                                DT.MAST_DISTRICT_NAME,
                                DT.MAST_STATE_CODE,
                                ST.MAST_STATE_NAME,
                                HBDTL.MAST_HAB_TOT_POP,
                                HBDTL.MAST_HAB_SCST_POP,
                                HBDTL.MAST_HAB_CONNECTED,
                                HBDTL.MAST_YEAR
                            });

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_HAB_NAME":
                                list = list.OrderBy(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_HAB_NAME":
                                list = list.OrderByDescending(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;


                            default:
                                list = list.OrderByDescending(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(clusterDetails => new
                {
                    clusterDetails.MAST_CLUSTER_CODE,
                    clusterDetails.MAST_CLUSTER_NAME,
                    clusterDetails.MAST_BLOCK_CODE,
                    clusterDetails.MAST_PMGSY_SCHEME,
                    clusterDetails.MAST_CLUSTER_ACTIVE,
                    clusterDetails.MAST_LOCK_STATUS,
                    clusterDetails.MAST_HAB_NAME,
                    clusterDetails.MAST_HAB_CODE,
                    clusterDetails.MAST_VILLAGE_CODE,
                    clusterDetails.MAST_VILLAGE_NAME,
                    clusterDetails.MAST_BLOCK_NAME,
                    clusterDetails.MAST_DISTRICT_CODE,
                    clusterDetails.MAST_DISTRICT_NAME,
                    clusterDetails.MAST_STATE_CODE,
                    clusterDetails.MAST_STATE_NAME,
                    clusterDetails.MAST_HAB_TOT_POP,
                    clusterDetails.MAST_HAB_SCST_POP,
                    clusterDetails.MAST_HAB_CONNECTED,
                    clusterDetails.MAST_YEAR

                }).ToArray();

                //string res = result.Select(x => x.MAST_AGENCY_TYPE.ToString()).FirstOrDefault();

                return result.Select(clusterDetails => new
                {
                    id = clusterDetails.MAST_CLUSTER_CODE.ToString().Trim(),
                    clusterDetails.MAST_HAB_CODE,//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{

                    clusterDetails.MAST_CLUSTER_NAME == null?"NA":clusterDetails.MAST_CLUSTER_NAME.ToString(),
                    clusterDetails.MAST_VILLAGE_NAME==null?"NA":clusterDetails.MAST_VILLAGE_NAME.ToString(),
                    clusterDetails.MAST_HAB_NAME==null?"NA": clusterDetails.MAST_HAB_NAME.ToString(),
                    clusterDetails.MAST_HAB_CONNECTED==null?"NA": clusterDetails.MAST_HAB_CONNECTED.ToString(),
                    clusterDetails.MAST_HAB_TOT_POP.ToString(),
                    clusterDetails.MAST_HAB_SCST_POP.ToString(),
                    URLEncrypt.EncryptParameters1(new string[]{"ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString().Trim(),"HabCode =" + clusterDetails.MAST_HAB_CODE.ToString().Trim().Replace("/","")}),
                    URLEncrypt.EncryptParameters1(new string[]{"ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString().Trim(),"HabCode =" + clusterDetails.MAST_HAB_CODE.ToString().Trim().Replace("/","")})

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        #endregion

        public Array ListClusterDAL(int stateCode, int districtCode, int blockCode, string activeStatus, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();

                var list = (from CL in dbContext.MASTER_CLUSTER
                            join BL in dbContext.MASTER_BLOCK
                            on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                            join DT in dbContext.MASTER_DISTRICT
                            on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                            join ST in dbContext.MASTER_STATE
                            on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                            where
                                 (stateCode == 0 ? 1 : ST.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                                 (districtCode == 0 ? 1 : DT.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode) &&
                                 (blockCode == 0 ? 1 : BL.MAST_BLOCK_CODE) == (blockCode == 0 ? 1 : blockCode) &&
                                 (activeStatus == "%" ? "%" : CL.MAST_CLUSTER_ACTIVE) == (activeStatus == "%" ? "%" : activeStatus)
                            select new
                            {
                                CL.MAST_CLUSTER_CODE,
                                CL.MAST_CLUSTER_NAME,
                                CL.MAST_BLOCK_CODE,
                                CL.MAST_PMGSY_SCHEME,
                                CL.MAST_CLUSTER_ACTIVE,
                                MAST_LOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(stateCode, districtCode, blockCode, 0, 0, 0, 0, 0, "HC", PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "U" : CL.MAST_LOCK_STATUS),
                                BL.MAST_BLOCK_NAME,
                                BL.MAST_DISTRICT_CODE,
                                DT.MAST_DISTRICT_NAME,
                                DT.MAST_STATE_CODE,
                                ST.MAST_STATE_NAME,
                                TotalPopulation = (from cl in dbContext.MASTER_CLUSTER
                                                   join cld in dbContext.MASTER_CLUSTER_HABITATIONS
                                                   on cl.MAST_CLUSTER_CODE equals cld.MAST_CLUSTER_CODE
                                                   join hab in dbContext.MASTER_HABITATIONS
                                                   on cld.MAST_HAB_CODE equals hab.MAST_HAB_CODE
                                                   join habd in dbContext.MASTER_HABITATIONS_DETAILS
                                                   on hab.MAST_HAB_CODE equals habd.MAST_HAB_CODE
                                                   where cld.MAST_CLUSTER_CODE == CL.MAST_CLUSTER_CODE
                                                   select new
                                                   {
                                                       habd.MAST_HAB_TOT_POP
                                                   }).Sum(a => a.MAST_HAB_TOT_POP),
                                TotalSCSTPopulation = (from cl in dbContext.MASTER_CLUSTER
                                                       join cld in dbContext.MASTER_CLUSTER_HABITATIONS
                                                       on cl.MAST_CLUSTER_CODE equals cld.MAST_CLUSTER_CODE
                                                       join hab in dbContext.MASTER_HABITATIONS
                                                       on cld.MAST_HAB_CODE equals hab.MAST_HAB_CODE
                                                       join habd in dbContext.MASTER_HABITATIONS_DETAILS
                                                       on hab.MAST_HAB_CODE equals habd.MAST_HAB_CODE
                                                       where cld.MAST_CLUSTER_CODE == CL.MAST_CLUSTER_CODE
                                                       select new
                                                       {
                                                           habd.MAST_HAB_SCST_POP
                                                       }).Sum(a => a.MAST_HAB_SCST_POP)




                            });

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_CLUSTER_NAME":
                                list = list.OrderBy(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                list = list.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                list = list.OrderBy(x => x.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                            default:
                                list = list.OrderBy(x => x.MAST_DISTRICT_NAME).ThenBy(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_CLUSTER_NAME":
                                list = list.OrderByDescending(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                list = list.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                list = list.OrderByDescending(x => x.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_DISTRICT_NAME).ThenBy(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(clusterDetails => new
                {
                    clusterDetails.MAST_CLUSTER_CODE,
                    clusterDetails.MAST_CLUSTER_NAME,
                    clusterDetails.MAST_BLOCK_CODE,
                    clusterDetails.MAST_PMGSY_SCHEME,
                    clusterDetails.MAST_CLUSTER_ACTIVE,
                    clusterDetails.MAST_LOCK_STATUS,
                    clusterDetails.MAST_BLOCK_NAME,
                    clusterDetails.MAST_DISTRICT_CODE,
                    clusterDetails.MAST_DISTRICT_NAME,
                    clusterDetails.MAST_STATE_CODE,
                    clusterDetails.MAST_STATE_NAME,
                    clusterDetails.TotalSCSTPopulation,
                    clusterDetails.TotalPopulation,

                }).ToArray();

                //string res = result.Select(x => x.MAST_AGENCY_TYPE.ToString()).FirstOrDefault();

                return result.Select(clusterDetails => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString().Trim() }),

                    cell = new[]{
                    clusterDetails.MAST_STATE_NAME,
                    clusterDetails.MAST_DISTRICT_NAME,
                    clusterDetails.MAST_BLOCK_NAME,
                    clusterDetails.MAST_CLUSTER_NAME == null?"NA":clusterDetails.MAST_CLUSTER_NAME.ToString(),
                    dbContext.MASTER_CLUSTER_HABITATIONS.Count(a=>a.MAST_CLUSTER_CODE==clusterDetails.MAST_CLUSTER_CODE).ToString(),
                    clusterDetails.TotalPopulation.ToString(),
                    clusterDetails.TotalSCSTPopulation.ToString(),
                    clusterDetails.MAST_CLUSTER_ACTIVE=="Y"?"Yes":"No",
                    clusterDetails.MAST_LOCK_STATUS=="U"?("<center><table><tr>  <td  style='border:none'><span class='ui-icon 	ui-icon-unlocked' title='Edit Cluster Name Details' onClick ='EditClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):(clusterDetails.MAST_LOCK_STATUS=="N")  ? ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-pencil' title='Edit Cluster Name Details' onClick ='EditClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"),
                    clusterDetails.MAST_LOCK_STATUS=="U"?("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-unlocked' title='Delete Cluster Details' onClick ='DeleteClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):(clusterDetails.MAST_LOCK_STATUS=="N")  ? ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-trash' title='Delete Cluster Details' onClick ='DeleteClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"),
                    ("<center><table><tr> <td  style='border:none'><span class='ui-icon ui-icon-zoomin' title='View Cluster Habitation Details' onClick ='ViewClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>")

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteClusterDAL(int clusterCode, ref string message)
        {
            dbContext = new PMGSYEntities();

            using (TransactionScope objScope = new TransactionScope())
            {
                try
                {
                    MASTER_CLUSTER clusterDetail = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();



                    List<int> PrimeIdList = null;
                    PrimeIdList = (from item in dbContext.MASTER_CLUSTER_HABITATIONS
                                   where item.MAST_CLUSTER_CODE == clusterCode
                                   select item.MAST_HAB_CODE).ToList();
                    foreach (var PrimeId in PrimeIdList)
                    {

                        var cluster_habitation = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_HAB_CODE == PrimeId).FirstOrDefault();
                        if (cluster_habitation != null)
                        {
                            //added by abhishek kamble 27-nov-2013
                            cluster_habitation.USERID = PMGSYSession.Current.UserId;
                            cluster_habitation.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(cluster_habitation).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();

                            dbContext.MASTER_CLUSTER_HABITATIONS.Remove(cluster_habitation);
                            dbContext.SaveChanges();

                        }
                    }
                    clusterDetail.USERID = PMGSYSession.Current.UserId;
                    clusterDetail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(clusterDetail).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    dbContext.MASTER_CLUSTER.Remove(clusterDetail);
                    dbContext.SaveChanges();
                    message = "Cluster details deleted successfully.";
                    objScope.Complete();
                    return true;
                }
                catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    message = "You can not delete this details.";
                    return false;
                }

                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        public bool DeleteClusterHabitationDAL(int clusterCode, int habCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CLUSTER_HABITATIONS admin = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_CLUSTER_CODE == clusterCode && m.MAST_HAB_CODE == habCode).FirstOrDefault();



                //Added by abhishek kamble 27-nov-2013
                admin.USERID = PMGSYSession.Current.UserId;
                admin.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(admin).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.MASTER_CLUSTER_HABITATIONS.Remove(admin);
                dbContext.SaveChanges();
                message = "Cluster Habitation deleted successfully.";
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditClusterNameHabiationDAL(MasterClusterEditViewModel clusterModel, ref string message)
        {
            try
            {
                int recordCount = 0;
                int clusterCode = 0;
                dbContext = new PMGSYEntities();
                encryptedParameters = clusterModel.EncryptedClusterCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                clusterCode = Convert.ToInt32(decryptedParameters["ClusterCode"].ToString());
                var habName = dbContext.MASTER_HABITATIONS.Where(a => a.MAST_HAB_CODE == clusterModel.Hab_Code).Select(a => a.MAST_HAB_NAME).FirstOrDefault();
                recordCount = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_NAME.ToUpper() == habName.ToUpper() && m.MAST_CLUSTER_CODE != clusterCode).Count();
                if (recordCount > 0)
                {
                    message = "Cluster details with name '" + clusterModel.ClusterName + "',already exist.";
                    return false;
                }
                MASTER_CLUSTER cluster = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();
                cluster.MAST_CLUSTER_NAME = habName;
                cluster.USERID = PMGSYSession.Current.UserId;
                cluster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(cluster).State = System.Data.Entity.EntityState.Modified;

                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterClusterEditViewModel GetClusterDetailsDAL(int clusterCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CLUSTER cluster = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();

                MasterClusterEditViewModel clusterViewModel = null;
                clusterViewModel = new MasterClusterEditViewModel();
                clusterViewModel.ClusterName = cluster.MAST_CLUSTER_NAME;
                clusterViewModel.EncryptedClusterCode = URLEncrypt.EncryptParameters1(new string[] { "ClusterCode=" + cluster.MAST_CLUSTER_CODE.ToString().Trim() });
                var clusterList = (from hab in dbContext.MASTER_HABITATIONS
                                   join cld in dbContext.MASTER_CLUSTER_HABITATIONS
                                    on hab.MAST_HAB_CODE equals cld.MAST_HAB_CODE
                                   join cl in dbContext.MASTER_CLUSTER
                                    on cld.MAST_CLUSTER_CODE equals cl.MAST_CLUSTER_CODE
                                   where cl.MAST_CLUSTER_CODE == clusterCode
                                   select new
                                   {
                                       hab.MAST_HAB_NAME,
                                       hab.MAST_HAB_CODE
                                   }).ToList();
                List<SelectListItem> lstHabiation = new List<SelectListItem>();

                foreach (var item in clusterList)
                {

                    lstHabiation.Add(new SelectListItem { Value = item.MAST_HAB_CODE.ToString().Trim(), Text = item.MAST_HAB_NAME });
                }
                lstHabiation.Insert(0, (new SelectListItem { Text = "Select Habitation", Value = "0", Selected = true }));
                clusterViewModel.HabitationList = lstHabiation;
                return clusterViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterClusterViewEditHabiationModel GetClusterHabsDetailsDAL(int clusterCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = (
                                  from CL in dbContext.MASTER_CLUSTER
                                  join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                  on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                  join BL in dbContext.MASTER_BLOCK
                                  on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                                  join HB in dbContext.MASTER_HABITATIONS
                                  on CLH.MAST_HAB_CODE equals HB.MAST_HAB_CODE
                                  join HBDTL in dbContext.MASTER_HABITATIONS_DETAILS
                                  on HB.MAST_HAB_CODE equals HBDTL.MAST_HAB_CODE
                                  join VL in dbContext.MASTER_VILLAGE
                                  on HB.MAST_VILLAGE_CODE equals VL.MAST_VILLAGE_CODE
                                  join DT in dbContext.MASTER_DISTRICT
                                  on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                                  join ST in dbContext.MASTER_STATE
                                  on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                                  where
                                  CL.MAST_CLUSTER_CODE == clusterCode
                                  select new
                                  {
                                      CLH.MAST_HAB_CODE,
                                      HB.MAST_HAB_NAME,
                                      HBDTL.MAST_HAB_TOT_POP,
                                      HBDTL.MAST_HAB_SCST_POP,
                                      HBDTL.MAST_HAB_CONNECTED,
                                      HB.MAST_HAB_STATUS,
                                      VL.MAST_VILLAGE_NAME,
                                      CL.MAST_LOCK_STATUS,
                                      CL.MAST_CLUSTER_CODE,
                                      CL.MAST_CLUSTER_NAME,
                                      ST.MAST_STATE_NAME,
                                      ST.MAST_STATE_CODE,
                                      DT.MAST_DISTRICT_NAME,
                                      DT.MAST_DISTRICT_CODE,
                                      BL.MAST_BLOCK_NAME,
                                      BL.MAST_BLOCK_CODE,
                                      Mast_UNLOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(ST.MAST_STATE_CODE, DT.MAST_DISTRICT_CODE, BL.MAST_BLOCK_CODE, 0, 0, 0, 0, 0, "HC", PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "U" : "L"),

                                  }
                                   ).ToList();

                MasterClusterViewEditHabiationModel clusterViewModel = null;
                clusterViewModel = new MasterClusterViewEditHabiationModel();
                clusterViewModel.ClusterName = list.Select(a => a.MAST_CLUSTER_NAME).FirstOrDefault();
                clusterViewModel.EncryptedClusterCode = URLEncrypt.EncryptParameters1(new string[] { "ClusterCode=" + list.Select(a => a.MAST_CLUSTER_CODE).FirstOrDefault().ToString().Trim() });
                clusterViewModel.StatName = list.Select(a => a.MAST_STATE_NAME).FirstOrDefault();
                clusterViewModel.StatCode = list.Select(a => a.MAST_STATE_CODE).FirstOrDefault();
                clusterViewModel.DistrictName = list.Select(a => a.MAST_DISTRICT_NAME).FirstOrDefault();
                clusterViewModel.DistrictCode = list.Select(a => a.MAST_DISTRICT_CODE).FirstOrDefault();
                clusterViewModel.BlockName = list.Select(a => a.MAST_BLOCK_NAME).FirstOrDefault();
                clusterViewModel.BlockCode = list.Select(a => a.MAST_BLOCK_CODE).FirstOrDefault();
                clusterViewModel.FinalizeLockStatus = list.Select(a => a.MAST_LOCK_STATUS).FirstOrDefault();
                clusterViewModel.IMS_UNLOCK_Status = list.Select(a => a.Mast_UNLOCK_STATUS).FirstOrDefault();

                return clusterViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetHabitationListClusterDAL(int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                int Year = PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011;
                var clusterHabs = (
                                   from CL in dbContext.MASTER_CLUSTER
                                   join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                   on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                   join BL in dbContext.MASTER_BLOCK
                                   on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                                   join HB in dbContext.MASTER_HABITATIONS
                                   on CLH.MAST_HAB_CODE equals HB.MAST_HAB_CODE
                                   join HBDTL in dbContext.MASTER_HABITATIONS_DETAILS
                                   on HB.MAST_HAB_CODE equals HBDTL.MAST_HAB_CODE
                                   join VL in dbContext.MASTER_VILLAGE
                                   on HB.MAST_VILLAGE_CODE equals VL.MAST_VILLAGE_CODE
                                   join DT in dbContext.MASTER_DISTRICT
                                   on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                                   join ST in dbContext.MASTER_STATE
                                   on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                                   where
                                   ST.MAST_STATE_CODE == stateCode &&
                                   DT.MAST_DISTRICT_CODE == districtCode &&
                                   BL.MAST_BLOCK_CODE == blockCode &&
                                   CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme

                                   select new
                                   {
                                       CLH.MAST_HAB_CODE
                                   }
                                    ).Distinct();

                //var clusterHabs = (from beniffitedHab in dbContext.MASTER_CLUSTER_HABITATIONS select new { beniffitedHab.MAST_HAB_CODE }).Distinct();

                //  var villageCodes = (blockCode == 0 ? (from villageDetails in dbContext.MASTER_VILLAGE select new { villageDetails.MAST_VILLAGE_CODE }) : (from villageDetails in dbContext.MASTER_VILLAGE where villageDetails.MAST_BLOCK_CODE == blockCode select new { villageDetails.MAST_VILLAGE_CODE })).Distinct();

                var list = (from item in dbContext.MASTER_HABITATIONS
                            join habDetails in dbContext.MASTER_HABITATIONS_DETAILS
                            on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                            join village in dbContext.MASTER_VILLAGE
                            on item.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                            where !clusterHabs.Any(s => s.MAST_HAB_CODE == item.MAST_HAB_CODE) &&
                             item.MAST_HABITATION_ACTIVE == "Y" &&
                             village.MAST_VILLAGE_ACTIVE == "Y" &&
                             village.MAST_BLOCK_CODE == blockCode &&
                             (habDetails.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)) &&
                            // villageCodes.Any(v => v.MAST_VILLAGE_CODE == item.MAST_VILLAGE_CODE)
                            (item.MAST_HAB_STATUS != "F" || item.MAST_HAB_STATUS != "S")
                            select new
                            {
                                item.MAST_HAB_NAME,
                                item.MAST_HAB_CODE,
                                habDetails.MAST_HAB_TOT_POP,
                                habDetails.MAST_HAB_SCST_POP,
                                habDetails.MAST_HAB_CONNECTED,
                                item.MAST_HAB_STATUS,
                                village.MAST_VILLAGE_NAME
                            }).ToList();

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "HabitationName":
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderBy(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderBy(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "VillageName":
                                list = list.OrderBy(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "VillageName":
                                list = list.OrderByDescending(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HabitationName":
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderByDescending(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderByDescending(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                          habs.MAST_HAB_NAME,
                          habs.MAST_VILLAGE_NAME.ToString(),
                         habs.MAST_HAB_CONNECTED.ToString()=="Y"?"Yes":"No",
                         habs.MAST_HAB_TOT_POP.ToString(),
                         habs.MAST_HAB_SCST_POP.ToString(),                        
                        // habs.MAST_HAB_NAME.ToString()   
                        "<center><input type='radio' name='radio' value='" + habs.MAST_HAB_NAME + "' id='"+URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() })+"' disabled = true /> <center/>"
                       //  habs.MAST_HAB_STATUS.ToString()=="U"?"Unconnected":(habs.MAST_HAB_STATUS=="S"?"State Connected":(habs.MAST_HAB_STATUS=="F"?"Not Feasible":""))
                      
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetClusterHabitationListByClusterCodeDAL(int clusterCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                var list = (
                                   from CL in dbContext.MASTER_CLUSTER
                                   join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                   on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                   join BL in dbContext.MASTER_BLOCK
                                   on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                                   join HB in dbContext.MASTER_HABITATIONS
                                   on CLH.MAST_HAB_CODE equals HB.MAST_HAB_CODE
                                   join HBDTL in dbContext.MASTER_HABITATIONS_DETAILS
                                   on HB.MAST_HAB_CODE equals HBDTL.MAST_HAB_CODE
                                   join VL in dbContext.MASTER_VILLAGE
                                   on HB.MAST_VILLAGE_CODE equals VL.MAST_VILLAGE_CODE
                                   join DT in dbContext.MASTER_DISTRICT
                                   on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                                   join ST in dbContext.MASTER_STATE
                                   on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                                   where
                                   CL.MAST_CLUSTER_CODE == clusterCode &&
                                   CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                                   HBDTL.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)

                                   select new
                                   {
                                       CLH.MAST_HAB_CODE,
                                       HB.MAST_HAB_NAME,
                                       HBDTL.MAST_HAB_TOT_POP,
                                       HBDTL.MAST_HAB_SCST_POP,
                                       HBDTL.MAST_HAB_CONNECTED,
                                       HB.MAST_HAB_STATUS,
                                       VL.MAST_VILLAGE_NAME,
                                       MAST_LOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(ST.MAST_STATE_CODE, DT.MAST_DISTRICT_CODE, BL.MAST_BLOCK_CODE, 0, 0, 0, 0, 0, "HC", PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "U" : CL.MAST_LOCK_STATUS),
                                       CL.MAST_CLUSTER_CODE,
                                       CL.MAST_CLUSTER_NAME
                                   }
                                    ).ToList();



                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "HabitationName":
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderBy(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderBy(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "VillageName":
                                list = list.OrderBy(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "VillageName":
                                list = list.OrderByDescending(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HabitationName":
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderByDescending(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderByDescending(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                        habs.MAST_HAB_NAME.ToString(),
                        habs.MAST_VILLAGE_NAME.ToString(),
                         habs.MAST_HAB_CONNECTED.ToString()=="Y"?"Yes":"No",
                         habs.MAST_HAB_TOT_POP.ToString(),
                         habs.MAST_HAB_SCST_POP.ToString(),
                         dbContext.MASTER_CLUSTER.Any(a=>a.MAST_CLUSTER_NAME==habs.MAST_HAB_NAME && a.MAST_CLUSTER_CODE==habs.MAST_CLUSTER_CODE)?"-": habs.MAST_LOCK_STATUS=="U"?("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-unlocked' title='Delete Cluster Habitation Details' onClick ='DeleteClusterHabiationDetails(\"" + URLEncrypt.EncryptParameters1(new string[]{"ClusterCode =" + habs.MAST_CLUSTER_CODE.ToString().Trim(),"HabCode =" + habs.MAST_HAB_CODE.ToString().Trim().Replace("/","")}) + "\");'></span></td></tr></table></center>"):(habs.MAST_LOCK_STATUS=="N")  ? ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-trash' title='Delete Cluster Habitation Details' onClick ='DeleteClusterHabiationDetails(\"" + URLEncrypt.EncryptParameters1(new string[]{"ClusterCode =" + habs.MAST_CLUSTER_CODE.ToString().Trim(),"HabCode =" + habs.MAST_HAB_CODE.ToString().Trim().Replace("/","")}) + "\");'></span></td></tr></table></center>"):("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"),

                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetAddHabitationListIntoClusterDAL(int clusterCode, int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                var clusterHabs = (
                                   from CL in dbContext.MASTER_CLUSTER
                                   join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                   on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                   join BL in dbContext.MASTER_BLOCK
                                   on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                                   join HB in dbContext.MASTER_HABITATIONS
                                   on CLH.MAST_HAB_CODE equals HB.MAST_HAB_CODE
                                   join HBDTL in dbContext.MASTER_HABITATIONS_DETAILS
                                   on HB.MAST_HAB_CODE equals HBDTL.MAST_HAB_CODE
                                   join VL in dbContext.MASTER_VILLAGE
                                   on HB.MAST_VILLAGE_CODE equals VL.MAST_VILLAGE_CODE
                                   join DT in dbContext.MASTER_DISTRICT
                                   on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                                   join ST in dbContext.MASTER_STATE
                                   on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                                   where
                                   CL.MAST_BLOCK_CODE == blockCode &&
                                   CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                   select new
                                   {
                                       CLH.MAST_HAB_CODE
                                   }
                                    ).Distinct();

                //var clusterHabs = (from beniffitedHab in dbContext.MASTER_CLUSTER_HABITATIONS select new { beniffitedHab.MAST_HAB_CODE }).Distinct();

                //  var villageCodes = (blockCode == 0 ? (from villageDetails in dbContext.MASTER_VILLAGE select new { villageDetails.MAST_VILLAGE_CODE }) : (from villageDetails in dbContext.MASTER_VILLAGE where villageDetails.MAST_BLOCK_CODE == blockCode select new { villageDetails.MAST_VILLAGE_CODE })).Distinct();

                var list = (from item in dbContext.MASTER_HABITATIONS
                            join habDetails in dbContext.MASTER_HABITATIONS_DETAILS
                            on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                            join village in dbContext.MASTER_VILLAGE
                            on item.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                            where !clusterHabs.Any(s => s.MAST_HAB_CODE == item.MAST_HAB_CODE) &&
                             item.MAST_HABITATION_ACTIVE == "Y" &&
                             village.MAST_VILLAGE_ACTIVE == "Y" &&
                             village.MAST_BLOCK_CODE == blockCode &&
                            (habDetails.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)) &&
                            (item.MAST_HAB_STATUS != "F" || item.MAST_HAB_STATUS != "S")
                            select new
                            {
                                item.MAST_HAB_NAME,
                                item.MAST_HAB_CODE,
                                habDetails.MAST_HAB_TOT_POP,
                                habDetails.MAST_HAB_SCST_POP,
                                habDetails.MAST_HAB_CONNECTED,
                                item.MAST_HAB_STATUS,
                                village.MAST_VILLAGE_NAME
                            }).ToList();

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "HabitationName":
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderBy(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderBy(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "VillageName":
                                list = list.OrderBy(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "VillageName":
                                list = list.OrderByDescending(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HabitationName":
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderByDescending(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderByDescending(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                          habs.MAST_HAB_NAME,
                         habs.MAST_VILLAGE_NAME.ToString(),
                         habs.MAST_HAB_CONNECTED.ToString()=="Y"?"Yes":"No",
                         habs.MAST_HAB_TOT_POP.ToString(),
                         habs.MAST_HAB_SCST_POP.ToString(),                        
                    //    "<center><input type='radio' name='radio' value='" + habs.MAST_HAB_NAME + "' id='"+URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() })+"' disabled = true /> <center/>"
                       
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddClusterHabitationDAL(string encryptedHabCodeSendbyCheckBoxCheck, string habitationName, int blockCode)
        {
            dbContext = new PMGSYEntities();
            string[] encryptedParameters = null;
            Dictionary<string, string> decryptedParameters = null;
            using (TransactionScope objScope = new TransactionScope())
            {
                try
                {

                    String[] habCodes = null;

                    int habCode = 0;
                    MASTER_CLUSTER clusterDetails = new MASTER_CLUSTER();
                    int clusterId = 0;
                    // int? blockId = dbContext.MASTER_CLUSTER.Where(m => m.MAST_DISTRICT_CODE == master_block.MAST_DISTRICT_CODE).Max(s => (int?)s.MAST_BLOCK_ID);
                    if (dbContext.MASTER_CLUSTER.Any())
                    {
                        clusterId = dbContext.MASTER_CLUSTER.Max(s => (int)s.MAST_CLUSTER_CODE);
                    }

                    if (clusterId == 0)
                    {
                        clusterId = 1;
                    }
                    else
                    {
                        clusterId = clusterId + 1;
                    }
                    clusterDetails.MAST_CLUSTER_CODE = clusterId;
                    clusterDetails.MAST_CLUSTER_NAME = habitationName;
                    clusterDetails.MAST_BLOCK_CODE = blockCode;
                    clusterDetails.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                    clusterDetails.MAST_LOCK_STATUS = "N";
                    clusterDetails.MAST_CLUSTER_ACTIVE = "Y";
                    clusterDetails.USERID = PMGSYSession.Current.UserId;
                    clusterDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.MASTER_CLUSTER.Add(clusterDetails);
                    dbContext.SaveChanges();

                    habCodes = encryptedHabCodeSendbyCheckBoxCheck.Split(',');
                    if (habCodes.Count() == 0)
                    {
                        return false;
                    }
                    foreach (String item in habCodes)
                    {
                        encryptedParameters = null;
                        encryptedParameters = item.Split('/');
                        decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                        habCode = Convert.ToInt32(decryptedParameters["HabCode"].ToString());

                        // var habDetail = dbContext.MASTER_HABITATIONS_DETAILS.Where(hb => hb.MAST_HAB_CODE == habCode && hb.MAST_YEAR == 2001).Select(m => m.MAST_HAB_CONNECTED).FirstOrDefault();
                        MASTER_CLUSTER_HABITATIONS clusterHabitation = new MASTER_CLUSTER_HABITATIONS();
                        clusterHabitation.MAST_CLUSTER_CODE = clusterId;
                        clusterHabitation.MAST_HAB_CODE = habCode;
                        clusterHabitation.USERID = PMGSYSession.Current.UserId;
                        clusterHabitation.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.MASTER_CLUSTER_HABITATIONS.Add(clusterHabitation);
                        dbContext.SaveChanges();

                    }
                    objScope.Complete();
                    return true;
                }
                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        public bool UpdateClusterHabitationDAL(string encryptedHabCodeSendbyCheckBoxCheck, string habitationName, int clusterCode)
        {
            dbContext = new PMGSYEntities();
            string[] encryptedParameters = null;
            Dictionary<string, string> decryptedParameters = null;
            using (TransactionScope objScope = new TransactionScope())
            {
                try
                {
                    String[] habCodes = null;
                    int habCode = 0;
                    if (dbContext.MASTER_CLUSTER.Any(a => a.MAST_CLUSTER_CODE == clusterCode))
                    {

                        habCodes = encryptedHabCodeSendbyCheckBoxCheck.Split(',');
                        if (habCodes.Count() == 0)
                        {
                            return false;
                        }

                        foreach (String item in habCodes)
                        {
                            encryptedParameters = null;
                            encryptedParameters = item.Split('/');
                            decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                            habCode = Convert.ToInt32(decryptedParameters["HabCode"].ToString());

                            // var habDetail = dbContext.MASTER_HABITATIONS_DETAILS.Where(hb => hb.MAST_HAB_CODE == habCode && hb.MAST_YEAR == 2001).Select(m => m.MAST_HAB_CONNECTED).FirstOrDefault();
                            MASTER_CLUSTER_HABITATIONS clusterHabitation = new MASTER_CLUSTER_HABITATIONS();
                            clusterHabitation.MAST_CLUSTER_CODE = clusterCode;
                            clusterHabitation.MAST_HAB_CODE = habCode;
                            clusterHabitation.USERID = PMGSYSession.Current.UserId;
                            clusterHabitation.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                            dbContext.MASTER_CLUSTER_HABITATIONS.Add(clusterHabitation);
                            dbContext.SaveChanges();

                        }
                    }
                    else
                    {
                        return false;
                    }
                    objScope.Complete();
                    return true;

                }
                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        public bool FinalizeClusterHabitationDAL(MasterClusterViewEditHabiationModel clusterModel, ref string message)
        {
            try
            {
                int clusterCode = 0;
                dbContext = new PMGSYEntities();
                encryptedParameters = clusterModel.EncryptedClusterCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                clusterCode = Convert.ToInt32(decryptedParameters["ClusterCode"].ToString());

                MASTER_CLUSTER cluster = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();
                cluster.MAST_LOCK_STATUS = "Y";
                cluster.USERID = PMGSYSession.Current.UserId;
                cluster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(cluster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region Cluster Core Network Master

        public Array ListClusterCNDAL(int stateCode, int districtCode, int blockCode, string activeStatus, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();

                var list = (from CL in dbContext.MASTER_CLUSTER
                            join BL in dbContext.MASTER_BLOCK
                            on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                            join DT in dbContext.MASTER_DISTRICT
                            on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                            join ST in dbContext.MASTER_STATE
                            on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                            where
                                 (stateCode == 0 ? 1 : ST.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                                 (districtCode == 0 ? 1 : DT.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode) &&
                                 (blockCode == 0 ? 1 : BL.MAST_BLOCK_CODE) == (blockCode == 0 ? 1 : blockCode) &&
                                 (activeStatus == "%" ? "%" : CL.MAST_CLUSTER_ACTIVE) == (activeStatus == "%" ? "%" : activeStatus)
                            select new
                            {
                                CL.MAST_CLUSTER_CODE,
                                CL.MAST_CLUSTER_NAME,
                                CL.MAST_BLOCK_CODE,
                                CL.MAST_PMGSY_SCHEME,
                                CL.MAST_CLUSTER_ACTIVE,
                                MAST_LOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(stateCode, districtCode, blockCode, 0, 0, 0, 0, 0, "HC", PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "U" : CL.MAST_LOCK_STATUS),
                                BL.MAST_BLOCK_NAME,
                                BL.MAST_DISTRICT_CODE,
                                DT.MAST_DISTRICT_NAME,
                                DT.MAST_STATE_CODE,
                                ST.MAST_STATE_NAME,
                                TotalPopulation = (from cl in dbContext.MASTER_CLUSTER
                                                   join cld in dbContext.MASTER_CLUSTER_HABITATIONS
                                                   on cl.MAST_CLUSTER_CODE equals cld.MAST_CLUSTER_CODE
                                                   join hab in dbContext.MASTER_HABITATIONS
                                                   on cld.MAST_HAB_CODE equals hab.MAST_HAB_CODE
                                                   join habd in dbContext.MASTER_HABITATIONS_DETAILS
                                                   on hab.MAST_HAB_CODE equals habd.MAST_HAB_CODE
                                                   where cld.MAST_CLUSTER_CODE == CL.MAST_CLUSTER_CODE
                                                   select new
                                                   {
                                                       habd.MAST_HAB_TOT_POP
                                                   }).Sum(a => a.MAST_HAB_TOT_POP),
                                TotalSCSTPopulation = (from cl in dbContext.MASTER_CLUSTER
                                                       join cld in dbContext.MASTER_CLUSTER_HABITATIONS
                                                       on cl.MAST_CLUSTER_CODE equals cld.MAST_CLUSTER_CODE
                                                       join hab in dbContext.MASTER_HABITATIONS
                                                       on cld.MAST_HAB_CODE equals hab.MAST_HAB_CODE
                                                       join habd in dbContext.MASTER_HABITATIONS_DETAILS
                                                       on hab.MAST_HAB_CODE equals habd.MAST_HAB_CODE
                                                       where cld.MAST_CLUSTER_CODE == CL.MAST_CLUSTER_CODE
                                                       select new
                                                       {
                                                           habd.MAST_HAB_SCST_POP
                                                       }).Sum(a => a.MAST_HAB_SCST_POP)




                            });

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_CLUSTER_NAME":
                                list = list.OrderBy(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                list = list.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                list = list.OrderBy(x => x.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MAST_DISTRICT_NAME).ThenBy(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_CLUSTER_NAME":
                                list = list.OrderByDescending(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                list = list.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                list = list.OrderByDescending(x => x.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_DISTRICT_NAME).ThenBy(x => x.MAST_CLUSTER_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(clusterDetails => new
                {
                    clusterDetails.MAST_CLUSTER_CODE,
                    clusterDetails.MAST_CLUSTER_NAME,
                    clusterDetails.MAST_BLOCK_CODE,
                    clusterDetails.MAST_PMGSY_SCHEME,
                    clusterDetails.MAST_CLUSTER_ACTIVE,
                    clusterDetails.MAST_LOCK_STATUS,
                    clusterDetails.MAST_BLOCK_NAME,
                    clusterDetails.MAST_DISTRICT_CODE,
                    clusterDetails.MAST_DISTRICT_NAME,
                    clusterDetails.MAST_STATE_CODE,
                    clusterDetails.MAST_STATE_NAME,
                    clusterDetails.TotalSCSTPopulation,
                    clusterDetails.TotalPopulation,

                }).ToArray();

                //string res = result.Select(x => x.MAST_AGENCY_TYPE.ToString()).FirstOrDefault();

                return result.Select(clusterDetails => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString().Trim() }),

                    cell = new[]{
                    clusterDetails.MAST_STATE_NAME,
                    clusterDetails.MAST_DISTRICT_NAME,
                    clusterDetails.MAST_BLOCK_NAME,
                    clusterDetails.MAST_CLUSTER_NAME == null?"NA":clusterDetails.MAST_CLUSTER_NAME.ToString(),
                    dbContext.MASTER_CLUSTER_HABITATIONS.Count(a=>a.MAST_CLUSTER_CODE==clusterDetails.MAST_CLUSTER_CODE).ToString(),
                    clusterDetails.TotalPopulation.ToString(),
                    clusterDetails.TotalSCSTPopulation.ToString(),
                    clusterDetails.MAST_CLUSTER_ACTIVE=="Y"?"Yes":"No",
                    clusterDetails.MAST_LOCK_STATUS=="U"?("<center><table><tr>  <td  style='border:none'><span class='ui-icon 	ui-icon-unlocked' title='Edit Cluster Name Details' onClick ='EditClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):(clusterDetails.MAST_LOCK_STATUS=="N")  ? ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-pencil' title='Edit Cluster Name Details' onClick ='EditClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"),
                    clusterDetails.MAST_LOCK_STATUS=="U"?("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-unlocked' title='Delete Cluster Details' onClick ='DeleteClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):(clusterDetails.MAST_LOCK_STATUS=="N")  ? ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-trash' title='Delete Cluster Details' onClick ='DeleteClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>"):("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"),
                    ("<center><table><tr> <td  style='border:none'><span class='ui-icon ui-icon-zoomin' title='View Cluster Habitation Details' onClick ='ViewClusterDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "ClusterCode =" + clusterDetails.MAST_CLUSTER_CODE.ToString()}) + "\");'></span></td></tr></table></center>")

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteClusterCNDAL(int clusterCode, ref string message)
        {
            dbContext = new PMGSYEntities();

            using (TransactionScope objScope = new TransactionScope())
            {
                try
                {
                    MASTER_CLUSTER clusterDetail = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();



                    List<int> PrimeIdList = null;
                    PrimeIdList = (from item in dbContext.MASTER_CLUSTER_HABITATIONS
                                   where item.MAST_CLUSTER_CODE == clusterCode
                                   select item.MAST_HAB_CODE).ToList();
                    foreach (var PrimeId in PrimeIdList)
                    {

                        var cluster_habitation = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_HAB_CODE == PrimeId).FirstOrDefault();
                        if (cluster_habitation != null)
                        {
                            //added by abhishek kamble 27-nov-2013
                            cluster_habitation.USERID = PMGSYSession.Current.UserId;
                            cluster_habitation.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(cluster_habitation).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();

                            dbContext.MASTER_CLUSTER_HABITATIONS.Remove(cluster_habitation);
                            dbContext.SaveChanges();

                        }
                    }
                    clusterDetail.USERID = PMGSYSession.Current.UserId;
                    clusterDetail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(clusterDetail).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    dbContext.MASTER_CLUSTER.Remove(clusterDetail);
                    dbContext.SaveChanges();
                    message = "Cluster details deleted successfully.";
                    objScope.Complete();
                    return true;
                }
                catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    message = "You can not delete this details.";
                    return false;
                }

                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        public bool DeleteClusterCNHabitationDAL(int clusterCode, int habCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CLUSTER_HABITATIONS admin = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_CLUSTER_CODE == clusterCode && m.MAST_HAB_CODE == habCode).FirstOrDefault();



                //Added by abhishek kamble 27-nov-2013
                admin.USERID = PMGSYSession.Current.UserId;
                admin.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(admin).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.MASTER_CLUSTER_HABITATIONS.Remove(admin);
                dbContext.SaveChanges();
                message = "Cluster Habitation deleted successfully.";
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditClusterCNNameHabiationDAL(MasterClusterEditViewModel clusterModel, ref string message)
        {
            try
            {
                int recordCount = 0;
                int clusterCode = 0;
                dbContext = new PMGSYEntities();
                encryptedParameters = clusterModel.EncryptedClusterCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                clusterCode = Convert.ToInt32(decryptedParameters["ClusterCode"].ToString());
                var habName = dbContext.MASTER_HABITATIONS.Where(a => a.MAST_HAB_CODE == clusterModel.Hab_Code).Select(a => a.MAST_HAB_NAME).FirstOrDefault();
                recordCount = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_NAME.ToUpper() == habName.ToUpper() && m.MAST_CLUSTER_CODE != clusterCode).Count();
                if (recordCount > 0)
                {
                    message = "Cluster details with name '" + clusterModel.ClusterName + "',already exist.";
                    return false;
                }
                MASTER_CLUSTER cluster = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();
                cluster.MAST_CLUSTER_NAME = habName;
                cluster.USERID = PMGSYSession.Current.UserId;
                cluster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(cluster).State = System.Data.Entity.EntityState.Modified;

                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterClusterEditViewModel GetClusterCNDetailsDAL(int clusterCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MASTER_CLUSTER cluster = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();

                MasterClusterEditViewModel clusterViewModel = null;
                clusterViewModel = new MasterClusterEditViewModel();
                clusterViewModel.ClusterName = cluster.MAST_CLUSTER_NAME;
                clusterViewModel.EncryptedClusterCode = URLEncrypt.EncryptParameters1(new string[] { "ClusterCode=" + cluster.MAST_CLUSTER_CODE.ToString().Trim() });
                var clusterList = (from hab in dbContext.MASTER_HABITATIONS
                                   join cld in dbContext.MASTER_CLUSTER_HABITATIONS
                                    on hab.MAST_HAB_CODE equals cld.MAST_HAB_CODE
                                   join cl in dbContext.MASTER_CLUSTER
                                    on cld.MAST_CLUSTER_CODE equals cl.MAST_CLUSTER_CODE
                                   where cl.MAST_CLUSTER_CODE == clusterCode
                                   select new
                                   {
                                       hab.MAST_HAB_NAME,
                                       hab.MAST_HAB_CODE
                                   }).ToList();
                List<SelectListItem> lstHabiation = new List<SelectListItem>();

                foreach (var item in clusterList)
                {

                    lstHabiation.Add(new SelectListItem { Value = item.MAST_HAB_CODE.ToString().Trim(), Text = item.MAST_HAB_NAME });
                }
                lstHabiation.Insert(0, (new SelectListItem { Text = "Select Habitation", Value = "0", Selected = true }));
                clusterViewModel.HabitationList = lstHabiation;
                return clusterViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MasterClusterViewEditHabiationModel GetClusterCNHabsDetailsDAL(int clusterCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = (
                                  from CL in dbContext.MASTER_CLUSTER
                                  join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                  on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                  join BL in dbContext.MASTER_BLOCK
                                  on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                                  join HB in dbContext.MASTER_HABITATIONS
                                  on CLH.MAST_HAB_CODE equals HB.MAST_HAB_CODE
                                  join HBDTL in dbContext.MASTER_HABITATIONS_DETAILS
                                  on HB.MAST_HAB_CODE equals HBDTL.MAST_HAB_CODE
                                  join VL in dbContext.MASTER_VILLAGE
                                  on HB.MAST_VILLAGE_CODE equals VL.MAST_VILLAGE_CODE
                                  join DT in dbContext.MASTER_DISTRICT
                                  on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                                  join ST in dbContext.MASTER_STATE
                                  on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                                  where
                                  CL.MAST_CLUSTER_CODE == clusterCode
                                  select new
                                  {
                                      CLH.MAST_HAB_CODE,
                                      HB.MAST_HAB_NAME,
                                      HBDTL.MAST_HAB_TOT_POP,
                                      HBDTL.MAST_HAB_SCST_POP,
                                      HBDTL.MAST_HAB_CONNECTED,
                                      HB.MAST_HAB_STATUS,
                                      VL.MAST_VILLAGE_NAME,
                                      CL.MAST_LOCK_STATUS,
                                      CL.MAST_CLUSTER_CODE,
                                      CL.MAST_CLUSTER_NAME,
                                      ST.MAST_STATE_NAME,
                                      ST.MAST_STATE_CODE,
                                      DT.MAST_DISTRICT_NAME,
                                      DT.MAST_DISTRICT_CODE,
                                      BL.MAST_BLOCK_NAME,
                                      BL.MAST_BLOCK_CODE,
                                      Mast_UNLOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(ST.MAST_STATE_CODE, DT.MAST_DISTRICT_CODE, BL.MAST_BLOCK_CODE, 0, 0, 0, 0, 0, "HC", PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "U" : "L"),

                                  }
                                   ).ToList();

                MasterClusterViewEditHabiationModel clusterViewModel = null;
                clusterViewModel = new MasterClusterViewEditHabiationModel();
                clusterViewModel.ClusterName = list.Select(a => a.MAST_CLUSTER_NAME).FirstOrDefault();
                clusterViewModel.EncryptedClusterCode = URLEncrypt.EncryptParameters1(new string[] { "ClusterCode=" + list.Select(a => a.MAST_CLUSTER_CODE).FirstOrDefault().ToString().Trim() });
                clusterViewModel.StatName = list.Select(a => a.MAST_STATE_NAME).FirstOrDefault();
                clusterViewModel.StatCode = list.Select(a => a.MAST_STATE_CODE).FirstOrDefault();
                clusterViewModel.DistrictName = list.Select(a => a.MAST_DISTRICT_NAME).FirstOrDefault();
                clusterViewModel.DistrictCode = list.Select(a => a.MAST_DISTRICT_CODE).FirstOrDefault();
                clusterViewModel.BlockName = list.Select(a => a.MAST_BLOCK_NAME).FirstOrDefault();
                clusterViewModel.BlockCode = list.Select(a => a.MAST_BLOCK_CODE).FirstOrDefault();
                clusterViewModel.FinalizeLockStatus = list.Select(a => a.MAST_LOCK_STATUS).FirstOrDefault();
                clusterViewModel.IMS_UNLOCK_Status = list.Select(a => a.Mast_UNLOCK_STATUS).FirstOrDefault();

                return clusterViewModel;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetCoreNetworkListClusterCNDAL(int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var list = (from plan in dbContext.PLAN_ROAD
                            join planHab in dbContext.PLAN_ROAD_HABITATION
                            on plan.PLAN_CN_ROAD_CODE equals planHab.PLAN_CN_ROAD_CODE
                            join item in dbContext.MASTER_HABITATIONS
                            on planHab.MAST_HAB_CODE equals item.MAST_HAB_CODE
                            join habDetails in dbContext.MASTER_HABITATIONS_DETAILS
                            on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                            join village in dbContext.MASTER_VILLAGE
                            on item.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                            where
                             //!clusterHabs.Any(s => s.MAST_HAB_CODE == planHab.MAST_HAB_CODE) &&
                             item.MAST_HABITATION_ACTIVE == "Y" &&
                             village.MAST_VILLAGE_ACTIVE == "Y" &&
                             village.MAST_BLOCK_CODE == blockCode &&
                             (habDetails.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)) &&
                            // villageCodes.Any(v => v.MAST_VILLAGE_CODE == item.MAST_VILLAGE_CODE)
                            (item.MAST_HAB_STATUS != "F" || item.MAST_HAB_STATUS != "S") &&
                            //(habDetails.MAST_HAB_TOT_POP <= 250) condition commented by Vikram for the case of Rajasthan -- change suggested by Srinivas sir on 02 Feb 2015
                            (dbContext.MASTER_STATE_CLUSTER.Any(m => m.MAST_STATE_CODE == plan.MAST_STATE_CODE) ? (habDetails.MAST_HAB_TOT_POP <= dbContext.MASTER_STATE_CLUSTER.Where(m => m.MAST_STATE_CODE == plan.MAST_STATE_CODE).Select(m => m.MAST_HAB_POPULATION).FirstOrDefault()) : (habDetails.MAST_HAB_TOT_POP <= 250)) && // new change done on 02 Feb 2015
                            plan.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                            select new
                            {
                                plan.PLAN_CN_ROAD_CODE,
                                plan.PLAN_CN_ROAD_NUMBER,
                                plan.PLAN_RD_NAME,
                                plan.PLAN_RD_ROUTE,
                                plan.PLAN_RD_LENGTH

                            }).Distinct().ToList();

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "PLAN_CN_ROAD_NUMBER":
                                list = list.OrderBy(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "PLAN_CN_ROAD_NUMBER":
                                list = list.OrderByDescending(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "RoadCode=" + habs.PLAN_CN_ROAD_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                         habs.PLAN_CN_ROAD_NUMBER.ToString(),
                         habs.PLAN_RD_NAME.ToString(),
                         habs.PLAN_RD_ROUTE=="L"?"Link Route": (habs.PLAN_RD_ROUTE=="T"?"Through Route":"Major Link Route"),
                         habs.PLAN_RD_LENGTH.ToString(),
                         ("<center><table><tr> <td  style='border:none'><span class='ui-icon ui-icon-circle-plus' title='Add Cluster Habitation' onClick ='LoadHabitaionAddGrid(\"" + URLEncrypt.EncryptParameters1(new string[]{"RoadCode=" + habs.PLAN_CN_ROAD_CODE.ToString().Trim(),"BlockCode =" + blockCode.ToString().Trim().Replace("/","")}) + "\");'></span></td></tr></table></center>")
                       // "<center><input type='radio' name='radio' value='" + habs.MAST_HAB_NAME + "' id='"+URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() })+"' disabled = true /> <center/>"
                       //  habs.MAST_HAB_STATUS.ToString()=="U"?"Unconnected":(habs.MAST_HAB_STATUS=="S"?"State Connected":(habs.MAST_HAB_STATUS=="F"?"Not Feasible":""))
                      
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetHabitationListClusterCNDAL(int roadCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                int Year = PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011;
                var clusterHabs = (
                                   from CL in dbContext.MASTER_CLUSTER
                                   join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                   on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                   where
                                   CL.MAST_BLOCK_CODE == blockCode &&
                                   CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                                   CL.MAST_CLUSTER_ACTIVE == "Y"
                                   select new
                                   {
                                       CLH.MAST_HAB_CODE
                                   }
                                ).Distinct();

                var list = (from plan in dbContext.PLAN_ROAD
                            join planHab in dbContext.PLAN_ROAD_HABITATION
                            on plan.PLAN_CN_ROAD_CODE equals planHab.PLAN_CN_ROAD_CODE
                            join item in dbContext.MASTER_HABITATIONS
                            on planHab.MAST_HAB_CODE equals item.MAST_HAB_CODE
                            join habDetails in dbContext.MASTER_HABITATIONS_DETAILS
                            on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                            join village in dbContext.MASTER_VILLAGE
                            on item.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                            where
                             !clusterHabs.Any(s => s.MAST_HAB_CODE == item.MAST_HAB_CODE) &&
                             item.MAST_HABITATION_ACTIVE == "Y" &&
                             village.MAST_VILLAGE_ACTIVE == "Y" &&
                             village.MAST_BLOCK_CODE == blockCode &&
                             (habDetails.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)) &&
                             (item.MAST_HAB_STATUS != "F" || item.MAST_HAB_STATUS != "S") &&
                            //habDetails.MAST_HAB_TOT_POP <= 250 &&
                            plan.PLAN_CN_ROAD_CODE == roadCode
                            select new
                            {
                                item.MAST_HAB_NAME,
                                item.MAST_HAB_CODE,
                                habDetails.MAST_HAB_TOT_POP,
                                habDetails.MAST_HAB_SCST_POP,
                                habDetails.MAST_HAB_CONNECTED,
                                item.MAST_HAB_STATUS,
                                village.MAST_VILLAGE_NAME
                            }).ToList();

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "HabitationName":
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderBy(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderBy(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "VillageName":
                                list = list.OrderBy(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "VillageName":
                                list = list.OrderByDescending(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HabitationName":
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderByDescending(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderByDescending(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                         habs.MAST_HAB_NAME,
                         habs.MAST_VILLAGE_NAME.ToString(),
                         habs.MAST_HAB_CONNECTED.ToString()=="Y"?"Yes":"No",
                         habs.MAST_HAB_TOT_POP.ToString(),
                         habs.MAST_HAB_SCST_POP.ToString(),
                       "<center><input type='radio' name='radio' value='" + habs.MAST_HAB_NAME + "' id='"+URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() })+"' disabled = true /> <center/>"

                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public Array GetClusterCNHabitationListByClusterCodeDAL(int clusterCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                var list = (
                                   from CL in dbContext.MASTER_CLUSTER
                                   join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                   on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                   join BL in dbContext.MASTER_BLOCK
                                   on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                                   join HB in dbContext.MASTER_HABITATIONS
                                   on CLH.MAST_HAB_CODE equals HB.MAST_HAB_CODE
                                   join HBDTL in dbContext.MASTER_HABITATIONS_DETAILS
                                   on HB.MAST_HAB_CODE equals HBDTL.MAST_HAB_CODE
                                   join VL in dbContext.MASTER_VILLAGE
                                   on HB.MAST_VILLAGE_CODE equals VL.MAST_VILLAGE_CODE
                                   join DT in dbContext.MASTER_DISTRICT
                                   on BL.MAST_DISTRICT_CODE equals DT.MAST_DISTRICT_CODE
                                   join ST in dbContext.MASTER_STATE
                                   on DT.MAST_STATE_CODE equals ST.MAST_STATE_CODE
                                   where
                                   CL.MAST_CLUSTER_CODE == clusterCode &&
                                   CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                                   HBDTL.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)

                                   select new
                                   {
                                       CLH.MAST_HAB_CODE,
                                       HB.MAST_HAB_NAME,
                                       HBDTL.MAST_HAB_TOT_POP,
                                       HBDTL.MAST_HAB_SCST_POP,
                                       HBDTL.MAST_HAB_CONNECTED,
                                       HB.MAST_HAB_STATUS,
                                       VL.MAST_VILLAGE_NAME,
                                       MAST_LOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(ST.MAST_STATE_CODE, DT.MAST_DISTRICT_CODE, BL.MAST_BLOCK_CODE, 0, 0, 0, 0, 0, "HC", PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "U" : CL.MAST_LOCK_STATUS),
                                       CL.MAST_CLUSTER_CODE,
                                       CL.MAST_CLUSTER_NAME
                                   }
                                    ).ToList();



                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "HabitationName":
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderBy(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderBy(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "VillageName":
                                list = list.OrderBy(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "VillageName":
                                list = list.OrderByDescending(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HabitationName":
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderByDescending(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderByDescending(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                          habs.MAST_HAB_NAME.ToString(),
                          habs.MAST_VILLAGE_NAME.ToString(),
                         habs.MAST_HAB_CONNECTED.ToString()=="Y"?"Yes":"No",
                         habs.MAST_HAB_TOT_POP.ToString(),
                         habs.MAST_HAB_SCST_POP.ToString(),
                         dbContext.MASTER_CLUSTER.Any(a=>a.MAST_CLUSTER_NAME==habs.MAST_HAB_NAME && a.MAST_CLUSTER_CODE==habs.MAST_CLUSTER_CODE)?"-": habs.MAST_LOCK_STATUS=="U"?("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-unlocked' title='Delete Cluster Habitation Details' onClick ='DeleteClusterHabiationDetails(\"" + URLEncrypt.EncryptParameters1(new string[]{"ClusterCode =" + habs.MAST_CLUSTER_CODE.ToString().Trim(),"HabCode =" + habs.MAST_HAB_CODE.ToString().Trim().Replace("/","")}) + "\");'></span></td></tr></table></center>"):(habs.MAST_LOCK_STATUS=="N")  ? ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-trash' title='Delete Cluster Habitation Details' onClick ='DeleteClusterHabiationDetails(\"" + URLEncrypt.EncryptParameters1(new string[]{"ClusterCode =" + habs.MAST_CLUSTER_CODE.ToString().Trim(),"HabCode =" + habs.MAST_HAB_CODE.ToString().Trim().Replace("/","")}) + "\");'></span></td></tr></table></center>"):("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"),

                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetAddCoreNetworkListByClusterCodeDAL(int clusterCode, int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                var clusterHabs = (
                                   from CL in dbContext.MASTER_CLUSTER
                                   join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                   on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                   where
                                   CL.MAST_BLOCK_CODE == blockCode &&
                                   CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                                   CL.MAST_CLUSTER_CODE == clusterCode &&
                                   CL.MAST_CLUSTER_ACTIVE == "Y"
                                   select new
                                   {
                                       CLH.MAST_HAB_CODE
                                   }
                                    ).Distinct();

                //var clusterHabs = (from beniffitedHab in dbContext.MASTER_CLUSTER_HABITATIONS select new { beniffitedHab.MAST_HAB_CODE }).Distinct();

                //  var villageCodes = (blockCode == 0 ? (from villageDetails in dbContext.MASTER_VILLAGE select new { villageDetails.MAST_VILLAGE_CODE }) : (from villageDetails in dbContext.MASTER_VILLAGE where villageDetails.MAST_BLOCK_CODE == blockCode select new { villageDetails.MAST_VILLAGE_CODE })).Distinct();

                var list = (from plan in dbContext.PLAN_ROAD
                            join planHab in dbContext.PLAN_ROAD_HABITATION
                            on plan.PLAN_CN_ROAD_CODE equals planHab.PLAN_CN_ROAD_CODE
                            join item in dbContext.MASTER_HABITATIONS
                            on planHab.MAST_HAB_CODE equals item.MAST_HAB_CODE
                            join habDetails in dbContext.MASTER_HABITATIONS_DETAILS
                            on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                            join village in dbContext.MASTER_VILLAGE
                            on item.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                            where
                             clusterHabs.Any(s => s.MAST_HAB_CODE == planHab.MAST_HAB_CODE) &&
                             item.MAST_HABITATION_ACTIVE == "Y" &&
                             village.MAST_VILLAGE_ACTIVE == "Y" &&
                             village.MAST_BLOCK_CODE == blockCode &&
                             (habDetails.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)) &&
                            // villageCodes.Any(v => v.MAST_VILLAGE_CODE == item.MAST_VILLAGE_CODE)
                            (item.MAST_HAB_STATUS != "F" || item.MAST_HAB_STATUS != "S") &&
                            // habDetails.MAST_HAB_TOT_POP <= 250 &&
                            plan.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                            select new
                            {
                                plan.PLAN_CN_ROAD_CODE,
                                plan.PLAN_CN_ROAD_NUMBER,
                                plan.PLAN_RD_NAME,
                                plan.PLAN_RD_ROUTE,
                                plan.PLAN_RD_LENGTH

                            }).Distinct().ToList();

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "PLAN_CN_ROAD_NUMBER":
                                list = list.OrderBy(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "PLAN_CN_ROAD_NUMBER":
                                list = list.OrderByDescending(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "RoadCode=" + habs.PLAN_CN_ROAD_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                         habs.PLAN_CN_ROAD_NUMBER.ToString(),
                         habs.PLAN_RD_NAME.ToString(),
                         habs.PLAN_RD_ROUTE=="L"?"Link Route": (habs.PLAN_RD_ROUTE=="T"?"Through Route":"Major Link Route"),
                         habs.PLAN_RD_LENGTH.ToString(),
                         ("<center><table><tr> <td  style='border:none'><span class='ui-icon ui-icon-circle-plus' title='Add Cluster Habitation' onClick ='LoadViewHabitaionAddInClusterGrid(\"" + URLEncrypt.EncryptParameters1(new string[]{"RoadCode=" + habs.PLAN_CN_ROAD_CODE.ToString().Trim(),"ClusterCode=" + clusterCode.ToString().Trim(),"BlockCode =" + blockCode.ToString().Trim().Replace("/","")}) + "\");'></span></td></tr></table></center>")
                       // "<center><input type='radio' name='radio' value='" + habs.MAST_HAB_NAME + "' id='"+URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() })+"' disabled = true /> <center/>"
                       //  habs.MAST_HAB_STATUS.ToString()=="U"?"Unconnected":(habs.MAST_HAB_STATUS=="S"?"State Connected":(habs.MAST_HAB_STATUS=="F"?"Not Feasible":""))
                      
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetAddHabitationListIntoClusterCNDAL(int clusterCode, int roadCode, int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                var clusterHabs = (
                                   from CL in dbContext.MASTER_CLUSTER
                                   join CLH in dbContext.MASTER_CLUSTER_HABITATIONS
                                   on CL.MAST_CLUSTER_CODE equals CLH.MAST_CLUSTER_CODE
                                   join BL in dbContext.MASTER_BLOCK
                                   on CL.MAST_BLOCK_CODE equals BL.MAST_BLOCK_CODE
                                   where
                                   CL.MAST_BLOCK_CODE == blockCode &&
                                   CL.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                                   CL.MAST_CLUSTER_ACTIVE == "Y"
                                   select new
                                   {
                                       CLH.MAST_HAB_CODE
                                   }
                                    ).Distinct();

                //var clusterHabs = (from beniffitedHab in dbContext.MASTER_CLUSTER_HABITATIONS select new { beniffitedHab.MAST_HAB_CODE }).Distinct();

                //  var villageCodes = (blockCode == 0 ? (from villageDetails in dbContext.MASTER_VILLAGE select new { villageDetails.MAST_VILLAGE_CODE }) : (from villageDetails in dbContext.MASTER_VILLAGE where villageDetails.MAST_BLOCK_CODE == blockCode select new { villageDetails.MAST_VILLAGE_CODE })).Distinct();

                var list = (from plan in dbContext.PLAN_ROAD
                            join planHab in dbContext.PLAN_ROAD_HABITATION
                            on plan.PLAN_CN_ROAD_CODE equals planHab.PLAN_CN_ROAD_CODE
                            join item in dbContext.MASTER_HABITATIONS
                            on planHab.MAST_HAB_CODE equals item.MAST_HAB_CODE
                            join habDetails in dbContext.MASTER_HABITATIONS_DETAILS
                            on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                            join village in dbContext.MASTER_VILLAGE
                            on item.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                            where
                             !clusterHabs.Any(s => s.MAST_HAB_CODE == item.MAST_HAB_CODE) &&
                             item.MAST_HABITATION_ACTIVE == "Y" &&
                             village.MAST_VILLAGE_ACTIVE == "Y" &&
                             village.MAST_BLOCK_CODE == blockCode &&
                             (habDetails.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011)) &&
                             (item.MAST_HAB_STATUS != "F" || item.MAST_HAB_STATUS != "S") &&
                            //habDetails.MAST_HAB_TOT_POP <= 250 &&
                            plan.PLAN_CN_ROAD_CODE == roadCode
                            select new
                            {
                                item.MAST_HAB_NAME,
                                item.MAST_HAB_CODE,
                                habDetails.MAST_HAB_TOT_POP,
                                habDetails.MAST_HAB_SCST_POP,
                                habDetails.MAST_HAB_CONNECTED,
                                item.MAST_HAB_STATUS,
                                village.MAST_VILLAGE_NAME
                            }).ToList();

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "HabitationName":
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderBy(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderBy(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderBy(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "VillageName":
                                list = list.OrderBy(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderBy(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "VillageName":
                                list = list.OrderByDescending(m => m.MAST_VILLAGE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "HabitationName":
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "TotalPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_TOT_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STPopulation":
                                list = list.OrderByDescending(m => m.MAST_HAB_SCST_POP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Connected":
                                list = list.OrderByDescending(m => m.MAST_HAB_CONNECTED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ConnStatus":
                                list = list.OrderByDescending(m => m.MAST_HAB_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                list = list.OrderByDescending(m => m.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }


                return list.Select(habs => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() }),
                    cell = new[]
                     {
                         habs.MAST_HAB_NAME,
                         habs.MAST_VILLAGE_NAME.ToString(),
                         habs.MAST_HAB_CONNECTED.ToString()=="Y"?"Yes":"No",
                         habs.MAST_HAB_TOT_POP.ToString(),
                         habs.MAST_HAB_SCST_POP.ToString(),                        
                    //    "<center><input type='radio' name='radio' value='" + habs.MAST_HAB_NAME + "' id='"+URLEncrypt.EncryptParameters1(new string[] { "HabCode=" + habs.MAST_HAB_CODE.ToString().Trim() })+"' disabled = true /> <center/>"
                       
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddClusterCNHabitationDAL(string encryptedHabCodeSendbyCheckBoxCheck, string habitationName, int blockCode)
        {
            dbContext = new PMGSYEntities();
            string[] encryptedParameters = null;
            Dictionary<string, string> decryptedParameters = null;
            using (TransactionScope objScope = new TransactionScope())
            {
                try
                {

                    String[] habCodes = null;

                    int habCode = 0;
                    MASTER_CLUSTER clusterDetails = new MASTER_CLUSTER();
                    int clusterId = 0;
                    // int? blockId = dbContext.MASTER_CLUSTER.Where(m => m.MAST_DISTRICT_CODE == master_block.MAST_DISTRICT_CODE).Max(s => (int?)s.MAST_BLOCK_ID);
                    if (dbContext.MASTER_CLUSTER.Any())
                    {
                        clusterId = dbContext.MASTER_CLUSTER.Max(s => (int)s.MAST_CLUSTER_CODE);
                    }

                    if (clusterId == 0)
                    {
                        clusterId = 1;
                    }
                    else
                    {
                        clusterId = clusterId + 1;
                    }
                    clusterDetails.MAST_CLUSTER_CODE = clusterId;
                    clusterDetails.MAST_CLUSTER_NAME = habitationName;
                    clusterDetails.MAST_BLOCK_CODE = blockCode;
                    clusterDetails.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                    clusterDetails.MAST_LOCK_STATUS = "N";
                    clusterDetails.MAST_CLUSTER_ACTIVE = "Y";
                    clusterDetails.USERID = PMGSYSession.Current.UserId;
                    clusterDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.MASTER_CLUSTER.Add(clusterDetails);
                    dbContext.SaveChanges();

                    habCodes = encryptedHabCodeSendbyCheckBoxCheck.Split(',');
                    if (habCodes.Count() == 0)
                    {
                        return false;
                    }
                    foreach (String item in habCodes)
                    {
                        encryptedParameters = null;
                        encryptedParameters = item.Split('/');
                        decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                        habCode = Convert.ToInt32(decryptedParameters["HabCode"].ToString());

                        // var habDetail = dbContext.MASTER_HABITATIONS_DETAILS.Where(hb => hb.MAST_HAB_CODE == habCode && hb.MAST_YEAR == 2001).Select(m => m.MAST_HAB_CONNECTED).FirstOrDefault();
                        MASTER_CLUSTER_HABITATIONS clusterHabitation = new MASTER_CLUSTER_HABITATIONS();
                        clusterHabitation.MAST_CLUSTER_CODE = clusterId;
                        clusterHabitation.MAST_HAB_CODE = habCode;
                        clusterHabitation.USERID = PMGSYSession.Current.UserId;
                        clusterHabitation.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.MASTER_CLUSTER_HABITATIONS.Add(clusterHabitation);
                        dbContext.SaveChanges();

                    }
                    objScope.Complete();
                    return true;
                }
                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        public bool UpdateClusterCNHabitationDAL(string encryptedHabCodeSendbyCheckBoxCheck, string habitationName, int clusterCode)
        {
            dbContext = new PMGSYEntities();
            string[] encryptedParameters = null;
            Dictionary<string, string> decryptedParameters = null;
            using (TransactionScope objScope = new TransactionScope())
            {
                try
                {
                    String[] habCodes = null;
                    int habCode = 0;
                    if (dbContext.MASTER_CLUSTER.Any(a => a.MAST_CLUSTER_CODE == clusterCode))
                    {

                        habCodes = encryptedHabCodeSendbyCheckBoxCheck.Split(',');
                        if (habCodes.Count() == 0)
                        {
                            return false;
                        }

                        foreach (String item in habCodes)
                        {
                            encryptedParameters = null;
                            encryptedParameters = item.Split('/');
                            decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                            habCode = Convert.ToInt32(decryptedParameters["HabCode"].ToString());

                            // var habDetail = dbContext.MASTER_HABITATIONS_DETAILS.Where(hb => hb.MAST_HAB_CODE == habCode && hb.MAST_YEAR == 2001).Select(m => m.MAST_HAB_CONNECTED).FirstOrDefault();
                            MASTER_CLUSTER_HABITATIONS clusterHabitation = new MASTER_CLUSTER_HABITATIONS();
                            clusterHabitation.MAST_CLUSTER_CODE = clusterCode;
                            clusterHabitation.MAST_HAB_CODE = habCode;
                            clusterHabitation.USERID = PMGSYSession.Current.UserId;
                            clusterHabitation.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                            dbContext.MASTER_CLUSTER_HABITATIONS.Add(clusterHabitation);
                            dbContext.SaveChanges();

                        }
                    }
                    else
                    {
                        return false;
                    }
                    objScope.Complete();
                    return true;

                }
                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        public bool FinalizeClusterCNHabitationDAL(MasterClusterViewEditHabiationModel clusterModel, ref string message)
        {
            try
            {
                int clusterCode = 0;
                dbContext = new PMGSYEntities();
                encryptedParameters = clusterModel.EncryptedClusterCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                clusterCode = Convert.ToInt32(decryptedParameters["ClusterCode"].ToString());

                MASTER_CLUSTER cluster = dbContext.MASTER_CLUSTER.Where(m => m.MAST_CLUSTER_CODE == clusterCode).FirstOrDefault();
                cluster.MAST_LOCK_STATUS = "Y";
                cluster.USERID = PMGSYSession.Current.UserId;
                cluster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(cluster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region  IMS EC CheckList
        public bool AddImsEcCheckListDAL(IMSECCheckListViewModel imsEcCheckModel, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                if (imsEcCheckModel.IMS_EC_TYPE == "P")
                {
                    recordCount = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_STATE_CODE == imsEcCheckModel.StateCode && m.IMS_YEAR == imsEcCheckModel.PhaseYear && m.IMS_BATCH == imsEcCheckModel.Batch && m.MAST_AGENCY_CODE == imsEcCheckModel.Mast_Agency && m.IMS_EC_TYPE == "F" && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme).Count();
                    if (recordCount > 0)
                    {
                        message = "EC details exists.";
                        return false;
                    }
                    recordCount = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_STATE_CODE == imsEcCheckModel.StateCode && m.IMS_YEAR == imsEcCheckModel.PhaseYear && m.IMS_BATCH == imsEcCheckModel.Batch && m.MAST_AGENCY_CODE == imsEcCheckModel.Mast_Agency && m.IMS_EC_TYPE == "P" && m.IMS_EC_NRRDA_LOCK == "N" && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme).Count();
                    if (recordCount > 0)
                    {
                        message = "Pre EC action pending with NRRDA.";
                        return false;
                    }
                }
                else
                {
                    recordCount = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_STATE_CODE == imsEcCheckModel.StateCode && m.IMS_YEAR == imsEcCheckModel.PhaseYear && m.IMS_BATCH == imsEcCheckModel.Batch && m.MAST_AGENCY_CODE == imsEcCheckModel.Mast_Agency && m.IMS_EC_TYPE == "P" && m.IMS_EC_NRRDA_LOCK == "N" && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme).Count();
                    if (recordCount > 0)
                    {
                        message = "Pre EC action pending with NRRDA.";
                        return false;
                    }
                    recordCount = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_STATE_CODE == imsEcCheckModel.StateCode && m.IMS_YEAR == imsEcCheckModel.PhaseYear && m.IMS_BATCH == imsEcCheckModel.Batch && m.MAST_AGENCY_CODE == imsEcCheckModel.Mast_Agency && m.IMS_EC_TYPE == "F" && m.IMS_EC_NRRDA_LOCK == "N" && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme).Count();
                    if (recordCount > 0)
                    {
                        message = "EC action pending with NRRDA.";
                        return false;
                    }
                }

                IMS_EC_CHECKLIST checklistmodel = CloneModelToObjectImsEcCheck(new IMS_EC_CHECKLIST(), imsEcCheckModel);
                dbContext = new PMGSYEntities();
                checklistmodel.MAST_EC_ID = dbContext.IMS_EC_CHECKLIST.Max(cp => (Int32?)cp.MAST_EC_ID) == null ? 1 : (Int32)dbContext.IMS_EC_CHECKLIST.Max(cp => (Int32?)cp.MAST_EC_ID) + 1;
                checklistmodel.IMS_EC_LOCK = "N";
                checklistmodel.IMS_EC_NRRDA_LOCK = "N";
                dbContext.IMS_EC_CHECKLIST.Add(checklistmodel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {

                //Exception unhandledException = Server.GetLastError();
                //HttpException httpException = unhandledException as HttpException;
                //Exception innerException = unhandledException.InnerException;

                using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                {
                    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    sw.WriteLine("Method : " + "Application_Error()");
                    if (ex != null)
                        sw.WriteLine("Exception : " + ex.StackTrace.ToString());
                    if (ex != null)
                        sw.WriteLine("innerException : " + ex.InnerException.InnerException.Message.ToString());
                    if (ex != null)
                        sw.WriteLine("httpException : " + ex.ToString());
                    sw.WriteLine("---------------------------------------------------------------------------------------");
                    sw.Close();
                }

                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListImsEcCheckListDAL(int stateCode, int year, int batch, int agencyCode, string typeEC, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                string LockStatus = "%";
                if (PMGSYSession.Current.RoleCode == 25)
                {
                    LockStatus = "Y";
                }
                dbContext = new PMGSYEntities();
                var list = from checklist in dbContext.IMS_EC_CHECKLIST
                           join state in dbContext.MASTER_STATE on checklist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join agency in dbContext.MASTER_AGENCY on checklist.MAST_AGENCY_CODE equals agency.MAST_AGENCY_CODE
                           join batchs in dbContext.MASTER_BATCH on checklist.IMS_BATCH equals batchs.MAST_BATCH_CODE
                           where
                           (stateCode == 0 ? 1 : checklist.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                           (agencyCode == 0 ? 1 : checklist.MAST_AGENCY_CODE) == (agencyCode == 0 ? 1 : agencyCode) &&
                           (year == 0 ? 1 : checklist.IMS_YEAR) == (year == 0 ? 1 : year) &&
                           (batch == 0 ? 1 : checklist.IMS_BATCH) == (batch == 0 ? 1 : batch) &&
                           checklist.IMS_EC_TYPE == typeEC &&
                           checklist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                           (LockStatus == "%" ? "1" : checklist.IMS_EC_LOCK) == (LockStatus == "%" ? "1" : LockStatus)
                           select new
                           {
                               checklist.MAST_EC_ID,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               agency.MAST_AGENCY_TYPE,
                               batchs.MAST_BATCH_NAME,
                               checklist.IMS_YEAR,
                               checklist.IMS_CN_READY,
                               checklist.IMS_DRRP_OMMAS,
                               checklist.IMS_CNCUPL_READY,
                               checklist.IMS_DP_APPROVAL,
                               checklist.IMS_SLSC_PROCEEDING,
                               checklist.IMS_DPR_SCRUTINY,
                               checklist.IMS_PCI_REGISTER,
                               checklist.IMS_UNSEALED,
                               checklist.IMS_MP_DATA,
                               checklist.IMS_MAINT_YEARWISE,
                               checklist.IMS_ESTIMATE_SSR,
                               checklist.IMS_SSR_DATE,
                               checklist.IMS_DPR_STA,
                               checklist.IMS_NIT_UPLOADED,
                               checklist.IMS_WORKS_CAPACITY,
                               checklist.IMS_IPAI_ACCOUNTS,
                               checklist.IMS_LWE_MHA,
                               checklist.IMS_WB_BATCH_SIZE,
                               checklist.IMS_WB_ECOP,
                               checklist.IMS_WB_STA_CLEARED,
                               checklist.IMS_CN_APPROVAL_DATE,
                               checklist.IMS_CE_REMARKS,
                               checklist.IMS_NRRDA_REMARKS,
                               checklist.IMS_EC_LOCK,
                               checklist.IMS_EC_NRRDA_LOCK
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderBy(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderByDescending(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(checklist => new
                {

                    checklist.MAST_EC_ID,
                    checklist.MAST_STATE_NAME,
                    checklist.MAST_AGENCY_NAME,
                    checklist.MAST_AGENCY_TYPE,
                    checklist.MAST_BATCH_NAME,
                    checklist.IMS_YEAR,
                    checklist.IMS_CN_READY,
                    checklist.IMS_DRRP_OMMAS,
                    checklist.IMS_CNCUPL_READY,
                    checklist.IMS_DP_APPROVAL,
                    checklist.IMS_SLSC_PROCEEDING,
                    checklist.IMS_DPR_SCRUTINY,
                    checklist.IMS_PCI_REGISTER,
                    checklist.IMS_UNSEALED,
                    checklist.IMS_MP_DATA,
                    checklist.IMS_MAINT_YEARWISE,
                    checklist.IMS_ESTIMATE_SSR,
                    checklist.IMS_SSR_DATE,
                    checklist.IMS_DPR_STA,
                    checklist.IMS_NIT_UPLOADED,
                    checklist.IMS_WORKS_CAPACITY,
                    checklist.IMS_IPAI_ACCOUNTS,
                    checklist.IMS_LWE_MHA,
                    checklist.IMS_WB_BATCH_SIZE,
                    checklist.IMS_WB_ECOP,
                    checklist.IMS_WB_STA_CLEARED,
                    checklist.IMS_CN_APPROVAL_DATE,
                    checklist.IMS_CE_REMARKS,
                    checklist.IMS_NRRDA_REMARKS,
                    checklist.IMS_EC_LOCK,
                    checklist.IMS_EC_NRRDA_LOCK

                }).ToArray();


                return result.Select(checklistDetails => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim(), "ECType =" + typeEC.ToString().Replace("/", "") }),
                    cell = new[]{
                    checklistDetails.MAST_STATE_NAME == null?string.Empty:checklistDetails.MAST_STATE_NAME.ToString(),
                    checklistDetails.MAST_AGENCY_NAME==null?string.Empty:checklistDetails.MAST_AGENCY_NAME.ToString(),
                    checklistDetails.IMS_YEAR.ToString() +" - " +(checklistDetails.IMS_YEAR + 1).ToString(),
                    checklistDetails.MAST_BATCH_NAME == null?string.Empty:checklistDetails.MAST_BATCH_NAME.ToString(),
                    checklistDetails.IMS_CN_READY == null?string.Empty:checklistDetails.IMS_CN_READY.ToString(),
                    checklistDetails.IMS_DRRP_OMMAS == null?string.Empty:checklistDetails.IMS_DRRP_OMMAS.ToString(),
                    checklistDetails.IMS_CNCUPL_READY == null?string.Empty:checklistDetails.IMS_CNCUPL_READY.ToString(),
                    checklistDetails.IMS_DP_APPROVAL == null?string.Empty:checklistDetails.IMS_DP_APPROVAL.ToString(),
                    checklistDetails.IMS_SLSC_PROCEEDING == null?string.Empty:checklistDetails.IMS_SLSC_PROCEEDING.ToString(),
                    checklistDetails.IMS_DPR_SCRUTINY == null?string.Empty:checklistDetails.IMS_DPR_SCRUTINY.ToString(),
                    checklistDetails.IMS_PCI_REGISTER == null?string.Empty:checklistDetails.IMS_PCI_REGISTER.ToString(),
                    checklistDetails.IMS_UNSEALED == null?string.Empty:checklistDetails.IMS_UNSEALED.ToString(),
                    checklistDetails.IMS_MP_DATA == null?string.Empty:checklistDetails.IMS_MP_DATA.ToString(),
                    checklistDetails.IMS_MAINT_YEARWISE == null?string.Empty:checklistDetails.IMS_MAINT_YEARWISE.ToString(),
                    checklistDetails.IMS_ESTIMATE_SSR == null?string.Empty:checklistDetails.IMS_ESTIMATE_SSR.ToString(),
                    checklistDetails.IMS_SSR_DATE == null?"-":Convert.ToDateTime(checklistDetails.IMS_SSR_DATE).ToString("dd/MM/yyyy"),
                    checklistDetails.IMS_DPR_STA == null?string.Empty:checklistDetails.IMS_DPR_STA.ToString(),
                    checklistDetails.IMS_NIT_UPLOADED == null?string.Empty:checklistDetails.IMS_NIT_UPLOADED.ToString(),
                    checklistDetails.IMS_WORKS_CAPACITY == null?string.Empty:checklistDetails.IMS_WORKS_CAPACITY.ToString(),
                    checklistDetails.IMS_IPAI_ACCOUNTS == null?string.Empty:checklistDetails.IMS_IPAI_ACCOUNTS.ToString(),
                    checklistDetails.IMS_LWE_MHA == null?string.Empty:checklistDetails.IMS_LWE_MHA.ToString(),
                    checklistDetails.IMS_WB_BATCH_SIZE == null?string.Empty:checklistDetails.IMS_WB_BATCH_SIZE.ToString(),
                    checklistDetails.IMS_WB_ECOP == null?string.Empty:checklistDetails.IMS_WB_ECOP.ToString(),
                    checklistDetails.IMS_WB_STA_CLEARED == null?string.Empty:checklistDetails.IMS_WB_STA_CLEARED.ToString(),
                   //URLEncrypt.EncryptParameters1(new string[]{"EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim()}),
                   PMGSYSession.Current.RoleCode==25?
                                                     (checklistDetails.IMS_EC_NRRDA_LOCK=="N")?
                                                     ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-circle-plus' title='Add Check List Details' onClick ='EditIMSECCheckList(\"" + URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim()}) + "\");'></span></td></span></td></tr></table></center>")
                                                    : ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-pencil' title='Edit Check List Details' onClick ='EditIMSECCheckList(\"" + URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim()}) + "\");'></span></td></span></td></tr></table></center>")
                                                    :(PMGSYSession.Current.RoleCode==2?
                                                     (checklistDetails.IMS_EC_LOCK=="N")?
                                                     ("<center><table><tr>  <td  style='border:none'><span class='ui-icon ui-icon-pencil' title='Edit Check List Details' onClick ='EditIMSECCheckList(\"" + URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim()}) + "\");'></span></td><td style='border:none'><span class='ui-icon ui-icon-trash' title='Delete Check List Details' onClick ='DeleteIMSECCheckList(\"" + URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim()}) + "\");'></span></td></tr></table></center>")
                                                     :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> <td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>")
                                                     :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> <td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>")),


                    "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ViewCheckList(\"" +  URLEncrypt.EncryptParameters1(new string[]{"EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim()}) + "\"); return false;'>View</a>",
                    checklistDetails.IMS_EC_LOCK=="Y"?"<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='DownLoadViewECCheckListPDFFile(\"" +  URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim(), "ECType =" + typeEC.ToString().Replace("/", "") }) + "\"); return false;'>View</a>":"-",
                
                 // adminDetails.MAST_AGENCY_TYPE.ToString()=="O"?URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim(),"StateCode =" + adminDetails.MAST_STATE_CODE.ToString().Trim(),"StateName =" + adminDetails.MAST_STATE_NAME.ToString().Trim(),"AdminName =" + adminDetails.ADMIN_ND_NAME.ToString().Replace("/","")}):string.Empty,
               
                 (checklistDetails.IMS_EC_LOCK=="Y" && checklistDetails.IMS_EC_NRRDA_LOCK != "Y")?"<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='DefinalizeECCheckList(\"" +  URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + checklistDetails.MAST_EC_ID.ToString().Trim() }) + "\"); return false;'>View</a>":"-"

                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteImsEcCheckDAL(int EcCode, ref string message)
        {
            string PhysicalPath = string.Empty;
            try
            {
                dbContext = new PMGSYEntities();
                IMS_EC_CHECKLIST admin = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_EC_ID == EcCode).FirstOrDefault();

                #region Added by SAMMED A. PATIL on 22MAY2017 for Kerala SRRDA PreEC finalize issue
                IMS_EC_PDF_GENERATED preECPDF = dbContext.IMS_EC_PDF_GENERATED.Where(m => m.MAST_EC_ID == EcCode).FirstOrDefault();
                if (preECPDF != null)
                {
                    dbContext.IMS_EC_PDF_GENERATED.Remove(preECPDF);
                    dbContext.SaveChanges();

                    PhysicalPath = admin.IMS_EC_TYPE == "F" ? ConfigurationManager.AppSettings["EC_Check_PDF"] : ConfigurationManager.AppSettings["PRE_EC_Check_PDF"];
                    PhysicalPath = Path.Combine(PhysicalPath, preECPDF.IMS_FILE_NAME);
                    if (System.IO.File.Exists(PhysicalPath))
                    {
                        System.IO.File.Delete(PhysicalPath);
                    }
                }
                #endregion

                //Added by abhishek kamble 27-nov-2013
                admin.USERID = PMGSYSession.Current.UserId;
                admin.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(admin).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.IMS_EC_CHECKLIST.Remove(admin);
                dbContext.SaveChanges();
                message = "Check list  details deleted successfully.";
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteImsEcCheckDAL().DbUpdateException");
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteImsEcCheckDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditImsEcCheckDAL(IMSECCheckListViewModel imsEcCheckModel, ref string message)
        {
            try
            {
                int recordCount = 0;
                int ecCode = 0;
                dbContext = new PMGSYEntities();
                encryptedParameters = imsEcCheckModel.EncryptedMastEcId.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                ecCode = Convert.ToInt32(decryptedParameters["EcCode"].ToString());
                recordCount = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_STATE_CODE == imsEcCheckModel.StateCode && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme && m.IMS_YEAR == imsEcCheckModel.PhaseYear && m.IMS_BATCH == imsEcCheckModel.Batch && m.MAST_AGENCY_CODE == imsEcCheckModel.Mast_Agency && m.IMS_EC_TYPE == imsEcCheckModel.IMS_EC_TYPE && m.IMS_EC_NRRDA_LOCK == "N" && m.MAST_EC_ID != ecCode).Count();

                if (recordCount > 0)
                {
                    message = "check list details already exist.";
                    return false;
                }


                /*recordCount = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_NAME.ToUpper() == adminModel.ADMIN_ND_NAME.ToUpper() && m.MAST_STATE_CODE == adminModel.MAST_STATE_CODE && m.MAST_AGENCY_CODE==adminModel.MAST_AGENCY_CODE && m.ADMIN_ND_CODE != adminCode).Count();
                if (recordCount > 0)
                {
                    message = "Admin details already exist.";
                    return false;
                }*/

                IMS_EC_CHECKLIST chekListModel = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_EC_ID == ecCode).FirstOrDefault();
                chekListModel = CloneModelToObjectImsEcCheck(chekListModel, imsEcCheckModel);
                if (PMGSYSession.Current.RoleCode == 25)
                {
                    chekListModel.IMS_EC_NRRDA_LOCK = "Y";
                    chekListModel.IMS_EC_FINALIZE_DATE = Convert.ToDateTime(DateTime.Now.ToString());
                }
                dbContext = new PMGSYEntities();
                dbContext.Entry(chekListModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditImsEcCheckDAL().OptimisticConcurrencyException");
                return false;
            }
            catch (UpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditImsEcCheckDAL().UpdateException");
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditImsEcCheckDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public IMSECCheckListViewModel GetImsEcCheckDetailsDAL(int ecCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_EC_CHECKLIST admin = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_EC_ID == ecCode).FirstOrDefault();
                IMSECCheckListViewModel model = null;
                if (admin != null)
                {
                    model = new IMSECCheckListViewModel()
                    {
                        EncryptedMastEcId = URLEncrypt.EncryptParameters1(new string[] { "EcCode=" + admin.MAST_EC_ID.ToString().Trim() }),

                        StateCode = admin.MAST_STATE_CODE,
                        Batch = admin.IMS_BATCH,
                        PhaseYear = admin.IMS_YEAR,
                        Mast_Agency = admin.MAST_AGENCY_CODE,
                        IMS_CN_READY = admin.IMS_CN_READY,
                        IMS_DRRP_OMMAS = admin.IMS_DRRP_OMMAS,
                        IMS_CNCUPL_READY = admin.IMS_CNCUPL_READY,
                        IMS_DP_APPROVAL = admin.IMS_DP_APPROVAL,
                        IMS_SLSC_PROCEEDING = admin.IMS_SLSC_PROCEEDING,
                        IMS_DPR_SCRUTINY = admin.IMS_DPR_SCRUTINY,
                        IMS_PCI_REGISTER = admin.IMS_PCI_REGISTER,
                        IMS_UNSEALED = admin.IMS_UNSEALED,
                        IMS_MP_DATA = admin.IMS_MP_DATA,
                        IMS_MAINT_YEARWISE = admin.IMS_MAINT_YEARWISE,
                        IMS_ESTIMATE_SSR = admin.IMS_ESTIMATE_SSR,
                        IMS_SSR_DATE = (admin.IMS_SSR_DATE == null ? string.Empty : ConvertDateToString(admin.IMS_SSR_DATE)),
                        IMS_DPR_STA = admin.IMS_DPR_STA,
                        IMS_NIT_UPLOADED = admin.IMS_NIT_UPLOADED,
                        IMS_WORK_CAPACITY = admin.IMS_WORKS_CAPACITY,
                        IMS_IPAI_ACCOUNTS = admin.IMS_IPAI_ACCOUNTS,
                        IMS_LWE_MHA = admin.IMS_LWE_MHA,
                        IMS_WB_BATCH_SIZE = admin.IMS_WB_BATCH_SIZE,
                        IMS_WB_ECOP = admin.IMS_WB_ECOP,
                        IMS_WB_STA_CLEARED = admin.IMS_WB_STA_CLEARED,
                        IMS_CN_APPROVAL_DATE = (admin.IMS_CN_APPROVAL_DATE == null ? string.Empty : ConvertDateToString(admin.IMS_CN_APPROVAL_DATE)),
                        IMS_CE_REMARKS = (admin.IMS_CE_REMARKS == null ? "NA" : admin.IMS_CE_REMARKS),
                        IMS_NRRDA_REMARKS = (admin.IMS_NRRDA_REMARKS == null ? "" : admin.IMS_NRRDA_REMARKS),
                        StateName = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == admin.MAST_STATE_CODE).Select(a => a.MAST_STATE_NAME).FirstOrDefault(),
                        BatchName = dbContext.MASTER_BATCH.Where(a => a.MAST_BATCH_CODE == admin.IMS_BATCH).Select(a => a.MAST_BATCH_NAME).FirstOrDefault(),
                        Agency_Name = dbContext.MASTER_AGENCY.Where(a => a.MAST_AGENCY_CODE == admin.MAST_AGENCY_CODE).Select(a => a.MAST_AGENCY_NAME).FirstOrDefault(),
                        Mast_AgencyList = PopulateAgencies(admin.MAST_STATE_CODE, false),
                        IMS_EC_TYPE = admin.IMS_EC_TYPE,
                        //NRRDA
                        IMS_CN_READY_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_CN_READY_NRRDA,
                        IMS_DRRP_OMMAS_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_DRRP_OMMAS_NRRDA,
                        IMS_CNCUPL_READY_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_CNCUPL_READY_NRRDA,
                        IMS_DP_APPROVAL_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_DP_APPROVAL_NRRDA,
                        IMS_SLSC_PROCEEDING_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_SLSC_PROCEEDING_NRRDA,
                        IMS_DPR_SCRUTINY_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_DPR_SCRUTINY_NRRDA,
                        IMS_PCI_REGISTER_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_PCI_REGISTER_NRRDA,
                        IMS_UNSEALED_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_UNSEALED_NRRDA,
                        IMS_MP_DATA_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_MP_DATA_NRRDA,
                        IMS_MAINT_YEARWISE_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_MAINT_YEARWISE_NRRDA,
                        IMS_ESTIMATE_SSR_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_ESTIMATE_SSR_NRRDA,
                        IMS_SSR_DATE_NRRDA = (admin.IMS_SSR_DATE_NRRDA == null ? string.Empty : ConvertDateToString(admin.IMS_SSR_DATE_NRRDA)),
                        IMS_DPR_STA_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_DPR_STA_NRRDA,
                        IMS_NIT_UPLOADED_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_NIT_UPLOADED_NRRDA,
                        IMS_WORK_CAPACITY_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_WORKS_CAPACITY_NRRDA,
                        IMS_IPAI_ACCOUNTS_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_IPAI_ACCOUNTS_NRRDA,
                        IMS_LWE_MHA_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_LWE_MHA_NRRDA,
                        IMS_WB_BATCH_SIZE_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_WB_BATCH_SIZE_NRRDA,
                        IMS_WB_ECOP_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_WB_ECOP_NRRDA,
                        IMS_WB_STA_CLEARED_NRRDA = admin.IMS_CN_READY_NRRDA == null ? null : admin.IMS_WB_STA_CLEARED_NRRDA,

                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public IMS_EC_CHECKLIST CloneModelToObjectImsEcCheck(IMS_EC_CHECKLIST imsEcCheckList, IMSECCheckListViewModel modelImsEcCheck)
        {
            try
            {

                imsEcCheckList.MAST_STATE_CODE = modelImsEcCheck.StateCode;
                imsEcCheckList.IMS_YEAR = modelImsEcCheck.PhaseYear;
                imsEcCheckList.IMS_BATCH = modelImsEcCheck.Batch;
                imsEcCheckList.MAST_AGENCY_CODE = modelImsEcCheck.Mast_Agency;
                imsEcCheckList.IMS_CN_READY = (modelImsEcCheck.IMS_CN_READY == null ? "N" : modelImsEcCheck.IMS_CN_READY.ToString());
                imsEcCheckList.IMS_DRRP_OMMAS = (modelImsEcCheck.IMS_DRRP_OMMAS == null ? "N" : modelImsEcCheck.IMS_DRRP_OMMAS.ToString());
                imsEcCheckList.IMS_CNCUPL_READY = (modelImsEcCheck.IMS_CNCUPL_READY == null ? "N" : modelImsEcCheck.IMS_CNCUPL_READY.ToString());
                imsEcCheckList.IMS_DP_APPROVAL = (modelImsEcCheck.IMS_DP_APPROVAL == null ? "N" : modelImsEcCheck.IMS_DP_APPROVAL.ToString());
                imsEcCheckList.IMS_SLSC_PROCEEDING = (modelImsEcCheck.IMS_SLSC_PROCEEDING == null ? "N" : modelImsEcCheck.IMS_SLSC_PROCEEDING.ToString());
                imsEcCheckList.IMS_DPR_SCRUTINY = (modelImsEcCheck.IMS_DPR_SCRUTINY == null ? "N" : modelImsEcCheck.IMS_DPR_SCRUTINY.ToString());
                imsEcCheckList.IMS_PCI_REGISTER = (modelImsEcCheck.IMS_PCI_REGISTER == null ? "N" : modelImsEcCheck.IMS_PCI_REGISTER.ToString());
                imsEcCheckList.IMS_UNSEALED = (modelImsEcCheck.IMS_UNSEALED == null ? "N" : modelImsEcCheck.IMS_UNSEALED.ToString());
                imsEcCheckList.IMS_MP_DATA = (modelImsEcCheck.IMS_MP_DATA == null ? "N" : modelImsEcCheck.IMS_MP_DATA.ToString());
                imsEcCheckList.IMS_MAINT_YEARWISE = (modelImsEcCheck.IMS_MAINT_YEARWISE == null ? "N" : modelImsEcCheck.IMS_MAINT_YEARWISE.ToString());
                imsEcCheckList.IMS_ESTIMATE_SSR = (modelImsEcCheck.IMS_ESTIMATE_SSR == null ? "N" : modelImsEcCheck.IMS_ESTIMATE_SSR.ToString());
                imsEcCheckList.IMS_DPR_STA = (modelImsEcCheck.IMS_DPR_STA == null ? "N" : modelImsEcCheck.IMS_DPR_STA.ToString());
                imsEcCheckList.IMS_NIT_UPLOADED = (modelImsEcCheck.IMS_NIT_UPLOADED == null ? "N" : modelImsEcCheck.IMS_NIT_UPLOADED.ToString());
                imsEcCheckList.IMS_WORKS_CAPACITY = (modelImsEcCheck.IMS_WORK_CAPACITY == null ? "N" : modelImsEcCheck.IMS_WORK_CAPACITY.ToString());
                imsEcCheckList.IMS_IPAI_ACCOUNTS = (modelImsEcCheck.IMS_IPAI_ACCOUNTS == null ? "N" : modelImsEcCheck.IMS_IPAI_ACCOUNTS.ToString());
                imsEcCheckList.IMS_LWE_MHA = (modelImsEcCheck.IMS_LWE_MHA == null ? "N" : modelImsEcCheck.IMS_LWE_MHA.ToString());
                imsEcCheckList.IMS_WB_BATCH_SIZE = (modelImsEcCheck.IMS_WB_BATCH_SIZE == null ? "N" : modelImsEcCheck.IMS_WB_BATCH_SIZE.ToString());
                imsEcCheckList.IMS_WB_ECOP = (modelImsEcCheck.IMS_WB_ECOP == null ? "N" : modelImsEcCheck.IMS_WB_ECOP.ToString());
                imsEcCheckList.IMS_WB_STA_CLEARED = (modelImsEcCheck.IMS_WB_STA_CLEARED == null ? "N" : modelImsEcCheck.IMS_WB_STA_CLEARED.ToString());
                imsEcCheckList.IMS_SSR_DATE = ConvertStringToDate(modelImsEcCheck.IMS_SSR_DATE);
                imsEcCheckList.IMS_CN_APPROVAL_DATE = ConvertStringToDate(modelImsEcCheck.IMS_CN_APPROVAL_DATE);
                imsEcCheckList.IMS_CE_REMARKS = modelImsEcCheck.IMS_CE_REMARKS;
                imsEcCheckList.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                imsEcCheckList.USERID = PMGSYSession.Current.UserId;
                imsEcCheckList.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                imsEcCheckList.IMS_EC_TYPE = modelImsEcCheck.IMS_EC_TYPE;
                //NRRDA
                if (PMGSYSession.Current.RoleCode == 25 && modelImsEcCheck.HdRoleTypeEntry == "M")
                {
                    imsEcCheckList.IMS_CN_READY_NRRDA = (modelImsEcCheck.IMS_CN_READY_NRRDA == null ? null : modelImsEcCheck.IMS_CN_READY_NRRDA.ToString());
                    imsEcCheckList.IMS_DRRP_OMMAS_NRRDA = (modelImsEcCheck.IMS_DRRP_OMMAS_NRRDA == null ? null : modelImsEcCheck.IMS_DRRP_OMMAS_NRRDA.ToString());
                    imsEcCheckList.IMS_CNCUPL_READY_NRRDA = (modelImsEcCheck.IMS_CNCUPL_READY_NRRDA == null ? null : modelImsEcCheck.IMS_CNCUPL_READY_NRRDA.ToString());
                    imsEcCheckList.IMS_DP_APPROVAL_NRRDA = (modelImsEcCheck.IMS_DP_APPROVAL_NRRDA == null ? null : modelImsEcCheck.IMS_DP_APPROVAL_NRRDA.ToString());
                    imsEcCheckList.IMS_SLSC_PROCEEDING_NRRDA = (modelImsEcCheck.IMS_SLSC_PROCEEDING_NRRDA == null ? null : modelImsEcCheck.IMS_SLSC_PROCEEDING_NRRDA.ToString());
                    imsEcCheckList.IMS_DPR_SCRUTINY_NRRDA = (modelImsEcCheck.IMS_DPR_SCRUTINY_NRRDA == null ? null : modelImsEcCheck.IMS_DPR_SCRUTINY_NRRDA.ToString());
                    imsEcCheckList.IMS_PCI_REGISTER_NRRDA = (modelImsEcCheck.IMS_PCI_REGISTER_NRRDA == null ? null : modelImsEcCheck.IMS_PCI_REGISTER_NRRDA.ToString());
                    imsEcCheckList.IMS_UNSEALED_NRRDA = (modelImsEcCheck.IMS_UNSEALED_NRRDA == null ? null : modelImsEcCheck.IMS_UNSEALED_NRRDA.ToString());
                    imsEcCheckList.IMS_MP_DATA_NRRDA = (modelImsEcCheck.IMS_MP_DATA_NRRDA == null ? null : modelImsEcCheck.IMS_MP_DATA_NRRDA.ToString());
                    imsEcCheckList.IMS_MAINT_YEARWISE_NRRDA = (modelImsEcCheck.IMS_MAINT_YEARWISE_NRRDA == null ? null : modelImsEcCheck.IMS_MAINT_YEARWISE_NRRDA.ToString());
                    imsEcCheckList.IMS_ESTIMATE_SSR_NRRDA = (modelImsEcCheck.IMS_ESTIMATE_SSR_NRRDA == null ? null : modelImsEcCheck.IMS_ESTIMATE_SSR_NRRDA.ToString());
                    imsEcCheckList.IMS_DPR_STA_NRRDA = (modelImsEcCheck.IMS_DPR_STA_NRRDA == null ? null : modelImsEcCheck.IMS_DPR_STA_NRRDA.ToString());
                    imsEcCheckList.IMS_NIT_UPLOADED_NRRDA = (modelImsEcCheck.IMS_NIT_UPLOADED_NRRDA == null ? null : modelImsEcCheck.IMS_NIT_UPLOADED_NRRDA.ToString());
                    imsEcCheckList.IMS_WORKS_CAPACITY_NRRDA = (modelImsEcCheck.IMS_WORK_CAPACITY_NRRDA == null ? null : modelImsEcCheck.IMS_WORK_CAPACITY_NRRDA.ToString());
                    imsEcCheckList.IMS_IPAI_ACCOUNTS_NRRDA = (modelImsEcCheck.IMS_IPAI_ACCOUNTS_NRRDA == null ? null : modelImsEcCheck.IMS_IPAI_ACCOUNTS_NRRDA.ToString());
                    imsEcCheckList.IMS_LWE_MHA_NRRDA = (modelImsEcCheck.IMS_LWE_MHA_NRRDA == null ? null : modelImsEcCheck.IMS_LWE_MHA_NRRDA.ToString());
                    imsEcCheckList.IMS_WB_BATCH_SIZE_NRRDA = (modelImsEcCheck.IMS_WB_BATCH_SIZE_NRRDA == null ? null : modelImsEcCheck.IMS_WB_BATCH_SIZE_NRRDA.ToString());
                    imsEcCheckList.IMS_WB_ECOP_NRRDA = (modelImsEcCheck.IMS_WB_ECOP_NRRDA == null ? null : modelImsEcCheck.IMS_WB_ECOP_NRRDA.ToString());
                    imsEcCheckList.IMS_WB_STA_CLEARED_NRRDA = (modelImsEcCheck.IMS_WB_STA_CLEARED_NRRDA == null ? null : modelImsEcCheck.IMS_WB_STA_CLEARED_NRRDA.ToString());
                    imsEcCheckList.IMS_SSR_DATE_NRRDA = ConvertStringToDate(modelImsEcCheck.IMS_SSR_DATE_NRRDA);
                    imsEcCheckList.IMS_NRRDA_REMARKS = modelImsEcCheck.IMS_NRRDA_REMARKS;
                }
                else
                {
                    if (modelImsEcCheck.HdRoleTypeEntry == "S")
                    {
                        imsEcCheckList.IMS_CN_READY_NRRDA = (modelImsEcCheck.IMS_CN_READY == null ? null : modelImsEcCheck.IMS_CN_READY.ToString());
                        imsEcCheckList.IMS_DRRP_OMMAS_NRRDA = (modelImsEcCheck.IMS_DRRP_OMMAS == null ? null : modelImsEcCheck.IMS_DRRP_OMMAS.ToString());
                        imsEcCheckList.IMS_CNCUPL_READY_NRRDA = (modelImsEcCheck.IMS_CNCUPL_READY == null ? null : modelImsEcCheck.IMS_CNCUPL_READY.ToString());
                        imsEcCheckList.IMS_DP_APPROVAL_NRRDA = (modelImsEcCheck.IMS_DP_APPROVAL == null ? null : modelImsEcCheck.IMS_DP_APPROVAL.ToString());
                        imsEcCheckList.IMS_SLSC_PROCEEDING_NRRDA = (modelImsEcCheck.IMS_SLSC_PROCEEDING == null ? null : modelImsEcCheck.IMS_SLSC_PROCEEDING.ToString());
                        imsEcCheckList.IMS_DPR_SCRUTINY_NRRDA = (modelImsEcCheck.IMS_DPR_SCRUTINY == null ? null : modelImsEcCheck.IMS_DPR_SCRUTINY.ToString());
                        imsEcCheckList.IMS_PCI_REGISTER_NRRDA = (modelImsEcCheck.IMS_PCI_REGISTER == null ? null : modelImsEcCheck.IMS_PCI_REGISTER.ToString());
                        imsEcCheckList.IMS_UNSEALED_NRRDA = (modelImsEcCheck.IMS_UNSEALED == null ? null : modelImsEcCheck.IMS_UNSEALED.ToString());
                        imsEcCheckList.IMS_MP_DATA_NRRDA = (modelImsEcCheck.IMS_MP_DATA == null ? null : modelImsEcCheck.IMS_MP_DATA.ToString());
                        imsEcCheckList.IMS_MAINT_YEARWISE_NRRDA = (modelImsEcCheck.IMS_MAINT_YEARWISE == null ? null : modelImsEcCheck.IMS_MAINT_YEARWISE.ToString());
                        imsEcCheckList.IMS_ESTIMATE_SSR_NRRDA = (modelImsEcCheck.IMS_ESTIMATE_SSR == null ? null : modelImsEcCheck.IMS_ESTIMATE_SSR.ToString());
                        imsEcCheckList.IMS_DPR_STA_NRRDA = (modelImsEcCheck.IMS_DPR_STA == null ? null : modelImsEcCheck.IMS_DPR_STA.ToString());
                        imsEcCheckList.IMS_NIT_UPLOADED_NRRDA = (modelImsEcCheck.IMS_NIT_UPLOADED == null ? null : modelImsEcCheck.IMS_NIT_UPLOADED.ToString());
                        imsEcCheckList.IMS_WORKS_CAPACITY_NRRDA = (modelImsEcCheck.IMS_WORK_CAPACITY == null ? null : modelImsEcCheck.IMS_WORK_CAPACITY.ToString());
                        imsEcCheckList.IMS_IPAI_ACCOUNTS_NRRDA = (modelImsEcCheck.IMS_IPAI_ACCOUNTS == null ? null : modelImsEcCheck.IMS_IPAI_ACCOUNTS.ToString());
                        imsEcCheckList.IMS_LWE_MHA_NRRDA = (modelImsEcCheck.IMS_LWE_MHA == null ? null : modelImsEcCheck.IMS_LWE_MHA.ToString());
                        imsEcCheckList.IMS_WB_BATCH_SIZE_NRRDA = (modelImsEcCheck.IMS_WB_BATCH_SIZE == null ? null : modelImsEcCheck.IMS_WB_BATCH_SIZE.ToString());
                        imsEcCheckList.IMS_WB_ECOP_NRRDA = (modelImsEcCheck.IMS_WB_ECOP == null ? null : modelImsEcCheck.IMS_WB_ECOP.ToString());
                        imsEcCheckList.IMS_WB_STA_CLEARED_NRRDA = (modelImsEcCheck.IMS_WB_STA_CLEARED == null ? null : modelImsEcCheck.IMS_WB_STA_CLEARED.ToString());
                        imsEcCheckList.IMS_SSR_DATE_NRRDA = ConvertStringToDate(modelImsEcCheck.IMS_SSR_DATE);
                        imsEcCheckList.IMS_NRRDA_REMARKS = modelImsEcCheck.IMS_CE_REMARKS;
                    }
                }



                return imsEcCheckList;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "CloneModelToObjectImsEcCheckDAL()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool FinalizeECCheckListDAL(int ecId, ref string meesage)
        {
            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            // PMGSY.Models.PMGSYEntities dbContext2 = new PMGSY.Models.PMGSYEntities(); 
            try
            {
                IMSECCheckListViewModel modelImsEcCheck = new IMSECCheckListViewModel();
                TransactionOptions transactionOptions = new TransactionOptions();
                transactionOptions.IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted;
                transactionOptions.Timeout = TimeSpan.MaxValue;
                //using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, transactionOptions))
                //{
                PMGSY.Models.IMS_EC_CHECKLIST ecCheckListDetails = dbContext.IMS_EC_CHECKLIST.Where(m => m.MAST_EC_ID == ecId).FirstOrDefault();

                if (PMGSYSession.Current.RoleCode == 2)
                {
                    if (ecCheckListDetails.IMS_EC_LOCK == "N")
                    {
                        bool status = GenerateEcCheckListReport(ecCheckListDetails, modelImsEcCheck, dbContext);
                        if (status == true)
                        {
                            ecCheckListDetails.IMS_EC_LOCK = "Y";
                            ecCheckListDetails.USERID = PMGSYSession.Current.UserId;
                            ecCheckListDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(ecCheckListDetails).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                            //ts.Complete();
                        }
                        else
                        {
                            meesage = "Check List is not finalized.";
                            return false;
                        }
                    }
                    else
                    {
                        meesage = "Check List is already finalized.";
                        return false;
                    }
                }
                if (PMGSYSession.Current.RoleCode == 25)
                {
                    ecCheckListDetails.IMS_EC_NRRDA_LOCK = "Y";
                    ecCheckListDetails.IMS_EC_FINALIZE_DATE = Convert.ToDateTime(DateTime.Now.ToString());
                    ecCheckListDetails.IMS_EC_LOCK = "Y";
                    ecCheckListDetails.USERID = PMGSYSession.Current.UserId;
                    ecCheckListDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ecCheckListDetails).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    //ts.Complete();
                }
                //}
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "FinalizeECCheckListDAL()");
                return false;
            }
            finally
            {
                dbContext.Dispose();
                //if (PMGSYSession.Current.RoleCode == 2)
                //{
                //    dbContext2.Dispose();
                //}
            }
        }

        public string DeFinalizeECDAL(int ecId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_EC_CHECKLIST objECCheckListDetails = new IMS_EC_CHECKLIST();
                objECCheckListDetails = dbContext.IMS_EC_CHECKLIST.Find(ecId);

                objECCheckListDetails.IMS_EC_LOCK = "N";
                objECCheckListDetails.IMS_EC_FINALIZE_DATE = System.DateTime.Now;

                objECCheckListDetails.USERID = PMGSYSession.Current.UserId;
                objECCheckListDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(objECCheckListDetails).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// generates the pdf file and store it to the server.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="sanctionModel"></param>
        public bool GenerateEcCheckListReport(IMS_EC_CHECKLIST imsmodel, IMSECCheckListViewModel modelImsEcCheck, PMGSYEntities dbContext)
        {

            try
            {
                Microsoft.Reporting.WebForms.ReportViewer rview = new Microsoft.Reporting.WebForms.ReportViewer();
                rview.ServerReport.ReportServerUrl = new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.ReportServerUrl"]);
                System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter> paramList = new System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter>();
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Level", "1"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("State", imsmodel.MAST_STATE_CODE.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("District", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Block", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Agency", imsmodel.MAST_AGENCY_CODE.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Collaboration", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("PMGSY", PMGSYSession.Current.PMGSYScheme.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Year", imsmodel.IMS_YEAR.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Batch", imsmodel.IMS_BATCH.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("StateName", dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == imsmodel.MAST_STATE_CODE).Select(m => m.MAST_STATE_NAME).FirstOrDefault()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("DistName", "All"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("BlockName", "All"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("CollabName", "All"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("AgencyName", dbContext.MASTER_AGENCY.Where(m => m.MAST_AGENCY_CODE == imsmodel.MAST_AGENCY_CODE).Select(m => m.MAST_AGENCY_NAME).FirstOrDefault()));
                Microsoft.Reporting.WebForms.IReportServerCredentials irsc = new CustomReportCredentials(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Username"], System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Password"]);
                rview.ServerReport.ReportServerCredentials = irsc;
                rview.ServerReport.ReportPath = "/PMGSYCitizen/EC_Brief_Report";
                rview.ServerReport.SetParameters(paramList);
                string mimeType, encoding, extension, deviceInfo;
                string[] streamids;
                Microsoft.Reporting.WebForms.Warning[] warnings;
                string format = "PDF"; //Desired format goes here (PDF, Excel, or Image)
                deviceInfo = "<DeviceInfo>" + "<SimplePageHeaders>True</SimplePageHeaders>" + "</DeviceInfo>";
                byte[] bytes = rview.ServerReport.Render(format, deviceInfo, out mimeType, out encoding, out extension, out streamids, out warnings);
                //dbContext = new PMGSYEntities();
                var fileName = (dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == imsmodel.MAST_STATE_CODE).Select(m => m.MAST_STATE_SHORT_CODE).FirstOrDefault()) + "_" + (imsmodel.IMS_YEAR + "-" + (imsmodel.IMS_YEAR + 1)) + "_BATCH" + imsmodel.IMS_BATCH + "_" + "_EC" + imsmodel.MAST_EC_ID + "_Type" + imsmodel.IMS_EC_TYPE + "_SCHEME" + PMGSYSession.Current.PMGSYScheme + ".pdf";
                string filePath = imsmodel.IMS_EC_TYPE == "P" ? ConfigurationManager.AppSettings["PRE_EC_Check_PDF"].ToString() : ConfigurationManager.AppSettings["EC_Check_PDF"].ToString();
                System.IO.File.WriteAllBytes(filePath + fileName, bytes);
                modelImsEcCheck.IMS_EC_File_Name = fileName;
                modelImsEcCheck.IMS_EC_File_Path = filePath;
                //dbContext = new PMGSYEntities();
                IMS_EC_PDF_GENERATED PdfGenrateModel = new IMS_EC_PDF_GENERATED();
                PdfGenrateModel.MAST_EC_ID = imsmodel.MAST_EC_ID;
                PdfGenrateModel.IMS_FILE_NAME = fileName;
                PdfGenrateModel.IMS_FILE_PATH = filePath;
                PdfGenrateModel.IMS_PDF_GENERATION_DATE = Convert.ToDateTime(DateTime.Now.ToString());
                PdfGenrateModel.USERID = PMGSYSession.Current.UserId;
                PdfGenrateModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                /// Added by SAMMED A. PATIL on 22MAY2017 for Kerala SRRDA PreEC finalize issue
                if (dbContext.IMS_EC_PDF_GENERATED.Where(x => x.MAST_EC_ID == imsmodel.MAST_EC_ID).Any())
                {
                    dbContext.Entry(PdfGenrateModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                }
                else
                {
                    dbContext.IMS_EC_PDF_GENERATED.Add(PdfGenrateModel);
                    dbContext.SaveChanges();
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GenerateEcCheckListReportDAL()");
                return false;
            }
            finally
            {
                //if (dbContext != null)
                //{
                //    dbContext.Dispose();
                //}
            }

        }

        #endregion

        #region  IMS EC File Upload
        public bool AddImsEcFileUploadDAL(IMSEcFileUploadViewModel imsEcFileUpload, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();


                recordCount = dbContext.IMS_EC_FILE_UPLOAD.Where(m => m.MAST_STATE_CODE == imsEcFileUpload.Mast_State_Code && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme && m.IMS_YEAR == imsEcFileUpload.PhaseYear && m.MAST_AGENCY_CODE == imsEcFileUpload.Mast_Agency && m.IMS_FILE_TYPE == imsEcFileUpload.ImsFileType).Count();

                if (recordCount > 0)
                {
                    message = "File Upload details already exist.";
                    return false;
                }
                IMS_EC_FILE_UPLOAD EcFileUpload = CloneModelToObjectImsFileUpload(new IMS_EC_FILE_UPLOAD(), imsEcFileUpload);
                dbContext = new PMGSYEntities();
                EcFileUpload.MAST_FILE_ID = dbContext.IMS_EC_FILE_UPLOAD.Max(cp => (Int32?)cp.MAST_FILE_ID) == null ? 1 : (Int32)dbContext.IMS_EC_FILE_UPLOAD.Max(cp => (Int32?)cp.MAST_FILE_ID) + 1;
                dbContext.IMS_EC_FILE_UPLOAD.Add(EcFileUpload);
                dbContext.SaveChanges();
                return true;

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddImsEcFileUploadDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListImsFileUploadDAL(int stateCode, int year, int batch, int agencyCode, string fileType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from filelist in dbContext.IMS_EC_FILE_UPLOAD
                           join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join agency in dbContext.MASTER_AGENCY on filelist.MAST_AGENCY_CODE equals agency.MAST_AGENCY_CODE
                           join batchs in dbContext.MASTER_BATCH on filelist.IMS_BATCH equals batchs.MAST_BATCH_CODE into batchleft
                           from batchItem in batchleft.DefaultIfEmpty()
                           where
                           (stateCode == 0 ? 1 : filelist.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                           (agencyCode == 0 ? 1 : filelist.MAST_AGENCY_CODE) == (agencyCode == 0 ? 1 : agencyCode) &&
                           (year == 0 ? 1 : filelist.IMS_YEAR) == (year == 0 ? 1 : year) &&
                           (batch == 0 ? 1 : filelist.IMS_BATCH) == (batch == 0 ? 1 : batch) &&
                           (fileType == "%" ? string.Empty : filelist.IMS_FILE_TYPE) == (fileType == "%" ? string.Empty : fileType) &&
                           filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                           select new
                           {
                               filelist.MAST_FILE_ID,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               agency.MAST_AGENCY_TYPE,
                               batchItem.MAST_BATCH_NAME,
                               filelist.IMS_YEAR,
                               filelist.IMS_FILE_TYPE,
                               filelist.IMS_FILE_NAME,
                               filelist.IMS_FILE_PATH
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderBy(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_FILE_TYPE":
                                list = list.OrderBy(x => x.IMS_FILE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderByDescending(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_FILE_TYPE":
                                list = list.OrderByDescending(x => x.IMS_FILE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(filelist => new
                {

                    filelist.MAST_FILE_ID,
                    filelist.MAST_STATE_NAME,
                    filelist.MAST_AGENCY_NAME,
                    filelist.MAST_AGENCY_TYPE,
                    filelist.MAST_BATCH_NAME,
                    filelist.IMS_YEAR,
                    filelist.IMS_FILE_TYPE,
                    filelist.IMS_FILE_NAME,
                    filelist.IMS_FILE_PATH

                }).ToArray();


                return result.Select(checklistDetails => new
                {
                    id = checklistDetails.MAST_FILE_ID.ToString().Trim(),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{

                    checklistDetails.MAST_STATE_NAME == null?string.Empty:checklistDetails.MAST_STATE_NAME.ToString(),
                    checklistDetails.IMS_YEAR.ToString(),
                    checklistDetails.MAST_BATCH_NAME == null?string.Empty:checklistDetails.MAST_BATCH_NAME.ToString(),
                    checklistDetails.MAST_AGENCY_NAME==null?string.Empty:checklistDetails.MAST_AGENCY_NAME.ToString(),
                    checklistDetails.IMS_FILE_TYPE == null?string.Empty:checklistDetails.IMS_FILE_TYPE=="A"?"Audit Report":checklistDetails.IMS_FILE_TYPE=="U"?"Utilization Certificate":"Others",
                    checklistDetails.IMS_FILE_NAME == null?string.Empty:checklistDetails.IMS_FILE_NAME.ToString(),
                    checklistDetails.IMS_FILE_PATH == null?string.Empty:checklistDetails.IMS_FILE_PATH.ToString(),
                    //checklistDetails.IMS_FILE_NAME == "NA" 
                    //                ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadECFile(\"" +  checklistDetails.MAST_FILE_ID.ToString().Trim() + "\"); return false;'>Upload</a>" 
                    //                : "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ViewECFile(\"" +  checklistDetails.MAST_FILE_ID.ToString().Trim() + "\"); return false;'>View</a>" ,
                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadECFile(\"" + URLEncrypt.EncryptParameters(new string[] { checklistDetails.IMS_FILE_NAME}) +"\"); return false;'>Download</a>" ,

                    URLEncrypt.EncryptParameters1(new string[]{"FileCode=" + checklistDetails.MAST_FILE_ID.ToString().Trim()}),


                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ListImsFileUploadDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteImsFileUploadDAL(int FileCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_EC_FILE_UPLOAD admin = dbContext.IMS_EC_FILE_UPLOAD.Where(m => m.MAST_FILE_ID == FileCode).FirstOrDefault();
                //Added by abhishek kamble 27-nov-2013
                admin.USERID = PMGSYSession.Current.UserId;
                admin.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(admin).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.IMS_EC_FILE_UPLOAD.Remove(admin);
                dbContext.SaveChanges();
                message = "File Upload  details deleted successfully.";
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteImsFileUploadDAL()");
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditImsFileUploadDAL(IMSEcFileUploadViewModel imsEcFileUploadModel, ref string message)
        {
            try
            {

                int recordCount = 0;

                int fileCode = 0;
                dbContext = new PMGSYEntities();
                encryptedParameters = imsEcFileUploadModel.EncryptedFileId.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                fileCode = Convert.ToInt32(decryptedParameters["FileCode"].ToString());

                recordCount = dbContext.IMS_EC_FILE_UPLOAD.Where(m => m.MAST_STATE_CODE == imsEcFileUploadModel.Mast_State_Code && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme && m.IMS_YEAR == imsEcFileUploadModel.PhaseYear && m.MAST_AGENCY_CODE == imsEcFileUploadModel.Mast_Agency && m.MAST_FILE_ID != fileCode).Count();

                if (recordCount > 0)
                {
                    message = "File Upload details already exist.";
                    return false;
                }
                IMS_EC_FILE_UPLOAD fileUploadModel = dbContext.IMS_EC_FILE_UPLOAD.Where(m => m.MAST_FILE_ID == fileCode).FirstOrDefault();
                fileUploadModel = CloneModelToObjectImsFileUpload(fileUploadModel, imsEcFileUploadModel);
                dbContext = new PMGSYEntities();
                dbContext.Entry(fileUploadModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditImsFileUploadDAL().OptimisticConcurrencyException");
                return false;
            }
            catch (UpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditImsFileUploadDAL().UpdateException");
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditImsFileUploadDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public IMSEcFileUploadViewModel GetImsEcFileUploadDetailsDAL(int fileCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_EC_FILE_UPLOAD admin = dbContext.IMS_EC_FILE_UPLOAD.Where(m => m.MAST_FILE_ID == fileCode).FirstOrDefault();
                IMSEcFileUploadViewModel model = null;
                if (admin != null)
                {
                    model = new IMSEcFileUploadViewModel()
                    {
                        EncryptedFileId = URLEncrypt.EncryptParameters1(new string[] { "FileCode=" + admin.MAST_FILE_ID.ToString().Trim() }),
                        Mast_State_Code = admin.MAST_STATE_CODE,
                        Batch = admin.IMS_BATCH.HasValue ? admin.IMS_BATCH.Value : 0,
                        PhaseYear = admin.IMS_YEAR,
                        Mast_Agency = admin.MAST_AGENCY_CODE,
                        ImsFileType = admin.IMS_FILE_TYPE,
                        ImsFileName = (admin.IMS_FILE_NAME == null ? string.Empty : admin.IMS_FILE_NAME),
                        ImsFilePath = (admin.IMS_FILE_PATH == null ? string.Empty : admin.IMS_FILE_PATH),
                        StateName = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == admin.MAST_STATE_CODE).Select(a => a.MAST_STATE_NAME).FirstOrDefault(),
                        BatchName = dbContext.MASTER_BATCH.Where(a => a.MAST_BATCH_CODE == admin.IMS_BATCH).Select(a => a.MAST_BATCH_NAME).FirstOrDefault(),
                        Agency_Name = dbContext.MASTER_AGENCY.Where(a => a.MAST_AGENCY_CODE == admin.MAST_AGENCY_CODE).Select(a => a.MAST_AGENCY_NAME).FirstOrDefault(),
                        Mast_AgencyList = PopulateAgencies(admin.MAST_STATE_CODE, false),
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetImsEcFileUploadDetailsDAL()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public IMS_EC_FILE_UPLOAD CloneModelToObjectImsFileUpload(IMS_EC_FILE_UPLOAD imsEcFileUpload, IMSEcFileUploadViewModel modelImsEcFileUpload)
        {
            try
            {

                imsEcFileUpload.MAST_STATE_CODE = modelImsEcFileUpload.Mast_State_Code;
                imsEcFileUpload.IMS_YEAR = modelImsEcFileUpload.PhaseYear;
                imsEcFileUpload.IMS_BATCH = modelImsEcFileUpload.Batch == 0 ? null : modelImsEcFileUpload.Batch;
                imsEcFileUpload.MAST_AGENCY_CODE = modelImsEcFileUpload.Mast_Agency;
                imsEcFileUpload.IMS_FILE_NAME = (modelImsEcFileUpload.ImsFileName == null ? "NA" : modelImsEcFileUpload.ImsFileName.ToString());
                imsEcFileUpload.IMS_FILE_PATH = (modelImsEcFileUpload.ImsFilePath == null ? "NA" : modelImsEcFileUpload.ImsFilePath.ToString());
                imsEcFileUpload.IMS_FILE_TYPE = modelImsEcFileUpload.ImsFileType;
                imsEcFileUpload.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                imsEcFileUpload.USERID = PMGSYSession.Current.UserId;
                imsEcFileUpload.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                return imsEcFileUpload;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "CloneModelToObjectImsFileUpload()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #region File Details

        public string AddECFileUploadDetailsDAL(IMSECFileImageUploadViewModel imsEcFileUploadModel)
        {
            try
            {
                int fileCode = 0;
                dbContext = new PMGSYEntities();
                //encryptedParameters = imsEcFileUploadModel.EncryptedFileId.Split('/');
                //if (!(encryptedParameters.Length == 3))
                //{
                //    return ("An Error Occurred While Your Processing Request.");
                //}

                //decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                //fileCode = Convert.ToInt32(decryptedParameters["FileCode"].ToString());

                IMS_EC_FILE_UPLOAD qualityMonitorModel = dbContext.IMS_EC_FILE_UPLOAD.Where(m => m.MAST_FILE_ID == imsEcFileUploadModel.MAST_File_ID).FirstOrDefault();

                if (qualityMonitorModel == null)
                {
                    return ("An Error Occurred While Your Processing Request.");
                }
                else
                {
                    qualityMonitorModel.IMS_FILE_NAME = imsEcFileUploadModel.name;
                    qualityMonitorModel.IMS_FILE_PATH = imsEcFileUploadModel.ImsFilePath;
                    //Added by abhishek kamble 27-nov-2013
                    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                    //image upload
                    //if (imsEcFileUploadModel.file_type == "I")
                    //{
                    //    qualityMonitorModel.ADMIN_QM_IMAGE = imsEcFileUploadModel.name;

                    //    //Added by abhishek kamble 27-nov-2013
                    //    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    //    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    //    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    //    dbContext.SaveChanges();
                    //    return string.Empty;
                    //}//Document Upload
                    //else if (imsEcFileUploadModel.file_type == "D")
                    //{
                    //    qualityMonitorModel.ADMIN_QM_DOCPATH = imsEcFileUploadModel.name;

                    //    //Added by abhishek kamble 27-nov-2013
                    //    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    //    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    //    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    //    dbContext.SaveChanges();
                    //    return string.Empty;
                    //}

                }
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //For Listing the Images 
        public Array GetECFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int fileCode)
        {
            try
            {
                dbContext = new PMGSYEntities();

                List<IMS_EC_FILE_UPLOAD> listQualityMonitorsFiles = dbContext.IMS_EC_FILE_UPLOAD.Where(p => p.MAST_FILE_ID == fileCode && (p.IMS_FILE_NAME != null || p.IMS_FILE_NAME != "NA")).ToList();
                IQueryable<IMS_EC_FILE_UPLOAD> query = listQualityMonitorsFiles.AsQueryable<IMS_EC_FILE_UPLOAD>();
                totalRecords = listQualityMonitorsFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD"];

                return query.Select(fileDetails => new
                {
                    id = fileDetails.MAST_FILE_ID,
                    cell = new[] {
                                    Path.Combine(VirtualDirectoryUrl, fileDetails.IMS_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.IMS_FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('"+ fileDetails.MAST_FILE_ID.ToString().Trim() + "','" + fileDetails.MAST_FILE_ID+ "'); return false;>Delete</a>",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        //For Listing the Document Files
        public Array GetECPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int FileCODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<IMS_EC_FILE_UPLOAD> listQualityMonitorFiles = dbContext.IMS_EC_FILE_UPLOAD.Where(p => p.MAST_FILE_ID == FileCODE && (p.IMS_FILE_PATH != null || p.IMS_FILE_PATH != "NA")).ToList();
                IQueryable<IMS_EC_FILE_UPLOAD> query = listQualityMonitorFiles.AsQueryable<IMS_EC_FILE_UPLOAD>();
                totalRecords = listQualityMonitorFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_PDF_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_PDF_FILE_UPLOAD"];

                return query.Select(fileDetails => new
                {
                    id = fileDetails.MAST_FILE_ID,
                    cell = new[] {
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.IMS_FILE_PATH}),
                                    "<a href='#' title='Click here to delete the File' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('"  + fileDetails.MAST_FILE_ID.ToString().Trim() + "','" + fileDetails.IMS_FILE_PATH+"'); return false;'>Delete</a>",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        // Delete both PDF and Image Files
        public string DeleteECFileDetailsDAL(int EcFileCode, string FILE_NAME)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == EcFileCode && m.ADMIN_QM_IMAGE == FILE_NAME).FirstOrDefault();

                if (qualityMonitorModel == null)
                {
                    return "There is an error while processing request.";
                }
                else
                {
                    //  qualityMonitorModel.ADMIN_QM_IMAGE = null;
                    qualityMonitorModel.ADMIN_QM_IMAGE = null;
                    //Added by abhishek kamble 27-nov-2013
                    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string DeleteECPdfFileDetailsDAL(int ADMIN_QM_CODE, string FILE_NAME)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == ADMIN_QM_CODE && m.ADMIN_QM_DOCPATH == FILE_NAME).FirstOrDefault();

                if (qualityMonitorModel == null)
                {
                    return "There is an error while processing request.";
                }
                else
                {
                    qualityMonitorModel.ADMIN_QM_DOCPATH = null;

                    //Added by abhishek kamble 27-nov-2013
                    qualityMonitorModel.USERID = PMGSYSession.Current.UserId;
                    qualityMonitorModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(qualityMonitorModel).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //public QualityMonitorFileUploadViewModel GetQuality

        #endregion
        #endregion

        #region  IMS EC Training
        public bool AddImsEcTrainingDAL(IMSEcTrainingViewModel imsEcTraining, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();


                recordCount = dbContext.IMS_EC_TRAININGS.Where(m => m.MAST_STATE_CODE == imsEcTraining.StateCode && m.IMS_YEAR == imsEcTraining.PhaseYear && m.MAST_DESIG_CODE == imsEcTraining.Mast_Designation).Count();

                if (recordCount > 0)
                {
                    message = "Traning details already exist.";
                    return false;
                }
                IMS_EC_TRAININGS EcFileUpload = CloneModelToObjectImsTraining(new IMS_EC_TRAININGS(), imsEcTraining);
                dbContext = new PMGSYEntities();
                EcFileUpload.MAST_TRAINING_ID = dbContext.IMS_EC_TRAININGS.Max(cp => (Int32?)cp.MAST_TRAINING_ID) == null ? 1 : (Int32)dbContext.IMS_EC_TRAININGS.Max(cp => (Int32?)cp.MAST_TRAINING_ID) + 1;
                dbContext.IMS_EC_TRAININGS.Add(EcFileUpload);
                dbContext.SaveChanges();
                return true;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListImsEcTrainingDAL(int stateCode, int year, int desigCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from trianing in dbContext.IMS_EC_TRAININGS
                           join state in dbContext.MASTER_STATE on trianing.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join desig in dbContext.MASTER_DESIGNATION on trianing.MAST_DESIG_CODE equals desig.MAST_DESIG_CODE
                           where
                          (stateCode == 0 ? 1 : trianing.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                          (desigCode == 0 ? 1 : trianing.MAST_DESIG_CODE) == (desigCode == 0 ? 1 : desigCode) &&
                          (year == 0 ? 1 : trianing.IMS_YEAR) == (year == 0 ? 1 : year) //&&
                           // trianing.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                           select new
                           {
                               trianing.MAST_TRAINING_ID,
                               state.MAST_STATE_NAME,
                               desig.MAST_DESIG_NAME,
                               desig.MAST_DESIG_TYPE,
                               trianing.IMS_YEAR,
                               trianing.IMS_TOTAL_PERSONS
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                            default:
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(filelist => new
                {

                    filelist.MAST_TRAINING_ID,
                    filelist.MAST_STATE_NAME,
                    filelist.MAST_DESIG_NAME,
                    filelist.MAST_DESIG_TYPE,
                    filelist.IMS_YEAR,
                    filelist.IMS_TOTAL_PERSONS,


                }).ToArray();


                return result.Select(checklistDetails => new
                {
                    id = checklistDetails.MAST_TRAINING_ID.ToString().Trim(),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{
                   checklistDetails.MAST_STATE_NAME == null?string.Empty:checklistDetails.MAST_STATE_NAME.ToString(),
                   checklistDetails.IMS_YEAR.ToString(),
                   checklistDetails.MAST_DESIG_NAME == null?string.Empty:checklistDetails.MAST_DESIG_NAME.ToString(),
                   checklistDetails.IMS_TOTAL_PERSONS.ToString(),
                    URLEncrypt.EncryptParameters1(new string[]{"TrainingCode=" + checklistDetails.MAST_TRAINING_ID.ToString().Trim()}),
                 // adminDetails.MAST_AGENCY_TYPE.ToString()=="O"?URLEncrypt.EncryptParameters1(new string[]{"AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim(),"StateCode =" + adminDetails.MAST_STATE_CODE.ToString().Trim(),"StateName =" + adminDetails.MAST_STATE_NAME.ToString().Trim(),"AdminName =" + adminDetails.ADMIN_ND_NAME.ToString().Replace("/","")}):string.Empty,
               
         
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool DeleteImsTrainingDAL(int TrainingCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_EC_TRAININGS trainingModel = dbContext.IMS_EC_TRAININGS.Where(m => m.MAST_TRAINING_ID == TrainingCode).FirstOrDefault();
                //Added by abhishek kamble 27-nov-2013
                trainingModel.USERID = PMGSYSession.Current.UserId;
                trainingModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(trainingModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.IMS_EC_TRAININGS.Remove(trainingModel);
                dbContext.SaveChanges();
                message = "Training  details deleted successfully.";
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditImsTrainingDAL(IMSEcTrainingViewModel imsEcTrainingModel, ref string message)
        {
            try
            {

                int recordCount = 0;

                int fileCode = 0;
                dbContext = new PMGSYEntities();
                encryptedParameters = imsEcTrainingModel.EncryptedMastTrainingId.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                fileCode = Convert.ToInt32(decryptedParameters["TrainingCode"].ToString());

                recordCount = dbContext.IMS_EC_TRAININGS.Where(m => m.MAST_STATE_CODE == imsEcTrainingModel.StateCode && m.IMS_YEAR == imsEcTrainingModel.PhaseYear && m.MAST_DESIG_CODE == imsEcTrainingModel.Mast_Designation && m.MAST_TRAINING_ID != fileCode).Count();

                if (recordCount > 0)
                {
                    message = "Training details already exist.";
                    return false;
                }

                IMS_EC_TRAININGS trainingModel = dbContext.IMS_EC_TRAININGS.Where(m => m.MAST_TRAINING_ID == fileCode).FirstOrDefault();
                trainingModel = CloneModelToObjectImsTraining(trainingModel, imsEcTrainingModel);
                dbContext = new PMGSYEntities();
                dbContext.Entry(trainingModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (UpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public IMSEcTrainingViewModel GetImsEcTrainingDetailsDAL(int trainingCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions commonFunctions = new CommonFunctions();
                IMS_EC_TRAININGS admin = dbContext.IMS_EC_TRAININGS.Where(m => m.MAST_TRAINING_ID == trainingCode).FirstOrDefault();
                IMSEcTrainingViewModel model = null;
                if (admin != null)
                {
                    model = new IMSEcTrainingViewModel()
                    {
                        EncryptedMastTrainingId = URLEncrypt.EncryptParameters1(new string[] { "TrainingCode=" + admin.MAST_TRAINING_ID.ToString().Trim() }),
                        StateCode = admin.MAST_STATE_CODE,
                        PhaseYear = admin.IMS_YEAR,
                        Mast_Designation = admin.MAST_DESIG_CODE,
                        IMS_TOTAL_PERSON = admin.IMS_TOTAL_PERSONS,
                        StateName = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == admin.MAST_STATE_CODE).Select(a => a.MAST_STATE_NAME).FirstOrDefault(),
                        Designation_Name = dbContext.MASTER_DESIGNATION.Where(a => a.MAST_DESIG_CODE == admin.MAST_DESIG_CODE).Select(a => a.MAST_DESIG_NAME).FirstOrDefault(),
                        Mast_DesignationList = commonFunctions.PopulateDesignationSpecific(false)
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public IMS_EC_TRAININGS CloneModelToObjectImsTraining(IMS_EC_TRAININGS imsEcFileUpload, IMSEcTrainingViewModel modelImsEcFileUpload)
        {
            try
            {

                imsEcFileUpload.MAST_STATE_CODE = modelImsEcFileUpload.StateCode;
                imsEcFileUpload.IMS_YEAR = modelImsEcFileUpload.PhaseYear;
                imsEcFileUpload.MAST_DESIG_CODE = modelImsEcFileUpload.Mast_Designation;
                imsEcFileUpload.IMS_TOTAL_PERSONS = modelImsEcFileUpload.IMS_TOTAL_PERSON;
                //imsEcFileUpload.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                imsEcFileUpload.USERID = PMGSYSession.Current.UserId;
                imsEcFileUpload.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                return imsEcFileUpload;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region Quality Inspection & ATR Deletions

        /// <summary>
        /// Inspection Details Lising
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array QMViewInspectionDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                int toMonth, int toYear, string qmType)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();
            Int32 ImageCount = 0;
            try
            {
                if (qmType.Equals("I"))
                {

                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "NQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }
                else if (qmType.Equals("S"))
                {
                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }

                scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", "A", stateCode, 0, qmType, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme), PMGSYSession.Current.RoleCode, "0", "0", "0").ToList<qm_inspection_list_Result>();
                totalRecords = scheduleItemList.Count();

                return scheduleItemList.Select(schRoadDetails => new
                {
                    id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                    schRoadDetails.MONITOR_NAME,
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,
                                    schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                    (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                    schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                    schRoadDetails.IMS_ISCOMPLETED,
                                    schRoadDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                    schRoadDetails.PMGSY_SCHEME,
                                    schRoadDetails.OVERALL_GRADE,
                                    schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                    schRoadDetails.UPLOAD_BY,
                                    "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                    "<a href='#' title='Click here to correct details' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowCorrectionDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + "\"); return false;'>Correction</a>",
                                    (schRoadDetails.NO_OF_PHOTO_UPLOADED < ImageCount ) ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadQMFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"\",\"" + schRoadDetails.ADMIN_SCHEDULE_CODE.ToString().Trim() +"\",\"" +  schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "\"); return false;'>Upload</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    "<a href='#' title='Click here to delete inspection details' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteInspection(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>Delete</a>"
                        }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// ATR Details List
        /// </summary>
        /// <param name="stateCode"></param>
        /// <param name="monitorCode"></param>
        /// <param name="fromMonth"></param>
        /// <param name="fromYear"></param>
        /// <param name="toMonth"></param>
        /// <param name="toYear"></param>
        /// <param name="atrStatus"></param>
        /// <param name="rdStatus"></param>
        /// <returns></returns>
        public List<qm_inspection_list_atr_Result> ATRDetailsDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                               int toMonth, int toYear, string atrStatus, string rdStatus)
        {
            List<qm_inspection_list_atr_Result> atrItemList = new List<qm_inspection_list_atr_Result>();
            dbContext = new PMGSYEntities();
            try
            {
                atrItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, 0).ToList<qm_inspection_list_atr_Result>();
                return atrItemList;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion

        #region MAINTENANCE_POLICY_UPLOAD

        /// <summary>
        /// saves the record of maintenance policy
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddMaintenancePolicyDAL(MaintenancePolicyViewModel model, ref string message)
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    CommonFunctions objCommon = new CommonFunctions();

                    IMS_MAINTENANCE_POLICY_FILE_UPLOAD policyDetails = new IMS_MAINTENANCE_POLICY_FILE_UPLOAD();

                    if (dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Any(m => m.MAST_STATE_CODE == model.MAST_STATE_CODE && m.MAST_AGENCY_CODE == model.MAST_AGENCY_CODE && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme && m.IMS_FILE_TYPE == model.IMS_FILE_TYPE))
                    {
                        message = "Maintenance Policy details already exist.";
                        return false;
                    }

                    if (dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Any())
                    {
                        policyDetails.MAST_FILE_ID = dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Max(m => m.MAST_FILE_ID) + 1;
                    }
                    else
                    {
                        policyDetails.MAST_FILE_ID = 1;
                    }

                    policyDetails.IMS_FILE_NAME = model.IMS_FILE_NAME;
                    policyDetails.IMS_FILE_PATH = model.IMS_FILE_PATH;
                    policyDetails.IMS_FILE_TYPE = model.IMS_FILE_TYPE;
                    policyDetails.IMS_POLICY_DATE = objCommon.GetStringToDateTime(model.IMS_POLICY_DATE);
                    policyDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    policyDetails.MAST_AGENCY_CODE = model.MAST_AGENCY_CODE;
                    policyDetails.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                    policyDetails.MAST_STATE_CODE = model.MAST_STATE_CODE;
                    policyDetails.USERID = PMGSYSession.Current.UserId;
                    dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Add(policyDetails);
                    dbContext.SaveChanges();
                    return true;
                }
            }
            catch (Exception)
            {
                message = "Error occurred while processing your request.";
                return false;
            }
        }


        /// <summary>
        /// returns the list of maitenance policy
        /// </summary>
        /// <param name="stateCode"></param>
        /// <param name="agencyCode"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListMaintenancePolicyDAL(int stateCode, int agencyCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from filelist in dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD
                           join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join agency in dbContext.MASTER_AGENCY on filelist.MAST_AGENCY_CODE equals agency.MAST_AGENCY_CODE
                           where
                           (stateCode == 0 ? 1 : filelist.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode) &&
                           (agencyCode == 0 ? 1 : filelist.MAST_AGENCY_CODE) == (agencyCode == 0 ? 1 : agencyCode) &&
                           filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                           select new
                           {
                               filelist.MAST_FILE_ID,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               agency.MAST_AGENCY_TYPE,
                               filelist.IMS_FILE_TYPE,
                               filelist.IMS_FILE_NAME,
                               filelist.IMS_FILE_PATH,
                               filelist.IMS_POLICY_DATE
                           };

                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_FILE_TYPE":
                                list = list.OrderBy(x => x.IMS_FILE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_FILE_TYPE":
                                list = list.OrderByDescending(x => x.IMS_FILE_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(filelist => new
                {

                    filelist.MAST_FILE_ID,
                    filelist.MAST_STATE_NAME,
                    filelist.MAST_AGENCY_NAME,
                    filelist.MAST_AGENCY_TYPE,
                    filelist.IMS_FILE_TYPE,
                    filelist.IMS_FILE_NAME,
                    filelist.IMS_FILE_PATH,
                    filelist.IMS_POLICY_DATE

                }).ToArray();


                return result.Select(checklistDetails => new
                {
                    id = checklistDetails.MAST_FILE_ID.ToString().Trim(),
                    cell = new[]
                    {

                    checklistDetails.MAST_STATE_NAME == null?string.Empty:checklistDetails.MAST_STATE_NAME.ToString(),
                    checklistDetails.MAST_AGENCY_NAME==null?string.Empty:checklistDetails.MAST_AGENCY_NAME.ToString(),
                    checklistDetails.IMS_POLICY_DATE.ToString("dd/MM/yyyy"),
                    checklistDetails.IMS_FILE_TYPE=="HP"?"<a href='#' title='Click here to Download File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownloadFile(\"" + URLEncrypt.EncryptParameters(new string[] { checklistDetails.IMS_FILE_NAME}) +"\"); return false;'>Download</a>" : "-",
                    checklistDetails.IMS_FILE_TYPE=="HW"?"<a href='#' title='Click here to Download File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownloadFile(\"" + URLEncrypt.EncryptParameters(new string[] { checklistDetails.IMS_FILE_NAME}) +"\"); return false;'>Download</a>" : "-",
                    checklistDetails.IMS_FILE_TYPE=="EP"?"<a href='#' title='Click here to Download File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownloadFile(\"" + URLEncrypt.EncryptParameters(new string[] { checklistDetails.IMS_FILE_NAME}) +"\"); return false;'>Download</a>" : "-",
                    checklistDetails.IMS_FILE_TYPE=="EW"?"<a href='#' title='Click here to Download File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownloadFile(\"" + URLEncrypt.EncryptParameters(new string[] { checklistDetails.IMS_FILE_NAME}) +"\"); return false;'>Download</a>" : "-",
                    //checklistDetails.IMS_FILE_TYPE=="HW"?"Hindi/Regional Language Word":checklistDetails.IMS_FILE_TYPE=="HP"?"Hindi/Regional Language PDF" : checklistDetails.IMS_FILE_TYPE=="EW"?"English Word":"English PDF",
                    //checklistDetails.IMS_FILE_NAME == null?string.Empty:checklistDetails.IMS_FILE_NAME.ToString(),
                    //checklistDetails.IMS_FILE_PATH == null?string.Empty:checklistDetails.IMS_FILE_PATH.ToString(),
                    //"<a href='#' title='Click here to Download File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownloadFile(\"" + URLEncrypt.EncryptParameters(new string[] { checklistDetails.IMS_FILE_NAME}) +"\"); return false;'>Download</a>" ,
                    URLEncrypt.EncryptParameters1(new string[]{"FileCode=" + checklistDetails.MAST_FILE_ID.ToString().Trim()}),
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// deletes the details of maintenance policy
        /// </summary>
        /// <param name="FileCode"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool DeleteMaintenancePolicyDAL(int FileCode, ref string message)
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    IMS_MAINTENANCE_POLICY_FILE_UPLOAD policyDetails = dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Find(FileCode);

                    if (policyDetails != null)
                    {
                        policyDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        policyDetails.USERID = PMGSYSession.Current.UserId;
                        dbContext.Entry(policyDetails).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();

                        dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Remove(policyDetails);
                        dbContext.SaveChanges();
                        return true;
                    }
                    else
                    {
                        message = "Maintenance Policy details not found.";
                        return false;
                    }
                }
            }
            catch (Exception)
            {
                message = "Error occurred while processing your request.";
                return false;
            }
        }

        /// <summary>
        /// updates the maintenance policy details
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditMaintenancePolicyDAL(MaintenancePolicyViewModel model, ref string message)
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    IMS_MAINTENANCE_POLICY_FILE_UPLOAD policyDetails = dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Find(model.MAST_FILE_ID);

                    policyDetails.IMS_FILE_NAME = model.IMS_FILE_NAME;
                    policyDetails.IMS_FILE_PATH = model.IMS_FILE_PATH;
                    policyDetails.IMS_FILE_TYPE = model.IMS_FILE_TYPE;
                    policyDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    policyDetails.MAST_AGENCY_CODE = model.MAST_AGENCY_CODE;
                    policyDetails.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                    policyDetails.MAST_STATE_CODE = model.MAST_STATE_CODE;
                    policyDetails.USERID = PMGSYSession.Current.UserId;
                    dbContext.Entry(policyDetails).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return true;
                }
            }
            catch (Exception)
            {
                message = "Error occurred while processing your request.";
                return false;
            }
        }

        /// <summary>
        /// returns the maintenance policy details for updation
        /// </summary>
        /// <param name="fileCode"></param>
        /// <returns></returns>
        public MaintenancePolicyViewModel GetMaintenancePolicyDetailsDAL(int fileCode)
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    MaintenancePolicyViewModel model = new MaintenancePolicyViewModel();
                    IMS_MAINTENANCE_POLICY_FILE_UPLOAD policyDetails = dbContext.IMS_MAINTENANCE_POLICY_FILE_UPLOAD.Find(fileCode);
                    if (policyDetails != null)
                    {
                        model.MAST_STATE_CODE = policyDetails.MAST_STATE_CODE;
                        model.MAST_AGENCY_CODE = policyDetails.MAST_AGENCY_CODE;
                        model.IMS_FILE_TYPE = policyDetails.IMS_FILE_TYPE;
                        model.IMS_FILE_NAME = policyDetails.IMS_FILE_NAME;
                        model.IMS_FILE_PATH = policyDetails.IMS_FILE_PATH;
                        model.Operation = "U";
                        return model;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        #endregion

        #region BLOCKING AND LISTING FOR QUALITY MONITOR
        //by pradip  29-12-2016
        public bool BlockQualityMonitor(string PAN)
        {
            dbContext = new PMGSYEntities();
            try
            {
                encryptedParameters = PAN.Split('/');

                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                String decryptedPAN = decryptedParameters["PAN"].ToString();

                // if QM registered as NQM and SQM both ..(toList())
                List<ADMIN_QUALITY_MONITORS> modelList = dbContext.ADMIN_QUALITY_MONITORS.Where(s => s.ADMIN_QM_PAN == decryptedPAN).ToList();
                foreach (var item in modelList)
                {
                    dbContext.ADMIN_QUALITY_MONITORS.Attach(item);
                    item.ADMIN_QM_EMPANELLED = "B";
                    // dbContext.Entry(model).State =System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                }
                return true;
            }
            catch (Exception ex)
            {
                string msg = ex.Message.ToString();
                return false;
            }

        }

        //By Pradip 29-12-2016 Start Here

        public Array ListBlockedQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {

            try
            {
                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string firstName = string.Empty;
                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "ADMIN_QM_FNAME":
                                firstName = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                qmTypeName = qmTypeName.Replace("%", "");
                dbContext = new PMGSYEntities();
                var lstQualityMonitorDetails = (from qualityMonitor in dbContext.ADMIN_QUALITY_MONITORS
                                                join state in dbContext.MASTER_STATE
                                                on (qualityMonitor.MAST_STATE_CODE_ADDR == null ? qualityMonitor.MAST_STATE_CODE : qualityMonitor.MAST_STATE_CODE_ADDR) equals state.MAST_STATE_CODE into outerState
                                                from state in outerState.DefaultIfEmpty()
                                                join district in dbContext.MASTER_DISTRICT
                                                on qualityMonitor.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into outerDistrict
                                                from district in outerDistrict.DefaultIfEmpty()
                                                join designation in dbContext.MASTER_DESIGNATION
                                                on qualityMonitor.ADMIN_QM_DESG equals designation.MAST_DESIG_CODE into outerDesignation
                                                from designation in outerDesignation.DefaultIfEmpty()
                                                where (
                                               //((firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper())) &&
                                               //((qmTypeName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_TYPE.ToUpper()).StartsWith(qmTypeName == string.Empty ? "%" : qmTypeName.ToUpper()))

                                               ((firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                                (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_MNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                                (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_LNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper())) &&

                                                //((qmTypeName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_TYPE.ToUpper()).StartsWith(qmTypeName == string.Empty ? "%" : qmTypeName.ToUpper()))

                                                ((stateCode == 0 ? 1 : state.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode))

                                                &&
                                                ((districtCode == 0 ? 1 : district.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode))
                                                &&
                                                (qualityMonitor.ADMIN_QM_EMPANELLED == isEmpanelled)
                                                )
                                                select new
                                                {
                                                    state.MAST_STATE_NAME,
                                                    district.MAST_DISTRICT_NAME,
                                                    designation.MAST_DESIG_NAME,
                                                    qualityMonitor.ADMIN_QM_CODE,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED_MONTH,

                                                    qualityMonitor.ADMIN_QM_FNAME,
                                                    qualityMonitor.ADMIN_QM_MNAME,
                                                    qualityMonitor.ADMIN_QM_LNAME,
                                                    qualityMonitor.ADMIN_QM_ADDRESS1,
                                                    qualityMonitor.ADMIN_QM_ADDRESS2,
                                                    qualityMonitor.ADMIN_QM_PIN,
                                                    qualityMonitor.ADMIN_QM_STD1,
                                                    qualityMonitor.ADMIN_QM_STD2,
                                                    qualityMonitor.ADMIN_QM_PHONE1,
                                                    qualityMonitor.ADMIN_QM_PHONE2,
                                                    qualityMonitor.ADMIN_QM_STD_FAX,
                                                    qualityMonitor.ADMIN_QM_FAX,
                                                    qualityMonitor.ADMIN_QM_MOBILE1,
                                                    qualityMonitor.ADMIN_QM_MOBILE2,
                                                    qualityMonitor.ADMIN_QM_EMAIL,
                                                    qualityMonitor.ADMIN_QM_PAN,
                                                    qualityMonitor.ADMIN_QM_PAN_FILE,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED_YEAR,
                                                    qualityMonitor.ADMIN_QM_REMARKS,
                                                    qualityMonitor.ADMIN_QM_TYPE,
                                                    qualityMonitor.ADMIN_QM_IMAGE,
                                                    qualityMonitor.ADMIN_USER_ID,
                                                    qualityMonitor.ADMIN_QM_DOCPATH,
                                                    qualityMonitor.ADMIN_QM_BIRTH_DATE,
                                                    qualityMonitor.ADMIN_QM_AADHAR_NO
                                                }).ToList();
                totalRecords = lstQualityMonitorDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_DISTRICT_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_FNAME":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Address":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_DESG":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_PIN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_PIN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_FAX":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_MOBILE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_MOBILE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_EMAIL":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "PAN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED_YEAR":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Remarks":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_TYPE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "MAST_STATE_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_DISTRICT_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_FNAME":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Address":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_ADDRESS1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_DESG":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_DESIG_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_PIN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_PIN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_PHONE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            case "ADMIN_QM_FAX":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_STD_FAX).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE1":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_MOBILE1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_MOBILE2":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_MOBILE2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ADMIN_QM_EMAIL":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMAIL).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "PAN":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_PAN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_EMPANELLED_YEAR":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "Remarks":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_EMPANELLED_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_TYPE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                }

                //Added By Abhishek to show image files
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD"];

                CommonFunctions commonFunction = new CommonFunctions();

                return lstQualityMonitorDetails.Select(item => new
                {

                    cell = new[]{
                                item.ADMIN_QM_IMAGE==null?"":Path.Combine(VirtualDirectoryUrl, item.ADMIN_QM_IMAGE.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME==null?"":item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME,
                                item.MAST_STATE_NAME==null?"-": item.MAST_STATE_NAME.Trim(),

                                item.MAST_DESIG_NAME==null?"-":item.MAST_DESIG_NAME,
                               // ((item.ADMIN_QM_ADDRESS1+""+item.ADMIN_QM_ADDRESS2)==string.Empty?"-":"Address:-"+(item.ADMIN_QM_ADDRESS1+" "+item.ADMIN_QM_ADDRESS2+",  "))+(item.ADMIN_QM_STD1==null?string.Empty:"Phone1:-"+item.ADMIN_QM_STD1.ToString().Trim()+"-")+(item.ADMIN_QM_PHONE1==null?"-":(item.ADMIN_QM_PHONE1.ToString().Trim())+",  ")+(item.ADMIN_QM_STD2==null?string.Empty:"Phone2:-"+(item.ADMIN_QM_STD2.ToString().Trim())+"-")+(item.ADMIN_QM_PHONE2==null?string.Empty:(item.ADMIN_QM_PHONE2.ToString().Trim())+",  ")+(item.ADMIN_QM_STD_FAX==null?string.Empty:"Fax:-"+(item.ADMIN_QM_STD_FAX.ToString().Trim())+"-")+(item.ADMIN_QM_FAX==null?string.Empty:(item.ADMIN_QM_FAX.ToString().Trim())+",  ")+(item.ADMIN_QM_MOBILE1==null?string.Empty:"Mobile1:-"+(item.ADMIN_QM_MOBILE1.Trim())+",  ")+(item.ADMIN_QM_MOBILE2==null?string.Empty:"Mobile2:-"+ (item.ADMIN_QM_MOBILE2.ToString().Trim())+",  ")+(item.ADMIN_QM_EMAIL==null?string.Empty:"Email:-"+(item.ADMIN_QM_EMAIL.ToString().Trim()+",  ")+(item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+(item.MAST_DISTRICT_NAME.ToString())+",  ")+(item.ADMIN_QM_PIN==null?string.Empty:"PIN Code:-"+(item.ADMIN_QM_PIN.ToString()))) ,                                                          
                                ((item.ADMIN_QM_ADDRESS1+""+item.ADMIN_QM_ADDRESS2)==string.Empty?"-":"Address:-"+(item.ADMIN_QM_ADDRESS1+" "+item.ADMIN_QM_ADDRESS2+",  ")) + ((item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+(item.MAST_DISTRICT_NAME.ToString())+",  ")+(item.ADMIN_QM_PIN==null?string.Empty:"PIN Code:-"+(item.ADMIN_QM_PIN.ToString()))) ,
                                ((item.ADMIN_QM_STD1==null?string.Empty:"Phone1:-"+item.ADMIN_QM_STD1.ToString().Trim()+"-")+(item.ADMIN_QM_PHONE1==null?"-":(item.ADMIN_QM_PHONE1.ToString().Trim())+",  ")+(item.ADMIN_QM_STD2==null?string.Empty:"Phone2:-"+(item.ADMIN_QM_STD2.ToString().Trim())+"-")+(item.ADMIN_QM_PHONE2==null?string.Empty:(item.ADMIN_QM_PHONE2.ToString().Trim())+",  ")+(item.ADMIN_QM_STD_FAX==null?string.Empty:"Fax:-"+(item.ADMIN_QM_STD_FAX.ToString().Trim())+"-")+(item.ADMIN_QM_FAX==null?string.Empty:(item.ADMIN_QM_FAX.ToString().Trim())+",  ")+(item.ADMIN_QM_MOBILE1==null?string.Empty:"Mobile1:-"+(item.ADMIN_QM_MOBILE1.Trim())+",  ")+(item.ADMIN_QM_MOBILE2==null?string.Empty:"Mobile2:-"+ (item.ADMIN_QM_MOBILE2.ToString().Trim())+",  ")),
                                ((item.ADMIN_QM_EMAIL==null?string.Empty:"Email:-"+(item.ADMIN_QM_EMAIL.ToString().Trim()+",  "))),
                                (item.ADMIN_QM_PAN==null?"-":(item.ADMIN_QM_PAN.Trim()==string.Empty?"---":item.ADMIN_QM_PAN.Trim())),

                                (item.ADMIN_QM_AADHAR_NO==null?"---":(item.ADMIN_QM_AADHAR_NO.Trim()==string.Empty?"-":item.ADMIN_QM_AADHAR_NO.Trim())),

                                (item.ADMIN_QM_BIRTH_DATE==null?"---":commonFunction.GetDateTimeToString((DateTime)item.ADMIN_QM_BIRTH_DATE)),
 
                              //  item.ADMIN_QM_EMPANELLED=="N"?"No":"Yes",                                
                                ( (item.ADMIN_QM_EMPANELLED_MONTH==null || item.ADMIN_QM_EMPANELLED_MONTH==0)?" ":CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(item.ADMIN_QM_EMPANELLED_MONTH.Value))+(item.ADMIN_QM_EMPANELLED_YEAR==null?"-":item.ADMIN_QM_EMPANELLED_YEAR.ToString()),
                                item.ADMIN_QM_REMARKS==null?"-":(item.ADMIN_QM_REMARKS.Trim()==string.Empty?"-":item.ADMIN_QM_REMARKS.Trim()),
                                dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                         item.ADMIN_QM_TYPE.Trim()=="I"?
                                                                                                                                         (  dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                         "-":  dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault())


                                                                                                                                        : item.ADMIN_QM_TYPE.Trim()=="S"?
                                                                                                                                        (item.ADMIN_QM_EMPANELLED=="Y"?
                                                                                                                                        ("<center><table><tr> <td  style='border:none'><span class='ui-icon ui-icon-circle-plus' title='Generate user id' onClick ='AddSQMUserLoginDetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "QmCode="+item.ADMIN_QM_CODE.ToString().Trim()}) + "\");'></span></td></table></center>")
                                                                                                                                        :"<span class='ui-icon ui-icon-locked ui-align-center'></span>")
                                                                                                                                        :dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                        "-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()

                                                                                                                                        :dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null?
                                                                                                                                         "-":dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()
                                                                                                                                        ,
                                item.ADMIN_QM_TYPE==null?"-":(item.ADMIN_QM_TYPE.Trim()==string.Empty?"-":item.ADMIN_QM_TYPE.Trim()=="I"?"NQM":"SQM"),
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        #endregion

        #region MATRIX PARAMETERS

        /// <summary>
        /// List Matrix Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListMatrixDetails(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {

                var matrixParams = (from item in dbContext.MASTER_MATRIX_PARAMETERS
                                    select new
                                    {
                                        item.MAST_MATRIX_ID,
                                        item.MAST_MATRIX_NO,
                                        item.MAST_MATRIX_PARAMETER,
                                        item.MAST_MATRIX_WEIGHT
                                    }).ToList();
                totalRecords = matrixParams.Count();

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_MATRIX_NO":
                                matrixParams = matrixParams.OrderBy(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                matrixParams = matrixParams.OrderBy(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_MATRIX_NO":
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;


                            default:
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }



                return matrixParams.Select(Details => new
                {
                    cell = new[]{                                        
                    //Details.MAST_MATRIX_ID.ToString(),                    
                      Details.MAST_MATRIX_NO,
                      Details.MAST_MATRIX_PARAMETER,
                      Details.MAST_MATRIX_WEIGHT.ToString(),
                    URLEncrypt.EncryptParameters1(new String[]{"MatrixCode="+Details.MAST_MATRIX_ID.ToString()}),
                    URLEncrypt.EncryptParameters1(new String[]{"MatrixCode="+Details.MAST_MATRIX_ID.ToString()}),
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        /// <summary>
        /// Save Carriage Details.
        /// </summary>
        /// <param name="carriageViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddMatrixParamDetails(MatrixParamModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_MATRIX_PARAMETERS Matrixmodel = new MASTER_MATRIX_PARAMETERS();

                //validation 
                if (dbContext.MASTER_MATRIX_PARAMETERS.Where(m => m.MAST_MATRIX_PARAMETER.Trim() == model.parameterValue.Trim() || (m.MAST_MATRIX_NO.Equals(model.matrixNo))).Any())
                {
                    message = "Parameter Details already exist.";
                    return false;
                }

                if (dbContext.MASTER_MATRIX_PARAMETERS.Any())
                {
                    Matrixmodel.MAST_MATRIX_ID = dbContext.MASTER_MATRIX_PARAMETERS.Max(m => m.MAST_MATRIX_ID) + 1;
                }
                else
                {
                    Matrixmodel.MAST_MATRIX_ID = 1;
                }
                Matrixmodel.MAST_MATRIX_NO = model.matrixNo;
                Matrixmodel.MAST_MATRIX_PARAMETER = model.parameterValue;
                Matrixmodel.MAST_MATRIX_WEIGHT = model.Weight;

                string matrixCode = model.matrixNo.Substring(0, 1);

                MASTER_MATRIX_PARAMETERS parent = dbContext.MASTER_MATRIX_PARAMETERS.Where(s => s.MAST_MATRIX_NO == matrixCode).FirstOrDefault();

                Matrixmodel.MAST_MATRIX_PARENT_ID = parent.MAST_MATRIX_ID;

                dbContext.MASTER_MATRIX_PARAMETERS.Add(Matrixmodel);
                dbContext.SaveChanges();
                message = "Parameters Details saved successfully.";
                return true;
            }
            catch (Exception ex)
            {
                // Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                    dbContext.Dispose();
            }
        }


        public bool DeleteMatrixParamDetails(int matrixId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                MASTER_MATRIX_PARAMETERS mastermatrixModel = dbContext.MASTER_MATRIX_PARAMETERS.Find(matrixId);
                dbContext.MASTER_MATRIX_PARAMETERS.Remove(mastermatrixModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        /// <summary>
        /// Display parameters Details
        /// </summary>
        /// <param name="matrixCode"></param>
        /// <returns></returns>
        public MatrixParamModel GetMatrixParamDetails(int matrixCode)
        {
            dbContext = new PMGSYEntities();
            using (TransactionScope scope = new TransactionScope())
            {

                try
                {
                    MASTER_MATRIX_PARAMETERS masterModel = dbContext.MASTER_MATRIX_PARAMETERS.Find(matrixCode);
                    MatrixParamModel model = new MatrixParamModel();
                    model.matrixId = masterModel.MAST_MATRIX_ID;
                    model.matrixNo = masterModel.MAST_MATRIX_NO;
                    model.parameterValue = masterModel.MAST_MATRIX_PARAMETER;
                    model.ParentId = masterModel.MAST_MATRIX_PARENT_ID;
                    model.Weight = masterModel.MAST_MATRIX_WEIGHT;
                    return model;
                }
                catch (Exception ex)
                {
                    return null;
                }
                finally
                {
                    dbContext.Dispose();
                    scope.Complete();
                }

            }
        }


        public bool EditMatrixParamDetails(MatrixParamModel model, ref string message)
        {
            dbContext = new PMGSYEntities();

            try
            {
                if (dbContext.MASTER_MATRIX_PARAMETERS.Where(m => m.MAST_MATRIX_ID != m.MAST_MATRIX_ID && m.MAST_MATRIX_NO == model.matrixNo && m.MAST_MATRIX_PARAMETER == model.parameterValue).Any())
                {
                    message = "Parameter Details already exist.";
                    return false;
                }

                MASTER_MATRIX_PARAMETERS masterMatrixModel = dbContext.MASTER_MATRIX_PARAMETERS.Find(model.matrixId);

                masterMatrixModel.MAST_MATRIX_ID = model.matrixId;
                masterMatrixModel.MAST_MATRIX_NO = model.matrixNo;
                masterMatrixModel.MAST_MATRIX_PARAMETER = model.parameterValue;
                masterMatrixModel.MAST_MATRIX_PARENT_ID = model.ParentId;
                masterMatrixModel.MAST_MATRIX_WEIGHT = model.Weight;

                dbContext.Entry(masterMatrixModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Parameter details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion

        #region STA Map Scheme

        /*Commented By Hrishikesh 26-07-2023 For Vibrant Village Mapp Scheme
        public int GetMappedSchemeDAL(int adminTAId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTAId).Select(x => x.MAST_SCHEME).FirstOrDefault();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetMappedSchemeDAL()");
                return -1;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool UpdatePMGSYSchemeDAL(int adminTAId, int mastScheme)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_TA_STATE admin_ta_state = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTAId).FirstOrDefault();

                admin_ta_state.MAST_SCHEME = mastScheme;
                admin_ta_state.USERID = PMGSYSession.Current.UserId;
                admin_ta_state.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(admin_ta_state).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetMappedSchemeDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        */

        //Added By Hrishikesh For Vibrant Village Mapp Scheme --26-07-2023-- original Method is Commented Above
        public string[] GetMappedSchemeDAL(int adminTAId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var strMastSchemeArr = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTAId).Select(x => x.STR_MAST_SCHEME).FirstOrDefault();
                string[] mastSchemeArr = new string[] { };
                if (strMastSchemeArr != null)
                {
                    mastSchemeArr = strMastSchemeArr.Split(',').ToArray();
                }

                return mastSchemeArr;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetMappedSchemeDAL()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool UpdatePMGSYSchemeDAL(int adminTAId, string strMastScheme)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ADMIN_TA_STATE admin_ta_state = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_ID == adminTAId).FirstOrDefault();

                //Changed By Hrishikesh For Vibrant Village Mapp Scheme --26-07-2023-- 
                //admin_ta_state.MAST_SCHEME = mastScheme;

                admin_ta_state.MAST_SCHEME = 0;
                admin_ta_state.STR_MAST_SCHEME = strMastScheme != "" ? strMastScheme.ToString().Trim() : "";

                admin_ta_state.USERID = PMGSYSession.Current.UserId;
                admin_ta_state.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(admin_ta_state).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                /*ErrorLog.LogError(ex, "GetMappedSchemeDAL()");*/
                //Changed By Hrishikesh For Vibrant Village Mapp Scheme --26-07-2023
                ErrorLog.LogError(ex, "UpdatePMGSYSchemeDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region PMGSY State
        public Array ListPmgsyStatesDAL(int? page, int? rows, string sidx, string sord, out long totalRecords)
{
    try
    {
        dbContext = new PMGSYEntities();
        //  var listPmgsyStates = dbContext.MASTER_PMGSY3.ToList();

        var listPmgsyStates = (from details in dbContext.MASTER_PMGSY3
                               join state in dbContext.MASTER_STATE
                               on (details.MAST_STATE_CODE) equals state.MAST_STATE_CODE into outerState
                               from state in outerState.DefaultIfEmpty()
                               select new
                               {
                                   details.MASTER_STATE.MAST_STATE_NAME,
                                   details.MAST_STATE_CODE,
                                   details.MAST_PMGSY3_ACTIVE,
                                   details.PMGSY3_DATE,
                               }).ToList();

        totalRecords = listPmgsyStates.Count();

        if (sidx.Trim() != string.Empty)
        {
            if (sord == "asc")
            {
                switch (sidx)
                {
                    case "StateName":
                        listPmgsyStates = listPmgsyStates.OrderBy(m => m.MAST_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                    default:
                        listPmgsyStates = listPmgsyStates.OrderBy(m => m.MAST_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;

                }
            }
            else
            {
                switch (sidx)
                {
                    case "StateName":
                        listPmgsyStates = listPmgsyStates.OrderByDescending(m => m.MAST_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                    default:
                        listPmgsyStates = listPmgsyStates.OrderByDescending(m => m.MAST_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                }
            }

        }
        else
        {
            listPmgsyStates = listPmgsyStates.OrderBy(m => m.MAST_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
        }
        var result = listPmgsyStates.ToArray();

        //var result = listPmgsyStates.Select(pmgsystates => new
        //{
        //    MAST_STATE_NAME = dbContext.MASTER_STATE.Where(x => x.MAST_STATE_CODE == pmgsystates.MAST_STATE_CODE).SingleOrDefault().MAST_STATE_NAME,
        //    MAST_STATE_CODE = pmgsystates.MAST_STATE_CODE,
        //    MAST_PMGSY3_ACTIVE = pmgsystates.MAST_PMGSY3_ACTIVE,
        //    PMGSY3_DATE = pmgsystates.PMGSY3_DATE,

        //}).ToArray();

        return result.Select(item => new
        {
            id = item.MAST_STATE_CODE.ToString(),
            cell = new[]
        {
            item.MAST_STATE_NAME,
            item.PMGSY3_DATE.Date.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture),
            item.MAST_PMGSY3_ACTIVE
        }

        }).ToArray();
    }
    catch (Exception ex)
    {
        totalRecords = 0;
        ErrorLog.LogError(ex, "MasterDAL.ListPmgsyStatesDAL");
        return null;
    }
    finally
    {
        if (dbContext != null)
        {
            dbContext.Dispose();
        }
    }
}

public bool AddPmgsyStateDAL(PMGSYStatesViewModel masterAgencyViewModel, ref string message)
{
    try
    {
        dbContext = new PMGSYEntities();
        foreach (int stateCode in masterAgencyViewModel.statecodes)
        {
            MASTER_PMGSY3 masterTable = new MASTER_PMGSY3();
            if (dbContext.MASTER_PMGSY3.Where(m => m.MAST_STATE_CODE == stateCode).Any())
            {// Primary Key Validation Checking
                return false;
            }
            else
            {
                masterTable.MAST_STATE_CODE = stateCode;
                masterTable.MAST_PMGSY3_ACTIVE = "Y";
                masterTable.PMGSY3_DATE = System.DateTime.Now;
                dbContext.MASTER_PMGSY3.Add(masterTable);
                dbContext.SaveChanges();
            }
        }
        return true;
    }

    catch (OptimisticConcurrencyException ex)
    {
        ErrorLog.LogError(ex, "MasterDAL.AddPmgsyStateDAL");
        return false;
    }
    catch (UpdateException ex)
    {
        ErrorLog.LogError(ex, "MasterDAL.AddPmgsyStateDAL");
        return false;
    }
    catch (Exception ex)
    {
        ErrorLog.LogError(ex, "MasterDAL.AddPmgsyStateDAL");
        return false;
    }
    finally
    {
        if (dbContext != null)
        {
            dbContext.Dispose();
        }
    }

}
#endregion


#region Financial Year Target
public Array ListFinancialYearTargetDAL(int stateCode, int year, int? page, int? rows, string sidx, string sord, out long totalRecords)
{

    try
    {

        dbContext = new PMGSYEntities();
        var FinancialTargetList = (from item in dbContext.TARGET_PMGSY_SCHEME
                                   where (item.MAST_STATE_CODE == stateCode && item.TARGET_YEAR == year)
                                   select new
                                   {
                                       item.TARGET_ID_PMGSY,
                                       // item.TARGET_YEAR,
                                       item.TARGET_MONTH,
                                       item.MAST_SCHEME,
                                       item.LENGTH_TARGET,
                                       item.HABITATION_TARGET
                                   }).ToList();



        totalRecords = FinancialTargetList.Count();

        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        return FinancialTargetList.Select(targetDetails => new
        {
            cell = new[] {
                (targetDetails.TARGET_ID_PMGSY).ToString(),
                //targetDetails.TARGET_YEAR,
                mfi.GetMonthName(targetDetails.TARGET_MONTH).ToString(),
               ((Scheme)targetDetails.MAST_SCHEME).ToString(),
                (targetDetails.LENGTH_TARGET).ToString(),
                string.IsNullOrWhiteSpace(targetDetails.HABITATION_TARGET.ToString()) ? "-" :(targetDetails.HABITATION_TARGET).ToString(),


               //"<a href='#' title='Click here to edit the Mapped Habitation Details' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditMappedHabitation(" + roadCode.ToString().Trim()  + "," + habDetails.MAST_HAB_CODE+"); return false;'>Edit</a>",

                  "<a href='#' title='Click here to delete the Financial Year Target Details' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "pmgsyId=" + targetDetails.TARGET_ID_PMGSY.ToString().Trim() }) +"\"); return false;'>Delete</a>"
            }
        }).ToArray();

    }
    catch (Exception ex)
    {
        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        totalRecords = 0;
        return null;
    }
    finally
    {

    }
}
public bool AddFinancialTargetdata(IEnumerable<FinancialYearTargetViewModel> datadetails, ref string message)
{

    try
    {
        dbContext = new PMGSYEntities();
        int count = 0;
        int FinancialdataExist = 0;
        foreach (var obj in datadetails)
        {
            FinancialdataExist = dbContext.TARGET_PMGSY_SCHEME.Where(m => m.MAST_STATE_CODE == obj.state && m.TARGET_YEAR == obj.year).Count();
            break;
        }
        if (FinancialdataExist != 0)
        {
            message = "Existing Financial Year Target for state and year is already exist.";
            return false;
        }
        foreach (var data in datadetails)
        {

            if (data.PMGSYILength != 0 || data.PMGSYILength == 0)
            {
                TARGET_PMGSY_SCHEME targetpmgsyobj = new TARGET_PMGSY_SCHEME();
                targetpmgsyobj.TARGET_ID_PMGSY = dbContext.TARGET_PMGSY_SCHEME.Any() ? dbContext.TARGET_PMGSY_SCHEME.Max(m => m.TARGET_ID_PMGSY) + 1 : 1;
                targetpmgsyobj.MAST_STATE_CODE = data.state;
                targetpmgsyobj.TARGET_YEAR = data.year;
                int iMonthNo = Convert.ToDateTime("01-" + data.Month + "-2011").Month;
                targetpmgsyobj.TARGET_MONTH = iMonthNo;
                targetpmgsyobj.MAST_SCHEME = 1;
                targetpmgsyobj.LENGTH_TARGET = data.PMGSYILength;
                targetpmgsyobj.USERID = PMGSYSession.Current.UserId;
                targetpmgsyobj.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.TARGET_PMGSY_SCHEME.Add(targetpmgsyobj);
                dbContext.SaveChanges();
                count++;
            }
            if (data.PMGSYIILength != 0 || data.PMGSYIILength == 0)
            {
                TARGET_PMGSY_SCHEME targetpmgsyobj = new TARGET_PMGSY_SCHEME();
                targetpmgsyobj.TARGET_ID_PMGSY = dbContext.TARGET_PMGSY_SCHEME.Any() ? dbContext.TARGET_PMGSY_SCHEME.Max(m => m.TARGET_ID_PMGSY) + 1 : 1;
                targetpmgsyobj.MAST_STATE_CODE = data.state;
                targetpmgsyobj.TARGET_YEAR = data.year;
                int iMonthNo = Convert.ToDateTime("01-" + data.Month + "-2011").Month;
                targetpmgsyobj.TARGET_MONTH = iMonthNo;
                targetpmgsyobj.MAST_SCHEME = 2;
                targetpmgsyobj.LENGTH_TARGET = data.PMGSYIILength;
                targetpmgsyobj.USERID = PMGSYSession.Current.UserId;
                targetpmgsyobj.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.TARGET_PMGSY_SCHEME.Add(targetpmgsyobj);
                dbContext.SaveChanges();
                count++;
            }
            if (data.RCPLWELength != 0 || data.RCPLWELength == 0)
            {
                TARGET_PMGSY_SCHEME targetpmgsyobj = new TARGET_PMGSY_SCHEME();
                targetpmgsyobj.TARGET_ID_PMGSY = dbContext.TARGET_PMGSY_SCHEME.Any() ? dbContext.TARGET_PMGSY_SCHEME.Max(m => m.TARGET_ID_PMGSY) + 1 : 1;
                targetpmgsyobj.MAST_STATE_CODE = data.state;
                targetpmgsyobj.TARGET_YEAR = data.year;
                int iMonthNo = Convert.ToDateTime("01-" + data.Month + "-2011").Month;
                targetpmgsyobj.TARGET_MONTH = iMonthNo;
                targetpmgsyobj.MAST_SCHEME = 3;
                targetpmgsyobj.LENGTH_TARGET = data.RCPLWELength;
                targetpmgsyobj.USERID = PMGSYSession.Current.UserId;
                targetpmgsyobj.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.TARGET_PMGSY_SCHEME.Add(targetpmgsyobj);
                dbContext.SaveChanges();
                count++;
            }
            if (data.PMGSYIIILength != 0 || data.PMGSYIIILength == 0)
            {
                TARGET_PMGSY_SCHEME targetpmgsyobj = new TARGET_PMGSY_SCHEME();
                targetpmgsyobj.TARGET_ID_PMGSY = dbContext.TARGET_PMGSY_SCHEME.Any() ? dbContext.TARGET_PMGSY_SCHEME.Max(m => m.TARGET_ID_PMGSY) + 1 : 1;
                targetpmgsyobj.MAST_STATE_CODE = data.state;
                targetpmgsyobj.TARGET_YEAR = data.year;
                int iMonthNo = Convert.ToDateTime("01-" + data.Month + "-2011").Month;
                targetpmgsyobj.TARGET_MONTH = iMonthNo;
                targetpmgsyobj.MAST_SCHEME = 4;
                targetpmgsyobj.LENGTH_TARGET = data.PMGSYIILength;
                targetpmgsyobj.USERID = PMGSYSession.Current.UserId;
                targetpmgsyobj.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.TARGET_PMGSY_SCHEME.Add(targetpmgsyobj);
                dbContext.SaveChanges();
                count++;
            }

        }
        return true;

    }
    catch (Exception ex)
    {
        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

        return false;
    }
    finally
    {
        dbContext.Dispose();
    }
}
public Boolean DeleteFinancialYearTargetDAL(int pmgsyID, ref string message)
{
    try
    {
        dbContext = new PMGSYEntities();


        TARGET_PMGSY_SCHEME tarobj = dbContext.TARGET_PMGSY_SCHEME.Where(c => c.TARGET_ID_PMGSY == pmgsyID).FirstOrDefault();

        dbContext.TARGET_PMGSY_SCHEME.Remove(tarobj);
        dbContext.SaveChanges();

        return true;
    }


    catch (Exception ex)
    {
        ErrorLog.LogError(ex, "DeleteFinancialYearTargetDAL()");
        message = "An Error Occurred While Your Processing Request.";
        return false;
    }
    finally
    {
        dbContext.Dispose();
    }
}
#endregion


#region Interstate Mapping

public bool MapInterStateDAL(string monitorList, string State, ref string message)
{

    try
    {
        dbContext = new PMGSYEntities();
        string[] arrParam = monitorList.Split(',');

        int[] myInts = Array.ConvertAll(arrParam, s => int.Parse(s)); // MonitorCodes
        int StateCode = Convert.ToInt32(State);


        foreach (var qmCode in myInts)
        {
            if (dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Where(m => m.ADMIN_QM_CODE == qmCode && m.ALLOWED_STATE_CODE == StateCode && m.APPROVED != "D").Any())
            {
                message = "Any of the selected monitor is already mapped to Selected State. Please select new Monitor against selected state.";
                return false;

            }
        }


        foreach (var qmCode in myInts)
        {
            ADMIN_QUALITY_MONITORS_INTER_STATE model = new ADMIN_QUALITY_MONITORS_INTER_STATE();
            model.ADMIN_QM_CODE_MAP_ID = dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Max(cp => (Int32?)cp.ADMIN_QM_CODE_MAP_ID) == null ? 1 : (Int32)dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Max(cp => (Int32?)cp.ADMIN_QM_CODE_MAP_ID) + 1;
            model.ADMIN_QM_CODE = qmCode;
            model.ALLOWED_STATE_CODE = StateCode;
            model.ASSIGNED_DATE = System.DateTime.Now;
            model.ASSIGNED_BY = PMGSYSession.Current.UserId;

            model.APPROVED_BY = null;
            model.APPROVED_DATE = null;
            model.DEACTIVATED_DATE = null;
            model.APPROVED = "N";

            dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Add(model);
            dbContext.SaveChanges();

        }



        return true;

    }
    catch (Exception ex)
    {
        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

        return false;
    }
    finally
    {
        dbContext.Dispose();
    }
}

public Array FinalListAfterMappingDAL(int? page, int? rows, string sidx, string sord, out int totalRecords)
{
    var dbContext = new PMGSYEntities();
    try
    {
        int CurrentUser = PMGSYSession.Current.UserId;
        int StateCode = PMGSYSession.Current.StateCode;
        int DefaultRoleCode = PMGSYSession.Current.RoleCode;

        //select  USERID  from omms.UM_User_Master where  Mast_State_Code=4   and DefaultRoleID=8 

        var userid = dbContext.UM_User_Master.Where(m => m.Mast_State_Code == StateCode && m.DefaultRoleID == DefaultRoleCode).Select(x => x.UserID).ToList();

        //var lstPropsoals = dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Where(m => m.ASSIGNED_BY == CurrentUser).ToList();
        var lstPropsoals = (from map in dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE
                            where userid.Contains(map.ASSIGNED_BY)
                            select map).ToList();

        if (PMGSYSession.Current.RoleCode == 9)
        {

            lstPropsoals = dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.ToList();
        }



        totalRecords = lstPropsoals.Count();

        if (sidx.Trim() != string.Empty)
        {
            if (sord.ToString() == "asc")
            {
                switch (sidx)
                {
                    case "MAST_STATE_NAME":
                        lstPropsoals = lstPropsoals.OrderBy(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                    case "MAST_DISTRICT_NAME":
                        lstPropsoals = lstPropsoals.OrderBy(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                    case "IMS_PACKAGE_ID":
                        lstPropsoals = lstPropsoals.OrderBy(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;

                    default:
                        lstPropsoals = lstPropsoals.OrderBy(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                }
            }
            else
            {
                switch (sidx)
                {
                    case "MAST_STATE_NAME":
                        lstPropsoals = lstPropsoals.OrderByDescending(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                    case "MAST_DISTRICT_NAME":
                        lstPropsoals = lstPropsoals.OrderByDescending(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                    case "IMS_PACKAGE_ID":
                        lstPropsoals = lstPropsoals.OrderByDescending(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;

                    default:
                        lstPropsoals = lstPropsoals.OrderByDescending(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                        break;
                }
            }
        }
        else
        {
            lstPropsoals = lstPropsoals.OrderBy(m => m.ALLOWED_STATE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
        }



        var result = lstPropsoals.Select(m => new
        {
            m.ADMIN_QM_CODE_MAP_ID,
            m.ALLOWED_STATE_CODE,
            m.ADMIN_QM_CODE,
            m.ASSIGNED_DATE, //= dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).SingleOrDefault().IMS_PACKAGE_ID.ToString(),
            m.ASSIGNED_BY,

            m.APPROVED_BY,
            m.APPROVED_DATE,
            m.DEACTIVATED_DATE,
            m.APPROVED
            // m.PACKAGE_COMPLETION_DATE


        }).ToArray();



        return result.Select(m => new
        {
            id = m.ADMIN_QM_CODE_MAP_ID.ToString().Trim(),
            cell = new[]
            {

                m.ALLOWED_STATE_CODE == null?"":dbContext.MASTER_STATE.Where(x=>x.MAST_STATE_CODE== m.ALLOWED_STATE_CODE).Select(x=>x.MAST_STATE_NAME).FirstOrDefault(),


                m.ADMIN_QM_CODE == null?"":dbContext.ADMIN_QUALITY_MONITORS.Where(x=>x.ADMIN_QM_CODE==m.ADMIN_QM_CODE).Select(x=>x.ADMIN_QM_FNAME).FirstOrDefault()+" "+ dbContext.ADMIN_QUALITY_MONITORS.Where(x=>x.ADMIN_QM_CODE==m.ADMIN_QM_CODE).Select(x=>x.ADMIN_QM_MNAME).FirstOrDefault()+" "+dbContext.ADMIN_QUALITY_MONITORS.Where(x=>x.ADMIN_QM_CODE==m.ADMIN_QM_CODE).Select(x=>x.ADMIN_QM_LNAME).FirstOrDefault(),

                m.ASSIGNED_DATE == null ? "-" : m.ASSIGNED_DATE.ToString().Substring(0,10),
                m.ASSIGNED_BY == null?"-": dbContext.UM_User_Master.Where(x=>x.UserID==m.ASSIGNED_BY).Select(x=>x.UserName).FirstOrDefault(),


                m.APPROVED == null?"-": (m.APPROVED.Equals("N")?"Not Approved":(m.APPROVED.Equals("Y")?"Approved":"Deactivated")),
                m.APPROVED_BY == null?"-":dbContext.UM_User_Master.Where(x=>x.UserID==m.APPROVED_BY).Select(x=>x.UserName).FirstOrDefault(),
                m.APPROVED.Equals("N")?"NA":(m.APPROVED.Equals("Y")?m.APPROVED_DATE.ToString().Substring(0,10):m.DEACTIVATED_DATE.ToString().Substring(0,10)),


                m.APPROVED.Equals("N")?"<a href='#' title='Click here to Approve Details' class='ui-icon ui-icon-unlocked ui-align-center' onClick=ApproveInsterState('" +m.ADMIN_QM_CODE_MAP_ID.ToString()+ "'); return false;>Approve</a>":(m.APPROVED.Equals("Y")?"<a href='#' title='Click here to Deactivate Details' class='ui-icon ui-icon-locked ui-align-center' onClick=DeactivateInsterState('" +m.ADMIN_QM_CODE_MAP_ID.ToString()+ "'); return false;>Deactivate</a>":"-"),
                m.APPROVED_BY == null?"<center><a href='#' title='Click here to delete details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteMapInterStateDetails('" +m.ADMIN_QM_CODE_MAP_ID.ToString()+ "'); return false;'>Delete</a>":"-"


            }
        }).ToArray();

    }
    catch (Exception ex)
    {
        ErrorLog.LogError(ex, "MasterDAL().FinalListAfterMappingDAL().DAL");
        totalRecords = 0;
        return null;
    }
    finally
    {
        if (dbContext != null)
        {
            dbContext.Dispose();
        }
    }
}

public bool ApproveInterStateDAL(int ADMIN_QM_CODE_MAP_ID, ref string message)
{
    PMGSYEntities dbContext = new PMGSYEntities();
    try
    {
        ADMIN_QUALITY_MONITORS_INTER_STATE master = dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Where(m => m.ADMIN_QM_CODE_MAP_ID == ADMIN_QM_CODE_MAP_ID).FirstOrDefault();

        if (master != null)
        {

            master.APPROVED_BY = PMGSYSession.Current.UserId;
            master.APPROVED_DATE = DateTime.Now;
            master.APPROVED = "Y";
            //     master.DEACTIVATED_DATE = null;

            dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
            dbContext.SaveChanges();


            message = "Details approved successfully.";
            return true;
        }
        else
        {
            message = "Details not approved.";
            return false;
        }
    }
    catch (Exception ex)
    {
        ErrorLog.LogError(ex, "MasterDAL().ApproveInterStateDAL()");
        message = "Error Occurred while processing your request.";
        return false;
    }
    finally
    {
        if (dbContext != null)
        {
            dbContext.Dispose();
        }
    }
}


public bool DeApproveInterStateDAL(int ADMIN_QM_CODE_MAP_ID, ref string message)
{
    PMGSYEntities dbContext = new PMGSYEntities();
    try
    {
        ADMIN_QUALITY_MONITORS_INTER_STATE master = dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Where(m => m.ADMIN_QM_CODE_MAP_ID == ADMIN_QM_CODE_MAP_ID).FirstOrDefault();

        if (master != null)
        {



            master.APPROVED = "D";
            master.DEACTIVATED_DATE = DateTime.Now;

            dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
            dbContext.SaveChanges();


            message = "Details deapproved successfully.";
            return true;
        }
        else
        {
            message = "Details not deapproved.";
            return false;
        }
    }
    catch (Exception ex)
    {
        ErrorLog.LogError(ex, "MasterDAL().DeApproveInterStateDAL()");
        message = "Error Occurred while processing your request.";
        return false;
    }
    finally
    {
        if (dbContext != null)
        {
            dbContext.Dispose();
        }
    }
}

public bool DeleteMapInterStateDetailsDAL(int ADMIN_QM_CODE_MAP_ID, ref string message)
{
    PMGSYEntities dbContext = new PMGSYEntities();
    try
    {
        ADMIN_QUALITY_MONITORS_INTER_STATE master = dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE.Where(m => m.ADMIN_QM_CODE_MAP_ID == ADMIN_QM_CODE_MAP_ID && m.APPROVED_BY == null && m.APPROVED == "N").FirstOrDefault();

        if (master != null)
        {
            dbContext.Entry(master).State = EntityState.Deleted;
            dbContext.SaveChanges();


            message = "Details deleted successfully.";
            return true;
        }
        else
        {
            message = "Details not deleted.";
            return false;
        }
    }
    catch (Exception ex)
    {
        ErrorLog.LogError(ex, "MasterDAL().DeleteMapInterStateDetailsDAL()");
        message = "Error Occurred while processing your request.";
        return false;
    }
    finally
    {
        if (dbContext != null)
        {
            dbContext.Dispose();
        }
    }
}
#endregion

}

public interface IMasterDAL
{

bool DeleteMapInterStateDetailsDAL(int ADMIN_QM_CODE_MAP_ID, ref string message);

#region CONSTRUCTION_TYPE

bool AddConstructionType(CDWorksConstructionViewModel constructionModel, ref string message);
Array ListConstructionType(int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteConstructionType(int constructionCode);
bool EditConstructionType(CDWorksConstructionViewModel constructionModel, ref string message);
CDWorksConstructionViewModel GetConstructionTypeDetails(int constructionCode);

#endregion

#region CD_WORKSTYPE

bool AddCdWorks(CDWorksViewModel cdworksViewModel, ref string message);
Array ListCdWorks(int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteCdWorks(int cdWorksCode);
bool EditCdWorks(CDWorksViewModel cdworksViewModel, ref string message);
CDWorksViewModel GetCdWorksDetails(int cdWorksCode);

#endregion

#region FUNDING_AGENCY

bool AddFundingAgency(FundingAgencyViewModel fundingModel, ref string message);
Array ListFundingAgency(int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteFundingAgency(int fundCode);
bool EditFundingAgency(FundingAgencyViewModel fundingModel, ref string message);
FundingAgencyViewModel GetFundingAgencyDetails(int fundCode);

#endregion

#region ROAD_CATEGORY

bool AddRoadCategory(RoadCategoryViewModel roadCategoryModel, ref string message);
Array ListRoadCategory(int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteRoadCategory(int roadCode);
bool EditRoadCategory(RoadCategoryViewModel roadCategoryModel, ref string message);
RoadCategoryViewModel GetRoadDetails(int roadCode);

#endregion

#region SOIL_TYPE

bool AddSoilType(SoilTypeViewModel soilTypeModel, ref string message);
Array ListSoilType(int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteSoilType(int soilCode);
bool EditSoilType(SoilTypeViewModel soilTypeModel, ref string message);
SoilTypeViewModel GetSoilDetails(int soilCode);

#endregion

#region TRAFFIC_TYPE

bool AddTrafficType(TrafficTypeViewModel trafficModel, ref string message);
Array ListTrafficType(string statusType, int page, int rows, string sidx, string sord, out long totalRecords);
Boolean DeleteTrafficType(int trafficCode);
bool EditTrafficType(TrafficTypeViewModel trafficModel, ref string message);
TrafficTypeViewModel EditTrafficType(string id);
TrafficTypeViewModel GetTrafficDetails(int trafficCode);
bool ChangeTrafficType(int trafficCode);

#endregion

#region MASTER_CONTRACTOR

bool AddContractor(MasterContractorViewModel model, ref string message);
List<MASTER_STATE> GetAllStates();
List<MASTER_DISTRICT> GetAllDistricts(int stateCode);
List<MASTER_DISTRICT> GetAllDistricts(int stateCode, int adminCode);
bool EditContractor(MasterContractorViewModel model, ref string message);
Array ListContractor(int page, int rows, string sidx, string sord, out long totalRecords);
Array GetContractorList(string state, string district, string contractorName, string status, string contrsuppType, string panno, int page, int rows, string sidx, string sord, out long totalRecords, string filters);
MasterContractorViewModel EditContractor(int conId);
MasterContractorViewModel CloneObject(MASTER_CONTRACTOR master);
MASTER_CONTRACTOR CloneModel(MASTER_CONTRACTOR master, MasterContractorViewModel model);
bool DeleteContractor(int id);
Array GetContractorRegistrationList(int id, int page, int rows, string sidx, string sord, out long totalRecords);
bool PanNumberSearchExistDAL(string panNumber, ref string message);
#endregion

#region Unit DAL declaration
bool AddMasterUnit(MasterUnitsTypeViewModel masterUnitViewModel, ref string message);
bool EditMasterUnit(MasterUnitsTypeViewModel masterUnitsViewModel, ref string message);
Boolean DeleteMasterUnit(int masterUnitId, ref string message);
Array ListMasterUnit(int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterUnitsTypeViewModel GetUnitDetails_ByUnitCode(int unitCode);
MASTER_UNITS CloneUnitModel(MasterUnitsTypeViewModel masterUnitsViewModel, bool flagAddEdit);
MasterUnitsTypeViewModel CloneUnitObject(MASTER_UNITS masterUnitModel);

#endregion Unit DAL declaration

#region Terrain DAL declaration
bool AddMasterTerrainType(MasterTerrainTypeViewModel masterTerrainTypeViewModel, ref string message);
bool EditMasterTerrainType(MasterTerrainTypeViewModel masterTerrainTypeViewModel, ref string message);
Boolean DeleteMasterTerrainType(int masterTerrainTypeId, ref string message);
Array ListMasterTerrainType(int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterTerrainTypeViewModel GetTerrainTypeDetails_ByTerrainCode(int terrainCode);
MASTER_TERRAIN_TYPE CloneTerrainModel(MasterTerrainTypeViewModel masterTerrainTypeViewModel, bool flagAddEdit);
MasterTerrainTypeViewModel CloneTerrainObject(MASTER_TERRAIN_TYPE masterTerrainTypeModel);

#endregion Terrain DAL declaration

#region Surface DAL declaration
bool AddMasterSurface(MasterSurfaceViewModel masterSurfaceViewModel, ref string message);
bool EditMasterSurface(MasterSurfaceViewModel masterSurfaceViewModel, ref string message);
Boolean DeleteMasterSurface(int masterSurfaceId, ref string message);
Array ListMasterSurface(int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterSurfaceViewModel GetSurfaceDetails_BySurfaceCode(int surfaceCode);
MASTER_SURFACE CloneSurfaceModel(MasterSurfaceViewModel masterSurfaceViewModel, bool flagAddEdit);
MasterSurfaceViewModel CloneSurfaceObject(MASTER_SURFACE masterSurfaceModel);

#endregion Surface DAL declaration

#region Scour Foundation Type DAL declaration

bool AddMasterScourFoundationType(MasterScourFoundationTypeViewModel masterScourFoundationTypeViewModel, ref string message);
bool EditMasterScourFoundationType(MasterScourFoundationTypeViewModel masterScourFoundationTypeViewModel, ref string message);
Boolean DeleteMasterScourFoundationType(int masterScourFoundationTypeId, ref string message);
Array ListMasterScourFoundationType(string SfType, int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterScourFoundationTypeViewModel GetScourFoundationDetails_ByScourFoundationCode(int ScourFoundationCode);
MASTER_SCOUR_FOUNDATION_TYPE CloneScourFoundationModel(MasterScourFoundationTypeViewModel masterScourFoundationTypeViewModel, bool flagAddEdit);
MasterScourFoundationTypeViewModel CloneScourFoundationObject(MASTER_SCOUR_FOUNDATION_TYPE masterScourFoundationTypeModel);


List<SelectListItem> GetScourFoundation();

#endregion Scour Foundation Type DAL declaration

#region Growth Score
Boolean DeleteScoreSubItem(int masterScoreId, ref string message);
bool EditGrowthScoreSubItemDetails(GrowthScoreSubItemViewModel growthScoreViewModel, ref string message);
GrowthScoreSubItemViewModel GetScoreSubItemDetails_ByScoreID(int scoreID);
bool AddScoreSubItemDetails(GrowthScoreSubItemViewModel objScore, ref string message);
//int EditGrowthScore(int id);
Boolean DeleteMasterGrowthScore(int masterScoreId, ref string message);
bool EditMasterGrowthScore(GrowthScoreViewModel growthScoreViewModel, ref string message);
GrowthScoreViewModel GetGrowthScoreDetails_ByScoreID(int scoreID);
bool AddMasterGrowthScore(GrowthScoreViewModel objScore, ref string message);
Array ListGrowthMasterScoreType(string SfType, int? page, int? rows, string sidx, string sord, out long totalRecords);
Array ListScoreSubItems(string SfType, int? page, int? rows, string sidx, string sord, out long totalRecords, int scoreId);
#endregion

#region Grade DAL declaration
bool AddMasterGradeType(MasterGradeTypeViewModel masterGradeTypeViewModel, ref string message);
bool EditMasterGradeType(MasterGradeTypeViewModel masterGradeTypeViewModel, ref string message);
Boolean DeleteMasterGradeType(int masterGradeTypeId, ref string message);
Array ListMasterGradeType(int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterGradeTypeViewModel GetGradeTypeDetails_ByGradeCode(int componentCode);
MASTER_GRADE_TYPE CloneGradeModel(MasterGradeTypeViewModel masterGradeTypeViewModel, bool flagAddEdit);
MasterGradeTypeViewModel CloneGradeObject(MASTER_GRADE_TYPE masterGradeTypeModel);

List<SelectListItem> PopulateGradeShortNames();
#endregion Grade DAL declaration

#region Component Type DAL declaration

bool AddMasterComponentType(MasterComponentTypeViewModel masterComponentTypeViewModel, ref string message);
bool EditMasterComponentType(MasterComponentTypeViewModel masterComponentTypeViewModel, ref string message);
Boolean DeleteMasterComponentType(int masterComponentTypeId, ref string message);
Array ListMasterComponentType(int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterComponentTypeViewModel GetComponentDetails_ByComponentCode(int componentCode);
MASTER_COMPONENT_TYPE CloneComponentModel(MasterComponentTypeViewModel masterComponentTypeViewModel);
MasterComponentTypeViewModel CloneComponentObject(MASTER_COMPONENT_TYPE masterComponentTypeModel);

#endregion Component Type DAL declaration

#region Contractor Class Type  DAL declaration

bool AddMasterContractorClassType(MasterContractorClassTypeViewModel masterContractorClassTypeViewModel, ref string message);
bool EditMasterContractorClassType(MasterContractorClassTypeViewModel masterContractorClassTypeViewModel, ref string message);
Boolean DeleteMasterContractorClassType(int masterContractorClassId, ref string message);
Array ListMasterContractorClassType(int stateCode, int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterContractorClassTypeViewModel GetContractorClassDetails_ByClassCode(int masterContractorClassId);
MASTER_CON_CLASS_TYPE CloneContractorClassModel(MasterContractorClassTypeViewModel masterContractorClassTypeViewModel, bool flagContClassAddEdit);
MasterContractorClassTypeViewModel CloneContractorClassObject(MASTER_CON_CLASS_TYPE masterContractorClassTypeModel);

#endregion Contractor Class Type  DAL declaration

#region Contractor Registration DAL declaration

bool AddMasterContractorReg(MasterContractorRegistrationViewModel masterContractorRegViewModel, ref string message);
bool EditMasterContractorReg(MasterContractorRegistrationViewModel masterContractorRegViewModel, ref string message);
// Added on 25-01-2022 by Srishti Tyagi
bool EditMasterContractorRegFundType(MasterContractorRegistrationViewModel masterContractorRegViewModel, ref string message);
Boolean DeleteMasterContractorReg(int ContRegId, int ContRegCode, ref string message);
Array ListMasterContractorReg(int? page, int? rows, string sidx, string sord, out long totalRecords, int contId, int conRegStateId);
List<SelectListItem> PopulateContractorsByPan(int stateCode, string panSearch);
MasterContractorRegistrationViewModel GetContRegDetails_ByConId_RegCode(int ContRegId, int ContRegCode);

MASTER_CONTRACTOR_REGISTRATION CloneContractorRegModel(MASTER_CONTRACTOR_REGISTRATION masterContractorRegModel, MasterContractorRegistrationViewModel masterContractorRegViewModel, bool flagContClassAddEdit);
MasterContractorRegistrationViewModel CloneContractorRegObject(MASTER_CONTRACTOR_REGISTRATION masterContractorRegModel);
List<SelectListItem> PopulateContractors(int stateCode);

List<SelectListItem> GetAllContClassByRegState(int mastContRegState);
List<MASTER_STATE> getStateNameByRegStateCode();
List<SelectListItem> PopulateContractorsForEdit(int stateCode);
Array GetContractorRegList(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo);
Array GetViewContractorRegistrationList(int? page, int? rows, string sidx, string sord, out long totalRecords, int ContRegId, int ContRegCode);
#endregion Contractor Registration DAL declaration

#region Vidhan sabha term DAL declaration

bool AddMasterVidhanSabhaTerm(MasterVidhanSabhaTermViewModel masterVidhanSabhaTermViewModel, ref string message);
bool EditMasterVidhanSabhaTerm(MasterVidhanSabhaTermViewModel masterVidhanSabhaTermViewModel, ref string message);
Boolean DeleteVidhanSabhaTerm(int stateCode, int VSTermId, ref string message);
Array ListVidhanSabhaTerm(int stateCode, int? page, int? rows, string sidx, string sord, out long totalRecords);
MasterVidhanSabhaTermViewModel GetVidhanSabhaTerm_ByStateCode_TermId(int stateCode, int TermId);

MASTER_VIDHAN_SABHA_TERM CloneVidhanSabhaTermModel(MasterVidhanSabhaTermViewModel masterVidhanSabhaTermViewModel, bool flagVidhanSabhaAddEdit);
MasterVidhanSabhaTermViewModel CloneVidhanSabhaTermObject(MASTER_VIDHAN_SABHA_TERM masterVidhanSabhaTermModel);




#endregion Vidhan sabha term DAL declaration

#region Master region DAL declaration

bool AddMasterRegion(MasterRegionViewModel masterRegionViewModel, ref string message);
bool EditMasterRegion(MasterRegionViewModel masterRegionViewModel, ref string message);
Boolean DeleteMasterRegion(int regionCode, ref string message);//changes by Koustubh Nakate on 10-05-2013
Array ListMasterRegion(int stateCode, int? page, int? rows, string sidx, string sord, out long totalRecords);//changes by Koustubh Nakate on 10-05-2013
MasterRegionViewModel GetMasterRegion_ByRegionCode(int regionCode);

MASTER_REGION CloneMasterRegionModel(MasterRegionViewModel masterRegionViewModel, bool flagRegionAddEdit);
MasterRegionViewModel CloneRegionObject(MASTER_REGION masterRegionModel);

bool DeleteMappedDistrictRegionDetails(int regionId, ref string message);


#endregion Master region  DAL declaration

#region Admin Autonomous body DAL declaration

bool AddMasterAdminAutonomousBody(MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel, ref string message);
bool EditMasterAdminAutonomousBody(MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel, ref string message);
Boolean DeleteMasterAdminAutonomousBody(int stateCode, ref string message);
Array ListMasterAdminAutonomousBody(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode);
MasterAdminAutonomousBodyViewModel GetMasterAdminAutonomousBodyViewModel_ByStateCode(int stateCode);

ADMIN_AUTONOMOUS_BODY CloneMasterAdminAutonomousBodyModel(MasterAdminAutonomousBodyViewModel masterAdminAutonomousBodyViewModel);
MasterAdminAutonomousBodyViewModel ClonerAdminAutonomousBodyObject(ADMIN_AUTONOMOUS_BODY masterAdminAutonomousBodyModel);

#endregion Admin Autonomous body DAL declaration

#region Mp_Members DAL declaration

bool AddMasterMpMember(MasterMpMembersViewModel masterMpMemberViewModel, ref string message);
bool EditMasterMpMember(MasterMpMembersViewModel masterMpMemberViewModel, ref string message);
Boolean DeleteMpMember(int Term, int ConstCode, int MemberId, ref string message);
Array ListMpMember(int termCode, int stateCode, int constituencyCode, string memberName, int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterMpMembersViewModel GetMpMember_ByTerm_ConstCode_MemberId(int Term, int ConstCode, int MemberId);

MASTER_MP_MEMBERS CloneMpMemberModel(MasterMpMembersViewModel masterMpMemberViewModel, bool flagMpMemberAddEdit);
MasterMpMembersViewModel CloneMpMemberObject(MASTER_MP_MEMBERS masterMpMemberModel);


List<MASTER_LOK_SABHA_TERM> GetAllLockSabhaTerms();
List<MASTER_MP_CONSTITUENCY> GetAllMpConstituencyNames();
List<MASTER_MP_MEMBERS> GetAllMemberNamesByTermCode(int termCode, bool isSearch);
#endregion Mp_Members DAL declaration

#region Quality Monitors DAL declaration

#region Allow SQC to edit SQM Details
//Changed by deendayal on 28/7/2017
bool CheckIdentityInformation(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, int QualityMonitorCode);
#endregion


bool AddMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message, ref int AdminQMCode);
//bool AddMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message);
bool EditMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message);
// bool EditMasterQualityMonitor(MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, ref string message);
Boolean DeleteQualityMonitor(int qualityMonitorCode, ref string message);
Array ListQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords);
//Array ListQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords);
MasterAdminQualityMonitorViewModel GetQualityMonitor_ByQualityMonitorCode(int qualityMonitorCode);
//  MasterAdminQualityMonitorViewModel GetQualityMonitor_ByQualityMonitorCode(int qualityMonitorCode);

ADMIN_QUALITY_MONITORS CloneQualityMonitorModel(ADMIN_QUALITY_MONITORS qualityMonitorModel, MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, bool flagQualityMonitorAddEdit);
//  ADMIN_QUALITY_MONITORS CloneQualityMonitorModel(ADMIN_QUALITY_MONITORS qualityMonitorModel, MasterAdminQualityMonitorViewModel masterQualityMonitorViewModel, bool flagQualityMonitorAddEdit);
MasterAdminQualityMonitorViewModel CloneQualityMonitorObject(ADMIN_QUALITY_MONITORS masterMpMemberModel);



List<MASTER_DESIGNATION> GetAllQmDesignation();

#region PAN Upload For Monitor

Array GetPANFileListDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int qmCode);
string AddPANUploadDetailsDAL(List<QualityMonitorFileUploadViewModel> lstFileUploadViewModel);
string DeletePANFileDetailsDAL(int qmCode);

#endregion

#region Upload File Details
Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int ADMIN_QM_CODE);
Array GetPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int ADMIN_QM_CODE);
string AddFileUploadDetailsDAL(QualityMonitorFileUploadViewModel fileUploadViewModel);

string DeleteFileDetailsDAL(int ADMIN_QM_CODE, string FILE_NAME);
string DeletePdfFileDetailsDAL(int ADMIN_QM_CODE, string FILE_NAME);

#endregion

bool AddSQMUserLoginQualityMonitorDAL(int qualityMonitorCode, ref string message);
#endregion Mp_Members DAL declaration


#region Master_Designation

Array GetDesignationList(string desigCode, int page, int rows, string sidx, string sord, out long totalRecords);
bool AddDesignation(MasterDesignationViewModel model, ref string message);
bool EditDesignation(MasterDesignationViewModel model, ref string message);
bool DeleteDesignation(int desigCode);
MasterDesignationViewModel GetDesignationDetails(string desigCode);

#endregion

#region MASTER_LOKSABHA_TERM

Array GetLokSabhaTermList(int page, int rows, string sidx, string sord, out long totalRecords);
bool AddLokSabhaTerm(MasterLokSabhaTermViewModel model, ref string message);
bool EditLokSabhaTerm(MasterLokSabhaTermViewModel model, ref string message);
bool DeleteLokSabhaTerm(int loksabhaTerm);
MasterLokSabhaTermViewModel GetLokSabhaTermDetails(int loksabhaTerm);
#endregion


#region MASTER_MLA_MEMBERS

bool AddMLAMembers(MasterMLAMembersViewModel memberModel, ref string message);

Array ListMLAMembers(int stateCode, int term, int constCode, string memberName, int page, int rows, string sidx, string sord, out long totalRecords);

bool DeleteMLAMembers(int memberCode);

bool EditMLAMembers(MasterMLAMembersViewModel memberModel, ref string message);

MasterMLAMembersViewModel GetMemberDetails(int memberCode);

List<MASTER_VIDHAN_SABHA_TERM> GetAllVidhanSabhaTerms(int stateCode);

List<MASTER_MLA_CONSTITUENCY> GetAllConstituency(int stateCode);

List<Models.MASTER_MLA_MEMBERS> GetMembersByStateCode(int stateCode);

#endregion

#region ADMIN_DEPARTMENT

bool AddAdminDepartment(AdminDepartmentViewModel adminModel, ref string message);

Array ListAdminDepartmentList(int stateCode, int agencyCode, int page, int rows, string sidx, string sord, out long totalRecords);//districtCode, departmentName, changes by Koustubh Nakate on 16-05-2013

bool DeleteAdminDepartment(int adminCode, ref string message);

bool EditAdminDepartment(AdminDepartmentViewModel adminModel, ref string message);

AdminDepartmentViewModel GetAdminDetails(int adminCode);

List<MASTER_AGENCY> GetAgencyNames();

AdminDepartmentViewModel AddStateAdmin();


#endregion

#region PIU Department
Array GetDPIUListDAL(int stateCode, int agencyCode, int adminNDCode, string activeflag, int? page, int? rows, string sidx, string sord, out long totalRecords);
#endregion


#region adminSqc
bool AddAdminSqc(AdminSqcViewModel adminSqcViewModel, ref string message);
bool EditAdminSqc(AdminSqcViewModel adminSqcViewModel, ref string message);
Boolean DeleteAdminSqc(int AdminQcId);
Array ListadminQc(int stateCode, int adminNdCode, string status, int? page, int? rows, string sidx, string sord, out long totalRecords);
AdminSqcViewModel GetAdminQc_ByQcCode(int AdminQcCode);


ADMIN_SQC CloneAdminSqcModel(ADMIN_SQC adminSqcCode, AdminSqcViewModel adminSqcViewModel, bool flagAddEdit);
AdminSqcViewModel CloneAdminSqcObject(ADMIN_SQC AdminSqcCode, ADMIN_DEPARTMENT admindept);

List<MASTER_DESIGNATION> GetDesignation();

List<MASTER_STATE> GetStates();

List<MASTER_DISTRICT> GetDistrictName(int stateId);
List<SelectListItem> GetDepartmentListDAL(int id);
List<SelectListItem> GetDeptListForStates(int id);



#endregion adminsqc

#region Qualification
bool AddMasterQualification(MasterQualificationViewModel masterQualViewModel, ref string message);
bool EditMasterQualification(MasterQualificationViewModel masterQualViewModel, ref string message);
Boolean DeleteMasterQualification(int qualId);
Array ListMasterQualification(int? page, int? rows, string sidx, string sord, out long totalRecords);
MasterQualificationViewModel GetQualificationDetails_ByQualCode(int QualCode);


MASTER_QUALIFICATION CloneQualModel(MasterQualificationViewModel masterQualViewModel, bool flagAddEdit);
MasterQualificationViewModel CloneQualObject(MASTER_QUALIFICATION masterQualificationModel);
#endregion Qualification

#region MasterStreams
bool AddMasterStreams(MasterStreamsViewModel masterStreamsViewModel, ref string message);
bool EditMasterStreams(MasterStreamsViewModel masterStreamsViewModel, ref string message);
Boolean DeleteMasterStreams(int streamsId);
Array ListMasterStreams(string streamType, int? page, int? rows, string sidx, string sord, out long totalRecords);
MasterStreamsViewModel GetStreamsDetails_ByStream(int StreamCode);

DateTime? ConvertStringToDate(string dateToConvert);
string ConvertDateToString(DateTime? date);


MASTER_STREAMS CloneStreamModel(MasterStreamsViewModel masterStreamsViewModel, bool flagAddEdit);

MasterStreamsViewModel CloneStreamsObject(MASTER_STREAMS masterStreamsModel);

List<SelectListItem> GetStreamsCode();

#endregion MasterStreams

#region MASTER_EXECUTION

bool AddMasterExecution(MasterExecutionItemViewModel masterExecutionView, ref string message);
bool EditMasterExecution(MasterExecutionItemViewModel masterExecutionView, ref string message);
Boolean DeleteMasterExecution(int ExecutionId);
Array ListMasterExecution(string ItemType, int? page, int? rows, string sidx, string sord, out long totalRecords);
MasterExecutionItemViewModel GetExecutionDetails_ByExecutionCode(int ExecutionId);


MASTER_EXECUTION_ITEM CloneExecutionModel(MasterExecutionItemViewModel masterExecutionView, bool flagAddEdit);
MasterExecutionItemViewModel CloneExecutionObject(MASTER_EXECUTION_ITEM masterExecutionModel);
List<SelectListItem> getAllHeadTypes();

#endregion

#region ChecklistPoints DAL Declaration

bool AddMasterChecklist(MasterChecklistPointsViewModel masterChecklistViewModel, ref string message);
bool EditMasterChecklist(MasterChecklistPointsViewModel masterChecklistViewModel, ref string message);
Boolean DeleteMasterChecklist(int masterChecklistId);
Array ListMasterChecklist(int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterChecklistPointsViewModel GetChecklistDetails_ByChecklistCode(int ChecklistCode);
MASTER_CHECKLIST_POINTS CloneChecklistModel(MasterChecklistPointsViewModel masterChecklistViewModel, bool flagAddEdit);
MasterChecklistPointsViewModel CloneChecklistObject(MASTER_CHECKLIST_POINTS masterChecklistModel);


#endregion ChecklistPoints DAL Declaration

#region  Master Reason DAL  Declaration

List<SelectListItem> GetReasonCode();
bool AddMasterReason(MasterReasonViewModel masterReasonViewModel, ref string message);
bool EditMasterReason(MasterReasonViewModel masterReasonViewModel, ref string message);
Boolean DeleteMasterReason(int masterReasonId);
Array ListMasterReason(string reasonType, int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterReasonViewModel GetReasonDetails_ByReasonCode(int ReasonCode);
MASTER_REASON CloneReasonModel(MasterReasonViewModel masterReasonViewModel, bool flagAddEdit);
MasterReasonViewModel CloneReasonObject(MASTER_REASON masterReasonModel);


#endregion Master Reason DAL  Declaration

#region  Master Agency DAL Declaration


List<SelectListItem> GetAgencyCode();
bool AddMasterAgency(MasterAgencyViewModel masterAgencyViewModel, ref string message);
bool EditMasterAgency(MasterAgencyViewModel masterAgencyViewModel, ref string message);
Boolean DeleteMasterAgency(int masterAgencyId);
Array ListMasterAgency(string agencyType, int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterAgencyViewModel GetAgencyDetails_ByAgencyCode(int AgencyCode);
MASTER_AGENCY CloneAgencyModel(MasterAgencyViewModel masterAgencyViewModel, bool flagAddEdit);
MasterAgencyViewModel CloneAgencyObject(MASTER_AGENCY masterAgencyTypeModel);




#endregion  Master Agency DAL Declaration

#region Technical Agency

bool AddAdminTechnicalAgency(AdminTechnicalAgencyViewModel adminTechnicalAgencyViewModel, ref string message);

bool EditAdminTechnicalAgency(AdminTechnicalAgencyViewModel adminTechnicalAgencyViewModel, ref string message);

Boolean DeleteAdminTechnicalAgency(int AdminTechnicalAgencyId);

Array ListadminTechnicalAgency(string taName, string taType, int? page, int? rows, string sidx, string sord, out long totalRecords);
Array ListdistrictTechnicalAgency(int? page, int? rows, string sidx, string sord, out long totalRecords, string agencyType, int stateCode, int districtCode);

AdminTechnicalAgencyViewModel GetAdminTA_ByTACode(int AdminTechnicalAgencyCode);

ADMIN_TECHNICAL_AGENCY CloneAdminTechnicalAgencyModel(ADMIN_TECHNICAL_AGENCY adminTechnicalAgencyCode, AdminTechnicalAgencyViewModel adminTechnicalAgencyViewModel, bool flagAddEdit);

AdminTechnicalAgencyViewModel CloneAdminTechnicalAgencyObject(ADMIN_TECHNICAL_AGENCY AdminTechnicalAgencyCode);

List<MASTER_DESIGNATION> GetDesignationTA();

List<MASTER_STATE> GetStatesTA();

List<MASTER_DISTRICT> GetDistrictNameTA(int? stateId);

List<SelectListItem> GetTATypes();

#endregion TA



List<SelectListItem> GetDesigType();
List<MASTER_STATE> GetAllStateNames();
List<MASTER_DISTRICT> GetAllDistrictByStateCode(int stateCode);
List<SelectListItem> GetYears();
List<SelectListItem> GetQmTypes();


#region Map Region-Districts
bool MapRegionDistrictsDAL(string encryptedRegionCode, string encryptedDistrictCodes);

Array GetMappedDistrictDetailsListDAL_Region(int regionCode, int? page, int? rows, string sidx, string sord, out long totalRecords);//added by Koustubh Nakate on 14-05-2013
bool DeleteMappedRegionDistrictDAL(int regionId);

#endregion Map Region-Districts


//added by Koustubh Nakate on 16/05/2013 for admin department 
#region DPIU LIST BY SRDA

Array GetDPIUListDAL_ByAdminNDCode(int adminNDCode, int? page, int? rows, string sidx, string sord, out long totalRecords);

#endregion DPIU LIST BY SRDA

#region Contractor_Bank_Details
bool AddContractorBankDetails(MasterContractorBankDetails contractorBankDetails, ref string message);
bool EditContractorBankDetails(MasterContractorBankDetails contractorBankDetails, ref string message);
bool DeleteContractorBankDetails(int accountId, int coustomerId, ref string message);
Array ListContractorBankDetails(int ContractorCode, int regState, int? page, int? rows, string sidx, string sord, out long totalRecords);

MASTER_CONTRACTOR_BANK CloneBankDetailsModel(MASTER_CONTRACTOR_BANK masterContractorBank, MasterContractorBankDetails contractorBankDetails, bool flagAddEdit);
MasterContractorBankDetails CloneBankDetailsObject(MASTER_CONTRACTOR_BANK masterContractorBank);
List<MASTER_DISTRICT> getContractorDistricts(int contractorId);
MasterContractorBankDetails getContractorBankDetails_ByBankCode(int accountId, int ContractorId);
bool checkAlreadyExists(MasterContractorBankDetails contractorBankDetails, ref string message);

bool IsBankDetailsExists(MasterContractorBankDetails contractorBankDetails, ref string message);

//added by pp 01-05-2018
Boolean FinalizeBankDetails(int AccountCode, int ContractorCode);

Boolean ActivateBankAccountStatusDAL(int AccountCode, int ContractorCode);

#endregion Contractor_Bank_Details

#region NodalOfficer
bool DeleteBankDetailsNO(int accountId, int customerId, ref string message);
bool EditBankDetailsNO(MasterContractorBankDetails contractorBankDetails, ref string message);
MasterContractorBankDetails getBankDetailsNO_ByBankCode(int accountId, int NodalOfficerCode);
bool checkAlreadyExistsNO(MasterContractorBankDetails contractorBankDetails, ref string message);
bool IsBankDetailsExistsNO(MasterContractorBankDetails contractorBankDetails, ref string message);

bool AddBankDetailsNO(MasterContractorBankDetails contractorBankDetails, ref string message);
Array ListBankDetailsNO(int NodalOfficerCode, int? page, int? rows, string sidx, string sord, out long totalRecords);

bool AddNodalOfficer(AdminNodalOfficerViewModel nodalOfficerView, ref string message);
bool EditNodalOfficer(AdminNodalOfficerViewModel nodalOfficerView, ref string message);
bool DeleteNodalOfficer(int OfficerCode);
Array ListNodalOfficer(int stateCode, int officeCode, int designationCode, int NoTypeCode, string moduleType, string active, int? page, int? rows, string sidx, string sord, out long totalRecord);
AdminNodalOfficerViewModel GetAdminNodalOfficer_ByOfficerCode(int OfficerCode);


ADMIN_NODAL_OFFICERS CloneAdminNodalOfficerModel(AdminNodalOfficerViewModel nodalOfficerView, bool flagAddEdit);
AdminNodalOfficerViewModel CloneAdminNodalOfficerObject(ADMIN_NODAL_OFFICERS nodalOfficer);

List<ADMIN_DEPARTMENT> GetAdminNdCode();
List<ADMIN_DEPARTMENT> GetAdminNdCode_ByStateCode(int stateCode);
List<MASTER_DESIGNATION> GetNodalDesignation();
List<SelectListItem> PopulateDistrict(string adminNdCode);
List<MASTER_PROFILE> GetAdminNoType();
#endregion NodalOfficer

#region Agency-State-District-Mapping
bool MapAgencyStatesDAL(string encryptedAgencyCode, string encryptedStateCodes, string startDate);

bool MapAgencyDistrictsDAL(string encryptedAgencyCode, string encryptedDistrictCodes, string startDate);

Array GetMappedStateDetailsListDAL_Agency(int stateCode, int agencyCode, int? page, int? rows, string sidx, string sord, out long totalRecords);

Array GetMappedDistrictDetailsListDAL_Agency(int agencyCode, int? page, int? rows, string sidx, string sord, out long totalRecords);

bool DeleteMappedStateAgencyDAL(int adminId);

bool FinalizeMappedStateAgencyDAL(int adminId);

bool FinalizeMappedDistrictAgencyDAL(int adminId);

bool UpdateStateEndDatePTA_DAL(string endDate, string encryptedadminId, ref string message);

bool UpdateDistrictEndDateSTA_DAL(string endDate, string encryptedadminId, ref string message);

EndDateDistrictViewModel AddEndDateDistrictDAL(EndDateDistrictViewModel endDateDistrictViewModel, Int32 adminTaId);

EndDateStateViewModel AddEndDateStateDAL(EndDateStateViewModel endDateStateViewModel, Int32 adminTaId);

bool DeleteMappedDistrictAgencyDAL(int adminId);

#endregion Agency-State-District-Mapping


bool MapSRRDADistrictsDAL(string encryptedAdminCode, string encryptedDistrictCodes);

bool DeleteMappedSRRDADistrictDAL(int adminId);

Array GetMappedDistrictDetailsListDAL_SRRDA(int adminCode, int? page, int? rows, string sidx, string sord, out long totalRecords);

int GetVidhanSabhaTermDAL(int stateCode);

bool GetLokSabhaTermDatesDAL(int lokSabhaTerm, ref string lokSabhaStartDate, ref string lokSabhaEndDate);

bool GetVidhanSabhaTermDatesDAL(int stateCode, int vidhanSabhaTerm, ref string vidhanSabhaStartDate, ref string vidhanSabhaEndDate);

SelectList GetAllStatus();

bool ContractorRegChangeStatusDAL(int conID, int ConRegCode, bool IsActive);

#region MASTER_TAX

Array GetTaxDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords);

MasterTaxViewModel GetTaxDetails(int taxCode);

bool DeleteTaxDetailsDAL(int taxCode);

bool AddTaxDetailsDAL(MasterTaxViewModel taxModel, ref string message);

bool EditTaxDetailsDAL(MasterTaxViewModel taxModel, ref string message);

#endregion


#region Technology
Array ListTechnologyDetails(string statusType, int? page, int? rows, string sidx, string sord, out long totalRecords);
bool AddTechnologyDetails(MasterTechnologyViewModel techViewModel, ref string message);
bool EditTechnologyDetails(MasterTechnologyViewModel techViewModel, ref string message);
MasterTechnologyViewModel GetTechnologyDetails(int techCode);
bool DeleteTechnologyDetails(int technologyCode);
bool ChangeTchnologyStatus(int technologyCode);

#endregion Technology

#region Test
Array ListTestDetails(string statusType, int? page, int? rows, string sidx, string sord, out long totalRecords);
bool AddTestDetails(MasterTestViewModel testViewModel, ref string message);
bool EditTestDetails(MasterTestViewModel testViewModel, ref string message);
MasterTestViewModel GetTestDetails(int testCode);
bool DeleteTestDetails(int testCode);
bool ChangeTestStatus(int testCode);
#endregion Test

#region Alerts
Array ListAlertsDetails(string status, int? page, int? rows, String sidx, String sord, out long totalRecords);
bool AddAlertDetails(AdminAlertsViewModel AlertViewModel, ref string message);
bool EditAlertDetails(AdminAlertsViewModel AlertViewModel, ref string message);
AdminAlertsViewModel ViewAlertDetails(int AlertId);
bool DeleteAlertDetails(int AlertId);
bool ChangeAlertStatus(int AlertId);
#endregion Alerts

#region PMGSY2

Array ListPMGSYIIDetails(int? page, int? rows, string sidx, string sord, out long totalRecords);
bool ChangePMGSY2Status(int stateCode);
bool IsPMGSY2Active(int stateCode);

#endregion PMGSY2

#region Feedback Category

Array ListFeedbackCategoryDetails(int? page, int? rows, string sidx, string sord, out long totalRecords);
bool AddFeedbackDetails(FeedbackCategoryViewModel feedbackCategoryViewModel, ref string message);
bool EditFeedbackDetails(FeedbackCategoryViewModel feedbackCategoryViewModel, ref string message);
FeedbackCategoryViewModel GetFeedbackDetails(int feebackId);
bool DeleteFeedbackDetails(int feedBackId);

#endregion Feedback Category

#region Carriage

Array ListCarriageDetails(string statusType, int? page, int? rows, string sidx, string sord, out long totalRecords);
bool AddCarriageDetails(MasterCarriageViewModel carriageViewModel, ref string message);
bool EditCarriageDetails(MasterCarriageViewModel carriageViewModel, ref string message);
MasterCarriageViewModel GetCarriageDetails(int carriageCode);
bool DeleteCarriageDetails(int carriageCode);
bool ChangeCarriageStatus(int carriageCode);

#endregion Carriage

#region Info
Array ListInfoDetails(string infoType, int infoStateCode, int? page, int? rows, string sidx, string sord, out long totalRecords);
bool AddInfoDetails(MasterInfoViewModel infoViewModel, ref string message);
bool EditInfoDetails(MasterInfoViewModel infoViewModel, ref string message);
MasterInfoViewModel GetInfoDetails(int infoCode);
bool DeleteInfoDetails(int infoCode);
bool ChangeInfoStatus(int infoCode);
SelectList PopulateInfoTypes();
#endregion Info

#region Contractor Detail
Array GetContractorAgreementListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo);
Array GetContractorIMSMaintenanceListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo);
Array GetContractorPaymentListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, string status, string contractorName, string conStatus, string panNumber, int classType, string regNo, string companyName, int contractorNo);
#endregion
List<SelectListItem> PopulateClassTypes();
List<Models.MASTER_DISTRICT> GetAllDistrictsByStateCode(int StateCode);
#region Cluster Master
//Not use this Listing
//Array ListClusterDetailDAL(int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords);
Array GetHabitationListClusterDAL(int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords);
bool AddClusterHabitationDAL(string encryptedHabCode, string habitationName, int blockCode);
Array ListClusterDAL(int stateCode, int districtCode, int blockCode, string activeStatus, int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteClusterDAL(int clusterCode, ref string message);
MasterClusterEditViewModel GetClusterDetailsDAL(int clusterCode);
bool EditClusterNameHabiationDAL(MasterClusterEditViewModel clusterModel, ref string message);

MasterClusterViewEditHabiationModel GetClusterHabsDetailsDAL(int clusterCode);
bool DeleteClusterHabitationDAL(int clusterCode, int habCode, ref string message);
Array GetClusterHabitationListByClusterCodeDAL(int clusterCode, int page, int rows, string sidx, string sord, out long totalRecords);
Array GetAddHabitationListIntoClusterDAL(int clusterCode, int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords);

bool UpdateClusterHabitationDAL(string encryptedHabCodeSendbyCheckBoxCheck, string habitationName, int clusterCode);
bool FinalizeClusterHabitationDAL(MasterClusterViewEditHabiationModel clusterModel, ref string message);
#endregion

#region Cluster Core Network
Array ListClusterCNDAL(int stateCode, int districtCode, int blockCode, string activeStatus, int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteClusterCNDAL(int clusterCode, ref string message);
bool DeleteClusterCNHabitationDAL(int clusterCode, int habCode, ref string message);
bool EditClusterCNNameHabiationDAL(MasterClusterEditViewModel clusterModel, ref string message);
MasterClusterEditViewModel GetClusterCNDetailsDAL(int clusterCode);
MasterClusterViewEditHabiationModel GetClusterCNHabsDetailsDAL(int clusterCode);
Array GetCoreNetworkListClusterCNDAL(int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords);
Array GetHabitationListClusterCNDAL(int roadCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords);
Array GetAddCoreNetworkListByClusterCodeDAL(int clusterCode, int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords);
Array GetAddHabitationListIntoClusterCNDAL(int clusterCode, int roadCode, int stateCode, int districtCode, int blockCode, int page, int rows, string sidx, string sord, out long totalRecords);
Array GetClusterCNHabitationListByClusterCodeDAL(int clusterCode, int page, int rows, string sidx, string sord, out long totalRecords);
bool AddClusterCNHabitationDAL(string encryptedHabCodeSendbyCheckBoxCheck, string habitationName, int blockCode);
bool UpdateClusterCNHabitationDAL(string encryptedHabCodeSendbyCheckBoxCheck, string habitationName, int clusterCode);
bool FinalizeClusterCNHabitationDAL(MasterClusterViewEditHabiationModel clusterModel, ref string message);
#endregion

#region Ec Check List
bool AddImsEcCheckListDAL(IMSECCheckListViewModel imsEcCheckModel, ref string message);
Array ListImsEcCheckListDAL(int stateCode, int year, int batch, int agencyCode, string TypeEc, int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteImsEcCheckDAL(int EcCode, ref string message);
bool EditImsEcCheckDAL(IMSECCheckListViewModel imsEcCheckModel, ref string message);
IMSECCheckListViewModel GetImsEcCheckDetailsDAL(int ecCode);
bool FinalizeECCheckListDAL(int ecId, ref string meesage);
string DeFinalizeECDAL(int ecId);
#endregion

#region EC File Upload
bool AddImsEcFileUploadDAL(IMSEcFileUploadViewModel imsEcFileUpload, ref string message);
Array ListImsFileUploadDAL(int stateCode, int year, int batch, int agencyCode, string fileType, int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteImsFileUploadDAL(int FileCode, ref string message);
bool EditImsFileUploadDAL(IMSEcFileUploadViewModel imsEcFileUploadModel, ref string message);
IMSEcFileUploadViewModel GetImsEcFileUploadDetailsDAL(int fileCode);
#endregion

#region IMs EC Training
bool AddImsEcTrainingDAL(IMSEcTrainingViewModel imsEcTraining, ref string message);
Array ListImsEcTrainingDAL(int stateCode, int year, int desigCode, int page, int rows, string sidx, string sord, out long totalRecords);
bool DeleteImsTrainingDAL(int TrainingCode, ref string message);
bool EditImsTrainingDAL(IMSEcTrainingViewModel imsEcTrainingModel, ref string message);
IMSEcTrainingViewModel GetImsEcTrainingDetailsDAL(int trainingCode);
#endregion

#region Quality Inspection & ATR Deletions

Array QMViewInspectionDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                        int stateCode, int monitorCode, int fromMonth, int fromYear,
                                        int toMonth, int toYear, string qmType);

List<qm_inspection_list_atr_Result> ATRDetailsDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                        int toMonth, int toYear, string atrStatus, string rdStatus);
#endregion

#region MAINTENANCE_POLICY_UPLOAD

bool AddMaintenancePolicyDAL(MaintenancePolicyViewModel model, ref string message);

Array ListMaintenancePolicyDAL(int stateCode, int agencyCode, int page, int rows, string sidx, string sord, out long totalRecords);

bool DeleteMaintenancePolicyDAL(int FileCode, ref string message);

bool EditMaintenancePolicyDAL(MaintenancePolicyViewModel model, ref string message);

MaintenancePolicyViewModel GetMaintenancePolicyDetailsDAL(int fileCode);

#endregion

#region BLOCKING AND LISTING FOR QUALITY MONITOR
//by Pradip (Blockin QM)
bool BlockQualityMonitor(string PAN);
//by Pradip  29-12-2016 
Array ListBlockedQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords);
#endregion

#region MATRIX PARAMETERS

Array ListMatrixDetails(int? page, int? rows, string sidx, string sord, out long totalRecords);

bool AddMatrixParamDetails(MatrixParamModel model, ref string message);

bool DeleteMatrixParamDetails(int matrixId);

MatrixParamModel GetMatrixParamDetails(int matrixCode);

bool EditMatrixParamDetails(MatrixParamModel model, ref string message);
#endregion

#region PMGSY State
Array ListPmgsyStatesDAL(int? page, int? rows, string sidx, string sord, out long totalRecords);

bool AddPmgsyStateDAL(PMGSYStatesViewModel masterAgencyViewModel, ref string message);
#endregion


#region Financial Year Target
Array ListFinancialYearTargetDAL(int stateCode, int year, int? page, int? rows, string sidx, string sord, out long totalRecords);
Boolean DeleteFinancialYearTargetDAL(int pmgsyID, ref string message);
#endregion

#region Quality Monitor Profile Information to NQM / SQM as Present in CQC / SQC
//Added by Hrishikesh to provide Quality Monitor Profile Information to NQM / SQM as Present in CQC / SQC
MasterAdminQualityMonitorViewModel GetQMProfileInformationDAL(int userId);
#endregion
}
}


