#region File Header
/*
        * Project Id    :
        * Project Name  :   OMMAS II
        * Name          :   QualityMonitoringDAL.cs        
        * Description   :   Data Methods for Creation of Schedules, Fill Observations, Uploading Images & ATRs, Correcting Observations, Creation of Monitors etc.
        * Author        :   Shyam Yadav 
        * Creation Date :   10/Jun/2013
 **/
#endregion

using PMGSY.Common;
using PMGSY.Controllers;
using PMGSY.Extensions;
using PMGSY.Models;
using PMGSY.Models.Master;
using PMGSY.Models.QualityMonitoring;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Xml.Linq;

namespace PMGSY.DAL.QualityMonitoring
{
    public class QualityMonitoringDAL : IQualityMonitoringDAL
    {
        Models.PMGSYEntities dbContext;
        int scheduleCode = 0;
        string strSchedule = "";
        #region Tour Generate Invoice
        public Array GetTourPaymentListDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_YEAR, int Month, int Monitor)
        {
            CommonFunctions objCommonFunctions = new CommonFunctions();
            QMTourDetails tourModel;
            try
            {
                dbContext = new PMGSYEntities();
                //scheduleCode = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_IM_YEAR == IMS_YEAR && x.ADMIN_IM_MONTH == Month && x.ADMIN_QM_CODE == Monitor).Select(x => x.ADMIN_SCHEDULE_CODE).FirstOrDefault();
                //var query = (from item in dbContext.QUALITY_QM_SCHEDULE
                //             where item.ADMIN_IM_YEAR == IMS_YEAR && item.ADMIN_IM_MONTH == Month && ((Monitor == 0 ? 1 : item.ADMIN_QM_CODE) == (Monitor == 0 ? 1 : Monitor))
                //             select new
                //             {
                //                 item.ADMIN_SCHEDULE_CODE
                //             }).ToList();

                var query = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_IM_YEAR == IMS_YEAR && x.ADMIN_IM_MONTH == Month && (Monitor == 0 ? 1 : x.ADMIN_QM_CODE) == (Monitor == 0 ? 1 : Monitor)).Select(x => x.ADMIN_SCHEDULE_CODE).ToList();

                //foreach (var itm in query)
                //{
                //    if (strSchedule == "")
                //    {
                //        strSchedule = itm.ToString();
                //    }
                //    else
                //    {
                //        strSchedule = strSchedule + "," + itm.ToString();
                //    }
                //}

                var lstTourDetails = (from cost in dbContext.QUALITY_QM_TOUR_DETAILS
                                      where
                                      //((query.Count == 0 ? 1 == 1 : query.Contains(cost.ADMIN_SCHEDULE_CODE)))
                                      cost.IS_FINALIZED == "Y"
                                      && cost.QUALITY_QM_SCHEDULE.ADMIN_IM_YEAR == IMS_YEAR && cost.QUALITY_QM_SCHEDULE.ADMIN_IM_MONTH == Month && ((Monitor == 0 ? 1 : cost.QUALITY_QM_SCHEDULE.ADMIN_QM_CODE) == (Monitor == 0 ? 1 : Monitor))
                                      select new
                                      {
                                          cost.TOUR_ID,
                                          cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME,
                                          cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME,
                                          cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME,
                                          cost.QUALITY_QM_SCHEDULE.ADMIN_SCHEDULE_CODE,
                                          cost.TOUR_EXPENDITURE,
                                          cost.TOUR_REPORT,
                                          cost.TOUR_SUBMISSION_DATE,
                                      }).Distinct();
                totalRecords = lstTourDetails.Count();

                #region
                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        switch (sidx)
                //        {
                //            case "IMS_STATE_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_MORD_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_RELEASE_DATE":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_LETTER_NUMBER":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_FILE_NAME":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //    else
                //    {
                //        switch (sidx)
                //        {

                //            case "IMS_STATE_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_MORD_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_RELEASE_DATE":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_LETTER_NUMBER":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_FILE_NAME":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //}
                //else
                //{
                //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //}
                #endregion

                var result = lstTourDetails.Select(executionDetails => new
                {
                    executionDetails.TOUR_ID,
                    executionDetails.ADMIN_QM_FNAME,
                    executionDetails.ADMIN_QM_MNAME,
                    executionDetails.ADMIN_QM_LNAME,
                    executionDetails.ADMIN_SCHEDULE_CODE,
                    executionDetails.TOUR_EXPENDITURE,
                    executionDetails.TOUR_REPORT,
                    executionDetails.TOUR_SUBMISSION_DATE,
                }).ToArray();

                return result.Select(staListItem => new
                {
                    cell = new[] {
                            staListItem.ADMIN_QM_FNAME + (staListItem.ADMIN_QM_MNAME != "" ? " " + staListItem.ADMIN_QM_MNAME : "") + (staListItem.ADMIN_QM_LNAME != "" ? " " + staListItem.ADMIN_QM_LNAME : ""),
                            "-",
                            //objCommonFunctions._IndianFormatAmount(staListItem.TOUR_EXPENDITURE==null?"0":staListItem.TOUR_EXPENDITURE.ToString()),
                            staListItem.TOUR_EXPENDITURE.HasValue ? staListItem.TOUR_EXPENDITURE.ToString() : "0",
                            staListItem.TOUR_REPORT == null ? "-" : URLEncrypt.EncryptParameters(new string[] { staListItem.TOUR_REPORT  }),
                            staListItem.TOUR_SUBMISSION_DATE.HasValue ? staListItem.TOUR_SUBMISSION_DATE.Value.ToString("dd/MM/yyyy") : "-",
                            dbContext.QM_GENERATED_INVOICE.Where(x=>x.ADMIN_SCHEDULE_CODE == staListItem.ADMIN_SCHEDULE_CODE).Any() ? "-" : "<a href='#' title='Click here to Finalize Details' class='ui-icon ui-icon-unlocked ui-align-center' onClick='QMDeFinalizeTourDetails(\"" +  staListItem.TOUR_ID.ToString().Trim()  +"\"); return false;'></a>",
                            "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ListTourInvoiceDetails(\"" + staListItem.ADMIN_SCHEDULE_CODE  + "\"); return false;'>Show Details</a>",

                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                //model = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetTourInvoiceListDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int scheduleCode)
        {
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                dbContext = new PMGSYEntities();
                //scheduleCode = dbContext.QM_GENERATED_INVOICE.Where(x => x.IMS_INVOICE_ID == invoiceId && x.ADMIN_SCHEDULE_CODE == scheduleCode).FirstOrDefault();

                var lstTourDetails = (from cost in dbContext.QM_GENERATED_INVOICE
                                      join tour in dbContext.QUALITY_QM_TOUR_DETAILS on cost.QUALITY_QM_SCHEDULE equals tour.QUALITY_QM_SCHEDULE

                                      where //cost.IMS_INVOICE_ID == invoiceId
                                      cost.ADMIN_SCHEDULE_CODE == scheduleCode
                                      select new
                                      {
                                          //cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME,
                                          //cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME,
                                          //cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME,
                                          //cost.IMS_TRANSACTION_CODE,

                                          fname = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_SCHEDULE_CODE == scheduleCode).Select(s => s.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME).FirstOrDefault(),
                                          mname = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_SCHEDULE_CODE == scheduleCode).Select(s => s.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME).FirstOrDefault(),
                                          lname = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_SCHEDULE_CODE == scheduleCode).Select(s => s.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME).FirstOrDefault(),
                                          cost.IMS_INVOICE_ID,
                                          tour.TOUR_EXPENDITURE,
                                          cost.INVOICE_FILE_NO,
                                          cost.TRAVEL_CLAIM_ALLOWANCE,
                                          cost.REPORTING_ALLOWANCE,
                                          cost.MILLAGE_ALLOWANCE,
                                          cost.HOLDING_CHARGE_ALLOWANCE,
                                          cost.DEARNESS_ALLOWANCE,
                                          cost.HONORARIUM_ALLOWANCE,
                                          cost.OTHER_ALLOWANCE,
                                          cost.TDS_DEDUCTION,
                                          cost.OTHER_DEDUCTION,
                                          cost.NET_PAYABLE,
                                          cost.GENERATION_DATE,
                                      }).Distinct();
                totalRecords = lstTourDetails.Count();

                #region
                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        switch (sidx)
                //        {
                //            case "IMS_STATE_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_MORD_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_RELEASE_DATE":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_LETTER_NUMBER":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_FILE_NAME":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //    else
                //    {
                //        switch (sidx)
                //        {

                //            case "IMS_STATE_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_MORD_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_RELEASE_DATE":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_LETTER_NUMBER":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_FILE_NAME":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //}
                //else
                //{
                //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //}
                #endregion

                var result = lstTourDetails.Select(executionDetails => new
                {
                    executionDetails.fname,
                    executionDetails.mname,
                    executionDetails.lname,
                    executionDetails.IMS_INVOICE_ID,
                    executionDetails.TOUR_EXPENDITURE,
                    executionDetails.INVOICE_FILE_NO,
                    executionDetails.TRAVEL_CLAIM_ALLOWANCE,
                    executionDetails.REPORTING_ALLOWANCE,
                    executionDetails.MILLAGE_ALLOWANCE,
                    executionDetails.HOLDING_CHARGE_ALLOWANCE,
                    executionDetails.DEARNESS_ALLOWANCE,

                    executionDetails.HONORARIUM_ALLOWANCE,
                    executionDetails.OTHER_ALLOWANCE,
                    executionDetails.TDS_DEDUCTION,
                    executionDetails.OTHER_DEDUCTION,
                    executionDetails.NET_PAYABLE,

                    executionDetails.GENERATION_DATE,
                }).ToArray();

                return result.Select(staListItem => new
                {
                    cell = new[] {
                            staListItem.fname + (staListItem.mname != "" ? " " + staListItem.mname : "") +  (staListItem.lname != "" ? " " + staListItem.lname : ""),
                            //"-",
                            //objCommonFunctions._IndianFormatAmount(staListItem.TOUR_EXPENDITURE==null?"0":staListItem.TOUR_EXPENDITURE.ToString()),
                            staListItem.TOUR_EXPENDITURE.HasValue ? staListItem.TOUR_EXPENDITURE.ToString() : "0",
                            staListItem.INVOICE_FILE_NO.ToString(),
                            staListItem.TRAVEL_CLAIM_ALLOWANCE.ToString(),
                            staListItem.REPORTING_ALLOWANCE.ToString(),
                            staListItem.MILLAGE_ALLOWANCE.ToString(),
                            staListItem.HOLDING_CHARGE_ALLOWANCE.ToString(),
                            staListItem.DEARNESS_ALLOWANCE.ToString(),

                            staListItem.HONORARIUM_ALLOWANCE.ToString(),
                            staListItem.OTHER_ALLOWANCE.ToString(),
                            staListItem.TDS_DEDUCTION.ToString(),
                            staListItem.OTHER_DEDUCTION.ToString(),
                            staListItem.NET_PAYABLE.ToString(),

                            objCommonFunctions.GetDateTimeToString(staListItem.GENERATION_DATE),
                            "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + staListItem.IMS_INVOICE_ID + "\"); return false;'>Show Details</a>",
                            "<a href='#'  class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteDetails(\"" + staListItem.IMS_INVOICE_ID + "\"); return false;'>Show Details</a>",
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                //model = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string AddTourInvoiceDetailsDAL(QMTourGenerateInvoice model)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                Int32? MaxID;
                QM_GENERATED_INVOICE qm_generated_invoice = new QM_GENERATED_INVOICE();

                if (!dbContext.QM_GENERATED_INVOICE.Any())
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.QM_GENERATED_INVOICE select (Int32?)c.IMS_INVOICE_ID ?? 0).Max();
                }
                ++MaxID;

                qm_generated_invoice.IMS_INVOICE_ID = Convert.ToInt32(MaxID);
                qm_generated_invoice.ADMIN_SCHEDULE_CODE = model.ADMIN_SCHEDULE_CODE;
                qm_generated_invoice.TRAVEL_CLAIM_ALLOWANCE = model.TRAVEL_CLAIM_ALLOWANCE;
                qm_generated_invoice.REPORTING_ALLOWANCE = model.REPORTING_ALLOWANCE;
                qm_generated_invoice.MILLAGE_ALLOWANCE = model.MILLAGE_ALLOWANCE;
                qm_generated_invoice.HOLDING_CHARGE_ALLOWANCE = model.HOLDING_CHARGE_ALLOWANCE;
                qm_generated_invoice.DEARNESS_ALLOWANCE = model.DEARNESS_ALLOWANCE;
                qm_generated_invoice.HONORARIUM_ALLOWANCE = model.HONORARIUM_ALLOWANCE;
                qm_generated_invoice.OTHER_ALLOWANCE = model.OTHER_ALLOWANCE;

                qm_generated_invoice.TDS_DEDUCTION = model.DEDUCTION;
                qm_generated_invoice.OTHER_DEDUCTION = model.OTHER_DEDUCTION;
                qm_generated_invoice.NET_PAYABLE = model.NET_PAYABLE;

                qm_generated_invoice.GENERATION_DATE = System.DateTime.Now;
                qm_generated_invoice.INVOICE_FILE_NO = model.INVOICE_FILE_NO;

                //added by abhishek kamble 28-nov-2013
                qm_generated_invoice.USERID = PMGSYSession.Current.UserId;
                qm_generated_invoice.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                //ims_generated_invoice.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme; //new change done by Deepak  on 9 June 2014
                dbContext.QM_GENERATED_INVOICE.Add(qm_generated_invoice);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete STAPayment details.
        /// </summary>
        /// <param name="paymentCode"></param>
        /// <param name="imsInvoiceCode"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool DeleteTourGeneratedInvoiceDAL(int invoiceID, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.QM_MONITOR_PAYMENTS.Any(m => m.IMS_INVOICE_ID == invoiceID))
                {
                    //return Json(new { Success = false, ErrorMessage = "Please delete payment details before deleting invoice details." });
                    message = "Please delete payment details before deleting invoice details.";

                    return false;
                }
                else
                {
                    QM_GENERATED_INVOICE generatedInvoice = dbContext.QM_GENERATED_INVOICE.Find(invoiceID);
                    if (generatedInvoice != null)
                    {
                        generatedInvoice.USERID = PMGSYSession.Current.UserId;
                        generatedInvoice.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(generatedInvoice).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();

                        dbContext.QM_GENERATED_INVOICE.Remove(generatedInvoice);
                        dbContext.SaveChanges();
                    }

                    return true;
                }
            }
            catch (Exception)
            {
                message = "Error occurred while processing your request.";
                return false;
            }
        }
        #endregion

        #region Tour Payment
        public Array ListTourPaymentInvoiceDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_YEAR, int Month, int Monitor)
        {
            int scheduleCode = 0;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                dbContext = new PMGSYEntities();
                var query = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_IM_YEAR == IMS_YEAR && x.ADMIN_IM_MONTH == Month && ((Monitor == 0 ? 1 : x.ADMIN_QM_CODE) == (Monitor == 0 ? 1 : Monitor))).Select(x => x.ADMIN_SCHEDULE_CODE).ToList();

                var lstTourDetails = (from cost in dbContext.QM_GENERATED_INVOICE
                                      join tour in dbContext.QUALITY_QM_TOUR_DETAILS on cost.QUALITY_QM_SCHEDULE equals tour.QUALITY_QM_SCHEDULE
                                      where //cost.IMS_INVOICE_ID == invoiceId
                                            //(query.Count == 0 ? 1 == 1 : query.Contains(cost.ADMIN_SCHEDULE_CODE))
                                      cost.QUALITY_QM_SCHEDULE.ADMIN_IM_YEAR == IMS_YEAR && cost.QUALITY_QM_SCHEDULE.ADMIN_IM_MONTH == Month && ((Monitor == 0 ? 1 : cost.QUALITY_QM_SCHEDULE.ADMIN_QM_CODE) == (Monitor == 0 ? 1 : Monitor))
                                      && tour.IS_FINALIZED == "Y"
                                      select new
                                      {
                                          //cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME,
                                          //cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME,
                                          //cost.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME,
                                          //cost.IMS_TRANSACTION_CODE,

                                          fname = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_SCHEDULE_CODE == tour.ADMIN_SCHEDULE_CODE).Select(s => s.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME).FirstOrDefault(),
                                          mname = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_SCHEDULE_CODE == tour.ADMIN_SCHEDULE_CODE).Select(s => s.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME).FirstOrDefault(),
                                          lname = dbContext.QUALITY_QM_SCHEDULE.Where(x => x.ADMIN_SCHEDULE_CODE == tour.ADMIN_SCHEDULE_CODE).Select(s => s.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME).FirstOrDefault(),
                                          cost.IMS_INVOICE_ID,
                                          tour.TOUR_EXPENDITURE,
                                          cost.INVOICE_FILE_NO,
                                          cost.TRAVEL_CLAIM_ALLOWANCE,
                                          cost.REPORTING_ALLOWANCE,
                                          cost.MILLAGE_ALLOWANCE,
                                          cost.HOLDING_CHARGE_ALLOWANCE,
                                          cost.DEARNESS_ALLOWANCE,
                                          cost.HONORARIUM_ALLOWANCE,
                                          cost.OTHER_ALLOWANCE,
                                          cost.TDS_DEDUCTION,
                                          cost.OTHER_DEDUCTION,
                                          cost.NET_PAYABLE,
                                          cost.GENERATION_DATE,
                                      }).Distinct();
                totalRecords = lstTourDetails.Count();

                #region
                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        switch (sidx)
                //        {
                //            case "IMS_STATE_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_MORD_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_RELEASE_DATE":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_LETTER_NUMBER":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_FILE_NAME":
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstTourDetails = lstTourDetails.OrderBy(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //    else
                //    {
                //        switch (sidx)
                //        {

                //            case "IMS_STATE_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_MORD_AMOUNT":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_RELEASE_DATE":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_LETTER_NUMBER":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            case "IMS_FILE_NAME":
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstTourDetails = lstTourDetails.OrderByDescending(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //}
                //else
                //{
                //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //}
                #endregion

                var result = lstTourDetails.Select(executionDetails => new
                {
                    executionDetails.fname,
                    executionDetails.mname,
                    executionDetails.lname,
                    executionDetails.IMS_INVOICE_ID,
                    executionDetails.TOUR_EXPENDITURE,
                    executionDetails.INVOICE_FILE_NO,
                    executionDetails.TRAVEL_CLAIM_ALLOWANCE,
                    executionDetails.REPORTING_ALLOWANCE,
                    executionDetails.MILLAGE_ALLOWANCE,
                    executionDetails.HOLDING_CHARGE_ALLOWANCE,
                    executionDetails.DEARNESS_ALLOWANCE,
                    executionDetails.HONORARIUM_ALLOWANCE,
                    executionDetails.OTHER_ALLOWANCE,
                    executionDetails.TDS_DEDUCTION,
                    executionDetails.OTHER_DEDUCTION,
                    executionDetails.NET_PAYABLE,
                    executionDetails.GENERATION_DATE,
                }).ToArray();

                return result.Select(staListItem => new
                {
                    cell = new[] {
                            staListItem.fname + (staListItem.mname != "" ? " " + staListItem.mname : "") +  (staListItem.lname != "" ? " " + staListItem.lname : ""),
                            //"-",
                            //objCommonFunctions._IndianFormatAmount(staListItem.TOUR_EXPENDITURE==null?"0":staListItem.TOUR_EXPENDITURE.ToString()),
                            staListItem.TOUR_EXPENDITURE.HasValue ? staListItem.TOUR_EXPENDITURE.ToString() : "0",
                            staListItem.INVOICE_FILE_NO.ToString(),
                            staListItem.TRAVEL_CLAIM_ALLOWANCE.ToString(),
                            staListItem.REPORTING_ALLOWANCE.ToString(),
                            staListItem.MILLAGE_ALLOWANCE.ToString(),
                            staListItem.HOLDING_CHARGE_ALLOWANCE.ToString(),
                            staListItem.DEARNESS_ALLOWANCE.ToString(),

                            staListItem.HONORARIUM_ALLOWANCE.ToString(),
                            staListItem.OTHER_ALLOWANCE.ToString(),
                            staListItem.TDS_DEDUCTION.ToString(),
                            staListItem.OTHER_DEDUCTION.ToString(),
                            staListItem.NET_PAYABLE.ToString(),

                            staListItem.GENERATION_DATE.ToString("dd/MM/yyyy"),
                           "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddTourPaymentDetail(\"" + URLEncrypt.EncryptParameters1(new string[]{"IMS_INVOICE_ID="+staListItem.IMS_INVOICE_ID.ToString().Trim()}) + "\"); return false;'>View Payment Details</a>", 
                           //"<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddTourPaymentDetail(\"" + staListItem.IMS_INVOICE_ID.ToString().Trim() + "\"); return false;'>View Payment Details</a>", 
                            //"<a href='#'  class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteDetails(\"" + staListItem.IMS_INVOICE_ID + "\"); return false;'>Show Details</a>",                                      
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                //model = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetTourPaymentListDAL(int invoiceCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstPayment = (from payment in dbContext.QM_MONITOR_PAYMENTS
                                  where
                                  payment.IMS_INVOICE_ID == invoiceCode

                                  select new
                                  {
                                      payment.IMS_PAYMENT_ID,
                                      payment.IMS_INVOICE_ID,
                                      payment.IMS_NEFT_CHEQUE_NUMBER,
                                      payment.IMS_NEFT_CHEQUE_PAYMENT,
                                      payment.IMS_PAYMENT_DATE,
                                      payment.IMS_ENTRY_DATE,
                                      payment.IMS_PAYMENT_FINALIZE
                                  }).Distinct();
                totalRecords = lstPayment.Count();
                #region
                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        switch (sidx)
                //        {

                //            case "IMS_NEFT_CHEQUE_PAYMENT":
                //                lstPayment = lstPayment.OrderBy(m => m.IMS_NEFT_CHEQUE_PAYMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstPayment = lstPayment.OrderBy(m => m.IMS_PAYMENT_ID).ThenBy(x => x.IMS_NEFT_CHEQUE_PAYMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //    else
                //    {
                //        switch (sidx)
                //        {

                //            case "IMS_NEFT_CHEQUE_PAYMENT":
                //                lstPayment = lstPayment.OrderByDescending(m => m.IMS_NEFT_CHEQUE_PAYMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstPayment = lstPayment.OrderByDescending(m => m.IMS_PAYMENT_ID).ThenBy(x => x.IMS_NEFT_CHEQUE_PAYMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //}
                //else
                //{
                //    lstPayment = lstPayment.OrderByDescending(m => m.IMS_PAYMENT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //}
                #endregion
                var result = lstPayment.Select(pay => new
                {
                    pay.IMS_PAYMENT_ID,
                    pay.IMS_INVOICE_ID,
                    pay.IMS_NEFT_CHEQUE_NUMBER,
                    pay.IMS_NEFT_CHEQUE_PAYMENT,
                    pay.IMS_PAYMENT_DATE,
                    pay.IMS_ENTRY_DATE,
                    pay.IMS_PAYMENT_FINALIZE

                }).ToArray();

                return result.Select(m => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "IMS_INVOICE_ID=" + m.IMS_INVOICE_ID.ToString().Trim(), "IMS_PAYMENT_ID =" + m.IMS_PAYMENT_ID.ToString().Replace("/", "") }),
                    cell = new[]
                    {
                        m.IMS_NEFT_CHEQUE_PAYMENT=="N"?"NEFT":"Cheque",
                        m.IMS_NEFT_CHEQUE_NUMBER.ToString(),
                        m.IMS_PAYMENT_DATE==null?"":m.IMS_PAYMENT_DATE.ToString("dd/MM/yyyy"),
                        m.IMS_ENTRY_DATE==null?"":m.IMS_ENTRY_DATE.ToString("dd/MM/yyyy"),
                       m.IMS_PAYMENT_FINALIZE=="N"?
                                    "<center><a href='#' class='ui-icon ui-icon-pencil' onclick='EditTourPayment(\"" + URLEncrypt.EncryptParameters1(new string[] { "IMS_INVOICE_ID=" + m.IMS_INVOICE_ID.ToString().Trim(), "IMS_PAYMENT_ID =" + m.IMS_PAYMENT_ID.ToString().Replace("/", "") })+ "\"); return false;'>Edit</a></center>"
                                    :"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>",
                        m.IMS_PAYMENT_FINALIZE=="N"?
                        "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteTourPayment(\"" + URLEncrypt.EncryptParameters1(new string[] { "IMS_INVOICE_ID=" + m.IMS_INVOICE_ID.ToString().Trim(), "IMS_PAYMENT_ID =" + m.IMS_PAYMENT_ID.ToString().Replace("/", "") }) + "\"); return false;'>Delete</a></center>"
                        :"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>",
                          m.IMS_PAYMENT_FINALIZE=="N"?
                        "<center><a href='#' class='ui-icon ui-icon-unlocked' onclick='FinalizeTourPayment(\"" + URLEncrypt.EncryptParameters1(new string[] { "IMS_INVOICE_ID=" + m.IMS_INVOICE_ID.ToString().Trim(), "IMS_PAYMENT_ID =" + m.IMS_PAYMENT_ID.ToString().Replace("/", "") }) + "\"); return false;'>Finalize</a></center>"
                        :"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>",
                          m.IMS_PAYMENT_FINALIZE=="Y"?
                        "<center><a href='#' class='ui-icon ui-icon-unlocked' onclick='DeFinalizeTourPayment(\"" + URLEncrypt.EncryptParameters1(new string[] { "IMS_INVOICE_ID=" + m.IMS_INVOICE_ID.ToString().Trim(), "IMS_PAYMENT_ID =" + m.IMS_PAYMENT_ID.ToString().Replace("/", "") }) + "\"); return false;'>DeFinalize</a></center>"
                        :"<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>",
                     }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddTourPaymentDetailsDAL(TourAddPaymentModel model, ref string message)
        {
            int maxCode = 0;
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.QM_MONITOR_PAYMENTS.Any())
                {
                    maxCode = dbContext.QM_MONITOR_PAYMENTS.Max(s => s.IMS_PAYMENT_ID) + 1;

                }
                else
                {
                    maxCode = 1;
                }

                QM_MONITOR_PAYMENTS qm_monitor_payments = new QM_MONITOR_PAYMENTS();
                qm_monitor_payments.IMS_PAYMENT_ID = maxCode;
                qm_monitor_payments.IMS_INVOICE_ID = model.IMS_INVOICE_CODE;
                qm_monitor_payments.IMS_NEFT_CHEQUE_NUMBER = model.IMS_NEFT_CHEQUE_NUMBER;
                qm_monitor_payments.IMS_NEFT_CHEQUE_PAYMENT = model.Payment_Type;
                qm_monitor_payments.IMS_PAYMENT_DATE = DateTime.ParseExact(model.IMS_Payment_DATE, "dd/MM/yyyy", null);
                qm_monitor_payments.IMS_ENTRY_DATE = DateTime.Now;
                qm_monitor_payments.IMS_PAYMENT_FINALIZE = "N";
                qm_monitor_payments.USERID = PMGSYSession.Current.UserId;
                qm_monitor_payments.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext = new PMGSYEntities();
                dbContext.QM_MONITOR_PAYMENTS.Add(qm_monitor_payments);
                dbContext.SaveChanges();

                return true;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        /// <summary>
        /// Get Additional Cost Details.
        /// </summary>
        /// <param name="PayemntCode"></param>
        /// <param name="IMSInvoiceCode"></param>
        /// <returns></returns>
        public TourAddPaymentModel GetTourPaymentDetailsDAL(int PayemntCode, int IMSInvoiceCode)
        {

            try
            {
                dbContext = new PMGSYEntities();
                TourAddPaymentModel model = new TourAddPaymentModel();
                QM_MONITOR_PAYMENTS qm_monitor_payments = dbContext.QM_MONITOR_PAYMENTS.Where(m => m.IMS_PAYMENT_ID == PayemntCode && m.IMS_INVOICE_ID == IMSInvoiceCode).FirstOrDefault();
                //STAInvoiceViewModel staInvViewModel = StaPaymentReportDAL(IMSInvoiceCode);

                if (qm_monitor_payments != null)
                {
                    model.EncryptedIMS_Payment_CODE = URLEncrypt.EncryptParameters1(new string[] { "IMS_INVOICE_ID=" + IMSInvoiceCode.ToString().Trim(), "IMS_PAYMENT_ID =" + PayemntCode.ToString().Replace("/", "") });
                    model.EncryptedIMS_Invoice_Code = URLEncrypt.EncryptParameters1(new string[] { "IMS_INVOICE_ID=" + IMSInvoiceCode.ToString().Trim() });
                    model.IMS_NEFT_CHEQUE_NUMBER = qm_monitor_payments.IMS_NEFT_CHEQUE_NUMBER;
                    model.IMS_Payment_DATE = qm_monitor_payments.IMS_PAYMENT_DATE.ToString("dd/MM/yyyy");
                    model.Invoice_Generate_DATE = qm_monitor_payments.QM_GENERATED_INVOICE.GENERATION_DATE.ToString("dd/MM/yyyy");

                    model.Payment_Type = qm_monitor_payments.IMS_NEFT_CHEQUE_PAYMENT;
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool UpdateTourPaymentDetailsDAL(TourAddPaymentModel model, ref string message)
        {
            try
            {
                Dictionary<string, string> decryptedParameters = null;
                string[] encryptedParameter = null;
                dbContext = new PMGSYEntities();
                int IMS_Payment_Code = 0;
                int IMS_Invoice_Code = 0;

                encryptedParameter = model.EncryptedIMS_Payment_CODE.Split('/');

                if (!(encryptedParameter.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameter[0], encryptedParameter[1], encryptedParameter[2] });
                IMS_Invoice_Code = Convert.ToInt32(decryptedParameters["IMS_INVOICE_ID"].ToString());
                IMS_Payment_Code = Convert.ToInt32(decryptedParameters["IMS_PAYMENT_ID"].ToString());

                QM_MONITOR_PAYMENTS qm_monitor_payments = dbContext.QM_MONITOR_PAYMENTS.Where(m => m.IMS_PAYMENT_ID == IMS_Payment_Code && m.IMS_INVOICE_ID == IMS_Invoice_Code).FirstOrDefault();

                if (qm_monitor_payments == null)
                {
                    return false;
                }
                qm_monitor_payments.IMS_NEFT_CHEQUE_NUMBER = model.IMS_NEFT_CHEQUE_NUMBER;
                qm_monitor_payments.IMS_NEFT_CHEQUE_PAYMENT = model.Payment_Type;
                qm_monitor_payments.IMS_PAYMENT_DATE = DateTime.ParseExact(model.IMS_Payment_DATE, "dd/MM/yyyy", null);
                qm_monitor_payments.IMS_ENTRY_DATE = DateTime.Now;
                qm_monitor_payments.USERID = PMGSYSession.Current.UserId;
                qm_monitor_payments.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(qm_monitor_payments).State = EntityState.Modified;
                dbContext.SaveChanges();

                return true;

            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error ocuured while processing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteTourPaymentDetailsDAL(int paymentCode, int imsInvoiceCode, ref string message)
        {

            try
            {
                dbContext = new PMGSYEntities();

                QM_MONITOR_PAYMENTS qm_monitor_payments = dbContext.QM_MONITOR_PAYMENTS.Where(m => m.IMS_PAYMENT_ID == paymentCode && m.IMS_INVOICE_ID == imsInvoiceCode).FirstOrDefault();
                if (qm_monitor_payments == null)
                {
                    message = "Record not exist for delete.";
                    return false;
                }

                qm_monitor_payments.USERID = PMGSYSession.Current.UserId;
                qm_monitor_payments.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(qm_monitor_payments).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.QM_MONITOR_PAYMENTS.Remove(qm_monitor_payments);
                dbContext.SaveChanges();
                return true;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool FinalizeTourPaymentDetailsDAL(int paymentCode, int imsInvoiceCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QM_MONITOR_PAYMENTS qm_monitor_payments = dbContext.QM_MONITOR_PAYMENTS.Where(m => m.IMS_PAYMENT_ID == paymentCode && m.IMS_INVOICE_ID == imsInvoiceCode).FirstOrDefault();

                if (qm_monitor_payments == null)
                {
                    return false;
                }
                qm_monitor_payments.IMS_PAYMENT_FINALIZE = "Y";
                qm_monitor_payments.USERID = PMGSYSession.Current.UserId;
                qm_monitor_payments.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(qm_monitor_payments).State = EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error ocuured while processing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public QMTourGenerateInvoice GetTourInvoiceDetailsDAL(int IMSInvoiceCode)
        {

            try
            {
                dbContext = new PMGSYEntities();
                QMTourGenerateInvoice model = new QMTourGenerateInvoice();
                QM_GENERATED_INVOICE qm_generated_invoice = dbContext.QM_GENERATED_INVOICE.Where(m => m.IMS_INVOICE_ID == IMSInvoiceCode).FirstOrDefault();

                if (qm_generated_invoice != null)
                {
                    model.IMS_INVOICE_ID = qm_generated_invoice.IMS_INVOICE_ID;
                    model.MonitorName = qm_generated_invoice.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME + (qm_generated_invoice.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME != "" ? qm_generated_invoice.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME : "") + (qm_generated_invoice.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME != "" ? qm_generated_invoice.QUALITY_QM_SCHEDULE.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME : "");
                    model.INVOICE_FILE_NO = qm_generated_invoice.INVOICE_FILE_NO;
                }
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region Bank Details
        public Array ListBankDetailsQMDAL(int adminQmCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var lstContractorBankDetails = (from item in dbContext.ADMIN_QUALITY_MONITORS_BANK

                                                    //join officers in dbContext.ADMIN_NODAL_OFFICERS
                                                    //on item.ADMIN_NO_OFFICER_CODE equals officers.ADMIN_NO_OFFICER_CODE

                                                    //join districts in dbContext.MASTER_DISTRICT
                                                    //on item.MAST_DISTRICT_CODE equals districts.MAST_DISTRICT_CODE

                                                    //join state in dbContext.MASTER_STATE
                                                    //on districts.MAST_STATE_CODE equals state.MAST_STATE_CODE

                                                where
                                                 item.ADMIN_QM_CODE == adminQmCode
                                                select new
                                                {
                                                    item.MAST_ACCOUNT_ID,
                                                    item.MAST_ACCOUNT_NUMBER,
                                                    item.MAST_ACCOUNT_STATUS,
                                                    item.MAST_BANK_NAME,
                                                    item.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME,
                                                    item.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME,
                                                    item.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME,
                                                    item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                                    item.MAST_IFSC_CODE,
                                                    item.MAST_LOCK_STATUS,
                                                    item.ADMIN_QM_CODE,
                                                    item.MASTER_DISTRICT.MASTER_STATE.MAST_STATE_NAME

                                                }).ToList();

                totalRecords = lstContractorBankDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord == "asc")
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.ADMIN_QM_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderBy(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ContName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.ADMIN_QM_FNAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "State":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccNumber":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_NUMBER).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "BankName":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_BANK_NAME).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IfscCode":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_IFSC_CODE).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "AccStatus":
                                lstContractorBankDetails = lstContractorBankDetails.OrderByDescending(m => m.MAST_ACCOUNT_STATUS).Skip(Convert.ToInt32(rows * page)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                return lstContractorBankDetails.Select(item => new
                {
                    cell = new[]
                {
                    item.ADMIN_QM_FNAME +""+item.ADMIN_QM_MNAME+""+item.ADMIN_QM_LNAME,
                    item.MAST_DISTRICT_NAME.ToString(),
                    item.MAST_STATE_NAME==null?string.Empty:item.MAST_STATE_NAME.ToString(),
                    item.MAST_ACCOUNT_NUMBER==null?string.Empty:item.MAST_ACCOUNT_NUMBER.ToString(),
                    item.MAST_BANK_NAME==null?string.Empty:item.MAST_BANK_NAME.ToString(),
                    item.MAST_IFSC_CODE==null?"NA":item.MAST_IFSC_CODE,
                    item.MAST_ACCOUNT_STATUS=="A"?"Active":"InActive", 
                    //(item.MAST_ACCOUNT_STATUS=="A" && item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"ContractorId="+item.MAST_CON_ID.ToString().Trim()}):string.Empty
                    (item.MAST_LOCK_STATUS=="N")?URLEncrypt.EncryptParameters1(new string[]{"AccountCode="+item.MAST_ACCOUNT_ID.ToString().Trim(),"AdminQMCode="+item.ADMIN_QM_CODE.ToString().Trim()}):string.Empty //change on 17 june 2014 by deepak
                }

                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        //Added By Sammed Patil 05-apr-2016 start
        public bool IsBankDetailsExistsQM(QMBankDetailsModel model, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.ADMIN_QUALITY_MONITORS_BANK.Where(m => m.ADMIN_QM_CODE == model.ADMIN_QM_CODE && m.MAST_DISTRICT_CODE == model.MAST_DISTRICT_CODE && m.MAST_BANK_NAME == model.MAST_BANK_NAME && m.MAST_ACCOUNT_NUMBER == model.MAST_ACCOUNT_NUMBER).Count();

                if (recordCount > 0)
                {
                    message = "Bank Details are already exist.";
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool checkAlreadyExistsQM(QMBankDetailsModel model, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.ADMIN_QUALITY_MONITORS_BANK.Where(m => m.ADMIN_QM_CODE == model.ADMIN_QM_CODE && m.MAST_DISTRICT_CODE == model.MAST_DISTRICT_CODE && m.MAST_ACCOUNT_STATUS == "A").Count();
                if (recordCount > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool AddBankDetailsQM(QMBankDetailsModel model, ref string message)
        {
            bool flagAddEdit = true;
            bool recordCount = false;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.ADMIN_QUALITY_MONITORS_BANK.Any(m => m.ADMIN_QM_CODE == model.ADMIN_QM_CODE && m.MAST_DISTRICT_CODE == model.MAST_DISTRICT_CODE && m.MAST_ACCOUNT_STATUS == "A");
                if (recordCount)
                {
                    int maxBankID = (from item in dbContext.ADMIN_QUALITY_MONITORS_BANK
                                     where item.ADMIN_QM_CODE == model.ADMIN_QM_CODE
                                     select item.MAST_ACCOUNT_ID).Max();

                    ADMIN_QUALITY_MONITORS_BANK master = (from item in dbContext.ADMIN_QUALITY_MONITORS_BANK
                                                          where item.MAST_ACCOUNT_ID == maxBankID &&
                                                          item.ADMIN_QM_CODE == model.ADMIN_QM_CODE
                                                          select item).FirstOrDefault();

                    master.MAST_ACCOUNT_STATUS = "I";

                    //Added by abhishek kamble 27-nov-2013
                    master.USERID = PMGSYSession.Current.UserId;
                    master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.Entry(master).State = EntityState.Modified;
                    dbContext.SaveChanges();
                }

                ADMIN_QUALITY_MONITORS_BANK masterBankNO = new ADMIN_QUALITY_MONITORS_BANK();
                masterBankNO.MAST_ACCOUNT_ID = dbContext.ADMIN_QUALITY_MONITORS_BANK.Max(cp => (Int32?)cp.MAST_ACCOUNT_ID) == null ? 1 : (Int32)dbContext.ADMIN_QUALITY_MONITORS_BANK.Max(cp => (Int32?)cp.MAST_ACCOUNT_ID) + 1;
                //masterBankNO = CloneBankDetailsModel(masterBankNO, contractorBankDetails, flagAddEdit);

                if (flagAddEdit)
                {
                    masterBankNO.ADMIN_QM_CODE = model.ADMIN_QM_CODE;
                    masterBankNO.MAST_ACCOUNT_STATUS = "A";
                    masterBankNO.MAST_LOCK_STATUS = "N";
                }

                masterBankNO.MAST_ACCOUNT_NUMBER = model.MAST_ACCOUNT_NUMBER;
                masterBankNO.MAST_BANK_NAME = model.MAST_BANK_NAME;
                masterBankNO.MAST_DISTRICT_CODE = model.MAST_DISTRICT_CODE;
                masterBankNO.MAST_IFSC_CODE = model.MAST_IFSC_CODE == null ? null : model.MAST_IFSC_CODE.ToString().Trim();

                //Added by abhishek kamble 27-nov-2013
                masterBankNO.USERID = PMGSYSession.Current.UserId;
                masterBankNO.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext = new PMGSYEntities();

                dbContext.ADMIN_QUALITY_MONITORS_BANK.Add(masterBankNO);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteBankDetailsQM(int accountId, int monitorCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ADMIN_QUALITY_MONITORS_BANK masterContractorBank = dbContext.ADMIN_QUALITY_MONITORS_BANK.Where(m => m.ADMIN_QM_CODE == monitorCode && m.MAST_ACCOUNT_ID == accountId).FirstOrDefault();
                if (masterContractorBank == null)
                {
                    return false;
                }

                QM_GENERATED_INVOICE qm_generated_invoice = dbContext.QM_GENERATED_INVOICE.Where(x => x.QUALITY_QM_SCHEDULE.ADMIN_QM_CODE == monitorCode).FirstOrDefault();
                if (qm_generated_invoice != null)
                {
                    message = "Invoice is generated cannot delete the bank details";
                    return false;
                }

                //Added by abhishek kamble 27-nov-2013
                masterContractorBank.USERID = PMGSYSession.Current.UserId;
                masterContractorBank.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(masterContractorBank).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.ADMIN_QUALITY_MONITORS_BANK.Remove(masterContractorBank);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "You can not delete this Bank details.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region CQCAdmin + SQC Common

        /// <summary>
        /// Schedule List of Assigned scheduleFor Current Month Onwards
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>


        public Array GetScheduleListDAL(int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                int stateCode = 0;
                List<qm_get_schedule_current_month_onwards_Result> scheduleItemList = new List<qm_get_schedule_current_month_onwards_Result>();
                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string nameSearch = string.Empty;

                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "MONITOR_NAME":
                                nameSearch = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }
                string qmType = string.Empty;
                //if (PMGSYSession.Current.RoleCode == 5) //CQC
                if (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5) //CQCAdmin
                {
                    qmType = "I";
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //SQC
                {
                    qmType = "S";
                    stateCode = PMGSYSession.Current.StateCode;
                }

                month = (month == 0 ? DateTime.Now.Month : month);
                year = (year == 0 ? DateTime.Now.Year : year);

                scheduleItemList = dbContext.qm_get_schedule_current_month_onwards(0, qmType, stateCode, month, year, PMGSYSession.Current.UserId).Where
                                    (x => x.MONITOR_NAME.Contains(nameSearch.Equals(string.Empty) ? "" : nameSearch)
                                    ).ToList<qm_get_schedule_current_month_onwards_Result>();

                totalRecords = scheduleItemList.Count();

                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim(),
                    cell = new[] {
                                        "<a href='#'title='Click here to view the monitor details' style='text-decoration:none;' class='ui-align-center' onClick='ShowMonitorData(\"" +schDetails.ADMIN_QM_CODE.ToString().Trim()  +"\"); return false;'>" + schDetails.MONITOR_NAME + "</a>",
                                        (objCommonFunctions.getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR),
                                        schDetails.STATE_NAME,
                                        schDetails.DISTRICT_NAME,
                                        schDetails.DISTRICT_NAME2,
                                        schDetails.DISTRICT_NAME3,
                                        schDetails.INSP_STATUS_FLAG,
                                        (schDetails.ADMIN_QM_EMPANELLED=="N")?("<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"):((schDetails.FINALIZE_FLAG.ToUpper() == "CQC" && (schDetails.MAST_DISTRICT_CODE2 == null || schDetails.MAST_DISTRICT_CODE3 == null)) ? "<a href='#' title='Click here to add district to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='CQCAddDistrict(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddDistrict</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"),
                                        (schDetails.ADMIN_QM_EMPANELLED=="N")?("<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"):((schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignRoads(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"),

                                        (schDetails.ADMIN_QM_EMPANELLED=="N")?("<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"):((schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignContractors(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddContractors</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"),

                                        "<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewDetails(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>",
                                        
                                        //PMGSYSession.Current.RoleCode == 5 
                                        (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                        ?  (schDetails.FINALIZE_FLAG.ToUpper() == "CQC") ? "<a href='#' title='Click here to delete district from schedule' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteDistrict(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>DeleteDistrict</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        :  ((PMGSYSession.Current.RoleCode == 8|| PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                                             ? (schDetails.FINALIZE_FLAG.ToUpper() != "FSQC") ? "<a href='#' title='Click here to delete district from schedule' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteDistrict(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>DeleteDistrict</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                             : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"),
                                        
                                       
                                        //PMGSYSession.Current.RoleCode == 5 
                                        (schDetails.ADMIN_QM_EMPANELLED=="N")?("<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"):((PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                        ?  (schDetails.FINALIZE_FLAG.ToUpper() == "CQC") ? "<a href='#' title='Click here to finalize schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='FinalizeSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim() + "\",\"" + qmType  +"\"); return false;'>FinalizeSchedule</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        :  ((PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                                             ? (schDetails.FINALIZE_FLAG.ToUpper() != "FSQC") ? "<a href='#' title='Click here to finalize schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='FinalizeSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim() + "\",\"" + qmType  +"\"); return false;'>FinalizeSchedule</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                             : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")),

                                        dbContext.QUALITY_QM_LETTER.Where(c => c.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE).Any()
                                            ? "<a href='#' title='Click here to view letter' class='ui-icon ui-icon-zoomin ui-align-center' onClick='QMOpenGeneratedNQMLetter(\"" +  schDetails.ADMIN_SCHEDULE_CODE  + "\" ); return false;'>View Letter</a>"
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                        
                                        //For CQC & SQC 
                                        //PMGSYSession.Current.RoleCode == 5 
                                        (schDetails.ADMIN_QM_EMPANELLED=="N")?("<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"):((PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                        ?  (schDetails.FINALIZE_FLAG.ToUpper() == "CQC") ? "<a href='#' title='Click here to forward schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='ForwardSchedule(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>ForwardSchedule</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        :  ((PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                                             ? (schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? "<a href='#' title='Click here to forward schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='ForwardSchedule(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>ForwardSchedule</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                             : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")) ,

                                             //PMGSYSession.Current.RoleCode == 5  ?
                                             //( dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(c => c.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && c.DEVICE_FLAG =="N" && c.FINALIZE_FLAG =="SQC" && c.INSP_STATUS_FLAG=="S").Any()) ?"<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>" :
                                             //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" 
                                             //:"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"


                                              //PMGSYSession.Current.RoleCode == 5  ?


                                              // Below is commented on 12 Feb 2021 

                                             // (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5) ?
                                             //( dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(c => c.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && c.DEVICE_FLAG =="N" && (/*c.FINALIZE_FLAG =="SQC" || */c.FINALIZE_FLAG =="FSQC")   && c.INSP_STATUS_FLAG=="S").Any()) ? "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                             //"<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>" :
                                             //"<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>"  
                                             

                                             // Below is added on 12 Feb 2021  after commenting above (Record can be unlocked till schedule is not downloaded. )
                                             // (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5) ?
                                             //( dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(c => c.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && c.DEVICE_FLAG =="N" && (/*c.FINALIZE_FLAG =="SQC" || */c.FINALIZE_FLAG =="FSQC")   && c.INSP_STATUS_FLAG=="S").Any()) ?
                                             //(dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(m=>m.ADMIN_SCHEDULE_CODE==schDetails.ADMIN_SCHEDULE_CODE && m.IS_SCHEDULE_DOWNLOAD=="Y").Any()?
                                             ////"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":   // Commented on 15 March 2021 to allow unlocking before and after schedule download scenario
                                             //"<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>":
                                             //"<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>" ):
                                             //"<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>" :
                                             //"<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>"  
                    
                                             (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5) ?
                                             (dbContext.QUALITY_QM_SCHEDULE.Where(c => c.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE  && ( c.INSP_STATUS_FLAG=="S")).Any() ?  "<a href='#'  class='ui-icon ui-icon-unlocked ui-align-center'>Unlock Schedule</a>"   :  "<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-locked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>"  )

                                             : "<a href='#' title='Click here to unlock schedule' class='ui-icon ui-icon-locked ui-align-center' onClick='UnlockSchedule(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>Unlock Schedule</a>",

                                             //Added on 25-08-2022 by Srishti
                                             (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                             ? dbContext.NQM_TOUR_CLAIM_MASTER.Where(x => x.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE).Any()
                                                ? dbContext.NQM_TOUR_CLAIM_MASTER.Where(x => x.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && (x.FINALIZE_FLAG == 1)).Any()
                                                    ? "<a href='#' title='Click here to sanction tour amount' class='ui-icon ui-icon-plus ui-align-center' onClick='AddTourSanctionAmount(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'></a>"
                                                    : dbContext.NQM_TOUR_CLAIM_MASTER.Where(x => x.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && (x.FINALIZE_FLAG >= 2)).Any()
                                                        ? "<a href='#' title='Click here to sanction tour amount' class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddTourSanctionAmount(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'></a>"
                                                        : "--"
                                                : "--"
                                             : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                             (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                             ? dbContext.NQM_TOUR_CLAIM_MASTER.Where(x => x.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE).Any()
                                                ? dbContext.NQM_TOUR_CLAIM_MASTER.Where(x => x.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && (x.FINALIZE_FLAG == 1)).Any()
                                                    ? "<a href='#' title='Click here to finalize tour details' class='ui-icon ui-icon-unlocked ui-align-center' onClick='FinalizeTourDetailsCqc(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim() + "$" + month + "$" + year  +"\"); return false;'></a>"
                                                    : dbContext.NQM_TOUR_CLAIM_MASTER.Where(x => x.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && (x.FINALIZE_FLAG == 2)).Any()
                                                        ? "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                        : "--"
                                                : "--"
                                             : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"

                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Populate List to View & generate SQC Letters 
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array QMSQCLetterListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters, int inspMonth, int inspYear)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                List<USP_QM_LETTER_SQC_LIST_Result> sqcList = new List<USP_QM_LETTER_SQC_LIST_Result>();
                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string nameSearch = string.Empty;

                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "State":
                                nameSearch = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                sqcList = dbContext.USP_QM_LETTER_SQC_LIST(inspMonth, inspYear).Where
                                    (x => x.MAST_STATE_NAME.Contains(nameSearch.Equals(string.Empty) ? "" : nameSearch)
                                    ).ToList<USP_QM_LETTER_SQC_LIST_Result>();

                totalRecords = sqcList.Count();

                return sqcList.Select(sqcDetails => new
                {

                    id = sqcDetails.ADMIN_QC_CODE.ToString().Trim(),
                    cell = new[] {
                                        sqcDetails.MAST_STATE_NAME,
                                        sqcDetails.ADMIN_QC_NAME,
                                        (sqcDetails.LETTER_ID != null) ? "<a href='#' title='Click here to view letter' class='ui-icon ui-icon-zoomin ui-align-center' onClick='QMViewSQCLetter(\"" +  sqcDetails.LETTER_ID.ToString().Trim()  + "\" ); return false;'>View Letter</a>":"<a href='#' title='Click here to generate letter' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMGenerateSQCLetter(\"" +  sqcDetails.ADMIN_QC_CODE.ToString().Trim()  + "\"); return false;'>Generate</a>",
                                        (sqcDetails.MAIL_DELIVERY_STATUS != null && sqcDetails.MAIL_DELIVERY_STATUS != false)
                                            ? "Sent on " + sqcDetails.MAIL_DELIVERY_DATE.ToString()
                                            : (sqcDetails.LETTER_ID != null)
                                                ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMSendMailToSQC(\"" +  sqcDetails.ADMIN_QC_CODE.ToString().Trim()  + "\", \"" + sqcDetails.LETTER_ID.ToString().Trim() + "\"); return false;'>Send Mail</a>"
                                                : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Add Details to QUALITY_QM_LETTER, and generate letter
        /// </summary>
        /// <param name="id"></param>
        /// <param name="userType"></param>
        /// <param name="inspMonth"></param>
        /// <param name="inspYear"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddSQCLetterDetailsDAL(int id, short inspMonth, short inspYear, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            QMLetterModel letterModel = new QMLetterModel();
            try
            {
                var maxId = dbContext.QUALITY_QM_LETTER.Any() ? dbContext.QUALITY_QM_LETTER.Select(c => c.LETTER_ID).Max() : 0;

                QUALITY_QM_LETTER letterDetails = new QUALITY_QM_LETTER();
                letterDetails.LETTER_ID = maxId + 1;
                letterDetails.ADMIN_QM_CODE = null;
                letterDetails.ADMIN_SQC_CODE = id;
                letterDetails.TYPE = "S";
                letterDetails.ADMIN_SCHEDULE_CODE = null;
                letterDetails.ADMIN_IM_MONTH = inspMonth;
                letterDetails.ADMIN_IM_YEAR = inspYear;
                letterDetails.FILE_NAME = letterDetails.LETTER_ID.ToString() + ".pdf";
                letterDetails.GENERATION_DATE = DateTime.Now;
                letterDetails.MAIL_DELIVERY_STATUS = false;
                letterDetails.MAIL_DELIVERY_DATE = null;
                letterDetails.USERID = PMGSYSession.Current.UserId;
                letterDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.QUALITY_QM_LETTER.Add(letterDetails);

                if (dbContext.SaveChanges() > 0)
                {
                    letterModel.FILE_NAME = letterDetails.FILE_NAME;
                    letterModel.QC_TYPE = "S";
                    letterModel.QC_CODE = id;
                    letterModel.INSP_MONTH = inspMonth;
                    letterModel.INSP_YEAR = inspYear;
                    DateTime dtDate = new DateTime(inspYear, inspMonth, 1);
                    letterModel.MONTH_TEXT = dtDate.ToString("MMMM");
                    letterModel.YEAR_TEXT = inspYear.ToString();
                    letterModel.SQC_STATE_CODE = dbContext.ADMIN_SQC.Where(c => c.ADMIN_QC_CODE == id).Select(c => c.MAST_STATE_CODE).First();

                    GenerateLetter(letterModel);
                }

                return true;
            }
            catch (Exception)
            {
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Add Letter Details for NQM's schedule
        /// </summary>
        /// <param name="scheduleCode"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddNQMLetterDetailsDAL(int scheduleCode, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            QMLetterModel letterModel = new QMLetterModel();
            try
            {
                var scheduleDetails = dbContext.QUALITY_QM_SCHEDULE.Find(scheduleCode);
                var maxId = dbContext.QUALITY_QM_LETTER.Any() ? dbContext.QUALITY_QM_LETTER.Select(c => c.LETTER_ID).Max() : 0;

                QUALITY_QM_LETTER letterDetails = new QUALITY_QM_LETTER();
                letterDetails.LETTER_ID = maxId + 1;
                letterDetails.ADMIN_QM_CODE = scheduleDetails.ADMIN_QM_CODE;
                letterDetails.ADMIN_SQC_CODE = null;
                letterDetails.TYPE = "I";
                letterDetails.ADMIN_SCHEDULE_CODE = scheduleCode;
                letterDetails.ADMIN_IM_MONTH = Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH);
                letterDetails.ADMIN_IM_YEAR = Convert.ToInt16(scheduleDetails.ADMIN_IM_YEAR);
                letterDetails.FILE_NAME = letterDetails.LETTER_ID.ToString() + ".pdf";
                letterDetails.GENERATION_DATE = DateTime.Now;
                letterDetails.MAIL_DELIVERY_STATUS = false;
                letterDetails.MAIL_DELIVERY_DATE = null;
                letterDetails.USERID = PMGSYSession.Current.UserId;
                letterDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.QUALITY_QM_LETTER.Add(letterDetails);

                if (dbContext.SaveChanges() > 0)
                {
                    letterModel.FILE_NAME = letterDetails.FILE_NAME;
                    letterModel.QC_TYPE = "I";
                    letterModel.QC_CODE = dbContext.ADMIN_SQC.Where(c => c.MAST_STATE_CODE == scheduleDetails.MAST_STATE_CODE && c.ADMIN_ACTIVE_STATUS.Equals("Y")).Select(c => c.ADMIN_QC_CODE).First();
                    DateTime dtDate = new DateTime(scheduleDetails.ADMIN_IM_YEAR, scheduleDetails.ADMIN_IM_MONTH, 1);
                    letterModel.MONTH_TEXT = dtDate.ToString("MMMM");
                    letterModel.YEAR_TEXT = scheduleDetails.ADMIN_IM_YEAR.ToString();
                    letterModel.SCHEDULE_CODE = scheduleCode;///22-02-2023
                    letterModel.SQC_STATE_CODE = scheduleDetails.MAST_STATE_CODE;  ///22-02-2023

                    GenerateLetter(letterModel);
                }

                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AddLetterDetailsDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// generates the pdf file for SQC/NQM and store it to the server.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="sanctionModel"></param>
        public void GenerateLetter(QMLetterModel model)
        {
            dbContext = new PMGSYEntities();
            try
            {
                Microsoft.Reporting.WebForms.ReportViewer rview = new Microsoft.Reporting.WebForms.ReportViewer();
                rview.ServerReport.ReportServerUrl = new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.ReportServerUrl"]);
                System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter> paramList = new System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter>();
                if (model.QC_TYPE.Equals("S"))//SQC
                {
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("sqcCode", model.QC_CODE.ToString()));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("inspMonth", model.INSP_MONTH.ToString()));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("inspYear", model.INSP_YEAR.ToString()));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("stateCode", model.SQC_STATE_CODE.ToString()));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("qmType", "I"));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("inspMonthText", model.MONTH_TEXT));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("inspYearText", model.YEAR_TEXT));
                }
                else if (model.QC_TYPE.Equals("I"))//NQM - Independent Monitor
                {
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("qccode", model.QC_CODE.ToString()));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("inspMonthText", model.MONTH_TEXT));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("inspYearText", model.YEAR_TEXT));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("schedulecode", model.SCHEDULE_CODE.ToString()));
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("state", model.SQC_STATE_CODE.ToString()));          //22-02-2023 Changes by Abhishek
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("schedule", model.SCHEDULE_CODE.ToString()));
                }
                Microsoft.Reporting.WebForms.IReportServerCredentials irsc = new PMGSY.Common.CommonFunctions.CustomReportCredentials(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Username"], System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Password"]);
                rview.ServerReport.ReportServerCredentials = irsc;
                rview.ServerReport.ReportPath = model.QC_TYPE.Equals("S") ? "/PMGSYCitizen/SQC_Letter" : "/PMGSYCitizen/NQM_Letter";
                rview.ServerReport.SetParameters(paramList);
                string mimeType, encoding, extension, deviceInfo;
                string[] streamids;
                Microsoft.Reporting.WebForms.Warning[] warnings;
                string format = "PDF"; //Desired format goes here (PDF, Excel, or Image)
                deviceInfo = "<DeviceInfo>" + "<SimplePageHeaders>True</SimplePageHeaders>" + "</DeviceInfo>";
                byte[] bytes = rview.ServerReport.Render(format, deviceInfo, out mimeType, out encoding, out extension, out streamids, out warnings);
                string filePath = model.QC_TYPE.Equals("S") ? ConfigurationManager.AppSettings["QUALITY_QM_LETTER_SQC"].ToString() + model.FILE_NAME : ConfigurationManager.AppSettings["QUALITY_QM_LETTER_NQM"].ToString() + model.FILE_NAME;
                System.IO.File.WriteAllBytes(filePath, bytes);
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GenerateLetter()");
                throw ex;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Create new schedule for Monitor
        /// </summary>
        /// <param name="objQualityQMSchedule"></param>
        /// <returns></returns>
        public string QMCreateScheduleDAL(QUALITY_QM_SCHEDULE objQualityQMSchedule)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                Int32? MaxID;
                if (!dbContext.QUALITY_QM_SCHEDULE.Any())
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.QUALITY_QM_SCHEDULE select (Int32?)c.ADMIN_SCHEDULE_CODE ?? 0).Max();
                }

                objQualityQMSchedule.ADMIN_SCHEDULE_CODE = Convert.ToInt32(MaxID) + 1;

                //Added by abhishek kamble 30-nov-2013
                objQualityQMSchedule.USERID = PMGSYSession.Current.UserId;
                objQualityQMSchedule.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.QUALITY_QM_SCHEDULE.Add(objQualityQMSchedule);
                if (dbContext.SaveChanges() > 0)
                {
                    //Update Message Notification Table
                    CommonFunctions objCommonFunctions = new CommonFunctions();
                    string message = "Schedule is created for " +
                                    CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(objQualityQMSchedule.ADMIN_IM_MONTH) +
                                    " " + objQualityQMSchedule.ADMIN_IM_YEAR + ". But yet schedule is not finallized, so you can not download it.";
                    objCommonFunctions.NotificationForMonitors(objQualityQMSchedule.ADMIN_QM_CODE, message, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);

                }

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMCreateScheduleDAL().DbUpdateException");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMCreateScheduleDAL().OptimisticConcurrencyException");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMCreateScheduleDAL()");
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get districts for schedule creation
        /// Populate only those districts which are not assigned to any monitor in selected month & year of Visit
        /// </summary>
        /// <param name="selectedState"></param>
        /// <param name="month"></param>
        /// <param name="year"></param>
        /// <returns></returns>
        public List<SelectListItem> GetDistrictForScheduleCreationDAL(int selectedState, int month, int year)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                List<SelectListItem> lstDistrict = new List<SelectListItem>();
                List<int> filterList = new List<int>();

                string qmType = string.Empty;
                if (PMGSYSession.Current.RoleCode == 5)  //CQC
                {
                    qmType = "I";
                }
                else if (PMGSYSession.Current.RoleCode == 8)  //SQC
                {
                    qmType = "S";
                    selectedState = PMGSYSession.Current.StateCode;
                }


                // Validation removed on 19/06/2014 for SQM & NQM Also. As per Anand Singh's request.
                // FOr SQM - Same District can be allocated to differnet SQM in same Month
                // For NQM - Same District can't be allocated to two different monitors in same month
                // Already assigned districts for selected month & year for particular state.

                ////if (qmType.Equals("I"))
                ////{
                ////    var qmScheduledDistricts = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                ////                                join aqm in dbContext.ADMIN_QUALITY_MONITORS on qqs.ADMIN_QM_CODE equals aqm.ADMIN_QM_CODE
                ////                                where qqs.ADMIN_IM_MONTH == month
                ////                                && qqs.ADMIN_IM_YEAR == year
                ////                                && aqm.ADMIN_QM_TYPE == qmType
                ////                                && qqs.MAST_STATE_CODE == selectedState
                ////                                select qqs).Distinct().ToList();
                ////    foreach (var item in qmScheduledDistricts)
                ////    {
                ////        filterList.Add(item.MAST_DISTRICT_CODE);

                ////        if (item.MAST_DISTRICT_CODE2 != null)
                ////            filterList.Add(Convert.ToInt32(item.MAST_DISTRICT_CODE2));

                ////        if (item.MAST_DISTRICT_CODE3 != null)
                ////            filterList.Add(Convert.ToInt32(item.MAST_DISTRICT_CODE3));
                ////    }


                ////    var query = (from md in dbContext.MASTER_DISTRICT
                ////                 where md.MAST_STATE_CODE == selectedState
                ////                 && !filterList.Contains(md.MAST_DISTRICT_CODE)     //For NQM additional Condition
                ////                 select new
                ////                 {
                ////                     Value = md.MAST_DISTRICT_CODE,
                ////                     Text = md.MAST_DISTRICT_NAME
                ////                 }).OrderBy(aqm => aqm.Text).Distinct().OrderBy(a => a.Text).ToList();


                ////    SelectListItem selectItem;
                ////    lstDistrict = new List<SelectListItem>();
                ////    foreach (var data in query)
                ////    {
                ////        selectItem = new SelectListItem();
                ////        selectItem.Text = data.Text;
                ////        selectItem.Value = data.Value.ToString();
                ////        lstDistrict.Add(selectItem);
                ////    }

                ////}
                ////else if (qmType.Equals("S"))
                ////{
                var query = (from md in dbContext.MASTER_DISTRICT
                             where md.MAST_STATE_CODE == selectedState &&
                             md.MAST_DISTRICT_ACTIVE == "Y"                 //condition added by Shreyas 
                             select new
                             {
                                 Value = md.MAST_DISTRICT_CODE,
                                 Text = md.MAST_DISTRICT_NAME
                             }).OrderBy(aqm => aqm.Text).Distinct().OrderBy(a => a.Text).ToList();

                SelectListItem selectItem;
                lstDistrict = new List<SelectListItem>();
                foreach (var data in query)
                {
                    selectItem = new SelectListItem();
                    selectItem.Text = data.Text;
                    selectItem.Value = data.Value.ToString();
                    lstDistrict.Add(selectItem);
                }
                ////}

                return lstDistrict;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Details for Monitor in ViewModel
        /// </summary>
        /// <param name="qualityMonitorCode"></param>
        /// <returns></returns>
        public MasterAdminQualityMonitorViewModel MonitorDetailsDAL(int qualityMonitorCode)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                ADMIN_QUALITY_MONITORS qualityMonitorModel = dbContext.ADMIN_QUALITY_MONITORS.Find(qualityMonitorCode);

                MasterAdminQualityMonitorViewModel qualityMonitorViewModel = new MasterAdminQualityMonitorViewModel();
                qualityMonitorViewModel.ADMIN_QM_TYPE = qualityMonitorModel.ADMIN_QM_TYPE;

                qualityMonitorViewModel.MAST_STATE_CODE = Convert.ToInt32(qualityMonitorModel.MAST_STATE_CODE);
                qualityMonitorViewModel.STATE_NAME = qualityMonitorViewModel.MAST_STATE_CODE > 0 ? qualityMonitorModel.MASTER_STATE.MAST_STATE_NAME :
                    !(string.IsNullOrEmpty(Convert.ToString(qualityMonitorModel.MAST_STATE_CODE_ADDR))) ? dbContext.MASTER_STATE.Where(x => x.MAST_STATE_CODE == qualityMonitorModel.MAST_STATE_CODE_ADDR).Select(x => x.MAST_STATE_NAME).FirstOrDefault() : "-";

                qualityMonitorViewModel.ADMIN_QM_FNAME = qualityMonitorModel.ADMIN_QM_FNAME;
                qualityMonitorViewModel.ADMIN_QM_MNAME = String.IsNullOrEmpty(qualityMonitorModel.ADMIN_QM_MNAME) ? "--" : qualityMonitorModel.ADMIN_QM_MNAME;
                qualityMonitorViewModel.ADMIN_QM_LNAME = String.IsNullOrEmpty(qualityMonitorModel.ADMIN_QM_LNAME) ? "--" : qualityMonitorModel.ADMIN_QM_LNAME;

                qualityMonitorViewModel.ADMIN_QM_DESG = qualityMonitorModel.ADMIN_QM_DESG;
                qualityMonitorViewModel.DESIGNATION_NAME = qualityMonitorModel.MASTER_DESIGNATION.MAST_DESIG_NAME;

                qualityMonitorViewModel.MAST_DISTRICT_CODE = Convert.ToInt32(qualityMonitorModel.MAST_DISTRICT_CODE);
                qualityMonitorViewModel.DISTRICT_NAME = qualityMonitorModel.MAST_DISTRICT_CODE == null ? "--" : qualityMonitorModel.MASTER_DISTRICT.MAST_DISTRICT_NAME;

                qualityMonitorViewModel.ADMIN_QM_ADDRESS1 = string.IsNullOrEmpty(qualityMonitorModel.ADMIN_QM_ADDRESS1) ? "--" : qualityMonitorModel.ADMIN_QM_ADDRESS1;
                qualityMonitorViewModel.ADMIN_QM_ADDRESS2 = string.IsNullOrEmpty(qualityMonitorModel.ADMIN_QM_ADDRESS2) ? "--" : qualityMonitorModel.ADMIN_QM_ADDRESS2;

                //qualityMonitorViewModel.MAST_STATE_CODE_ADDR = qualityMonitorModel.MAST_STATE_CODE_ADDR;
                qualityMonitorViewModel.ADMIN_QM_PIN = string.IsNullOrEmpty(qualityMonitorModel.ADMIN_QM_PIN) ? "--" : qualityMonitorModel.ADMIN_QM_PIN;
                qualityMonitorViewModel.ADMIN_QM_STD1 = qualityMonitorModel.ADMIN_QM_STD1;
                qualityMonitorViewModel.ADMIN_QM_STD2 = qualityMonitorModel.ADMIN_QM_STD2;
                qualityMonitorViewModel.ADMIN_QM_PHONE1 = qualityMonitorModel.ADMIN_QM_PHONE1 == null ? "--" : qualityMonitorModel.ADMIN_QM_PHONE1;
                qualityMonitorViewModel.ADMIN_QM_PHONE2 = qualityMonitorModel.ADMIN_QM_PHONE2 == null ? "--" : qualityMonitorModel.ADMIN_QM_PHONE2;
                qualityMonitorViewModel.ADMIN_QM_STD_FAX = qualityMonitorModel.ADMIN_QM_STD_FAX == null ? "--" : qualityMonitorModel.ADMIN_QM_STD_FAX;
                qualityMonitorViewModel.ADMIN_QM_FAX = qualityMonitorModel.ADMIN_QM_FAX == null ? "--" : qualityMonitorModel.ADMIN_QM_FAX;
                qualityMonitorViewModel.ADMIN_QM_MOBILE1 = qualityMonitorModel.ADMIN_QM_MOBILE1 == null ? "--" : qualityMonitorModel.ADMIN_QM_MOBILE1;
                qualityMonitorViewModel.ADMIN_QM_MOBILE2 = qualityMonitorModel.ADMIN_QM_MOBILE2 == null ? "--" : qualityMonitorModel.ADMIN_QM_MOBILE2;
                qualityMonitorViewModel.ADMIN_QM_EMAIL = qualityMonitorModel.ADMIN_QM_EMAIL == null ? "--" : qualityMonitorModel.ADMIN_QM_EMAIL;
                qualityMonitorViewModel.ADMIN_QM_PAN = qualityMonitorModel.ADMIN_QM_PAN == null ? "--" : qualityMonitorModel.ADMIN_QM_PAN;
                qualityMonitorViewModel.ADMIN_QM_REMARKS = qualityMonitorModel.ADMIN_QM_REMARKS == null ? "--" : qualityMonitorModel.ADMIN_QM_REMARKS;

                //qualityMonitorViewModel.ADMIN_QM_EMPANELLED = qualityMonitorModel.ADMIN_QM_EMPANELLED;
                //qualityMonitorViewModel.ADMIN_QM_EMPANELLED_YEAR = qualityMonitorModel.ADMIN_QM_EMPANELLED_YEAR;
                //qualityMonitorViewModel.ADMIN_QM_IMAGE = qualityMonitorModel.ADMIN_QM_IMAGE;
                //qualityMonitorViewModel.ADMIN_QM_DOCPATH = qualityMonitorModel.ADMIN_QM_DOCPATH;


                return qualityMonitorViewModel;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "QM.MonitorDetailsDAL()");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }


        /// <summary>
        /// Get Unassigned District for further addition in schedule
        /// Get Assigned District for Road assignment
        /// </summary>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public List<SelectListItem> GetScheduledDistrictListDAL(int scheduleCode, bool isAssignedDistricts)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                QUALITY_QM_SCHEDULE objQualityQMSchedule = dbContext.QUALITY_QM_SCHEDULE.Find(scheduleCode);
                List<SelectListItem> lstDistrict = null;
                List<int> filterList = new List<int>();

                if (isAssignedDistricts)                                            //Populate already Assigned Districts in particualr schedule
                {
                    filterList.Add(objQualityQMSchedule.MAST_DISTRICT_CODE);

                    if (objQualityQMSchedule.MAST_DISTRICT_CODE2 != null)
                    {
                        filterList.Add(Convert.ToInt32(objQualityQMSchedule.MAST_DISTRICT_CODE2));
                    }

                    if (objQualityQMSchedule.MAST_DISTRICT_CODE3 != null)
                    {
                        filterList.Add(Convert.ToInt32(objQualityQMSchedule.MAST_DISTRICT_CODE3));
                    }


                    var query = (from c in dbContext.MASTER_DISTRICT
                                 where
                                 c.MAST_STATE_CODE == objQualityQMSchedule.MAST_STATE_CODE &&
                                 c.MAST_DISTRICT_ACTIVE == "Y" &&
                                 filterList.Contains(c.MAST_DISTRICT_CODE)
                                 select new
                                 {
                                     Text = c.MAST_DISTRICT_NAME,
                                     Value = c.MAST_DISTRICT_CODE
                                 }).ToList();

                    SelectListItem item;
                    lstDistrict = new List<SelectListItem>();
                    foreach (var data in query)
                    {
                        item = new SelectListItem();
                        item.Text = data.Text;
                        item.Value = data.Value.ToString();
                        lstDistrict.Add(item);
                    }
                }
                else
                {
                    //var query = (from c in dbContext.MASTER_DISTRICT
                    //             where
                    //             c.MAST_STATE_CODE == objQualityQMSchedule.MAST_STATE_CODE &&
                    //             c.MAST_DISTRICT_ACTIVE == "Y" &&
                    //             !filterList.Contains(c.MAST_DISTRICT_CODE)
                    //             select new
                    //             {
                    //                 Text = c.MAST_DISTRICT_NAME,
                    //                 Value = c.MAST_DISTRICT_CODE
                    //             }).ToList();


                    //Already assigned districts for selected month & year for particular state & monitor
                    var qmScheduledDistricts = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                                where qqs.ADMIN_IM_MONTH == objQualityQMSchedule.ADMIN_IM_MONTH
                                                && qqs.ADMIN_IM_YEAR == objQualityQMSchedule.ADMIN_IM_YEAR
                                                && qqs.MAST_STATE_CODE == objQualityQMSchedule.MAST_STATE_CODE
                                                && qqs.ADMIN_QM_CODE == objQualityQMSchedule.ADMIN_QM_CODE
                                                select qqs).Distinct().ToList();
                    //Prepare Filter
                    foreach (var schItem in qmScheduledDistricts)
                    {
                        filterList.Add(schItem.MAST_DISTRICT_CODE);

                        if (schItem.MAST_DISTRICT_CODE2 != null)
                            filterList.Add(Convert.ToInt32(schItem.MAST_DISTRICT_CODE2));

                        if (schItem.MAST_DISTRICT_CODE3 != null)
                            filterList.Add(Convert.ToInt32(schItem.MAST_DISTRICT_CODE3));
                    }

                    //Populate Only those districts which are not assigned for any monitor in particular Month & Year
                    var query = (from md in dbContext.MASTER_DISTRICT
                                 where md.MAST_STATE_CODE == objQualityQMSchedule.MAST_STATE_CODE && md.MAST_DISTRICT_ACTIVE == "Y"
                                 && !filterList.Contains(md.MAST_DISTRICT_CODE)
                                 select new
                                 {
                                     Value = md.MAST_DISTRICT_CODE,
                                     Text = md.MAST_DISTRICT_NAME
                                 }).OrderBy(aqm => aqm.Text).Distinct().OrderBy(a => a.Text).ToList();



                    SelectListItem item;
                    lstDistrict = new List<SelectListItem>();
                    foreach (var data in query)
                    {
                        item = new SelectListItem();
                        item.Text = data.Text;
                        item.Value = data.Value.ToString();
                        lstDistrict.Add(item);
                    }
                }

                return lstDistrict;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Add district to schedule
        /// </summary>
        /// <param name="qmCQCAddDistrict"></param>
        /// <returns></returns>
        public string CQCAddDistrictsDAL(QMCQCAddDistrictModel qmCQCAddDistrict)
        {
            dbContext = new PMGSYEntities();
            try
            {
                QUALITY_QM_SCHEDULE objQualityQMSchedule = dbContext.QUALITY_QM_SCHEDULE.Find(qmCQCAddDistrict.ADMIN_SCHEDULE_CODE);
                if (objQualityQMSchedule.MAST_DISTRICT_CODE2 == null)
                {
                    objQualityQMSchedule.MAST_DISTRICT_CODE2 = qmCQCAddDistrict.MAST_DISTRICT_CODE;
                }
                else if (objQualityQMSchedule.MAST_DISTRICT_CODE3 == null)
                {
                    objQualityQMSchedule.MAST_DISTRICT_CODE3 = qmCQCAddDistrict.MAST_DISTRICT_CODE;
                }

                //Added by abhishek kamble 30-nov-2013
                objQualityQMSchedule.USERID = PMGSYSession.Current.UserId;
                objQualityQMSchedule.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(objQualityQMSchedule).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        ///// <summary>
        ///// Road List to Assigned roads against Schedule
        ///// </summary>
        ///// <param name="page"></param>
        ///// <param name="rows"></param>
        ///// <param name="sidx"></param>
        ///// <param name="sord"></param>
        ///// <param name="totalRecords"></param>
        ///// <param name="filters"></param>
        ///// <returns></returns>
        //public Array GetRoadListToAssignDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters, int districtCode, int sanctionYear, string rdStatus, int adminSchCode)
        //{
        //    dbContext = new Models.PMGSYEntities();
        //    CommonFunctions objCommonFunctions = new CommonFunctions();
        //    List<qm_get_road_list_to_assign_Result> scheduleItemList = new List<qm_get_road_list_to_assign_Result>();

        //    try
        //    {
        //        //Extarct details of State, Monitor Code, Schedule Year, Schedule Month
        //        var schDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
        //                          where qqs.ADMIN_SCHEDULE_CODE == adminSchCode
        //                          select qqs).First();

        //        JavaScriptSerializer js = null;
        //        SearchJson test = new SearchJson();
        //        string blockSearch = string.Empty;
        //        string packageSearch = string.Empty;
        //        string roadSearch = string.Empty;
        //        string propTypeSearch = string.Empty;

        //        if (filters != null)
        //        {
        //            js = new JavaScriptSerializer();
        //            test = js.Deserialize<SearchJson>(filters);

        //            foreach (rules item in test.rules)
        //            {
        //                switch (item.field)
        //                {
        //                    case "Block": blockSearch = item.data;
        //                        break;
        //                    case "Package": packageSearch = item.data;
        //                        break;
        //                    case "Road": roadSearch = item.data;
        //                        break;
        //                    case "Type": propTypeSearch = item.data;
        //                        break;
        //                    default:
        //                        break;
        //                }
        //            }
        //        }

        //        propTypeSearch = propTypeSearch.Equals("road", StringComparison.OrdinalIgnoreCase) ? "P" : (propTypeSearch.Equals("lsb", StringComparison.OrdinalIgnoreCase) ? "L" : "");

        //        scheduleItemList = dbContext.qm_get_road_list_to_assign(schDetails.MAST_STATE_CODE,
        //                            districtCode, sanctionYear, rdStatus, schDetails.ADMIN_IM_YEAR, schDetails.ADMIN_IM_MONTH, schDetails.ADMIN_QM_CODE).Where
        //                            (x => x.BLOCK_NAME.Contains(blockSearch.Equals(string.Empty) ? "" : blockSearch) &&
        //                                x.PACKAGE.Contains(packageSearch.Equals(string.Empty) ? "" : packageSearch) &&
        //                                x.IMS_ROAD_NAME.Contains(roadSearch.Equals(string.Empty) ? "" : roadSearch) &&
        //                                x.IMS_PROPOSAL_TYPE.Contains(propTypeSearch.Equals(string.Empty) ? "" : propTypeSearch)
        //                            ).ToList<qm_get_road_list_to_assign_Result>();

        //        totalRecords = scheduleItemList.Count();

        //        return scheduleItemList.Select(schRoadDetails => new
        //        {
        //            id = schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim(),

        //            cell = new[] {                         
        //                            schRoadDetails.BLOCK_NAME,
        //                            schRoadDetails.PACKAGE,
        //                            schRoadDetails.IMS_ROAD_NAME,
        //                            schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
        //                            schRoadDetails.IMS_PAV_LENGTH.ToString(),
        //                            schRoadDetails.IMS_ISCOMPLETED.Equals("C") 
        //                                ? "Completed" 
        //                                : schRoadDetails.IMS_ISCOMPLETED.Equals("P")
        //                                    ? "In Progress" 
        //                                    : schRoadDetails.IMS_ISCOMPLETED.Equals("M")
        //                                        ? "Maintenance"
        //                                        : "Not Available",
        //                            schRoadDetails.NQM_INSPECTION_COUNT.ToString(),
        //                            schRoadDetails.SQM_INSPECTION_COUNT.ToString(),
        //                            schRoadDetails.PMGSY_SCHEME,
        //                            schRoadDetails.SCHEDULE_REMOVER_NAME != null
        //                            ? schRoadDetails.SCHEDULE_REMOVER_NAME
        //                            : schRoadDetails.SCHEDULE_ASSIGNER_NAME == null ? "--" : schRoadDetails.SCHEDULE_ASSIGNER_NAME,
        //                            schRoadDetails.ADMIN_IS_ENQUIRY,
        //                            //(schRoadDetails.SCHEDULE_ASSIGNER_NAME == null && schRoadDetails.ADMIN_IS_ENQUIRY == "N") ? "N" : "Y" ,

        //                            //(schRoadDetails.SCHEDULE_COUNT == 0 && schRoadDetails.SCHEDULE_ASSIGNER_NAME == null) ? "N" : "Y",   //Parameter for IsAlready assigend
        //                            (schRoadDetails.SCHEDULE_COUNT == 0 && schRoadDetails.SCHEDULE_ASSIGNER_NAME == null) ? "IsEnquiry":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
        //                            (schRoadDetails.SCHEDULE_COUNT == 0 && schRoadDetails.SCHEDULE_ASSIGNER_NAME == null) ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAddRoadToSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
        //                }
        //        }).ToArray();
        //    }
        //    catch (Exception)
        //    {
        //        totalRecords = 0;
        //        return null;
        //    }
        //    finally
        //    {
        //        dbContext.Dispose();
        //    }
        //}


        /// <summary>
        /// Road List to Assigned roads against Schedule
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array GetRoadListToAssignDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters, int districtCode, int adminSchCode, int techCode)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_get_works_to_assign_Result> scheduleItemList = new List<qm_get_works_to_assign_Result>();
            try
            {
                //Extarct details of State, Monitor Code, Schedule Year, Schedule Month
                var schDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                  where qqs.ADMIN_SCHEDULE_CODE == adminSchCode
                                  select qqs).First();

                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string blockSearch = string.Empty;
                string packageSearch = string.Empty;
                string roadSearch = string.Empty;
                string propTypeSearch = string.Empty;

                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "Block":
                                blockSearch = item.data;
                                break;
                            case "Package":
                                packageSearch = item.data;
                                break;
                            case "Road":
                                roadSearch = item.data;
                                break;
                            case "Type":
                                propTypeSearch = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                propTypeSearch = propTypeSearch.Equals("road", StringComparison.OrdinalIgnoreCase) ? "P" : (propTypeSearch.Equals("lsb", StringComparison.OrdinalIgnoreCase) ? "L" : "");

                scheduleItemList = dbContext.qm_get_works_to_assign(schDetails.MAST_STATE_CODE, districtCode, schDetails.ADMIN_SCHEDULE_CODE, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)).Where
                                    (x => x.MAST_BLOCK_NAME.Contains(blockSearch.Equals(string.Empty) ? "" : blockSearch) &&
                                        x.IMS_PACKAGE_ID.Contains(packageSearch.Equals(string.Empty) ? "" : packageSearch) &&
                                        x.IMS_ROAD_NAME.Contains(roadSearch.Equals(string.Empty) ? "" : roadSearch) &&
                                        x.IMS_PROPOSAL_TYPE.Contains(propTypeSearch.Equals(string.Empty) ? "" : propTypeSearch)
                                    ).ToList<qm_get_works_to_assign_Result>();

                if (techCode > 0)  //added for FDR
                {


                    var FDRRoadsList = (from mstech in dbContext.IMS_PROPOSAL_TECH
                                        where mstech.MAST_TECH_CODE == 64
                                        select mstech).ToList();


                    scheduleItemList = (from schitm in scheduleItemList
                                        where FDRRoadsList.Any(x => x.IMS_PR_ROAD_CODE == schitm.IMS_PR_ROAD_CODE)
                                        select schitm).ToList();
                }

                totalRecords = scheduleItemList.Count();

                var result = scheduleItemList.Select(executionDetails => new
                {
                    executionDetails.WORK_PRIORITY,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_YEAR,
                    executionDetails.IMS_PAV_LENGTH,

                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.CONTRACTOR_NAME,
                    executionDetails.COMMENCED_DATE,
                    executionDetails.COMPLETED_DATE,
                    executionDetails.ADDED_BY,
                    executionDetails.SCHEME,
                    executionDetails.NQM_LAST_INSP_DATE,
                    executionDetails.NQM_INSP,
                    executionDetails.SQM_LAST_INSP_DATE,
                    executionDetails.SQM_INSP,
                    executionDetails.IS_ENQUIRY,
                    executionDetails.IMS_ISCOMPLETED,
                    executionDetails.PROPOSAL_STATUS,
                    executionDetails.TECHNOLOGY,

                    flag = getDateDiff(executionDetails.NQM_LAST_INSP_DATE, executionDetails.SQM_LAST_INSP_DATE),
                    //Added on 27-09-2022
                    colorFlag = (from QOM in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                 join QS in dbContext.QUALITY_QM_SCHEDULE
                                 on QOM.ADMIN_SCHEDULE_CODE equals QS.ADMIN_SCHEDULE_CODE
                                 join AQM in dbContext.ADMIN_QUALITY_MONITORS on QS.ADMIN_QM_CODE equals AQM.ADMIN_QM_CODE
                                 where QOM.IMS_PR_ROAD_CODE == executionDetails.IMS_PR_ROAD_CODE && AQM.ADMIN_QM_TYPE == "I" && (QOM.QM_OVERALL_GRADE == 2 || QOM.QM_OVERALL_GRADE == 3)
                                 select new
                                 {
                                     QOM.IMS_PR_ROAD_CODE,
                                     AQM.ADMIN_QM_TYPE,
                                     QOM.QM_OBSERVATION_ID,
                                     QOM.QM_INSPECTION_DATE,
                                     QOM.QM_OVERALL_GRADE
                                 }).Any()

                                 ? "Y" : "N",
                    //agreementId = dbContext.TEND_AGREEMENT_DETAIL.Where(x=>x.IMS_PR_ROAD_CODE== executionDetails.IMS_PR_ROAD_CODE).Max(x=>x.TEND_AGREEMENT_ID),
                    //agreementId = (from TAD in dbContext.TEND_AGREEMENT_DETAIL
                    //               where TAD.IMS_PR_ROAD_CODE == executionDetails.IMS_PR_ROAD_CODE
                    //               select TAD).Max(TAD => TAD.amount),


                    // agg_IsFinalised = dbContext.TEND_AGREEMENT_MASTER.Where(m=>m.TEND_AGREEMENT_CODE== (dbContext.TEND_AGREEMENT_DETAIL.Where(x => x.IMS_PR_ROAD_CODE == executionDetails.IMS_PR_ROAD_CODE).OrderByDescending(p => p.TEND_AGREEMENT_ID).Select(y => y.TEND_AGREEMENT_CODE).FirstOrDefault())).Select(x=>x.TEND_IS_AGREEMENT_FINALIZED).FirstOrDefault()
                    executionDetails.TEND_IS_AGREEMENT_FINALIZED
                }).ToArray();

                return result.Select(schRoadDetails => new
                {
                    id = schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim(),

                    cell = new[] {    
                                    //schRoadDetails.WORK_ORDER.ToString(),
                                    schRoadDetails.WORK_PRIORITY,
                                    schRoadDetails.MAST_BLOCK_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                    schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR+1),
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : schRoadDetails.IMS_PROPOSAL_TYPE.Equals("L") ? "LSB" : "Building",
                                    schRoadDetails.IMS_PAV_LENGTH.ToString(),
                                    schRoadDetails.CONTRACTOR_NAME,
                                    schRoadDetails.COMMENCED_DATE == null ? "-" : (schRoadDetails.COMMENCED_DATE=="01 Jan 1960"?"-":schRoadDetails.COMMENCED_DATE),
                                    schRoadDetails.COMPLETED_DATE==null? "-":(schRoadDetails.COMPLETED_DATE=="01 Jan 1960"?"-":schRoadDetails.COMPLETED_DATE),// Added By Sachin 03 March 2020

                                    schRoadDetails.SCHEME,
                                    schRoadDetails.ADDED_BY != null ? schRoadDetails.ADDED_BY : "",
                                    schRoadDetails.NQM_LAST_INSP_DATE + " (" + schRoadDetails.NQM_INSP.ToString() + ")",
                                    schRoadDetails.SQM_LAST_INSP_DATE + " (" + schRoadDetails.SQM_INSP.ToString() + ")",
                                  //  schRoadDetails.TECHNOLOGY==null? "-":schRoadDetails.TECHNOLOGY.Trim(), // Added By Sachin 03 March 2020
                                    // schRoadDetails.TECHNOLOGY==null? "-":schRoadDetails.TECHNOLOGY.Trim().Remove(schRoadDetails.TECHNOLOGY.Length-1,1), // Added By Sachin 03 March 2020  
                                       schRoadDetails.TECHNOLOGY == null ? "-" :

                    (dbContext.IMS_PROPOSAL_TECH.Any(s=>s.IMS_PR_ROAD_CODE== schRoadDetails.IMS_PR_ROAD_CODE && s.MAST_TECH_CODE==64)? "<a href='#' style='color:blue' title='Click here to view Inspections' onClick=ShowTechDetailsAgainstRoad('" + URLEncrypt.EncryptParameters1(new String[] { "imsRoadID =" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "'); return false;'>" + schRoadDetails.TECHNOLOGY.Trim().Remove(schRoadDetails.TECHNOLOGY.Length - 1, 1) + "</a>"
:   schRoadDetails.TECHNOLOGY.Trim().Remove(schRoadDetails.TECHNOLOGY.Length - 1, 1)),
                                    "<a href='#' title='Click here to view Progress' onClick='QMViewProgress(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>"+ schRoadDetails.PROPOSAL_STATUS +"</a>",

                                    schRoadDetails.IS_ENQUIRY,
                                    (schRoadDetails.ADDED_BY.Equals("--")) ? "IsEnquiry":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    //(schRoadDetails.ADDED_BY.Equals("--")) ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAddRoadToSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                    "-",
                                    //(!(schRoadDetails.IMS_ISCOMPLETED == "P" || schRoadDetails.IMS_ISCOMPLETED == "C" || schRoadDetails.IMS_ISCOMPLETED == "X" || schRoadDetails.IMS_ISCOMPLETED == "G") || schRoadDetails.flag == false || schRoadDetails.IMS_PROPOSAL_TYPE == "B") ? "-" : "<input type='checkbox'>",
                                    //schRoadDetails.agg_IsFinalised == "Y" ? ((!(schRoadDetails.IMS_ISCOMPLETED == "P" || schRoadDetails.IMS_ISCOMPLETED == "C" || schRoadDetails.IMS_ISCOMPLETED == "X" || schRoadDetails.IMS_ISCOMPLETED == "G") || schRoadDetails.flag == false || schRoadDetails.IMS_PROPOSAL_TYPE == "B") ? "-" : "<input type='checkbox'>") : "Agreement is not Finalised",
                                   schRoadDetails.TEND_IS_AGREEMENT_FINALIZED=="Y"?((!(schRoadDetails.IMS_ISCOMPLETED == "P" || schRoadDetails.IMS_ISCOMPLETED == "C" || schRoadDetails.IMS_ISCOMPLETED == "X" || schRoadDetails.IMS_ISCOMPLETED == "G") || schRoadDetails.flag == false || schRoadDetails.IMS_PROPOSAL_TYPE == "B") ? "-" :"<input type='checkbox'>") : "Agreement is not Finalised",

                        schRoadDetails.colorFlag,//Added on 27-09-2022 to highlight records
                        }
                }).ToArray();
            }
            catch (Exception)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool getDateDiff(string dt1, string dt2)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            int month = 0;
            bool flg = false;
            bool flg1 = false;
            bool flg2 = false;
            DateTime currDt = DateTime.Now;
            if (dt1 == "---" && dt2 == "---")
            {
                return true;
            }
            try
            {
                month = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(x => x.Parameter == "QM_ASSG_PERIOD_MONTHS").Select(x => x.Value).First());

                if (dt1 != "---")
                {
                    DateTime nqmDate = Convert.ToDateTime(dt1);

                    int months = (currDt.Year - nqmDate.Year) * 12 + currDt.Month - nqmDate.Month;

                    if (months >= month)
                    {
                        flg1 = true;
                    }
                }
                else
                {
                    flg1 = true;
                }

                if (dt2 != "---")
                {
                    DateTime sqmDate = Convert.ToDateTime(dt2);

                    int months = (currDt.Year - sqmDate.Year) * 12 + currDt.Month - sqmDate.Month;

                    if (months >= month)
                    {
                        flg2 = true;
                    }
                }
                else
                {
                    flg2 = true;
                }

                //int months = (Date2.Year - Date1.Year) * 12 + Date2.Month - Date1.Month;
                flg = (flg1 && flg2) ? true : false;
                return flg;
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {

            }
        }


        /// <summary>
        /// Get Physical Progress Of Road to view against particular Road
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public Array GetRoadPhysicalProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int yearCode = 0;
            int monthCode = 0;
            if ((dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
            {
                yearCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                monthCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
            }
            try
            {
                var lstRoadDetails = (from item in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                      where item.IMS_PR_ROAD_CODE == proposalCode
                                      select new
                                      {
                                          item.EXEC_BASE_COURSE,
                                          item.EXEC_CD_WORKS,
                                          item.EXEC_COMPLETED,
                                          item.EXEC_EARTHWORK_SUBGRADE,
                                          item.EXEC_ISCOMPLETED,
                                          item.EXEC_LSB_WORKS,
                                          item.EXEC_MISCELANEOUS,
                                          item.EXEC_PREPARATORY_WORK,
                                          item.EXEC_PROG_MONTH,
                                          item.EXEC_PROG_YEAR,
                                          item.EXEC_SIGNS_STONES,
                                          item.EXEC_SUBBASE_PREPRATION,
                                          item.EXEC_SURFACE_COURSE,
                                          item.IMS_PR_ROAD_CODE,
                                      });


                totalRecords = lstRoadDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                        }
                        //lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstRoadDetails.Select(physicalDetails => new
                {
                    physicalDetails.EXEC_BASE_COURSE,
                    physicalDetails.EXEC_CD_WORKS,
                    physicalDetails.EXEC_COMPLETED,
                    physicalDetails.EXEC_EARTHWORK_SUBGRADE,
                    physicalDetails.EXEC_ISCOMPLETED,
                    physicalDetails.EXEC_LSB_WORKS,
                    physicalDetails.EXEC_MISCELANEOUS,
                    physicalDetails.EXEC_PREPARATORY_WORK,
                    physicalDetails.EXEC_PROG_MONTH,
                    physicalDetails.EXEC_PROG_YEAR,
                    physicalDetails.EXEC_SIGNS_STONES,
                    physicalDetails.EXEC_SUBBASE_PREPRATION,
                    physicalDetails.EXEC_SURFACE_COURSE,
                    physicalDetails.IMS_PR_ROAD_CODE,
                }).ToArray();

                return gridData.Select(physicalDetails => new
                {
                    id = physicalDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        physicalDetails.EXEC_PROG_MONTH == 1?"January":(physicalDetails.EXEC_PROG_MONTH == 2?"February":(physicalDetails.EXEC_PROG_MONTH == 3?"March":(physicalDetails.EXEC_PROG_MONTH == 4?"April":(physicalDetails.EXEC_PROG_MONTH == 5?"May":(physicalDetails.EXEC_PROG_MONTH == 6?"June":(physicalDetails.EXEC_PROG_MONTH == 7?"July":physicalDetails.EXEC_PROG_MONTH == 8?"August":(physicalDetails.EXEC_PROG_MONTH == 9?"September":(physicalDetails.EXEC_PROG_MONTH == 10?"October":(physicalDetails.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        physicalDetails.EXEC_PROG_YEAR.ToString(),
                        physicalDetails.EXEC_ISCOMPLETED=="P"?"In Progress":(physicalDetails.EXEC_ISCOMPLETED == "C"?"Completed":physicalDetails.EXEC_ISCOMPLETED == "F"?"Pending(Forest Clearance)":physicalDetails.EXEC_ISCOMPLETED == "A"?"Pending(Land Acquisition)":"Pending Legal Cases"),
                        physicalDetails.EXEC_PREPARATORY_WORK==null?"-":physicalDetails.EXEC_PREPARATORY_WORK.ToString(),
                        physicalDetails.EXEC_EARTHWORK_SUBGRADE==null?"-":physicalDetails.EXEC_EARTHWORK_SUBGRADE.ToString(),
                        physicalDetails.EXEC_SUBBASE_PREPRATION == null?"-":physicalDetails.EXEC_SUBBASE_PREPRATION.ToString(),
                        physicalDetails.EXEC_BASE_COURSE == null?"-":physicalDetails.EXEC_BASE_COURSE.ToString(),
                        physicalDetails.EXEC_SURFACE_COURSE == null?"-":physicalDetails.EXEC_SURFACE_COURSE.ToString(),
                        physicalDetails.EXEC_SIGNS_STONES == null?"-":physicalDetails.EXEC_SIGNS_STONES.ToString(),
                        physicalDetails.EXEC_CD_WORKS == null?"-":physicalDetails.EXEC_CD_WORKS.ToString(),
                        physicalDetails.EXEC_LSB_WORKS == null?"-":physicalDetails.EXEC_LSB_WORKS.ToString(),
                        physicalDetails.EXEC_MISCELANEOUS == null?"-":physicalDetails.EXEC_MISCELANEOUS.ToString(),
                        physicalDetails.EXEC_COMPLETED == null?"-":physicalDetails.EXEC_COMPLETED.ToString()
                    }
                }).ToArray();

            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Save Assigned Roads in schedule
        /// </summary>
        /// <param name="objQualityQMSchedule"></param>
        /// <returns></returns>
        //public string QMAssignRoadsDAL(QUALITY_QM_SCHEDULE_DETAILS objQualityQMSchedule)
        //{
        //    dbContext = new Models.PMGSYEntities();
        //    try
        //    {
        //        //Added by abhishek kamble 30-nov-2013
        //        objQualityQMSchedule.USERID = PMGSYSession.Current.UserId;
        //        objQualityQMSchedule.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

        //        dbContext.QUALITY_QM_SCHEDULE_DETAILS.Add(objQualityQMSchedule);
        //        dbContext.SaveChanges();

        //        return string.Empty;
        //    }
        //    catch (DbUpdateException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return ("An Error Occurred While Processing Your Request.");
        //    }
        //    catch (OptimisticConcurrencyException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return ("An Error Occurred While Processing Your Request.");
        //    }
        //    catch (Exception ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return ("An Error Occurred While Processing Request.");
        //    }
        //    finally
        //    {
        //        dbContext.Dispose();
        //    }
        //}


        /// <summary>
        /// Save Assigned Roads in schedule
        /// </summary>
        /// <param name="objQualityQMSchedule"></param>
        /// <returns></returns>
        public string QMAssignWorksDAL(List<QUALITY_QM_SCHEDULE_DETAILS> lstSchedule)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                using (TransactionScope transaction = new TransactionScope())
                {
                    foreach (var item in lstSchedule)
                    {
                        QUALITY_QM_SCHEDULE_DETAILS schDetails = new QUALITY_QM_SCHEDULE_DETAILS();
                        schDetails = item;
                        schDetails.USERID = PMGSYSession.Current.UserId;
                        schDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.QUALITY_QM_SCHEDULE_DETAILS.Add(schDetails);
                        dbContext.SaveChanges();
                        try
                        {
                            dbContext.USP_EFORMS_INITIALIZE(schDetails.IMS_PR_ROAD_CODE, schDetails.ADMIN_SCHEDULE_CODE, schDetails.USERID, schDetails.IPADD);

                        }
                        catch (Exception ex1)
                        {
                            ErrorLog.LogError(ex1, "QualityMonitoringDAL.QMAssignWorksDAL");
                            return ("An Error Occurred While creating schedule for eform.");
                        }
                    }

                    transaction.Complete();
                    return string.Empty;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMAssignWorksDAL");
                return ("An Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// View District Wise Schedule details for Finalization
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array QMViewScheduleDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int adminSchCode)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_get_assigned_road_list_Result> scheduleItemList = new List<qm_get_assigned_road_list_Result>();

            try
            {
                scheduleItemList = dbContext.qm_get_assigned_road_list(adminSchCode, PMGSYSession.Current.DistrictCode, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)).ToList<qm_get_assigned_road_list_Result>();
                totalRecords = scheduleItemList.Count();
                var staFlag = "N";
                scheduleItemList = scheduleItemList.OrderBy(x => x.DISTRICT_NAME).ToList();
                return scheduleItemList.Select(schRoadDetails => new
                {
                    id = schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim(),
                    cell = new[] {
                                        schRoadDetails.IMS_PR_ROAD_CODE.ToString(),
                                        schRoadDetails.DISTRICT_NAME,
                                        schRoadDetails.BLOCK_NAME,
                                        schRoadDetails.IMS_PACKAGE_ID,
                                        (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR + 1)).ToString(),
                                        schRoadDetails.IMS_ROAD_NAME,
                                        schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",

                                        // Added By Chandra Darshan Agrawal
                                        schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ?
                                        (schRoadDetails.IMS_IS_STAGED == "C" ? "Completed" : schRoadDetails.STAGE_PHASE)
                                        : "--",

                                        schRoadDetails.IMS_PAV_LENGTH.ToString(),
                                        //schRoadDetails.IMS_ISCOMPLETED.Equals("P")? "In Progress": "Completed - " + schRoadDetails.ROAD_COMPLETION_MONTH_YEAR ,
                                        schRoadDetails.CONTRACTOR_NAME,

                                        schRoadDetails.IMS_ISCOMPLETED.Equals("C")
                                        ? "Completed " + ((schRoadDetails.ROAD_COMPLETION_MONTH_YEAR != null && !schRoadDetails.ROAD_COMPLETION_MONTH_YEAR.Equals(string.Empty)) ? "(" + schRoadDetails.ROAD_COMPLETION_MONTH_YEAR + ")" : "")
                                        : schRoadDetails.IMS_ISCOMPLETED.Equals("P")
                                            ? "In Progress"
                                            : schRoadDetails.IMS_ISCOMPLETED.Equals("M")
                                                ? "Maintenance "+ ((schRoadDetails.ROAD_COMPLETION_MONTH_YEAR != null && !schRoadDetails.ROAD_COMPLETION_MONTH_YEAR.Equals(string.Empty)) ? "(" + schRoadDetails.ROAD_COMPLETION_MONTH_YEAR + ")" : "")
                                                : "Not Available",

                                        schRoadDetails.SCHEDULE_INSPECTION_STATUS.Equals("C") ? "Completed " : (schRoadDetails.SCHEDULE_INSPECTION_STATUS.Equals("P")? "In Progress" :(schRoadDetails.SCHEDULE_INSPECTION_STATUS.Equals("M") ? "Maintenance " : "Not Available")),

                                        schRoadDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                        schRoadDetails.SCHEDULE_ASSIGNED,
                                        /* added on 13-12-2021 by Srishti Tyagi */
                                        schRoadDetails.NQM_LAST_INSP_DATE + " (" + schRoadDetails.NQM_INSP.ToString() + ")",
                                        schRoadDetails.INSP_STATUS,
                                        schRoadDetails.PMGSY_SCHEME,

                                        //PMGSYSession.Current.RoleCode == 5 
                                        (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                        ?  (schRoadDetails.FINALIZE_FLAG.Trim() != "FSQC" && schRoadDetails.SCHEDULE_ASSIGNED.Trim() == "CQC" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "<a href='#' title='Click here to delete road' class='ui-icon ui-icon-trash ui-align-center' onClick='QMDeleteRoadFromSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Delete</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        :  (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                                             ? (schRoadDetails.FINALIZE_FLAG.Trim() != "FSQC" && schRoadDetails.SCHEDULE_ASSIGNED.Trim() != "CQC" && (dbContext.QUALITY_QM_SCHEDULE.Where(c => c.ADMIN_SCHEDULE_CODE == adminSchCode).Select(c => c.INSP_STATUS_FLAG).FirstOrDefault().ToUpper()) != "UPGF" ) ? "<a href='#' title='Click here to delete road' class='ui-icon ui-icon-trash ui-align-center' onClick='QMDeleteRoadFromSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Delete</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                             : (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38)
                                                ? (schRoadDetails.FINALIZE_FLAG.Trim() != "FSQC" && schRoadDetails.SCHEDULE_ASSIGNED.Trim() == "DPIU" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "<a href='#' title='Click here to delete road' class='ui-icon ui-icon-trash ui-align-center' onClick='QMDeleteRoadFromSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Delete</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                : PMGSYSession.Current.RoleCode == 6
                                                   ? (schRoadDetails.FINALIZE_FLAG.Trim() == "NQM" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated" ) ? "<a href='#' title='Click here to delete road' class='ui-icon ui-icon-trash ui-align-center' onClick='QMDeleteRoadFromSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Delete</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                   : PMGSYSession.Current.RoleCode == 7
                                                      ? (schRoadDetails.FINALIZE_FLAG.Trim() == "SQM" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "<a href='#' title='Click here to delete road' class='ui-icon ui-icon-trash ui-align-center' onClick='QMDeleteRoadFromSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Delete</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                      : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",


                                        // Finalize is Only For SQC / NQM / SQM
                                        (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                                        ? (schRoadDetails.FINALIZE_FLAG.Trim() != "FSQC" && (dbContext.QUALITY_QM_SCHEDULE.Where(c => c.ADMIN_SCHEDULE_CODE == adminSchCode).Select(c => c.INSP_STATUS_FLAG).FirstOrDefault().ToUpper()) != "UPGF")
                                            ? "<a href='#' title='Click here to finalize road in schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='FinalizeSchRoad(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "\", \"false\"); return false;'>FinalizeRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                            : PMGSYSession.Current.RoleCode == 6
                                              ? (schRoadDetails.FINALIZE_FLAG.Trim() == "NQM" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "<a href='#' title='Click here to finalize road in schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='FinalizeSchRoad(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "\", \"false\"); return false;'>FinalizeRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                              : PMGSYSession.Current.RoleCode == 7
                                                 ? (schRoadDetails.FINALIZE_FLAG.Trim() == "SQM" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "<a href='#' title='Click here to finalize road in schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='FinalizeSchRoad(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "\", \"false\"); return false;'>FinalizeRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                 : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                            //"-",

                                         staFlag = (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                        ?  (schRoadDetails.FINALIZE_FLAG.Trim() != "FSQC" && schRoadDetails.SCHEDULE_ASSIGNED.Trim() == "CQC" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "Y" : "N"
                                        :  (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                                             ? (schRoadDetails.FINALIZE_FLAG.Trim() != "FSQC" && schRoadDetails.SCHEDULE_ASSIGNED.Trim() != "CQC" && (dbContext.QUALITY_QM_SCHEDULE.Where(c => c.ADMIN_SCHEDULE_CODE == adminSchCode).Select(c => c.INSP_STATUS_FLAG).FirstOrDefault().ToUpper()) != "UPGF" ) ? "Y":"N"
                                             : (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38)
                                                ? (schRoadDetails.FINALIZE_FLAG.Trim() != "FSQC" && schRoadDetails.SCHEDULE_ASSIGNED.Trim() == "DPIU" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "Y":"N"
                                                : PMGSYSession.Current.RoleCode == 6
                                                   ? (schRoadDetails.FINALIZE_FLAG.Trim() == "NQM" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated" ) ? "Y":"N"
                                                   : PMGSYSession.Current.RoleCode == 7
                                                      ? (schRoadDetails.FINALIZE_FLAG.Trim() == "SQM" && schRoadDetails.INSP_STATUS.Trim().Trim() == "Initiated") ? "Y":"N"
                                                      : "N",

                            }

                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Delete Roads from Schedule
        /// </summary>
        /// <param name="prRoadCode"></param>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public string QMDeleteSchRoadsDAL(int prRoadCode, int scheduleCode)
        {
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    dbContext = new PMGSYEntities();
                    QUALITY_QM_SCHEDULE_DETAILS qualityQMScheduleDetails = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Find(scheduleCode, prRoadCode);
                    ///Changes for SQCRCPLWE
                    if ((PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) && qualityQMScheduleDetails.SCHEDULE_ASSIGNED.Equals("D"))
                    {
                        qualityQMScheduleDetails.FINALIZE_FLAG = "RSQC";                                        //if road assigned by DPIU & SQC removing it, then Finalize_Flag = RSQC

                        //Added by abhishek kamble 30-nov-2013
                        qualityQMScheduleDetails.USERID = PMGSYSession.Current.UserId;
                        qualityQMScheduleDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.Entry(qualityQMScheduleDetails).State = System.Data.Entity.EntityState.Modified;
                    }
                    else
                    {
                        bool status = true;
                        string temp = "";

                        //Added by abhishek kamble 30-nov-2013
                        qualityQMScheduleDetails.USERID = PMGSYSession.Current.UserId;
                        qualityQMScheduleDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(qualityQMScheduleDetails).State = EntityState.Modified;
                        dbContext.SaveChanges();



                        #region QMS APP VALIDATION
                        var obsIdList = dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode && s.IMS_PR_ROAD_CODE == prRoadCode).ToList();
                        foreach (var list in obsIdList)
                        {

                            int obsId = list.QM_OBSERVATION_ID;
                            if (dbContext.QUALITY_QM_OBSERVATION_MASTER.Any(x => x.QM_OBSERVATION_ID == obsId))
                            {
                                string roadname = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == prRoadCode).Select(m => m.IMS_ROAD_NAME).FirstOrDefault();
                                status = false;
                                string temp1 = "Work for the road- " + roadname + " can not be deleted, as observation filled on QMS App <br>";
                                temp = temp + temp1;

                            }
                        }
                        #endregion
                        //---vikky-23-06-2022----

                        // int eformId = dbContext.EFORM_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode && s.IMS_PR_ROAD_CODE == prRoadCode).Select(m => m.EFORM_ID).FirstOrDefault();
                        var eformIdList = dbContext.EFORM_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode && s.IMS_PR_ROAD_CODE == prRoadCode).OrderByDescending(m => m.EFORM_ID).ToList();
                        foreach (var list in eformIdList)
                        {
                            int eformId = list.EFORM_ID;
                            if (dbContext.EFORM_MASTER.Any(x => x.EFORM_ID == eformId))
                            {
                                //string temp1 = "testing purpose";
                                //return temp1;
                                if (dbContext.EFORM_PDF_UPLOAD_DETAIL.Any(x => x.EFORM_ID == eformId))
                                {
                                    status = false;
                                    string roadname = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == prRoadCode).Select(m => m.IMS_ROAD_NAME).FirstOrDefault();
                                    string temp2 = "";
                                    int count = dbContext.EFORM_PDF_UPLOAD_DETAIL.Where(s => s.EFORM_ID == eformId).Count();
                                    if (count == 1)
                                    {
                                        temp2 = "Work for the road- " + roadname + " can not be deleted, as eform is uploaded by PIU with e-Form Id: " + eformId + "<br>";
                                    }
                                    else
                                    {
                                        string qmType = "N";
                                        qmType = dbContext.EFORM_MASTER.Where(s => s.EFORM_ID == eformId).Select(m => m.ADMIN_QM_TYPE).FirstOrDefault();
                                        temp2 = "Work for the road- " + roadname + " can not be deleted, as eform is uploaded by both PIU & " + (qmType == "I" ? "NQM" : "SQM") + " with e-Form Id: " + eformId + "<br>";
                                    }
                                    temp = temp + temp2;
                                }
                                else
                                {
                                    var insp_records = dbContext.EFORM_PIU_PREVIOUS_INSP_DETAILS.Where(x => x.EFORM_ID == eformId);
                                    dbContext.EFORM_PIU_PREVIOUS_INSP_DETAILS.RemoveRange(insp_records);
                                    var pref_Details = dbContext.EFORM_PREFILLED_DETAILS.Where(x => x.EFORM_ID == eformId);
                                    dbContext.EFORM_PREFILLED_DETAILS.RemoveRange(pref_Details);
                                    var eform_master_details = dbContext.EFORM_MASTER.Where(x => x.EFORM_ID == eformId);
                                    dbContext.EFORM_MASTER.RemoveRange(eform_master_details);
                                    var eform_du_logs = dbContext.EFORM_DU_LOG.Where(x => x.EFORM_ID == eformId);
                                    dbContext.EFORM_DU_LOG.RemoveRange(eform_du_logs);
                                }
                            }
                        }
                        if (status == false)
                        {
                            return temp;
                        }

                        dbContext.QUALITY_QM_SCHEDULE_DETAILS.Remove(qualityQMScheduleDetails);
                    }
                    dbContext.SaveChanges();
                    ts.Complete();
                    return string.Empty;
                }
                catch (DbUpdateException ex)
                {
                    ErrorLog.LogError(ex, "QualityMonitoringDal.QMDeleteSchRoadsDAL()");
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return ("An Error Occurred While Processing Your Request.");
                }
                catch (OptimisticConcurrencyException ex)
                {
                    ErrorLog.LogError(ex, "QualityMonitoringDal.QMDeleteSchRoadsDAL()");
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return ("An Error Occurred While Processing Your Request.");
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "QualityMonitoringDal.QMDeleteSchRoadsDAL()");
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return ("Error Occurred While Processing Your Request.");
                }

                finally
                {

                    dbContext.Dispose();
                }
            }

        }


        /// <summary>
        /// Delete Specific District from Schedule
        /// </summary>
        /// <param name="districtCode"></param>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public string CQCDeleteDistrictDAL(int districtCode, int scheduleCode)
        {
            dbContext = new PMGSYEntities();

            using (TransactionScope ts = new TransactionScope())
            {
                bool flag = true;
                string errString = "";
                try
                {
                    //---vikky-23-06-2022----

                    //  QMS APP validation IF FILLED OBSERVATION
                    #region qms validation
                    var lstobs = dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode).Select(m => m.IMS_PR_ROAD_CODE).ToList().Distinct();

                    int districtCode2 = districtCode;
                    foreach (var roadCode in lstobs)
                    {
                        if (districtCode2 == 0)
                        {
                            districtCode = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == roadCode).Select(m => m.MAST_DISTRICT_CODE).FirstOrDefault();
                        }
                        int roadCodeFrmIMS = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == roadCode && s.MAST_DISTRICT_CODE == districtCode).Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();



                        if (roadCodeFrmIMS != 0)
                        {

                            var obsIdList = dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode && s.IMS_PR_ROAD_CODE == roadCode).OrderByDescending(n => n.QM_OBSERVATION_ID).ToList();
                            foreach (var list in obsIdList)
                            {
                                int obsId = list.QM_OBSERVATION_ID;
                                if (dbContext.QUALITY_QM_OBSERVATION_MASTER.Any(x => x.QM_OBSERVATION_ID == obsId))
                                {


                                    flag = false;
                                    string temp = "";
                                    string districtName = dbContext.MASTER_DISTRICT.Where(s => s.MAST_DISTRICT_CODE == districtCode).Select(m => m.MAST_DISTRICT_NAME).FirstOrDefault();
                                    string roadName = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == roadCode).Select(m => m.IMS_ROAD_NAME).FirstOrDefault();
                                    temp = "<br>" + "District- " + districtName + " can not be deleted, as observation is filled on QMS app for the work " + roadName;
                                    errString = errString + temp;


                                }
                            }

                        }

                    }


                    #endregion







                    var lst = dbContext.EFORM_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode).Select(m => m.IMS_PR_ROAD_CODE).ToList().Distinct();

                    //return "testing";
                    int districtCode1 = districtCode;
                    foreach (var roadCode in lst)
                    {
                        if (districtCode1 == 0)
                        {
                            districtCode = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == roadCode).Select(m => m.MAST_DISTRICT_CODE).FirstOrDefault();
                        }
                        int roadCodeFrmIMS = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == roadCode && s.MAST_DISTRICT_CODE == districtCode).Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();



                        if (roadCodeFrmIMS != 0)
                        {
                            //int eformId = dbContext.EFORM_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode && s.IMS_PR_ROAD_CODE == roadCode).OrderByDescending(n => n.EFORM_ID).Select(m => m.EFORM_ID).FirstOrDefault();
                            var eformIdList = dbContext.EFORM_MASTER.Where(s => s.ADMIN_SCHEDULE_CODE == scheduleCode && s.IMS_PR_ROAD_CODE == roadCode).OrderByDescending(n => n.EFORM_ID).ToList();
                            foreach (var list in eformIdList)
                            {
                                int eformId = list.EFORM_ID;
                                if (dbContext.EFORM_MASTER.Any(x => x.EFORM_ID == eformId))
                                {
                                    //errString = "testing purpose";
                                    //return errString;
                                    if (dbContext.EFORM_PDF_UPLOAD_DETAIL.Any(x => x.EFORM_ID == eformId))
                                    {
                                        flag = false;
                                        string temp = "";
                                        string districtName = dbContext.MASTER_DISTRICT.Where(s => s.MAST_DISTRICT_CODE == districtCode).Select(m => m.MAST_DISTRICT_NAME).FirstOrDefault();
                                        string roadName = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == roadCode).Select(m => m.IMS_ROAD_NAME).FirstOrDefault();
                                        int count = dbContext.EFORM_PDF_UPLOAD_DETAIL.Where(s => s.EFORM_ID == eformId).Count();
                                        if (count == 1)
                                        {
                                            temp = "<br>" + "District- " + districtName + " can not be deleted, as eform is uploaded by PIU for the work " + roadName + " with e-Form Id: " + eformId;
                                        }
                                        else
                                        {
                                            string qmType = "N";
                                            qmType = dbContext.EFORM_MASTER.Where(s => s.EFORM_ID == eformId).Select(m => m.ADMIN_QM_TYPE).FirstOrDefault();
                                            temp = "<br>" + "District- " + districtName + " can not be deleted, as eform is uploaded by both PIU & " + (qmType == "I" ? "NQM" : "SQM") + " for the work " + roadName + " with e-Form Id: " + eformId;
                                        }
                                        errString = errString + temp;
                                    }
                                    else
                                    {
                                        var insp_records = dbContext.EFORM_PIU_PREVIOUS_INSP_DETAILS.Where(x => x.EFORM_ID == eformId);
                                        dbContext.EFORM_PIU_PREVIOUS_INSP_DETAILS.RemoveRange(insp_records);
                                        var pref_Details = dbContext.EFORM_PREFILLED_DETAILS.Where(x => x.EFORM_ID == eformId);
                                        dbContext.EFORM_PREFILLED_DETAILS.RemoveRange(pref_Details);
                                        var eform_master_details = dbContext.EFORM_MASTER.Where(x => x.EFORM_ID == eformId);
                                        dbContext.EFORM_MASTER.RemoveRange(eform_master_details);
                                        var eform_du_logs = dbContext.EFORM_DU_LOG.Where(x => x.EFORM_ID == eformId);
                                        dbContext.EFORM_DU_LOG.RemoveRange(eform_du_logs);
                                        dbContext.SaveChanges();
                                    }
                                }
                            }

                        }

                    }
                    if (flag == false)
                    {
                        return errString;
                    }





                    dbContext.qm_delete_roads_under_district(scheduleCode, districtCode1, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);
                    dbContext.SaveChanges();
                    ts.Complete();
                    return string.Empty;
                }
                catch (DbUpdateException ex)
                {
                    ErrorLog.LogError(ex, "QualityMonitoringDal.CQCDeleteDistrictDAL()");
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return ("An Error Occurred While Processing Your Request.");
                }
                catch (OptimisticConcurrencyException ex)
                {
                    ErrorLog.LogError(ex, "QualityMonitoringDal.CQCDeleteDistrictDAL()");
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return ("An Error Occurred While Processing Your Request.");
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "QualityMonitoringDal.CQCDeleteDistrictDAL()");
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    return ("An Error Occurred While Processing Your Request.");
                }
                finally
                {
                    dbContext.Dispose();
                }
            }

        }


        /// <summary>
        /// Finalize District by CQC or SQC
        /// </summary>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public string FinalizeDistrictsDAL(int scheduleCode)
        {
            dbContext = new PMGSYEntities();


            var finalizeCntQuery = (from qqsd in dbContext.QUALITY_QM_SCHEDULE_DETAILS
                                    where qqsd.ADMIN_SCHEDULE_CODE == scheduleCode
                                    select qqsd).Count();

            if (finalizeCntQuery == 0)
            {
                return ("None of the roads assigned in the schedule. Please assign atleast one of the roads.");
            }



            try
            {
                string FinalizeFlag = null;
                //if (PMGSYSession.Current.RoleCode == 5)  //For CQC
                if (PMGSYSession.Current.RoleCode == 9)  //For CQC
                {
                    FinalizeFlag = "FCQC";
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)    //For SQC
                {
                    FinalizeFlag = "FSQC";
                }
                dbContext.qm_finalize_districts(scheduleCode, FinalizeFlag, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Finalize road by SQC
        /// </summary>
        /// <param name="scheduleCode"></param>
        /// <param name="prRoadCode"></param>
        /// <returns></returns>
        public string FinalizeRoadDAL(int prRoadCode, int scheduleCode, bool isFinalizeAllRoads)
        {
            dbContext = new PMGSYEntities();
            try
            {
                string FinalizeFlag = null;
                ///Changes for SQCRCPLWE
                if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)  //For SQC
                {
                    FinalizeFlag = "FSQC";

                }
                else if (PMGSYSession.Current.RoleCode == 6)    //For NQM
                {
                    FinalizeFlag = "NQM";
                }
                else if (PMGSYSession.Current.RoleCode == 7)    //For SQM
                {
                    FinalizeFlag = "SQM";
                }


                //isFinalizeAllRoads = 1;

                int updateCnt = dbContext.qm_finalize_roads(scheduleCode, prRoadCode, FinalizeFlag, isFinalizeAllRoads ? 1 : 0, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);
                dbContext.SaveChanges();
                if (updateCnt > 0)
                    return string.Empty;
                else if (updateCnt == 0)
                    return ("No record found to Finalize.");
                else
                    return ("An Error Occurred While Processing Your Request.");
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Forward Schedule to Monitor
        /// </summary>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public string ForwardScheduleDAL(int scheduleCode)
        {
            int insertMessageCnt = 0;
            dbContext = new PMGSYEntities();
            try
            {
                //if (PMGSYSession.Current.RoleCode == 5) //CQC
                if (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5) //CQC
                {
                    var finalizeCntQuery = (from qqsd in dbContext.QUALITY_QM_SCHEDULE_DETAILS
                                            where qqsd.ADMIN_SCHEDULE_CODE == scheduleCode
                                            select qqsd).Count();

                    if (finalizeCntQuery == 0)
                    {
                        return ("None of the roads assigned in the schedule. Please assign atleast one of the roads.");
                    }
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //SQC
                {
                    var finalizeCntQuery = (from qqsd in dbContext.QUALITY_QM_SCHEDULE_DETAILS
                                            where qqsd.ADMIN_SCHEDULE_CODE == scheduleCode
                                            && qqsd.FINALIZE_FLAG == "FSQC"
                                            select qqsd).Count();

                    if (finalizeCntQuery == 0)
                    {
                        return ("None of the roads under this schedule are finalized to forward. Please finalize atleast one of the roads.");
                    }
                }


                string ForwardBy = null;
                //if (PMGSYSession.Current.RoleCode == 5)  //For CQC
                if (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)  //For CQC
                {
                    ForwardBy = "CQC";
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)    //For SQC
                {
                    ForwardBy = "SQC";
                }
                int updateCnt = dbContext.qm_forward_schedule(scheduleCode, ForwardBy, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);

                if (updateCnt > 0)
                {
                    //Update Message Notification Table
                    CommonFunctions objCommonFunctions = new CommonFunctions();
                    var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                           where qqs.ADMIN_SCHEDULE_CODE == scheduleCode
                                           select qqs).First();

                    string message = "Schedule for " + CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(scheduleDetails.ADMIN_IM_MONTH) +
                                    " " + scheduleDetails.ADMIN_IM_YEAR + " is finalized & forwarded by " + ForwardBy + ". You can download the schedule.";
                    insertMessageCnt = objCommonFunctions.NotificationForMonitors(scheduleDetails.ADMIN_QM_CODE, message, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);

                }
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Unlock Schedule
        /// </summary>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public string UnlockScheduleDAL(int scheduleCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int count = dbContext.qm_unlock_schedule(scheduleCode, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);
                return count == 0 ? "An Error Occurred While Processing Your Request" : string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Inspection Details Lising
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>

        public Array QMViewInspectionDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                               int stateCode, int monitorCode, int fromMonth, int fromYear,
                                               int toMonth, int toYear, int schemeType, string roadStatus, string roadOrBridge, string gradeType, string eFormStatusType)
        {
            dbContext = new PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            //    List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();   //comment on 30-06-2022 by vikky

            List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();  //add on 30-06-2022 by vikky


            Int32 ImageCount = 0;

            try
            {

                string qmType = string.Empty;
                //if (PMGSYSession.Current.RoleCode == 5) //CQC
                if (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5) //CQCAdmin
                {
                    qmType = "I";
                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "NQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //SQC
                {
                    qmType = "S";
                    stateCode = PMGSYSession.Current.StateCode;
                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }
                if (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                {
                    //  scheduleItemListTemp = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode).ToList<qm_inspection_list_Result>();  //comment on 30-06-2022 by vikky 

                    scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, eFormStatusType).ToList<qm_inspection_list_Result>();  //change on 30-06-2022 by vikky                
                }
                else
                {
                    //scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", "A", stateCode, 0, qmType, PMGSYSession.Current.PMGSYScheme, PMGSYSession.Current.RoleCode).ToList<qm_inspection_list_Result>();   //comment on 30-06-2022 by vikky 
                    scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, eFormStatusType).ToList<qm_inspection_list_Result>();  //change on 30-06-2022 by vikky 
                }

                totalRecords = scheduleItemList.Count();

                return scheduleItemList.Select(schRoadDetails => new
                {
                    id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                    schRoadDetails.MONITOR_NAME,
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,
                                    schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                   // (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),
                                     schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                     schRoadDetails.PMGSY_SCHEME,
                                     schRoadDetails.IMS_ISCOMPLETED,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P")?schRoadDetails.IMS_PAV_LENGTH.ToString():schRoadDetails.IMS_BRIDGE_LENGTH.ToString(),
                                     schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                  //  schRoadDetails.QM_SCHEDULE_DATE.ToString(),
                                    schRoadDetails.QM_INSPECTION_DATE.ToString(),     
                               //      schRoadDetails.QM_OBS_UPLOAD_DATE.ToString(),
                                 //   schRoadDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                     schRoadDetails.OVERALL_GRADE,
                                     schRoadDetails.ADMIN_IS_ENQUIRY.Equals("Y")?"Enquiry Inspection":"Normal Inspection",
                                       "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                               

                                    //schRoadDetails.UPLOAD_BY,
                                    //schRoadDetails.UPLOAD_BY=schRoadDetails.NO_OF_PHOTO_UPLOADED >=15 ? "Completed" : "Not Completed" ,
                                     
                                    // For SQC & CQC If File Exists, View the file
                                    // For SQC if File not uploaded, he can upload file else NA
                                          (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                        ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                        : (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                         ? "<a href='#' title='Click here to upload Pdf' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                         : "NA",
                                     //    (schRoadDetails.NO_OF_PHOTO_UPLOADED < ImageCount ) ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadQMFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"\",\"" + schRoadDetails.ADMIN_SCHEDULE_CODE.ToString().Trim() +"\",\"" +  schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "\"); return false;'>Upload</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",


                                           //  "<a href='#' title='Click here to correct details' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowCorrectionDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + "\"); return false;'>Correction</a>",
                                   

                                         //   schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),

                                              ( ((schRoadDetails.Scan_TR_UPLOAD_STATUS=="Y"))? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRScanPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),
                                   

                                   // "<a href='#' title='Click here to delete inspection details' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteInspection(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>Delete</a>",
                                    //added by abhinav pathak on 13-aug-2019
                                       // (dbContext.QUALITY_QM_INSPECTION_FILES.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ?
                                  //  (PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7 || PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 9) 
                                        
                                   // ?"<a href='#' title='Click here to view PDF' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFilePDF(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + ","+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"\"); return false;'>View</a>":
                                   // "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                   // "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"

                                    //(dbContext.QUALITY_QM_INSPECTION_FILES.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                    //    ? "<a href='#' title='Click here to view PDF' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFilePDF(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + ","+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"\"); return false;'>View</a>"
                                    //    : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                              
                              (  schRoadDetails.EFORM_STATUS=="0"?"NA":  (schRoadDetails.EFORM_STATUS=="1"?"Pending at PIU":(schRoadDetails.EFORM_STATUS=="2"?"Pending at QM":(schRoadDetails.EFORM_STATUS=="3"?"Submitted":(schRoadDetails.EFORM_STATUS=="4"?"not Scheduled":"NA"))))),

                                     //Physical path eform pdf view
                                    // ((schRoadDetails.EFORM_STATUS=="3") ?  "<a href='/Eform/GetCombineReport?idtemp="+URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID.ToString()})+"' title='Click here to view part-I,II pdf'    target=_blank><input type='button' value='View'/></a>":"-"),
                                    //Virtual path eform pdf view
                                  //   ((schRoadDetails.EFORM_STATUS=="3") ?  "<a href='#' title='title='Click here to view part-I,II pdf'  onClick='viewCombinePdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),
                                       //Physical path eform pdf(part1+part2) view (onfly)
                                     ((schRoadDetails.EFORM_STATUS=="3") ?   "<a href='#' title='Click here to view e-Form combined part-1,part-2 pdf'  onClick='viewCombinedPart_1_2_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),


                         //   ((schRoadDetails.EFORM_STATUS=="3")?  "<input type='button' id='btnViewPDF' value='Preview' onClick=viewCombinePdfData('" +URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+schRoadDetails.EFORM_ID.ToString() })+ "');   target=_blank />":"-"),
                                       //Ajinkya
                                       //Physical path test report
                                    // ((schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='/Eform/GetTestReport?idtemp="+URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID})+"' title='Click here to view  pdf'    target=_blank><input type='button' value='View'/></a>":"-"),
                                        //Virtual path test report
                                       ( ((schRoadDetails.TR_UPLOAD_STATUS=="Y"))? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),
                                          ((schRoadDetails.TR_UPLOAD_STATUS=="Y" && schRoadDetails.TR_FILE_NAME.Contains("$"))?  "<input type='button' value='Preview' onClick=previewTestReport('" +URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID.ToString().Trim()})+ "');   target=_blank />":"-"),
  ( (schRoadDetails.EFORM_STATUS=="3" && schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='#' title='Click here to view e-Form combined part-1,part-2 and Test Report pdf'  onClick='viewCombinedPart_1_2_TR_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),


                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QMViewInspectionDetailsDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();

            }

        }




        public Array QMViewInspDetailsAgainstRoadDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int roadCode)
        {
            dbContext = new PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            //    List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();   //comment on 30-06-2022 by vikky
            List<qm_inspection_list_Against_Road_Result> schItemListAgainstRoad = new List<qm_inspection_list_Against_Road_Result>();  //add on 30-06-2022 by vikky



            #region Commented
            //try
            //{
            //    schItemListAgainstRoad = dbContext.qm_inspection_list_Against_Road(roadCode).ToList<qm_inspection_list_Against_Road_Result>();  //change on 30-06-2022 by vikky 

            //    var query = (from QQOM in dbContext.QUALITY_QM_OBSERVATION_MASTER
            //                join AQM in dbContext.ADMIN_QUALITY_MONITORS
            //                on QQOM.USERID equals AQM.ADMIN_USER_ID
            //                where QQOM.IMS_PR_ROAD_CODE == roadCode
            //                select new
            //                {
            //                    QQOM.QM_INSPECTION_DATE,
            //                    MonitorName = (AQM.ADMIN_QM_LNAME == null ? "" : AQM.ADMIN_QM_LNAME) + " " + (AQM.ADMIN_QM_FNAME == null ? "" : AQM.ADMIN_QM_FNAME) + "" + (AQM.ADMIN_QM_MNAME == null ? "" : AQM.ADMIN_QM_MNAME),
            //                    QQOM.QM_INSPECTED_START_CHAINAGE,
            //                    QQOM.QM_INSPECTED_END_CHAINAGE,
            //                    OverallGrade = QQOM.QM_OVERALL_GRADE == 1 ?
            //                                  "Satisfactory" :
            //                                  QQOM.QM_OVERALL_GRADE == 2 ?
            //                                  "Required Improvement" :
            //                                  QQOM.QM_OVERALL_GRADE == 3 ?
            //                                  "Unsatisfactory" :
            //                                  "NA"

            //                }).ToList();


            //    totalRecords = query.Count();

            //    return query.Select(item => new
            //    {
            //        //id = roadCode,
            //        cell = new[] {
            //                  item.MonitorName.ToString(),
            //                  item.QM_INSPECTED_START_CHAINAGE.ToString(),
            //                  item.QM_INSPECTED_END_CHAINAGE.ToString(),
            //                  item.QM_INSPECTION_DATE.ToString("dd/MM/yyyy"),
            //                  item.OverallGrade
            //        }
            //    }).ToArray();

            //}
            //catch (Exception ex)
            //{
            //    ErrorLog.LogError(ex, "QMViewInspDetailsAgainstRoadDAL()");
            //    totalRecords = 0;
            //    return null;
            //}
            //finally
            //{
            //    dbContext.Dispose();

            //}
            #endregion

            try
            {
                schItemListAgainstRoad = dbContext.qm_inspection_list_Against_Road(roadCode).ToList<qm_inspection_list_Against_Road_Result>();  //change on 30-06-2022 by vikky 

                string qmType = string.Empty;

                totalRecords = schItemListAgainstRoad.Count();

                return schItemListAgainstRoad.Select(schRoadDetails => new
                {
                    id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                    //schRoadDetails.MONITOR_NAME,
                                     schRoadDetails.ADMIN_QM_TYPE=="S"?"SQM":"NQM",
                                    schRoadDetails.ATR_VERIFICATION_FINALIZED=="Y"?"Yes":"No",
                                    schRoadDetails.MONITOR_NAME.ToString().Split('-')[0],
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,
                                    schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                   // (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),
                                     schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                     schRoadDetails.PMGSY_SCHEME,
                                     schRoadDetails.IMS_ISCOMPLETED,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P")?schRoadDetails.IMS_PAV_LENGTH.ToString():schRoadDetails.IMS_BRIDGE_LENGTH.ToString(),
                                     schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                  //  schRoadDetails.QM_SCHEDULE_DATE.ToString(),
                                    schRoadDetails.QM_INSPECTION_DATE.ToString(),     
                               //      schRoadDetails.QM_OBS_UPLOAD_DATE.ToString(),
                                 //   schRoadDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                     schRoadDetails.OVERALL_GRADE,


                                    //schRoadDetails.UPLOAD_BY,
                                    //schRoadDetails.UPLOAD_BY=schRoadDetails.NO_OF_PHOTO_UPLOADED >=15 ? "Completed" : "Not Completed" ,
                                     
                                    // For SQC & CQC If File Exists, View the file
                                    // For SQC if File not uploaded, he can upload file else NA
                                          (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                        ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewInspectionReportATR(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"

                                         : "-",
                                     //    (schRoadDetails.NO_OF_PHOTO_UPLOADED < ImageCount ) ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadQMFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"\",\"" + schRoadDetails.ADMIN_SCHEDULE_CODE.ToString().Trim() +"\",\"" +  schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "\"); return false;'>Upload</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",


                                            "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowATRObsDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                  //  "<a href='#' title='Click here to correct details' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowCorrectionDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + "\"); return false;'>Correction</a>",
                                   

                                            schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),


                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QMViewInspDetailsAgainstRoadDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();

            }

        }




        /// <summary>
        /// SQM Filled Observation Report on CQC Login
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="monitorCode"></param>
        /// <param name="fromMonth"></param>
        /// <param name="fromYear"></param>
        /// <param name="toMonth"></param>
        /// <param name="toYear"></param>
        /// <returns></returns>


        public Array QMViewInspectionDetails2TierCQCDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                int toMonth, int toYear, string ROAD_STATUS, int schemeType, string roadOrBridge, string gradeType, string eFormStatusType)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();

            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            try
            {
                Int32 ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                string qmType = string.Empty;

                scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", ROAD_STATUS, stateCode, 0, "S", schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, eFormStatusType).ToList<qm_inspection_list_Result>();
                totalRecords = scheduleItemList.Count();

                return scheduleItemList.Select(schRoadDetails => new
                {
                    id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                    schRoadDetails.MONITOR_NAME,
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,
                                    schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                  //  (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),                                 
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                    schRoadDetails.PMGSY_SCHEME,
                                    schRoadDetails.IMS_ISCOMPLETED,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P")?schRoadDetails.IMS_PAV_LENGTH.ToString():schRoadDetails.IMS_BRIDGE_LENGTH.ToString(),
                                    schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                    //schRoadDetails.QM_SCHEDULE_DATE.ToString(),
                                    schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                  //  schRoadDetails.QM_OBS_UPLOAD_DATE.ToString(),                 
                                   // schRoadDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",                                   
                                    schRoadDetails.OVERALL_GRADE,
                                     schRoadDetails.ADMIN_IS_ENQUIRY.Equals("Y")?"Enquiry Inspection":"Normal Inspection",

                                      "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>ViewReportPDF</a>",

                                   // schRoadDetails.UPLOAD_BY,
                                 //  schRoadDetails.UPLOAD_BY=schRoadDetails.NO_OF_PHOTO_UPLOADED >=15 ? "Completed" : "Not Completed" ,
                                     (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                        ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>ViewReportPDF</a>"
                                        : (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                                            ? "<a href='#' title='Click here to upload Pdf' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>ViewReportPDF</a>"
                                            : "NA",
                                    //abhinav
                                    //(dbContext.QUALITY_QM_INSPECTION_FILES.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ?
                                    //(PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7 || PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 9|| PMGSYSession.Current.RoleCode == 5)

                                    //?"<a href='#' title='Click here to view PDF' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFilePDF(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + ","+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"\"); return false;'>View</a>":
                                    //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                    //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                      

                                    //  schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                      ( ((schRoadDetails.Scan_TR_UPLOAD_STATUS=="Y"))? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRScanPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),


                                     (  schRoadDetails.EFORM_STATUS=="0"?"NA":  (schRoadDetails.EFORM_STATUS=="1"?"Pending at PIU":(schRoadDetails.EFORM_STATUS=="2"?"Pending at QM":(schRoadDetails.EFORM_STATUS=="3"?"Submitted":(schRoadDetails.EFORM_STATUS=="4"?"not Scheduled":"NA"))))),

                                      //Physical path pdf view
                                    //  ((schRoadDetails.EFORM_STATUS=="3") ?  "<a href='/Eform/GetCombineReport?idtemp="+URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID.ToString()})+"' title='Click here to view part-I,II pdf'    target=_blank><input type='button' value='View'/></a>":"-"),
                                      //Virtual path pdf view
                                     // ((schRoadDetails.EFORM_STATUS=="3") ?  "<a href='#' title='title='Click here to view part-I,II pdf'  onClick='viewCombinePdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),
                                          //Physical path eform pdf(part1+part2) view (onfly)
                                     ((schRoadDetails.EFORM_STATUS=="3") ?   "<a href='#' title='Click here to view e-Form combined part-1,part-2 pdf'  onClick='viewCombinedPart_1_2_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),


                                   // ((schRoadDetails.EFORM_STATUS=="3")?  "<input type='button' id='btnViewPDF' value='Preview' onClick=viewCombinePdfData('" +URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+schRoadDetails.EFORM_ID.ToString() })+ "');   target=_blank />":"-"),
                                    //Ajinkya
                                       //Physical path test report
                                    // ((schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='/Eform/GetTestReport?idtemp="+URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID})+"' title='Click here to view  pdf'    target=_blank><input type='button' value='View'/></a>":"-")    ,                              
                                        //Virtual path test report
                                        ((schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),

                         ((schRoadDetails.TR_UPLOAD_STATUS=="Y" && schRoadDetails.TR_FILE_NAME.Contains("$"))?  "<input type='button' value='Preview' onClick=previewTestReport('" +URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID.ToString().Trim()})+ "');   target=_blank />":"-"),

                                        ( (schRoadDetails.EFORM_STATUS=="3" && schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='#' title='Click here to view e-Form combined part-1,part-2 and Test Report pdf'  onClick='viewCombinedPart_1_2_TR_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),

                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                ErrorLog.LogError(ex, "QMViewInspectionDetails2TierCQCDAL()");
                return null;
            }
            finally
            {
                dbContext.Dispose();

            }

        }



        /// <summary>
        /// Observation Listing for ATR
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="monitorCode"></param>
        /// <param name="fromMonth"></param>
        /// <param name="fromYear"></param>
        /// <param name="toMonth"></param>
        /// <param name="toYear"></param>
        /// <param name="atrStatus"></param>
        /// <param name="rdStatus"></param>
        /// <returns></returns>
        public Array QMViewATRDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                int toMonth, int toYear, string atrStatus, string rdStatus)
        {
            dbContext = new Models.PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_inspection_list_atr_Result> scheduleItemList = new List<qm_inspection_list_atr_Result>();

            try
            {
                //string qmType = string.Empty;
                if (PMGSYSession.Current.RoleCode == 5) //CQC
                {
                    scheduleItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, 0/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //SQC
                {
                    scheduleItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, 0, 0, 0/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                }
                else if (PMGSYSession.Current.RoleCode == 48) //SQCOA
                {
                    scheduleItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, 0, PMGSYSession.Current.AdminNdCode, 0/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                }

                totalRecords = scheduleItemList.Count();
                return scheduleItemList.Select(schRoadDetails => new
                {
                    id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                    schRoadDetails.MONITOR_NAME,
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,
                                    schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                    (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                    schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                    schRoadDetails.IMS_ISCOMPLETED,
                                    schRoadDetails.ADMIN_IS_ENQUIRY.Equals("Y")? "Yes": "No",
                                    schRoadDetails.OVERALL_GRADE,
                                    "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowATRObsDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                   
                                    // ATR Details
                                    schRoadDetails.ATR_REGRADE_STATUS.Trim().Equals("N") ? "No" : "Yes",// Submitted
                                    (schRoadDetails.QM_ATR_STATUS.Trim().Equals("N")) // Upload/View
                                        ? "<a href='#' title='Click here to upload ATR' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadATR(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  + "\"); return false;'>Upload</a>"
                                        : (schRoadDetails.QM_ATR_ID != null)
                                            ? "<a href='#' title='Click here to view uploaded ATR' class='ui-icon ui-icon-zoomin ui-align-center' onClick='DownloadATR(\"" + URLEncrypt.EncryptParameters(new string[] { schRoadDetails.QM_ATR_ID + ".pdf" + "$" + schRoadDetails.QM_ATR_ID})  + "\"); return false;'>Download</a>"
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center' />",
                                    schRoadDetails.ATR_ENTRY_DATE.ToString(),       // Upload Date
                                    
                                    schRoadDetails.ATR_REGRADE_STATUS.Trim().Equals("A")     // Acceptance
                                        ? "Accepted"
                                        : schRoadDetails.ATR_REGRADE_STATUS.Trim().Equals("R") // if any of the ATR against Obs Id is Accepted then dont provide link to upload.
                                            ? schRoadDetails.QM_ATR_STATUS.Equals("A")
                                                ? "Rejected"
                                                : "Rejected" + //If Rejected atr is last against Observation, then append + sign to upload again
                                                    (schRoadDetails.QM_ATR_ID == (dbContext.QUALITY_ATR_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Select(c => c.QM_ATR_ID).Max())
                                                    ? "<a href='#' title='Click here to upload ATR' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadATR(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + "\"); return false;'>Upload</a>"
                                                    : "")
                                            : "",
                                    schRoadDetails.ATR_REGRADE_REMARKS, //  Accept, Reject Remarks
                                    schRoadDetails.ATR_REGRADE_DATE.ToString(), // Accept, Reject Date
                                    (schRoadDetails.ATR_REGRADE_STATUS.Trim() == "U") // Regrade, for recent entry only
                                        ? "<a href='#' title='Click here to regrade ATR' class='ui-icon ui-icon-plusthick ui-align-center' onClick='RegradeATR(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + "\"); return false;'>Regrade</a>"
                                            : ( schRoadDetails.ATR_REGRADE_STATUS.Trim().Equals("A"))
                                            ? "<a href='#' title='Click here to see observation details against ATR' class='ui-icon ui-icon-pencil ui-align-center' onClick='ShowATRGradingDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + "\"); return false;'>Regrade</a>"
                                                :"<a href='#' class='ui-icon ui-icon-locked ui-align-center' />",
                                    //For Delete Get ATR File ID
                                    (schRoadDetails.QM_ATR_ID != null && schRoadDetails.QM_ATR_STATUS.Trim() != "A" && schRoadDetails.QM_ATR_STATUS.Trim() != "N" && (schRoadDetails.QM_ATR_ID == dbContext.QUALITY_ATR_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Select(c => c.QM_ATR_ID).Max()))
                                        ? "<a href='#' title='Click here to delete ATR details' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteATR(\"" +
                                          schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + "\",\"" +  dbContext.QUALITY_ATR_FILE.Where(a => a.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && a.ATR_IS_DELETED == "N").Select(a => a.QM_ATR_ID).FirstOrDefault()
                                          +"\"); return false;'>Delete</a>"
                                        :"<a href='#' class='ui-icon ui-icon-locked ui-align-center' />"
                        }
                }).ToArray();
            }
            catch (DbEntityValidationException dbEx)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
                totalRecords = 0;
                return null;
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// ATR List for Bulk Regrade
        /// Only Submitted ATRs displayed here
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <returns></returns>
        public Array QMViewBulkATRListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int stateCode, int duration)
        {
            dbContext = new Models.PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<USP_QM_ATR_BULK_REGRADE_LIST_Result> atrItemList = new List<USP_QM_ATR_BULK_REGRADE_LIST_Result>();

            try
            {
                atrItemList = dbContext.USP_QM_ATR_BULK_REGRADE_LIST(stateCode, duration).ToList<USP_QM_ATR_BULK_REGRADE_LIST_Result>();
                totalRecords = atrItemList.Count();
                return atrItemList.Select(atrRoadDetails => new
                {
                    id = atrRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                    atrRoadDetails.MONITOR_NAME,
                                    atrRoadDetails.MAST_DISTRICT_NAME,
                                    atrRoadDetails.IMS_PACKAGE_ID,
                                    atrRoadDetails.IMS_ROAD_NAME,
                                    atrRoadDetails.INSP_DATE.ToString(),
                                    atrRoadDetails.ROAD_STATUS,
                                    atrRoadDetails.MAST_GRADE_NAME
                        }
                }).ToArray();
            }
            catch (DbEntityValidationException dbEx)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// List Previous Months Schedules
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="monitorId"></param>
        /// <param name="prevMonth"></param>
        /// <param name="prevYear"></param>
        /// <param name="isSqc3Tier"></param>
        /// <returns></returns>
        public Array GetPrevScheduleListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int monitorId, int prevMonth, int prevYear, bool is3Tier)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                List<qm_get_prev_months_schedule_Result> scheduleItemList = new List<qm_get_prev_months_schedule_Result>();
                string qmType = string.Empty;
                //if (PMGSYSession.Current.RoleCode == 5) //CQC
                if (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5) //CQC
                {
                    qmType = "I";
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //SQC
                {
                    if (is3Tier)
                    {
                        qmType = "I";
                    }
                    else
                    {
                        qmType = "S";
                    }
                }
                else if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54) //PIU or PIURCPLWE
                {
                    if (is3Tier)
                    {
                        qmType = "I";
                    }
                    else
                    {
                        qmType = "S";
                    }
                }

                scheduleItemList = dbContext.qm_get_prev_months_schedule(monitorId, qmType, prevMonth, prevYear,
                                                                         PMGSYSession.Current.StateCode,
                                                                         PMGSYSession.Current.DistrictCode,
                                                                         PMGSYSession.Current.UserId
                                                                        ).ToList<qm_get_prev_months_schedule_Result>();

                totalRecords = scheduleItemList.Count();

                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //    }
                //    else
                //    {
                //        scheduleItemList = scheduleItemList.OrderByDescending(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //    }
                //}
                //else
                //{
                //    scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //}

                //scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).ToList();
                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim(),
                    cell = new[] {
                                        schDetails.MONITOR_NAME,
                                        schDetails.STATE_NAME,
                                        schDetails.DISTRICT_NAME,
                                        schDetails.DISTRICT_NAME2,
                                        schDetails.DISTRICT_NAME3,
                                        schDetails.INSP_STATUS_FLAG,
                                        "<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewPrevSchDetails(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>"
                        }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Gradings filled by NQM/SQM for Correction in CQC/SQC account
        /// </summary>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public QMFillObservationModel QMGradingCorrectionDAL(int obsId)
        {
            dbContext = new Models.PMGSYEntities();

            try
            {
                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(obsId);
                QMFillObservationModel fillObservationModel = new QMFillObservationModel();
                //Get Road Status
                var roadDetails = (from isp in dbContext.IMS_SANCTIONED_PROJECTS
                                   where isp.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                   select isp).First();

                var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                       where qqs.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE
                                       select qqs).FirstOrDefault();

                string qmType = string.Empty;
                //if (PMGSYSession.Current.RoleCode == 5) //NQM
                if (PMGSYSession.Current.RoleCode == 9) //CQC
                {
                    qmType = "N";                       //For Grading qmType taken as N for NQM
                }
                else if (PMGSYSession.Current.RoleCode == 8) //SQM
                {
                    qmType = "S";
                }

                fillObservationModel.MONITOR_NAME = Convert.ToString(dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == scheduleDetails.ADMIN_QM_CODE)
                    .Select(m => (m.ADMIN_QM_LNAME == null ? "" : m.ADMIN_QM_LNAME) + " " + m.ADMIN_QM_FNAME + " " + (m.ADMIN_QM_MNAME == null ? "" : m.ADMIN_QM_MNAME)).FirstOrDefault());


                List<qm_observation_grading_detail_correction_Result> itemList = new List<qm_observation_grading_detail_correction_Result>();
                itemList = dbContext.qm_observation_grading_detail_correction(obsId, qmType).ToList<qm_observation_grading_detail_correction_Result>();
                fillObservationModel.GRADE_DETAILS_LIST_CORRECTION = itemList;

                fillObservationModel.MAX_MAIN_ITEM_COUNT = (from list in itemList select list.MAST_ITEM_CODE).Max();

                fillObservationModel.SCHEDULE_MONTH_YEAR = new CommonFunctions().getMonthText(Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH)) + " " + scheduleDetails.ADMIN_IM_YEAR.ToString();
                fillObservationModel.ADMIN_SCHEDULE_CODE = Convert.ToInt32(qmObservationMaster.ADMIN_SCHEDULE_CODE);
                fillObservationModel.IMS_PR_ROAD_CODE = qmObservationMaster.IMS_PR_ROAD_CODE;
                fillObservationModel.FROM_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_START_CHAINAGE;
                fillObservationModel.FROM_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_END_CHAINAGE;
                fillObservationModel.QM_INSPECTION_DATE = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                fillObservationModel.TO_ROAD_LENGTH = roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_ISCOMPLETED = qmObservationMaster.QM_ROAD_STATUS;
                fillObservationModel.IMS_PROPOSAL_TYPE = roadDetails.IMS_PROPOSAL_TYPE;



                if (qmObservationMaster.QM_ROAD_STATUS.Equals("C") || qmObservationMaster.QM_ROAD_STATUS.Equals("M"))
                {
                    var execMonthlyProgress = (from erms in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                               where erms.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                               && erms.EXEC_ISCOMPLETED == "C"
                                               select erms).FirstOrDefault();

                    if (execMonthlyProgress != null)
                    {
                        fillObservationModel.COMPLETION_DATE = DateTime.Parse(execMonthlyProgress.EXEC_COMPLETION_DATE.ToString()).ToString("dd-MMM-yyyy");
                    }
                    else
                    {
                        fillObservationModel.COMPLETION_DATE = "--";
                    }
                }
                else
                {
                    fillObservationModel.COMPLETION_DATE = "--";
                }

                fillObservationModel.STATE_NAME = roadDetails.MASTER_STATE.MAST_STATE_NAME;
                fillObservationModel.DISTRICT_NAME = roadDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME;
                fillObservationModel.IMS_PACKAGE_ID = roadDetails.IMS_PACKAGE_ID;
                fillObservationModel.IMS_YEAR = roadDetails.IMS_YEAR + "-" + (roadDetails.IMS_YEAR + 1);
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_ROAD_NAME = roadDetails.IMS_ROAD_NAME;
                //For LSB - If status is Inprogress, Then skip 1st Item from List. Else All Items
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    fillObservationModel.IMS_BRIDGE_NAME = roadDetails.IMS_BRIDGE_NAME;
                    fillObservationModel.IMS_BRIDGE_LENGTH = roadDetails.IMS_BRIDGE_LENGTH;
                }
                return fillObservationModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Save Corrected grades by CQC/SQC
        /// </summary>
        /// <param name="formCollection"></param>
        /// <returns></returns>
        public string QMGradingCorrectionDAL(FormCollection formCollection)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                //--- Save Grading Details To OBSERVATION_DETAIL-----------------------

                string qmType = string.Empty;
                //if (PMGSYSession.Current.RoleCode == 5) //CQC
                if (PMGSYSession.Current.RoleCode == 9) //CQC
                {
                    qmType = "I";
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //SQC
                {
                    qmType = "S";
                }

                Int32 ObsId = Convert.ToInt32(formCollection["QM_OBSERVATION_ID"]);
                List<qm_monitor_master_grade_items_Result> itemList = new List<qm_monitor_master_grade_items_Result>();
                //For Road proposals
                if (formCollection["IMS_PROPOSAL_TYPE"].ToUpper().Equals("P"))
                {
                    itemList = dbContext.qm_monitor_master_grade_items(formCollection["IMS_ISCOMPLETED"], qmType).ToList<qm_monitor_master_grade_items_Result>();
                }
                else if (formCollection["IMS_PROPOSAL_TYPE"].ToUpper().Equals("L"))
                {
                    //  itemList = dbContext.qm_monitor_master_grade_items(formCollection["IMS_PROPOSAL_TYPE"], qmType).ToList<qm_monitor_master_grade_items_Result>(); // Commented

                    var itemList1 = dbContext.qm_monitor_master_grade_items("Z", qmType).ToList<qm_monitor_master_grade_items_Result>(); // Added

                    var ItemNo = dbContext.QUALITY_QM_OBSERVATION_DETAIL.Where(m => m.QM_OBSERVATION_ID == ObsId).Select(m => m.MAST_ITEM_NO).ToList(); // Added

                    itemList = itemList1.Where(m => ItemNo.Contains(m.MAST_ITEM_NO)).ToList(); // Added 

                }

                string ItemID = string.Empty;
                string ItemValue = string.Empty;
                string overAllGrade = string.Empty;

                QUALITY_QM_OBSERVATION_MASTER quality_qm_observation_master = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(ObsId);

                if (formCollection["IMS_PROPOSAL_TYPE"].ToUpper().Equals("P"))
                {
                    //if (PMGSYSession.Current.RoleCode == 5 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P")))       //For CQCAdmin for Completed & in Progress Road
                    if (PMGSYSession.Current.RoleCode == 9 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P")))       //For CQC for Completed & in Progress Road
                    {
                        foreach (var item in itemList)
                        {
                            if (item.MAST_ITEM_STATUS.Equals("O"))
                            {
                                ItemID = "hiddenitem" + item.NO_OF_ITEM;
                                overAllGrade = formCollection[ItemID];

                                if (Convert.ToInt32(overAllGrade) == 4)
                                {
                                    return ("Please select atleast one of the grading items.");
                                }

                                //Set Overall Grade to Observation Master
                                quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                            }
                            else if (item.MAST_SUB_ITEM_CODE == 0)
                            {
                                ItemID = "hiddenitem" + item.MAST_ITEM_CODE;
                                //ItemID = "item" + item.MAST_ITEM_CODE;
                            }
                            else
                            {
                                ItemID = "subitem" + item.MAST_ITEM_CODE + item.MAST_SUB_ITEM_CODE;
                            }

                            ItemValue = formCollection[ItemID];

                            //Update MAST_GRADE_CODE & Save old grades in MAST_GRADE_CODE_UPGRADE
                            QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = dbContext.QUALITY_QM_OBSERVATION_DETAIL.Find(ObsId, item.MAST_ITEM_NO);
                            if (qm_observation_detail != null)
                            {
                                qm_observation_detail.MAST_GRADE_CODE_UPGRADE = qm_observation_detail.MAST_GRADE_CODE;
                                qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);

                                qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                                qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                                dbContext.Entry(qm_observation_detail).State = System.Data.Entity.EntityState.Modified;
                            }
                            //Added By Abhishek kamble 30-nov-2013
                            quality_qm_observation_master.USERID = PMGSYSession.Current.UserId;
                            quality_qm_observation_master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(quality_qm_observation_master).State = System.Data.Entity.EntityState.Modified;
                        }

                    }
                    else if ((PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P")))        //For SQC for Completed & in Progress Road
                    {
                        foreach (var item in itemList)
                        {
                            if (item.MAST_ITEM_STATUS.Equals("O"))
                            {
                                ItemID = "overAllGrade";
                                overAllGrade = formCollection[ItemID];

                                if (Convert.ToInt32(overAllGrade) == 4)
                                {
                                    return ("Please select atleast one of the grading items.");
                                }

                                //Set Overall Grade to Observation Master
                                quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                            }
                            else
                            {
                                ItemID = "optItem" + item.MAST_SUB_ITEM_CODE;
                            }

                            if (item.MAST_SUB_ITEM_CODE != 0) //It is SQM ITEMS, so exclude it
                            {
                                ItemValue = formCollection[ItemID];

                                //Update MAST_GRADE_CODE & Save old grades in MAST_GRADE_CODE_UPGRADE
                                QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = dbContext.QUALITY_QM_OBSERVATION_DETAIL.Find(ObsId, item.MAST_ITEM_NO);
                                if (qm_observation_detail != null)
                                {
                                    qm_observation_detail.MAST_GRADE_CODE_UPGRADE = qm_observation_detail.MAST_GRADE_CODE;
                                    qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);

                                    qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                                    qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                                    dbContext.Entry(qm_observation_detail).State = System.Data.Entity.EntityState.Modified;
                                }
                                //Added By Abhishek kamble 30-nov-2013
                                quality_qm_observation_master.USERID = PMGSYSession.Current.UserId;
                                quality_qm_observation_master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                dbContext.Entry(quality_qm_observation_master).State = System.Data.Entity.EntityState.Modified;
                            }
                        }
                    }
                    else if (formCollection["IMS_ISCOMPLETED"].Equals("M"))        //For CQC / SQC for Maintenance Road
                    {                                                             // In future, if Items differ for NQM/SQM, compare Session RoleCode & do Appropriate Changes to save Grading
                        foreach (var item in itemList)
                        {
                            if (item.MAST_SUB_ITEM_CODE == 7)
                            {
                                ItemID = "overAllGradeMaintenance";
                                overAllGrade = formCollection[ItemID];

                                if (Convert.ToInt32(overAllGrade) == 4)
                                {
                                    return ("Please select atleast one of the grading items.");
                                }

                                //Set Overall Grade to Observation Master
                                quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                            }
                            else
                            {
                                ItemID = "optItemMaintenance" + item.MAST_SUB_ITEM_CODE;
                            }
                            ItemValue = formCollection[ItemID];

                            //Update MAST_GRADE_CODE & Save old grades in MAST_GRADE_CODE_UPGRADE
                            QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = dbContext.QUALITY_QM_OBSERVATION_DETAIL.Find(ObsId, item.MAST_ITEM_NO);
                            if (qm_observation_detail != null)
                            {
                                qm_observation_detail.MAST_GRADE_CODE_UPGRADE = qm_observation_detail.MAST_GRADE_CODE;
                                qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);

                                qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                                qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                                dbContext.Entry(qm_observation_detail).State = System.Data.Entity.EntityState.Modified;
                            }
                            //Added By Abhishek kamble 30-nov-2013
                            quality_qm_observation_master.USERID = PMGSYSession.Current.UserId;
                            quality_qm_observation_master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(quality_qm_observation_master).State = System.Data.Entity.EntityState.Modified;
                        }
                    }
                }
                // Bridge Inspections
                else if (formCollection["IMS_PROPOSAL_TYPE"].ToUpper().Equals("L"))
                {
                    if (formCollection["IMS_ISCOMPLETED"].Equals("C"))              //For Bridge - (Completed), One Item is less.
                    {
                        //   itemList.RemoveAt(0); // -- Commented 11 March 
                    }

                    foreach (var item in itemList)
                    {
                        if (item.MAST_ITEM_CODE == 8)
                        {
                            ItemID = "hiddenitem8";
                            overAllGrade = formCollection[ItemID];

                            if (Convert.ToInt32(overAllGrade) == 4)
                            {
                                return ("Please select atleast one of the grading items.");
                            }

                            //Set Overall Grade to Observation Master
                            quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                        }
                        else if (item.MAST_SUB_ITEM_CODE == 0)
                        {
                            if (item.MAST_ITEM_CODE == 5 || item.MAST_ITEM_CODE == 7)
                                ItemID = "hiddenitem" + item.MAST_ITEM_CODE;
                            else
                                ItemID = "optItem" + item.MAST_ITEM_CODE;
                        }
                        else
                        {
                            ItemID = "subitem" + item.MAST_ITEM_CODE + item.MAST_SUB_ITEM_CODE;
                        }



                        ItemValue = formCollection[ItemID];

                        //  if (quality_qm_observation_master.QM_OVERALL_GRADE == 0)
                        //  {

                        //   
                        Int32 GradeF = 1;
                        string Grade = formCollection["LSBOverallCorrectedGrade"];
                        //if (string.IsNullOrEmpty(Grade) )
                        //  {


                        //  }
                        //  else
                        //  {
                        //      if (Grade.Equals("0"))
                        //      {
                        //      }
                        //      else
                        //      {

                        //      }

                        //  }


                        quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(GradeF);
                        //  }



                        //Update MAST_GRADE_CODE & Save old grades in MAST_GRADE_CODE_UPGRADE
                        QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = dbContext.QUALITY_QM_OBSERVATION_DETAIL.Find(ObsId, item.MAST_ITEM_NO);
                        if (qm_observation_detail != null)
                        {
                            qm_observation_detail.MAST_GRADE_CODE_UPGRADE = qm_observation_detail.MAST_GRADE_CODE;

                            if (item.MAST_ITEM_NO == 110)
                            {
                                qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt16(GradeF);
                            }
                            else
                            {
                                if (string.IsNullOrEmpty(ItemValue) || ItemValue.Equals("0"))
                                {
                                    qm_observation_detail.MAST_GRADE_CODE = GradeF; //Convert.ToInt32(ItemValue);
                                }
                                else
                                {

                                    qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);
                                }
                            }

                            qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                            qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                            dbContext.Entry(qm_observation_detail).State = System.Data.Entity.EntityState.Modified;
                        }


                    }

                    //Added By Abhishek kamble 30-nov-2013
                    quality_qm_observation_master.USERID = PMGSYSession.Current.UserId;
                    quality_qm_observation_master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(quality_qm_observation_master).State = System.Data.Entity.EntityState.Modified;

                }

                dbContext.SaveChanges();
                return string.Empty;
                //-----------------------------------------------------------------------
            }
            catch (DbEntityValidationException dbEx)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");

            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Delete Observations From Master/ Detail & related Image Files
        /// </summary>
        /// <param name="districtCode"></param>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public string QMDeleteObservationDAL(int obsId)
        {
            dbContext = new PMGSYEntities();
            String PhysicalPath = string.Empty;
            String ThumbnailPath = string.Empty;
            try
            {
                var qmTypeForUser = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                     join qqs in dbContext.QUALITY_QM_SCHEDULE on aqm.ADMIN_QM_CODE equals qqs.ADMIN_QM_CODE
                                     join qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqs.ADMIN_SCHEDULE_CODE equals qqom.ADMIN_SCHEDULE_CODE
                                     where qqom.QM_OBSERVATION_ID == obsId
                                     select aqm).First();

                var fileDetails = (from qqif in dbContext.QUALITY_QM_INSPECTION_FILE
                                   where qqif.QM_OBSERVATION_ID == obsId
                                   select qqif).ToList();

                //delete Obsertvations, INSPECTION File Entries from OBSERVATION Table
                dbContext.qm_delete_observations(obsId, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);
                dbContext.SaveChanges();

                ///Path to upload files for NQM/SQM/CQC/SQC
                if (qmTypeForUser.ADMIN_QM_TYPE.Equals("I"))   //CQC & NQM
                {
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_NQM"];
                }
                else if (qmTypeForUser.ADMIN_QM_TYPE.Equals("S"))   //SQM & SQC
                {
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_SQM"];
                }

                foreach (var item in fileDetails)
                {
                    int QM_FILE_ID = item.QM_FILE_ID;
                    string QM_FILE_NAME = item.QM_FILE_NAME;


                    ThumbnailPath = Path.Combine(Path.Combine(PhysicalPath, "thumbnails"), QM_FILE_NAME);

                    PhysicalPath = Path.Combine(PhysicalPath, QM_FILE_NAME);

                    if (!System.IO.File.Exists(PhysicalPath) && !System.IO.File.Exists(ThumbnailPath))
                    {
                        continue;
                    }
                    else
                    {
                        try
                        {
                            System.IO.File.Delete(PhysicalPath);
                            System.IO.File.Delete(ThumbnailPath);
                        }
                        catch (Exception ex)
                        {
                            Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                            return ("An Error Occurred While Deletion of Image Files.");
                        }
                    }
                }

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        public QMFillObservationModel QMObservationDetailsDAL(int obsId)
        {
            dbContext = new Models.PMGSYEntities();

            try
            {
                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(obsId);
                QMFillObservationModel fillObservationModel = new QMFillObservationModel();
                //Get Road Status
                var roadDetails = (from isp in dbContext.IMS_SANCTIONED_PROJECTS
                                   where isp.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                   select isp).First();

                string qmType = string.Empty;
                //if (PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 6) // CQC & NQM
                if (PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7) // CQCAdmin & NQM
                {
                    qmType = "N";                       //For Grading qmType taken as N for NQM
                }
                //else if (PMGSYSession.Current.RoleCode == 7 || PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) // SQM & SQC 
                //{
                //    qmType = "S";
                //}
                else if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54) // PIU
                {
                    qmType = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                              join
                                   qqs in dbContext.QUALITY_QM_SCHEDULE on aqm.ADMIN_QM_CODE equals qqs.ADMIN_QM_CODE
                              join
                                   qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqs.ADMIN_SCHEDULE_CODE equals qqom.ADMIN_SCHEDULE_CODE
                              where qqom.QM_OBSERVATION_ID == qmObservationMaster.QM_OBSERVATION_ID
                              select aqm.ADMIN_QM_TYPE
                                       ).First();

                    qmType = qmType.Equals("I") ? "N" : "S";
                    qmType = "N";
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 48 || PMGSYSession.Current.RoleCode == 69) // sqc
                {
                    qmType = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                              join
                                   qqs in dbContext.QUALITY_QM_SCHEDULE on aqm.ADMIN_QM_CODE equals qqs.ADMIN_QM_CODE
                              join
                                   qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqs.ADMIN_SCHEDULE_CODE equals qqom.ADMIN_SCHEDULE_CODE
                              where qqom.QM_OBSERVATION_ID == qmObservationMaster.QM_OBSERVATION_ID
                              select aqm.ADMIN_QM_TYPE
                                       ).First();

                    qmType = qmType.Equals("I") ? "N" : "S";
                    qmType = "N";
                }

                //Default Road Status, as in IMS_SANCTIONED_PROJECTS
                //string roadStatus = roadDetails.IMS_ISCOMPLETED;
                string roadStatus = qmObservationMaster.QM_ROAD_STATUS;

                var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                       where qqs.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE
                                       select qqs).FirstOrDefault();

                fillObservationModel.MONITOR_NAME = Convert.ToString(dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == scheduleDetails.ADMIN_QM_CODE)
                    .Select(m => (m.ADMIN_QM_LNAME == null ? "" : m.ADMIN_QM_LNAME) + " " + m.ADMIN_QM_FNAME + " " + (m.ADMIN_QM_MNAME == null ? "" : m.ADMIN_QM_MNAME)).FirstOrDefault());

                List<qm_observation_grading_detail_Result> itemList = new List<qm_observation_grading_detail_Result>();
                itemList = dbContext.qm_observation_grading_detail(obsId, qmType).ToList<qm_observation_grading_detail_Result>();
                fillObservationModel.GRADE_DETAILS_LIST = itemList;
                fillObservationModel.MAX_MAIN_ITEM_COUNT = (from list in itemList select list.MAST_ITEM_CODE).Max();

                fillObservationModel.SCHEDULE_MONTH_YEAR = new CommonFunctions().getMonthText(Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH)) + " " + scheduleDetails.ADMIN_IM_YEAR.ToString();
                fillObservationModel.ADMIN_SCHEDULE_CODE = Convert.ToInt32(qmObservationMaster.ADMIN_SCHEDULE_CODE);
                fillObservationModel.IMS_PR_ROAD_CODE = qmObservationMaster.IMS_PR_ROAD_CODE;
                fillObservationModel.FROM_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_START_CHAINAGE;
                fillObservationModel.TO_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_END_CHAINAGE;
                //fillObservationModel.QM_INSPECTION_DATE = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //fillObservationModel.QM_INSPECTION_DATE = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any() ? dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy") : qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //string uploadDate = "";
                //if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                //{
                //    if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                //    {
                //        uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //    }
                //    else
                //    {
                //        uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                //    }
                //}
                //fillObservationModel.QM_INSPECTION_DATE = uploadDate;

                //To Show actual inspection date entered by Monitor in case of uploading through web
                string uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");

                // string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "W" : dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                if (device_flag.Equals("W") || device_flag.Equals("N"))
                {
                    uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                }
                else
                {
                    if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                    {
                        if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                        {
                            uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                        }
                        else
                        {
                            uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                        }
                    }
                }
                fillObservationModel.QM_INSPECTION_DATE = uploadDate;
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;

                //-----***************************************************
                fillObservationModel.IMS_ISCOMPLETED = roadStatus;
                if (roadStatus.Equals("C") || roadStatus.Equals("M"))
                {
                    var execMonthlyProgress = (from erms in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                               where erms.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                               && erms.EXEC_ISCOMPLETED == "C"
                                               select erms).FirstOrDefault();

                    if (execMonthlyProgress != null)
                    {
                        fillObservationModel.COMPLETION_DATE = DateTime.Parse(execMonthlyProgress.EXEC_COMPLETION_DATE.ToString()).ToString("dd-MMM-yyyy");
                    }
                    else
                    {
                        fillObservationModel.COMPLETION_DATE = "--";
                    }
                }
                else
                {
                    fillObservationModel.COMPLETION_DATE = "--";
                }
                //-----***************************************************

                // Bridge Inspections
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    fillObservationModel.IMS_BRIDGE_NAME = roadDetails.IMS_BRIDGE_NAME;
                    fillObservationModel.IMS_BRIDGE_LENGTH = roadDetails.IMS_BRIDGE_LENGTH;
                }
                fillObservationModel.IMS_PROPOSAL_TYPE = roadDetails.IMS_PROPOSAL_TYPE;

                fillObservationModel.STATE_NAME = roadDetails.MASTER_STATE.MAST_STATE_NAME;
                fillObservationModel.DISTRICT_NAME = roadDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME;
                fillObservationModel.IMS_PACKAGE_ID = roadDetails.IMS_PACKAGE_ID;
                fillObservationModel.IMS_YEAR = roadDetails.IMS_YEAR + "-" + (roadDetails.IMS_YEAR + 1);
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_ROAD_NAME = roadDetails.IMS_ROAD_NAME;

                // If latlong for any of the corresponding Images are available then only show Google Map, so setting flag here
                if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(c => c.QM_OBSERVATION_ID == qmObservationMaster.QM_OBSERVATION_ID && (c.QM_LATITUDE != null || c.QM_LONGITUDE != null)).Select(c => c.QM_FILE_ID).Any())
                    fillObservationModel.IsLatLongAvailable = true;
                else
                    fillObservationModel.IsLatLongAvailable = false;

                return fillObservationModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Observation Details for corrected Entries of ATR
        /// Only Change other than simple observation list is --- List (GRADE_DETAILS_LIST_ATR) of Type qm_observation_grading_detail_for_atr_Result
        /// </summary>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public QMFillObservationModel QMObservationDetailsATRDAL(int obsId)
        {
            dbContext = new Models.PMGSYEntities();

            try
            {
                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(obsId);
                QMFillObservationModel fillObservationModel = new QMFillObservationModel();
                //Get Road Status
                var roadDetails = (from isp in dbContext.IMS_SANCTIONED_PROJECTS
                                   where isp.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                   select isp).First();

                string qmType = string.Empty;
                if (PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 6) // CQC & NQM
                {
                    qmType = "N";                       //For Grading qmType taken as N for NQM
                }
                else if (PMGSYSession.Current.RoleCode == 7 || PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 48 || PMGSYSession.Current.RoleCode == 69) // SQM & SQC 
                {
                    qmType = "S";
                }

                //Default Road Status, as in IMS_SANCTIONED_PROJECTS
                //string roadStatus = roadDetails.IMS_ISCOMPLETED;
                string roadStatus = qmObservationMaster.QM_ROAD_STATUS;

                var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                       where qqs.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE
                                       select qqs).FirstOrDefault();

                fillObservationModel.MONITOR_NAME = Convert.ToString(dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == scheduleDetails.ADMIN_QM_CODE)
                    .Select(m => (m.ADMIN_QM_LNAME == null ? "" : m.ADMIN_QM_LNAME) + " " + m.ADMIN_QM_FNAME + " " + (m.ADMIN_QM_MNAME == null ? "" : m.ADMIN_QM_MNAME)).FirstOrDefault());

                List<qm_observation_grading_detail_for_atr_Result> itemList = new List<qm_observation_grading_detail_for_atr_Result>();
                itemList = dbContext.qm_observation_grading_detail_for_atr(obsId, qmType).ToList<qm_observation_grading_detail_for_atr_Result>();
                fillObservationModel.GRADE_DETAILS_LIST_ATR = itemList;
                fillObservationModel.MAX_MAIN_ITEM_COUNT = (from list in itemList select list.MAST_ITEM_CODE).Max();


                fillObservationModel.SCHEDULE_MONTH_YEAR = new CommonFunctions().getMonthText(Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH)) + " " + scheduleDetails.ADMIN_IM_YEAR.ToString();
                fillObservationModel.ADMIN_SCHEDULE_CODE = Convert.ToInt32(qmObservationMaster.ADMIN_SCHEDULE_CODE);
                fillObservationModel.IMS_PR_ROAD_CODE = qmObservationMaster.IMS_PR_ROAD_CODE;
                fillObservationModel.FROM_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_START_CHAINAGE;
                fillObservationModel.TO_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_END_CHAINAGE;

                //To Show actual inspection date entered by Monitor in case of uploading through web
                string uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");

                // string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "W" : dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                if (device_flag.Equals("W") || device_flag.Equals("N"))
                {
                    uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                }
                else
                {
                    if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                    {
                        if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                        {
                            uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                        }
                        else
                        {
                            uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                        }
                    }
                }
                fillObservationModel.QM_INSPECTION_DATE = uploadDate;
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;

                //-----***************************************************
                fillObservationModel.IMS_ISCOMPLETED = roadStatus;
                if (roadStatus.Equals("C") || roadStatus.Equals("M"))
                {
                    var execMonthlyProgress = (from erms in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                               where erms.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                               && erms.EXEC_ISCOMPLETED == "C"
                                               select erms).FirstOrDefault();

                    if (execMonthlyProgress != null)
                    {
                        fillObservationModel.COMPLETION_DATE = DateTime.Parse(execMonthlyProgress.EXEC_COMPLETION_DATE.ToString()).ToString("dd-MMM-yyyy");
                    }
                    else
                    {
                        fillObservationModel.COMPLETION_DATE = "--";
                    }
                }
                else
                {
                    fillObservationModel.COMPLETION_DATE = "--";
                }
                //-----***************************************************

                // Bridge Inspections
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    fillObservationModel.IMS_BRIDGE_NAME = roadDetails.IMS_BRIDGE_NAME;
                    fillObservationModel.IMS_BRIDGE_LENGTH = roadDetails.IMS_BRIDGE_LENGTH;
                }
                fillObservationModel.IMS_PROPOSAL_TYPE = roadDetails.IMS_PROPOSAL_TYPE;

                fillObservationModel.STATE_NAME = roadDetails.MASTER_STATE.MAST_STATE_NAME;
                fillObservationModel.DISTRICT_NAME = roadDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME;
                fillObservationModel.IMS_PACKAGE_ID = roadDetails.IMS_PACKAGE_ID;
                fillObservationModel.IMS_YEAR = roadDetails.IMS_YEAR + "-" + (roadDetails.IMS_YEAR + 1);
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_ROAD_NAME = roadDetails.IMS_ROAD_NAME;

                // If latlong for any of the corresponding Images are available then only show Google Map, so setting flag here
                if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(c => c.QM_OBSERVATION_ID == qmObservationMaster.QM_OBSERVATION_ID && (c.QM_LATITUDE != null || c.QM_LONGITUDE != null)).Select(c => c.QM_FILE_ID).Any())
                    fillObservationModel.IsLatLongAvailable = true;
                else
                    fillObservationModel.IsLatLongAvailable = false;

                return fillObservationModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Populate Details about particular Observation
        /// </summary>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public QMFillObservationModel QMObservationDetails2TierCQCDAL(int obsId)
        {
            dbContext = new Models.PMGSYEntities();

            try
            {
                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(obsId);
                QMFillObservationModel fillObservationModel = new QMFillObservationModel();
                //Get Road Status
                var roadDetails = (from isp in dbContext.IMS_SANCTIONED_PROJECTS
                                   where isp.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                   select isp).First();

                string qmType = string.Empty;

                //Default Road Status, as in IMS_SANCTIONED_PROJECTS
                //string roadStatus = roadDetails.IMS_ISCOMPLETED;
                string roadStatus = qmObservationMaster.QM_ROAD_STATUS;
                var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                       where qqs.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE
                                       select qqs).FirstOrDefault();


                fillObservationModel.MONITOR_NAME = Convert.ToString(dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == scheduleDetails.ADMIN_QM_CODE)
                    .Select(m => (m.ADMIN_QM_LNAME == null ? "" : m.ADMIN_QM_LNAME) + " " + m.ADMIN_QM_FNAME + " " + (m.ADMIN_QM_MNAME == null ? "" : m.ADMIN_QM_MNAME)).FirstOrDefault());

                List<qm_observation_grading_detail_Result> itemList = new List<qm_observation_grading_detail_Result>();
                itemList = dbContext.qm_observation_grading_detail(obsId, "S").ToList<qm_observation_grading_detail_Result>();
                fillObservationModel.GRADE_DETAILS_LIST = itemList;
                fillObservationModel.MAX_MAIN_ITEM_COUNT = (from list in itemList select list.MAST_ITEM_CODE).Max();

                fillObservationModel.SCHEDULE_MONTH_YEAR = new CommonFunctions().getMonthText(Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH)) + " " + scheduleDetails.ADMIN_IM_YEAR.ToString();
                fillObservationModel.ADMIN_SCHEDULE_CODE = Convert.ToInt32(qmObservationMaster.ADMIN_SCHEDULE_CODE);
                fillObservationModel.IMS_PR_ROAD_CODE = qmObservationMaster.IMS_PR_ROAD_CODE;
                fillObservationModel.FROM_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_START_CHAINAGE;
                fillObservationModel.TO_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_END_CHAINAGE;
                //fillObservationModel.QM_INSPECTION_DATE = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //fillObservationModel.QM_INSPECTION_DATE = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any() ? dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy") : qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //string uploadDate = "";
                //if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                //{
                //    if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                //    {
                //        uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //    }
                //    else
                //    {
                //        uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                //    }
                //}
                //fillObservationModel.QM_INSPECTION_DATE = uploadDate;
                //To Show actual inspection date entered by Monitor in case of uploading through web
                string uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //var result = (from QQOM in dbContext.QUALITY_QM_OBSERVATION_MASTER
                //              join QQSD in dbContext.QUALITY_QM_SCHEDULE_DETAILS on QQOM.ADMIN_SCHEDULE_CODE equals QQSD.ADMIN_SCHEDULE_CODE
                //              join ISP in dbContext.IMS_SANCTIONED_PROJECTS on QQSD.IMS_PR_ROAD_CODE equals ISP.IMS_PR_ROAD_CODE
                //              join QQS in dbContext.QUALITY_QM_SCHEDULE on QQSD.ADMIN_SCHEDULE_CODE equals QQS.ADMIN_SCHEDULE_CODE
                //              where QQOM.QM_OBSERVATION_ID == obsId
                //              select new { QQSD.DEVICE_FLAG }).ToList();

                // string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "W" : dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                if (device_flag.Equals("W") || device_flag.Equals("N"))
                {
                    uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                }
                else
                {
                    if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                    {
                        if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                        {
                            uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                        }
                        else
                        {
                            uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                        }
                    }
                }
                fillObservationModel.QM_INSPECTION_DATE = uploadDate;
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;

                //-----***************************************************
                fillObservationModel.IMS_ISCOMPLETED = roadStatus;
                //-----***************************************************
                // Bridge Inspections
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    fillObservationModel.IMS_BRIDGE_NAME = roadDetails.IMS_BRIDGE_NAME;
                    fillObservationModel.IMS_BRIDGE_LENGTH = roadDetails.IMS_BRIDGE_LENGTH;
                }
                fillObservationModel.IMS_PROPOSAL_TYPE = roadDetails.IMS_PROPOSAL_TYPE;

                fillObservationModel.STATE_NAME = roadDetails.MASTER_STATE.MAST_STATE_NAME;
                fillObservationModel.DISTRICT_NAME = roadDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME;
                fillObservationModel.IMS_PACKAGE_ID = roadDetails.IMS_PACKAGE_ID;
                fillObservationModel.IMS_YEAR = roadDetails.IMS_YEAR + "-" + (roadDetails.IMS_YEAR + 1);
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_ROAD_NAME = roadDetails.IMS_ROAD_NAME;

                // If latlong for any of the corresponding Images are available then only show Google Map, so setting flag here
                if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(c => c.QM_OBSERVATION_ID == qmObservationMaster.QM_OBSERVATION_ID && (c.QM_LATITUDE != null || c.QM_LONGITUDE != null)).Select(c => c.QM_FILE_ID).Any())
                    fillObservationModel.IsLatLongAvailable = true;
                else
                    fillObservationModel.IsLatLongAvailable = false;

                return fillObservationModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Schedule List of Assigned schedule For Current Month Onwards for 2 Tier in CQCAdmin Login
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array Get2TierScheduleListCQCDAL(int state, int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                int stateCode = 0;
                List<qm_get_schedule_current_month_onwards_Result> scheduleItemList = new List<qm_get_schedule_current_month_onwards_Result>();
                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string nameSearch = string.Empty;

                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "MONITOR_NAME":
                                nameSearch = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                month = (month == 0 ? DateTime.Now.Month : month);
                year = (year == 0 ? DateTime.Now.Year : year);

                scheduleItemList = dbContext.qm_get_schedule_current_month_onwards(0, "S", state, month, year, PMGSYSession.Current.UserId).Where
                                    (x => x.MONITOR_NAME.Contains(nameSearch.Equals(string.Empty) ? "" : nameSearch)
                                    ).ToList<qm_get_schedule_current_month_onwards_Result>();

                totalRecords = scheduleItemList.Count();

                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim(),
                    cell = new[] {
                                        "<a href='#'title='Click here to view the monitor details' style='text-decoration:none;' class='ui-align-center' onClick='ShowMonitorData(\"" +schDetails.ADMIN_QM_CODE.ToString().Trim()  +"\"); return false;'>" + schDetails.MONITOR_NAME + "</a>",
                                        (objCommonFunctions.getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR),
                                        schDetails.STATE_NAME,
                                        schDetails.DISTRICT_NAME,
                                        schDetails.DISTRICT_NAME2,
                                        schDetails.DISTRICT_NAME3,
                                        schDetails.INSP_STATUS_FLAG,
                                        "<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewDetails(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>"
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// List Quality Monitors - Used to display Monitor List only in CQCadmin Login - 2nd Tier
        /// </summary>
        /// <param name="qmTypeName"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="isEmpanelled"></param>
        /// <param name="filters"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string firstName = string.Empty;
                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "ADMIN_QM_FNAME":
                                firstName = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                qmTypeName = qmTypeName.Replace("%", "");
                dbContext = new PMGSYEntities();
                var lstQualityMonitorDetails = (from qualityMonitor in dbContext.ADMIN_QUALITY_MONITORS
                                                join state in dbContext.MASTER_STATE
                                                on qualityMonitor.MAST_STATE_CODE equals state.MAST_STATE_CODE into outerState
                                                from state in outerState.DefaultIfEmpty()
                                                join district in dbContext.MASTER_DISTRICT
                                                on qualityMonitor.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE into outerDistrict
                                                from district in outerDistrict.DefaultIfEmpty()
                                                join designation in dbContext.MASTER_DESIGNATION
                                                on qualityMonitor.ADMIN_QM_DESG equals designation.MAST_DESIG_CODE into outerDesignation
                                                from designation in outerDesignation.DefaultIfEmpty()
                                                where (
                                                //((firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper())) &&

                                                ((firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                                (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_MNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                                (firstName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_LNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()))
                                                &&
                                                ((qmTypeName == string.Empty ? "%" : qualityMonitor.ADMIN_QM_TYPE.ToUpper()).StartsWith(qmTypeName == string.Empty ? "%" : qmTypeName.ToUpper()))
                                                &&
                                                ((stateCode == 0 ? 1 : state.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode))
                                                &&
                                                ((districtCode == 0 ? 1 : district.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode))
                                                &&
                                                (qualityMonitor.ADMIN_QM_EMPANELLED == isEmpanelled)
                                                )
                                                select new
                                                {
                                                    state.MAST_STATE_NAME,
                                                    district.MAST_DISTRICT_NAME,
                                                    designation.MAST_DESIG_NAME,
                                                    qualityMonitor.ADMIN_QM_CODE,
                                                    qualityMonitor.ADMIN_QM_FNAME,
                                                    qualityMonitor.ADMIN_QM_MNAME,
                                                    qualityMonitor.ADMIN_QM_LNAME,
                                                    qualityMonitor.ADMIN_QM_ADDRESS1,
                                                    qualityMonitor.ADMIN_QM_ADDRESS2,
                                                    qualityMonitor.ADMIN_QM_PIN,
                                                    qualityMonitor.ADMIN_QM_STD1,
                                                    qualityMonitor.ADMIN_QM_STD2,
                                                    qualityMonitor.ADMIN_QM_PHONE1,
                                                    qualityMonitor.ADMIN_QM_PHONE2,
                                                    qualityMonitor.ADMIN_QM_STD_FAX,
                                                    qualityMonitor.ADMIN_QM_FAX,
                                                    qualityMonitor.ADMIN_QM_MOBILE1,
                                                    qualityMonitor.ADMIN_QM_MOBILE2,
                                                    qualityMonitor.ADMIN_QM_EMAIL,
                                                    qualityMonitor.ADMIN_QM_PAN,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED,
                                                    qualityMonitor.ADMIN_QM_EMPANELLED_YEAR,
                                                    qualityMonitor.ADMIN_QM_REMARKS,
                                                    qualityMonitor.ADMIN_QM_TYPE,
                                                    qualityMonitor.ADMIN_QM_IMAGE,
                                                    qualityMonitor.ADMIN_USER_ID,
                                                    qualityMonitor.ADMIN_QM_DOCPATH,//Added By Abhishek 27-June-2014
                                                }).ToList();
                totalRecords = lstQualityMonitorDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_DISTRICT_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_FNAME":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "MAST_STATE_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_DISTRICT_CODE":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "ADMIN_QM_FNAME":
                                lstQualityMonitorDetails = lstQualityMonitorDetails.OrderByDescending(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstQualityMonitorDetails = lstQualityMonitorDetails.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.ADMIN_QM_FNAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                //Added By Abhishek to show image files
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_MONITOR_FILE_UPLOAD"];


                return lstQualityMonitorDetails.Select(item => new
                {
                    cell = new[]{
                                item.ADMIN_QM_IMAGE==null?"":Path.Combine(VirtualDirectoryUrl, item.ADMIN_QM_IMAGE.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME==null?"":item.ADMIN_QM_FNAME+" "+item.ADMIN_QM_MNAME+" "+item.ADMIN_QM_LNAME,
                                item.MAST_STATE_NAME==null?"-": item.MAST_STATE_NAME.Trim(),
                                item.MAST_DESIG_NAME==null?"-":item.MAST_DESIG_NAME,
                                ((item.ADMIN_QM_ADDRESS1+""+item.ADMIN_QM_ADDRESS2)==string.Empty?"-":"Address:-"+(item.ADMIN_QM_ADDRESS1+" "+item.ADMIN_QM_ADDRESS2+",  "))+(item.ADMIN_QM_STD1==null?string.Empty:"Phone1:-"+item.ADMIN_QM_STD1.ToString().Trim()+"-")+(item.ADMIN_QM_PHONE1==null?"-":(item.ADMIN_QM_PHONE1.ToString().Trim())+",  ")+(item.ADMIN_QM_STD2==null?string.Empty:"Phone2:-"+(item.ADMIN_QM_STD2.ToString().Trim())+"-")+(item.ADMIN_QM_PHONE2==null?string.Empty:(item.ADMIN_QM_PHONE2.ToString().Trim())+",  ")+(item.ADMIN_QM_STD_FAX==null?string.Empty:"Fax:-"+(item.ADMIN_QM_STD_FAX.ToString().Trim())+"-")+(item.ADMIN_QM_FAX==null?string.Empty:(item.ADMIN_QM_FAX.ToString().Trim())+",  ")+(item.ADMIN_QM_MOBILE1==null?string.Empty:"Mobile1:-"+(item.ADMIN_QM_MOBILE1.Trim())+",  ")+(item.ADMIN_QM_MOBILE2==null?string.Empty:"Mobile2:-"+ (item.ADMIN_QM_MOBILE2.ToString().Trim())+",  ")+(item.ADMIN_QM_EMAIL==null?string.Empty:"Email:-"+(item.ADMIN_QM_EMAIL.ToString().Trim()+",  ")+(item.MAST_DISTRICT_NAME==null?string.Empty:"District:-"+(item.MAST_DISTRICT_NAME.ToString())+",  ")+(item.ADMIN_QM_PIN==null?string.Empty:"PIN Code:-"+(item.ADMIN_QM_PIN.ToString()))) ,
                                item.ADMIN_QM_PAN==null?"-":(item.ADMIN_QM_PAN.Trim()==string.Empty?"-":item.ADMIN_QM_PAN.Trim()),
                                item.ADMIN_QM_EMPANELLED=="N"?"No":"Yes",
                                item.ADMIN_QM_EMPANELLED_YEAR==null?"-":item.ADMIN_QM_EMPANELLED_YEAR.ToString(),
                                item.ADMIN_QM_REMARKS==null?"-":(item.ADMIN_QM_REMARKS.Trim()==string.Empty?"-":item.ADMIN_QM_REMARKS.Trim()),
                                item.ADMIN_QM_TYPE==null?"-":(item.ADMIN_QM_TYPE.Trim()==string.Empty?"-":item.ADMIN_QM_TYPE.Trim()=="I"?"NQM":"SQM"),
                                dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()==null
                                    ? "-"
                                    : (dbContext.UM_User_Master.Where(m=>m.UserID==item.ADMIN_USER_ID).Select(s=>s.UserName).FirstOrDefault()),
                                URLEncrypt.EncryptParameters1(new string[]{"QmCode="+item.ADMIN_QM_CODE.ToString().Trim()}),
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion


        #region SQC 3-Tier

        /// <summary>
        /// SQC 3 Tier Inspection Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="monitorCode"></param>
        /// <param name="fromMonth"></param>
        /// <param name="fromYear"></param>
        /// <param name="toMonth"></param>
        /// <param name="toYear"></param>
        /// <returns></returns>
        public Array QMViewInspectionDetailsSQCPIUDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                             int stateCode, int monitorCode, int fromMonth, int fromYear,
                                             int toMonth, int toYear, string qmType, int schemeType, string roadStatus, string roadOrBridge, string gradeType, string eFormStatusType)
        {
            dbContext = new PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();

            Int32 ImageCount = 0;

            try
            {

                stateCode = PMGSYSession.Current.StateCode > 0 ? PMGSYSession.Current.StateCode : stateCode;
                ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());

                if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //sqc
                {
                    scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, eFormStatusType).ToList<qm_inspection_list_Result>();
                }
                else if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54) //PIU or PIUOA or CQCAdmin or PIURCPLWE
                {
                    //qmType = (PMGSYSession.Current.RoleCode == 5) ? "I" : qmType;
                    eFormStatusType = "0";
                    scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", "A", stateCode, PMGSYSession.Current.DistrictCode, qmType, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme), PMGSYSession.Current.RoleCode, "0", "0", eFormStatusType).ToList<qm_inspection_list_Result>();
                }
                else if (PMGSYSession.Current.RoleCode == 5) //  CQCAdmin
                {
                    //qmType = (PMGSYSession.Current.RoleCode == 5) ? "I" : qmType;

                    scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, eFormStatusType).ToList<qm_inspection_list_Result>();
                }




                totalRecords = scheduleItemList.Count();

                if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54)
                {
                    return scheduleItemList.Select(schRoadDetails => new
                    {
                        id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                        cell = new[] {
                                    schRoadDetails.MONITOR_NAME,
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,

                                    schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                         (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),
                                    schRoadDetails.IMS_ROAD_NAME,

                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "Bridge",
                                       schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                            schRoadDetails.QM_SCHEDULE_DATE.ToString(),
                                            schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                            Convert.ToDateTime(schRoadDetails.QM_OBS_UPLOAD_DATE).ToShortDateString(),

                                    schRoadDetails.IMS_ISCOMPLETED,
                                      schRoadDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                     schRoadDetails.PMGSY_SCHEME,










                                    schRoadDetails.OVERALL_GRADE,
                                    schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                   // schRoadDetails.UPLOAD_BY,
                                   schRoadDetails.UPLOAD_BY=schRoadDetails.NO_OF_PHOTO_UPLOADED >=15 ? "Completed" : "Not Completed" ,
                                    (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                        ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                        : "<a href='#' title='Click here to upload report' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                    "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>", 
                                     //added by abhinav on 15-aug-2019
                                     (dbContext.QUALITY_QM_INSPECTION_FILES.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ?
                                    (PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7 || PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 9)

                                    ?"<a href='#' title='Click here to view PDF' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFilePDF(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + ","+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"\"); return false;'>View</a>":
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                    }
                    }).ToArray();
                }
                else
                {
                    return scheduleItemList.Select(schRoadDetails => new
                    {
                        id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                        cell = new[] {
                                    schRoadDetails.MONITOR_NAME,
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,
                                    schRoadDetails.BLOCK_NAME,
                                      schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                   // (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),
                                  
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                     schRoadDetails.PMGSY_SCHEME,
                                        schRoadDetails.IMS_ISCOMPLETED,
                 schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P")?schRoadDetails.IMS_PAV_LENGTH.ToString():schRoadDetails.IMS_BRIDGE_LENGTH.ToString(),

                        schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                  //  schRoadDetails.QM_SCHEDULE_DATE.ToString(),
                                    schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                   // schRoadDetails.QM_OBS_UPLOAD_DATE.ToString(),
                                 
                                  //  schRoadDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                  
                                    schRoadDetails.OVERALL_GRADE,

                                     schRoadDetails.ADMIN_IS_ENQUIRY.Equals("Y")?"Enquiry Inspection":"Normal Inspection",

                                      "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",

                                  //  schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                   // schRoadDetails.UPLOAD_BY,
                                //   schRoadDetails.UPLOAD_BY=schRoadDetails.NO_OF_PHOTO_UPLOADED >=15 ? "Completed" : "Not Completed" ,
                                    (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                        ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                        : "<a href='#' title='Click here to upload report' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                        //added by abhinav on 15-aug-2019
                                    // (dbContext.QUALITY_QM_INSPECTION_FILES.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ?
                                    //(PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7 || PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 9)

                                    //?"<a href='#' title='Click here to view PDF' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFilePDF(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + ","+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"\"); return false;'>View</a>":
                                    //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                    //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                      ( ((schRoadDetails.Scan_TR_UPLOAD_STATUS=="Y"))? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRScanPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),

                                 //      schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                          (  schRoadDetails.EFORM_STATUS=="0"?"NA":  (schRoadDetails.EFORM_STATUS=="1"?"Pending at PIU":(schRoadDetails.EFORM_STATUS=="2"?"Pending at QM":(schRoadDetails.EFORM_STATUS=="3"?"Submitted":(schRoadDetails.EFORM_STATUS=="4"?"not Scheduled":"NA"))))),

                                        //Physcial path pdf view
                                  //   ((schRoadDetails.EFORM_STATUS=="3") ?  "<a href='/Eform/GetCombineReport?idtemp="+URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID.ToString()})+"' title='Click here to view part-I,II pdf'    target=_blank><input type='button' value='View'/></a>":"-"),
                                   //Virtual path pdf view  
                                 // ((schRoadDetails.EFORM_STATUS=="3") ?  "<a href='#' title='title='Click here to view part-I,II pdf'  onClick='viewCombinePdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),
                                   //Physical path eform pdf(part1+part2) view (onfly)
                                     ((schRoadDetails.EFORM_STATUS=="3") ?   "<a href='#' title='Click here to view e-Form combined part-1,part-2 pdf'  onClick='viewCombinedPart_1_2_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),



                          //  ((schRoadDetails.EFORM_STATUS=="3")?  "<input type='button' id='btnViewPDF' value='Preview' onClick=viewCombinePdfData('" +URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+schRoadDetails.EFORM_ID.ToString() })+ "');   target=_blank />":"-"),
                             //Ajinkya
                                    //Physical path test report
                                     //  ((schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='/Eform/GetTestReport?idtemp="+URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID})+"' title='Click here to view  pdf'    target=_blank><input type='button' value='View'/></a>":"-"),
                                    //Virtual path test report
                                        ((schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),


                           ((schRoadDetails.TR_UPLOAD_STATUS=="Y" && schRoadDetails.TR_FILE_NAME.Contains("$"))?  "<input type='button' value='Preview' onClick=previewTestReport('" +URLEncrypt.EncryptParameters1(new String[]{"imsRoadID ="+ schRoadDetails.EFORM_ID.ToString().Trim()})+ "');   target=_blank />":"-"),
                          ( (schRoadDetails.EFORM_STATUS=="3" && schRoadDetails.TR_UPLOAD_STATUS=="Y")? "<a href='#' title='Click here to view e-Form combined part-1,part-2 and Test Report pdf'  onClick='viewCombinedPart_1_2_TR_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),

                    }
                    }).ToArray();
                }


            }
            catch (Exception ex)
            {
                totalRecords = 0;
                ErrorLog.LogError(ex, "QMViewInspectionDetailsSQCPIUDAL()");
                return null;
            }

            finally
            {
                dbContext.Dispose();

            }

        }

        /// <summary>
        /// NQM Schedule List for SQC
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>QMObservationDetails3TierSQCDAL
        /// <returns></returns>
        public Array GetSqc3TierScheduleListDAL(int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                List<qm_sqc_piu_schedule_current_month_onwards_Result> scheduleItemList = new List<qm_sqc_piu_schedule_current_month_onwards_Result>();


                month = month == 0 ? DateTime.Now.Month : month;
                year = year == 0 ? DateTime.Now.Year : year;

                scheduleItemList = dbContext.qm_sqc_piu_schedule_current_month_onwards(PMGSYSession.Current.StateCode, 0, month, year).ToList<qm_sqc_piu_schedule_current_month_onwards_Result>();

                totalRecords = scheduleItemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        scheduleItemList = scheduleItemList.OrderByDescending(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                scheduleItemList = scheduleItemList.OrderByDescending(x => x.MONITOR_NAME).ToList();
                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim(),
                    cell = new[] {
                                        "<a href='#'title='Click here to view the monitor details' style='text-decoration:none;' class='ui-align-center' onClick='ShowMonitorData(\"" +schDetails.ADMIN_QM_CODE.ToString().Trim()  +"\"); return false;'>" + schDetails.MONITOR_NAME + "</a>",
                                        (objCommonFunctions.getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR),
                                        schDetails.DISTRICT_NAME,
                                        schDetails.DISTRICT_NAME2,
                                        schDetails.DISTRICT_NAME3,
                                        schDetails.INSP_STATUS_FLAG,
                                        //(schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignRoads(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                        //"<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewDetails(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>",
                                        //28-10-21
                                         (schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? ((schDetails.FINALIZE_FLAG.ToUpper() == "CQC") ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignRoads(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" ):"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                        "<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewDetails(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>",
                                        

                                        //For CQC & SQC 
                                        PMGSYSession.Current.RoleCode == 5
                                        ?  (schDetails.FINALIZE_FLAG.ToUpper() == "CQC") ? "<a href='#' title='Click here to forward schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='ForwardSchedule(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>ForwardSchedule</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        :  (PMGSYSession.Current.RoleCode == 8
                                             ? (schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? "<a href='#' title='Click here to forward schedule' class='ui-icon ui-icon-unlocked ui-align-center' onClick='ForwardSchedule(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>ForwardSchedule</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                             : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")
                        }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Populate Monitors for SQC for selected month & year(in 3 tier)
        /// </summary>
        /// <param name="state"></param>
        /// <param name="inspMonth"></param>
        /// <param name="inspYear"></param>
        /// <param name="districtCode"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateMonitorsDAL(int state, int inspMonth, int inspYear, int districtCode, string qmType)
        {
            List<SelectListItem> lstProfileNames = new List<SelectListItem>();
            dbContext = new PMGSYEntities();
            try
            {
                SelectListItem item = new SelectListItem();
                item.Text = "All Monitors";
                item.Value = "0";
                item.Selected = true;
                lstProfileNames.Add(item);


                string finalizFlagToComapre = string.Empty;
                if (qmType == "I")
                {
                    finalizFlagToComapre = "FCQC";

                }
                else if (qmType == "S")
                {
                    finalizFlagToComapre = "FSQC";
                }

                var query = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                             join qqs in dbContext.QUALITY_QM_SCHEDULE on aqm.ADMIN_QM_CODE equals qqs.ADMIN_QM_CODE
                             where aqm.ADMIN_QM_TYPE == qmType
                             && aqm.ADMIN_QM_EMPANELLED == "Y"
                             && qqs.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                             && qqs.ADMIN_IM_MONTH == inspMonth
                             && qqs.ADMIN_IM_YEAR == inspYear
                             && qqs.FINALIZE_FLAG == finalizFlagToComapre

                             && (
                                    (districtCode > 0 ? qqs.MAST_DISTRICT_CODE : 1) == (districtCode > 0 ? districtCode : 1) ||
                                    (districtCode > 0 ? qqs.MAST_DISTRICT_CODE2 : 1) == (districtCode > 0 ? districtCode : 1) ||
                                    (districtCode > 0 ? qqs.MAST_DISTRICT_CODE3 : 1) == (districtCode > 0 ? districtCode : 1)
                                )
                             select new
                             {
                                 Value = aqm.ADMIN_QM_CODE,
                                 Text = (aqm.ADMIN_QM_LNAME.Equals(null) ? "" : aqm.ADMIN_QM_LNAME) + " " + (aqm.ADMIN_QM_FNAME.Equals(null) ? "" : aqm.ADMIN_QM_FNAME) + " " + (aqm.ADMIN_QM_MNAME.Equals(null) ? "" : aqm.ADMIN_QM_MNAME)
                             }).Distinct().OrderBy(c => c.Text).ToList();

                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text;
                    item.Value = data.Value.ToString();
                    lstProfileNames.Add(item);
                }

                return lstProfileNames;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// SQC 3 Tier Observation Details
        /// </summary>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public QMFillObservationModel QMObservationDetails3TierSQCDAL(int obsId)
        {
            dbContext = new Models.PMGSYEntities();

            try
            {
                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(obsId);
                QMFillObservationModel fillObservationModel = new QMFillObservationModel();
                //Get Road Status
                var roadDetails = (from isp in dbContext.IMS_SANCTIONED_PROJECTS
                                   where isp.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                   select isp).First();

                //Default Road Status, as in IMS_SANCTIONED_PROJECTS
                //string roadStatus = roadDetails.IMS_ISCOMPLETED;
                string roadStatus = qmObservationMaster.QM_ROAD_STATUS;

                var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                       where qqs.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE
                                       select qqs).FirstOrDefault();

                fillObservationModel.MONITOR_NAME = Convert.ToString(dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == scheduleDetails.ADMIN_QM_CODE)
                    .Select(m => (m.ADMIN_QM_LNAME == null ? "" : m.ADMIN_QM_LNAME) + " " + m.ADMIN_QM_FNAME + " " + (m.ADMIN_QM_MNAME == null ? "" : m.ADMIN_QM_MNAME)).FirstOrDefault());

                List<qm_observation_grading_detail_Result> itemList = new List<qm_observation_grading_detail_Result>();
                itemList = dbContext.qm_observation_grading_detail(obsId, "N").ToList<qm_observation_grading_detail_Result>();
                fillObservationModel.GRADE_DETAILS_LIST = itemList;
                fillObservationModel.MAX_MAIN_ITEM_COUNT = (from list in itemList select list.MAST_ITEM_CODE).Max();

                fillObservationModel.SCHEDULE_MONTH_YEAR = new CommonFunctions().getMonthText(Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH)) + " " + scheduleDetails.ADMIN_IM_YEAR.ToString();
                fillObservationModel.ADMIN_SCHEDULE_CODE = Convert.ToInt32(qmObservationMaster.ADMIN_SCHEDULE_CODE);
                fillObservationModel.IMS_PR_ROAD_CODE = qmObservationMaster.IMS_PR_ROAD_CODE;
                fillObservationModel.FROM_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_START_CHAINAGE;
                fillObservationModel.TO_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_END_CHAINAGE;
                //fillObservationModel.QM_INSPECTION_DATE = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any() ? dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy") : qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //string uploadDate = "";
                //if (dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(z => z.QM_OBSERVATION_ID == obsId).FirstOrDefault().ADMIN_SCHEDULE_CODE).FirstOrDefault().DEVICE_FLAG.Equals('W'))
                //{
                //    uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //}
                //else
                //{
                //    if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                //    {
                //        if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                //        {
                //            uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //        }
                //        else
                //        {
                //            uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                //        }
                //    }
                //}
                //fillObservationModel.QM_INSPECTION_DATE = uploadDate;
                //To Show actual inspection date entered by Monitor in case of uploading through web
                string uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                //var result = (from QQOM in dbContext.QUALITY_QM_OBSERVATION_MASTER
                //              join QQSD in dbContext.QUALITY_QM_SCHEDULE_DETAILS on QQOM.ADMIN_SCHEDULE_CODE equals QQSD.ADMIN_SCHEDULE_CODE
                //              join ISP in dbContext.IMS_SANCTIONED_PROJECTS on QQSD.IMS_PR_ROAD_CODE equals ISP.IMS_PR_ROAD_CODE
                //              join QQS in dbContext.QUALITY_QM_SCHEDULE on QQSD.ADMIN_SCHEDULE_CODE equals QQS.ADMIN_SCHEDULE_CODE
                //              where QQOM.QM_OBSERVATION_ID == obsId
                //              select new { QQSD.DEVICE_FLAG }).ToList();

                // string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "W" : dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                if (device_flag.Equals("W") || device_flag.Equals("N"))
                {
                    uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                }
                else
                {
                    if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                    {
                        if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                        {
                            uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                        }
                        else
                        {
                            uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                        }
                    }
                }
                fillObservationModel.QM_INSPECTION_DATE = uploadDate;
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;

                //-----***************************************************
                fillObservationModel.IMS_ISCOMPLETED = roadStatus;
                if (roadStatus.Equals("C") || roadStatus.Equals("M"))
                {
                    var execMonthlyProgress = (from erms in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                               where erms.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                               && erms.EXEC_ISCOMPLETED == "C"
                                               select erms).FirstOrDefault();

                    if (execMonthlyProgress != null)
                    {
                        fillObservationModel.COMPLETION_DATE = DateTime.Parse(execMonthlyProgress.EXEC_COMPLETION_DATE.ToString()).ToString("dd-MMM-yyyy");
                    }
                    else
                    {
                        fillObservationModel.COMPLETION_DATE = "--";
                    }
                }
                else
                {
                    fillObservationModel.COMPLETION_DATE = "--";
                }
                //-----***************************************************
                // Bridge Inspections
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    fillObservationModel.IMS_BRIDGE_NAME = roadDetails.IMS_BRIDGE_NAME;
                    fillObservationModel.IMS_BRIDGE_LENGTH = roadDetails.IMS_BRIDGE_LENGTH;
                }
                fillObservationModel.IMS_PROPOSAL_TYPE = roadDetails.IMS_PROPOSAL_TYPE;

                fillObservationModel.STATE_NAME = roadDetails.MASTER_STATE.MAST_STATE_NAME;
                fillObservationModel.DISTRICT_NAME = roadDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME;
                fillObservationModel.IMS_PACKAGE_ID = roadDetails.IMS_PACKAGE_ID;
                fillObservationModel.IMS_YEAR = roadDetails.IMS_YEAR + "-" + (roadDetails.IMS_YEAR + 1);
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_ROAD_NAME = roadDetails.IMS_ROAD_NAME;

                // If latlong for any of the corresponding Images are available then only show Google Map, so setting flag here
                if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(c => c.QM_OBSERVATION_ID == qmObservationMaster.QM_OBSERVATION_ID && (c.QM_LATITUDE != null || c.QM_LONGITUDE != null)).Select(c => c.QM_FILE_ID).Any())
                    fillObservationModel.IsLatLongAvailable = true;
                else
                    fillObservationModel.IsLatLongAvailable = false;

                return fillObservationModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion


        #region PIU
        /// <summary>
        /// Schedule list of NQMs for PIU Login
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array GetPIU3TierScheduleListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                List<qm_sqc_piu_schedule_current_month_onwards_Result> scheduleItemList = new List<qm_sqc_piu_schedule_current_month_onwards_Result>();



                scheduleItemList = dbContext.qm_sqc_piu_schedule_current_month_onwards(PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, DateTime.Now.Month, DateTime.Now.Year).ToList<qm_sqc_piu_schedule_current_month_onwards_Result>();

                totalRecords = scheduleItemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        scheduleItemList = scheduleItemList.OrderByDescending(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                scheduleItemList = scheduleItemList.OrderByDescending(x => x.MONITOR_NAME).ToList();
                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim(),
                    cell = new[] {
                                        "<a href='#'title='Click here to view the monitor details' style='text-decoration:none;' class='ui-align-center' onClick='ShowMonitorData(\"" +schDetails.ADMIN_QM_CODE.ToString().Trim()  +"\"); return false;'>" + schDetails.MONITOR_NAME + "</a>",
                                        (objCommonFunctions.getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR),
                                        schDetails.INSP_STATUS_FLAG,
                                        /*(schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignRoadsPIU(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":*/"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                        "<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewDetailsPIU3Tier(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>"
                                }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Schedule list of SQMs for PIU Login
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array GetPIU2TierScheduleListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            try
            {
                List<qm_sqc_piu_2tier_schedule_current_month_onwards_Result> scheduleItemList = new List<qm_sqc_piu_2tier_schedule_current_month_onwards_Result>();

                scheduleItemList = dbContext.qm_sqc_piu_2tier_schedule_current_month_onwards(PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, DateTime.Now.Month, DateTime.Now.Year).ToList<qm_sqc_piu_2tier_schedule_current_month_onwards_Result>();

                totalRecords = scheduleItemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        scheduleItemList = scheduleItemList.OrderByDescending(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    scheduleItemList = scheduleItemList.OrderBy(x => x.MONITOR_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                scheduleItemList = scheduleItemList.OrderByDescending(x => x.MONITOR_NAME).ToList();
                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim(),
                    cell = new[] {
                                        "<a href='#'title='Click here to view the monitor details' style='text-decoration:none;' class='ui-align-center' onClick='ShowMonitorDataPIU2Tier(\"" +schDetails.ADMIN_QM_CODE.ToString().Trim()  +"\"); return false;'>" + schDetails.MONITOR_NAME + "</a>",
                                        (objCommonFunctions.getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR),
                                        schDetails.INSP_STATUS_FLAG,
                                        (schDetails.INSP_STATUS_FLAG.ToLower() == "initiated") ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignRoadsPIU2Tier(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                        "<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewDetailsPIU2Tier(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>"
                                }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion


        #region  Monitors

        /// <summary>
        /// Get Current Month Schecdule for Monitors
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetMonitorsCurrScheduleListDAL(int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                //get Current Logged in MonitorID 
                var monitorDetails = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                      where aqm.ADMIN_USER_ID == PMGSYSession.Current.UserId
                                      select aqm).First();


                List<qm_monitor_schedule_current_month_onwards_Result> scheduleItemList = new List<qm_monitor_schedule_current_month_onwards_Result>();
                string qmType = string.Empty;
                month = month == 0 ? DateTime.Now.Month : month;
                year = year == 0 ? DateTime.Now.Year : year;

                scheduleItemList = dbContext.qm_monitor_schedule_current_month_onwards(monitorDetails.ADMIN_QM_CODE, monitorDetails.ADMIN_QM_TYPE, month, year).ToList<qm_monitor_schedule_current_month_onwards_Result>();

                totalRecords = scheduleItemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        scheduleItemList = scheduleItemList.OrderByDescending(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).ToList();
                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim(),
                    cell = new[] {
                                        (new CommonFunctions().getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR),
                                        schDetails.STATE_NAME,
                                        schDetails.DISTRICT_NAME,
                                        schDetails.DISTRICT_NAME2,
                                        schDetails.DISTRICT_NAME3,
                                        schDetails.INSP_STATUS_FLAG,
                                        (PMGSYSession.Current.RoleCode==6) ? "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" :
                                        schDetails.INSP_STATUS_FLAG.Equals("UPGF")  //Change done on 2/9/2014, monitor only addd roads before finalization. FOr Unplanned mode provision given in Mobile to assign Road
                                            ? "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                            : "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignRoads(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>",
                                        dbContext.QUALITY_QM_TOUR_DETAILS.Where(c => c.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE).Any()
                                            ? "<a href='#' title='Click here to view tour details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='QMViewTourDetails(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'></a>"
                                            : "<a href='#' title='Click here to update tour details' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMViewTourDetails(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'></a>",
                                        "<a href='#'title='Click here to view the schedule details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewSchDetails(\"" + schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\"); return false;'>View</a>"
                        }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Inspection List for Monitors
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="fromMonth"></param>
        /// <param name="fromYear"></param>
        /// <param name="toMonth"></param>
        /// <param name="toYear"></param>
        /// <returns></returns>
        public Array QMMonitorInspListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                         int fromMonth, int fromYear, int toMonth, int toYear)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();
            Int32 ImageCount = 0;
            try
            {


                //get Current Logged in MonitorID 
                var monitorDetails = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                      where aqm.ADMIN_USER_ID == PMGSYSession.Current.UserId
                                      select aqm).First();

                if (monitorDetails.ADMIN_QM_TYPE.Equals("I"))
                {
                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "NQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }
                else if (monitorDetails.ADMIN_QM_TYPE.Equals("S"))
                {
                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }

                scheduleItemList = dbContext.qm_inspection_list(monitorDetails.ADMIN_QM_CODE, fromMonth, fromYear, toMonth, toYear, "0", "A", 0, 0, monitorDetails.ADMIN_QM_TYPE, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme), PMGSYSession.Current.RoleCode, "0", "0", "0").ToList<qm_inspection_list_Result>();
                totalRecords = scheduleItemList.Count();


                // added on 13-05-2022 by Shreyas Rao
                // all user to fill for prev month 
                AddXmlFile_User userdata;
                //AddXmlFile_State statedata;
                List<AddXmlFile_User> userdata_list = new List<AddXmlFile_User>();
                //List<AddXmlFile_State> statedata_list = new List<AddXmlFile_State>();


                if (System.IO.File.Exists(System.Web.HttpContext.Current.Server.MapPath("~/AllowUserToInspectRoads_QMS.xml")))
                { // Create a file to write to   
                    XDocument doc = XDocument.Load(System.Web.HttpContext.Current.Server.MapPath("~/AllowUserToInspectRoads_QMS.xml"));

                    foreach (XElement element in doc.Descendants("datainfo")
                        .Descendants("User"))
                    {
                        userdata = new AddXmlFile_User();
                        userdata.UserId = Convert.ToInt32(element.Element("UserId").Value);
                        userdata.MAST_STATE_CODE = Convert.ToInt32(element.Element("MAST_STATE_CODE").Value);
                        userdata.RoleCode = (element.Element("RoleCode").Value).Equals("SQM") ? 7 : ((element.Element("RoleCode").Value).Equals("NQM") ? 8 : 0);
                        userdata.schMonth = Convert.ToInt32(element.Element("schMonth").Value);
                        userdata.ToschMonth = Convert.ToInt32(element.Element("ToschMonth").Value);
                        userdata.schYear = Convert.ToInt32(element.Element("schYear").Value);
                        userdata.ToMonth = Convert.ToInt32(element.Element("ToMonth").Value);
                        userdata.ToYear = Convert.ToInt32(element.Element("ToYear").Value);
                        userdata.ToDate = Convert.ToInt32(element.Element("ToDate").Value);
                        userdata_list.Add(userdata);
                    }
                }

                /*          if (System.IO.File.Exists(System.Web.HttpContext.Current.Server.MapPath("~/AllowUserToInspectRoads_QMS.xml")))
                          { // Create a file to write to   
                              XDocument doc = XDocument.Load(System.Web.HttpContext.Current.Server.MapPath("~/AllowUserToInspectRoads_QMS.xml"));

                              foreach (XElement element in doc.Descendants("datainfo")
                                  .Descendants("State"))
                              {
                                  statedata = new AddXmlFile_State();
                                  statedata.MAST_STATE_CODE = Convert.ToInt32(element.Element("MAST_STATE_CODE").Value);
                                  statedata.RoleCode = Convert.ToInt32(element.Element("RoleCode").Value);
                                  statedata.schMonth = Convert.ToInt32(element.Element("schMonth").Value);
                                  statedata.schYear = Convert.ToInt32(element.Element("schYear").Value);
                                  statedata.ToMonth = Convert.ToInt32(element.Element("ToMonth").Value);
                                  statedata.ToYear = Convert.ToInt32(element.Element("ToYear").Value);
                                  statedata.ToDate = Convert.ToInt32(element.Element("ToDate").Value);
                                  statedata_list.Add(statedata);
                              }
                          }
                      */


                return scheduleItemList.Select(schRoadDetails => new
                {
                    id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                    schRoadDetails.STATE_NAME,
                                    schRoadDetails.DISTRICT_NAME,
                                    schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                    (schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR +  1)).ToString(),
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                    schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                    schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                    schRoadDetails.QM_SCHEDULE_DATE.ToString(),
                                    schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                    schRoadDetails.QM_OBS_UPLOAD_DATE.ToString(),
                                    schRoadDetails.IMS_ISCOMPLETED,
                                    schRoadDetails.ADMIN_IS_ENQUIRY == "Y" ? "Yes" : "No",
                                    schRoadDetails.PMGSY_SCHEME,
                                    schRoadDetails.OVERALL_GRADE,
                                    //schRoadDetails.UPLOAD_BY,
                                    schRoadDetails.UPLOAD_BY=schRoadDetails.NO_OF_PHOTO_UPLOADED >=15 ? "Completed" : "Not Completed" ,
                                    schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                    //(schRoadDetails.NO_OF_PHOTO_UPLOADED < ImageCount ) ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadMonitorsFile(\"" +  schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\",\"" + schRoadDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Upload</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    
                                    //Added condition on 10-05-2022
                                    /*((schRoadDetails.NO_OF_PHOTO_UPLOADED < ImageCount) && ((( schRoadDetails.ADMIN_IM_MONTH==4) && schRoadDetails.ADMIN_IM_YEAR==2022 && ((System.DateTime.Now.Month==5 && System.DateTime.Now.Day <= 20  && System.DateTime.Now.Year==2022 ) && ((schRoadDetails.MAST_STATE_CODE==14 && PMGSYSession.Current.RoleCode == 7)  || PMGSYSession.Current.UserId==7370)) )
                                    ||(schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month && schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) || ((schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month - 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                || ((schRoadDetails.ADMIN_IM_MONTH == 12 && System.DateTime.Now.Month == 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))             )) ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadMonitorsFile(\"" +  schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\",\"" + schRoadDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Upload</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    */

                                     //Added condition on 09-05-2022
                                    ((schRoadDetails.NO_OF_PHOTO_UPLOADED < ImageCount) && ((userdata_list.Any(u=>(u.UserId==PMGSYSession.Current.UserId || (u.MAST_STATE_CODE==schRoadDetails.MAST_STATE_CODE && u.RoleCode==PMGSYSession.Current.RoleCode)) && (u.schMonth<=schRoadDetails.ADMIN_IM_MONTH && schRoadDetails.ADMIN_IM_MONTH <=u.ToschMonth) && u.schYear==schRoadDetails.ADMIN_IM_YEAR && ((u.ToMonth==System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year && u.ToDate>=System.DateTime.Now.Day) || (u.ToMonth>System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year))))
                                    ||(schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month && schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) || ((schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month - 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                || ((schRoadDetails.ADMIN_IM_MONTH == 12 && System.DateTime.Now.Month == 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))             )) ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadMonitorsFile(\"" +  schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\",\"" + schRoadDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Upload</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    
                                    
                                    
                                    
                                    //(dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) 
                                    //    ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                    //    : "<a href='#' title='Click here to upload report' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                    

                                    //Added condition on 09-05-2022
                                    /* (((( schRoadDetails.ADMIN_IM_MONTH==4) && schRoadDetails.ADMIN_IM_YEAR==2022 && ((System.DateTime.Now.Month==5 && System.DateTime.Now.Day <= 20  && System.DateTime.Now.Year==2022 ) &&  ((schRoadDetails.MAST_STATE_CODE==14 && PMGSYSession.Current.RoleCode == 7)  || PMGSYSession.Current.UserId==7370)) )
                                    ||(schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month && schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) || ((schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month - 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                    || ((schRoadDetails.ADMIN_IM_MONTH == 12 && System.DateTime.Now.Month == 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))) )
                                        ?((dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>" :"<a href='#' title='Click here to upload report' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>")
                                        :((dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"),
                                    */
                                    //Added 13-05-2022
                                    //(((userdata_list.Any(u=>(u.UserId==PMGSYSession.Current.UserId || (u.MAST_STATE_CODE==schRoadDetails.MAST_STATE_CODE && u.RoleCode==PMGSYSession.Current.RoleCode)) && (u.schMonth<=schRoadDetails.ADMIN_IM_MONTH && schRoadDetails.ADMIN_IM_MONTH <=u.ToschMonth) && u.schYear==schRoadDetails.ADMIN_IM_YEAR && ((u.ToMonth==System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year && u.ToDate>=System.DateTime.Now.Day) || (u.ToMonth>System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year))))
                                    //||(schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month && schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) || ((schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month - 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                    //|| ((schRoadDetails.ADMIN_IM_MONTH == 12 && System.DateTime.Now.Month == 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))) )
                                    //    ?((dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>" :"<a href='#' title='Click here to upload report' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>")
                                    //    :((dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"),


                                   // ((DateTime.Compare(System.DateTime.Now.Date, Convert.ToDateTime("12/09/2022"))<0) || (schRoadDetails.IMS_PROPOSAL_TYPE.Equals("L")) || (schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") && schRoadDetails.IMS_ISCOMPLETED.Equals("Maintenance")) ) ?          //commented on 20-09-2022 by Shreyas

                                     ((((userdata_list.Any(u=>(u.UserId==PMGSYSession.Current.UserId || (u.MAST_STATE_CODE==schRoadDetails.MAST_STATE_CODE && u.RoleCode==PMGSYSession.Current.RoleCode)) && (u.schMonth<=schRoadDetails.ADMIN_IM_MONTH && schRoadDetails.ADMIN_IM_MONTH <=u.ToschMonth) && u.schYear==schRoadDetails.ADMIN_IM_YEAR && ((u.ToMonth==System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year && u.ToDate>=System.DateTime.Now.Day) || (u.ToMonth>System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year))))
                                    ||(schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month && schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) || ((schRoadDetails.ADMIN_IM_MONTH == System.DateTime.Now.Month - 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                    || ((schRoadDetails.ADMIN_IM_MONTH == 12 && System.DateTime.Now.Month == 1) && (schRoadDetails.ADMIN_IM_YEAR == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))) )
                                        ?((dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>" :"<a href='#' title='Click here to upload report' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>")
                                        :((dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")),
                                       // : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",                //commented on 20-09-2022 by Shreyas



                                     "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                    //"<span class='ui-icon ui-icon-plusthick ui-align-center' title='Add Financial Progress' onclick='AddTreePlantationDetails("+
                                    //URLEncrypt.EncryptParameters1(new string[] { "ProposalCode =" + schRoadDetails.IMS_PR_ROAD_CODE.ToString() })+");'></span>",
                                    schRoadDetails.IMS_PR_ROAD_CODE.ToString() + "$" + schRoadDetails.QM_OBSERVATION_ID.ToString(),

                                    //added by abhinav pathak on 13-aug-2019
                                   (dbContext.QUALITY_QM_INSPECTION_FILES.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()) ?
                                    (PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7 || PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 9)

                                    ?"<a href='#' title='Click here to view PDF' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFilePDF(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() + ","+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"\"); return false;'>View</a>":
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                        }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Scheduled Road List for NQM/SQM
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="inspMonth"></param>
        /// <param name="inspYear"></param>
        /// <returns></returns>
        public Array GetMonitorsScheduledRoadListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int inspMonth, int inspYear)
        {
            dbContext = new Models.PMGSYEntities();
            Int32 ImageCount = 0;
            try
            {
                //get Current Logged in MonitorID 
                var monitorDetails = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                      where aqm.ADMIN_USER_ID == PMGSYSession.Current.UserId
                                      select aqm).First();

                if (monitorDetails.ADMIN_QM_TYPE.Equals("I"))
                {
                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "NQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }
                else if (monitorDetails.ADMIN_QM_TYPE.Equals("S"))
                {
                    ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());
                }

                List<qm_get_monitor_scheduled_roads_Result> scheduleItemList = new List<qm_get_monitor_scheduled_roads_Result>();

                scheduleItemList = dbContext.qm_get_monitor_scheduled_roads(monitorDetails.ADMIN_QM_CODE, inspMonth, inspYear, monitorDetails.ADMIN_QM_TYPE).ToList<qm_get_monitor_scheduled_roads_Result>();

                totalRecords = scheduleItemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        scheduleItemList = scheduleItemList.OrderByDescending(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).ToList();


                // added on 13-05-2022 by Shreyas Rao
                // allow user to fill for prev month 
                AddXmlFile_User userdata;
                //AddXmlFile_State statedata;
                List<AddXmlFile_User> userdata_list = new List<AddXmlFile_User>();
                //List<AddXmlFile_State> statedata_list = new List<AddXmlFile_State>();


                if (System.IO.File.Exists(System.Web.HttpContext.Current.Server.MapPath("~/AllowUserToInspectRoads_QMS.xml")))
                { // Create a file to write to   
                    XDocument doc = XDocument.Load(System.Web.HttpContext.Current.Server.MapPath("~/AllowUserToInspectRoads_QMS.xml"));

                    foreach (XElement element in doc.Descendants("datainfo")
                        .Descendants("User"))
                    {
                        userdata = new AddXmlFile_User();
                        userdata.UserId = Convert.ToInt32(element.Element("UserId").Value);
                        userdata.MAST_STATE_CODE = Convert.ToInt32(element.Element("MAST_STATE_CODE").Value);
                        userdata.RoleCode = (element.Element("RoleCode").Value).Equals("SQM") ? 7 : ((element.Element("RoleCode").Value).Equals("NQM") ? 8 : 0);
                        userdata.schMonth = Convert.ToInt32(element.Element("schMonth").Value);
                        userdata.ToschMonth = Convert.ToInt32(element.Element("ToschMonth").Value);
                        userdata.schYear = Convert.ToInt32(element.Element("schYear").Value);
                        userdata.ToMonth = Convert.ToInt32(element.Element("ToMonth").Value);
                        userdata.ToYear = Convert.ToInt32(element.Element("ToYear").Value);
                        userdata.ToDate = Convert.ToInt32(element.Element("ToDate").Value);
                        userdata_list.Add(userdata);
                    }
                }



                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.IMS_PR_ROAD_CODE.ToString().Trim(),
                    cell = new[] {
                                        schDetails.STATE_NAME,
                                        schDetails.DISTRICT_NAME,
                                        schDetails.BLOCK_NAME,
                                        schDetails.IMS_PACKAGE_ID,
                                        (schDetails.IMS_YEAR + "-" + (schDetails.IMS_YEAR+1)).ToString(),
                                        schDetails.IMS_ROAD_NAME,
                                        schDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                        schDetails.IMS_PAV_LENGTH.ToString(),
                                        schDetails.IMS_ISCOMPLETED,
                                        schDetails.SCHEDULE_INSPECTION_STATUS.Equals("C") ? "Completed " : (schDetails.SCHEDULE_INSPECTION_STATUS.Equals("P")? "In Progress" :(schDetails.SCHEDULE_INSPECTION_STATUS.Equals("M") ? "Maintenance " : "Not Available")),
                                        schDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                        schDetails.PMGSY_SCHEME,
                                        (schDetails.FINALIZE_FLAG.Trim() == "NQM" || schDetails.FINALIZE_FLAG.Trim() == "SQM")?"Yes":"No",
                                        schDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                        
                                        // For NQM only one observation against road is available,but SQM can inspect road more than once by choosing different chainages.
                                        // Change suggested by - Anand Singh on 26/11/2014 - By Email
                                        /*(monitorDetails.ADMIN_QM_TYPE.Equals("I") 
                                            ?((inspMonth == System.DateTime.Now.Month && inspYear == System.DateTime.Now.Year) || ((inspMonth == System.DateTime.Now.Month - 1) && inspYear == System.DateTime.Now.Year)
                                                || (inspMonth == 12 && inspYear == System.DateTime.Now.Year - 1) 
                                                || (PMGSYSession.Current.UserId == 4680 && inspMonth == 10 && inspYear == 2018)||(PMGSYSession.Current.UserId == 6313)
                                                )
                                                ?
                                                (schDetails.INSP_STATUS_FLAG.Trim() == "UPGF" && ( schDetails.DEVICE_FLAG.Trim() == "N" || schDetails.DEVICE_FLAG.Trim() == "MB"))  
                                                    ?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +                                                         schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>"
                                                    :"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                : "-" 
                                            : "<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>"),
                                        */




                                        /*
                                         * If observation is available for that work upload photo option will be enabled and fill observation will be locked
                                         * For old month schedule 7 day relaxation is given to upload observation and photograph..
                                         * 
                                         *suggested by - Pankaj Sir on 18/02/2022
                                         */

                                    /*
                                        ((monitorDetails.ADMIN_QM_TYPE.Equals("I") || monitorDetails.ADMIN_QM_TYPE.Equals("S") )
                                            ?(  *//*(( inspMonth==1 || inspMonth==2 ||inspMonth==3) && inspYear==2022 && ((System.DateTime.Now.Month==4 && System.DateTime.Now.Day <= 30)||(System.DateTime.Now.Month<=3)) &&System.DateTime.Now.Year==2022)*//*
                                               (( inspMonth==4) && inspYear==2022 && System.DateTime.Now.Month==5 && System.DateTime.Now.Day <= 20 &&System.DateTime.Now.Year==2022 && ((schDetails.MAST_STATE_CODE==14 && PMGSYSession.Current.RoleCode==7 )  || PMGSYSession.Current.UserId==7370))
                                                ||(inspMonth == System.DateTime.Now.Month && inspYear == System.DateTime.Now.Year) || ((inspMonth == System.DateTime.Now.Month - 1) && (inspYear == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                || ((inspMonth == 12 && System.DateTime.Now.Year==1) && (inspYear == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7)) 
                                                //|| (PMGSYSession.Current.UserId == 4680 && inspMonth == 10 && inspYear == 2018)||(PMGSYSession.Current.UserId == 6313)
                                                )
                                                ?
                                                ( !(dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(a => a.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && a.IMS_PR_ROAD_CODE == schDetails.IMS_PR_ROAD_CODE).Select(a => a.QM_OBSERVATION_ID).Any()))  
                                                    ?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +                                                         schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>"
                                                    :"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                : "-" 
                                            : ((schDetails.INSP_STATUS_FLAG.Trim() == "UPGF" && ( schDetails.DEVICE_FLAG.Trim() == "N" || schDetails.DEVICE_FLAG.Trim() == "MB"))  ?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")  ),
                                       
                                        */

                                        
                                        //((monitorDetails.ADMIN_QM_TYPE.Equals("I") || monitorDetails.ADMIN_QM_TYPE.Equals("S") )
                                        //    ?(
                                        //       (userdata_list.Any(u=>(u.UserId==PMGSYSession.Current.UserId || (u.MAST_STATE_CODE==schDetails.MAST_STATE_CODE && u.RoleCode==PMGSYSession.Current.RoleCode)) && (u.schMonth<=schDetails.ADMIN_IM_MONTH && schDetails.ADMIN_IM_MONTH<=u.ToschMonth) && u.schYear==schDetails.ADMIN_IM_YEAR && ((u.ToMonth>=System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year && u.ToDate>=System.DateTime.Now.Day) || (u.ToMonth>System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year) )))
                                        //        ||(inspMonth == System.DateTime.Now.Month && inspYear == System.DateTime.Now.Year) || ((inspMonth == System.DateTime.Now.Month - 1) && (inspYear == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                        //        || ((inspMonth == 12 && System.DateTime.Now.Year==1) && (inspYear == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7)) 
                                        //        //|| (PMGSYSession.Current.UserId == 4680 && inspMonth == 10 && inspYear == 2018)||(PMGSYSession.Current.UserId == 6313)
                                        //        )
                                        //        ?
                                        //        ( !(dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(a => a.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && a.IMS_PR_ROAD_CODE == schDetails.IMS_PR_ROAD_CODE).Select(a => a.QM_OBSERVATION_ID).Any()))
                                        //            ?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" + schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>"
                                        //            :"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        //        : "-"
                                        //    : ((schDetails.INSP_STATUS_FLAG.Trim() == "UPGF" && ( schDetails.DEVICE_FLAG.Trim() == "N" || schDetails.DEVICE_FLAG.Trim() == "MB"))  ?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")  ),

                                        //Edited on 23-11-2022 by Shreyas --passed scedule status as parameter
                                        ((monitorDetails.ADMIN_QM_TYPE.Equals("I") || monitorDetails.ADMIN_QM_TYPE.Equals("S") )
                                            ?(
                                               (userdata_list.Any(u=>(u.UserId==PMGSYSession.Current.UserId || (u.MAST_STATE_CODE==schDetails.MAST_STATE_CODE && u.RoleCode==PMGSYSession.Current.RoleCode)) && (u.schMonth<=schDetails.ADMIN_IM_MONTH && schDetails.ADMIN_IM_MONTH<=u.ToschMonth) && u.schYear==schDetails.ADMIN_IM_YEAR && ((u.ToMonth>=System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year && u.ToDate>=System.DateTime.Now.Day) || (u.ToMonth>System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year) )))
                                                ||(inspMonth == System.DateTime.Now.Month && inspYear == System.DateTime.Now.Year) || ((inspMonth == System.DateTime.Now.Month - 1) && (inspYear == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                || ((inspMonth == 12 && System.DateTime.Now.Month==1) && (inspYear == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7)) 
                                                //|| (PMGSYSession.Current.UserId == 4680 && inspMonth == 10 && inspYear == 2018)||(PMGSYSession.Current.UserId == 6313)
                                                )
                                                ?
                                                ( !(dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(a => a.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && a.IMS_PR_ROAD_CODE == schDetails.IMS_PR_ROAD_CODE).Select(a => a.QM_OBSERVATION_ID).Any()))
                                                    ?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" + schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\",\"" + schDetails.SCHEDULE_INSPECTION_STATUS.ToString().Trim()  +"\"); return false;'>Fill Observations</a>"
                                                    :"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                : "-"
                                            : ((schDetails.INSP_STATUS_FLAG.Trim() == "UPGF" && ( schDetails.DEVICE_FLAG.Trim() == "N" || schDetails.DEVICE_FLAG.Trim() == "MB"))  ?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\",\"" + schDetails.SCHEDULE_INSPECTION_STATUS.ToString().Trim()  +"\"); return false;'>Fill Observations</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")  ),





                                         ((monitorDetails.ADMIN_QM_TYPE.Equals("I")||monitorDetails.ADMIN_QM_TYPE.Equals("S"))
                                             ?(    /*((inspMonth==1 || inspMonth==2 ||inspMonth==3) && inspYear==2022 && ((System.DateTime.Now.Month==4 && System.DateTime.Now.Day <= 30)||(System.DateTime.Now.Month<=3)) &&  System.DateTime.Now.Year==2022)*/
                                               (userdata_list.Any(u=>(u.UserId==PMGSYSession.Current.UserId || (u.MAST_STATE_CODE==schDetails.MAST_STATE_CODE && u.RoleCode==PMGSYSession.Current.RoleCode)) && (u.schMonth<=schDetails.ADMIN_IM_MONTH && schDetails.ADMIN_IM_MONTH<=u.ToschMonth) && u.schYear==schDetails.ADMIN_IM_YEAR && (( u.ToMonth==System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year && u.ToDate>=System.DateTime.Now.Day) || (u.ToMonth>System.DateTime.Now.Month && u.ToYear>=System.DateTime.Now.Year))))
                                                ||(inspMonth == System.DateTime.Now.Month && inspYear == System.DateTime.Now.Year) || ((inspMonth == System.DateTime.Now.Month - 1) && (inspYear == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                || ((inspMonth == 12 && System.DateTime.Now.Month==1) && (inspYear == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7)) 
                                                //|| (PMGSYSession.Current.UserId == 4680 && inspMonth == 10 && inspYear == 2018)
                                                )
                                                ?
                                                (schDetails.NO_OF_PHOTO_UPLOADED < ImageCount &&
                                                dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(a => a.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && a.IMS_PR_ROAD_CODE == schDetails.IMS_PR_ROAD_CODE).Select(a => a.QM_OBSERVATION_ID).Any()
                                                )
                                                    ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadObsFile(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schDetails.IMS_PR_ROAD_CODE.ToString().Trim()+"\",\"" +  dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(a => a.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && a.IMS_PR_ROAD_CODE ==  schDetails.IMS_PR_ROAD_CODE).Select(a => a.QM_OBSERVATION_ID).First().ToString()   +"\"); return false;'>Upload</a>"
                                                    :"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                : "-"
                                            :"Upload from Inspection Details"),
                        }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Assign -- QMFillObservation Details model values
        /// </summary>
        /// <param name="prRoadCode"></param>
        /// <returns></returns>
        public QMFillObservationModel QMFillObservationsDAL(int adminSchCode, int prRoadCode, string roadStatus)   //01-02-2022
        {
            dbContext = new Models.PMGSYEntities();
            //string roadStatus = null;
            try
            {
                QMFillObservationModel fillObservationModel = new QMFillObservationModel();
                //Get Road Status
                var roadDetails = (from isp in dbContext.IMS_SANCTIONED_PROJECTS
                                   where isp.IMS_PR_ROAD_CODE == prRoadCode
                                   select isp).First();

                string qmType = string.Empty;
                if (PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 7) //NQM or CQC
                {
                    qmType = "I";
                }
                //else if (PMGSYSession.Current.RoleCode == 7) //SQM
                //{
                //    qmType = "S";
                //}


                //Default Road Status, as in IMS_SANCTIONED_PROJECTS
                //string roadStatus = roadDetails.IMS_ISCOMPLETED;


                // Activity for Maintenance Roads, In Quality Inspection, 
                // Roads are inspected under categories ----  Completed / In Progress / Maintenance
                // One year after completion, road will be inspected under Maintenance category.
                // If status in IMS_SANCTIONED_PROJECTS is 'C' -- Completed,  'P' -- In Progress
                // Currently Only provision of inspection of roads is provided, in future requirement may come for Bridge Inspection.

                var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                       where qqs.ADMIN_SCHEDULE_CODE == adminSchCode
                                       select qqs).FirstOrDefault();

                string IS_ENQUIRY = (from qsd in dbContext.QUALITY_QM_SCHEDULE_DETAILS
                                     where qsd.IMS_PR_ROAD_CODE == prRoadCode
                                     && qsd.ADMIN_SCHEDULE_CODE == adminSchCode
                                     select qsd.ADMIN_IS_ENQUIRY).FirstOrDefault();

                //For Road proposals
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("P"))                                                              //Commented from here on 24-11-2022
                {
                    //    var execMonthlyProgress = (from erms in dbContext.EXEC_ROADS_MONTHLY_STATUS
                    //                               where erms.IMS_PR_ROAD_CODE == prRoadCode
                    //                               && erms.EXEC_ISCOMPLETED == "C"
                    //                               select erms).FirstOrDefault();

                    //    int execProgressMonth = 0;
                    //    int execProgressYear = 0;
                    //    int diffMonths = 0;
                    //    int diffYears = 0;
                    //    DateTime d1 = new DateTime();
                    //    DateTime d2 = new DateTime();
                    //    if (execMonthlyProgress != null)
                    //    {
                    //        execProgressMonth = execMonthlyProgress.EXEC_PROG_MONTH;
                    //        execProgressYear = execMonthlyProgress.EXEC_PROG_YEAR;

                    //        diffYears = scheduleDetails.ADMIN_IM_YEAR - execProgressYear;
                    //        diffMonths = scheduleDetails.ADMIN_IM_MONTH - execProgressMonth;

                    //        d1 = Convert.ToDateTime(execMonthlyProgress.EXEC_COMPLETION_DATE);
                    //        d2 = Convert.ToDateTime(scheduleDetails.SCHEDULE_DATE);
                    //    }

                    //    // if difference of months is > 12 then, under maintenance.
                    //    // int diff = diffYears * 12 + diffMonths;    //comment on 05-07-2022 by vikky

                    //    double diff = (d2 - d1).TotalDays;       //add on 05-07-2022 by vikky



                    //    if (IS_ENQUIRY == "Y" && roadDetails.IMS_ISCOMPLETED == "P")
                    //    {
                    //        roadStatus = "P";
                    //    }
                    //    else if (IS_ENQUIRY == "Y" && (roadDetails.IMS_ISCOMPLETED == "C" || roadDetails.IMS_ISCOMPLETED == "X"))
                    //    {
                    //        roadStatus = "C";
                    //    }
                    //    else
                    //    {
                    //        if (execMonthlyProgress != null && execMonthlyProgress.EXEC_ISCOMPLETED == "C" && diff >= 365)  //add condition diff >= 365
                    //        {
                    //            roadStatus = "M";   //Maintenance

                    //            //By default PCI of Max segment is taken, On change of Chainage, it should come chainagewise
                    //            fillObservationModel.PCI_LIST = (from mipi in dbContext.MANE_IMS_PCI_INDEX
                    //                                             where mipi.IMS_PR_ROAD_CODE == prRoadCode
                    //                                             && mipi.MANE_PCI_YEAR == (dbContext.MANE_IMS_PCI_INDEX.Where(c => c.IMS_PR_ROAD_CODE == prRoadCode).Select(c => c.MANE_PCI_YEAR).Max())
                    //                                             select mipi).ToList();
                    //        }
                    //        //Added by Anand Singh for Checking completed work
                    //        else if (execMonthlyProgress != null && execMonthlyProgress.EXEC_ISCOMPLETED == "C")
                    //        {
                    //            roadStatus = "C";   //Completed
                    //        }
                    //        else
                    //        {
                    //            roadStatus = roadDetails.IMS_ISCOMPLETED.Equals("G")
                    //                            ? "P"
                    //                            : roadDetails.IMS_ISCOMPLETED.Equals("X")
                    //                                ? "M"
                    //                                : roadDetails.IMS_ISCOMPLETED;   //If road is in agreement then treated as Progress
                    //        }
                    //    }
                    fillObservationModel.IMS_ISCOMPLETED = roadStatus;

                }
                // Bridge Inspections
                else if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    //if (IS_ENQUIRY == "Y" && roadDetails.IMS_ISCOMPLETED == "P")                                            //Commented from here on 24-11-2022
                    //{

                    //    fillObservationModel.IMS_ISCOMPLETED = "P";
                    //}
                    //else if (IS_ENQUIRY == "Y" && (roadDetails.IMS_ISCOMPLETED == "C" || roadDetails.IMS_ISCOMPLETED == "X"))
                    //{

                    //    fillObservationModel.IMS_ISCOMPLETED = "C";
                    //}
                    //else
                    //{

                    //    fillObservationModel.IMS_ISCOMPLETED = roadDetails.IMS_ISCOMPLETED.Equals("G") ? "P" : roadDetails.IMS_ISCOMPLETED.Equals("X") ? "M" : roadDetails.IMS_ISCOMPLETED;   //If bridge is in agreement then treated as Progress
                    //}
                    ///Changes by SAMMED A. PATIL on 30AUG2017 
                    fillObservationModel.IMS_ISCOMPLETED = roadStatus;
                    roadStatus = roadDetails.IMS_PROPOSAL_TYPE;

                    fillObservationModel.IMS_BRIDGE_NAME = roadDetails.IMS_BRIDGE_NAME;
                    fillObservationModel.IMS_BRIDGE_LENGTH = roadDetails.IMS_BRIDGE_LENGTH;

                }


                List<qm_monitor_master_grade_items_Result> itemList = new List<qm_monitor_master_grade_items_Result>();
                itemList = dbContext.qm_monitor_master_grade_items(roadStatus, qmType).ToList<qm_monitor_master_grade_items_Result>();
                fillObservationModel.MASTER_GRADE_ITEM_LIST = itemList;

                //For LSB - If status is Completed, Then skip 1st Item from List. Else All Items
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    //if (fillObservationModel.IMS_ISCOMPLETED.Equals("C"))   //Completed LSB
                    //{
                    //    fillObservationModel.MASTER_GRADE_ITEM_LIST.RemoveAt(0);
                    //}
                }

                fillObservationModel.SCHEDULE_MONTH_YEAR = new CommonFunctions().getMonthText(Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH)) + " " + scheduleDetails.ADMIN_IM_YEAR.ToString();
                fillObservationModel.MAX_MAIN_ITEM_COUNT = (from list in itemList select list.MAST_ITEM_CODE).Max();
                fillObservationModel.FROM_ROAD_LENGTH = 0;
                fillObservationModel.TO_ROAD_LENGTH = roadDetails.IMS_PROPOSAL_TYPE.Equals("L") ? Convert.ToDecimal(roadDetails.IMS_BRIDGE_LENGTH) : roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PROPOSAL_TYPE.Equals("L") ? Convert.ToDecimal(roadDetails.IMS_BRIDGE_LENGTH) : roadDetails.IMS_PAV_LENGTH;

                fillObservationModel.CURRENT_DATE = DateTime.Now.ToString("dd/MM/yyyy");
                fillObservationModel.STATE_NAME = roadDetails.MASTER_STATE.MAST_STATE_NAME;
                fillObservationModel.DISTRICT_NAME = roadDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME;
                fillObservationModel.IMS_PACKAGE_ID = roadDetails.IMS_PACKAGE_ID;
                fillObservationModel.IMS_YEAR = roadDetails.IMS_YEAR + "-" + (roadDetails.IMS_YEAR + 1);
                fillObservationModel.IMS_ROAD_NAME = roadDetails.IMS_ROAD_NAME;

                fillObservationModel.IMS_PROPOSAL_TYPE = roadDetails.IMS_PROPOSAL_TYPE;

                return fillObservationModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        public string QMSaveObservationsDAL(FormCollection formCollection)
        {
            dbContext = new Models.PMGSYEntities();
            var created = false;
            //string ErrorMessage = "Error Occurred";

            using (var transaction = new TransactionScope())
            {
                try
                {
                    string qmType = string.Empty;

                    int adminSchCode = Convert.ToInt32(formCollection["ADMIN_SCHEDULE_CODE"]);
                    int imsPrRoadCode = Convert.ToInt32(formCollection["IMS_PR_ROAD_CODE"]);
                    DateTime inspDate = new CommonFunctions().GetStringToDateTime(formCollection["QM_INSPECTION_DATE"].Trim());
                    Decimal startChain = Convert.ToDecimal(formCollection["FROM_ROAD_LENGTH"]);
                    Decimal endChain = Convert.ToDecimal(formCollection["TO_ROAD_LENGTH"]);

                    if (PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 7) //For NQM or CQC or SQM
                    {
                        qmType = "I";
                    }
                    //else if (PMGSYSession.Current.RoleCode == 7) //SQM
                    //{
                    //    qmType = "S";

                    //    if (dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(c => c.ADMIN_SCHEDULE_CODE == adminSchCode &&
                    //                                                          c.IMS_PR_ROAD_CODE == imsPrRoadCode &&
                    //        //c.QM_INSPECTION_DATE == inspDate &&
                    //                                                          c.QM_INSPECTED_START_CHAINAGE == startChain &&
                    //                                                          c.QM_INSPECTED_END_CHAINAGE == endChain
                    //                                                    ).Any())
                    //    {
                    //        return "Observation already entered for same Road for same Chainage. Please enter different Chainage.";
                    //    }
                    //}



                    //------ Save Details to OBSERVATION_MASTER
                    QUALITY_QM_OBSERVATION_MASTER quality_qm_observation_master = new QUALITY_QM_OBSERVATION_MASTER();
                    Int32? MaxID;
                    if (!dbContext.QUALITY_QM_OBSERVATION_MASTER.Any())
                    {
                        MaxID = 0;
                    }
                    else
                    {
                        MaxID = (from c in dbContext.QUALITY_QM_OBSERVATION_MASTER select (Int32?)c.QM_OBSERVATION_ID ?? 0).Max();
                    }

                    quality_qm_observation_master.QM_OBSERVATION_ID = Convert.ToInt32(MaxID) + 1;
                    quality_qm_observation_master.ADMIN_SCHEDULE_CODE = adminSchCode;
                    quality_qm_observation_master.IMS_PR_ROAD_CODE = imsPrRoadCode;
                    quality_qm_observation_master.QM_INSPECTION_DATE = inspDate;
                    quality_qm_observation_master.QM_OBS_UPLOAD_DATE = DateTime.Now;

                    quality_qm_observation_master.QM_INSPECTED_START_CHAINAGE = startChain;
                    quality_qm_observation_master.QM_INSPECTED_END_CHAINAGE = endChain;
                    quality_qm_observation_master.QM_ROAD_STATUS = formCollection["IMS_ISCOMPLETED"];

                    //Default set as 30 days
                    quality_qm_observation_master.QM_LOCK_DAY = 30;
                    quality_qm_observation_master.QM_ATR_STATUS = "N";

                    //-----------------------------------------------------------------------

                    //--- Save Grading Details To OBSERVATION_DETAIL-----------------------

                    List<qm_monitor_master_grade_items_Result> itemList = new List<qm_monitor_master_grade_items_Result>();
                    if (formCollection["IMS_PROPOSAL_TYPE"].Equals("P"))
                    {
                        itemList = dbContext.qm_monitor_master_grade_items(formCollection["IMS_ISCOMPLETED"], qmType).ToList<qm_monitor_master_grade_items_Result>();
                    }
                    else
                    {
                        itemList = dbContext.qm_monitor_master_grade_items(formCollection["IMS_PROPOSAL_TYPE"], qmType).ToList<qm_monitor_master_grade_items_Result>();
                    }
                    string ItemID = string.Empty;
                    string ItemValue = string.Empty;
                    string overAllGrade = string.Empty;
                    string RemarksID = string.Empty;
                    string Remarks = string.Empty;

                    if (itemList.Count != 0)        //If No. of Items count is greater than 0 then only allow to save whole record else return Error
                    {
                        if (formCollection["IMS_PROPOSAL_TYPE"].Equals("P"))
                        {
                            //if ((PMGSYSession.Current.RoleCode == 6 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P"))) || (PMGSYSession.Current.RoleCode == 9 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P")))) //For NQM or CQC for Completed or Inprogress Road
                            if ((PMGSYSession.Current.RoleCode == 6 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P"))) || (PMGSYSession.Current.RoleCode == 9 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P"))) || (PMGSYSession.Current.RoleCode == 7 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P")))) //For NQM or CQC or SQM for Completed or Inprogress Road
                            {
                                foreach (var item in itemList)
                                {
                                    //if (item.MAST_ITEM_STATUS.Equals("O"))
                                    //{
                                    //    ItemID = "hiddenitem" + item.NO_OF_ITEM;
                                    //    RemarksID = string.Empty;
                                    //    overAllGrade = formCollection[ItemID];

                                    //    if (Convert.ToInt32(overAllGrade) == 4)
                                    //    {
                                    //        return ("Please select atleast one of the grading items.");
                                    //    }

                                    //    //Set Overall Grade to Observation Master
                                    //    quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                                    //}
                                    if (item.MAST_ITEM_STATUS.Equals("C") && item.MAST_ITEM_NO == 364)  //edited on 03-02-2022 
                                    {
                                        ItemID = "hiddenitem" + item.NO_OF_ITEM;
                                        RemarksID = string.Empty;
                                        overAllGrade = formCollection[ItemID];

                                        if (Convert.ToInt32(overAllGrade) == 4)
                                        {
                                            return ("Please select atleast one of the grading items.");
                                        }

                                        //Set Overall Grade to Observation Master
                                        quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                                    }
                                    else if (item.MAST_ITEM_STATUS.Equals("P") && item.MAST_ITEM_NO == 438)  //edited on 03-02-2022 
                                    {
                                        ItemID = "hiddenitem" + item.NO_OF_ITEM;
                                        RemarksID = string.Empty;
                                        overAllGrade = formCollection[ItemID];

                                        if (Convert.ToInt32(overAllGrade) == 4)
                                        {
                                            return ("Please select atleast one of the grading items.");
                                        }

                                        //Set Overall Grade to Observation Master
                                        quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                                    }
                                    else if (item.MAST_SUB_ITEM_CODE == 0)
                                    {
                                        ItemID = "hiddenitem" + item.MAST_ITEM_CODE;
                                        RemarksID = string.Empty;
                                    }
                                    else
                                    {
                                        ItemID = "subitem" + item.MAST_ITEM_CODE + item.MAST_SUB_ITEM_CODE;
                                        RemarksID = "remarks" + item.MAST_ITEM_CODE + item.MAST_SUB_ITEM_CODE;
                                    }

                                    ItemValue = formCollection[ItemID];
                                    Remarks = formCollection[RemarksID];

                                    QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = new QUALITY_QM_OBSERVATION_DETAIL();
                                    qm_observation_detail.QM_OBSERVATION_ID = Convert.ToInt32(MaxID) + 1;
                                    qm_observation_detail.MAST_ITEM_NO = item.MAST_ITEM_NO;
                                    qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);
                                    qm_observation_detail.MAST_GRADE_CODE_UPGRADE = null;
                                    qm_observation_detail.REMARKS = (Remarks != null ? (Remarks.Trim() == string.Empty ? null : Remarks.Trim()) : null);

                                    //Added By Abhishek Kamble 30-Nov-2013
                                    qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                                    qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];


                                    dbContext.QUALITY_QM_OBSERVATION_DETAIL.Add(qm_observation_detail);
                                }

                            }
                            /*else if (PMGSYSession.Current.RoleCode == 7 && (formCollection["IMS_ISCOMPLETED"].Equals("C") || formCollection["IMS_ISCOMPLETED"].Equals("P")))        //For SQM for Completed or Inprogress Road
                            {
                                foreach (var item in itemList)
                                {
                                    //if (item.MAST_ITEM_STATUS.Equals("O"))
                                    //{
                                    //    ItemID = "overAllGrade";
                                    //    RemarksID = string.Empty;
                                    //    overAllGrade = formCollection[ItemID];

                                    //    if (Convert.ToInt32(overAllGrade) == 4)
                                    //    {
                                    //        return ("Please select atleast one of the grading items.");
                                    //    }

                                    //    //Set Overall Grade to Observation Master
                                    //    quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);

                                    //}

                                    if (item.MAST_ITEM_STATUS.Equals("C") && item.MAST_ITEM_NO == 364)  //edited on 03-02-2022 
                                    {
                                        ItemID = "hiddenitem" + item.NO_OF_ITEM;
                                        RemarksID = string.Empty;
                                        overAllGrade = formCollection[ItemID];

                                        if (Convert.ToInt32(overAllGrade) == 4)
                                        {
                                            return ("Please select atleast one of the grading items.");
                                        }

                                        //Set Overall Grade to Observation Master
                                        quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                                    }
                                    else if (item.MAST_ITEM_STATUS.Equals("P") && item.MAST_ITEM_NO == 438)  //edited on 03-02-2022 
                                    {
                                        ItemID = "hiddenitem" + item.NO_OF_ITEM;
                                        RemarksID = string.Empty;
                                        overAllGrade = formCollection[ItemID];

                                        if (Convert.ToInt32(overAllGrade) == 4)
                                        {
                                            return ("Please select atleast one of the grading items.");
                                        }

                                        //Set Overall Grade to Observation Master
                                        quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                                    }

                                    else
                                    {
                                        ItemID = "optItem" + item.MAST_SUB_ITEM_CODE;
                                        RemarksID = "remarks" + item.MAST_SUB_ITEM_CODE;
                                    }

                                    if (item.MAST_SUB_ITEM_CODE != 0) //It is SQM ITEMS, so exclude it
                                    {
                                        ItemValue = formCollection[ItemID];
                                        Remarks = formCollection[RemarksID];

                                        QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = new QUALITY_QM_OBSERVATION_DETAIL();
                                        qm_observation_detail.QM_OBSERVATION_ID = Convert.ToInt32(MaxID) + 1;
                                        qm_observation_detail.MAST_ITEM_NO = item.MAST_ITEM_NO;
                                        qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);
                                        qm_observation_detail.MAST_GRADE_CODE_UPGRADE = null;
                                        qm_observation_detail.REMARKS = (Remarks != null ? (Remarks.Trim() == string.Empty ? null : Remarks.Trim()) : null);

                                        //Added By Abhishek Kamble 30-Nov-2013
                                        qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                                        qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                                        dbContext.QUALITY_QM_OBSERVATION_DETAIL.Add(qm_observation_detail);
                                    }
                                }
                            }*/
                            else if (formCollection["IMS_ISCOMPLETED"].Equals("M"))        //For NQM / CQC / SQM Maintenance Road
                            {                                                              // In future, if Items differ for NQM/SQM, compare Session RoleCode & do Appropriate Changes to save Grading
                                foreach (var item in itemList)
                                {
                                    if (item.MAST_SUB_ITEM_CODE == 7)
                                    {
                                        ItemID = "overAllGrade";
                                        RemarksID = string.Empty;
                                        overAllGrade = formCollection[ItemID];

                                        if (Convert.ToInt32(overAllGrade) == 4)
                                        {
                                            return ("Please select atleast one of the grading items.");
                                        }

                                        //Set Overall Grade to Observation Master
                                        quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                                    }
                                    else
                                    {
                                        ItemID = "optItem" + item.MAST_SUB_ITEM_CODE;
                                        RemarksID = "remarks" + item.MAST_SUB_ITEM_CODE;
                                    }

                                    ItemValue = formCollection[ItemID];
                                    Remarks = formCollection[RemarksID];

                                    QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = new QUALITY_QM_OBSERVATION_DETAIL();
                                    qm_observation_detail.QM_OBSERVATION_ID = Convert.ToInt32(MaxID) + 1;
                                    qm_observation_detail.MAST_ITEM_NO = item.MAST_ITEM_NO;
                                    qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);
                                    qm_observation_detail.MAST_GRADE_CODE_UPGRADE = null;
                                    qm_observation_detail.REMARKS = (Remarks != null ? (Remarks.Trim() == string.Empty ? null : Remarks.Trim()) : null);

                                    //Added By Abhishek Kamble 30-Nov-2013
                                    qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                                    qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                                    dbContext.QUALITY_QM_OBSERVATION_DETAIL.Add(qm_observation_detail);
                                }
                            }
                        }
                        else
                        {
                            //if (formCollection["IMS_ISCOMPLETED"].Equals("C"))              //For Bridge - (Completed Road), One Item is less.
                            //{
                            //    itemList.RemoveAt(0);
                            //}

                            foreach (var item in itemList)
                            {
                                if (item.MAST_ITEM_CODE == 10)
                                {
                                    //ItemID = "hiddenitem18";
                                    ItemID = "hiddenitem" + item.NO_OF_ITEM;
                                    RemarksID = string.Empty;
                                    overAllGrade = formCollection[ItemID];

                                    if (Convert.ToInt32(overAllGrade) == 4)
                                    {
                                        return ("Please select atleast one of the grading items.");
                                    }

                                    //Set Overall Grade to Observation Master
                                    quality_qm_observation_master.QM_OVERALL_GRADE = Convert.ToByte(overAllGrade);
                                }
                                else if (item.MAST_SUB_ITEM_CODE == 0)
                                {
                                    if (item.MAST_ITEM_CODE == 1 || item.MAST_ITEM_CODE == 2 || item.MAST_ITEM_CODE == 3 || item.MAST_ITEM_CODE == 4 || item.MAST_ITEM_CODE == 5 || item.MAST_ITEM_CODE == 7 || item.MAST_ITEM_CODE == 6 || item.MAST_ITEM_CODE == 8)
                                    {
                                        ItemID = "hiddenitem" + item.MAST_ITEM_CODE;
                                        RemarksID = string.Empty;
                                    }
                                    else
                                    {
                                        ItemID = "optItem" + item.MAST_ITEM_CODE;
                                        RemarksID = "remarks" + item.MAST_ITEM_CODE;
                                    }
                                }
                                else
                                {
                                    ItemID = "subitem" + item.MAST_ITEM_CODE + item.MAST_SUB_ITEM_CODE;
                                    RemarksID = "remarks" + item.MAST_ITEM_CODE + item.MAST_SUB_ITEM_CODE;
                                }
                                string mastcode = formCollection["BearingCode"];
                                ItemValue = formCollection[ItemID];
                                Remarks = formCollection[RemarksID];

                                QUALITY_QM_OBSERVATION_DETAIL qm_observation_detail = new QUALITY_QM_OBSERVATION_DETAIL();
                                qm_observation_detail.QM_OBSERVATION_ID = Convert.ToInt32(MaxID) + 1;
                                qm_observation_detail.MAST_ITEM_NO = item.MAST_ITEM_NO;
                                //if (item.MAST_ITEM_NO == 122 || item.MAST_ITEM_NO == 141 || item.MAST_ITEM_NO == 151 || item.MAST_ITEM_NO == 165)
                                //{
                                //    qm_observation_detail.MAST_GRADE_CODE = 4;
                                //}
                                if (item.MAST_ITEM_NO == 267 || item.MAST_ITEM_NO == 282)
                                {
                                    qm_observation_detail.MAST_GRADE_CODE = 4;
                                }



                                else
                                {
                                    qm_observation_detail.MAST_GRADE_CODE = Convert.ToInt32(ItemValue);
                                }
                                qm_observation_detail.MAST_GRADE_CODE_UPGRADE = null;
                                qm_observation_detail.REMARKS = (Remarks != null ? (Remarks.Trim() == string.Empty ? null : Remarks.Trim()) : null);

                                //Added By Abhishek Kamble 30-Nov-2013
                                qm_observation_detail.USERID = PMGSYSession.Current.UserId;
                                qm_observation_detail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                //
                                //if (item.MAST_ITEM_NO == 122 || item.MAST_ITEM_NO == 151)
                                //{
                                //    qm_observation_detail.MAST_BEARING_CODE = Convert.ToInt32(formCollection["BearingCode"]);
                                //}
                                if (item.MAST_ITEM_NO == 267)
                                {
                                    qm_observation_detail.MAST_BEARING_CODE = Convert.ToInt32(formCollection["BearingCode"]);
                                }
                                else
                                {
                                    qm_observation_detail.MAST_BEARING_CODE = null;
                                }
                                dbContext.QUALITY_QM_OBSERVATION_DETAIL.Add(qm_observation_detail);

                            }
                        }

                        //-----------------------------------------------------------------------

                        //------Update Flag of Inspection as Completed
                        QUALITY_QM_SCHEDULE_DETAILS qmScheduleDetails = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Find(Convert.ToInt32(formCollection["ADMIN_SCHEDULE_CODE"]),
                                                                                                                Convert.ToInt32(formCollection["IMS_PR_ROAD_CODE"]));
                        qmScheduleDetails.INSP_STATUS_FLAG = "C";
                        if (qmScheduleDetails.DEVICE_FLAG.Equals("N"))
                        {
                            qmScheduleDetails.DEVICE_FLAG = "W";
                        }
                        else if (qmScheduleDetails.DEVICE_FLAG.Equals("MB"))
                        {
                            //Update OBSERVATION ID in INSPECTION_FILE table (REMAINED)
                            qmScheduleDetails.DEVICE_FLAG = "MBW";
                        }

                        //Added By Abhishek Kamble 30-Nov-2013
                        quality_qm_observation_master.USERID = PMGSYSession.Current.UserId;
                        quality_qm_observation_master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        //Added By Abhishek Kamble 30-Nov-2013
                        qmScheduleDetails.USERID = PMGSYSession.Current.UserId;
                        qmScheduleDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.QUALITY_QM_OBSERVATION_MASTER.Add(quality_qm_observation_master);
                        dbContext.Entry(qmScheduleDetails).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();
                        //-----------------------------------------------------------------------

                        created = true;
                        transaction.Complete();

                    } //if for ItemList.Count ends here
                    else
                    {
                        created = false;
                    }

                }
                catch (DbEntityValidationException dbEx)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);

                            //using (StreamWriter sw = File.AppendText(Path.Combine("E:\\OMMASErrorLog.txt","")))
                            //{
                            //    sw.WriteLine("Date :" + DateTime.Now.ToString());
                            //    sw.WriteLine("Method : " + "QMSaveObservationsDAL()");
                            //    sw.WriteLine("Exception : " + validationError.ErrorMessage);
                            //    sw.WriteLine("---------------------------------------------------------------------------------------");
                            //    sw.Close();
                            //}
                        }
                    }
                }
                catch (DbUpdateException dbex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(dbex, HttpContext.Current);
                    created = false;
                    //using (StreamWriter sw = File.AppendText(Path.Combine("E:\\OMMASErrorLog.txt","")))
                    //{
                    //    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    //    sw.WriteLine("Method : " + "QMSaveObservationsDAL()");
                    //    sw.WriteLine("Exception : " + dbex.Message);
                    //    sw.WriteLine("---------------------------------------------------------------------------------------");
                    //    sw.Close();
                    //}
                }
                catch (OptimisticConcurrencyException ocex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ocex, HttpContext.Current);
                    //using (StreamWriter sw = File.AppendText(Path.Combine("E:\\OMMASErrorLog.txt","")))
                    //{
                    //    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    //    sw.WriteLine("Method : " + "QMSaveObservationsDAL()");
                    //    sw.WriteLine("Exception : " + ocex.Message);
                    //    sw.WriteLine("---------------------------------------------------------------------------------------");
                    //    sw.Close();
                    //}
                    created = false;
                }
                catch (Exception ex)
                {
                    Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                    //using (StreamWriter sw = File.AppendText(Path.Combine("E:\\OMMASErrorLog.txt","")))
                    //{
                    //    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    //    sw.WriteLine("Method : " + "QMSaveObservationsDAL()");
                    //    sw.WriteLine("Exception : " + ex.Message);
                    //    sw.WriteLine("---------------------------------------------------------------------------------------");
                    //    sw.Close();
                    //}
                    created = false;
                }
                finally
                {
                    dbContext.Dispose();
                }

            }

            if (created == true)
            {
                return string.Empty;
            }
            else
            {
                return ("An Error Occurred While Processing Your Request.");
            }
        }


        /// <summary>
        /// Get Tour Details
        /// </summary>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public QMTourViewModel GetTourDetailsDAL(int scheduleCode)
        {
            dbContext = new Models.PMGSYEntities();
            QMTourViewModel model = new QMTourViewModel();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                if (dbContext.QUALITY_QM_TOUR_DETAILS.Where(c => c.ADMIN_SCHEDULE_CODE == scheduleCode).Any())
                {
                    var tourDetails = (from qqtd in dbContext.QUALITY_QM_TOUR_DETAILS
                                       where qqtd.ADMIN_SCHEDULE_CODE == scheduleCode
                                       select qqtd).First();

                    model.IsAlreadyEntered = true;
                    model.FlightArrivalDate = objCommon.GetDateTimeToString(tourDetails.FLIGHT_ARRIVAL_DATE);
                    model.FlightDepartureDate = objCommon.GetDateTimeToString(tourDetails.FLIGHT_DEPARTURE_DATE);
                    model.FlightArrivalTime = (tourDetails.FLIGHT_ARRIVAL_DATE).ToString().Split(' ')[1].Substring(0, 5);
                    model.FlightDepartureTime = (tourDetails.FLIGHT_DEPARTURE_DATE).ToString().Split(' ')[1].Substring(0, 5);
                }
                else
                {
                    model.IsAlreadyEntered = false;
                    model.FlightArrivalDate = objCommon.GetDateTimeToString(DateTime.Now);
                    model.FlightDepartureDate = objCommon.GetDateTimeToString(DateTime.Now);
                    model.FlightArrivalTime = "0:00";
                    model.FlightDepartureTime = "0:00";
                }

                var schDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                  where qqs.ADMIN_SCHEDULE_CODE == scheduleCode
                                  select qqs).First();

                model.ScheduleMonthYearStartDate = "01/" + (schDetails.ADMIN_IM_MONTH < 10 ? ("0" + schDetails.ADMIN_IM_MONTH) : schDetails.ADMIN_IM_MONTH.ToString()) + "/" + schDetails.ADMIN_IM_YEAR;
                model.CurrentDate = objCommon.GetDateTimeToString(DateTime.Now);

                var monitorDetails = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                      where aqm.ADMIN_QM_CODE == schDetails.ADMIN_QM_CODE
                                      select aqm
                                         ).First();

                model.MonitorName = monitorDetails.ADMIN_QM_FNAME + " " + (monitorDetails.ADMIN_QM_MNAME == null ? "" : monitorDetails.ADMIN_QM_MNAME) + " " + (monitorDetails.ADMIN_QM_LNAME == null ? "" : monitorDetails.ADMIN_QM_LNAME);
                model.InspMonthYear = objCommon.getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR.ToString();
                model.StateName = dbContext.MASTER_STATE.Where(c => c.MAST_STATE_CODE == schDetails.MAST_STATE_CODE).Select(c => c.MAST_STATE_NAME).First();
                model.DistrictName1 = dbContext.MASTER_DISTRICT.Where(c => c.MAST_DISTRICT_CODE == schDetails.MAST_DISTRICT_CODE).Select(c => c.MAST_DISTRICT_NAME).First();
                model.DistrictName2 = dbContext.MASTER_DISTRICT.Where(c => c.MAST_DISTRICT_CODE == schDetails.MAST_DISTRICT_CODE2).Select(c => c.MAST_DISTRICT_NAME).FirstOrDefault();
                model.DistrictName3 = dbContext.MASTER_DISTRICT.Where(c => c.MAST_DISTRICT_CODE == schDetails.MAST_DISTRICT_CODE3).Select(c => c.MAST_DISTRICT_NAME).FirstOrDefault();

                model.StateName = model.StateName + " " + "( " + model.DistrictName1 + (model.DistrictName2 == null ? "" : (" ," + model.DistrictName2)) + (model.DistrictName3 == null ? "" : (" ," + model.DistrictName3)) + " )";
                model.RoleCode = PMGSYSession.Current.RoleCode;
                return model;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Save Tour Details for Monitor
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public string SaveTourDetailsDAL(QMTourViewModel model)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                Int32? MaxID;
                if (!dbContext.QUALITY_QM_TOUR_DETAILS.Any())
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.QUALITY_QM_TOUR_DETAILS select (Int32?)c.TOUR_ID ?? 0).Max();
                }

                model.FlightArrivalDate = model.FlightArrivalDate + " " + model.FlightArrivalTime;
                model.FlightDepartureDate = model.FlightDepartureDate + " " + model.FlightDepartureTime;

                QUALITY_QM_TOUR_DETAILS objTourDetails = new QUALITY_QM_TOUR_DETAILS();
                objTourDetails.TOUR_ID = Convert.ToInt32(MaxID) + 1;
                objTourDetails.ADMIN_SCHEDULE_CODE = model.AdminScheduleCode;

                string[] formats = { "dd/MM/yyyy H:mm" };
                objTourDetails.FLIGHT_ARRIVAL_DATE = DateTime.ParseExact(model.FlightArrivalDate, formats, new CultureInfo("en-US"), DateTimeStyles.None);
                objTourDetails.FLIGHT_DEPARTURE_DATE = DateTime.ParseExact(model.FlightDepartureDate, formats, new CultureInfo("en-US"), DateTimeStyles.None);
                objTourDetails.IS_FINALIZED = "N";
                objTourDetails.USERID = PMGSYSession.Current.UserId;
                objTourDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.QUALITY_QM_TOUR_DETAILS.Add(objTourDetails);
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        //ModelState.AddModelError("", eve.ValidationErrors.ToString());
                    }
                }
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Tour Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="state"></param>
        /// <param name="qmCode"></param>
        /// <param name="frmMonth"></param>
        /// <param name="frmYear"></param>
        /// <param name="toMonth"></param>
        /// <param name="toYear"></param>
        /// <returns></returns>
        public Array GetTourListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int state, int qmCode, int frmMonth, int frmYear, int toMonth, int toYear)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                List<USP_QM_MONITOR_TOUR_REPORT_Result> itemList = new List<USP_QM_MONITOR_TOUR_REPORT_Result>();

                if (PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7) // NQM or SQM
                {
                    qmCode = dbContext.ADMIN_QUALITY_MONITORS.Where(c => c.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(c => c.ADMIN_QM_CODE).First();
                    state = PMGSYSession.Current.StateCode;
                }

                itemList = dbContext.USP_QM_MONITOR_TOUR_REPORT(state, qmCode, frmMonth, frmYear, toMonth, toYear).ToList<USP_QM_MONITOR_TOUR_REPORT_Result>();

                totalRecords = itemList.Count();

                //if (PMGSYSession.Current.RoleCode == 5)
                if (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 5)
                {
                    itemList = itemList.Where(c => c.IS_FINALIZED.Equals("Y")).ToList();  //only finalized records will be shown to CQCAdmin
                    return itemList.Select(item => new
                    {

                        id = item.TOUR_ID.ToString().Trim(),
                        cell = new[] {
                                        item.MONITOR_NAME,
                                        item.MAST_STATE_NAME,
                                        objCommon.getMonthText(Convert.ToInt16(item.ADMIN_IM_MONTH)) + " " + item.ADMIN_IM_YEAR,
                                        item.FLIGHT_ARRIVAL_DATE,
                                        item.FLIGHT_DEPARTURE_DATE,
                                        item.DISTRICT_NAME1 + (item.DISTRICT_NAME2 == null ? "" : (" ," + item.DISTRICT_NAME2)) + (item.DISTRICT_NAME3 == null ? "" : (" ," + item.DISTRICT_NAME3)),

                                        //item.TOUR_EXPENDITURE.HasValue ? item.TOUR_EXPENDITURE.ToString() : "0",
                                        //item.TOUR_REPORT,
                                        //item.TOUR_SUBMISSION_DATE.HasValue ? item.TOUR_SUBMISSION_DATE.Value.ToString("dd/MM/yyyy") : "-",

                                        "<a href='#' title='Click here to DeFinalize Details' class='ui-icon ui-icon-locked ui-align-center' onClick='QMDeFinalizeTourDetails(\"" +  item.TOUR_ID.ToString().Trim()  +"\"); return false;'></a>"
                        }
                    }).ToArray();
                }
                else
                {
                    return itemList.Select(item => new
                    {

                        id = item.TOUR_ID.ToString().Trim(),
                        cell = new[] {
                                        item.MAST_STATE_NAME,
                                        objCommon.getMonthText(Convert.ToInt16(item.ADMIN_IM_MONTH)) + " " + item.ADMIN_IM_YEAR,
                                        item.FLIGHT_ARRIVAL_DATE,
                                        item.FLIGHT_DEPARTURE_DATE,
                                        item.DISTRICT_NAME1 + (item.DISTRICT_NAME2 == null ? "" : (" ," + item.DISTRICT_NAME2)) + (item.DISTRICT_NAME3 == null ? "" : (" ," + item.DISTRICT_NAME3)),

                                        item.TOUR_EXPENDITURE.HasValue ? item.TOUR_EXPENDITURE.ToString() : "0",
                                        item.TOUR_REPORT == null ? "-" : URLEncrypt.EncryptParameters(new string[] { item.TOUR_REPORT  }),
                                        item.TOUR_SUBMISSION_DATE.HasValue ? item.TOUR_SUBMISSION_DATE.Value.ToString("dd/MM/yyyy") : "-",

                                        item.IS_FINALIZED.Equals("N")
                                                ?"<a href='#' title='Click here to Update Details' class='ui-icon ui-icon-pencil ui-align-center' onClick='QMUpdateTourDetails(\"" +  item.TOUR_ID.ToString().Trim()  +"\"); return false;'></a>"
                                                :"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                       item.IS_FINALIZED.Equals("N")
                                                ?"<a href='#' title='Click here to Delete Details' class='ui-icon ui-icon-trash ui-align-center' onClick='QMDeleteTourDetails(\"" +  item.TOUR_ID.ToString().Trim()  +"\"); return false;'></a>"
                                                :"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                        (item.IS_FINALIZED.Equals("N") && item.TOUR_EXPENDITURE.HasValue && item.TOUR_SUBMISSION_DATE.HasValue && item.TOUR_REPORT != null)
                                            ?"<a href='#' title='Click here to Finalize Details' class='ui-icon ui-icon-unlocked ui-align-center' onClick='QMFinalizeTourDetails(\"" +  item.TOUR_ID.ToString().Trim()  +"\"); return false;'></a>"
                                            : item.IS_FINALIZED.Equals("Y") ? "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" : "-"
                        }
                    }).ToArray();
                }
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Tour Details by Tour ID
        /// </summary>
        /// <param name="tourId"></param>
        /// <returns></returns>
        public QMTourViewModel GetTourDetailsForUpdateDAL(int tourId)
        {
            dbContext = new Models.PMGSYEntities();
            QMTourViewModel model = new QMTourViewModel();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {

                var tourDetails = (from qqtd in dbContext.QUALITY_QM_TOUR_DETAILS
                                   where qqtd.TOUR_ID == tourId
                                   select qqtd).First();

                model.IsAlreadyEntered = true;
                model.AdminScheduleCode = tourDetails.ADMIN_SCHEDULE_CODE;
                model.FlightArrivalDate = objCommon.GetDateTimeToString(tourDetails.FLIGHT_ARRIVAL_DATE);
                model.FlightDepartureDate = objCommon.GetDateTimeToString(tourDetails.FLIGHT_DEPARTURE_DATE);
                model.FlightArrivalTime = (tourDetails.FLIGHT_ARRIVAL_DATE).ToString().Split(' ')[1].Substring(0, 5);
                model.FlightDepartureTime = (tourDetails.FLIGHT_DEPARTURE_DATE).ToString().Split(' ')[1].Substring(0, 5);

                model.totExpenditure = Convert.ToInt32(tourDetails.TOUR_EXPENDITURE);
                model.tourSubmissionDate = tourDetails.TOUR_SUBMISSION_DATE.HasValue ? objCommon.GetDateTimeToString(tourDetails.TOUR_SUBMISSION_DATE.Value) : "";

                var schDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                  where qqs.ADMIN_SCHEDULE_CODE == tourDetails.ADMIN_SCHEDULE_CODE
                                  select qqs).First();

                model.ScheduleMonthYearStartDate = "01/" + (schDetails.ADMIN_IM_MONTH < 10 ? ("0" + schDetails.ADMIN_IM_MONTH) : schDetails.ADMIN_IM_MONTH.ToString()) + "/" + schDetails.ADMIN_IM_YEAR;
                model.CurrentDate = objCommon.GetDateTimeToString(DateTime.Now);

                var monitorDetails = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                      where aqm.ADMIN_QM_CODE == schDetails.ADMIN_QM_CODE
                                      select aqm
                                         ).First();

                model.MonitorName = monitorDetails.ADMIN_QM_FNAME + " " + (monitorDetails.ADMIN_QM_MNAME == null ? "" : monitorDetails.ADMIN_QM_MNAME) + " " + (monitorDetails.ADMIN_QM_LNAME == null ? "" : monitorDetails.ADMIN_QM_LNAME);
                model.InspMonthYear = objCommon.getMonthText(Convert.ToInt16(schDetails.ADMIN_IM_MONTH)) + " " + schDetails.ADMIN_IM_YEAR.ToString();
                model.StateName = dbContext.MASTER_STATE.Where(c => c.MAST_STATE_CODE == schDetails.MAST_STATE_CODE).Select(c => c.MAST_STATE_NAME).First();
                model.DistrictName1 = dbContext.MASTER_DISTRICT.Where(c => c.MAST_DISTRICT_CODE == schDetails.MAST_DISTRICT_CODE).Select(c => c.MAST_DISTRICT_NAME).First();
                model.DistrictName2 = dbContext.MASTER_DISTRICT.Where(c => c.MAST_DISTRICT_CODE == schDetails.MAST_DISTRICT_CODE2).Select(c => c.MAST_DISTRICT_NAME).FirstOrDefault();
                model.DistrictName3 = dbContext.MASTER_DISTRICT.Where(c => c.MAST_DISTRICT_CODE == schDetails.MAST_DISTRICT_CODE3).Select(c => c.MAST_DISTRICT_NAME).FirstOrDefault();

                model.StateName = model.StateName + " " + "( " + model.DistrictName1 + (model.DistrictName2 == null ? "" : (" ," + model.DistrictName2)) + (model.DistrictName3 == null ? "" : (" ," + model.DistrictName3)) + " )";
                model.RoleCode = PMGSYSession.Current.RoleCode;

                return model;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Update Tour Details
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public string UpdateTourDetailsDAL(QMTourViewModel model)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                QUALITY_QM_TOUR_DETAILS objTourDetails = new QUALITY_QM_TOUR_DETAILS();
                objTourDetails = dbContext.QUALITY_QM_TOUR_DETAILS.Find(model.TourId);

                model.FlightArrivalDate = model.FlightArrivalDate + " " + model.FlightArrivalTime;
                model.FlightDepartureDate = model.FlightDepartureDate + " " + model.FlightDepartureTime;

                string[] formats = { "dd/MM/yyyy H:mm" };
                objTourDetails.FLIGHT_ARRIVAL_DATE = DateTime.ParseExact(model.FlightArrivalDate, formats, new CultureInfo("en-US"), DateTimeStyles.None);
                objTourDetails.FLIGHT_DEPARTURE_DATE = DateTime.ParseExact(model.FlightDepartureDate, formats, new CultureInfo("en-US"), DateTimeStyles.None);

                objTourDetails.TOUR_EXPENDITURE = model.totExpenditure;
                objTourDetails.TOUR_SUBMISSION_DATE = DateTime.ParseExact(model.tourSubmissionDate + " 00:00", formats, new CultureInfo("en-US"), DateTimeStyles.None);
                objTourDetails.TOUR_REPORT = model.tourReport;

                objTourDetails.USERID = PMGSYSession.Current.UserId;
                objTourDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(objTourDetails).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Delete Tour Details
        /// </summary>
        /// <param name="tourId"></param>
        /// <returns></returns>
        public string DeleteTourDetailsDAL(int tourId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                QUALITY_QM_TOUR_DETAILS objTourDetails = new QUALITY_QM_TOUR_DETAILS();
                objTourDetails = dbContext.QUALITY_QM_TOUR_DETAILS.Find(tourId);

                objTourDetails.USERID = PMGSYSession.Current.UserId;
                objTourDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(objTourDetails).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.QUALITY_QM_TOUR_DETAILS.Remove(objTourDetails);
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete Tour Details
        /// </summary>
        /// <param name="tourId"></param>
        /// <returns></returns>
        public string GetTourFileDetailsDAL(int tourId)
        {
            dbContext = new PMGSYEntities();
            string fileName = string.Empty;
            try
            {
                fileName = dbContext.QUALITY_QM_TOUR_DETAILS.Where(x => x.TOUR_ID == tourId).Select(x => x.TOUR_REPORT).FirstOrDefault();

                return fileName;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Finalize Tour Details (Lock)
        /// </summary>
        /// <param name="tourId"></param>
        /// <returns></returns>
        public string FinalizeTourDetailsDAL(int tourId, string flagValue)
        {
            dbContext = new PMGSYEntities();
            try
            {
                QUALITY_QM_TOUR_DETAILS objTourDetails = new QUALITY_QM_TOUR_DETAILS();
                objTourDetails = dbContext.QUALITY_QM_TOUR_DETAILS.Find(tourId);

                objTourDetails.IS_FINALIZED = flagValue;
                objTourDetails.USERID = PMGSYSession.Current.UserId;
                objTourDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(objTourDetails).State = EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion


        #region File Details

        /// <summary>
        /// Upload File Details
        /// </summary>
        /// <param name="lst_inspection_files"></param>
        /// <returns></returns>
        public string AddFileUploadDetailsDAL(QUALITY_QM_INSPECTION_FILE lst_inspection_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;
                if (dbContext.QUALITY_QM_INSPECTION_FILE.Count() == 0)
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.QUALITY_QM_INSPECTION_FILE select (Int32?)c.QM_FILE_ID ?? 0).Max();
                }
                ++MaxID;

                lst_inspection_files.DEVICE_TYPE = "W"; // Added on 10 Feb 2021. As per suggestion by Pankaj Sir. 
                lst_inspection_files.QM_FILE_ID = Convert.ToInt32(MaxID);
                dbContext.QUALITY_QM_INSPECTION_FILE.Add(lst_inspection_files);

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// List the uloaded Images
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions objCommonFunction = new CommonFunctions();
                List<QUALITY_QM_INSPECTION_FILE> listQMFiles = dbContext.QUALITY_QM_INSPECTION_FILE.Where(p => p.QM_OBSERVATION_ID == obsId).ToList();
                IQueryable<QUALITY_QM_INSPECTION_FILE> query = listQMFiles.AsQueryable<QUALITY_QM_INSPECTION_FILE>();
                totalRecords = listQMFiles.Count();

                string VirtualDirectoryUrl = string.Empty;
                string PhysicalPath = string.Empty;
                string VirtualDirectoryNewUrl = string.Empty;  // new changes here

                string VirtualDirectoryUrl_OMMAS4 = string.Empty;


                var qmTypeForUser = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                     join qqs in dbContext.QUALITY_QM_SCHEDULE on aqm.ADMIN_QM_CODE equals qqs.ADMIN_QM_CODE
                                     join qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqs.ADMIN_SCHEDULE_CODE equals qqom.ADMIN_SCHEDULE_CODE
                                     where qqom.QM_OBSERVATION_ID == obsId
                                     select aqm).First();


                Int32 scheduleCode = 0;
                Int32 prRoadCode = 0;
                var schDetails = (from qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                  where qqom.QM_OBSERVATION_ID == obsId
                                  select qqom).FirstOrDefault();

                if (schDetails != null)
                {
                    scheduleCode = Convert.ToInt32(schDetails.ADMIN_SCHEDULE_CODE);
                    prRoadCode = schDetails.IMS_PR_ROAD_CODE;
                }

                ///Path to upload files for NQM/SQM/CQC/SQC
                if (qmTypeForUser.ADMIN_QM_TYPE.Equals("I"))   //CQC & NQM
                {
                    VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_NQM_VIRTUAL_DIR_PATH"], "thumbnails");
                    //PhysicalPath = ConfigurationManager.AppSettings["QUALITY_FILE_UPLOAD_NQM"];
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_NQM"];

                    VirtualDirectoryUrl_OMMAS4 = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_NQM_OMMAS4_VIRTUAL_DIR_PATH"], "thumbnails");
                    VirtualDirectoryNewUrl = ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_NQM_VIRTUAL_DIR_PATH_NEW"];   // new changes here
                }
                else if (qmTypeForUser.ADMIN_QM_TYPE.Equals("S"))   //SQM & SQC
                {
                    VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_SQM_VIRTUAL_DIR_PATH"], "thumbnails");
                    //PhysicalPath = ConfigurationManager.AppSettings["QUALITY_FILE_UPLOAD_SQM"];
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_SQM"];

                    VirtualDirectoryUrl_OMMAS4 = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_SQM_OMMAS4_VIRTUAL_DIR_PATH"], "thumbnails");
                    VirtualDirectoryNewUrl = ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_SQM_VIRTUAL_DIR_PATH_NEW"];    // new changes here

                }

                //For self Reference
                File.Exists(Path.Combine(PhysicalPath, HttpUtility.UrlEncode("1983635_1.jpg")).ToString().Replace(@"\\", @"//").Replace(@"\", @"/"));

                return query.Select(fileDetails => new
                {
                    id = fileDetails.QM_FILE_ID,
                    cell = new[] {   
                                    // Added for look into OMMAS4 also
                                    // // new changes here by anita ma'am
                                    fileDetails.QM_FILE_NAME.ToString().Contains("$") == true ?

                                      Path.Combine(VirtualDirectoryNewUrl , (Convert.ToString(fileDetails.QM_FILE_NAME.ToString().Split('$')[0]) + "/thumbnails" ), fileDetails.QM_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") +
                                            "$$$" + (fileDetails.QM_LATITUDE == null ? "0" : fileDetails.QM_LATITUDE.ToString()) + "$$" +
                                            (fileDetails.QM_LONGITUDE == null ? "0" : fileDetails.QM_LONGITUDE.ToString()) +
                                            "$$$" + (objCommonFunction.GetDateTimeToString( Convert.ToDateTime(fileDetails.QM_FILE_UPLOAD_DATE) ))
                                    //  new changes here by anita ma'am ends here
                                   :
                                    File.Exists(Path.Combine(PhysicalPath, HttpUtility.UrlEncode(fileDetails.QM_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"))
                                     ?
                                    Path.Combine(VirtualDirectoryUrl, HttpUtility.UrlEncode(fileDetails.QM_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") +
                                            "$$$" + (fileDetails.QM_LATITUDE == null ? "0" : fileDetails.QM_LATITUDE.ToString()) + "$$" +
                                            (fileDetails.QM_LONGITUDE == null ? "0" : fileDetails.QM_LONGITUDE.ToString()) +
                                            "$$$" + (objCommonFunction.GetDateTimeToString( Convert.ToDateTime(fileDetails.QM_FILE_UPLOAD_DATE) ))

                                            :   Path.Combine(VirtualDirectoryUrl_OMMAS4, HttpUtility.UrlEncode(fileDetails.QM_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") +
                                            "$$$" + (fileDetails.QM_LATITUDE == null ? "0" : fileDetails.QM_LATITUDE.ToString()) + "$$" +
                                            (fileDetails.QM_LONGITUDE == null ? "0" : fileDetails.QM_LONGITUDE.ToString()) +
                                            "$$$" + (objCommonFunction.GetDateTimeToString( Convert.ToDateTime(fileDetails.QM_FILE_UPLOAD_DATE) )) ,




                                    fileDetails.QM_FILE_DESCR,
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.QM_FILE_NAME + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() }) +"\"); return false;'>Download</a>" ,
                                    //"<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() +"'); return false;>Edit</a>",
                                    //added by abhinav
                                    (PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7)? (fileDetails.QM_LATITUDE == null || fileDetails.QM_LONGITUDE == null ? "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('" + fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "$" + fileDetails.QM_FILE_NAME + "$" + scheduleCode + "$" + prRoadCode + "'); return false;>Delete</a>" : "-") : "-",                                                    
                                    //"<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('" + fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "','" + fileDetails.QM_FILE_NAME + "','" + scheduleCode + "','" + prRoadCode + "'); return false;>Delete</a>",                                    
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.QM_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.QM_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a></td></tr></table></center>",
                                    fileDetails.QM_LATITUDE == null ? "0" : fileDetails.QM_LATITUDE.ToString(),
                                    fileDetails.QM_LONGITUDE == null ? "0" : fileDetails.QM_LONGITUDE.ToString(),
                                    ///Added by SAMMED A. PATIL on 27DEC2017 for Adding missing files
                                    (File.Exists(Path.Combine(PhysicalPath, HttpUtility.UrlEncode(fileDetails.QM_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/")))
                                    ? "-"
                                    : "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick=uploadMissingImage('"+ fileDetails.QM_FILE_NAME.Trim() +"')>Upload</a>"
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Start and End Latitude/Longitude
        /// </summary>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public string GetStartEndLatLongDAL(int obsId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var schDetails = (from qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                  where qqom.QM_OBSERVATION_ID == obsId
                                  select qqom).FirstOrDefault();


                return schDetails.QM_START_LATITUDE + "@" + schDetails.QM_START_LONGITUDE + "$$" + schDetails.QM_END_LATITUDE + "@" + schDetails.QM_END_LONGITUDE;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Fetch latlongs for all images against particular Observations
        /// </summary>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public string GetLatLongDAL(int obsId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                string latLongs = null;
                var fileDetails = (from qqif in dbContext.QUALITY_QM_INSPECTION_FILE
                                   where qqif.QM_OBSERVATION_ID == obsId
                                   select qqif).ToList();


                foreach (var item in fileDetails)
                {
                    latLongs = latLongs + item.QM_LATITUDE + "@" + item.QM_LONGITUDE + "$$";
                }

                return latLongs;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// For Listing ATR Pdfs
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public Array GetPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId, int QM_ATR_ID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //List<QUALITY_ATR_FILE> listATRFiles = dbContext.QUALITY_ATR_FILE.Where(p => p.QM_OBSERVATION_ID == obsId /*&& p.ATR_IS_DELETED == "N" */&& p.QM_ATR_ID == QM_ATR_ID).ToList();
                List<QUALITY_ATR_FILE> listATRFiles = null;
                if (QM_ATR_ID == 0)
                {
                    listATRFiles = dbContext.QUALITY_ATR_FILE.Where(p => p.QM_OBSERVATION_ID == obsId /*&& p.ATR_IS_DELETED == "N" */).ToList();
                }
                else
                {
                    listATRFiles = dbContext.QUALITY_ATR_FILE.Where(p => p.QM_OBSERVATION_ID == obsId /*&& p.ATR_IS_DELETED == "N" */&& p.QM_ATR_ID == QM_ATR_ID).ToList();
                }
                IQueryable<QUALITY_ATR_FILE> query = listATRFiles.AsQueryable<QUALITY_ATR_FILE>();
                totalRecords = listATRFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(x => x.QM_OBSERVATION_ID == obsId).SingleOrDefault().QM_ROAD_STATUS.Equals("M") ? ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_MAINTENANCE_ATR_VIRTUAL_DIR_PATH"] : ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_ATR_VIRTUAL_DIR_PATH"];
                string PhysicalPath = dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(x => x.QM_OBSERVATION_ID == obsId).SingleOrDefault().QM_ROAD_STATUS.Equals("M") ? ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_MAINTENANCE_ATR_VIRTUAL_DIR_PATH"] : ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_ATR"];

                return query.Select(fileDetails => new
                {
                    id = fileDetails.QM_ATR_ID,
                    cell = new[] {                                       
                                    //URLEncrypt.EncryptParameters(new string[] { fileDetails.ATR_FILE_NAME + "$" + fileDetails.QM_OBSERVATION_ID})  //Commented on 02/07/2014
                                    ///Changes by SAMMED A. PATIL on 08JAN2018 for Missing ATR Files
                                    ///URLEncrypt.EncryptParameters(new string[] { fileDetails.ATR_FILE_NAME + "$" + fileDetails.QM_ATR_ID})
                                    !(System.IO.File.Exists(Path.Combine(PhysicalPath, HttpUtility.UrlEncode(fileDetails.QM_ATR_ID + ".pdf")).ToString().Replace(@"\\", @"//").Replace(@"\", @"/"))) ? "" : URLEncrypt.EncryptParameters(new string[] { fileDetails.ATR_FILE_NAME + "$" + fileDetails.QM_ATR_ID})
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetPDFFilesListDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }


        /// <summary>
        /// Save ATR Entry
        /// </summary>
        /// <param name="lst_inspection_files"></param>
        /// <returns></returns>
        public string AddATRDetailsDAL(QUALITY_ATR_FILE lst_atr_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;
                if (dbContext.QUALITY_ATR_FILE.Count() == 0)
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.QUALITY_ATR_FILE select (Int32?)c.QM_ATR_ID ?? 0).Max();
                }
                ++MaxID;

                lst_atr_files.QM_ATR_ID = Convert.ToInt32(MaxID);
                dbContext.QUALITY_ATR_FILE.Add(lst_atr_files);


                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(lst_atr_files.QM_OBSERVATION_ID);
                qmObservationMaster.QM_ATR_STATUS = "U";

                //Added By Abhishek Kamble 30-nov-2013
                qmObservationMaster.USERID = PMGSYSession.Current.UserId;
                qmObservationMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(qmObservationMaster).State = System.Data.Entity.EntityState.Modified;

                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddATRDetailsDAL().DbUpdateException");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddATRDetailsDAL().OptimisticConcurrencyException");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddATRDetailsDAL()");
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update Image Information such as Description etc.
        /// </summary>
        /// <param name="qm_inspection_files"></param>
        /// <returns></returns>
        public string UpdateImageDetailsDAL(QUALITY_QM_INSPECTION_FILE qm_inspection_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_QM_INSPECTION_FILE db_qm_inspection_files = dbContext.QUALITY_QM_INSPECTION_FILE.Find(qm_inspection_files.QM_FILE_ID);

                db_qm_inspection_files.QM_FILE_DESCR = qm_inspection_files.QM_FILE_DESCR;

                //Added By Abhishek Kamble 30-nov-2013
                db_qm_inspection_files.USERID = PMGSYSession.Current.UserId;
                db_qm_inspection_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(db_qm_inspection_files).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Delete uploaded images
        /// </summary>
        /// <param name="QM_FILE_ID"></param>
        /// <returns></returns>
        public string DeleteFileDetailsDAL(int QM_FILE_ID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_QM_INSPECTION_FILE db_qm_inspection_files = dbContext.QUALITY_QM_INSPECTION_FILE.Find(QM_FILE_ID);

                //Added By Abhishek Kamble 30-nov-2013
                db_qm_inspection_files.USERID = PMGSYSession.Current.UserId;
                db_qm_inspection_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(db_qm_inspection_files).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.QUALITY_QM_INSPECTION_FILE.Remove(db_qm_inspection_files);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion


        #region Pdf Upload BY Monitor

        /// <summary>
        /// Get the PDF Files List
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetInspReportFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId, string isATRPage)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var qmTypeForUser = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                     join qqs in dbContext.QUALITY_QM_SCHEDULE on aqm.ADMIN_QM_CODE equals qqs.ADMIN_QM_CODE
                                     join qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqs.ADMIN_SCHEDULE_CODE equals qqom.ADMIN_SCHEDULE_CODE
                                     where qqom.QM_OBSERVATION_ID == obsId
                                     select aqm).First();

                List<QUALITY_INSPECTION_REPORT_FILE> listFiles = dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(p => p.QM_OBSERVATION_ID == obsId && p.FILE_TYPE == "I").ToList();
                IQueryable<QUALITY_INSPECTION_REPORT_FILE> query = listFiles.AsQueryable<QUALITY_INSPECTION_REPORT_FILE>();
                totalRecords = listFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = string.Empty;
                string PhysicalPath = string.Empty;
                if (qmTypeForUser.ADMIN_QM_TYPE.Equals("I"))
                {
                    VirtualDirectoryUrl = ConfigurationManager.AppSettings["QUALITY_INSPECTION_REPORT_FILE_NQM_VIRTUAL_PATH"];
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_REPORT_FILE_NQM"];
                    //PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_PDF_FILE_NQM"];
                }
                else if (qmTypeForUser.ADMIN_QM_TYPE.Equals("S"))
                {
                    VirtualDirectoryUrl = ConfigurationManager.AppSettings["QUALITY_INSPECTION_REPORT_FILE_SQM_VIRTUAL_PATH"];
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_REPORT_FILE_SQM"];
                    //PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_PDF_FILE_SQM"];
                }

                return query.Select(fileDetails => new
                {
                    id = fileDetails.FILE_ID + "$" + fileDetails.QM_OBSERVATION_ID,
                    cell = new[] {
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.FILE_NAME + "$" +  fileDetails.QM_OBSERVATION_ID }),
                                    fileDetails.FILE_DESCRIPTION,
                                    dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.UserName).FirstOrDefault(),
                                    
                                       // (( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                       //? "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditPDFDetails('" +  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() +"'); return false;>Edit</a>"
                                       //: "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                       //Edited on 28-02-22 
                                      //cmnt on 13-09-2022  
                                      (isATRPage=="Y"?"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                       ((( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)  && ((( fileDetails.FILE_UPLOAD_DATE.Month==1 || fileDetails.FILE_UPLOAD_DATE.Month==2 || fileDetails.FILE_UPLOAD_DATE.Month==3 ) && fileDetails.FILE_UPLOAD_DATE.Year==2022 && ((System.DateTime.Now.Month==4 && System.DateTime.Now.Day <= 30)||(System.DateTime.Now.Month<=3)) &&System.DateTime.Now.Year==2022)
                                                         ||(fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month && fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) || ((fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month - 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                         || ((fileDetails.FILE_UPLOAD_DATE.Month == 12 && System.DateTime.Now.Month == 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))   )

                                       )
                                       ? "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditPDFDetails('" +  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() +"'); return false;>Edit</a>"
                                       : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"


                                      ),
                                     
                                      






                                    //(( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                    //   ? "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "','" + fileDetails.FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>"
                                    //   : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                       //((( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode) 
                                       //                 && ((fileDetails.FILE_UPLOAD_DATE.Month==1 && fileDetails.FILE_UPLOAD_DATE.Year==2022 && System.DateTime.Now.Month==2 &&System.DateTime.Now.Year==2022)  
                                       //                  ||(fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month && fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) || ((fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month - 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                       //                  || ((fileDetails.FILE_UPLOAD_DATE.Month == 12 && System.DateTime.Now.Month == 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))   )
                                       //)
                                       //? "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "','" + fileDetails.FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>"
                                       //: "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",      //Comented 23-03-2022


                                          //delete cmnt on 19-09-2022  
                                           (isATRPage=="Y"?"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>":
                                               ((( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                                        && ((( fileDetails.FILE_UPLOAD_DATE.Month==1 || fileDetails.FILE_UPLOAD_DATE.Month==2 || fileDetails.FILE_UPLOAD_DATE.Month==3) && fileDetails.FILE_UPLOAD_DATE.Year==2022 && ((System.DateTime.Now.Month==4 && System.DateTime.Now.Day <= 30)||(System.DateTime.Now.Month<=3)) &&System.DateTime.Now.Year==2022)
                                                         ||(fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month && fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) || ((fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month - 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                         || ((fileDetails.FILE_UPLOAD_DATE.Month == 12 && System.DateTime.Now.Month == 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))   )
                                       )
                                       ? "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "','" + fileDetails.FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>"
                                       : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"),
                                    
                                   

                                    
                                    //(( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                    //    ? "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a></td></tr></table></center>"
                                    //    : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                    
                                    //((( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                     //                     && ((fileDetails.FILE_UPLOAD_DATE.Month==1 && fileDetails.FILE_UPLOAD_DATE.Year==2022 && System.DateTime.Now.Month==2 &&System.DateTime.Now.Year==2022)  
                                     //                    ||(fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month && fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) || ((fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month - 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                     //                    || ((fileDetails.FILE_UPLOAD_DATE.Month == 12 && System.DateTime.Now.Month == 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))   )
                                      
                                     //)
                                     //   ? "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a></td></tr></table></center>"
                                     //   : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"  //Comented 23-03-2022

                                     ((( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                                          && (((fileDetails.FILE_UPLOAD_DATE.Month==1 || fileDetails.FILE_UPLOAD_DATE.Month==2 || fileDetails.FILE_UPLOAD_DATE.Month==3) && fileDetails.FILE_UPLOAD_DATE.Year==2022 && ((System.DateTime.Now.Month==4 && System.DateTime.Now.Day <= 30)||(System.DateTime.Now.Month<=3)) &&System.DateTime.Now.Year==2022)
                                                         ||(fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month && fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) || ((fileDetails.FILE_UPLOAD_DATE.Month == System.DateTime.Now.Month - 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year) && (System.DateTime.Now.Day <= 7))
                                                         || ((fileDetails.FILE_UPLOAD_DATE.Month == 12 && System.DateTime.Now.Month == 1) && (fileDetails.FILE_UPLOAD_DATE.Year == System.DateTime.Now.Year - 1) && (System.DateTime.Now.Day <= 7))   )

                                     )
                                        ? "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a></td></tr></table></center>"
                                        : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }


        /// <summary>
        /// Add File Upload Details
        /// </summary>
        /// <param name="lst_ims_proposal_files"></param>
        /// <returns></returns>
        public string AddPdfUploadDetailsDAL(QUALITY_INSPECTION_REPORT_FILE qmFiles)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;

                if (dbContext.QUALITY_INSPECTION_REPORT_FILE.Count() == 0)
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.QUALITY_INSPECTION_REPORT_FILE select (Int32?)c.FILE_ID ?? 0).Max();
                }
                ++MaxID;
                qmFiles.FILE_ID = Convert.ToInt32(MaxID);
                qmFiles.USERID = PMGSYSession.Current.UserId;
                qmFiles.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.QUALITY_INSPECTION_REPORT_FILE.Add(qmFiles);

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        ///  Update the PDF File Details
        /// </summary>
        /// <param name="ims_proposal_files"></param>
        /// <returns></returns>
        public string UpdatePDFDetailsDAL(QUALITY_INSPECTION_REPORT_FILE qmFiles)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_INSPECTION_REPORT_FILE db_files = dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(
                    a => a.FILE_ID == qmFiles.FILE_ID &&
                    a.QM_OBSERVATION_ID == qmFiles.QM_OBSERVATION_ID &&
                    a.FILE_TYPE == qmFiles.FILE_TYPE
                    ).FirstOrDefault();

                db_files.FILE_DESCRIPTION = qmFiles.FILE_DESCRIPTION;
                db_files.USERID = PMGSYSession.Current.UserId;
                db_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(db_files).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        ///  Delete File and File Details
        /// </summary>
        /// <param name="ims_proposal_files"></param>
        /// <returns></returns>
        public string DeleteInspFileDetailsBAL(int fileId, int obsId, string fileType)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_INSPECTION_REPORT_FILE obj_files = dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(
                    a => a.QM_OBSERVATION_ID == obsId &&
                    a.FILE_ID == fileId &&
                    a.FILE_TYPE == fileType).FirstOrDefault();

                obj_files.USERID = PMGSYSession.Current.UserId;
                obj_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(obj_files).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.QUALITY_INSPECTION_REPORT_FILE.Remove(obj_files);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        //added by abhinav pathak on 12-08-2019
        #region
        public string AddMultiplePdfUploadDetailsDAL(QUALITY_QM_INSPECTION_FILES qmFiles)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;
                if (dbContext.QUALITY_QM_INSPECTION_FILES.Count() == 0)
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.QUALITY_QM_INSPECTION_FILES select (Int32?)c.QM_FILE_ID ?? 0).Max();
                }
                ++MaxID;
                qmFiles.QM_FILE_ID = Convert.ToInt32(MaxID);
                dbContext = new PMGSYEntities();
                dbContext.QUALITY_QM_INSPECTION_FILES.Add(qmFiles);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetInspMultipleFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var qmTypeForUser = (from aqm in dbContext.ADMIN_QUALITY_MONITORS
                                     join qqs in dbContext.QUALITY_QM_SCHEDULE on aqm.ADMIN_QM_CODE equals qqs.ADMIN_QM_CODE
                                     join qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqs.ADMIN_SCHEDULE_CODE equals qqom.ADMIN_SCHEDULE_CODE
                                     where qqom.QM_OBSERVATION_ID == obsId
                                     select aqm).First();

                List<QUALITY_QM_INSPECTION_FILES> listFiles = dbContext.QUALITY_QM_INSPECTION_FILES.Where(p => p.QM_OBSERVATION_ID == obsId).ToList();
                IQueryable<QUALITY_QM_INSPECTION_FILES> query = listFiles.AsQueryable<QUALITY_QM_INSPECTION_FILES>();
                totalRecords = listFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.QM_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.QM_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.QM_FILE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = string.Empty;
                string PhysicalPath = string.Empty;
                if (qmTypeForUser.ADMIN_QM_TYPE.Equals("I"))
                {
                    VirtualDirectoryUrl = ConfigurationManager.AppSettings["QUALITY_INSPECTION_PDF_FILE_NQM_VIRTUAL_DIR_PATH"];
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_PDF_FILE_NQM"];
                }
                else if (qmTypeForUser.ADMIN_QM_TYPE.Equals("S"))
                {
                    VirtualDirectoryUrl = ConfigurationManager.AppSettings["QUALITY_INSPECTION_PDF_FILE_SQM_VIRTUAL_DIR_PATH"];
                    PhysicalPath = ConfigurationManager.AppSettings["QUALITY_INSPECTION_PDF_FILE_SQM"];
                }

                return query.Select(fileDetails => new
                {
                    id = fileDetails.QM_FILE_ID + "$" + fileDetails.QM_OBSERVATION_ID,
                    cell = new[] {
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.QM_FILE_NAME + "$" +  fileDetails.QM_OBSERVATION_ID }),
                                    fileDetails.QM_FILE_DESCR,
                                    dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.UserName).FirstOrDefault(),

                                    (( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                       ? "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditPDFDetails('" +  fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() +"'); return false;>Edit</a>"
                                       : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                    (( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                       ? "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "','" + fileDetails.QM_FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>"
                                       : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                    (( dbContext.UM_User_Master.Where(c => c.UserID == fileDetails.USERID).Select(c => c.DefaultRoleID).FirstOrDefault()) == PMGSYSession.Current.RoleCode)
                                        ? "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.QM_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.QM_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.QM_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_OBSERVATION_ID.ToString().Trim() + "');></a></td></tr></table></center>"
                                        : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                        //added by abhinav on 13 august 2019
                                        fileDetails.QM_FILES_FINALIZED == "N" ? "No" : "Yes",
                                        (PMGSYSession.Current.RoleCode == 6 || PMGSYSession.Current.RoleCode == 7) ?
                                        "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=FinalisePDFDetails('" +  fileDetails.QM_FILE_ID.ToString().Trim()  + "'); return false;>Finalise</a>"
                                        : "-",


                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        public bool FinalisePDFDeatilsDAL(int id)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var isFinalisedDone = dbContext.QUALITY_QM_INSPECTION_FILES.Where(x => x.QM_FILE_ID == id).Count();
                if (isFinalisedDone == 1)
                {
                    QUALITY_QM_INSPECTION_FILES datamodel = new QUALITY_QM_INSPECTION_FILES();
                    datamodel = dbContext.QUALITY_QM_INSPECTION_FILES.Where(x => x.QM_FILE_ID == id).FirstOrDefault();
                    datamodel.QM_FILES_FINALIZED = "Y";
                    datamodel.QM_FILE_FINALIZED_DATE = System.DateTime.Now;
                    datamodel.QM_FILE_FINALIZED_BY = PMGSYSession.Current.UserId;
                    dbContext.SaveChanges();
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL/FinalisePDFDetailsDAL");
                return false;
            }
        }
        public string UpdateMultiplePDFDetailsDAL(QUALITY_QM_INSPECTION_FILES qmFiles)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_QM_INSPECTION_FILES db_files = dbContext.QUALITY_QM_INSPECTION_FILES.Where(
                    a => a.QM_FILE_ID == qmFiles.QM_FILE_ID &&
                    a.QM_OBSERVATION_ID == qmFiles.QM_OBSERVATION_ID
                    //a.FILE_TYPE == qmFiles.FILE_TYPE
                    ).FirstOrDefault();

                db_files.QM_FILE_DESCR = qmFiles.QM_FILE_DESCR;
                db_files.USERID = PMGSYSession.Current.UserId;
                db_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(db_files).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string DeleteMultipleInspFileDetailsDAL(int fileId, int obsId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_QM_INSPECTION_FILES obj_files = dbContext.QUALITY_QM_INSPECTION_FILES.Where(
                    a => a.QM_OBSERVATION_ID == obsId &&
                    a.QM_FILE_ID == fileId).FirstOrDefault();

                obj_files.USERID = PMGSYSession.Current.UserId;
                obj_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(obj_files).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.QUALITY_QM_INSPECTION_FILES.Remove(obj_files);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion
        #endregion

        #region QCR Part-I PDF by Srishti and Vikki

        public Array GetExecutionList(int yearCode, int districtCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);

            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69)
                {
                    //var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                    //                    join ongoingRoad in dbContext.EXEC_ROADS_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals ongoingRoad.IMS_PR_ROAD_CODE
                    //                    join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                    //                    join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                    //                    join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                    //                    join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                    //                    join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                    //                    where
                    //                    master.TEND_IS_AGREEMENT_FINALIZED == "Y"
                    //                    && item.IMS_SANCTIONED == "Y"
                    //                    && master.TEND_AGREEMENT_TYPE == "C"
                    //                    && (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode)
                    //                    && item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                    //                    //&& item.IMS_DPR_STATUS == "N"
                    //                    && item.MAST_DISTRICT_CODE == districtCode
                    //                    && ongoingRoad.EXEC_ISCOMPLETED != "C"
                    //                    && item.IMS_PROPOSAL_TYPE == "P"
                    //                    select new
                    //                    {
                    //                        block.MAST_BLOCK_NAME,
                    //                        item.IMS_PACKAGE_ID,
                    //                        item.IMS_BATCH,
                    //                        item.IMS_PR_ROAD_CODE,
                    //                        item.IMS_ROAD_NAME,
                    //                        item.IMS_BRIDGE_NAME,
                    //                        year.MAST_YEAR_TEXT,
                    //                        item.IMS_PROPOSAL_TYPE,
                    //                        ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                    //                        ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                    //                                    : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                    //                        MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                    //                    }).Distinct();

                    //var lstExecution1 = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                    //                     join ongoingRoad in dbContext.EXEC_LSB_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals ongoingRoad.IMS_PR_ROAD_CODE
                    //                     join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                    //                     join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                    //                     join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                    //                     join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                    //                     join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                    //                     where
                    //                     master.TEND_IS_AGREEMENT_FINALIZED == "Y"
                    //                     && item.IMS_SANCTIONED == "Y"
                    //                     && master.TEND_AGREEMENT_TYPE == "C"
                    //                     && (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode)
                    //                     && item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                    //                     //&& item.IMS_DPR_STATUS == "N"
                    //                     && item.MAST_DISTRICT_CODE == districtCode
                    //                     && ongoingRoad.EXEC_ISCOMPLETED != "C"
                    //                     && item.IMS_PROPOSAL_TYPE == "L"
                    //                     select new
                    //                     {
                    //                         block.MAST_BLOCK_NAME,
                    //                         item.IMS_PACKAGE_ID,
                    //                         item.IMS_BATCH,
                    //                         item.IMS_PR_ROAD_CODE,
                    //                         item.IMS_ROAD_NAME,
                    //                         item.IMS_BRIDGE_NAME,
                    //                         year.MAST_YEAR_TEXT,
                    //                         item.IMS_PROPOSAL_TYPE,
                    //                         ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                    //                         ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                    //                                     : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                    //                         MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                    //                     }).Distinct();

                    List<USP_QCR_DETAILS_Result> lstExecution = new List<USP_QCR_DETAILS_Result>();

                    var itemList = dbContext.USP_QCR_DETAILS(yearCode, districtCode, PMGSYSession.Current.PMGSYScheme).ToList();// FirstOrDefault();

                    foreach (USP_QCR_DETAILS_Result item in itemList)
                    {
                        lstExecution.Add(new USP_QCR_DETAILS_Result
                        {
                            MAST_BLOCK_NAME = item.MAST_BLOCK_NAME,
                            IMS_PACKAGE_ID = item.IMS_PACKAGE_ID,
                            IMS_BATCH = item.IMS_BATCH,
                            SANCTION_CODE = item.SANCTION_CODE,
                            IMS_ROAD_NAME = item.IMS_ROAD_NAME,
                            IMS_BRIDGE_NAME = item.IMS_BRIDGE_NAME,
                            MAST_YEAR_TEXT = item.MAST_YEAR_TEXT,
                            IMS_PROPOSAL_TYPE = item.IMS_PROPOSAL_TYPE,
                            ROAD_LENGTH = item.ROAD_LENGTH,
                            TOTAL_COST = item.TOTAL_COST,
                            MAINTENANCE_COST = item.MAINTENANCE_COST
                        });
                    }



                    totalRecords = lstExecution.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord.ToString() == "asc")
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstExecution = lstExecution.OrderBy(m => m.SANCTION_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }

                    //var finalList = lstExecution.Union(lstExecution1);

                    var result = lstExecution.Select(executionDetails => new
                    {
                        executionDetails.MAST_BLOCK_NAME,
                        executionDetails.IMS_ROAD_NAME,
                        executionDetails.IMS_PACKAGE_ID,

                        executionDetails.IMS_PROPOSAL_TYPE,
                        executionDetails.SANCTION_CODE,

                        executionDetails.TOTAL_COST,
                        executionDetails.ROAD_LENGTH,
                        executionDetails.MAINTENANCE_COST,
                        executionDetails.IMS_BATCH,
                        executionDetails.IMS_BRIDGE_NAME,
                        executionDetails.MAST_YEAR_TEXT


                    }).ToArray();

                    return result.Select(m => new
                    {

                        id = m.SANCTION_CODE.ToString(),
                        cell = new[]
                    {

                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        ("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        URLEncrypt.EncryptParameters1(new string[] { "IMS_road_code =" + m.SANCTION_CODE.ToString() }),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.TOTAL_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? "Road" : m.IMS_PROPOSAL_TYPE == "L"?"Bridge": m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--",  
                        // PMGSYSession.Current.RoleCode == 8 ? 
                           "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plus' title='Click here to Upload QCR' onClick ='AddQCR(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.SANCTION_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"
                         //  : (dbContext.QM_QCR_DETAILS.Where(s=>s.IMS_PR_ROAD_CODE==m.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "-" : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-search' title='Click here to View QCR' onClick ='ViewQCRcqc(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"),
                        //"<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plus' title='Click here to Upload QCR' onClick ='AddQCR(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>",
                  }
                    }).ToArray();

                }
                else if (PMGSYSession.Current.RoleCode == 9)
                {
                    var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                        join ongoingRoad in dbContext.EXEC_ROADS_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals ongoingRoad.IMS_PR_ROAD_CODE
                                        join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                        join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                        join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                        join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                        join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                        join qmDetails in dbContext.QM_QCR_DETAILS on item.IMS_PR_ROAD_CODE equals qmDetails.IMS_PR_ROAD_CODE
                                        where
                                        master.TEND_IS_AGREEMENT_FINALIZED == "Y"
                                        && item.IMS_SANCTIONED == "Y"
                                        && master.TEND_AGREEMENT_TYPE == "C"
                                        && (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode)
                                        && item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                        && item.IMS_DPR_STATUS == "N"
                                        && item.MAST_DISTRICT_CODE == districtCode
                                        && ongoingRoad.EXEC_ISCOMPLETED != "C"
                                        && item.IMS_PROPOSAL_TYPE == "P"
                                        && qmDetails.IS_FINALIZE == "Y"
                                        select new
                                        {
                                            block.MAST_BLOCK_NAME,
                                            item.IMS_PACKAGE_ID,
                                            item.IMS_BATCH,
                                            item.IMS_PR_ROAD_CODE,
                                            item.IMS_ROAD_NAME,
                                            item.IMS_BRIDGE_NAME,
                                            year.MAST_YEAR_TEXT,
                                            item.IMS_PROPOSAL_TYPE,
                                            ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                            ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                        : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                            MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                        }).Distinct();

                    var lstExecution1 = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                         join ongoingRoad in dbContext.EXEC_LSB_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals ongoingRoad.IMS_PR_ROAD_CODE
                                         join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                         join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                         join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                         join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                         join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                         join qmDetails in dbContext.QM_QCR_DETAILS on item.IMS_PR_ROAD_CODE equals qmDetails.IMS_PR_ROAD_CODE
                                         where
                                         master.TEND_IS_AGREEMENT_FINALIZED == "Y"
                                         && item.IMS_SANCTIONED == "Y"
                                         && master.TEND_AGREEMENT_TYPE == "C"
                                         && (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode)
                                         && item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                         && item.IMS_DPR_STATUS == "N"
                                         && item.MAST_DISTRICT_CODE == districtCode
                                         && ongoingRoad.EXEC_ISCOMPLETED != "C"
                                         && item.IMS_PROPOSAL_TYPE == "L"
                                         && qmDetails.IS_FINALIZE == "Y"
                                         select new
                                         {
                                             block.MAST_BLOCK_NAME,
                                             item.IMS_PACKAGE_ID,
                                             item.IMS_BATCH,
                                             item.IMS_PR_ROAD_CODE,
                                             item.IMS_ROAD_NAME,
                                             item.IMS_BRIDGE_NAME,
                                             year.MAST_YEAR_TEXT,
                                             item.IMS_PROPOSAL_TYPE,
                                             ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                             ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                         : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                             MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                         }).Distinct();

                    totalRecords = lstExecution.Union(lstExecution1).Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord.ToString() == "asc")
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.Union(lstExecution1).OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.Union(lstExecution1).OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.Union(lstExecution1).OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.Union(lstExecution1).OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.Union(lstExecution1).OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.Union(lstExecution1).OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.Union(lstExecution1).OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.Union(lstExecution1).OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstExecution = lstExecution.Union(lstExecution1).OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }

                    var result = lstExecution.Union(lstExecution1).Select(executionDetails => new
                    {
                        executionDetails.MAST_BLOCK_NAME,
                        executionDetails.IMS_ROAD_NAME,
                        executionDetails.IMS_PACKAGE_ID,

                        executionDetails.IMS_PROPOSAL_TYPE,
                        executionDetails.IMS_PR_ROAD_CODE,

                        executionDetails.ROAD_COST,
                        executionDetails.ROAD_LENGTH,
                        executionDetails.MAINTENANCE_COST,
                        executionDetails.IMS_BATCH,
                        executionDetails.IMS_BRIDGE_NAME,
                        executionDetails.MAST_YEAR_TEXT


                    }).ToArray();

                    return result.Select(m => new
                    {

                        id = m.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[]
                    {

                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        ("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        URLEncrypt.EncryptParameters1(new string[] { "IMS_road_code =" + m.IMS_PR_ROAD_CODE.ToString() }),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? "Road" : m.IMS_PROPOSAL_TYPE == "L"?"Bridge": m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--",  
                         //PMGSYSession.Current.RoleCode == 8 ? 
                         //  "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plus' title='Click here to Upload QCR' onClick ='AddQCR(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"
                            (dbContext.QM_QCR_DETAILS.Where(s=>s.IMS_PR_ROAD_CODE==m.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "-" : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-search' title='Click here to View QCR' onClick ='ViewQCRcqc(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"),
                        //"<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plus' title='Click here to Upload QCR' onClick ='AddQCR(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>",
                  }
                    }).ToArray();

                }
                totalRecords = 0;
                return null;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetExecutionList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddQCRdDetails(AddUploadQCRDetailsModel model, out String IsValid)
        {
            int status = 0;
            int roadCode = 0;
            var dbContext = new PMGSYEntities();
            QM_QCR_DETAILS qcrModel = new QM_QCR_DETAILS();


            status = dbContext.SaveChanges();
            try
            {
                using (var scope = new TransactionScope())
                {
                    roadCode = Convert.ToInt32(model.IMS_PR_ROAD_CODE);
                    DateTime currentDate = DateTime.Now;

                    if (dbContext.QM_QCR_DETAILS.Count(x => x.IMS_PR_ROAD_CODE == roadCode && x.FILE_UPLOADED_DATE.Year == currentDate.Year) == 2)
                        status = -1;
                    else
                    {
                        Int32 qcrId = dbContext.QM_QCR_DETAILS.Any() ? (from item in dbContext.QM_QCR_DETAILS select item.QCR_ID).Max() + 1 : 1;
                        qcrModel.QCR_ID = qcrId;
                        qcrModel.IMS_PR_ROAD_CODE = Convert.ToInt32(model.IMS_PR_ROAD_CODE);
                        //      DateTime currentDate = DateTime.Now;
                        qcrModel.FILE_UPLOADED_DATE = currentDate;
                        int FileYear = DateTime.Now.Year; // current year for file
                        qcrModel.UPLOAD_REMARK = model.uploadRemark;
                        qcrModel.USERID = PMGSYSession.Current.UserId;
                        qcrModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        String FilePath = ConfigurationManager.AppSettings["QCR_DETAILS_PATH"];
                        var YearDictionary = Path.Combine(FilePath, FileYear.ToString());

                        if (!Directory.Exists(YearDictionary))
                        {
                            Directory.CreateDirectory(YearDictionary);
                        }
                        DateTime d = DateTime.Now;
                        String format = "d_MMM_yyyy_HH_mm_ss";
                        String currentTime = d.ToString(format);


                        String FileName = FileYear + "_QCR_" + model.IMS_PR_ROAD_CODE + "_" + currentTime + ".pdf";
                        model.QCRFile.SaveAs(System.IO.Path.Combine(YearDictionary, FileName));
                        qcrModel.FILE_PATH = YearDictionary;
                        qcrModel.FILE_NAME = FileName;
                        qcrModel.IS_LATEST = "Y";
                        qcrModel.GRADE_SE = model.awardGradeSE;
                        qcrModel.GRADE_SQC = model.awardGradeSQC;
                        dbContext.QM_QCR_DETAILS.Add(qcrModel);

                        status = dbContext.SaveChanges();
                    }



                    scope.Complete();
                }
                if (status > 0)
                {
                    IsValid = "QCR details uploaded successfully.";
                    return true;
                }
                else if (status == -1)
                {
                    IsValid = "Only two QCR Part-I PDFs are allowed for an year.";
                    return false;
                }
                else
                {
                    IsValid = "Maximum 250 Alphanumeric, Space and '-','/','.' are Allowed for Remark.";
                    return false;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddQCRDetails");
                IsValid = "QCR  details not added.";
                return false;

            }

        }

        public Array GetQCRList(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                var lstExecution = (from item in dbContext.QM_QCR_DETAILS
                                    join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                    join road in dbContext.EXEC_ROADS_MONTHLY_STATUS on details.IMS_PR_ROAD_CODE equals road.IMS_PR_ROAD_CODE into execRoad
                                    from ongoingRoad in execRoad.DefaultIfEmpty()

                                    where
                                    item.IMS_PR_ROAD_CODE == roadCode
                                    && district.MAST_DISTRICT_CODE == details.MAST_DISTRICT_CODE
                                    && block.MAST_BLOCK_CODE == details.MAST_BLOCK_CODE
                                    && year.MAST_YEAR_CODE == details.IMS_YEAR
                                    //&& ongoingRoad.EXEC_ISCOMPLETED != "C"
                                    && details.IMS_PROPOSAL_TYPE == "P"

                                    group new { ongoingRoad, item, district, block, year, details } by /*item.FILE_NAME*/item.QCR_ID into ClusterGroup

                                    let firstproductgroup = ClusterGroup.FirstOrDefault()
                                    let item = firstproductgroup.item
                                    let details = firstproductgroup.details
                                    let district = firstproductgroup.district
                                    let block = firstproductgroup.block
                                    let year = firstproductgroup.year
                                    let minMonth = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_MONTH)
                                    let minYear = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_YEAR)

                                    select new
                                    {
                                        district.MAST_DISTRICT_NAME,
                                        block.MAST_BLOCK_NAME,
                                        year.MAST_YEAR_TEXT,
                                        details.IMS_BATCH,
                                        details.IMS_PACKAGE_ID,
                                        details.IMS_PROPOSAL_TYPE,
                                        details.IMS_ROAD_NAME,
                                        details.IMS_BRIDGE_NAME,
                                        MIN_MONTH = (int?)minMonth,
                                        MIN_YEAR = (int?)minYear,
                                        item.FILE_NAME,
                                        item.FILE_PATH,
                                        item.FILE_UPLOADED_DATE,
                                        item.UPLOAD_REMARK,
                                        item.IMS_PR_ROAD_CODE,
                                        item.IS_FINALIZE,
                                        item.QCR_ID,
                                        item.GRADE_SE,
                                        item.GRADE_SQC
                                    }).Distinct();

                var lstExecution1 = (from item in dbContext.QM_QCR_DETAILS
                                     join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                     join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                     join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                     join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                     join road in dbContext.EXEC_LSB_MONTHLY_STATUS on details.IMS_PR_ROAD_CODE equals road.IMS_PR_ROAD_CODE into execRoad
                                     from ongoingRoad in execRoad.DefaultIfEmpty()
                                     where
                                     item.IMS_PR_ROAD_CODE == roadCode
                                     && district.MAST_DISTRICT_CODE == details.MAST_DISTRICT_CODE
                                     && block.MAST_BLOCK_CODE == details.MAST_BLOCK_CODE
                                     && year.MAST_YEAR_CODE == details.IMS_YEAR
                                     //&& ongoingRoad.EXEC_ISCOMPLETED != "C"
                                     && details.IMS_PROPOSAL_TYPE == "L"

                                     group new { ongoingRoad, item, district, block, year, details } by /*item.FILE_NAME*/item.QCR_ID into ClusterGroup

                                     let firstproductgroup = ClusterGroup.FirstOrDefault()
                                     let item = firstproductgroup.item
                                     let details = firstproductgroup.details
                                     let district = firstproductgroup.district
                                     let block = firstproductgroup.block
                                     let year = firstproductgroup.year
                                     let minMonth = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_MONTH)
                                     let minYear = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_YEAR)

                                     select new
                                     {
                                         district.MAST_DISTRICT_NAME,
                                         block.MAST_BLOCK_NAME,
                                         year.MAST_YEAR_TEXT,
                                         details.IMS_BATCH,
                                         details.IMS_PACKAGE_ID,
                                         details.IMS_PROPOSAL_TYPE,
                                         details.IMS_ROAD_NAME,
                                         details.IMS_BRIDGE_NAME,
                                         MIN_MONTH = (int?)minMonth,
                                         MIN_YEAR = (int?)minYear,
                                         item.FILE_NAME,
                                         item.FILE_PATH,
                                         item.FILE_UPLOADED_DATE,
                                         item.UPLOAD_REMARK,
                                         item.IMS_PR_ROAD_CODE,
                                         item.IS_FINALIZE,
                                         item.QCR_ID,
                                         item.GRADE_SE,
                                         item.GRADE_SQC
                                     }).Distinct();

                var lstExecution2 = (from item in dbContext.QM_QCR_DETAILS
                                     join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                     join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                     join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                     join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                     join road in dbContext.EXEC_BUILDING_PROGRESS on details.IMS_PR_ROAD_CODE equals road.IMS_PR_ROAD_CODE into execRoad
                                     from ongoingRoad in execRoad.DefaultIfEmpty()
                                     where
                                     item.IMS_PR_ROAD_CODE == roadCode
                                     && district.MAST_DISTRICT_CODE == details.MAST_DISTRICT_CODE
                                     && block.MAST_BLOCK_CODE == details.MAST_BLOCK_CODE
                                     && year.MAST_YEAR_CODE == details.IMS_YEAR
                                     && details.IMS_PROPOSAL_TYPE == "B"

                                     group new { ongoingRoad, item, district, block, year, details } by /*item.FILE_NAME*/item.QCR_ID into ClusterGroup

                                     let firstproductgroup = ClusterGroup.FirstOrDefault()
                                     let item = firstproductgroup.item
                                     let details = firstproductgroup.details
                                     let district = firstproductgroup.district
                                     let block = firstproductgroup.block
                                     let year = firstproductgroup.year
                                     let minMonth = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_MONTH)
                                     let minYear = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_YEAR)

                                     select new
                                     {
                                         district.MAST_DISTRICT_NAME,
                                         block.MAST_BLOCK_NAME,
                                         year.MAST_YEAR_TEXT,
                                         details.IMS_BATCH,
                                         details.IMS_PACKAGE_ID,
                                         details.IMS_PROPOSAL_TYPE,
                                         details.IMS_ROAD_NAME,
                                         details.IMS_BRIDGE_NAME,
                                         MIN_MONTH = (int?)minMonth,
                                         MIN_YEAR = (int?)minYear,
                                         item.FILE_NAME,
                                         item.FILE_PATH,
                                         item.FILE_UPLOADED_DATE,
                                         item.UPLOAD_REMARK,
                                         item.IMS_PR_ROAD_CODE,
                                         item.IS_FINALIZE,
                                         item.QCR_ID,
                                         item.GRADE_SE,
                                         item.GRADE_SQC
                                     }).Distinct();

                totalRecords = lstExecution.Union(lstExecution1).Union(lstExecution2).Count();

                var result = lstExecution.Union(lstExecution1).Union(lstExecution2).Select(executionDetails => new
                {
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_BRIDGE_NAME,
                    executionDetails.MIN_MONTH,
                    executionDetails.MIN_YEAR,
                    executionDetails.FILE_NAME,
                    executionDetails.FILE_PATH,
                    executionDetails.FILE_UPLOADED_DATE,
                    executionDetails.UPLOAD_REMARK,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IS_FINALIZE,
                    executionDetails.QCR_ID,
                    executionDetails.GRADE_SE,
                    executionDetails.GRADE_SQC

                }).ToArray();

                return result.Select(m => new
                {

                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        m.MAST_DISTRICT_NAME == null?string.Empty : m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty : m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty : m.MAST_YEAR_TEXT.ToString(),
                        ("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty : m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? "Road" : m.IMS_PROPOSAL_TYPE == "L" ? "Bridge" :  m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--",
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null ? string.Empty : m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null ? string.Empty : m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null ? string.Empty : m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        (m.MIN_MONTH == null || m.MIN_YEAR == null) ? "Not started" : ((dbContext.MASTER_MONTH.Where(x => x.MAST_MONTH_CODE == m.MIN_MONTH).Select(x => x.MAST_MONTH_FULL_NAME)).FirstOrDefault() + "/" + m.MIN_YEAR).ToString(),
                        m.FILE_UPLOADED_DATE.ToShortDateString(),
                        m.UPLOAD_REMARK == null ? "-" : m.UPLOAD_REMARK,
                        m.GRADE_SE == null ? "-" : m.GRADE_SE,
                        m.GRADE_SQC == null ? "-" : m.GRADE_SQC,
                        //"<a href='"+Path.Combine(ConfigurationManager.AppSettings["QCR_DETAILS_VIRTUAL_PATH"].ToString(), m.FILE_NAME.Split('_')[0])+"/" + m.FILE_NAME +"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>"
                        //"<a href='/QualityMonitoring/GetQCRPdf?id="+URLEncrypt.EncryptParameters1(new String[]{"QCRFile ="+dbContext.QM_QCR_DETAILS.Where(s=>s.IMS_PR_ROAD_CODE==m.IMS_PR_ROAD_CODE && s.IS_LATEST=="Y" && s.QCR_ID==((from item in dbContext.QM_QCR_DETAILS where item.IMS_PR_ROAD_CODE==m.IMS_PR_ROAD_CODE select item.QCR_ID).Max())).FirstOrDefault().FILE_NAME})+"' title='Click here to view QCR pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>",
                        "<a href='/QualityMonitoring/GetQCRPdf?id="+URLEncrypt.EncryptParameters1(new String[]{"QCRFile ="+dbContext.QM_QCR_DETAILS.Where(x => x.QCR_ID == m.QCR_ID).FirstOrDefault().FILE_NAME})+"' title='Click here to view QCR pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>",
                        m.IS_FINALIZE == "Y" ? "-" : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-trash' title='Click here to Delete QCR' onClick ='DeleteFile(\"" + URLEncrypt.EncryptParameters1(new String[]{"QCRFile ="+dbContext.QM_QCR_DETAILS.Where(s=>s.QCR_ID==m.QCR_ID).FirstOrDefault().QCR_ID.ToString()}) + "\");' ></span></td></tr></table></center>",
                        m.IS_FINALIZE == "Y" ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked'></span></td></tr></table></center>" : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-unlocked' title='Click here to Upload QCR' onClick ='Finalize(\"" + URLEncrypt.EncryptParameters1(new String[]{"QCRFile ="+dbContext.QM_QCR_DETAILS.Where(s=>s.QCR_ID==m.QCR_ID).FirstOrDefault().QCR_ID.ToString()}) + "\");' ></span></td></tr></table></center>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetQCRList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region View Uploaded QCR PDF

        public Array GetExecutionListView(int yearCode, int districtCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);

            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                        //join ongoingRoad in dbContext.EXEC_ROADS_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals ongoingRoad.IMS_PR_ROAD_CODE
                                        //join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                        //join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                    join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                    join qmDetails in dbContext.QM_QCR_DETAILS on item.IMS_PR_ROAD_CODE equals qmDetails.IMS_PR_ROAD_CODE
                                    where
                                    //master.TEND_IS_AGREEMENT_FINALIZED == "Y"
                                    item.IMS_SANCTIONED == "Y"
                                    //&& master.TEND_AGREEMENT_TYPE == "C"
                                    && state.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                                    && (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode)
                                    && item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                    && (districtCode == -1 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode == -1 ? 1 : districtCode)
                                    //&& item.IMS_PROPOSAL_TYPE == "P"
                                    && qmDetails.IS_FINALIZE == "Y"
                                    select new
                                    {
                                        district.MAST_DISTRICT_NAME,
                                        block.MAST_BLOCK_NAME,
                                        item.IMS_PACKAGE_ID,
                                        item.IMS_BATCH,
                                        item.IMS_PR_ROAD_CODE,
                                        item.IMS_ROAD_NAME,
                                        item.IMS_BRIDGE_NAME,
                                        year.MAST_YEAR_TEXT,
                                        item.IMS_PROPOSAL_TYPE,
                                        ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                        ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                    : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                        MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                    }).Distinct();

                //var lstExecution1 = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                //                         //join ongoingRoad in dbContext.EXEC_LSB_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals ongoingRoad.IMS_PR_ROAD_CODE
                //                         //join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                //                         // join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                //                     join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                //                     join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                //                     join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                //                     join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                //                     join qmDetails in dbContext.QM_QCR_DETAILS on item.IMS_PR_ROAD_CODE equals qmDetails.IMS_PR_ROAD_CODE
                //                     where
                //                     //master.TEND_IS_AGREEMENT_FINALIZED == "Y"
                //                     item.IMS_SANCTIONED == "Y"
                //                     //&& master.TEND_AGREEMENT_TYPE == "C"
                //                     && state.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                //                     && (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode)
                //                     && item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                //                     && (districtCode == -1 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode == -1 ? 1 : districtCode)
                //                     && item.IMS_PROPOSAL_TYPE == "L"
                //                     && qmDetails.IS_FINALIZE == "Y"
                //                     select new
                //                     {
                //                         district.MAST_DISTRICT_NAME,
                //                         block.MAST_BLOCK_NAME,
                //                         item.IMS_PACKAGE_ID,
                //                         item.IMS_BATCH,
                //                         item.IMS_PR_ROAD_CODE,
                //                         item.IMS_ROAD_NAME,
                //                         item.IMS_BRIDGE_NAME,
                //                         year.MAST_YEAR_TEXT,
                //                         item.IMS_PROPOSAL_TYPE,
                //                         ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                //                         ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                //                                     : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                //                         MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                //                     }).Distinct();

                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_DISTRICT_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_DISTRICT_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.ROAD_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_BRIDGE_NAME,
                    executionDetails.MAST_YEAR_TEXT


                }).ToArray();

                return result.Select(m => new
                {

                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                {
                    m.MAST_DISTRICT_NAME == null ? string.Empty : m.MAST_DISTRICT_NAME,
                    m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                    m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                    ("Batch :"+ m.IMS_BATCH).ToString(),
                    m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                    URLEncrypt.EncryptParameters1(new string[] { "IMS_road_code =" + m.IMS_PR_ROAD_CODE.ToString() }),
                    m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                    m.ROAD_COST.ToString(),
                    m.ROAD_LENGTH.ToString(),
                    m.MAINTENANCE_COST.ToString(),
                    m.IMS_PROPOSAL_TYPE == "P" ? "Road" : m.IMS_PROPOSAL_TYPE == "L"?"Bridge": m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--",
                    (dbContext.QM_QCR_DETAILS.Where(s=>s.IMS_PR_ROAD_CODE==m.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "-" : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-search' title='Click here to View Uploaded QCR' onClick ='ViewUploadedQCR(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"),
                }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetExecutionListView().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetQCRListToView(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                var lstExecution = (from item in dbContext.QM_QCR_DETAILS
                                    join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                    join road in dbContext.EXEC_ROADS_MONTHLY_STATUS on details.IMS_PR_ROAD_CODE equals road.IMS_PR_ROAD_CODE into execRoad
                                    from ongoingRoad in execRoad.DefaultIfEmpty()
                                    where
                                    item.IMS_PR_ROAD_CODE == roadCode
                                    && district.MAST_DISTRICT_CODE == details.MAST_DISTRICT_CODE
                                    && block.MAST_BLOCK_CODE == details.MAST_BLOCK_CODE
                                    && year.MAST_YEAR_CODE == details.IMS_YEAR
                                    && details.IMS_PROPOSAL_TYPE == "P"
                                    && item.IS_FINALIZE == "Y"

                                    group new { ongoingRoad, item, district, block, year, details } by /*item.FILE_NAME*/item.QCR_ID into ClusterGroup

                                    let firstproductgroup = ClusterGroup.FirstOrDefault()
                                    let item = firstproductgroup.item
                                    let details = firstproductgroup.details
                                    let district = firstproductgroup.district
                                    let block = firstproductgroup.block
                                    let year = firstproductgroup.year
                                    let minMonth = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_MONTH)
                                    let minYear = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_YEAR)

                                    select new
                                    {
                                        district.MAST_DISTRICT_NAME,
                                        block.MAST_BLOCK_NAME,
                                        year.MAST_YEAR_TEXT,
                                        details.IMS_BATCH,
                                        details.IMS_PACKAGE_ID,
                                        details.IMS_PROPOSAL_TYPE,
                                        details.IMS_ROAD_NAME,
                                        details.IMS_BRIDGE_NAME,
                                        MIN_MONTH = (int?)minMonth,
                                        MIN_YEAR = (int?)minYear,
                                        item.FILE_NAME,
                                        item.FILE_PATH,
                                        item.FILE_UPLOADED_DATE,
                                        item.UPLOAD_REMARK,
                                        item.IMS_PR_ROAD_CODE,
                                        item.IS_FINALIZE,
                                        item.QCR_ID,
                                        item.GRADE_SE,
                                        item.GRADE_SQC
                                    }).Distinct();

                var lstExecution1 = (from item in dbContext.QM_QCR_DETAILS
                                     join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                     join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                     join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                     join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                     join road in dbContext.EXEC_LSB_MONTHLY_STATUS on details.IMS_PR_ROAD_CODE equals road.IMS_PR_ROAD_CODE into execRoad
                                     from ongoingRoad in execRoad.DefaultIfEmpty()
                                     where
                                     item.IMS_PR_ROAD_CODE == roadCode
                                     && district.MAST_DISTRICT_CODE == details.MAST_DISTRICT_CODE
                                     && block.MAST_BLOCK_CODE == details.MAST_BLOCK_CODE
                                     && year.MAST_YEAR_CODE == details.IMS_YEAR
                                     && details.IMS_PROPOSAL_TYPE == "L"
                                     && item.IS_FINALIZE == "Y"

                                     group new { ongoingRoad, item, district, block, year, details } by item.QCR_ID into ClusterGroup

                                     let firstproductgroup = ClusterGroup.FirstOrDefault()
                                     let item = firstproductgroup.item
                                     let details = firstproductgroup.details
                                     let district = firstproductgroup.district
                                     let block = firstproductgroup.block
                                     let year = firstproductgroup.year
                                     let minMonth = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_MONTH)
                                     let minYear = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_YEAR)

                                     select new
                                     {
                                         district.MAST_DISTRICT_NAME,
                                         block.MAST_BLOCK_NAME,
                                         year.MAST_YEAR_TEXT,
                                         details.IMS_BATCH,
                                         details.IMS_PACKAGE_ID,
                                         details.IMS_PROPOSAL_TYPE,
                                         details.IMS_ROAD_NAME,
                                         details.IMS_BRIDGE_NAME,
                                         MIN_MONTH = (int?)minMonth,
                                         MIN_YEAR = (int?)minYear,
                                         item.FILE_NAME,
                                         item.FILE_PATH,
                                         item.FILE_UPLOADED_DATE,
                                         item.UPLOAD_REMARK,
                                         item.IMS_PR_ROAD_CODE,
                                         item.IS_FINALIZE,
                                         item.QCR_ID,
                                         item.GRADE_SE,
                                         item.GRADE_SQC
                                     }).Distinct();

                var lstExecution2 = (from item in dbContext.QM_QCR_DETAILS
                                     join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                     join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                     join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                     join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                     join road in dbContext.EXEC_BUILDING_PROGRESS on details.IMS_PR_ROAD_CODE equals road.IMS_PR_ROAD_CODE into execRoad
                                     from ongoingRoad in execRoad.DefaultIfEmpty()
                                     where
                                     item.IMS_PR_ROAD_CODE == roadCode
                                     && district.MAST_DISTRICT_CODE == details.MAST_DISTRICT_CODE
                                     && block.MAST_BLOCK_CODE == details.MAST_BLOCK_CODE
                                     && year.MAST_YEAR_CODE == details.IMS_YEAR
                                     && details.IMS_PROPOSAL_TYPE == "B"
                                     && item.IS_FINALIZE == "Y"

                                     group new { ongoingRoad, item, district, block, year, details } by item.QCR_ID into ClusterGroup

                                     let firstproductgroup = ClusterGroup.FirstOrDefault()
                                     let item = firstproductgroup.item
                                     let details = firstproductgroup.details
                                     let district = firstproductgroup.district
                                     let block = firstproductgroup.block
                                     let year = firstproductgroup.year
                                     let minMonth = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_MONTH)
                                     let minYear = ClusterGroup.Min(m => m.ongoingRoad.EXEC_PROG_YEAR)

                                     select new
                                     {
                                         district.MAST_DISTRICT_NAME,
                                         block.MAST_BLOCK_NAME,
                                         year.MAST_YEAR_TEXT,
                                         details.IMS_BATCH,
                                         details.IMS_PACKAGE_ID,
                                         details.IMS_PROPOSAL_TYPE,
                                         details.IMS_ROAD_NAME,
                                         details.IMS_BRIDGE_NAME,
                                         MIN_MONTH = (int?)minMonth,
                                         MIN_YEAR = (int?)minYear,
                                         item.FILE_NAME,
                                         item.FILE_PATH,
                                         item.FILE_UPLOADED_DATE,
                                         item.UPLOAD_REMARK,
                                         item.IMS_PR_ROAD_CODE,
                                         item.IS_FINALIZE,
                                         item.QCR_ID,
                                         item.GRADE_SE,
                                         item.GRADE_SQC
                                     }).Distinct();

                totalRecords = lstExecution.Union(lstExecution1).Union(lstExecution2).Count();

                var result = lstExecution.Union(lstExecution1).Union(lstExecution2).Select(executionDetails => new
                {
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_BRIDGE_NAME,
                    executionDetails.MIN_MONTH,
                    executionDetails.MIN_YEAR,
                    executionDetails.FILE_NAME,
                    executionDetails.FILE_PATH,
                    executionDetails.FILE_UPLOADED_DATE,
                    executionDetails.UPLOAD_REMARK,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IS_FINALIZE,
                    executionDetails.QCR_ID,
                    executionDetails.GRADE_SE,
                    executionDetails.GRADE_SQC

                }).ToArray();

                return result.Select(m => new
                {

                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        m.MAST_DISTRICT_NAME == null?string.Empty : m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty : m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty : m.MAST_YEAR_TEXT.ToString(),
                        ("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty : m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? "Road" : m.IMS_PROPOSAL_TYPE == "L" ? "Bridge" : m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--",
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null ? string.Empty : m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null ? string.Empty : m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null ? string.Empty : m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        (m.MIN_MONTH == null || m.MIN_YEAR == null) ? "Not started" : ((dbContext.MASTER_MONTH.Where(x => x.MAST_MONTH_CODE == m.MIN_MONTH).Select(x => x.MAST_MONTH_FULL_NAME)).FirstOrDefault() + "/" + m.MIN_YEAR).ToString(),
                        m.FILE_UPLOADED_DATE.ToShortDateString(),
                        m.UPLOAD_REMARK == null ? "-" : m.UPLOAD_REMARK,
                        m.GRADE_SE == null ? "-" : m.GRADE_SE,
                        m.GRADE_SQC == null ? "-" : m.GRADE_SQC,
                        //"<a href='/QualityMonitoring/GetQCRPdf?id="+URLEncrypt.EncryptParameters1(new String[]{"QCRFile ="+dbContext.QM_QCR_DETAILS.Where(s=>s.IMS_PR_ROAD_CODE==m.IMS_PR_ROAD_CODE && s.IS_LATEST=="Y" && s.QCR_ID==((from item in dbContext.QM_QCR_DETAILS where item.IMS_PR_ROAD_CODE==m.IMS_PR_ROAD_CODE select item.QCR_ID).Max())).FirstOrDefault().FILE_NAME})+"' title='Click here to view QCR pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>",
                        "<a href='/QualityMonitoring/GetQCRPdf?id="+URLEncrypt.EncryptParameters1(new String[]{"QCRFile ="+dbContext.QM_QCR_DETAILS.Where(x => x.QCR_ID == m.QCR_ID).FirstOrDefault().FILE_NAME})+"' title='Click here to view QCR pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>",
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetQCRListToView().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion


        #region ATR

        /// <summary>
        /// ATR Details List
        /// </summary>
        /// <param name="stateCode"></param>
        /// <param name="monitorCode"></param>
        /// <param name="fromMonth"></param>
        /// <param name="fromYear"></param>
        /// <param name="toMonth"></param>
        /// <param name="toYear"></param>
        /// <param name="atrStatus"></param>
        /// <param name="rdStatus"></param>
        /// <returns></returns>
        /// 
          #region technology details against road

        public List<USP_FDR_TECH_DETAILS_AGAINST_ROAD_Result> FDRTechDetailsDAL(int roadCode) //ATR_Change
        {
            List<USP_FDR_TECH_DETAILS_AGAINST_ROAD_Result> inspList = new List<USP_FDR_TECH_DETAILS_AGAINST_ROAD_Result>();
            dbContext = new PMGSYEntities();

            try
            {

                inspList = dbContext.USP_FDR_TECH_DETAILS_AGAINST_ROAD(roadCode).ToList<USP_FDR_TECH_DETAILS_AGAINST_ROAD_Result>();

                return inspList;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "FDRTechDetailsDAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }
        #endregion





        public List<qm_inspection_list_atrr_Result> ATRDetailssDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                int toMonth, int toYear, string atrStatus, string rdStatus, int PmgsyScheme, string flag) //ATR_Change
        {
            List<qm_inspection_list_atrr_Result> atrItemList = new List<qm_inspection_list_atrr_Result>();
            dbContext = new PMGSYEntities();
            if (rdStatus.Equals("M") && PMGSYSession.Current.RoleCode == 8)
            {
                try
                {
                    atrItemList = dbContext.qm_inspection_list_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, 0, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atrr_Result>();
                    return atrItemList;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "ATRDetailsDAL");
                    return null;
                }
                finally
                {
                    dbContext.Dispose();
                }

            }
            else
            {
                try
                {
                    //if (PMGSYSession.Current.RoleCode == 5)     // CQCAdmin
                    if (PMGSYSession.Current.RoleCode == 5)
                    {
                        atrItemList = dbContext.qm_inspection_list_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 9)// CQC 
                    {
                        atrItemList = dbContext.qm_inspection_list_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) // SQC
                    {
                        atrItemList = dbContext.qm_inspection_list_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, 0, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54) // PIU or PIURCPLWE
                    {
                        atrItemList = dbContext.qm_inspection_list_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 48) // SQCQA
                    {
                        atrItemList = dbContext.qm_inspection_list_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, PMGSYSession.Current.AdminNdCode, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atrr_Result>();
                    }
                    return atrItemList;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "ATRDetailsDAL");
                    return null;
                }
                finally
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<qm_inspection_list_Against_Road_Result> ATRInspDetailsDAL(int roadCode) //ATR_Change
        {
            List<qm_inspection_list_Against_Road_Result> inspList = new List<qm_inspection_list_Against_Road_Result>();
            dbContext = new PMGSYEntities();

            try
            {

                inspList = dbContext.qm_inspection_list_Against_Road(roadCode).ToList<qm_inspection_list_Against_Road_Result>();

                return inspList;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ATRInspDetailsDAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }



        public List<qm_inspection_list_atr_Result> ATRDetailsDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                 int toMonth, int toYear, string atrStatus, string rdStatus, int PmgsyScheme) //ATR_Change
        {
            List<qm_inspection_list_atr_Result> atrItemList = new List<qm_inspection_list_atr_Result>();
            dbContext = new PMGSYEntities();
            if (rdStatus.Equals("M") && PMGSYSession.Current.RoleCode == 8)
            {
                try
                {
                    atrItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, 0, 0, PmgsyScheme/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                    return atrItemList;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "ATRDetailsDAL");
                    return null;
                }
                finally
                {
                    dbContext.Dispose();
                }

            }
            else
            {
                try
                {
                    //if (PMGSYSession.Current.RoleCode == 5)     // CQCAdmin
                    if (PMGSYSession.Current.RoleCode == 5)
                    {
                        atrItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, PmgsyScheme/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 9)// CQC 
                    {
                        atrItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, PmgsyScheme/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) // SQC
                    {
                        atrItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, 0, 0, PmgsyScheme/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54) // PIU or PIURCPLWE
                    {
                        atrItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, 0, PmgsyScheme/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 48) // SQCQA
                    {
                        atrItemList = dbContext.qm_inspection_list_atr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, PMGSYSession.Current.AdminNdCode, PmgsyScheme/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_atr_Result>();
                    }
                    return atrItemList;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "ATRDetailsDAL");
                    return null;
                }
                finally
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Regrade ATR grade
        /// </summary>
        /// <param name="qmATRRegradeModel"></param>
        /// <returns></returns>
        public string QMATRRegradeDAL(QMATRRegradeModel qmATRRegradeModel)
        {
            if (qmATRRegradeModel.reasonCode == 0)
            {
                qmATRRegradeModel.reasonCode = null;
            }
            try
            {
                dbContext = new PMGSYEntities();
                int atrId = dbContext.QUALITY_ATR_FILE.Where(c => c.QM_OBSERVATION_ID == qmATRRegradeModel.QM_OBSERVATION_ID).Select(c => c.QM_ATR_ID).Max();
                dbContext.USP_QM_REGRADE_ATR(qmATRRegradeModel.QM_OBSERVATION_ID, qmATRRegradeModel.ATR_REGRADE_STATUS, atrId, qmATRRegradeModel.ATR_REGRADE_REMARKS, qmATRRegradeModel.reasonCode, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete ATR uploaded by monitor
        /// </summary>
        /// <param name="obsId"></param>
        /// <param name="atrId"></param>
        /// <returns></returns>
        public string QMDeleteATRDetailsDAL(int obsId, int atrId)
        {
            dbContext = new PMGSYEntities();
            try
            {
                QUALITY_ATR_FILE qmATRFile = dbContext.QUALITY_ATR_FILE.Where(a => a.QM_OBSERVATION_ID == obsId && a.QM_ATR_ID == atrId).First();
                qmATRFile.ATR_IS_DELETED = "Y";

                //Added By Abhishek kamble 30-nov-2013
                qmATRFile.USERID = PMGSYSession.Current.UserId;
                qmATRFile.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(qmATRFile).State = System.Data.Entity.EntityState.Modified;

                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(obsId);
                qmObservationMaster.QM_ATR_STATUS = "N";

                //Added By Abhishek kamble 30-nov-2013
                qmObservationMaster.USERID = PMGSYSession.Current.UserId;
                qmObservationMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(qmObservationMaster).State = System.Data.Entity.EntityState.Modified;

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //----------------- ADDED BY ROHIT BORSE for ATR MARK VERIFICATION
        public Array VerificationATRListByObsId_RoadCodeDAL(int roadCode, string inspectionDate, int NQM_ObservationId, int NQM_ATRId, int? page, int? rows, string sidx, string sord, out long totalrecords, string filters, out List<string> selectedIdList)
        {


            QMATRDetailsModel atrDetailsModel = new QMATRDetailsModel();
            dbContext = new PMGSYEntities();
            string inspDate = DateTime.Parse(inspectionDate).ToShortDateString();
            var splittedDate = inspDate.Split('/');
            DateTime? qmInspDate = new DateTime(int.Parse(splittedDate[2]), int.Parse(splittedDate[1]), int.Parse(splittedDate[0]));
            int statecode = Convert.ToInt32(PMGSYSession.Current.StateCode);


            try
            {

                // If Role Not CQC
                if (PMGSYSession.Current.RoleCode != 9)
                {
                    List<string> MonitorName;

                    var list1 = (from obsm in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                 join isp in dbContext.IMS_SANCTIONED_PROJECTS on obsm.IMS_PR_ROAD_CODE equals isp.IMS_PR_ROAD_CODE
                                 join qmschedule in dbContext.QUALITY_QM_SCHEDULE on obsm.ADMIN_SCHEDULE_CODE equals qmschedule.ADMIN_SCHEDULE_CODE
                                 join aqm in dbContext.ADMIN_QUALITY_MONITORS on qmschedule.ADMIN_QM_CODE equals aqm.ADMIN_QM_CODE
                                 join qmscheduleDetail in dbContext.QUALITY_QM_SCHEDULE_DETAILS on qmschedule.ADMIN_SCHEDULE_CODE equals qmscheduleDetail.ADMIN_SCHEDULE_CODE
                                 where isp.IMS_PR_ROAD_CODE == roadCode && obsm.IMS_PR_ROAD_CODE == roadCode &&
                                 aqm.ADMIN_QM_TYPE == "S" &&
                                 (obsm.QM_OVERALL_GRADE == 1 || obsm.QM_OVERALL_GRADE == 2 || obsm.QM_OVERALL_GRADE == 3) &&
                                 isp.MAST_STATE_CODE == isp.MAST_STATE_CODE &&
                                 obsm.QM_INSPECTION_DATE >= qmInspDate &&
                                 isp.IMS_PR_ROAD_CODE == qmscheduleDetail.IMS_PR_ROAD_CODE
                                 select new
                                 {
                                     obsm.QM_OBSERVATION_ID,
                                     qmschedule.ADMIN_QM_CODE,
                                     isp.MAST_STATE_CODE,
                                     isp.MAST_DISTRICT_CODE,
                                     isp.MAST_BLOCK_CODE,
                                     isp.IMS_PACKAGE_ID,
                                     IMS_YEAR1 = isp.IMS_YEAR,
                                     IMS_YEAR2 = isp.IMS_YEAR + 1,
                                     isp.IMS_ROAD_NAME,
                                     isp.IMS_PROPOSAL_TYPE,
                                     obsm.QM_INSPECTED_START_CHAINAGE,
                                     obsm.QM_INSPECTED_END_CHAINAGE,
                                     obsm.QM_INSPECTION_DATE,
                                     isp.IMS_BRIDGE_LENGTH,
                                     isp.IMS_PAV_LENGTH,
                                     isp.IMS_ISCOMPLETED,
                                     isp.MAST_PMGSY_SCHEME,
                                     obsm.QM_OVERALL_GRADE,
                                     isp.IMS_PR_ROAD_CODE,
                                     aqm.ADMIN_QM_TYPE,
                                     aqm.ADMIN_QM_LNAME,
                                     aqm.ADMIN_QM_MNAME,
                                     aqm.ADMIN_QM_FNAME,
                                     qmscheduleDetail.ADMIN_IS_ENQUIRY
                                 }).OrderBy(s => s.QM_OBSERVATION_ID);

                    totalrecords = list1.Count();

                    List<int?> SelectedIdListInt = new List<int?>();
                    selectedIdList = new List<string>();

                    //------------- Get Previously seleceted Checks
                    SelectedIdListInt = dbContext.QUALITY_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRId && x.QM_OBSERVATION_ID == NQM_ObservationId && x.ATR_VERIFICATION_FINALIZED == "Y").Select(x => x.SQM_OBSERVATION_ID).ToList<int?>();

                    foreach (int item in SelectedIdListInt)
                    {
                        selectedIdList.Add(item.ToString());
                    }


                    var result = list1.Select(item => new
                    {
                        ObservationId = item.QM_OBSERVATION_ID,
                        RoadCode = item.IMS_PR_ROAD_CODE,
                        Monitor = (string.IsNullOrEmpty(item.ADMIN_QM_FNAME) ? "" : item.ADMIN_QM_FNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_MNAME) ? "" : item.ADMIN_QM_MNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_LNAME) ? "" : item.ADMIN_QM_LNAME),
                        State = dbContext.MASTER_STATE.Where(md => md.MAST_STATE_CODE == item.MAST_STATE_CODE).Select(s => s.MAST_STATE_NAME),
                        District = dbContext.MASTER_DISTRICT.Where(md => md.MAST_DISTRICT_CODE == item.MAST_DISTRICT_CODE).Select(s => s.MAST_DISTRICT_NAME),
                        Block = dbContext.MASTER_BLOCK.Where(md => md.MAST_BLOCK_CODE == item.MAST_BLOCK_CODE).Select(s => s.MAST_BLOCK_NAME),
                        Package = item.IMS_PACKAGE_ID,
                        SanctionYear = item.IMS_YEAR1 + "-" + item.IMS_YEAR2,
                        RoadName = item.IMS_ROAD_NAME,
                        PropType = item.IMS_PROPOSAL_TYPE == "L" ? "LSB" : "Road",
                        InspFrmChainage = item.QM_INSPECTED_START_CHAINAGE,
                        InspToChainage = item.QM_INSPECTED_END_CHAINAGE,
                        InspDate = item.QM_INSPECTION_DATE,
                        TotalLength = item.IMS_PROPOSAL_TYPE == "L" ? item.IMS_BRIDGE_LENGTH : item.IMS_PAV_LENGTH,
                        RdStatus = item.IMS_ISCOMPLETED.Equals("C") ? "Completed" : "In Progress",
                        Ground_Verification_Inspection = item.ADMIN_IS_ENQUIRY.Equals("Y") ? "Yes" : "No",
                        Scheme = item.MAST_PMGSY_SCHEME == 1 ? "PMGSY I" : item.MAST_PMGSY_SCHEME == 2 ? "PMGSY II" : "PMGSY III",
                        OverallGrade = dbContext.MASTER_GRADE_TYPE.Where(s => s.MAST_GRADE_CODE == item.QM_OVERALL_GRADE).Select(s => s.MAST_GRADE_NAME),

                    }).ToArray();

                    return result;
                }
                else
                {
                    // FOR CQC show only Finalized list for Mark ATR verification
                    int? SQM_ObservationId = dbContext.QUALITY_ATR_FILE.Where(a => a.QM_ATR_ID == NQM_ATRId).Select(a => a.SQM_OBSERVATION_ID).First();


                    var list1 = (from obsm in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                 join isp in dbContext.IMS_SANCTIONED_PROJECTS on obsm.IMS_PR_ROAD_CODE equals isp.IMS_PR_ROAD_CODE
                                 join qmschedule in dbContext.QUALITY_QM_SCHEDULE on obsm.ADMIN_SCHEDULE_CODE equals qmschedule.ADMIN_SCHEDULE_CODE
                                 join aqm in dbContext.ADMIN_QUALITY_MONITORS on qmschedule.ADMIN_QM_CODE equals aqm.ADMIN_QM_CODE
                                 join qmscheduleDetail in dbContext.QUALITY_QM_SCHEDULE_DETAILS on qmschedule.ADMIN_SCHEDULE_CODE equals qmscheduleDetail.ADMIN_SCHEDULE_CODE
                                 where isp.IMS_PR_ROAD_CODE == roadCode && obsm.IMS_PR_ROAD_CODE == roadCode &&
                                 aqm.ADMIN_QM_TYPE == "S" &&
                                 (obsm.QM_OVERALL_GRADE == 1 || obsm.QM_OVERALL_GRADE == 2 || obsm.QM_OVERALL_GRADE == 3) &&
                                 isp.MAST_STATE_CODE == isp.MAST_STATE_CODE &&
                                 obsm.QM_INSPECTION_DATE >= qmInspDate &&
                                 obsm.QM_OBSERVATION_ID == SQM_ObservationId &&// to show finalize list only for CQC
                                 isp.IMS_PR_ROAD_CODE == qmscheduleDetail.IMS_PR_ROAD_CODE
                                 select new
                                 {
                                     obsm.QM_OBSERVATION_ID,
                                     qmschedule.ADMIN_QM_CODE,
                                     isp.MAST_STATE_CODE,
                                     isp.MAST_DISTRICT_CODE,
                                     isp.MAST_BLOCK_CODE,
                                     isp.IMS_PACKAGE_ID,
                                     IMS_YEAR1 = isp.IMS_YEAR,
                                     IMS_YEAR2 = isp.IMS_YEAR + 1,
                                     isp.IMS_ROAD_NAME,
                                     isp.IMS_PROPOSAL_TYPE,
                                     obsm.QM_INSPECTED_START_CHAINAGE,
                                     obsm.QM_INSPECTED_END_CHAINAGE,
                                     obsm.QM_INSPECTION_DATE,
                                     isp.IMS_BRIDGE_LENGTH,
                                     isp.IMS_PAV_LENGTH,
                                     isp.IMS_ISCOMPLETED,
                                     isp.MAST_PMGSY_SCHEME,
                                     obsm.QM_OVERALL_GRADE,
                                     isp.IMS_PR_ROAD_CODE,
                                     aqm.ADMIN_QM_TYPE,
                                     aqm.ADMIN_QM_LNAME,
                                     aqm.ADMIN_QM_MNAME,
                                     aqm.ADMIN_QM_FNAME,
                                     qmscheduleDetail.ADMIN_IS_ENQUIRY
                                 }).OrderBy(s => s.QM_OBSERVATION_ID);

                    totalrecords = list1.Count();

                    List<int?> SelectedIdListInt = new List<int?>();
                    selectedIdList = new List<string>();

                    //------------- Get Previously seleceted Checks
                    SelectedIdListInt = dbContext.QUALITY_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRId && x.QM_OBSERVATION_ID == NQM_ObservationId && x.ATR_VERIFICATION_FINALIZED == "Y").Select(x => x.SQM_OBSERVATION_ID).ToList<int?>();

                    foreach (int item in SelectedIdListInt)
                    {
                        selectedIdList.Add(item.ToString());
                    }

                    var result = list1.Select(item => new
                    {

                        ObservationId = item.QM_OBSERVATION_ID,
                        RoadCode = item.IMS_PR_ROAD_CODE,
                        Monitor = (string.IsNullOrEmpty(item.ADMIN_QM_FNAME) ? "" : item.ADMIN_QM_FNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_MNAME) ? "" : item.ADMIN_QM_MNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_LNAME) ? "" : item.ADMIN_QM_LNAME),
                        State = dbContext.MASTER_STATE.Where(md => md.MAST_STATE_CODE == item.MAST_STATE_CODE).Select(s => s.MAST_STATE_NAME),
                        District = dbContext.MASTER_DISTRICT.Where(md => md.MAST_DISTRICT_CODE == item.MAST_DISTRICT_CODE).Select(s => s.MAST_DISTRICT_NAME),
                        Block = dbContext.MASTER_BLOCK.Where(md => md.MAST_BLOCK_CODE == item.MAST_BLOCK_CODE).Select(s => s.MAST_BLOCK_NAME),
                        Package = item.IMS_PACKAGE_ID,
                        SanctionYear = item.IMS_YEAR1 + "-" + item.IMS_YEAR2,
                        RoadName = item.IMS_ROAD_NAME,
                        PropType = item.IMS_PROPOSAL_TYPE == "L" ? "LSB" : "Road",
                        InspFrmChainage = item.QM_INSPECTED_START_CHAINAGE,
                        InspToChainage = item.QM_INSPECTED_END_CHAINAGE,
                        InspDate = item.QM_INSPECTION_DATE,
                        TotalLength = item.IMS_PROPOSAL_TYPE == "L" ? item.IMS_BRIDGE_LENGTH : item.IMS_PAV_LENGTH,
                        RdStatus = item.IMS_ISCOMPLETED.Equals("C") ? "Completed" : "In Progress",
                        Ground_Verification_Inspection = item.ADMIN_IS_ENQUIRY.Equals("Y") ? "Yes" : "No",
                        Scheme = item.MAST_PMGSY_SCHEME == 1 ? "PMGSY I" : item.MAST_PMGSY_SCHEME == 2 ? "PMGSY II" : "PMGSY III",
                        OverallGrade = dbContext.MASTER_GRADE_TYPE.Where(s => s.MAST_GRADE_CODE == item.QM_OVERALL_GRADE).Select(s => s.MAST_GRADE_NAME),

                    }).ToArray();

                    return result;
                }


            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.VerificationATRListByObsId_RoadCodeDAL");
                totalrecords = 0;
                selectedIdList = new List<string>();
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //----------------- ADDED BY ROHIT BORSE for ATR MARK VERIFICATION
        public bool savefinalizedMarkVerificationATRDAL(int SQM_ObservationId, int NQM_ObservationId, int NQM_ATRid)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    QUALITY_ATR_FILE obj_QualityATRFile = new QUALITY_ATR_FILE();

                    obj_QualityATRFile = dbContext.QUALITY_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRid && x.QM_OBSERVATION_ID == NQM_ObservationId).First();

                    if (obj_QualityATRFile != null)
                    {
                        obj_QualityATRFile.ATR_VERIFICATION_FINALIZED = "Y";
                        obj_QualityATRFile.SQM_OBSERVATION_ID = SQM_ObservationId;
                        dbContext.Entry(obj_QualityATRFile).State = EntityState.Modified;
                    }

                    dbContext.SaveChanges();
                    ts.Complete();
                    return true;
                }

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        //Below Code Added on 30-01-2023
        public bool savefinalizedMarkVerificationATRFileDAL(int SQM_ObservationId, int NQM_ObservationId, int NQM_ATRid, HttpRequestBase Request)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    //QUALITY_ATR_FILE obj_QualityATRFile = new QUALITY_ATR_FILE();

                    //obj_QualityATRFile = dbContext.QUALITY_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRid && x.QM_OBSERVATION_ID == NQM_ObservationId).First();

                    //if (obj_QualityATRFile != null)
                    //{
                    //    obj_QualityATRFile.ATR_VERIFICATION_FINALIZED = "Y";
                    //    obj_QualityATRFile.SQM_OBSERVATION_ID = SQM_ObservationId;
                    //    dbContext.Entry(obj_QualityATRFile).State = EntityState.Modified;
                    //}
                    string atrRegradeStatus = dbContext.QUALITY_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRid).Any() ? dbContext.QUALITY_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRid).Select(x => x.ATR_REGRADE_STATUS).FirstOrDefault() : null;

                    if (!(dbContext.QUALITY_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRid).Any() && atrRegradeStatus != "R"))
                    {
                        #region File Saving
                        String StorageRoot = (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38) ? ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_MAINTENANCE_ATR"] : ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_ATR"];
                        QUALITY_ATR_FILE qualityATRFile = new QUALITY_ATR_FILE();
                        //var fileName = request.Files[i].FileName.ToString();
                        //var fullPath = Path.Combine(StorageRoot, fileName);

                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            qualityATRFile.QM_OBSERVATION_ID = NQM_ObservationId;
                            qualityATRFile.ATR_FILE_NAME = Request.Files[i].FileName.ToString();
                            qualityATRFile.ATR_ENTRY_DATE = DateTime.Now;
                            qualityATRFile.ATR_REGRADE_STATUS = "U";   //Submitted
                            qualityATRFile.ATR_REGRADE_REMARKS = null;
                            qualityATRFile.ATR_IS_DELETED = "N";
                            qualityATRFile.ATR_VERIFICATION_FINALIZED = "Y";
                            qualityATRFile.SQM_OBSERVATION_ID = SQM_ObservationId;

                            Int32? MaxID;
                            if (dbContext.QUALITY_ATR_FILE.Count() == 0)
                            {
                                MaxID = 0;
                            }
                            else
                            {
                                MaxID = (from c in dbContext.QUALITY_ATR_FILE select (Int32?)c.QM_ATR_ID ?? 0).Max();
                            }
                            ++MaxID;

                            qualityATRFile.QM_ATR_ID = Convert.ToInt32(MaxID);
                            qualityATRFile.USERID = PMGSYSession.Current.UserId;
                            qualityATRFile.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                            dbContext.QUALITY_ATR_FILE.Add(qualityATRFile);

                            HttpPostedFileBase file = Request.Files[i];
                            if (File.Exists(Path.Combine(StorageRoot, MaxID.ToString() + ".pdf")))
                            {
                                File.Delete(Path.Combine(StorageRoot, MaxID.ToString() + ".pdf"));
                                file.SaveAs(Path.Combine(StorageRoot, MaxID.ToString() + ".pdf"));
                            }
                            else
                            {
                                file.SaveAs(Path.Combine(StorageRoot, MaxID.ToString() + ".pdf"));
                            }

                        }

                        #endregion
                    }
                    else
                    {
                        QUALITY_ATR_FILE qualityAtrFile = dbContext.QUALITY_ATR_FILE.Find(NQM_ATRid);
                        qualityAtrFile.ATR_VERIFICATION_FINALIZED = "Y";
                        qualityAtrFile.SQM_OBSERVATION_ID = SQM_ObservationId;
                        dbContext.Entry(qualityAtrFile).State = System.Data.Entity.EntityState.Modified;

                    }


                    QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(NQM_ObservationId);
                    qmObservationMaster.QM_ATR_STATUS = "U";
                    dbContext.Entry(qmObservationMaster).State = System.Data.Entity.EntityState.Modified;

                    dbContext.SaveChanges();
                    ts.Complete();
                    return true;
                }

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        #endregion


        #region 2 tier atr vikky
        public List<qm_inspection_list_2_Tier_atrr_Result> ATR2TierDetailssDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                int toMonth, int toYear, string atrStatus, string rdStatus, int PmgsyScheme, string flag) //ATR_Change
        {
            List<qm_inspection_list_2_Tier_atrr_Result> atrItemList = new List<qm_inspection_list_2_Tier_atrr_Result>();
            dbContext = new PMGSYEntities();
            if (rdStatus.Equals("M") && PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54)
            {
                try
                {
                    atrItemList = dbContext.qm_inspection_list_2_Tier_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_2_Tier_atrr_Result>();
                    return atrItemList;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "ATRDetailsDAL");
                    return null;
                }
                finally
                {
                    dbContext.Dispose();
                }

            }
            else
            {
                try
                {
                    //if (PMGSYSession.Current.RoleCode == 5)     // CQCAdmin
                    if (PMGSYSession.Current.RoleCode == 5)
                    {
                        atrItemList = dbContext.qm_inspection_list_2_Tier_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_2_Tier_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 9)// CQC 
                    {
                        atrItemList = dbContext.qm_inspection_list_2_Tier_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, stateCode, 0, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_2_Tier_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) // SQC
                    {
                        atrItemList = dbContext.qm_inspection_list_2_Tier_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, 0, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_2_Tier_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54) // PIU or PIURCPLWE
                    {
                        atrItemList = dbContext.qm_inspection_list_2_Tier_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, 0, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_2_Tier_atrr_Result>();
                    }
                    else if (PMGSYSession.Current.RoleCode == 48) // SQCQA
                    {
                        atrItemList = dbContext.qm_inspection_list_2_Tier_atrr(monitorCode, fromMonth, fromYear, toMonth, toYear, atrStatus, rdStatus, PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, PMGSYSession.Current.AdminNdCode, PmgsyScheme, flag/*, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)*/).ToList<qm_inspection_list_2_Tier_atrr_Result>();
                    }
                    return atrItemList;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "QualityMonitoringDAL.ATR2TierDetailssDAL()");
                    return null;
                }
                finally
                {
                    dbContext.Dispose();
                }
            }
        }


        public Array Get2TierPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId, int QM_ATR_ID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //List<QUALITY_SQM_ATR_FILE> listATRFiles = dbContext.QUALITY_SQM_ATR_FILE.Where(p => p.QM_OBSERVATION_ID == obsId /*&& p.ATR_IS_DELETED == "N" */&& p.QM_ATR_ID == QM_ATR_ID).ToList();
                List<QUALITY_SQM_ATR_FILE> listATRFiles = null;
                if (QM_ATR_ID == 0)
                {
                    listATRFiles = dbContext.QUALITY_SQM_ATR_FILE.Where(p => p.QM_OBSERVATION_ID == obsId /*&& p.ATR_IS_DELETED == "N" */).ToList();
                }
                else
                {
                    listATRFiles = dbContext.QUALITY_SQM_ATR_FILE.Where(p => p.QM_OBSERVATION_ID == obsId /*&& p.ATR_IS_DELETED == "N" */&& p.QM_ATR_ID == QM_ATR_ID).ToList();
                }
                IQueryable<QUALITY_SQM_ATR_FILE> query = listATRFiles.AsQueryable<QUALITY_SQM_ATR_FILE>();
                totalRecords = listATRFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.QM_OBSERVATION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                //var twoTierPhysicalPath = dbContext.QUALITY_SQM_ATR_FILE.Where(s => s.QM_OBSERVATION_ID == obsId).Select(x => x.ATR_FILE_PATH).FirstOrDefault();
                //var twoTierFileName = dbContext.QUALITY_SQM_ATR_FILE.Where(s => s.QM_OBSERVATION_ID == obsId).Select(x => x.ATR_FILE_NAME).FirstOrDefault();
                //var model = dbContext.QUALITY_SQM_ATR_FILE.Where(s => s.QM_OBSERVATION_ID == obsId).FirstOrDefault();

                //string VirtualDirectoryUrl = dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(x => x.QM_OBSERVATION_ID == obsId).SingleOrDefault().QM_ROAD_STATUS.Equals("M") ? ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_MAINTENANCE_ATR_VIRTUAL_DIR_PATH"] : ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_2TIER_ATR_VIRTUAL_DIR_PATH"] + "//" + model.ATR_ENTRY_DATE.Year + "//" + model.ATR_ENTRY_DATE.Month;
                //string PhysicalPath = dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(x => x.QM_OBSERVATION_ID == obsId).SingleOrDefault().QM_ROAD_STATUS.Equals("M") ? ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_MAINTENANCE_ATR_VIRTUAL_DIR_PATH"] : twoTierPhysicalPath;




                return query.Select(fileDetails => new
                {
                    id = fileDetails.QM_ATR_ID,
                    cell = new[] {
                                    //URLEncrypt.EncryptParameters(new string[] { fileDetails.ATR_FILE_NAME + "$" + fileDetails.QM_OBSERVATION_ID})  //Commented on 02/07/2014
                                    ///Changes by SAMMED A. PATIL on 08JAN2018 for Missing ATR Files
                                    ///URLEncrypt.EncryptParameters(new string[] { fileDetails.ATR_FILE_NAME + "$" + fileDetails.QM_ATR_ID})
                                   // !(System.IO.File.Exists(Path.Combine(PhysicalPath, HttpUtility.UrlEncode(twoTierFileName)).ToString().Replace(@"\\", @"//").Replace(@"\", @"/"))) ? "" : URLEncrypt.EncryptParameters(new string[] { fileDetails.ATR_FILE_NAME + "$" + fileDetails.QM_ATR_ID})
              //  URLEncrypt.EncryptParameters(new string[] { fileDetails.ATR_FILE_NAME + "$" + fileDetails.QM_ATR_ID})
               
                  //Virtual dir part-1 pdf view
                         "<a href='#' title='Click here to view  pdf'  onClick='viewATR2PdfVirtualDir(\"" + URLEncrypt.EncryptParameters(new string[] {fileDetails.QM_ATR_ID.ToString() }) +"\");'   ><img style='height:16px;width:16px' height='16' width='16' border=0 src='../../Content/images/PDF.ico' /></a>",


                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.Get2TierPDFFilesListDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }


        public Array Verification2TierATRListByObsId_RoadCodeDAL(int roadCode, string inspectionDate, int SRIorU_SQM_ObservationId, int SQM_ATRId, int? page, int? rows, string sidx, string sord, out long totalrecords, string filters, out List<string> selectedIdList)
        {


            QMATRDetailsModel atrDetailsModel = new QMATRDetailsModel();
            dbContext = new PMGSYEntities();
            string inspDate = DateTime.Parse(inspectionDate).ToShortDateString();
            var splittedDate = inspDate.Split('/');
            DateTime? qmInspDate = new DateTime(int.Parse(splittedDate[2]), int.Parse(splittedDate[1]), int.Parse(splittedDate[0]));
            int statecode = Convert.ToInt32(PMGSYSession.Current.StateCode);


            try
            {

                // If Role Not CQC
                if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54)
                {
                    List<string> MonitorName;

                    var list1 = (from obsm in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                 join isp in dbContext.IMS_SANCTIONED_PROJECTS on obsm.IMS_PR_ROAD_CODE equals isp.IMS_PR_ROAD_CODE
                                 join qmschedule in dbContext.QUALITY_QM_SCHEDULE on obsm.ADMIN_SCHEDULE_CODE equals qmschedule.ADMIN_SCHEDULE_CODE
                                 join aqm in dbContext.ADMIN_QUALITY_MONITORS on qmschedule.ADMIN_QM_CODE equals aqm.ADMIN_QM_CODE
                                 join qmscheduleDetail in dbContext.QUALITY_QM_SCHEDULE_DETAILS on qmschedule.ADMIN_SCHEDULE_CODE equals qmscheduleDetail.ADMIN_SCHEDULE_CODE
                                 where isp.IMS_PR_ROAD_CODE == roadCode && obsm.IMS_PR_ROAD_CODE == roadCode &&
                                 aqm.ADMIN_QM_TYPE == "S" &&
                                 (obsm.QM_OVERALL_GRADE == 1) &&
                                 isp.MAST_STATE_CODE == isp.MAST_STATE_CODE &&
                                 obsm.QM_INSPECTION_DATE >= qmInspDate &&
                                 isp.IMS_PR_ROAD_CODE == qmscheduleDetail.IMS_PR_ROAD_CODE
                                 select new
                                 {
                                     obsm.QM_OBSERVATION_ID,
                                     qmschedule.ADMIN_QM_CODE,
                                     isp.MAST_STATE_CODE,
                                     isp.MAST_DISTRICT_CODE,
                                     isp.MAST_BLOCK_CODE,
                                     isp.IMS_PACKAGE_ID,
                                     IMS_YEAR1 = isp.IMS_YEAR,
                                     IMS_YEAR2 = isp.IMS_YEAR + 1,
                                     isp.IMS_ROAD_NAME,
                                     isp.IMS_PROPOSAL_TYPE,
                                     obsm.QM_INSPECTED_START_CHAINAGE,
                                     obsm.QM_INSPECTED_END_CHAINAGE,
                                     obsm.QM_INSPECTION_DATE,
                                     isp.IMS_BRIDGE_LENGTH,
                                     isp.IMS_PAV_LENGTH,
                                     isp.IMS_ISCOMPLETED,
                                     isp.MAST_PMGSY_SCHEME,
                                     obsm.QM_OVERALL_GRADE,
                                     isp.IMS_PR_ROAD_CODE,
                                     aqm.ADMIN_QM_TYPE,
                                     aqm.ADMIN_QM_LNAME,
                                     aqm.ADMIN_QM_MNAME,
                                     aqm.ADMIN_QM_FNAME,
                                     qmscheduleDetail.ADMIN_IS_ENQUIRY
                                 }).OrderBy(s => s.QM_OBSERVATION_ID);

                    totalrecords = list1.Count();

                    List<int> SelectedIdListInt = new List<int>();
                    selectedIdList = new List<string>();

                    //------------- Get Previously seleceted Checks
                    SelectedIdListInt = dbContext.QUALITY_SQM_ATR_FILE.Where(x => x.QM_ATR_ID == SQM_ATRId && x.QM_OBSERVATION_ID == SRIorU_SQM_ObservationId && x.ATR_VERIFICATION_FINALIZED == "Y").Select(x => x.SQM_OBSERVATION_ID).ToList<int>();

                    foreach (int item in SelectedIdListInt)
                    {
                        selectedIdList.Add(item.ToString());
                    }


                    var result = list1.Select(item => new
                    {
                        ObservationId = item.QM_OBSERVATION_ID,
                        RoadCode = item.IMS_PR_ROAD_CODE,
                        Monitor = (string.IsNullOrEmpty(item.ADMIN_QM_FNAME) ? "" : item.ADMIN_QM_FNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_MNAME) ? "" : item.ADMIN_QM_MNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_LNAME) ? "" : item.ADMIN_QM_LNAME),
                        State = dbContext.MASTER_STATE.Where(md => md.MAST_STATE_CODE == item.MAST_STATE_CODE).Select(s => s.MAST_STATE_NAME),
                        District = dbContext.MASTER_DISTRICT.Where(md => md.MAST_DISTRICT_CODE == item.MAST_DISTRICT_CODE).Select(s => s.MAST_DISTRICT_NAME),
                        Block = dbContext.MASTER_BLOCK.Where(md => md.MAST_BLOCK_CODE == item.MAST_BLOCK_CODE).Select(s => s.MAST_BLOCK_NAME),
                        Package = item.IMS_PACKAGE_ID,
                        SanctionYear = item.IMS_YEAR1 + "-" + item.IMS_YEAR2,
                        RoadName = item.IMS_ROAD_NAME,
                        PropType = item.IMS_PROPOSAL_TYPE == "L" ? "LSB" : "Road",
                        InspFrmChainage = item.QM_INSPECTED_START_CHAINAGE,
                        InspToChainage = item.QM_INSPECTED_END_CHAINAGE,
                        InspDate = item.QM_INSPECTION_DATE,
                        TotalLength = item.IMS_PROPOSAL_TYPE == "L" ? item.IMS_BRIDGE_LENGTH : item.IMS_PAV_LENGTH,
                        RdStatus = item.IMS_ISCOMPLETED.Equals("C") ? "Completed" : "In Progress",
                        Ground_Verification_Inspection = item.ADMIN_IS_ENQUIRY.Equals("Y") ? "Yes" : "No",
                        Scheme = item.MAST_PMGSY_SCHEME == 1 ? "PMGSY I" : item.MAST_PMGSY_SCHEME == 2 ? "PMGSY II" : "PMGSY III",
                        OverallGrade = dbContext.MASTER_GRADE_TYPE.Where(s => s.MAST_GRADE_CODE == item.QM_OVERALL_GRADE).Select(s => s.MAST_GRADE_NAME),

                    }).ToArray();

                    return result;
                }
                else
                {
                    // FOR CQC show only Finalized list for Mark ATR verification
                    int? SQM_ObservationId = dbContext.QUALITY_SQM_ATR_FILE.Where(a => a.QM_ATR_ID == SQM_ATRId).Select(a => a.SQM_OBSERVATION_ID).First();


                    var list1 = (from obsm in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                 join isp in dbContext.IMS_SANCTIONED_PROJECTS on obsm.IMS_PR_ROAD_CODE equals isp.IMS_PR_ROAD_CODE
                                 join qmschedule in dbContext.QUALITY_QM_SCHEDULE on obsm.ADMIN_SCHEDULE_CODE equals qmschedule.ADMIN_SCHEDULE_CODE
                                 join aqm in dbContext.ADMIN_QUALITY_MONITORS on qmschedule.ADMIN_QM_CODE equals aqm.ADMIN_QM_CODE
                                 join qmscheduleDetail in dbContext.QUALITY_QM_SCHEDULE_DETAILS on qmschedule.ADMIN_SCHEDULE_CODE equals qmscheduleDetail.ADMIN_SCHEDULE_CODE
                                 where isp.IMS_PR_ROAD_CODE == roadCode && obsm.IMS_PR_ROAD_CODE == roadCode &&
                                 aqm.ADMIN_QM_TYPE == "S" &&
                                 (obsm.QM_OVERALL_GRADE == 1) &&
                                 isp.MAST_STATE_CODE == isp.MAST_STATE_CODE &&
                                 obsm.QM_INSPECTION_DATE >= qmInspDate &&
                                 obsm.QM_OBSERVATION_ID == SQM_ObservationId &&// to show finalize list only for CQC
                                 isp.IMS_PR_ROAD_CODE == qmscheduleDetail.IMS_PR_ROAD_CODE
                                 select new
                                 {
                                     obsm.QM_OBSERVATION_ID,
                                     qmschedule.ADMIN_QM_CODE,
                                     isp.MAST_STATE_CODE,
                                     isp.MAST_DISTRICT_CODE,
                                     isp.MAST_BLOCK_CODE,
                                     isp.IMS_PACKAGE_ID,
                                     IMS_YEAR1 = isp.IMS_YEAR,
                                     IMS_YEAR2 = isp.IMS_YEAR + 1,
                                     isp.IMS_ROAD_NAME,
                                     isp.IMS_PROPOSAL_TYPE,
                                     obsm.QM_INSPECTED_START_CHAINAGE,
                                     obsm.QM_INSPECTED_END_CHAINAGE,
                                     obsm.QM_INSPECTION_DATE,
                                     isp.IMS_BRIDGE_LENGTH,
                                     isp.IMS_PAV_LENGTH,
                                     isp.IMS_ISCOMPLETED,
                                     isp.MAST_PMGSY_SCHEME,
                                     obsm.QM_OVERALL_GRADE,
                                     isp.IMS_PR_ROAD_CODE,
                                     aqm.ADMIN_QM_TYPE,
                                     aqm.ADMIN_QM_LNAME,
                                     aqm.ADMIN_QM_MNAME,
                                     aqm.ADMIN_QM_FNAME,
                                     qmscheduleDetail.ADMIN_IS_ENQUIRY
                                 }).OrderBy(s => s.QM_OBSERVATION_ID);

                    totalrecords = list1.Count();

                    List<int> SelectedIdListInt = new List<int>();
                    selectedIdList = new List<string>();

                    //------------- Get Previously seleceted Checks
                    SelectedIdListInt = dbContext.QUALITY_SQM_ATR_FILE.Where(x => x.QM_ATR_ID == SQM_ATRId && x.QM_OBSERVATION_ID == SRIorU_SQM_ObservationId && x.ATR_VERIFICATION_FINALIZED == "Y").Select(x => x.SQM_OBSERVATION_ID).ToList<int>();

                    foreach (int item in SelectedIdListInt)
                    {
                        selectedIdList.Add(item.ToString());
                    }

                    var result = list1.Select(item => new
                    {

                        ObservationId = item.QM_OBSERVATION_ID,
                        RoadCode = item.IMS_PR_ROAD_CODE,
                        Monitor = (string.IsNullOrEmpty(item.ADMIN_QM_FNAME) ? "" : item.ADMIN_QM_FNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_MNAME) ? "" : item.ADMIN_QM_MNAME) + " " + (string.IsNullOrEmpty(item.ADMIN_QM_LNAME) ? "" : item.ADMIN_QM_LNAME),
                        State = dbContext.MASTER_STATE.Where(md => md.MAST_STATE_CODE == item.MAST_STATE_CODE).Select(s => s.MAST_STATE_NAME),
                        District = dbContext.MASTER_DISTRICT.Where(md => md.MAST_DISTRICT_CODE == item.MAST_DISTRICT_CODE).Select(s => s.MAST_DISTRICT_NAME),
                        Block = dbContext.MASTER_BLOCK.Where(md => md.MAST_BLOCK_CODE == item.MAST_BLOCK_CODE).Select(s => s.MAST_BLOCK_NAME),
                        Package = item.IMS_PACKAGE_ID,
                        SanctionYear = item.IMS_YEAR1 + "-" + item.IMS_YEAR2,
                        RoadName = item.IMS_ROAD_NAME,
                        PropType = item.IMS_PROPOSAL_TYPE == "L" ? "LSB" : "Road",
                        InspFrmChainage = item.QM_INSPECTED_START_CHAINAGE,
                        InspToChainage = item.QM_INSPECTED_END_CHAINAGE,
                        InspDate = item.QM_INSPECTION_DATE,
                        TotalLength = item.IMS_PROPOSAL_TYPE == "L" ? item.IMS_BRIDGE_LENGTH : item.IMS_PAV_LENGTH,
                        RdStatus = item.IMS_ISCOMPLETED.Equals("C") ? "Completed" : "In Progress",
                        Ground_Verification_Inspection = item.ADMIN_IS_ENQUIRY.Equals("Y") ? "Yes" : "No",
                        Scheme = item.MAST_PMGSY_SCHEME == 1 ? "PMGSY I" : item.MAST_PMGSY_SCHEME == 2 ? "PMGSY II" : "PMGSY III",
                        OverallGrade = dbContext.MASTER_GRADE_TYPE.Where(s => s.MAST_GRADE_CODE == item.QM_OVERALL_GRADE).Select(s => s.MAST_GRADE_NAME),

                    }).ToArray();

                    return result;
                }


            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.Verification2TierATRListByObsId_RoadCodeDAL");
                totalrecords = 0;
                selectedIdList = new List<string>();
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        public bool savefinalizedMarkVerification2TierATRFileDAL(int SQM_ObservationId, int SRIorU_QM_ObservationId, int SQM_ATRid, HttpRequestBase Request)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    //QUALITY_SQM_ATR_FILE obj_QualityATRFile = new QUALITY_SQM_ATR_FILE();

                    //obj_QualityATRFile = dbContext.QUALITY_SQM_ATR_FILE.Where(x => x.QM_ATR_ID == NQM_ATRid && x.QM_OBSERVATION_ID == NQM_ObservationId).First();

                    //if (obj_QualityATRFile != null)
                    //{
                    //    obj_QualityATRFile.ATR_VERIFICATION_FINALIZED = "Y";
                    //    obj_QualityATRFile.SQM_OBSERVATION_ID = SQM_ObservationId;
                    //    dbContext.Entry(obj_QualityATRFile).State = EntityState.Modified;
                    //}
                    string atrRegradeStatus = dbContext.QUALITY_SQM_ATR_FILE.Where(x => x.QM_ATR_ID == SQM_ATRid).Any() ? dbContext.QUALITY_SQM_ATR_FILE.Where(x => x.QM_ATR_ID == SQM_ATRid).Select(x => x.ATR_REGRADE_STATUS).FirstOrDefault() : null;

                    if (!(dbContext.QUALITY_SQM_ATR_FILE.Where(x => x.QM_ATR_ID == SQM_ATRid).Any() && atrRegradeStatus != "R"))
                    {
                        #region File Saving
                        String StorageRoot = ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_2TIER_ATR"];
                        QUALITY_SQM_ATR_FILE qualityATRFile = new QUALITY_SQM_ATR_FILE();
                        //var fileName = request.Files[i].FileName.ToString();
                        //var fullPath = Path.Combine(StorageRoot, fileName);

                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            qualityATRFile.QM_OBSERVATION_ID = SRIorU_QM_ObservationId;

                            qualityATRFile.ATR_ENTRY_DATE = DateTime.Now;
                            qualityATRFile.ATR_REGRADE_STATUS = "U";   //Submitted
                            qualityATRFile.ATR_REGRADE_REMARKS = null;
                            qualityATRFile.ATR_IS_DELETED = "N";
                            qualityATRFile.ATR_VERIFICATION_FINALIZED = "Y";
                            qualityATRFile.SQM_OBSERVATION_ID = SQM_ObservationId;

                            Int32? MaxID;
                            if (dbContext.QUALITY_SQM_ATR_FILE.Count() == 0)
                            {
                                MaxID = 0;
                            }
                            else
                            {
                                MaxID = (from c in dbContext.QUALITY_SQM_ATR_FILE select (Int32?)c.QM_ATR_ID ?? 0).Max();
                            }
                            ++MaxID;
                            qualityATRFile.ATR_FILE_NAME = "SQM_ATR_" + qualityATRFile.QM_OBSERVATION_ID.ToString() + "_" + System.DateTime.Now.ToString("dd_MM_yyyy_HHmmss") + ".pdf";
                            qualityATRFile.ATR_FILE_PATH = StorageRoot + "\\" + System.DateTime.Now.Year + "\\" + System.DateTime.Now.Month;
                            qualityATRFile.QM_ATR_ID = Convert.ToInt32(MaxID);
                            qualityATRFile.USERID = PMGSYSession.Current.UserId;
                            qualityATRFile.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                            dbContext.QUALITY_SQM_ATR_FILE.Add(qualityATRFile);

                            HttpPostedFileBase file = Request.Files[i];
                            if (File.Exists(Path.Combine(qualityATRFile.ATR_FILE_PATH, qualityATRFile.ATR_FILE_NAME)))
                            {
                                File.Delete(Path.Combine(qualityATRFile.ATR_FILE_PATH, qualityATRFile.ATR_FILE_NAME));
                                file.SaveAs(Path.Combine(qualityATRFile.ATR_FILE_PATH, qualityATRFile.ATR_FILE_NAME));
                            }
                            else
                            {
                                if (!Directory.Exists(qualityATRFile.ATR_FILE_PATH))
                                    Directory.CreateDirectory(qualityATRFile.ATR_FILE_PATH);
                                file.SaveAs(Path.Combine(qualityATRFile.ATR_FILE_PATH, qualityATRFile.ATR_FILE_NAME));
                            }

                        }

                        #endregion
                    }
                    else
                    {
                        QUALITY_SQM_ATR_FILE qualityAtrFile = dbContext.QUALITY_SQM_ATR_FILE.Find(SQM_ATRid);
                        qualityAtrFile.ATR_VERIFICATION_FINALIZED = "Y";
                        qualityAtrFile.SQM_OBSERVATION_ID = SQM_ObservationId;
                        dbContext.Entry(qualityAtrFile).State = System.Data.Entity.EntityState.Modified;

                    }


                    QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(SRIorU_QM_ObservationId);
                    qmObservationMaster.QM_ATR_STATUS = "U";
                    dbContext.Entry(qmObservationMaster).State = System.Data.Entity.EntityState.Modified;

                    dbContext.SaveChanges();
                    ts.Complete();
                    return true;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoring.savefinalizedMarkVerification2TierATRFileDAL()");
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string QM2TierSaveATRRegradeDAL(QMATRRegradeModel qmATRRegradeModel)
        {
            if (qmATRRegradeModel.reasonCode == 0)
            {
                qmATRRegradeModel.reasonCode = null;
            }
            try
            {
                dbContext = new PMGSYEntities();

                int atrId = dbContext.QUALITY_SQM_ATR_FILE.Where(c => c.QM_OBSERVATION_ID == qmATRRegradeModel.QM_OBSERVATION_ID).Select(c => c.QM_ATR_ID).Max();
                if (dbContext.QUALITY_SQM_ATR_FILE.Any(c => c.QM_ATR_ID == atrId && c.ATR_REGRADE_STATUS != "U"))
                {
                    return ("Please reload the list.The atr is already regraded");
                }
                dbContext.USP_QM_REGRADE_SQM_ATR(qmATRRegradeModel.QM_OBSERVATION_ID, qmATRRegradeModel.ATR_REGRADE_STATUS, atrId, qmATRRegradeModel.ATR_REGRADE_REMARKS, qmATRRegradeModel.reasonCode, PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]);
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoring.QM2TierSaveATRRegradeDAL()");
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoring.QM2TierSaveATRRegradeDAL()");
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoring.QM2TierSaveATRRegradeDAL()");
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }



        public List<qm_inspection_list_Against_Road_sqmATR_Result> ATR2TierInspDetailsDAL(int roadCode) //ATR_Change
        {
            List<qm_inspection_list_Against_Road_sqmATR_Result> inspList = new List<qm_inspection_list_Against_Road_sqmATR_Result>();
            dbContext = new PMGSYEntities();

            try
            {

                inspList = dbContext.qm_inspection_list_Against_Road_sqmATR(roadCode).ToList<qm_inspection_list_Against_Road_sqmATR_Result>();

                return inspList;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoring.ATR2TierInspDetailsDAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        #endregion

        #region CQC

        /// <summary>
        /// Schedule list for monitors in cqc login
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="monitorCode"></param>
        /// <param name="inspMonth"></param>
        /// <param name="inspYear"></param>
        /// <returns></returns>
        public Array CQCMonitorsScheduledRoadListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int monitorCode, int inspMonth, int inspYear)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                Int32 ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "NQM_MAX_IMAGE_CNT").Select(c => c.Value).First());

                List<qm_get_monitor_scheduled_roads_Result> scheduleItemList = new List<qm_get_monitor_scheduled_roads_Result>();
                string qmType = string.Empty;

                scheduleItemList = dbContext.qm_get_monitor_scheduled_roads(monitorCode, inspMonth, inspYear, "I").ToList<qm_get_monitor_scheduled_roads_Result>();

                totalRecords = scheduleItemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        scheduleItemList = scheduleItemList.OrderByDescending(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                scheduleItemList = scheduleItemList.OrderBy(x => x.STATE_NAME).ToList();
                return scheduleItemList.Select(schDetails => new
                {

                    id = schDetails.IMS_PR_ROAD_CODE.ToString().Trim(),
                    cell = new[] {
                                        schDetails.STATE_NAME,
                                        schDetails.DISTRICT_NAME,
                                        schDetails.BLOCK_NAME,
                                        schDetails.IMS_PACKAGE_ID,
                                        (schDetails.IMS_YEAR + "-" + (schDetails.IMS_YEAR+1)).ToString(),
                                        schDetails.IMS_ROAD_NAME,
                                        schDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                        schDetails.IMS_PAV_LENGTH.ToString(),
                                        schDetails.IMS_ISCOMPLETED,
                                        schDetails.ADMIN_IS_ENQUIRY == "Y"? "Yes": "No",
                                        schDetails.PMGSY_SCHEME,
                                        (schDetails.FINALIZE_FLAG.Trim() == "NQM" || schDetails.FINALIZE_FLAG.Trim() == "SQM")?"Yes":"No",
                                        schDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                        (schDetails.INSP_STATUS_FLAG.Trim() == "UPGF" && ( schDetails.DEVICE_FLAG.Trim() == "N" || schDetails.DEVICE_FLAG.Trim() == "MB"))?"<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMFillObservations(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                        (schDetails.NO_OF_PHOTO_UPLOADED < ImageCount &&
                                        dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(a => a.ADMIN_SCHEDULE_CODE == schDetails.ADMIN_SCHEDULE_CODE && a.IMS_PR_ROAD_CODE == schDetails.IMS_PR_ROAD_CODE).Select(a => a.QM_OBSERVATION_ID).Any()
                                        ) ? "<a href='#' title='Click here to upload images' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadCqcFile(\"" +  schDetails.ADMIN_SCHEDULE_CODE.ToString().Trim()  +"\",\"" +  schDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Upload</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion


        #region Reports

        /// <summary>
        /// State, Districtwise Inspction Count for NQMs & SQMs
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array QMInspectionReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                List<qm_nqm_sqm_inspection_count_Result> itemList = new List<qm_nqm_sqm_inspection_count_Result>();
                string qmType = string.Empty;

                itemList = dbContext.qm_nqm_sqm_inspection_count().ToList<qm_nqm_sqm_inspection_count_Result>();

                totalRecords = itemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }


                itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).ToList();
                return itemList.Select(itemDetails => new
                {
                    cell = new[] {
                                        itemDetails.MAST_STATE_NAME,
                                        itemDetails.MAST_DISTRICT_NAME,
                                        itemDetails.TOTAL_ROAD_COUNT.ToString(),
                                        //itemDetails.NQM_INSPECTION_COUNT.ToString(),
                                        //itemDetails.SQM_INSPECTION_COUNT.ToString()
                                        "<a href='#' title='Click here to view details' onClick='viewDistrictwiseInspDetails(\"" +  itemDetails.MAST_STATE_CODE.ToString().Trim()  +"\",\"" +  itemDetails.MAST_DISTRICT_CODE.ToString().Trim() + "\",\"" + "I \"); return false;'> " + itemDetails.NQM_INSPECTION_COUNT.ToString() + "</a>",
                                        "<a href='#' title='Click here to view details' onClick='viewDistrictwiseInspDetails(\"" +  itemDetails.MAST_STATE_CODE.ToString().Trim()  +"\",\"" +  itemDetails.MAST_DISTRICT_CODE.ToString().Trim() + "\",\"" + "S \"); return false;'> " + itemDetails.SQM_INSPECTION_COUNT.ToString() + "</a>"
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// District Wise Overall Inspection Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="qmType"></param>
        /// <returns></returns>
        public Array QMOverallDistrictwiseInspDetailsReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, Int32 stateCode, Int32 districtCode, string qmType)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                List<qm_nqm_sqm_districtwise_inspection_Result> itemList = new List<qm_nqm_sqm_districtwise_inspection_Result>();

                itemList = dbContext.qm_nqm_sqm_districtwise_inspection(stateCode, districtCode, qmType).ToList<qm_nqm_sqm_districtwise_inspection_Result>();

                totalRecords = itemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }


                itemList = itemList.OrderBy(x => x.STATE_NAME).ToList();
                return itemList.Select(itemDetails => new
                {
                    cell = new[] {
                                        itemDetails.STATE_NAME,
                                        itemDetails.DISTRICT_NAME,
                                        itemDetails.BLOCK_NAME,
                                        itemDetails.MONITOR_NAME,
                                        itemDetails.IMS_PACKAGE_ID,
                                        itemDetails.IMS_YEAR.ToString() + "-" + (itemDetails.IMS_YEAR + 1).ToString(),
                                        itemDetails.IMS_ROAD_NAME,
                                        itemDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                        itemDetails.IMS_PAV_LENGTH.ToString(),
                                        itemDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                        itemDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                        itemDetails.INSPECTED_ROAD_STATUS,
                                        itemDetails.INSPECTION_DATE,
                                        itemDetails.OVERALL_GRADE
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Report Listing for State Wise Abstract of Grading & ATR Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="fromYear"></param>
        /// <param name="toYear"></param>
        /// <param name="fromMonth"></param>
        /// <param name="toMonth"></param>
        /// <returns></returns>
        public Array QMGradingAndATRListingDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int fromYear, int toYear, int fromMonth, int toMonth, string qmType)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                int level = 0;
                if (PMGSYSession.Current.RoleCode == 5) //CQC
                {
                    level = 1;
                }
                else if (PMGSYSession.Current.RoleCode == 8) //SQC
                {
                    level = 2;
                }

                var itemList = dbContext.USP_QM_ABSTRACT_GRADING_STATE_WISE(level, PMGSYSession.Current.StateCode, fromYear, fromMonth, toYear, toMonth, qmType, PMGSYSession.Current.PMGSYScheme).ToList<USP_QM_ABSTRACT_GRADING_STATE_WISE_Result>();

                totalRecords = itemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.LOCATION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.LOCATION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.LOCATION_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                return itemList.Select(itemDetails => new
                {
                    cell = new[] {
                                        itemDetails.LOCATION_NAME,
                                        itemDetails.TOTAL_INSP.ToString(),
                                        itemDetails.TOTAL_COMP.ToString(),
                                        itemDetails.COMP_S.ToString(),
                                        itemDetails.COMP_SRI.ToString(),
                                        itemDetails.COMP_U.ToString(),
                                        itemDetails.R_COMP_S.ToString(),
                                        itemDetails.R_COMP_SRI.ToString(),
                                        itemDetails.R_COMP_U.ToString(),
                                        itemDetails.TOTAL_ONGOING.ToString(),
                                        itemDetails.ONGOING_S.ToString(),
                                        itemDetails.ONGOING_SRI.ToString(),
                                        itemDetails.ONGOING_U.ToString(),
                                        itemDetails.R_ONGOING_S.ToString(),
                                        itemDetails.R_ONGOING_SRI.ToString(),
                                        itemDetails.R_ONGOING_U.ToString(),
                                        itemDetails.REQUIRED_ATR.ToString(),
                                        itemDetails.ATR_SUBMITTED.ToString()
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Districtwise Grading Comparision of NQMs & SQMs for particular month or Year
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="state"></param>
        /// <param name="district"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <returns></returns>
        public Array QMGradingComparisionListingDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int state, string district, int year, string month)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                var itemList = dbContext.USP_QM_NQM_SQM_GRADING_COMPARISION(state, district, year, month).ToList<USP_QM_NQM_SQM_GRADING_COMPARISION_Result>();

                totalRecords = itemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                return itemList.Select(itemDetails => new
                {
                    cell = new[] {
                                        itemDetails.DISTRICT_NAME,
                                        itemDetails.BLOCK_NAME,
                                        itemDetails.SANCTION_YEAR,
                                        itemDetails.IMS_PACKAGE_ID,
                                        itemDetails.IMS_ROAD_NAME,
                                        itemDetails.QM_INSPECTED_START_CHAINAGE.ToString() + "-" + itemDetails.QM_INSPECTED_END_CHAINAGE.ToString() + " km.",
                                        itemDetails.NQM_GRADE,
                                        itemDetails.SQM_GRADE.ToString(),
                                        itemDetails.NQM_INSP_COUNT.ToString(),
                                        itemDetails.SQM_INSP_COUNT.ToString()
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Monthwise Inspections for NQM & SQM
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="state"></param>
        /// <param name="year"></param>
        /// <param name="qmType"></param>
        /// <returns></returns>
        public Array QMMonthwiseInspectionListingDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int state, int year, string qmType)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                var itemList = dbContext.USP_QM_MONTHWISE_INSPECTIONS(state, year, qmType).ToList<USP_QM_MONTHWISE_INSPECTIONS_Result>();

                totalRecords = itemList.Count();

                return itemList.Select(itemDetails => new
                {
                    cell = new[] {
                                        itemDetails.INSP_MONTH,
                                        itemDetails.SCHEDULE_COUNT.ToString(),
                                        itemDetails.INSPECTION_COUNT.ToString(),
                                        itemDetails.MOBILE_COUNT.ToString(),
                                        itemDetails.INSP_OMMAS.ToString(),
                                        itemDetails.SCH_NO_INSP.ToString()
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Summary of Deficiencies Reported in NQM Inspection
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="state"></param>
        /// <param name="grade"></param>
        /// <param name="fromyear"></param>
        /// <param name="frommonth"></param>
        /// <param name="toyear"></param>
        /// <param name="tomonth"></param>
        /// <param name="citem"></param>
        /// <param name="qmType"></param>
        /// <returns></returns>
        public Array QMItemwiseNQMInspectionReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string state, int grade, Int32 fromyear, Int32 frommonth, Int32 toyear, Int32 tomonth, int citem, string qmType)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                //var itemList = dbContext.USP_QM_SATISFACTORY_UNSATISFACTORY_WORK_PERIOD(state, grade, fromyear, frommonth, toyear, tomonth, citem, qmType).ToList<USP_QM_SATISFACTORY_UNSATISFACTORY_WORK_PERIOD_Result>();
                var itemList = dbContext.USP_QM_SATISFACTORY_UNSATISFACTORY_WORK_PERIOD(state, 0, grade, fromyear, frommonth, toyear, tomonth, citem, qmType).ToList();
                totalRecords = itemList.Count();

                if (sidx.Trim() != null)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MONITOR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MONITOR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MONITOR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                return itemList.Select(itemDetails => new
                {
                    cell = new[] {
                                        itemDetails.MONITOR,
                                        itemDetails.IMS_ROAD_NAME,
                                        itemDetails.QM_INSPECTION_DATE.ToString(),
                                        itemDetails.CHAINAGE,
                                        itemDetails.QM_ROAD_STATUS.ToString(),
                                        itemDetails.STATE_NAME,
                                        itemDetails.DISTRICT_NAME,
                                        itemDetails.ITEM_NAME,
                                        "<a href='#' title = 'Click here to view the details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewItemwiseGradingDetails(\"" + itemDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'></a>",
                               }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// ATR Detailsort
        /// </summary>  Changed on 12 Dec 2017 Two columns ATR_STATE_PENDING_SRI, ATR_STATE_PENDING_U added as per the client requirement by Deen Dayal 
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="qmType"></param>
        /// <returns></returns>
        public Array QMATRDetailsReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, Int32 fromyear, Int32 frommonth, Int32 toyear, Int32 tomonth)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                List<USP_QM_ATR_Result> itemList = new List<USP_QM_ATR_Result>();
                int level = PMGSYSession.Current.RoleCode == 8 ? 2 : 1;
                itemList = dbContext.USP_QM_ATR(level, PMGSYSession.Current.StateCode, fromyear, frommonth, toyear, tomonth).ToList<USP_QM_ATR_Result>();

                totalRecords = itemList.Count();

                if (sidx.Trim() != null)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }


                itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).ToList();
                return itemList.Select(itemDetails => new
                {
                    cell = new[] {
                                        itemDetails.MAST_STATE_NAME,
                                        itemDetails.TOTAL_INSP.ToString(),
                                        itemDetails.ATR_REQUIRED_INITIALLY.ToString(),
                                        itemDetails.PENDING_NRRDA.ToString(),
                                        (itemDetails.PENDING_STATE - itemDetails.REJECTED).ToString(),
                                        itemDetails.ACCEPTED.ToString(),
                                        itemDetails.REJECTED.ToString(),
                                        itemDetails.PENDING_STATE.ToString(),
                                        (itemDetails.VERIFICATION + itemDetails.COMMITEE).ToString()
                               }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// List all Unsatisfactory works till date in a state for NQM or SQM
        /// </summary>
        /// <param name="stateCode"></param>
        /// <param name="qmType"></param>
        /// <returns></returns>
        public List<USP_QM_UNSATISFACTORY_WORKS_FOR_STATE_Result> UnsatisfactoryWorkDetailsDAL(int stateCode, string qmType)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.USP_QM_UNSATISFACTORY_WORKS_FOR_STATE(stateCode, qmType).ToList<USP_QM_UNSATISFACTORY_WORKS_FOR_STATE_Result>();
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Commenced Work Details
        /// </summary>
        /// <returns></returns>
        public List<USP_QM_COMMENCED_WORKS_Result> CommencedWorkDetailsDAL()
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.USP_QM_COMMENCED_WORKS(PMGSYSession.Current.StateCode).ToList<USP_QM_COMMENCED_WORKS_Result>();
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Render view for Commenced Inspection Details
        /// </summary>
        /// <param name="state"></param>
        /// <param name="duration"></param>
        /// <param name="qmType"></param>
        /// <returns></returns>
        public List<USP_QM_COMMENCED_INSP_DETAILS_Result> CommencedInspDetailsDAL(int state, int duration, string qmType)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.USP_QM_COMMENCED_INSP_DETAILS(state, qmType, duration).ToList<USP_QM_COMMENCED_INSP_DETAILS_Result>();
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Agreement details for commenced works
        /// </summary>
        /// <param name="state"></param>
        /// <param name="duration"></param>
        /// <returns></returns>
        public List<USP_QM_COMMENCED_WORKS_DETAILS_Result> CommencedRoadDetailsDAL(int state, int duration)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.USP_QM_COMMENCED_WORKS_DETAILS(state, duration).ToList<USP_QM_COMMENCED_WORKS_DETAILS_Result>();
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Completed Works Details
        /// </summary>
        /// <param name="frmDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<USP_QM_COMPLETED_WORKS_Result> CompletedWorksDAL(string frmDate, string toDate)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.USP_QM_COMPLETED_WORKS(0, frmDate, toDate).ToList<USP_QM_COMPLETED_WORKS_Result>();
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Completed Inspection Details
        /// </summary>
        /// <param name="roadCode"></param>
        /// <param name="qmType"></param>
        /// <returns></returns>
        public List<USP_QM_COMPLETED_INSP_DETAILS_Result> CompletedInspDetailsDAL(int roadCode, string qmType)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.USP_QM_COMPLETED_INSP_DETAILS(roadCode, qmType).ToList<USP_QM_COMPLETED_INSP_DETAILS_Result>();
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Yearly Quarterwise Defective grading Linechart
        /// </summary>
        /// <param name="stateCode"></param>
        /// <returns></returns>
        public List<USP_QM_DEFFECTIVE_GRAPH_Result> DefectiveGradingLineChartDAL(int state, int year, string rdStatus, string valueType)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (PMGSYSession.Current.StateCode > 0)
                    state = PMGSYSession.Current.StateCode;

                List<USP_QM_DEFFECTIVE_GRAPH_Result> itemList = new List<USP_QM_DEFFECTIVE_GRAPH_Result>();
                itemList = dbContext.USP_QM_DEFFECTIVE_GRAPH(state, year, rdStatus, valueType).ToList<USP_QM_DEFFECTIVE_GRAPH_Result>();

                return itemList;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion


        #region MaintenanceInspection

        /// <summary>
        /// save the maintenance inspection details in database
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool SaveMaintenanceInspectionDAL(MaintenanceInspectionViewModel model, out string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                DateTime InspectionDate = objCommon.GetStringToDateTime(model.InspectionDate);

                if (dbContext.QUALITY_QM_SCHEDULE.Any(m => m.ADMIN_QM_CODE == model.MonitorCode && m.MAST_STATE_CODE == model.State && m.MAST_DISTRICT_CODE == model.District && m.ADMIN_IM_MONTH == InspectionDate.Month && m.ADMIN_IM_YEAR == InspectionDate.Year))
                {
                    int scheduleCode = dbContext.QUALITY_QM_SCHEDULE.Where(m => m.ADMIN_QM_CODE == model.MonitorCode && m.MAST_STATE_CODE == model.State && m.MAST_DISTRICT_CODE == model.District && m.ADMIN_IM_MONTH == InspectionDate.Month && m.ADMIN_IM_YEAR == InspectionDate.Year).Select(m => m.ADMIN_SCHEDULE_CODE).FirstOrDefault();

                    if (dbContext.QUALITY_QM_SCHEDULE_DETAILS.Any(m => m.ADMIN_SCHEDULE_CODE == scheduleCode && m.IMS_PR_ROAD_CODE == model.ProposalCode))
                    {
                        if (dbContext.QUALITY_QM_OBSERVATION_MASTER.Any(m => m.ADMIN_SCHEDULE_CODE == scheduleCode && m.IMS_PR_ROAD_CODE == model.ProposalCode && m.QM_INSPECTION_DATE == InspectionDate))
                        {
                            message = "Schedule details for this Road/ LSB is already present on this inspection date.";
                            return false;
                        }
                    }
                }

                int? count = dbContext.USP_QM_MAINTENANCE_INSPECTION_ENTRY(model.State, model.District, InspectionDate.Year, objCommon.GetStringToDateTime(model.InspectionDate).Month, model.MonitorCode, model.ProposalCode, model.OverallGrade, model.FromChainage, model.ToChainage, objCommon.GetStringToDateTime(model.InspectionDate).ToString("MM/dd/yyyy"), PMGSYSession.Current.UserId, HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]).Select(m => m.Value).FirstOrDefault();

                if (count == 111)
                {
                    message = "Inspection details added successfully.";
                    return true;
                }
                else
                {
                    message = "Error occurred while processing your request.";
                    return false;
                }
            }
            catch (Exception)
            {
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the NQM's for populating the dropdown.
        /// </summary>
        /// <returns></returns>
        public List<SelectListItem> PopulateMaintenanceMonitorsDAL()
        {
            dbContext = new PMGSYEntities();

            try
            {
                var lstMonitors = (from item in dbContext.ADMIN_QUALITY_MONITORS
                                   where item.ADMIN_QM_TYPE == "I"
                                   //&& item.ADMIN_QM_EMPANELLED == "Y"
                                   select new
                                   {
                                       ADMIN_CODE = item.ADMIN_QM_CODE,
                                       ADMIN_NAME = (item.ADMIN_QM_LNAME == null ? "" : item.ADMIN_QM_LNAME) + " " + ((item.ADMIN_QM_FNAME == null ? "" : item.ADMIN_QM_FNAME) + " " + (item.ADMIN_QM_MNAME == null ? "" : item.ADMIN_QM_MNAME))
                                   }).OrderBy(m => m.ADMIN_NAME).Distinct().ToList();

                List<SelectListItem> lstNQMs = new SelectList(lstMonitors.ToList(), "ADMIN_CODE", "ADMIN_NAME").ToList();

                lstNQMs.Insert(0, new SelectListItem { Value = "0", Text = "Select Monitor" });

                return lstNQMs;
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of Proposals according to the district, sanction year and proposal type
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateMaintenanceInspectionRoadsDAL(string id)
        {
            dbContext = new PMGSYEntities();

            try
            {
                if (!String.IsNullOrEmpty(id))
                {
                    string[] parameters = id.Split('$');

                    var lstRoads = dbContext.qm_get_roads_for_maintenance_inspection(Convert.ToInt32(parameters[0]), Convert.ToInt32(parameters[1]), Convert.ToInt32(parameters[2]), parameters[3], "").ToList();

                    List<SelectListItem> lstRoadDetails = new SelectList(lstRoads, "IMS_PR_ROAD_CODE", "ROAD_NAME").ToList();

                    lstRoadDetails.Insert(0, new SelectListItem { Value = "0", Text = "Select Road / LSB" });

                    return lstRoadDetails;

                }
                else
                {
                    return null;
                }
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the length of proposal
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public decimal? GetProposalLengthDAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();

            try
            {
                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (imsMaster.IMS_PROPOSAL_TYPE == "P")
                {
                    return imsMaster.IMS_PAV_LENGTH;
                }
                else
                {
                    return imsMaster.IMS_BRIDGE_LENGTH;
                }
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {

            }
        }

        /// <summary>
        /// returns the road according to the package
        /// </summary>
        /// <param name="package"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateRoadByPackageDAL(string package)
        {
            dbContext = new PMGSYEntities();

            try
            {
                var lstRoads = dbContext.qm_get_roads_for_maintenance_inspection(0, 0, 0, "P", package).ToList();

                List<SelectListItem> lstRoadDetails = new SelectList(lstRoads, "IMS_PR_ROAD_CODE", "ROAD_NAME").ToList();

                lstRoadDetails.Insert(0, new SelectListItem { Value = "0", Text = "Select Road / LSB" });

                return lstRoadDetails;
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the list of packages according to the state , district and year
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulatePackageDAL(string id)
        {
            dbContext = new PMGSYEntities();

            try
            {
                string[] parameters = id.Split('$');
                int state = Convert.ToInt32(parameters[0]);
                int district = Convert.ToInt32(parameters[1]);
                int year = Convert.ToInt32(parameters[2]);


                List<SelectListItem> lstPackages = new List<SelectListItem>();

                var packages = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                where (year <= 0 ? 1 : item.IMS_YEAR) == (year <= 0 ? 1 : year)
                                && (district <= 0 ? 1 : item.MAST_DISTRICT_CODE) == (district <= 0 ? 1 : district)
                                && (state <= 0 ? 1 : item.MAST_STATE_CODE) == (state <= 0 ? 1 : state)
                                && item.IMS_SANCTIONED == "Y"
                                select new
                                {
                                    PACKAGE_ID = item.IMS_PACKAGE_ID,
                                    PACKAGE_NAME = item.IMS_PACKAGE_ID
                                }).OrderBy(m => m.PACKAGE_ID).ToList();

                lstPackages = new SelectList(packages, "PACKAGE_ID", "PACKAGE_NAME").ToList();

                lstPackages.Insert(0, new SelectListItem { Value = "0", Text = "Select Package" });

                return lstPackages;
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion


        #region LabDetails --- developed by Anand Singh (Integrated on 09/09/2014 by Shyam Yadav)

        public Array GetPIU1TierLabDetailListDAL(int state, int district, string level, out long totalRecords)
        {
            dbContext = new Models.PMGSYEntities();
            List<USP_QUALITY_LAB_LIST_Result> labList = new List<USP_QUALITY_LAB_LIST_Result>();
            labList = dbContext.USP_QUALITY_LAB_LIST(state, district, PMGSYSession.Current.AdminNdCode).ToList<USP_QUALITY_LAB_LIST_Result>();
            totalRecords = labList.Count();
            if (level == "PIU")
            {
                if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54)
                {
                    var arrLab = labList.Select(labDetails => new
                    {
                        id = labDetails.IMS_YEAR,
                        cell = new[]
                        {
                               (labDetails.IMS_YEAR ).ToString(),       //0                               
                               //labDetails.MAST_BLOCK_NAME.ToString(),
                               labDetails.IMS_PACKAGE_ID,
                               (labDetails.QM_LAB_ID == 0
                                            ? //"--" 
                                                                "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='LabDetailAdd(\"" + labDetails.MAST_STATE_NAME + "\", \"" + labDetails.IMS_YEAR.ToString() + "\", \"" + labDetails.IMS_PACKAGE_ID + "\", \"" + labDetails.DATE_OF_AWARD_WORK.ToString() + "\", \"" + labDetails.DATE_OF_COMMENCEMENT.ToString() + "\", \"" + labDetails.DATE_OF_COMPLETION.ToString() + "\", \"" + labDetails.TEND_AGREEMENT_CODE.ToString() + "\"); return false;'>Add Lab Detail</a>"
                                                              : labDetails.LAB_ESTABLISHMENT_DATE.ToString())

                                                              ,
                               //labDetails.QM_LAB_ID == 0 ? "<a href='javascript:void(0)' onclick=LabDetailAdd('" + labDetails.MAST_STATE_NAME + "','" + labDetails.IMS_YEAR + "','" + labDetails.IMS_PACKAGE_ID + "','" + labDetails.DATE_OF_AWARD_WORK + "','" + labDetails.DATE_OF_COMMENCEMENT + "','" + labDetails.DATE_OF_COMPLETION + "'," + labDetails.TEND_AGREEMENT_CODE + ") >Enter Lab Detail</a>" : labDetails.LAB_ESTABLISHMENT_DATE.ToString(),
                               labDetails.QM_LAB_ID==0?
                                                                "-"
                                                               :"<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ShowLabPhoto(\"" + labDetails.QM_LAB_ID + "\", \"" + labDetails.PHOTO.ToString() + "\"); return false;'>Add Photo</a>",
                                labDetails.QM_LAB_ID==0?
                                                                "-"
                                                                :labDetails.QM_SQC_APPROVAL=="N"?"No":"Yes",
                               labDetails.TEND_AGREEMENT_CODE.ToString(),
                               labDetails.QM_LAB_ID.ToString(),//7
                               labDetails.DATE_OF_COMPLETION.ToString(),
                               labDetails.DATE_OF_AWARD_WORK.ToString(),
                               labDetails.DATE_OF_COMMENCEMENT.ToString(),
                               labDetails.MAST_STATE_NAME,
                               labDetails.QM_LOCK_STATUS ,//12
                               labDetails.QM_LAB_ID==0?
                                                                "-"
                                                               : labDetails.QM_LOCK_STATUS=="N"?
                                                               "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ShowLabPositionMap(\"" + labDetails.QM_LAB_ID + "\"); return false;'>Correct Geo Position</a>"
                                                               :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>")
                                                               ,
                               (labDetails.QM_LAB_ID==0?
                                                               "-"
                                                               :labDetails.QM_LOCK_STATUS=="N"?
                                                               ("<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteLabDetail(\"" + labDetails.QM_LAB_ID + "\"); return false;'>Delete Lab Detail</a>")
                                                               :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"))
                                                                ,
                                (labDetails.QM_LAB_ID==0?
                                                               "-"
                                                             :labDetails.QM_LOCK_STATUS=="N"?
                                                               ("<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='FinalizeLabDetail(\"" + labDetails.QM_LAB_ID + "\"); return false;'>Finalize Lab Detail</a>")
                                                               :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"))


                          }
                    }).ToArray();
                    return arrLab;
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48) //SQC
                {
                    var arrLab = labList.Select(labDetails => new
                    {
                        id = labDetails.IMS_YEAR,
                        cell = new[]
                        {
                               (labDetails.IMS_YEAR).ToString(),       //0                               
                               //labDetails.MAST_BLOCK_NAME.ToString(),
                               labDetails.IMS_PACKAGE_ID,
                               (labDetails.QM_LOCK_STATUS=="N"?
                                                                "-"
                                                               : labDetails.LAB_ESTABLISHMENT_DATE.ToString())

                                                              ,
                               //labDetails.QM_LAB_ID == 0 ? "<a href='javascript:void(0)' onclick=LabDetailAdd('" + labDetails.MAST_STATE_NAME + "','" + labDetails.IMS_YEAR + "','" + labDetails.IMS_PACKAGE_ID + "','" + labDetails.DATE_OF_AWARD_WORK + "','" + labDetails.DATE_OF_COMMENCEMENT + "','" + labDetails.DATE_OF_COMPLETION + "'," + labDetails.TEND_AGREEMENT_CODE + ") >Enter Lab Detail</a>" : labDetails.LAB_ESTABLISHMENT_DATE.ToString(),
                              labDetails.QM_LOCK_STATUS=="N"?
                                                                "-"
                                                               :"<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ShowLabPhoto(\"" + labDetails.QM_LAB_ID + "\", \"" + labDetails.PHOTO.ToString() + "\"); return false;'>Add Photo</a>",
                              labDetails.QM_LOCK_STATUS=="N"?
                                                                "-"
                                                                :labDetails.QM_SQC_APPROVAL=="N"?"No":"Yes",
                               labDetails.TEND_AGREEMENT_CODE.ToString(),
                               labDetails.QM_LAB_ID.ToString(),//7
                               labDetails.DATE_OF_COMPLETION.ToString(),
                               labDetails.DATE_OF_AWARD_WORK.ToString(),
                               labDetails.DATE_OF_COMMENCEMENT.ToString(),
                               labDetails.MAST_STATE_NAME,
                               labDetails.QM_LOCK_STATUS ,//12
                               labDetails.QM_LOCK_STATUS=="N"?
                                                                "-"
                                                               : labDetails.QM_SQC_APPROVAL=="N"?
                                                               "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ShowLabPositionMap(\"" + labDetails.QM_LAB_ID + "\"); return false;'>Correct Geo Position</a>"
                                                               :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>"),
                               ( labDetails.QM_LOCK_STATUS=="N"?
                                                               "-"
                                                               :labDetails.QM_SQC_APPROVAL=="N"?
                                                               ("<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteLabDetail(\"" + labDetails.QM_LAB_ID + "\"); return false;'>Delete Lab Detail</a>")
                                                               :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"))
                                                              ,
                                (labDetails.QM_LOCK_STATUS=="N"?
                                                               "-"
                                                             :labDetails.QM_SQC_APPROVAL=="N"?
                                                               ("<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='FinalizeLabDetail(\"" + labDetails.QM_LAB_ID + "\"); return false;'>Finalize Lab Detail</a>")
                                                               :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td></tr></table></center>"))


                          }
                    }).ToArray();
                    return arrLab;
                }
            }
            else if (level == "SQC")
            {
                var arrLab = labList.Select(labDetails => new
                {
                    id = labDetails.IMS_YEAR,
                    cell = new[]
                        {
                               (labDetails.IMS_YEAR).ToString(),
                               labDetails.MAST_DISTRICT_NAME,
                               //labDetails.MAST_BLOCK_NAME.ToString(),
                               labDetails.IMS_PACKAGE_ID,
                               labDetails.LAB_ESTABLISHMENT_DATE.ToString(),
                               labDetails.PHOTO.ToString(),
                               labDetails.QM_LAB_FILE_LATITUDE.ToString(),
                               labDetails.QM_LAB_FILE_LONGITUDE.ToString(),
                               labDetails.QM_SQC_APPROVAL,
                               labDetails.QM_LAB_ID.ToString(),
                         }
                }).ToArray();
                return arrLab;
            }
            else if (level == "CQC")
            {
                var arrLab = labList.Select(labDetails => new
                {
                    id = labDetails.IMS_YEAR,
                    cell = new[]
                        {
                               (labDetails.IMS_YEAR).ToString(),
                               labDetails.MAST_DISTRICT_NAME,
                               //labDetails.MAST_BLOCK_NAME.ToString(),
                               labDetails.IMS_PACKAGE_ID,
                               labDetails.LAB_ESTABLISHMENT_DATE.ToString(),
                               labDetails.PHOTO.ToString(),
                               labDetails.QM_SQC_APPROVAL,
                               labDetails.TEND_AGREEMENT_CODE.ToString(),
                               labDetails.QM_LAB_ID.ToString(),
                               labDetails.DATE_OF_COMPLETION.ToString(),
                               labDetails.DATE_OF_AWARD_WORK.ToString(),
                               labDetails.DATE_OF_COMMENCEMENT.ToString(),
                               labDetails.MAST_STATE_NAME,
                               labDetails.QM_LOCK_STATUS,
                               labDetails.QM_LAB_FILE_LATITUDE.ToString(),
                               labDetails.QM_LAB_FILE_LONGITUDE.ToString()
                         }
                }).ToArray();

                return arrLab;
            }
            return null;
        }



        public bool LabDetailSave(int agreementCode, string packageId, string labEshtablishedDate, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions commonFunction = new CommonFunctions();
                IFormatProvider culture = new System.Globalization.CultureInfo("fr-FR", true);
                DateTime labDate = DateTime.Parse(labEshtablishedDate, culture, System.Globalization.DateTimeStyles.AssumeLocal);
                int labId = 0;
                if (dbContext.QUALITY_QM_LAB_MASTER.ToList().Count() == 0)
                {
                    labId = 1;
                }
                else
                {
                    labId = dbContext.QUALITY_QM_LAB_MASTER.ToList().Max(lab => lab.QM_LAB_ID) + 1;
                }
                TEND_AGREEMENT_MASTER tendAgeement = dbContext.TEND_AGREEMENT_MASTER.Where(a => a.TEND_AGREEMENT_CODE == agreementCode).FirstOrDefault();
                if (ConvertStringToDate(labDate.ToString()) < ConvertStringToDate(tendAgeement.TEND_DATE_OF_AGREEMENT.ToString()))
                {
                    message = "Lab established date should be greater than agreement date.";
                    return false;
                }
                QUALITY_QM_LAB_MASTER labToadd = new QUALITY_QM_LAB_MASTER
                {
                    QM_LAB_ID = labId,
                    TEND_AGREEMENT_CODE = agreementCode,
                    IMS_PACKAGE_ID = packageId,
                    QM_LAB_ESTABLISHMENT_DATE = labDate,
                    QM_SQC_APPROVAL = "N",
                    QM_LAB_CLOSURE_STATUS = "I",
                    QM_LOCK_STATUS = "N",
                    USERID = PMGSYSession.Current.UserId,
                    IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]
                };

                dbContext.QUALITY_QM_LAB_MASTER.Add(labToadd);
                dbContext.SaveChanges();
                message = "Lab detail saved successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                message = ex.Message;
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            catch (DbEntityValidationException dbEx)
            {
                message = dbEx.Message;
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                message = ex.Message;
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Add Additional Cost details
        /// </summary>
        /// <param name="proposalAdditionalCostModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddLABSaveDetailsDAL(LabDateViewModel labDateViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int labId = 0;
                if (dbContext.QUALITY_QM_LAB_MASTER.ToList().Count() == 0)
                {
                    labId = 1;
                }
                else
                {
                    labId = dbContext.QUALITY_QM_LAB_MASTER.ToList().Max(lab => lab.QM_LAB_ID) + 1;
                }
                QUALITY_QM_LAB_MASTER labToadd = new QUALITY_QM_LAB_MASTER();
                labToadd.QM_LAB_ID = labId;
                labToadd.TEND_AGREEMENT_CODE = labDateViewModel.Agreement_No;
                labToadd.IMS_PACKAGE_ID = labDateViewModel.Package;
                labToadd.QM_LAB_ESTABLISHMENT_DATE = (DateTime)ConvertStringToDate(labDateViewModel.AGREEMENT_EST_DATE);
                labToadd.QM_SQC_APPROVAL = "N";
                labToadd.QM_LAB_CLOSURE_STATUS = "I";
                labToadd.QM_LOCK_STATUS = "N";
                labToadd.USERID = PMGSYSession.Current.UserId;
                labToadd.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext = new PMGSYEntities();
                dbContext.QUALITY_QM_LAB_MASTER.Add(labToadd);
                dbContext.SaveChanges();

                return true;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public bool LabDetailDeleteFinalizeDAL(int id, string type, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                if (type == "PLD")// PIU Lab Detail Delete
                {
                    foreach (QUALITY_QM_LAB_DETAILS labDetail in dbContext.QUALITY_QM_LAB_DETAILS.Where(lab => lab.QM_LAB_ID == id).ToList())
                    {

                        string PhysicalPath = ConfigurationManager.AppSettings["QUALITY_LAB_FILE_UPLOAD"];
                        string ThumbnailPath = Path.Combine(Path.Combine(PhysicalPath, "thumbnails"), labDetail.QM_LAB_FILE_NAME);
                        PhysicalPath = Path.Combine(PhysicalPath, labDetail.QM_LAB_FILE_NAME);
                        if (System.IO.File.Exists(PhysicalPath) && System.IO.File.Exists(ThumbnailPath))
                        {
                            System.IO.File.Delete(PhysicalPath);
                            System.IO.File.Delete(ThumbnailPath);
                        }

                        labDetail.USERID = PMGSYSession.Current.UserId;
                        labDetail.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(labDetail).State = EntityState.Modified;
                        dbContext.SaveChanges();

                        dbContext.QUALITY_QM_LAB_DETAILS.Remove(labDetail);

                    }
                    dbContext.SaveChanges();

                    QUALITY_QM_LAB_MASTER labMasterToDelete = new QUALITY_QM_LAB_MASTER();
                    labMasterToDelete = dbContext.QUALITY_QM_LAB_MASTER.Where(lab => lab.QM_LAB_ID == id).FirstOrDefault();

                    dbContext.QUALITY_QM_LAB_MASTER.Remove(labMasterToDelete);
                    dbContext.SaveChanges();
                    message = "";
                }
                else if (type == "PLF")// PIU Lab Detail Finalize
                {

                    if (dbContext.QUALITY_QM_LAB_DETAILS.Where(a => a.QM_LAB_ID == id).Any())
                    {
                        QUALITY_QM_LAB_MASTER labMasterToEdit = new QUALITY_QM_LAB_MASTER();
                        labMasterToEdit = dbContext.QUALITY_QM_LAB_MASTER.Where(lab => lab.QM_LAB_ID == id).FirstOrDefault();


                        labMasterToEdit.QM_LOCK_STATUS = "Y";
                        dbContext.Entry(labMasterToEdit).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    else
                    {
                        message = "Before finalized atleast one photo upload.";
                        return false;
                    }
                }
                else if (type == "PPD")// PIU Photo Delete
                {
                    QUALITY_QM_LAB_DETAILS labDetailToDelete = new QUALITY_QM_LAB_DETAILS();
                    labDetailToDelete = dbContext.QUALITY_QM_LAB_DETAILS.Where(lab => lab.QM_LAB_FILE_ID == id).FirstOrDefault();
                    dbContext.QUALITY_QM_LAB_DETAILS.Remove(labDetailToDelete);
                    dbContext.SaveChanges();
                }
                else if (type == "SLF")// SQC Lab Detail Finalize
                {
                    if (dbContext.QUALITY_QM_LAB_DETAILS.Where(a => a.QM_LAB_ID == id).Any())
                    {

                        QUALITY_QM_LAB_MASTER labMasterToEdit = new QUALITY_QM_LAB_MASTER();
                        labMasterToEdit = dbContext.QUALITY_QM_LAB_MASTER.Where(lab => lab.QM_LAB_ID == id).FirstOrDefault();
                        labMasterToEdit.QM_SQC_APPROVAL = "Y";
                        dbContext.Entry(labMasterToEdit).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    else
                    {
                        message = "Before finalized atleast one photo upload.";
                        return false;
                    }
                }




                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                message = ex.Message;
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }

            catch (DbEntityValidationException dbEx)
            {
                message = dbEx.Message;
                Elmah.ErrorSignal.FromCurrentContext().Raise(dbEx, HttpContext.Current);
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
                return false;
            }

            catch (Exception ex)
            {
                message = ex.Message;
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);

                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string AddLabFileUploadDetailsDAL(QUALITY_QM_LAB_DETAILS lst_lab_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;


                if (dbContext.QUALITY_QM_LAB_DETAILS.Count() == 0)
                {
                    MaxID = 0;

                }
                else
                {
                    MaxID = (from c in dbContext.QUALITY_QM_LAB_DETAILS select (Int32?)c.QM_LAB_FILE_ID ?? 0).Max();

                }
                ++MaxID;
                var fileCount = (from c in dbContext.QUALITY_QM_LAB_DETAILS
                                 where c.QM_LAB_ID == lst_lab_files.QM_LAB_ID
                                 select (Int32?)c.QM_LAB_FILE_ID ?? 0).Count();
                if (fileCount == 0)
                {

                    lst_lab_files.QM_LAB_IMAGE_FIRST = "Y";
                }
                else
                {
                    lst_lab_files.QM_LAB_IMAGE_FIRST = "N";
                }

                lst_lab_files.QM_LAB_FILE_ID = Convert.ToInt32(MaxID);


                dbContext.QUALITY_QM_LAB_DETAILS.Add(lst_lab_files);

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// List the uloaded Images
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="obsId"></param>
        /// <returns></returns>
        public Array GetLabFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int labId)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions objCommonFunction = new CommonFunctions();
                List<QUALITY_QM_LAB_DETAILS> listLabFiles = dbContext.QUALITY_QM_LAB_DETAILS.Where(p => p.QM_LAB_ID == labId).ToList();
                IQueryable<QUALITY_QM_LAB_DETAILS> query = listLabFiles.AsQueryable<QUALITY_QM_LAB_DETAILS>();
                QUALITY_QM_LAB_MASTER qm_LabMaster_Details = dbContext.QUALITY_QM_LAB_MASTER.Find(labId);



                totalRecords = listLabFiles.Count();

                string VirtualDirectoryUrl = string.Empty;
                string PhysicalPath = string.Empty;

                ///Path to upload files for NQM/SQM/CQC/SQC

                VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["QUALITY_LAB_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                PhysicalPath = ConfigurationManager.AppSettings["QUALITY_LAB_FILE_UPLOAD"];

                if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38 || PMGSYSession.Current.RoleCode == 54)
                {
                    return query.Select(fileDetails => new
                    {
                        id = fileDetails.QM_LAB_FILE_ID,
                        cell = new[] {
                                    Path.Combine(VirtualDirectoryUrl, HttpUtility.UrlEncode(fileDetails.QM_LAB_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") +
                                            "$$$" + (fileDetails.QM_LAB_FILE_LATITUDE == null ? "0" : fileDetails.QM_LAB_FILE_LATITUDE.ToString()) + "$$" +
                                            (fileDetails.QM_LAB_FILE_LONGITUDE == null ? "0" : fileDetails.QM_LAB_FILE_LONGITUDE.ToString()) +
                                            "$$$" + (objCommonFunction.GetDateTimeToString( Convert.ToDateTime(fileDetails.QM_LAB_FILE_UPLOAD_DATE) )),

                                    fileDetails.QM_LAB_FILE_DESC,
                                    Convert.ToDecimal(fileDetails.QM_LAB_FILE_LATITUDE).ToString(),
                                    Convert.ToDecimal(fileDetails.QM_LAB_FILE_LONGITUDE).ToString(),

                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.QM_LAB_FILE_NAME + "$" + fileDetails.QM_LAB_ID.ToString().Trim() }) +"\"); return false;'>Download</a>" ,

                                    qm_LabMaster_Details.QM_LOCK_STATUS=="N"?
                                                 qm_LabMaster_Details.QM_SQC_APPROVAL=="N"?
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_LAB_ID.ToString().Trim() +"'); return false;>Edit</a>"
                                    :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>")
                                    :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>"),

                                    qm_LabMaster_Details.QM_LOCK_STATUS=="N"?
                                                              qm_LabMaster_Details.QM_SQC_APPROVAL=="N"?
                                                             ("<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails(\"" + URLEncrypt.EncryptParameters(new string[] {"QM_LAB_ID="+ fileDetails.QM_LAB_ID.ToString().Trim(),"QM_LAB_FILE_ID=" +fileDetails.QM_LAB_FILE_ID.ToString().Trim(), "QM_LAB_FILE_NAME="+fileDetails.QM_LAB_FILE_NAME.ToString().Trim().Replace("/", "") }) +"\"); return false;>Delete</a>" )
                                                             :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>")
                                                             :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>"),

                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.QM_LAB_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_LAB_ID.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_LAB_ID.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_LAB_ID.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_LAB_ID.ToString().Trim() + "');></a></td></tr></table></center>"

                    }
                    }).ToArray();
                }
                else if (PMGSYSession.Current.RoleCode == 8 || PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9 || PMGSYSession.Current.RoleCode == 69 || PMGSYSession.Current.RoleCode == 48)
                {
                    return query.Select(fileDetails => new
                    {
                        id = fileDetails.QM_LAB_FILE_ID,
                        cell = new[] {
                                    Path.Combine(VirtualDirectoryUrl, HttpUtility.UrlEncode(fileDetails.QM_LAB_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") +
                                            "$$$" + (fileDetails.QM_LAB_FILE_LATITUDE == null ? "0" : fileDetails.QM_LAB_FILE_LATITUDE.ToString()) + "$$" +
                                            (fileDetails.QM_LAB_FILE_LONGITUDE == null ? "0" : fileDetails.QM_LAB_FILE_LONGITUDE.ToString()) +
                                            "$$$" + (objCommonFunction.GetDateTimeToString( Convert.ToDateTime(fileDetails.QM_LAB_FILE_UPLOAD_DATE) )),

                                    fileDetails.QM_LAB_FILE_DESC,
                                    Convert.ToDecimal(fileDetails.QM_LAB_FILE_LATITUDE).ToString(),
                                    Convert.ToDecimal(fileDetails.QM_LAB_FILE_LONGITUDE).ToString(),

                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.QM_LAB_FILE_NAME + "$" + fileDetails.QM_LAB_ID.ToString().Trim() }) +"\"); return false;'>Download</a>" ,

                                    qm_LabMaster_Details.QM_SQC_APPROVAL=="N"?
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_LAB_ID.ToString().Trim() +"'); return false;>Edit</a>"
                                    :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>"),

                                     qm_LabMaster_Details.QM_SQC_APPROVAL=="N"?
                                                             ("<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails(\"" + URLEncrypt.EncryptParameters(new string[] {"QM_LAB_ID="+ fileDetails.QM_LAB_ID.ToString().Trim(),"QM_LAB_FILE_ID=" +fileDetails.QM_LAB_FILE_ID.ToString().Trim(), "QM_LAB_FILE_NAME="+fileDetails.QM_LAB_FILE_NAME.ToString().Trim().Replace("/", "") }) +"\"); return false;>Delete</a>" )
                                                             :("<center><table><tr><td style='border:none'><span class='ui-icon ui-icon-locked' title='Locked' ></span></td> </tr></table></center>"),

                                  "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.QM_LAB_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_LAB_ID.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_LAB_ID.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim()  + "$" + fileDetails.QM_LAB_ID.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.QM_LAB_FILE_ID.ToString().Trim() + "$" + fileDetails.QM_LAB_ID.ToString().Trim() + "');></a></td></tr></table></center>"

                    }
                    }).ToArray();
                }

                return query.ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoring.GetLabFilesListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string DeleteLabFileDetailsDAL(int QM_FILE_ID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_QM_LAB_DETAILS db_qm_inspection_files = dbContext.QUALITY_QM_LAB_DETAILS.Find(QM_FILE_ID);

                //Added By Abhishek Kamble 30-nov-2013
                db_qm_inspection_files.USERID = PMGSYSession.Current.UserId;
                db_qm_inspection_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(db_qm_inspection_files).State = EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.QUALITY_QM_LAB_DETAILS.Remove(db_qm_inspection_files);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update Lab Image Information such as Description,Latitude,Longitude etc.
        /// </summary>
        /// <param name="qm_inspection_files"></param>
        /// <returns></returns>
        public string UpdateLabImageDetailsDAL(LabFileUploadViewModel labfileuploadViewModel)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_QM_LAB_DETAILS lab_qm_file_model = dbContext.QUALITY_QM_LAB_DETAILS.Find(labfileuploadViewModel.QM_FILE_ID);
                lab_qm_file_model.QM_LAB_FILE_DESC = labfileuploadViewModel.Image_Description;
                lab_qm_file_model.QM_LAB_FILE_LATITUDE = labfileuploadViewModel.Latitude;
                lab_qm_file_model.QM_LAB_FILE_LONGITUDE = labfileuploadViewModel.Longitude;

                //Added By Abhishek Kamble 30-nov-2013
                lab_qm_file_model.USERID = PMGSYSession.Current.UserId;
                lab_qm_file_model.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(lab_qm_file_model).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion


        #region Common Function
        public DateTime? ConvertStringToDate(string dateToConvert)
        {

            if (dateToConvert != null)
            {

                DateTime MyDateTime;
                MyDateTime = new DateTime();
                MyDateTime = DateTime.ParseExact(dateToConvert, "dd/MM/yyyy", null);

                return MyDateTime;
            }
            else
            {
                return null;
            }
        }
        public string ConvertDateToString(DateTime? date)
        {
            return Convert.ToDateTime(date).ToString("dd/MM/yyyy");
        }
        #endregion


        #region MP Visit

        /// <summary>
        /// Listing of Roads to fill details of MP Visit
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="blockCode"></param>
        /// <returns></returns>
        public Array GetRoadListForMPVisitDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, string filters, int stateCode, int districtCode, int blockCode)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                List<USP_QM_MP_VISIT_ROAD_LIST_Result> itemList = new List<USP_QM_MP_VISIT_ROAD_LIST_Result>();

                itemList = dbContext.USP_QM_MP_VISIT_ROAD_LIST(stateCode, districtCode, blockCode).ToList<USP_QM_MP_VISIT_ROAD_LIST_Result>();

                totalRecords = itemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                itemList = itemList.OrderBy(x => x.DISTRICT_NAME).ToList();
                return itemList.Select(itemDetails => new
                {

                    id = itemDetails.IMS_PR_ROAD_CODE.ToString().Trim(),
                    cell = new[] {
                                        PMGSYSession.Current.StateName,
                                        itemDetails.DISTRICT_NAME,
                                        itemDetails.BLOCK_NAME,
                                        itemDetails.IMS_PACKAGE_ID,
                                        (itemDetails.IMS_YEAR + "-" + (itemDetails.IMS_YEAR+1)).ToString(),
                                        itemDetails.IMS_ROAD_NAME,
                                        itemDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                        itemDetails.IMS_PAV_LENGTH.ToString(),
                                        //itemDetails.IMS_ISCOMPLETED,
                                        itemDetails.ROAD_AMT.ToString(),
                                       "<a href='#' title='Click here to fill observations' class='ui-icon ui-icon-plusthick ui-align-center' onClick='qmFillMPVisitDetails(\"" +  itemDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>Fill Observations</a>",
                        }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        //Get Block Code using PR Road Code.
        public int GetBlockCodeDAL(int prRoadCode)
        {
            dbContext = new PMGSYEntities();

            try
            {
                return dbContext.IMS_SANCTIONED_PROJECTS.Where(model => model.IMS_PR_ROAD_CODE == prRoadCode).Select(model => model.MAST_BLOCK_CODE).FirstOrDefault();

            }
            catch (Exception ex)
            {
                return 0;
            }

        }
        // Save MP Visit Details
        public bool AddMPVisitDetailsDAL(FillMPVisitModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {

                QUALITY_QM_MP_VISIT master = new QUALITY_QM_MP_VISIT();

                if (dbContext.QUALITY_QM_MP_VISIT.Any())
                {
                    master.MP_VISIT_ID = dbContext.QUALITY_QM_MP_VISIT.Max(m => m.MP_VISIT_ID) + 1;
                }
                else
                {
                    master.MP_VISIT_ID = 1;
                }

                master.IMS_PR_ROAD_CODE = model.PrRoadCode;
                master.MP_NAME = model.MPName;
                master.MP_CONST_CODE = model.ConstituencyCode;
                master.MP_HOUSE = model.MPHouse;
                master.ADMIN_ND_CODE = model.PIUNameCode;
                master.DATE_OF_VISIT = Convert.ToDateTime(model.DateOfVisit);


                master.REMARKS = model.Remarks;
                dbContext.QUALITY_QM_MP_VISIT.Add(master);
                dbContext.SaveChanges();
                message = "MP Visit Details saved Successfully.";
                return true;

            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        // List
        public Array GetMPVisitListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int prRoadCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var MPDetailsList = dbContext.QUALITY_QM_MP_VISIT.Where(model => model.IMS_PR_ROAD_CODE == prRoadCode).ToList();


                totalRecords = MPDetailsList.Count;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        MPDetailsList = MPDetailsList.OrderBy(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        MPDetailsList = MPDetailsList.OrderByDescending(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    MPDetailsList = MPDetailsList.OrderBy(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }



                return MPDetailsList.Select(MPDetailsList1 => new
                {
                    cell = new[]{

                    MPDetailsList1.MP_NAME == null?string.Empty:MPDetailsList1.MP_NAME.ToString(),
                    //MPDetailsList1.PIU_NAME == null?string.Empty:MPDetailsList1.PIU_NAME.ToString(),
                    MPDetailsList1.DATE_OF_VISIT == null?"NA":Convert.ToDateTime(MPDetailsList1.DATE_OF_VISIT).ToString("dd/MM/yyyy"),
                    MPDetailsList1.MP_HOUSE =="L"? "Loksabha":( MPDetailsList1.MP_HOUSE =="R"?"Rajyasabha":""),
                    MPDetailsList1.REMARKS == null?string.Empty:MPDetailsList1.REMARKS.ToString(),
                  
                   //MPDetailsList1.DATE_OF_VISIT == null?string.Empty:MPDetailsList1.DATE_OF_VISIT.ToLongDateString(),
                    URLEncrypt.EncryptParameters1(new string[]{"VisitCode =" + MPDetailsList1.MP_VISIT_ID.ToString().Trim(),"PRCode="+ MPDetailsList1.IMS_PR_ROAD_CODE.ToString().Trim()}),
                    "<a href='#' title='Click here to Upload Files' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UploadMPFiles(\"" +  MPDetailsList1.MP_VISIT_ID.ToString().Trim()  +"\"); return false;'> File Uploads</a>",
                }
                }).ToArray();


            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public FillMPVisitModel GetMPVisitDetailsDAL(int visitCode)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                QUALITY_QM_MP_VISIT master = dbContext.QUALITY_QM_MP_VISIT.Find(visitCode);

                FillMPVisitModel model = new FillMPVisitModel();


                model.Operation = "E";
                model.ConstituencyCode = master.MP_CONST_CODE;
                model.PrRoadCode = master.IMS_PR_ROAD_CODE;
                model.MPName = master.MP_NAME;
                model.MPHouse = master.MP_HOUSE;
                model.PIUNameCode = master.ADMIN_ND_CODE;
                model.DateOfVisit = Convert.ToString(master.DATE_OF_VISIT);
                // Convert.ToDateTime(MPDetailsList1.DATE_OF_VISIT).ToString("dd/MM/yyyy")
                model.DateOfVisit = Convert.ToDateTime(master.DATE_OF_VISIT).ToString("dd/MM/yyyy");
                model.Remarks = master.REMARKS;
                //taxModel.Effective_Date = objCommon.GetDateTimeToString(taxMaster.MAST_EFFECTIVE_DATE);

                model.EncryptedVisitCode = URLEncrypt.EncryptParameters1(new string[] { "VisitCode = " + master.MP_VISIT_ID });
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool UpdateMpVisitDAL(FillMPVisitModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            int visitCode = 0;
            Dictionary<string, string> decryptedParameters = null;
            String[] urlParameters = null;
            try
            {
                urlParameters = model.EncryptedVisitCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParameters[0], urlParameters[1], urlParameters[2] });
                visitCode = Convert.ToInt32(decryptedParameters["VisitCode"]);

                QUALITY_QM_MP_VISIT master = dbContext.QUALITY_QM_MP_VISIT.Find(visitCode);

                master.DATE_OF_VISIT = Convert.ToDateTime(model.DateOfVisit);
                master.IMS_PR_ROAD_CODE = model.PrRoadCode;
                master.MP_NAME = model.MPName;
                master.MP_CONST_CODE = model.ConstituencyCode;
                master.MP_HOUSE = model.MPHouse;
                master.ADMIN_ND_CODE = model.PIUNameCode;
                master.REMARKS = model.Remarks;

                dbContext.Entry(master).State = EntityState.Modified;
                dbContext.SaveChanges();
                message = "MP visit details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteMPDAL(int visitCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                QUALITY_QM_MP_VISIT mpVisit = dbContext.QUALITY_QM_MP_VISIT.Find(visitCode);

                dbContext.QUALITY_QM_MP_VISIT.Remove(mpVisit);

                dbContext.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public IMS_SANCTIONED_PROJECTS GetRoadDetails(int prRoadCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.IMS_SANCTIONED_PROJECTS.Where(model => model.IMS_PR_ROAD_CODE == prRoadCode).FirstOrDefault();

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public QUALITY_QM_MP_VISIT GetVisitDetails(int VisitCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.QUALITY_QM_MP_VISIT.Where(model => model.MP_VISIT_ID == VisitCode).FirstOrDefault();

            }
            catch (Exception ex)
            {
                return null;
            }
        }


        #region File Upload
        // Add Image or PDF 
        public string AddFileUploadMPVisitDetailsDAL(List<QUALITY_QM_MP_VISIT_FILES> lst_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;
                foreach (QUALITY_QM_MP_VISIT_FILES fileModel in lst_files)
                {
                    if (dbContext.QUALITY_QM_MP_VISIT_FILES.Count() == 0)
                    {
                        MaxID = 0;
                    }
                    else
                    {
                        MaxID = (from c in dbContext.QUALITY_QM_MP_VISIT_FILES select (Int32?)c.FILE_ID ?? 0).Max();
                    }
                    ++MaxID;
                    fileModel.FILE_ID = Convert.ToInt32(MaxID);
                    fileModel.USERID = PMGSYSession.Current.UserId;
                    fileModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.QUALITY_QM_MP_VISIT_FILES.Add(fileModel);
                }
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Get Image List
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetImageListMPVisitDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MP_VISIT_ID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<QUALITY_QM_MP_VISIT_FILES> lisImageFiles = dbContext.QUALITY_QM_MP_VISIT_FILES.Where(p => p.MP_VISIT_ID == MP_VISIT_ID && p.IS_PDF == "N").ToList();
                IQueryable<QUALITY_QM_MP_VISIT_FILES> query = lisImageFiles.AsQueryable<QUALITY_QM_MP_VISIT_FILES>();
                totalRecords = lisImageFiles.Count();


                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["MPVISIT_IMAGE_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string PhysicalPath = ConfigurationManager.AppSettings["MPVISIT_IMAGE_FILE_UPLOAD"];

                return query.Select(fileDetails => new
                {
                    id = fileDetails.FILE_ID + "$" + fileDetails.MP_VISIT_ID,
                    cell = new[] {   
                                   // @"file/://"  + Path.Combine(PhysicalPath, fileDetails.IMS_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    Path.Combine(VirtualDirectoryUrl, fileDetails.FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                   // fileDetails.CHAINAGE.ToString(),
                                   // fileDetails.ISPF_FILE_REMARK,
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    //"<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.MP_VISIT_ID.ToString().Trim()  + "$" + fileDetails.MP_VISIT_ID.ToString().Trim() +"'); return false;>Edit</a>",
                                    "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('" + fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.MP_VISIT_ID.ToString().Trim() + "','" + fileDetails.FILE_NAME + "'); return false;>Delete</a>",                                    
                                 //   "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        /// <summary>
        ///  Get PDF List
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetPDFListMPVisitDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MP_VISIT_ID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<QUALITY_QM_MP_VISIT_FILES> listFiles = dbContext.QUALITY_QM_MP_VISIT_FILES.Where(p => p.MP_VISIT_ID == MP_VISIT_ID && p.IS_PDF == "Y").ToList();
                IQueryable<QUALITY_QM_MP_VISIT_FILES> query = listFiles.AsQueryable<QUALITY_QM_MP_VISIT_FILES>();
                totalRecords = listFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MP_VISIT_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = ConfigurationManager.AppSettings["MPVISIT_PDF_FILE_UPLOAD_VIRTUAL_DIR_PATH"];
                string PhysicalPath = ConfigurationManager.AppSettings["MPVISIT_PDF_FILE_UPLOAD"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.FILE_ID + "$" + fileDetails.MP_VISIT_ID,
                    cell = new[] {
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.FILE_NAME  }),                                                                                                      
                                    //fileDetails.ISPF_FILE_REMARK,
                                  
                                    //  "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditPDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                    // "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.FILE_ID.ToString().Trim()  + "$" + fileDetails.MP_VISIT_ID.ToString().Trim() + "','" + fileDetails.FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>",
                                    //"<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }


        /// <summary>
        ///  Delete File and File Details
        /// </summary>
        /// <param name="ims_proposal_files"></param>
        /// <returns></returns>
        public string DeleteMPVisitFileDetailsDAL(QUALITY_QM_MP_VISIT_FILES visit_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                QUALITY_QM_MP_VISIT_FILES obj_visit_files = dbContext.QUALITY_QM_MP_VISIT_FILES.Where(

                    a => a.MP_VISIT_ID == visit_files.MP_VISIT_ID &&

                    a.FILE_ID == visit_files.FILE_ID &&

                    a.IS_PDF == visit_files.IS_PDF &&

                    a.FILE_NAME == visit_files.FILE_NAME).FirstOrDefault();


                obj_visit_files.USERID = PMGSYSession.Current.UserId;
                obj_visit_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(obj_visit_files).State = EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.QUALITY_QM_MP_VISIT_FILES.Remove(obj_visit_files);

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }



        #endregion


        #endregion

        // Added By Aanad 10 DEC 2015
        #region Team Inspection
        public string QMTeamCreateDAL(QUALITY_QM_TEAM team)
        {
            dbContext = new PMGSYEntities();
            PMGSYEntities dbContextNew = new PMGSYEntities();

            try
            {
                if (dbContext.QUALITY_QM_TEAM.Where(t => t.QM_TEAM_CODE == team.QM_TEAM_CODE && t.ADMIN_SCHEDULE_CODE == team.ADMIN_SCHEDULE_CODE).Count() < 1 || dbContext.QUALITY_QM_TEAM.Where(t => team.QM_TEAM_CODE == team.QM_TEAM_CODE).Count() < 2)
                {
                    int teamId = dbContext.QUALITY_QM_TEAM.ToList().Count();
                    if (teamId > 0)
                    {
                        teamId = dbContext.QUALITY_QM_TEAM.ToList().Max(T => T.QM_TEAM_ID);
                    }
                    teamId += 1;
                    team.QM_TEAM_ID = teamId;
                    team.TEAM_ACTIVE_STATUS = "Y";

                    QUALITY_QM_TEAM qmToAdd = new QUALITY_QM_TEAM
                    {
                        QM_TEAM_ID = teamId,
                        ADMIN_SCHEDULE_CODE = team.ADMIN_SCHEDULE_CODE,
                        IS_TEAM_LEADER = team.IS_TEAM_LEADER,
                        QM_TEAM_CODE = team.QM_TEAM_CODE,
                        TEAM_ACTIVE_STATUS = team.TEAM_ACTIVE_STATUS,
                    };

                    dbContextNew.QUALITY_QM_TEAM.Add(qmToAdd);
                    dbContextNew.SaveChanges();

                    return "Team Added";
                }
                else
                {
                    return "Team Member Already exist";
                }

            }
            catch (Exception ex)
            {
                return "Error eccoured during processing!";
            }

        }
        public string QMTeamDeActivateDAL(int teamid)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var teamToEdit = dbContext.QUALITY_QM_TEAM.Where(tm => tm.QM_TEAM_ID == teamid).FirstOrDefault();
                teamToEdit.TEAM_ACTIVE_STATUS = "N";
                dbContext.Entry(teamToEdit).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return "Team DeActivated";


            }
            catch (Exception ex)
            {
                return "Error eccoured during processing!";
            }

        }


        /// <summary>
        /// Genarete Letter for Team
        /// </summary>
        /// <param name="model"></param>
        public void GenerateLetterForTeam(QMLetterModel model)
        {
            dbContext = new PMGSYEntities();
            try
            {
                Microsoft.Reporting.WebForms.ReportViewer rview = new Microsoft.Reporting.WebForms.ReportViewer();
                rview.ServerReport.ReportServerUrl = new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.ReportServerUrl"]);
                System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter> paramList = new System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter>();
                if (model.QC_TYPE.Equals("S"))//SQC
                {
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("TEAMCODE", model.FILE_NAME.ToString()));
                }
                else if (model.QC_TYPE.Equals("I"))//NQM - Independent Monitor
                {
                    paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("TEAMCODE", model.FILE_NAME.ToString()));
                }
                Microsoft.Reporting.WebForms.IReportServerCredentials irsc = new PMGSY.Common.CommonFunctions.CustomReportCredentials(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Username"], System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Password"]);
                rview.ServerReport.ReportServerCredentials = irsc;
                rview.ServerReport.ReportPath = "/PMGSYCitizen/QMTeamLetter";
                rview.ServerReport.SetParameters(paramList);
                string mimeType, encoding, extension, deviceInfo;
                string[] streamids;
                Microsoft.Reporting.WebForms.Warning[] warnings;
                string format = "PDF"; //Desired format goes here (PDF, Excel, or Image)
                deviceInfo = "<DeviceInfo>" + "<SimplePageHeaders>True</SimplePageHeaders>" + "</DeviceInfo>";
                byte[] bytes = rview.ServerReport.Render(format, deviceInfo, out mimeType, out encoding, out extension, out streamids, out warnings);
                string filePath = ConfigurationManager.AppSettings["QUALITY_QM_LETTER_TEAM"].ToString() + model.FILE_NAME;
                System.IO.File.WriteAllBytes(filePath, bytes);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        #endregion

        #region Generate Joint Inspection PDF


        /// <summary>
        /// generates the pdf file for joint inspection format and store it to the server.
        /// </summary>
        /// <param name="workid"></param>

        public byte[] GenerateJointInspectionPDF(int id)
        {
            dbContext = new PMGSYEntities();
            try
            {
                Microsoft.Reporting.WebForms.ReportViewer rview = new Microsoft.Reporting.WebForms.ReportViewer();
                rview.ServerReport.ReportServerUrl = new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.ReportServerUrl"]);
                System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter> paramList = new System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter>();
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("WORK_ID", id.ToString()));
                Microsoft.Reporting.WebForms.IReportServerCredentials irsc = new PMGSY.Common.CommonFunctions.CustomReportCredentials(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Username"], System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Password"]);
                rview.ServerReport.ReportServerCredentials = irsc;
                rview.ServerReport.ReportPath = "/PMGSYCitizen/QMJointInspectionFormat";
                rview.ServerReport.SetParameters(paramList);
                string mimeType, encoding, extension, deviceInfo;
                string[] streamids;
                Microsoft.Reporting.WebForms.Warning[] warnings;
                string format = "PDF"; //Desired format goes here (PDF, Excel, or Image)
                deviceInfo = "<DeviceInfo>" + "<SimplePageHeaders>True</SimplePageHeaders>" + "</DeviceInfo>";
                byte[] bytes = rview.ServerReport.Render(format, deviceInfo, out mimeType, out encoding, out extension, out streamids, out warnings);
                return bytes;

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array GetJointInspectionDetailsList(int blockCode, string ptype, string inspstatus, int page, int rows, string sidx, string sord, out Int32 totalRecords)
        {
            dbContext = new PMGSYEntities();
            int stateCode = PMGSYSession.Current.StateCode;
            int districtCode = PMGSYSession.Current.DistrictCode;


            var workList = dbContext.USP_QM_JOINT_INSPECTION_LIST(stateCode, districtCode, blockCode, ptype, inspstatus, PMGSYSession.Current.PMGSYScheme).ToList<USP_QM_JOINT_INSPECTION_LIST_Result>();
            totalRecords = workList.Count;
            return workList.Select(work => new
            {
                cell = new[]{
                work.MAST_BLOCK_NAME,

                work.IMS_PACKAGE_ID,
                work.SANCTION_YEAR,
                work.WORK_NAME,
                work.PROG_STATUS,
                work.PROPOSAL_TYPE,
                "<a href='/QualityMonitoring/GenerateJIFormat/"+work.IMS_PR_ROAD_CODE.ToString()+"' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center'>Download Joint Inspection Format</a>",
                //work.QM_JNT_INSP_OVERALL,
                //work.IMS_JNT_INSP_DATE,
                //(work.QM_JNT_INSP_CODE==0 || work.JI_FILE_ID == null)?"---":"<a href='/QualityMonitoring/QMJIDownlaodPDF/"+work.JI_FILE_ID+"'  title='Click here to Download Joint Inspection PDF' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center'> Download PDF </a>",
                //work.QM_JNT_INSP_CODE==0?"---":"<a href='#' title='Click here to Add Action Taken Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ATRJIInspection(" +  work.QM_JNT_INSP_CODE.ToString().Trim()  +"); return false;'> Action Taken </a>",
                //work.QM_JNT_INSP_CODE==0?"---":"<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ShowJIDetail(" + work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Show</a>",
                //work.QM_JNT_INSP_CODE==0?"<a href='#' title='Click here to Add Joint Inspection' class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddJIInspection(" +  work.IMS_PR_ROAD_CODE.ToString().Trim()  +"); return false;'> Add </a>":"---",
                "<a href='#' title='Click here to Add Joint Inspection' class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddJIInspection(" +  work.IMS_PR_ROAD_CODE.ToString().Trim()  +"); return false;'> Add </a>",
                //(work.QM_JNT_INSP_CODE==0 || dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(x=>x.QM_JNT_INSP_CODE == work.QM_JNT_INSP_CODE).Any())?"---": "<a href='#' class='ui-icon ui-icon-pencil ui-align-center' onclick='EditJIDetail(" + work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Edit</a>",
                //(work.QM_JNT_INSP_CODE==0 || dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(x=>x.QM_JNT_INSP_CODE == work.QM_JNT_INSP_CODE).Any())?"---": "<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteJIDetail(" +  work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Delete</a>"
                }
            }).ToArray();
        }

        public QMJIViewModel QMJIHeader(int roadCode)
        {
            dbContext = new PMGSYEntities();

            var jiHeader = dbContext.IMS_SANCTIONED_PROJECTS.Where(w => w.IMS_PR_ROAD_CODE == roadCode).FirstOrDefault();
            QMJIViewModel jiModel = new QMJIViewModel
            {
                _workType = jiHeader.IMS_PROPOSAL_TYPE == "P" ? "Road" : "Bridge",
                BlockName = jiHeader.MASTER_BLOCK.MAST_BLOCK_NAME,
                WorkName = jiHeader.IMS_PROPOSAL_TYPE == "P" ? jiHeader.IMS_ROAD_NAME : jiHeader.IMS_BRIDGE_NAME,
                PackageId = jiHeader.IMS_PACKAGE_ID,
                SanctionYear = jiHeader.IMS_YEAR + "-" + (jiHeader.IMS_YEAR + 1),
                connectivityType = jiHeader.IMS_UPGRADE_CONNECT == "N" ? "New Connectivity" : "Upgradation",
                progressStatus = jiHeader.IMS_ISCOMPLETED == "C" || jiHeader.IMS_ISCOMPLETED == "X" ? "Completed" : "Inprogress",

                workType = jiHeader.IMS_PROPOSAL_TYPE,
                imsUpgradeConnect = jiHeader.IMS_UPGRADE_CONNECT,
                imsProgress = jiHeader.IMS_ISCOMPLETED,
            };
            return jiModel;

        }

        /// <summary>
        /// Save Joint Inspection Details
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool SaveQMJointInspectionDetailsDAL(QMJIViewModel model, ref string message)
        {
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                using (dbContext = new Models.PMGSYEntities())
                {
                    using (TransactionScope scope = new TransactionScope())
                    {
                        Int32? MaxID;
                        if (!dbContext.QUALITY_QM_JOINT_INSPECTION.Any())
                        {
                            MaxID = 0;
                        }
                        else
                        {
                            MaxID = (from c in dbContext.QUALITY_QM_JOINT_INSPECTION select (Int32)c.QM_JNT_INSP_CODE).Max();
                        }

                        QUALITY_QM_JOINT_INSPECTION quality_qm_joint_inspection = new QUALITY_QM_JOINT_INSPECTION();
                        model.qmJICode = Convert.ToInt32(MaxID) + 1;

                        quality_qm_joint_inspection.QM_JNT_INSP_CODE = model.qmJICode;
                        quality_qm_joint_inspection.IMS_PR_ROAD_CODE = model.roadCode;
                        quality_qm_joint_inspection.IMS_JNT_INSP_DATE = objCommon.GetStringToDateTime(model.inspectionDate);
                        quality_qm_joint_inspection.QM_JNT_REP_MP_NAME = model.mpName == null ? null : model.mpName.Trim();
                        quality_qm_joint_inspection.QM_JNT_REP_MLA_NAME = model.mlaName == null ? null : model.mlaName.Trim();
                        quality_qm_joint_inspection.QM_JNT_REP_GPR_NAME = model.gpName == null ? null : model.gpName.Trim();
                        quality_qm_joint_inspection.QM_JNT_REP_OR_NAME = model.otherRepresentativeName == null ? null : model.otherRepresentativeName.Trim();
                        quality_qm_joint_inspection.QM_JNT_AGO_SE_NAME = model.seName == null ? null : model.seName.Trim();
                        quality_qm_joint_inspection.QM_JNT_AGO_PIU_NAME = model.piuName == null ? null : model.piuName.Trim();
                        quality_qm_joint_inspection.QM_JNT_AGO_AE_NAME = model.aeName == null ? null : model.aeName.Trim();
                        quality_qm_joint_inspection.QM_JNT_AGO_DO_NAME = model.districtOfficerName == null ? null : model.districtOfficerName.Trim();
                        quality_qm_joint_inspection.QM_JNT_CON_REP_AVL = model.contractorRepresentative == null ? null : model.contractorRepresentative.Trim();
                        quality_qm_joint_inspection.QM_JNT_CON_REP_NAME = model.contractorName == null ? null : model.contractorName.Trim();
                        quality_qm_joint_inspection.QM_JNT_SRV_CON_TRG_HAB = model.serveConnectivity == null ? null : model.serveConnectivity.Trim();
                        quality_qm_joint_inspection.QM_JNT_WORK_PRG_SAT = model.workProgressSatisfactory == null ? null : model.workProgressSatisfactory.Trim();
                        quality_qm_joint_inspection.QM_JNT_CD_WRK_SUFF = model.cdWorkSufficient == null ? null : model.cdWorkSufficient.Trim();
                        quality_qm_joint_inspection.QM_JNT_REASON = model.variationExecLengthReason == null ? null : model.variationExecLengthReason.Trim();
                        quality_qm_joint_inspection.QM_JNT_INSP_OVERALL = model.qualityGrading == null ? null : model.qualityGrading.Trim();
                        quality_qm_joint_inspection.QM_JNT_INSP_REMARKS = model.remarks == null ? null : model.remarks.Trim();

                        quality_qm_joint_inspection.USERID = PMGSYSession.Current.UserId;
                        quality_qm_joint_inspection.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.QUALITY_QM_JOINT_INSPECTION.Add(quality_qm_joint_inspection);
                        dbContext.SaveChanges();
                        //Save File Details
                        if (!string.IsNullOrEmpty(model.inspectionFileName))
                        {
                            int MaxFileID = 0;
                            if (!dbContext.QUALITY_QM_JOINT_INSPECTION_FILE.Any())
                            {
                                MaxFileID = 0;
                            }
                            else
                            {
                                MaxFileID = (from c in dbContext.QUALITY_QM_JOINT_INSPECTION_FILE
                                                 //  where c.QM_JNT_INSP_CODE == model.qmJICode
                                             select (Int32)c.QM_JNT_INSP_FILE_ID).Max();
                            }
                            QUALITY_QM_JOINT_INSPECTION_FILE quality_qm_joint_inspection_file = new QUALITY_QM_JOINT_INSPECTION_FILE();
                            quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_ID = MaxFileID + 1;
                            quality_qm_joint_inspection_file.QM_JNT_INSP_CODE = model.qmJICode;
                            quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_DESCR = model.inspectionFileName;
                            quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_NAME = model.inspectionFileName;
                            quality_qm_joint_inspection_file.IMS_JNT_INSP_FILE_UPLOAD_DATE = DateTime.Now;
                            quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_TYPE = "F";
                            quality_qm_joint_inspection_file.USERID = PMGSYSession.Current.UserId;
                            quality_qm_joint_inspection_file.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.QUALITY_QM_JOINT_INSPECTION_FILE.Add(quality_qm_joint_inspection_file);
                        }

                        //transaction complete
                        dbContext.SaveChanges();
                        scope.Complete();

                        message = string.Empty;
                        return true;
                    }
                }
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        //ModelState.AddModelError("", eve.ValidationErrors.ToString());
                    }
                }
                message = "An Error Occurred While Processing Your Request.";
                return false;
            }
            catch (Exception ex)
            {
                message = "An Error Occurred While Processing Your Request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                    dbContext.Dispose();
            }
        }

        public QMJIViewModel GetJIDetailsDAL(int jiCode)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions comm = new CommonFunctions();
            var JIRecord = dbContext.QUALITY_QM_JOINT_INSPECTION.Where(x => x.QM_JNT_INSP_CODE == jiCode).FirstOrDefault();
            QMJIViewModel model = QMJIHeader(JIRecord.IMS_PR_ROAD_CODE);


            try
            {


                if (JIRecord != null)
                {
                    model.dbOperation = "E";
                    model.qmJICode = jiCode;
                    model.stateCode = JIRecord.IMS_SANCTIONED_PROJECTS.MAST_STATE_CODE;
                    model.districtCode = JIRecord.IMS_SANCTIONED_PROJECTS.MAST_DISTRICT_CODE;
                    model.blockCode = JIRecord.IMS_SANCTIONED_PROJECTS.MAST_BLOCK_CODE;

                    model.workType = JIRecord.IMS_SANCTIONED_PROJECTS.IMS_PROPOSAL_TYPE;

                    model.roadCode = JIRecord.IMS_PR_ROAD_CODE;
                    model.inspectionDate = comm.GetDateTimeToString(JIRecord.IMS_JNT_INSP_DATE);

                    model.mpName = JIRecord.QM_JNT_REP_MP_NAME ?? string.Empty;
                    model.isMP = string.IsNullOrEmpty(model.mpName) ? false : true;

                    model.mlaName = JIRecord.QM_JNT_REP_MLA_NAME ?? string.Empty;
                    model.isMLA = string.IsNullOrEmpty(model.mlaName) ? false : true;

                    model.gpName = JIRecord.QM_JNT_REP_GPR_NAME ?? string.Empty;
                    model.isGP = string.IsNullOrEmpty(model.gpName) ? false : true;

                    model.otherRepresentativeName = JIRecord.QM_JNT_REP_OR_NAME ?? string.Empty;
                    model.isOther = string.IsNullOrEmpty(model.otherRepresentativeName) ? false : true;

                    model.seName = JIRecord.QM_JNT_AGO_SE_NAME ?? string.Empty;
                    model.isSE = string.IsNullOrEmpty(model.seName) ? false : true;

                    model.piuName = JIRecord.QM_JNT_AGO_PIU_NAME ?? string.Empty;
                    model.isPIU = string.IsNullOrEmpty(model.piuName) ? false : true;

                    model.aeName = JIRecord.QM_JNT_AGO_AE_NAME ?? string.Empty;
                    model.isAE = string.IsNullOrEmpty(model.aeName) ? false : true;

                    model.districtOfficerName = JIRecord.QM_JNT_AGO_DO_NAME ?? string.Empty;
                    model.isDO = string.IsNullOrEmpty(model.districtOfficerName) ? false : true;

                    model.contractorRepresentative = JIRecord.QM_JNT_CON_REP_AVL ?? string.Empty;
                    model.contractorName = JIRecord.QM_JNT_CON_REP_NAME ?? string.Empty;
                    model.serveConnectivity = JIRecord.QM_JNT_SRV_CON_TRG_HAB ?? string.Empty;
                    model.workProgressSatisfactory = JIRecord.QM_JNT_WORK_PRG_SAT ?? string.Empty;
                    model.cdWorkSufficient = JIRecord.QM_JNT_CD_WRK_SUFF ?? string.Empty;
                    model.variationExecLengthReason = JIRecord.QM_JNT_REASON ?? string.Empty;
                    model.qualityGrading = JIRecord.QM_JNT_INSP_OVERALL ?? string.Empty;
                    model.remarks = JIRecord.QM_JNT_INSP_REMARKS ?? string.Empty;

                    model.previousFileName = dbContext.QUALITY_QM_JOINT_INSPECTION_FILE.Where(x => x.QM_JNT_INSP_CODE == jiCode).Select(x => x.QM_JNT_INSP_FILE_NAME).FirstOrDefault();
                }


                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public string UpdateQMJointInspectionDetailsDAL(QMJIViewModel model)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            try
            {
                QUALITY_QM_JOINT_INSPECTION quality_qm_joint_inspection = dbContext.QUALITY_QM_JOINT_INSPECTION.Where(x => x.QM_JNT_INSP_CODE == model.qmJICode).FirstOrDefault();
                quality_qm_joint_inspection.QM_JNT_REP_MP_NAME = model.mpName == null ? null : model.mpName.Trim();
                quality_qm_joint_inspection.QM_JNT_REP_MLA_NAME = model.mlaName == null ? null : model.mlaName.Trim();
                quality_qm_joint_inspection.QM_JNT_REP_GPR_NAME = model.gpName == null ? null : model.gpName.Trim();
                quality_qm_joint_inspection.QM_JNT_REP_OR_NAME = model.otherRepresentativeName == null ? null : model.otherRepresentativeName.Trim();
                quality_qm_joint_inspection.QM_JNT_AGO_SE_NAME = model.seName == null ? null : model.seName.Trim();
                quality_qm_joint_inspection.QM_JNT_AGO_PIU_NAME = model.piuName == null ? null : model.piuName.Trim();
                quality_qm_joint_inspection.QM_JNT_AGO_AE_NAME = model.aeName == null ? null : model.aeName.Trim();
                quality_qm_joint_inspection.QM_JNT_AGO_DO_NAME = model.districtOfficerName == null ? null : model.districtOfficerName.Trim();
                quality_qm_joint_inspection.QM_JNT_CON_REP_AVL = model.contractorRepresentative == null ? null : model.contractorRepresentative.Trim();
                quality_qm_joint_inspection.QM_JNT_CON_REP_NAME = model.contractorName == null ? null : model.contractorName.Trim();
                quality_qm_joint_inspection.QM_JNT_SRV_CON_TRG_HAB = model.serveConnectivity == null ? null : model.serveConnectivity.Trim();
                quality_qm_joint_inspection.QM_JNT_WORK_PRG_SAT = model.workProgressSatisfactory == null ? null : model.workProgressSatisfactory.Trim();
                quality_qm_joint_inspection.QM_JNT_CD_WRK_SUFF = model.cdWorkSufficient == null ? null : model.cdWorkSufficient.Trim();
                quality_qm_joint_inspection.QM_JNT_REASON = model.variationExecLengthReason == null ? null : model.variationExecLengthReason.Trim();
                quality_qm_joint_inspection.QM_JNT_INSP_OVERALL = model.qualityGrading == null ? null : model.qualityGrading.Trim();
                quality_qm_joint_inspection.QM_JNT_INSP_REMARKS = model.remarks == null ? null : model.remarks.Trim();

                quality_qm_joint_inspection.USERID = PMGSYSession.Current.UserId;
                quality_qm_joint_inspection.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(quality_qm_joint_inspection).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                if (!string.IsNullOrEmpty(model.inspectionFileName))
                {

                    QUALITY_QM_JOINT_INSPECTION_FILE quality_qm_joint_inspection_file = dbContext.QUALITY_QM_JOINT_INSPECTION_FILE.Where(x => x.QM_JNT_INSP_CODE == model.qmJICode).FirstOrDefault();
                    //quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_ID = MaxFileID + 1;
                    //quality_qm_joint_inspection_file.QM_JNT_INSP_CODE = model.qmJICode;
                    quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_DESCR = model.inspectionFileName;
                    quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_NAME = model.inspectionFileName;
                    quality_qm_joint_inspection_file.IMS_JNT_INSP_FILE_UPLOAD_DATE = DateTime.Now;
                    //quality_qm_joint_inspection_file.QM_JNT_INSP_FILE_TYPE = "F";
                    quality_qm_joint_inspection_file.USERID = PMGSYSession.Current.UserId;
                    quality_qm_joint_inspection_file.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    //dbContext.QUALITY_QM_JOINT_INSPECTION_FILE.Add(quality_qm_joint_inspection_file);

                    dbContext.Entry(quality_qm_joint_inspection_file).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                }

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Delete Observations From Master/ Detail & related Image Files
        /// </summary>
        /// <param name="districtCode"></param>
        /// <param name="scheduleCode"></param>
        /// <returns></returns>
        public string QMJIDeleteDAL(int jiCode)
        {
            dbContext = new PMGSYEntities();

            try
            {
                var fileDetails = (from JIF in dbContext.QUALITY_QM_JOINT_INSPECTION_FILE
                                   where JIF.QM_JNT_INSP_CODE == jiCode
                                   select JIF).ToList();
                var PhysicalPath = ConfigurationManager.AppSettings["QM_JI_FILE_UPLOAD"];

                foreach (var item in fileDetails)
                {
                    PhysicalPath = Path.Combine(PhysicalPath, item.QM_JNT_INSP_FILE_NAME);

                    if (!System.IO.File.Exists(PhysicalPath))
                    {
                        continue;
                    }
                    else
                    {
                        try
                        {
                            System.IO.File.Delete(PhysicalPath);
                            dbContext.QUALITY_QM_JOINT_INSPECTION_FILE.Remove(item);


                        }
                        catch (Exception ex)
                        {
                            Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                            return ("An Error Occurred While Deletion of Image Files.");
                        }
                    }
                }
                dbContext.SaveChanges();
                var jiToDelete = dbContext.QUALITY_QM_JOINT_INSPECTION.Find(jiCode);
                dbContext.QUALITY_QM_JOINT_INSPECTION.Remove(jiToDelete);
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string QMJIATRAddDAL(QMJIATRModel model)
        {
            CommonFunctions common = new CommonFunctions();
            dbContext = new PMGSYEntities();

            try
            {
                //if (!dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(m => m.QM_JNT_INSP_CODE == model.jiCode && m.QM_JNT_INSP_STATUS == model.ATRStatus).Any())
                if (dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(m => m.QM_JNT_INSP_CODE == model.jiCode && m.QM_JNT_INSP_STATUS == "F").Any())
                {
                    return ("Only one final Follow up status is allowed");
                }
                else
                {
                    int maxId = 0;
                    if (!dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Any())
                    {
                        maxId = 1;
                    }
                    else
                    {
                        maxId = dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Select(m => m.QM_JNT_INSP_FID).Max() + 1;
                    }
                    QUALITY_QM_JOINT_INSPECTION_ATR atrToCreate = new QUALITY_QM_JOINT_INSPECTION_ATR
                    {
                        QM_JNT_INSP_FID = maxId,
                        QM_JNT_INSP_CODE = model.jiCode,
                        QM_JNT_INSP_FILE_NAME = model.ATRFileName,
                        QM_JNT_INSP_STATUS = model.ATRStatus,
                        IMS_JNT_INSP_ACTION_DATE = common.GetStringToDateTime(model.ActionTakendDate),
                        QM_JNT_INSP_FILE_UPLOAD_DATE = DateTime.Now,
                        QM_JNT_INSP_REMARKS = model.remarks,
                        USERID = PMGSYSession.Current.UserId,
                        IPADD = HttpContext.Current.Request.UserHostAddress

                    };

                    dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Add(atrToCreate);
                    dbContext.SaveChanges();

                    return string.Empty;
                }
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        public string QMJIATRDeleteDAL(int atfileId)
        {
            dbContext = new PMGSYEntities();

            try
            {

                var jiToDelete = dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Find(atfileId);

                var PhysicalPath = Path.Combine(ConfigurationManager.AppSettings["QM_JI_FILE_UPLOAD_ATR"], jiToDelete.QM_JNT_INSP_FILE_NAME);
                if (System.IO.File.Exists(PhysicalPath))
                {
                    System.IO.File.Delete(PhysicalPath);

                }

                dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Remove(jiToDelete);
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        public List<QMJIATRModel> QMJIATRListDAL(int jiCode)
        {
            dbContext = new PMGSYEntities();
            List<QMJIATRModel> modelToList = new List<QMJIATRModel>();
            try
            {

                var atrToList = dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(m => m.QM_JNT_INSP_CODE == jiCode).ToList();
                modelToList = (from m in atrToList
                               select new QMJIATRModel
                               {
                                   jiATRFileCode = m.QM_JNT_INSP_FID,
                                   jiCode = m.QM_JNT_INSP_CODE.Value,
                                   ActionTakendDate = m.IMS_JNT_INSP_ACTION_DATE.Value.ToString("dd/MM/yyyy"),
                                   ATRFileName = m.QM_JNT_INSP_FILE_NAME,
                                   ATRStatus = m.QM_JNT_INSP_STATUS == "F" ? "Final" : "Provisional",
                                   remarks = m.QM_JNT_INSP_REMARKS == string.Empty ? "" : m.QM_JNT_INSP_REMARKS
                               }).ToList();

                return modelToList;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return modelToList;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetJIDetailsListDAL(int prRoadCode, int page, int rows, string sidx, string sord, out Int32 totalRecords)
        {
            CommonFunctions comm = new CommonFunctions();
            dbContext = new PMGSYEntities();
            int stateCode = PMGSYSession.Current.StateCode;
            int districtCode = PMGSYSession.Current.DistrictCode;

            try
            {
                //var workList = dbContext.QUALITY_QM_JOINT_INSPECTION.Where(x => x.QM_JNT_INSP_CODE == jiCode).ToList();
                var workList = (from ji in dbContext.QUALITY_QM_JOINT_INSPECTION
                                join jif in dbContext.QUALITY_QM_JOINT_INSPECTION_FILE on ji.QM_JNT_INSP_CODE equals jif.QM_JNT_INSP_CODE
                                where ji.IMS_PR_ROAD_CODE == prRoadCode
                                select new
                                {
                                    stateName = ji.IMS_SANCTIONED_PROJECTS.MASTER_STATE.MAST_STATE_NAME,
                                    districtName = ji.IMS_SANCTIONED_PROJECTS.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                    blockName = ji.IMS_SANCTIONED_PROJECTS.MASTER_BLOCK.MAST_BLOCK_NAME,
                                    workType = ji.IMS_SANCTIONED_PROJECTS.IMS_PROPOSAL_TYPE == "P" ? "Road" : ji.IMS_SANCTIONED_PROJECTS.IMS_PROPOSAL_TYPE == "L" ? "Bridge" : "Building",
                                    inspectionDate = ji.IMS_JNT_INSP_DATE,
                                    mpName = string.IsNullOrEmpty(ji.QM_JNT_REP_MP_NAME) ? "-" : ji.QM_JNT_REP_MP_NAME,
                                    mlaName = string.IsNullOrEmpty(ji.QM_JNT_REP_MLA_NAME) ? "-" : ji.QM_JNT_REP_MLA_NAME,
                                    gpName = string.IsNullOrEmpty(ji.QM_JNT_REP_GPR_NAME) ? "-" : ji.QM_JNT_REP_GPR_NAME,
                                    otherRepresentativeName = string.IsNullOrEmpty(ji.QM_JNT_REP_OR_NAME) ? "-" : ji.QM_JNT_REP_OR_NAME,
                                    seName = string.IsNullOrEmpty(ji.QM_JNT_AGO_SE_NAME) ? "-" : ji.QM_JNT_AGO_SE_NAME,
                                    piuName = string.IsNullOrEmpty(ji.QM_JNT_AGO_PIU_NAME) ? "-" : ji.QM_JNT_AGO_PIU_NAME,
                                    aeName = string.IsNullOrEmpty(ji.QM_JNT_AGO_AE_NAME) ? "-" : ji.QM_JNT_AGO_AE_NAME,
                                    districtOfficerName = string.IsNullOrEmpty(ji.QM_JNT_AGO_DO_NAME) ? "-" : ji.QM_JNT_AGO_DO_NAME,
                                    contractorRepresentative = string.IsNullOrEmpty(ji.QM_JNT_CON_REP_AVL) ? "-" : (ji.QM_JNT_CON_REP_AVL == "Y" ? "Yes" : "No"),
                                    contractorName = string.IsNullOrEmpty(ji.QM_JNT_CON_REP_NAME) ? "-" : ji.QM_JNT_CON_REP_NAME,
                                    serveConnectivity = string.IsNullOrEmpty(ji.QM_JNT_SRV_CON_TRG_HAB) ? "-" : (ji.QM_JNT_SRV_CON_TRG_HAB == "Y" ? "Yes" : "No"),
                                    workProgressSatisfactory = string.IsNullOrEmpty(ji.QM_JNT_WORK_PRG_SAT) ? "-" : (ji.QM_JNT_WORK_PRG_SAT == "Y" ? "Yes" : "No"),
                                    cdWorkSufficient = string.IsNullOrEmpty(ji.QM_JNT_CD_WRK_SUFF) ? "-" : (ji.QM_JNT_CD_WRK_SUFF == "Y" ? "Yes" : "No"),
                                    variationExecLengthReason = string.IsNullOrEmpty(ji.QM_JNT_REASON) ? "-" : ji.QM_JNT_REASON,
                                    qualityGrading = string.IsNullOrEmpty(ji.QM_JNT_INSP_OVERALL) ? "-" : (ji.QM_JNT_INSP_OVERALL == "G" ? "Good" : ji.QM_JNT_INSP_OVERALL == "I" ? "Improvement Required" : " Unsatisfactory"),
                                    remarks = string.IsNullOrEmpty(ji.QM_JNT_INSP_REMARKS) ? "-" : ji.QM_JNT_INSP_REMARKS,
                                    jif.QM_JNT_INSP_CODE,
                                    jif.QM_JNT_INSP_FILE_ID,
                                }).ToList();
                totalRecords = workList.Count;
                return workList.Select(work => new
                {
                    cell = new[]{
                work.stateName,
                work.districtName,
                work.blockName,
                work.workType,
                comm.GetDateTimeToString(work.inspectionDate).Trim(),
                work.mpName,
                work.mlaName,
                work.gpName,
                work.otherRepresentativeName,
                work.seName,
                work.piuName,
                work.aeName,
                work.districtOfficerName,
                work.contractorRepresentative,
                work.contractorName,
                work.serveConnectivity,
                work.workProgressSatisfactory,
                work.cdWorkSufficient,
                work.variationExecLengthReason,
                work.qualityGrading,
                work.remarks,
                "<a href='/QualityMonitoring/QMJIDownlaodPDF/"+ work.QM_JNT_INSP_FILE_ID +"'  title='Click here to Download Joint Inspection PDF' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center'> Download PDF </a>",
                "<a href='#' title='Click here to Add Action Taken Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ATRJIInspection(" +  work.QM_JNT_INSP_CODE.ToString().Trim()  +"); return false;'> Action Taken </a>",
                "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ShowJIDetail(" + work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Show</a>",
                (work.QM_JNT_INSP_CODE==0 || dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(x=>x.QM_JNT_INSP_CODE == work.QM_JNT_INSP_CODE).Any())?"---": "<a href='#' class='ui-icon ui-icon-pencil ui-align-center' onclick='EditJIDetail(" + work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Edit</a>",
                (work.QM_JNT_INSP_CODE==0 || dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(x=>x.QM_JNT_INSP_CODE == work.QM_JNT_INSP_CODE).Any())?"---": "<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteJIDetail(" +  work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Delete</a>"
                //"<a href='/QualityMonitoring/GenerateJIFormat/"+work.IMS_PR_ROAD_CODE.ToString()+"' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center'>Download Joint Inspection Format</a>",
                //(work.piuName==0 || work.JI_FILE_ID == null)?"---":"<a href='/QualityMonitoring/QMJIDownlaodPDF/"+work.JI_FILE_ID+"'  title='Click here to Download Joint Inspection PDF' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center'> Download PDF </a>",
                //work.aeName==0?"---":"<a href='#' title='Click here to Add Action Taken Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ATRJIInspection(" +  work.QM_JNT_INSP_CODE.ToString().Trim()  +"); return false;'> Action Taken </a>",
                //(work.QM_JNT_INSP_CODE==0 || dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(x=>x.QM_JNT_INSP_CODE == work.QM_JNT_INSP_CODE).Any())?"---": "<a href='#' class='ui-icon ui-icon-pencil ui-align-center' onclick='EditJIDetail(" + work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Edit</a>",
                //(work.QM_JNT_INSP_CODE==0 || dbContext.QUALITY_QM_JOINT_INSPECTION_ATR.Where(x=>x.QM_JNT_INSP_CODE == work.QM_JNT_INSP_CODE).Any())?"---": "<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteJIDetail(" +  work.QM_JNT_INSP_CODE.ToString() + "); return false;'>Delete</a>"
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetJIDetailsListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
            }
        }
        #endregion

        #region Quality Complain

        public Array QMComplainListDAL(QMComplainFilterViewModel complainFilterModel)
        {
            CommonFunctions common = new CommonFunctions();
            dbContext = new PMGSYEntities();
            List<QMComplainViewModel> modelToList = new List<QMComplainViewModel>();


            var dataToList = dbContext.QUALITY_QM_COMPLAIN.Where(m =>
                (m.Mast_state_code == (complainFilterModel.StateCode == 0 ? m.Mast_state_code : complainFilterModel.StateCode))
                && (m.ReceivedThrough == (complainFilterModel.RecievedThroughCode == 0 ? m.ReceivedThrough : complainFilterModel.RecievedThroughCode))
                && ((m.ComplainReceiveDate.Year * 12 + m.ComplainReceiveDate.Month) >= (complainFilterModel.FROM_MONTH + 12 * complainFilterModel.FROM_YEAR))
                && ((m.ComplainReceiveDate.Year * 12 + m.ComplainReceiveDate.Month) <= (complainFilterModel.TO_MONTH + 12 * complainFilterModel.TO_YEAR))
                && ((complainFilterModel.status == 0 ? 1 : m.ComplainDetailStageId) == (complainFilterModel.status == 0 ? 1 : complainFilterModel.status))
                ).ToList();

            modelToList = (from complain in dataToList
                           select new QMComplainViewModel
                           {
                               ComplainId = complain.ComplainId,
                               StateName = complain.MASTER_STATE.MAST_STATE_NAME,
                               ComplainantName = complain.QUALITY_QM_COMPLAIN_ITEM1.Title,
                               ForwardedToName = complain.QUALITY_QM_COMPLAIN_ITEM2.Title,
                               NatureComplaintName = complain.QUALITY_QM_COMPLAIN_ITEM.Title,
                               ComplainRecievedDate = common.GetDateTimeToString(complain.ComplainReceiveDate),

                               //Status = dbContext.QUALITY_QM_COMPLAIN_DETAIL.OrderByDescending(x=>x.DetailId).Where(x => x.CompIainId == complain.ComplainId).Select(x => x.QUALITY_QM_COMPLAIN_ITEM.Title).FirstOrDefault(),

                               Status = dbContext.QUALITY_QM_COMPLAIN_ITEM.Where(x => x.ItemId == complain.ComplainDetailStageId).Select(x => x.Title).FirstOrDefault(),

                               RecievedThroughName = complain.QUALITY_QM_COMPLAIN_ITEM3.Title,
                               ComplainFileId = complain.QUALITY_QM_COMPLAIN_FILE.Any() ? complain.QUALITY_QM_COMPLAIN_FILE.FirstOrDefault().FileId : 0,
                               IsDelete = complain.QUALITY_QM_COMPLAIN_DETAIL.Any() ? false : true

                           }).ToList<QMComplainViewModel>();


            return modelToList.Select(complain => new
            {
                cell = new[]{
                                    complain.StateName,
                                    complain.ComplainantName,
                                    complain.RecievedThroughName,
                                    complain.ForwardedToName,
                                    complain.NatureComplaintName,
                                    complain.ComplainRecievedDate,
                                    string.IsNullOrEmpty(complain.Status) ? "--" : complain.Status,
                                    complain.ComplainFileId<=0?((PMGSYSession.Current.RoleCode==5 || PMGSYSession.Current.RoleCode==9)?"<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadQMComplainDocument(" + complain.ComplainId.ToString() + "); return false;'>Upload</a>":"---"):"<a href='#' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onclick='DownloadQMComplainDocument(" + complain.ComplainFileId.ToString() + "); return false;'>Download</a>",
                                    "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ShowQMComplainDetail(" + complain.ComplainId.ToString() + "); return false;'>Detail</a>",
                                    (PMGSYSession.Current.RoleCode==5 || PMGSYSession.Current.RoleCode==9) && complain.IsDelete?"<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteQMComplain(" + complain.ComplainId.ToString() + "); return false;'>Delete</a>":"--"
                                }
            }).ToArray();


        }

        public bool QMComplainAddDAL(QMComplainViewModel complainModel)
        {

            CommonFunctions common = new CommonFunctions();
            dbContext = new PMGSYEntities();

            QUALITY_QM_COMPLAIN complainToCreate = new QUALITY_QM_COMPLAIN
            {
                Complainant = complainModel.ComplainantCode,
                ComplainantNature = complainModel.NatureComplaintCode,
                ReceivedThrough = complainModel.RecievedThroughCode,
                ComplainReceiveDate = common.GetStringToDateTime(complainModel.ComplainRecievedDate),
                ComplainDetailStageId = complainModel.ForwardedToCode == 10 ? 21 : 19,
                DetailStageAction = "N",
                DetailStageLevel = 1,
                EntryDate = DateTime.Now,
                ForwardedTo = complainModel.ForwardedToCode,
                Mast_state_code = complainModel.StateCode

            };

            dbContext.QUALITY_QM_COMPLAIN.Add(complainToCreate);
            dbContext.SaveChanges();




            return true;
        }


        public bool QMComplainFileUploadDAL(QMComplainUploadViewModel uploadModel)
        {
            try
            {

                CommonFunctions common = new CommonFunctions();
                dbContext = new PMGSYEntities();

                QUALITY_QM_COMPLAIN_FILE fileToCreate = new QUALITY_QM_COMPLAIN_FILE
                {

                    ComplainId = uploadModel.ComplainId,
                    FileName = uploadModel.FileName,
                    UploadDate = DateTime.Now,
                    UploadedBy = PMGSYSession.Current.UserId


                };

                dbContext.QUALITY_QM_COMPLAIN_FILE.Add(fileToCreate);
                dbContext.SaveChanges();




                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public string QMComplainDeleteDAL(int complainId)
        {
            dbContext = new PMGSYEntities();

            try
            {

                var complainToDelete = dbContext.QUALITY_QM_COMPLAIN.Find(complainId);
                if (complainToDelete.QUALITY_QM_COMPLAIN_FILE.Any())
                {
                    var complainFileToDelete = complainToDelete.QUALITY_QM_COMPLAIN_FILE.FirstOrDefault();

                    var PhysicalPath = Path.Combine(ConfigurationManager.AppSettings["QM_COMPLAIN_FILE_UPLOAD"], complainFileToDelete.FileName);
                    if (System.IO.File.Exists(PhysicalPath))
                    {
                        System.IO.File.Delete(PhysicalPath);

                    }

                    dbContext.QUALITY_QM_COMPLAIN_FILE.Remove(complainFileToDelete);
                    dbContext.SaveChanges();
                }

                dbContext.QUALITY_QM_COMPLAIN.Remove(complainToDelete);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        public QMComplainDetailViewModel GetQMComplainDAL(int ComplainId)
        {
            CommonFunctions common = new CommonFunctions();

            dbContext = new PMGSYEntities();
            string CqcSqcFlag = (PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9) ? "CQC" : "SQC";

            var complainDetail = dbContext.QUALITY_QM_COMPLAIN.Where(m => m.ComplainId == ComplainId).FirstOrDefault();
            QMComplainDetailViewModel complain = new QMComplainDetailViewModel
            {
                StateName = complainDetail.MASTER_STATE.MAST_STATE_NAME,
                ForwardedToName = complainDetail.QUALITY_QM_COMPLAIN_ITEM2.Title,
                ComplainantName = complainDetail.QUALITY_QM_COMPLAIN_ITEM1.Title,
                NatureComplaintName = complainDetail.QUALITY_QM_COMPLAIN_ITEM.Title,
                RecievedThroughName = complainDetail.QUALITY_QM_COMPLAIN_ITEM3.Title,
                ComplainRecievedDate = common.GetDateTimeToString(complainDetail.ComplainReceiveDate)



            };

            int stageLevel = (complainDetail.DetailStageAction == "N") ? complainDetail.DetailStageLevel : 1;

            //List<QMComplainStage> 
            List<QMComplainStage> StageList = (from stage in dbContext.USP_QM_COMPLAIN_DETAIL(complainDetail.ComplainId, complainDetail.ForwardedTo, stageLevel).ToList()
                                               select new QMComplainStage
                                               {
                                                   StageId = stage.StageId,
                                                   StageTitle = stage.Title,
                                                   Remark = stage.Remark,
                                                   Download = stage.DetailId != 0 ? "<a href='#' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onclick='DownloadQMDetailStage(" + stage.DetailId.ToString() + "); return false;'>Download</a>" : (
                                                   stage.UserRole == CqcSqcFlag ? (complainDetail.ComplainDetailStageId == stage.StageId ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadQMDetailStage(" + complainDetail.ComplainId.ToString() + "," + stage.StageId.ToString() + "); return false;'>Upload</a>" : "---") : "---"),
                                                   NRRDAAction = (stage.DetailId != 0 && stage.StageId == 26 && stage.StageAction == "Y") ? "Accepted" : (stage.DetailId != 0 && stage.StageId == 26 && stage.StageAction == "N") ? "Not Accepted" : "---",
                                                   Delete = stage.UserRole == CqcSqcFlag && stage.DetailId != 0 && stage.StageAction != "Y" && stage.DisplayOrder == 1 ? "<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteQMDetailComplain(" + complainDetail.ComplainId.ToString() + "," + stage.DetailId.ToString() + "); return false;'>Delete</a>" : "---"
                                               }).ToList<QMComplainStage>();


            complain.StageList = StageList;
            return complain;
        }


        public bool QMComplainDetailFileUploadDAL(QMComplainUploadViewModel uploadModel)
        {
            try
            {

                CommonFunctions common = new CommonFunctions();
                dbContext = new PMGSYEntities();
                int StageLevel = 1;


                var complainToUpdate = dbContext.QUALITY_QM_COMPLAIN.Where(m => m.ComplainId == uploadModel.ComplainId).FirstOrDefault();
                StageLevel = complainToUpdate.DetailStageLevel;
                if (complainToUpdate.ForwardedTo == 10)
                {
                    switch (uploadModel.StageId)
                    {
                        case 21:
                            complainToUpdate.ComplainDetailStageId = 22;
                            break;
                        case 22:
                            complainToUpdate.ComplainDetailStageId = 23;
                            break;
                        case 23:
                            complainToUpdate.ComplainDetailStageId = 24;
                            break;
                        case 24:
                            complainToUpdate.ComplainDetailStageId = 25;
                            break;
                        case 25:
                            complainToUpdate.ComplainDetailStageId = 26;
                            break;
                        case 26:
                            complainToUpdate.DetailStageLevel = complainToUpdate.DetailStageLevel + 1;
                            complainToUpdate.ComplainDetailStageId = 25;
                            complainToUpdate.DetailStageAction = uploadModel.NRRDAAction;
                            break;

                    }


                }
                else if (complainToUpdate.ForwardedTo == 11)
                {
                    switch (uploadModel.StageId)
                    {
                        case 19:
                            complainToUpdate.ComplainDetailStageId = 20;
                            break;
                        case 20:
                            complainToUpdate.ComplainDetailStageId = 25;
                            break;
                        case 25:
                            complainToUpdate.ComplainDetailStageId = 26;
                            break;
                        case 26:
                            complainToUpdate.DetailStageLevel = complainToUpdate.DetailStageLevel + 1;
                            complainToUpdate.ComplainDetailStageId = 25;
                            complainToUpdate.DetailStageAction = uploadModel.NRRDAAction;
                            break;

                    }


                }

                dbContext.Entry(complainToUpdate).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();



                QUALITY_QM_COMPLAIN_DETAIL detailToCreate = new QUALITY_QM_COMPLAIN_DETAIL
                {
                    Action = uploadModel.NRRDAAction,
                    CompIainId = uploadModel.ComplainId,
                    StageId = uploadModel.StageId,
                    Remarks = uploadModel.Remarks,
                    FileName = uploadModel.FileName,
                    EntryDate = DateTime.Now,
                    StageLevel = StageLevel


                };

                dbContext.QUALITY_QM_COMPLAIN_DETAIL.Add(detailToCreate);
                dbContext.SaveChanges();




                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }


        public string QMComplainDetailDeleteDAL(int detailId)
        {
            dbContext = new PMGSYEntities();

            try
            {

                var detailToDelete = dbContext.QUALITY_QM_COMPLAIN_DETAIL.Find(detailId);
                var complainToUpdate = dbContext.QUALITY_QM_COMPLAIN.Find(detailToDelete.CompIainId);

                complainToUpdate.ComplainDetailStageId = detailToDelete.StageId;
                complainToUpdate.DetailStageLevel = detailToDelete.StageLevel;
                complainToUpdate.DetailStageAction = detailToDelete.StageId == 26 ? "N" : detailToDelete.Action;
                dbContext.Entry(complainToUpdate).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                var PhysicalPath = Path.Combine(ConfigurationManager.AppSettings["QM_COMPLAIN_FILE_UPLOAD"], detailToDelete.FileName);
                if (System.IO.File.Exists(PhysicalPath))
                {
                    System.IO.File.Delete(PhysicalPath);

                }



                dbContext.QUALITY_QM_COMPLAIN_DETAIL.Remove(detailToDelete);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return ("An Error Occurred While Processing Your Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }



        #endregion

        #region Road List to Assigned roads against Schedule contractor wise added by deendayal
        /// Road List to Assigned roads against Schedule contractor wise added by deendayal
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public Array GetRoadListToAssignContractorwiseDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters, int districtCode, int adminSchCode, int sanctionYear)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_get_works_to_assign_contractor_not_insp_Result> scheduleItemList = new List<qm_get_works_to_assign_contractor_not_insp_Result>();
            try
            {
                //Extarct details of State, Monitor Code, Schedule Year, Schedule Month
                var schDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                  where qqs.ADMIN_SCHEDULE_CODE == adminSchCode
                                  select qqs).First();

                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string blockSearch = string.Empty;
                string packageSearch = string.Empty;
                string roadSearch = string.Empty;
                string propTypeSearch = string.Empty;

                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "Block":
                                blockSearch = item.data;
                                break;
                            case "Package":
                                packageSearch = item.data;
                                break;
                            case "Road":
                                roadSearch = item.data;
                                break;
                            case "Type":
                                propTypeSearch = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                propTypeSearch = propTypeSearch.Equals("road", StringComparison.OrdinalIgnoreCase) ? "P" : (propTypeSearch.Equals("lsb", StringComparison.OrdinalIgnoreCase) ? "L" : "");

                scheduleItemList = dbContext.qm_get_works_to_assign_contractor_not_insp(sanctionYear, schDetails.MAST_STATE_CODE, districtCode, schDetails.ADMIN_SCHEDULE_CODE, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)).Where
                                    (x => x.MAST_BLOCK_NAME.Contains(blockSearch.Equals(string.Empty) ? "" : blockSearch) &&
                                        x.IMS_PACKAGE_ID.Contains(packageSearch.Equals(string.Empty) ? "" : packageSearch) &&
                                        x.IMS_ROAD_NAME.Contains(roadSearch.Equals(string.Empty) ? "" : roadSearch) &&
                                        x.IMS_PROPOSAL_TYPE.Contains(propTypeSearch.Equals(string.Empty) ? "" : propTypeSearch)
                                    ).ToList<qm_get_works_to_assign_contractor_not_insp_Result>();

                totalRecords = scheduleItemList.Count();

                var result = scheduleItemList.Select(executionDetails => new
                {
                    executionDetails.WORK_PRIORITY,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_YEAR,
                    executionDetails.IMS_PAV_LENGTH,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.COMMENCED_DATE,
                    executionDetails.COMPLETED_DATE,
                    executionDetails.ADDED_BY,
                    executionDetails.SCHEME,
                    executionDetails.NQM_LAST_INSP_DATE,
                    executionDetails.NQM_INSP,
                    executionDetails.SQM_LAST_INSP_DATE,
                    executionDetails.SQM_INSP,
                    executionDetails.IS_ENQUIRY,
                    executionDetails.IMS_ISCOMPLETED,
                    executionDetails.PROPOSAL_STATUS,
                    executionDetails.CONTRACTOR_NAME,
                    flag = getDateDiff(executionDetails.NQM_LAST_INSP_DATE, executionDetails.SQM_LAST_INSP_DATE)
                }).ToArray();

                return result.Select(schRoadDetails => new
                {
                    id = schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim(),

                    cell = new[] {    
                                    //schRoadDetails.WORK_ORDER.ToString(),
                                    schRoadDetails.WORK_PRIORITY,
                                    schRoadDetails.MAST_BLOCK_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                    schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR+1),
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : schRoadDetails.IMS_PROPOSAL_TYPE.Equals("L") ? "LSB" : "Building",
                                    schRoadDetails.IMS_PAV_LENGTH.ToString(),
                                    schRoadDetails.CONTRACTOR_NAME,
                                    schRoadDetails.COMMENCED_DATE == null ? schRoadDetails.COMPLETED_DATE : schRoadDetails.COMMENCED_DATE,
                                    schRoadDetails.SCHEME,
                                    schRoadDetails.ADDED_BY != null ? schRoadDetails.ADDED_BY : "",
                                    schRoadDetails.NQM_LAST_INSP_DATE + " (" + schRoadDetails.NQM_INSP.ToString() + ")",
                                    schRoadDetails.SQM_LAST_INSP_DATE + " (" + schRoadDetails.SQM_INSP.ToString() + ")",
                                    "<a href='#' title='Click here to view Progress' onClick='QMViewProgress(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>"+ schRoadDetails.PROPOSAL_STATUS +"</a>",

                                    schRoadDetails.IS_ENQUIRY,
                                    (schRoadDetails.ADDED_BY.Equals("--")) ? "<input type='checkbox'   id='AddRoadCheckboxId "+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()+"'>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                   // (schRoadDetails.ADDED_BY.Equals("--")) ? "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAddRoadToSchedule(\"" + schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"\"); return false;'>AddRoad</a>":"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    "-",
                                    (!(schRoadDetails.IMS_ISCOMPLETED == "P" || schRoadDetails.IMS_ISCOMPLETED == "C" || schRoadDetails.IMS_ISCOMPLETED == "X" || schRoadDetails.IMS_ISCOMPLETED == "G") || schRoadDetails.flag == false || schRoadDetails.IMS_PROPOSAL_TYPE == "B") ? "-" : "<input type='checkbox'   id='"+schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim()+"'>",
                        }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetRoadListToAssignContractorwiseDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion

        #region Get current work status
        public string GetCurrentworkStatus(int road_code)
        {
            try
            {
                dbContext = new PMGSYEntities();
                string status = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == road_code).SingleOrDefault().IMS_ISCOMPLETED;
                return status;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetCurrentworkStatus()");
                return "";
            }

        }
        #endregion

        #region Auto Schedule
        public Array QMGetInspectionTargetListDAL(int state, int month, int year, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            bool flg = false;
            try
            {
                var lstRoadDetails = (from item in dbContext.QUALITY_INSPECTION_TARGET
                                      where item.MAST_STATE_CODE == (state == 0 ? item.MAST_STATE_CODE : state)
                                            && item.MONTH == month
                                            && item.YEAR == year
                                      select new
                                      {
                                          item.INSPECTION_TARGET_ID,
                                          item.MAST_STATE_CODE,
                                          item.MASTER_STATE.MAST_STATE_NAME,
                                          item.NUMBER_NQM,
                                          AllocatedDistricts = dbContext.QUALITY_QM_AUTO_SCHEDULE.Count(z => z.MAST_STATE_CODE == item.MAST_STATE_CODE && z.SCHEDULE_MONTH == month && z.SCHEDULE_YEAR == year && z.DISTRICT1 != null && z.DISTRICT2 != null)
                                      }).OrderBy(c => c.MAST_STATE_NAME);


                totalRecords = lstRoadDetails.Count();
                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        switch (sidx)
                //        {
                //            case "INSPECTION_TARGET_ID":
                //                lstRoadDetails = lstRoadDetails.OrderBy(m => m.INSPECTION_TARGET_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.INSPECTION_TARGET_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //    else
                //    {
                //        switch (sidx)
                //        {
                //            case "INSPECTION_TARGET_ID":
                //                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.INSPECTION_TARGET_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //            default:
                //                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.INSPECTION_TARGET_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //                break;
                //        }
                //    }
                //}
                //else
                //{
                //    lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.INSPECTION_TARGET_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //}

                var gridData = lstRoadDetails.Select(physicalDetails => new
                {
                    physicalDetails.INSPECTION_TARGET_ID,
                    physicalDetails.MAST_STATE_CODE,
                    physicalDetails.MAST_STATE_NAME,
                    physicalDetails.NUMBER_NQM,
                    physicalDetails.AllocatedDistricts
                }).ToArray();

                return gridData.Select(physicalDetails => new
                {
                    id = physicalDetails.INSPECTION_TARGET_ID.ToString(),
                    cell = new[]
                    {
                        physicalDetails.MAST_STATE_NAME,
                        physicalDetails.NUMBER_NQM.ToString(),
                        physicalDetails.AllocatedDistricts.ToString(),
                        (dbContext.QUALITY_QM_AUTO_SCHEDULE.Any(x=>x.MAST_STATE_CODE == physicalDetails.MAST_STATE_CODE && x.SCHEDULE_MONTH == month && x.SCHEDULE_YEAR == year && x.DISTRICT1 != null && x.DISTRICT2 != null) || physicalDetails.NUMBER_NQM == 0)
                        ? "-"
                        : "<a href='#' title='Click here to add road to schedule' class='ui-icon ui-icon-plusthick ui-align-center' onClick='QMAssignDistricts(\"" +  URLEncrypt.EncryptParameters1(new string[]{ physicalDetails.INSPECTION_TARGET_ID.ToString().Trim()})  +"\"); return false;'>Add Districts</a>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMGetInspectionTargetListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string QMAssignDistrictsDAL(int targetId)
        {
            dbContext = new Models.PMGSYEntities();
            int i = 0, j = 0;

            try
            {
                using (TransactionScope transaction = new TransactionScope())
                {
                    var targetDetails = dbContext.QUALITY_INSPECTION_TARGET.FirstOrDefault(x => x.INSPECTION_TARGET_ID == targetId);

                    if (targetDetails != null)
                    {
                        i = dbContext.USP_QUALITY_QM_AUTO_SCHEDULE(targetDetails.MAST_STATE_CODE, targetDetails.YEAR, targetDetails.MONTH);
                        j = dbContext.USP_QUALITY_QM_AUTO_SCHEDULE_DISTRICT(targetDetails.MAST_STATE_CODE, targetDetails.YEAR, targetDetails.MONTH);
                    }

                    //foreach (var item in lstSchedule)
                    //{
                    //    QUALITY_QM_SCHEDULE_DETAILS schDetails = new QUALITY_QM_SCHEDULE_DETAILS();
                    //    schDetails = item;
                    //    schDetails.USERID = PMGSYSession.Current.UserId;
                    //    schDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    //    dbContext.QUALITY_QM_SCHEDULE_DETAILS.Add(schDetails);
                    //    dbContext.SaveChanges();
                    //}
                    bool chk = dbContext.QUALITY_QM_AUTO_SCHEDULE.AsEnumerable().Any(m => m.MAST_STATE_CODE == targetDetails.MAST_STATE_CODE && m.SCHEDULE_YEAR == targetDetails.YEAR && m.SCHEDULE_MONTH == targetDetails.MONTH && m.DISTRICT1 != null && m.DISTRICT2 != null);
                    transaction.Complete();

                    if (chk)

                    { return string.Empty; }

                    else return "error";
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMAssignDistrictsDAL()");
                return ("An Error Occurred While District assign.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Allocate Roads to NQM

        /// <summary>
        /// Returns Allocate Roads to nqm List
        /// </summary>
        /// <param name="objFilter"></param>
        /// <param name="totalRecords"></param>
        /// 
        /// <returns></returns>
        public Array AllocateRoadsToNQmList(AllocateRoadsToNQMModel objFilter, out long totalRecords)
        {
            List<QUALITY_QM_AUTO_SCHEDULE> lstAutoSchedule = null;
            PMGSYEntities dbContext = null;

            try
            {
                dbContext = new PMGSYEntities();
                lstAutoSchedule = new List<QUALITY_QM_AUTO_SCHEDULE>();


                lstAutoSchedule = dbContext.QUALITY_QM_AUTO_SCHEDULE.Where(x => x.MAST_STATE_CODE == objFilter.STATEID && x.SCHEDULE_MONTH == objFilter.MONTHID && x.SCHEDULE_YEAR == objFilter.YEARID).ToList();


                totalRecords = lstAutoSchedule.Count();

                lstAutoSchedule = lstAutoSchedule.OrderByDescending(x => x.SCHEDULE_YEAR).Skip(Convert.ToInt32(objFilter.page * objFilter.rows)).ToList<QUALITY_QM_AUTO_SCHEDULE>();

                var result = lstAutoSchedule.Select(m => new
                {

                    m.AUTO_SCHEDULE_ID,
                    m.ADMIN_QM_CODE,
                    m.MAST_STATE_CODE,
                    m.SCHEDULE_MONTH,
                    m.SCHEDULE_YEAR,
                    m.DISTRICT1,
                    m.DISTRICT2,

                }).ToArray();



                return result.Select(item => new
                {
                    id = URLEncrypt.EncryptParameters(new string[] { item.AUTO_SCHEDULE_ID.ToString().Trim() }),
                    cell = new[] {

                                                GetNQMName(item.ADMIN_QM_CODE),
                                                dbContext.MASTER_STATE.Where(x=>x.MAST_STATE_CODE==item.MAST_STATE_CODE).Select(x=>x.MAST_STATE_NAME).FirstOrDefault().ToString(),
                                                dbContext.MASTER_MONTH.Where(x=>x.MAST_MONTH_CODE==item.SCHEDULE_MONTH).Select(x=>x.MAST_MONTH_FULL_NAME).FirstOrDefault().ToString(),
                                                item.SCHEDULE_YEAR.ToString(),
                                                GetDistrictName(item.DISTRICT1),
                                                GetDistrictName(item.DISTRICT2),
                                                GetAssignedRoadButtonIcon(item.AUTO_SCHEDULE_ID),
                                                GetViewRoadIcon(item.AUTO_SCHEDULE_ID),

                                }
                }).ToArray();






            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AllocateRoadsToNQmList()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }


        }


        public string GetAssignedRoadButtonIcon(Int32 AUTO_SCHEDULE_ID)
        {
            string icon = string.Empty;
            PMGSYEntities dbContext = null;

            try
            {
                dbContext = new PMGSYEntities();
                //icon = "<center><input type='button' name='AssignRoadToNQM" + AUTO_SCHEDULE_ID + "" + "' value='Button' id=" + AUTO_SCHEDULE_ID + " " + "class='clsAssignRoadToNQM' onclick='ViewAllocateroadToNQM(\"" + URLEncrypt.EncryptParameters(new string[] { AUTO_SCHEDULE_ID.ToString().Trim() }) + "\");return false;'/></center>";

                if (dbContext.QM_AUTO_SCHEDULE_WORK_MAPPING.Where(x => x.AUTO_SCHEDULE_ID == AUTO_SCHEDULE_ID).Any())
                {
                    icon = "<center><a href='#' class='ui-icon ui-icon-locked'>Assign Road to NQM</a></center>";
                }
                else
                {
                    icon = "<center><a href='#' class='ui-icon ui-icon-plus' onclick='AssignRoadToNQM(\"" + URLEncrypt.EncryptParameters(new string[] { AUTO_SCHEDULE_ID.ToString().Trim() }) + "\");return false;'>Assign</a></center>";
                }



                return icon;

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetAssignedRoadIcon()");
                return string.Empty;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string GetViewRoadIcon(Int32 AUTO_SCHEDULE_ID)
        {
            string icon = string.Empty;
            PMGSYEntities dbContext = null;
            try
            {
                dbContext = new PMGSYEntities();
                icon = "<center><a href='#' class='ui-icon ui-icon-search' onclick='ViewAllocateroadToNQM(\"" + URLEncrypt.EncryptParameters(new string[] { AUTO_SCHEDULE_ID.ToString().Trim() }) + "\");return false;'>View EAuthorization Details</a></center>";
                return icon;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetViewRoadIcon()");

                return string.Empty;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string GetNQMName(Int32 ADMIN_QM_CODE)
        {
            string NQmName = string.Empty;
            PMGSYEntities dbContext = null;
            ADMIN_QUALITY_MONITORS obj = null;
            try
            {
                dbContext = new PMGSYEntities();
                obj = new ADMIN_QUALITY_MONITORS();
                obj = dbContext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_QM_CODE == ADMIN_QM_CODE).FirstOrDefault();
                NQmName = obj.ADMIN_QM_FNAME + "" + obj.ADMIN_QM_MNAME + " " + obj.ADMIN_QM_LNAME;
                return NQmName;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetViewRoadIcon()");

                return string.Empty;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public string GetDistrictName(Int32? DistrictCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            string DistrictName = string.Empty;
            try
            {
                dbContext = new PMGSYEntities();
                Int32 distCode = Convert.ToInt32(DistrictCode);
                DistrictName = dbContext.MASTER_DISTRICT.Where(x => x.MAST_DISTRICT_CODE == distCode).Select(x => x.MAST_DISTRICT_NAME).FirstOrDefault();
                if (String.IsNullOrEmpty(DistrictName))
                {
                    DistrictName = "-";
                    return DistrictName;
                }
                else
                {
                    return DistrictName;

                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetViewRoadIcon()");

                return string.Empty;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        #endregion

        #region NQM Target Inspection
        public bool checkIsTargetEntered(int Month, int Year)
        {
            bool status = false;
            try
            {
                dbContext = new Models.PMGSYEntities();
                if (dbContext.QUALITY_INSPECTION_TARGET.Where(x => x.MONTH == Month && x.YEAR == Year).Any())
                {
                    status = true;
                }
                return status;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.checkIsTargetEntered");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListInspectionTargetDAL(int Month, int Year, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int serialNumber = 0;
                long tgtCount = 0;

                //List<TargetInspection> lstInspTarget = new List<TargetInspection>();

                //var lst1 = (from item in dbContext.QUALITY_INSPECTION_TARGET
                //                 where item.MASTER_STATE.MAST_STATE_ACTIVE == "Y"
                //                 && item.MONTH == Month
                //                 && item.YEAR == Year
                //                 orderby item.MAST_STATE_CODE
                //                 select new
                //                 {
                //                     MAST_STATE_NAME = item.MASTER_STATE.MAST_STATE_NAME,
                //                     InspMonth = Month,
                //                     InspYear = Year,
                //                     NUMBER_NQM = item.NUMBER_NQM
                //                 }).ToList();


                //totalRecords = lst1.Count();

                //if (totalRecords > 0)
                //{
                //    foreach (var itm in lst1)
                //    {
                //        TargetInspection InspTarget = new TargetInspection();
                //        InspTarget.MAST_STATE_NAME = itm.MAST_STATE_NAME;
                //        InspTarget.InspMonth = itm.InspMonth;
                //        InspTarget.Year = itm.InspYear;
                //        InspTarget.NUMBER_NQM = itm.NUMBER_NQM.Value;

                //        lstInspTarget.Add(InspTarget);
                //    }
                //}

                //tgtCount = totalRecords;
                //if (totalRecords == 0)
                //{
                //    //lstInspTarget = null;
                //    var lst2 = (from item in dbContext.MASTER_STATE
                //                where item.MAST_STATE_ACTIVE == "Y"
                //                orderby item.MAST_STATE_CODE
                //                select new
                //                {
                //                    MAST_STATE_NAME = item.MAST_STATE_NAME,
                //                    InspMonth = Month,
                //                    InspYear = Year,
                //                    NUMBER_NQM = 0
                //                }).ToList();
                //    totalRecords = lst2.Count();

                //    if (totalRecords > 0)
                //    {
                //        foreach (var itm in lst2)
                //        {
                //            TargetInspection InspTarget = new TargetInspection();
                //            InspTarget.MAST_STATE_NAME = itm.MAST_STATE_NAME;
                //            InspTarget.InspMonth = itm.InspMonth;
                //            InspTarget.Year = itm.InspYear;
                //            InspTarget.NUMBER_NQM = itm.NUMBER_NQM;

                //            lstInspTarget.Add(InspTarget);
                //        }

                //    }
                //}

                var lstInspTarget = (from item in dbContext.MASTER_STATE
                                     where item.MAST_STATE_ACTIVE == "Y"
                                     orderby item.MAST_STATE_CODE
                                     select new
                                     {
                                         MAST_STATE_NAME = item.MAST_STATE_NAME,
                                         InspMonth = Month,
                                         InspYear = Year,
                                         NUMBER_NQM = 0,
                                         item.MAST_STATE_SHORT_CODE,
                                         item.MAST_STATE_CODE
                                     }).ToList();
                totalRecords = lstInspTarget.Count();

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstInspTarget = lstInspTarget.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstInspTarget = lstInspTarget.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstInspTarget = lstInspTarget.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstInspTarget = lstInspTarget.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                return lstInspTarget.Select(Details => new
                {
                    id = ++serialNumber,
                    cell = new[]{
                      Details.MAST_STATE_NAME,
                      Details.InspMonth == 1?"January":(Details.InspMonth == 2?"February":(Details.InspMonth == 3 ? "March":(Details.InspMonth == 4?"April":(Details.InspMonth == 5?"May":(Details.InspMonth == 6?"June":(Details.InspMonth ==                                                         7?"July":Details.InspMonth == 8?"August":(Details.InspMonth == 9?"September":(Details.InspMonth == 10?"October":(Details.InspMonth == 11?"November":"December"))))))))),
                      Details.InspYear.ToString(),
                      "<input type='textbox' id='S"+ Details.MAST_STATE_CODE.ToString().Trim() /*+"' class='"+ Details.MAST_STATE_SHORT_CODE */+"'onkeypress='return isNumberKey(event)' value='"+ Details.NUMBER_NQM.ToString() +"' maxlength='3'>"
                      //dbContext.MASTER_MATRIX.Where(x=>x.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Any() ? Details.MAST_SCORE_VALUE.ToString() : ((Details.MAST_PARENT_ID == 0) ? "<span id='"+Details.MAST_MATRIX_NO.Substring(0,1)+"parent" +"' >"+ Details.MAST_SCORE_VALUE.ToString()+"</span>" : "<input type='textbox' id='"+ Details.MAST_MATRIX_NO.ToString() +"' class='"+ Details.MAST_MATRIX_NO.Substring(0,1) +"'onkeypress='return isNumberKey(event)' value='"+ Details.MAST_SCORE_VALUE.ToString() +"' maxlength='5'>"),
                      //Details.MAST_SCORE_ID.ToString(),//serialNumber.ToString(), 
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.ListInspectionTargetDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListInspectionTargetEnteredDAL(int Month, int Year, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int serialNumber = 0;

                var lstInspTarget = (from item in dbContext.QUALITY_INSPECTION_TARGET
                                     where item.MASTER_STATE.MAST_STATE_ACTIVE == "Y"
                                     && item.MONTH == Month
                                     && item.YEAR == Year
                                     orderby item.MAST_STATE_CODE
                                     select new
                                     {
                                         MAST_STATE_NAME = item.MASTER_STATE.MAST_STATE_NAME,
                                         InspMonth = Month,
                                         InspYear = Year,
                                         NUMBER_NQM = item.NUMBER_NQM
                                     }).ToList();
                totalRecords = lstInspTarget.Count();

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstInspTarget = lstInspTarget.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstInspTarget = lstInspTarget.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstInspTarget = lstInspTarget.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstInspTarget = lstInspTarget.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                return lstInspTarget.Select(Details => new
                {
                    id = ++serialNumber,
                    cell = new[]{
                      Details.MAST_STATE_NAME,
                      Details.InspMonth == 1?"January":(Details.InspMonth == 2?"February":(Details.InspMonth == 3 ? "March":(Details.InspMonth == 4?"April":(Details.InspMonth == 5?"May":(Details.InspMonth == 6?"June":(Details.InspMonth ==                                                         7?"July":Details.InspMonth == 8?"August":(Details.InspMonth == 9?"September":(Details.InspMonth == 10?"October":(Details.InspMonth == 11?"November":"December"))))))))),
                      Details.InspYear.ToString(),
                      Details.NUMBER_NQM.ToString()
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.ListInspectionTargetDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddTargetDetailsDAL(string[] MatrixParams, ref string message)
        {
            int stateCode = 0;
            int month = 0, year = 0, tgtNumber;


            int inspId = 0;
            string[] item = null;
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    for (int i = 0; i < MatrixParams.Length; i++)
                    {
                        item = MatrixParams[i].Split(',');
                        stateCode = Convert.ToInt32(item[0]);
                        month = Convert.ToInt32(item[1]);
                        year = Convert.ToInt32(item[2]);
                        tgtNumber = Convert.ToInt32(item[3]);


                        if (year == 0 || month == 0 || stateCode == 0)
                        {
                            message = "Error occurred while processing your request.";
                            return false;
                        }

                        ///Insert Values in MATRIX_HEAD_WEIGHTAGE
                        QUALITY_INSPECTION_TARGET quality_inspection_target = new QUALITY_INSPECTION_TARGET();

                        if (i == 0)
                        {
                            inspId = dbContext.QUALITY_INSPECTION_TARGET.Any() ? dbContext.QUALITY_INSPECTION_TARGET.Max(x => x.INSPECTION_TARGET_ID) + 1 : 1;
                        }
                        else
                        {
                            inspId++;
                        }

                        quality_inspection_target.INSPECTION_TARGET_ID = inspId;
                        quality_inspection_target.MAST_STATE_CODE = stateCode;
                        quality_inspection_target.MONTH = month;
                        quality_inspection_target.YEAR = year;
                        quality_inspection_target.NUMBER_NQM = tgtNumber;

                        quality_inspection_target.USERID = PMGSYSession.Current.UserId;
                        quality_inspection_target.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.QUALITY_INSPECTION_TARGET.Add(quality_inspection_target);
                    }
                    dbContext.SaveChanges();
                    message = "Inspection Target details added successfully.";
                    ts.Complete();
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AddMatrixDetailsDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteInspTargetDetailsDAL(int Month, int Year, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.QUALITY_INSPECTION_TARGET.Any(x => x.MONTH == Month && x.YEAR == Year))
                {
                    List<QUALITY_INSPECTION_TARGET> lstquality_inspection_target = dbContext.QUALITY_INSPECTION_TARGET.Where(x => x.MONTH == Month && x.YEAR == Year).ToList();
                    foreach (var quality_inspection_target in lstquality_inspection_target)
                    {
                        dbContext.QUALITY_INSPECTION_TARGET.Remove(quality_inspection_target);
                    }
                    dbContext.SaveChanges();
                }
                message = "Target Inspections deleted successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.DeleteInspTargetDetailsDAL()");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddNQMNAInspectionDAL(NQMNotAvailableInspectionViewModel model, ref string message)
        {
            int stateCode = 0;
            int month = 0, year = 0, tgtNumber;

            string[] SplittedArr = model.ASSIGNED_lstAdminQmCode.Split(',');
            int NAId = 0, qmCode = 0, remqmCode = 0; ;

            bool flg = false;

            dbContext = new PMGSYEntities();
            try
            {
                List<string> lst_numbers = new List<string>(SplittedArr);
                List<string> lst_remove = new List<string>();
                //for (int i = 0; i <= lst_numbers.Count; i++)
                //{
                //    qmCode = Convert.ToInt32(lst_numbers[i]);
                //    if (dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Any(c => c.ADMIN_QM_CODE == qmCode && c.INSP_MONTH == model.Month && c.INSP_YEAR == model.Year))
                //    {
                //        lst_numbers.RemoveAt(i);
                //    }
                //}

                foreach (string str in lst_numbers)
                {
                    qmCode = Convert.ToInt32(str);
                    if (dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Any(c => c.ADMIN_QM_CODE == qmCode && c.INSP_MONTH == model.Month && c.INSP_YEAR == model.Year))
                    {
                        lst_remove.Add(str);
                    }
                }

                if (lst_numbers.Count == lst_remove.Count)
                {
                    message = "NQM detail(s) is/are already added for the selected month and year.";
                    return true;
                }

                SplittedArr = lst_numbers.Except(lst_remove).ToArray();
                qmCode = 0;

                if (SplittedArr.Length > 0)
                {
                    using (TransactionScope ts = new TransactionScope())
                    {
                        for (int i = 0; i < SplittedArr.Length; i++)
                        {
                            qmCode = Convert.ToInt32(SplittedArr[i]);

                            ///Insert Values in 
                            QM_NQM_NOT_AVAILABLE_INSPECTION qm_nqm_not_available_inspection = new QM_NQM_NOT_AVAILABLE_INSPECTION();

                            if (i == 0)
                            {
                                NAId = dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Any() ? dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Max(x => x.ID) + 1 : 1;
                            }
                            else
                            {
                                NAId += 1;
                            }
                            qm_nqm_not_available_inspection.ID = NAId;
                            qm_nqm_not_available_inspection.ADMIN_QM_CODE = qmCode;
                            qm_nqm_not_available_inspection.INSP_MONTH = model.Month;
                            qm_nqm_not_available_inspection.INSP_YEAR = model.Year;
                            qm_nqm_not_available_inspection.IS_INSPECTION = "N";//model.isInspection;

                            qm_nqm_not_available_inspection.USERID = PMGSYSession.Current.UserId;
                            qm_nqm_not_available_inspection.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                            dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Add(qm_nqm_not_available_inspection);
                            flg = true;
                        }
                        if (flg)
                        {
                            dbContext.SaveChanges();
                        }

                        if (lst_remove.Count > 0)           //Edited by Shreyas
                        {
                            string msg = "";
                            var qmname = "";
                            foreach (string str in lst_numbers)
                            {
                                qmCode = Convert.ToInt32(str);
                            }

                            foreach (string str in lst_remove)
                            {
                                remqmCode = Convert.ToInt32(str);
                                qmname = dbContext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_QM_CODE == remqmCode).Select(x => x.ADMIN_QM_FNAME + " " + x.ADMIN_QM_MNAME + " " + x.ADMIN_QM_LNAME).FirstOrDefault();

                                if (msg.Equals(""))
                                {
                                    msg = msg + " " + qmname;
                                }
                                else
                                {
                                    msg = msg + ", " + qmname;
                                }

                            }
                            message = "NQM detail(s) for " + msg + " is/are already added for the selected month and year.";
                        }
                        else
                        {
                            message = "NQM details added successfully.";
                        }

                        ts.Complete();
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AddNQMNAInspectionDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array ListNQMNotAvailableInspectionsDAL(int Month, int Year, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int serialNumber = 0;
                int admin_qm_code = 0;
                if (PMGSYSession.Current.RoleCode == 6)
                {
                    admin_qm_code = dbContext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(x => x.ADMIN_QM_CODE).FirstOrDefault(); ;
                }

                var lstInspTarget = PMGSYSession.Current.RoleCode == 6 ?
                                    ((from item in dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION
                                      where item.INSP_MONTH == Month
                                      && item.INSP_YEAR == Year
                                      && item.ADMIN_QM_CODE == admin_qm_code
                                      orderby item.ID
                                      select new
                                      {
                                          item.ID,
                                          item.ADMIN_QM_CODE,
                                          item.USERID,
                                          item.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME,
                                          item.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME,
                                          item.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME,
                                          InspMonth = Month,
                                          InspYear = Year
                                      }).ToList()) :
                                     ((from item in dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION
                                       where item.INSP_MONTH == Month
                                       && item.INSP_YEAR == Year
                                       orderby item.ID
                                       select new
                                       {
                                           item.ID,
                                           item.ADMIN_QM_CODE,
                                           item.USERID,
                                           item.ADMIN_QUALITY_MONITORS.ADMIN_QM_FNAME,
                                           item.ADMIN_QUALITY_MONITORS.ADMIN_QM_MNAME,
                                           item.ADMIN_QUALITY_MONITORS.ADMIN_QM_LNAME,
                                           InspMonth = Month,
                                           InspYear = Year
                                       }).ToList());
                totalRecords = lstInspTarget.Count();

                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "ID":
                                lstInspTarget = lstInspTarget.OrderBy(x => x.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstInspTarget = lstInspTarget.OrderBy(x => x.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ID":
                                lstInspTarget = lstInspTarget.OrderByDescending(x => x.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstInspTarget = lstInspTarget.OrderByDescending(x => x.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }


                return lstInspTarget.Select(Details => new
                {

                    cell = new[]{
                      Details.ADMIN_QM_FNAME + (string.IsNullOrEmpty(Details.ADMIN_QM_MNAME) ? "" : " " + Details.ADMIN_QM_MNAME) + (string.IsNullOrEmpty(Details.ADMIN_QM_LNAME) ? "" : " " + Details.ADMIN_QM_LNAME),
                      Details.InspMonth == 1?"January":(Details.InspMonth == 2?"February":(Details.InspMonth == 3 ? "March":(Details.InspMonth == 4?"April":(Details.InspMonth == 5?"May":(Details.InspMonth == 6?"June":(Details.InspMonth == 7?"July":Details.InspMonth == 8?"August":(Details.InspMonth == 9?"September":(Details.InspMonth == 10?"October":(Details.InspMonth == 11?"November":"December"))))))))),
                      Details.InspYear.ToString(),
                      //Edited by Shreyas on 21-07-2022
                      (PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9) ? "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteNQMNADetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "Month=" + Details.InspMonth.ToString().Trim(), "Year=" + Details.InspYear.ToString(), "QmCode=" + Details.ADMIN_QM_CODE.ToString() }) + "\"); return false;'>Delete</a></center>"
                      :(((DateTime.Now.Month + 1 == Details.InspMonth && DateTime.Now.Day < 25 && DateTime.Now.Year==Details.InspYear) || (DateTime.Now.Month + 1 < Details.InspMonth && DateTime.Now.Year==Details.InspYear) || (DateTime.Now.Month == 12 && 1 == Details.InspMonth && DateTime.Now.Day < 25 && DateTime.Now.Year +1 ==Details.InspYear) || (DateTime.Now.Month == 12 && 1 < Details.InspMonth &&  DateTime.Now.Year +1==Details.InspYear) ) ?
                      "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteNQMNADetails(\"" + URLEncrypt.EncryptParameters1(new string[] { "Month=" + Details.InspMonth.ToString().Trim(), "Year=" + Details.InspYear.ToString(), "QmCode=" + Details.ADMIN_QM_CODE.ToString() }) + "\"); return false;'>Delete</a></center>" :
                      "<center><a href='#' class='ui-icon ui-icon-locked'>Locked</a></center>")

                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.ListInspectionTargetDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteNQMNADetailsDAL(int QmCode, int Month, int Year, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Any(x => x.INSP_MONTH == Month && x.INSP_YEAR == Year && x.ADMIN_QM_CODE == QmCode))
                {
                    using (TransactionScope transaction = new TransactionScope())
                    {
                        QM_NQM_NOT_AVAILABLE_INSPECTION qm_nqm_not_available_inspection = dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Where(x => x.INSP_MONTH == Month && x.INSP_YEAR == Year && x.ADMIN_QM_CODE == QmCode).FirstOrDefault();

                        dbContext.QM_NQM_NOT_AVAILABLE_INSPECTION.Remove(qm_nqm_not_available_inspection);
                        dbContext.SaveChanges();

                        transaction.Complete();
                        message = "NQM Not Available details deleted successfully.";
                        return true;
                        // return string.Empty;
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.DeleteNQMNADetailsDAL()");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion



        public int GetLastMonthInspected1(out int year)
        {
            int month = 0;
            year = 0;
            try
            {
                dbContext = new PMGSYEntities();
                var query = (from qqs in dbContext.QUALITY_QM_AUTO_SCHEDULE

                             where qqs.DISTRICT1 != null && qqs.DISTRICT2 != null
                             select new
                             {
                                 //qqsd.SCHEDULE_MONTH,
                                 //qqas.SCHEDULE_YEAR,
                                 qqs.SCHEDULE_MONTH,
                                 qqs.SCHEDULE_YEAR
                             }).OrderByDescending(c => c.SCHEDULE_YEAR).ThenByDescending(c => c.SCHEDULE_MONTH).Take(1);
                if (query != null)
                {
                    year = (from result in query select result.SCHEDULE_YEAR).Max();
                    month = (from result in query select result.SCHEDULE_MONTH).Max();
                }
                return month;
            }
            catch (Exception ex)
            {
                year = 0;
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetLastMonthInspected()");
                return 0;
            }
        }


        public int GetLastMonthInspected(out int year)
        {
            int month = 0;
            year = 0;
            try
            {
                dbContext = new PMGSYEntities();
                var query = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                             join qqas in dbContext.QUALITY_QM_AUTO_SCHEDULE on new { x = qqs.ADMIN_IM_MONTH, y = qqs.ADMIN_IM_YEAR, z = qqs.ADMIN_QM_CODE } equals new { x = qqas.SCHEDULE_MONTH, y = qqas.SCHEDULE_YEAR, z = qqas.ADMIN_QM_CODE }
                             join qqsd in dbContext.QUALITY_QM_SCHEDULE_DETAILS on qqs.ADMIN_SCHEDULE_CODE equals qqsd.ADMIN_SCHEDULE_CODE
                             where qqas.DISTRICT1 != null && qqas.DISTRICT2 != null && qqs.ADMIN_IM_YEAR == qqas.SCHEDULE_YEAR && qqs.ADMIN_IM_MONTH == qqas.SCHEDULE_MONTH
                             select new
                             {
                                 //qqsd.SCHEDULE_MONTH,
                                 //qqas.SCHEDULE_YEAR,
                                 qqs.ADMIN_IM_MONTH,
                                 qqs.ADMIN_IM_YEAR
                             }).OrderByDescending(c => c.ADMIN_IM_YEAR).ThenByDescending(c => c.ADMIN_IM_MONTH).Take(1);
                if (query != null)
                {
                    year = (from result in query select result.ADMIN_IM_YEAR).Max();
                    month = (from result in query select result.ADMIN_IM_MONTH).Max();
                }
                return month;
            }
            catch (Exception ex)
            {
                year = 0;
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetLastMonthInspected()");
                return 0;
            }
        }










        //changes sachin new
        public int GetLastYearInspected()
        {
            int month = 0;
            int year = 0;
            try
            {
                dbContext = new PMGSYEntities();
                var query = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                             join qqas in dbContext.QUALITY_QM_AUTO_SCHEDULE on new { x = qqs.ADMIN_IM_MONTH, y = qqs.ADMIN_IM_YEAR, z = qqs.ADMIN_QM_CODE } equals new { x = qqas.SCHEDULE_MONTH, y = qqas.SCHEDULE_YEAR, z = qqas.ADMIN_QM_CODE }
                             join qqsd in dbContext.QUALITY_QM_SCHEDULE_DETAILS on qqs.ADMIN_SCHEDULE_CODE equals qqsd.ADMIN_SCHEDULE_CODE
                             where qqas.DISTRICT1 != null && qqas.DISTRICT2 != null && qqs.ADMIN_IM_YEAR == qqas.SCHEDULE_YEAR && qqs.ADMIN_IM_MONTH == qqas.SCHEDULE_MONTH
                             select new
                             {
                                 //qqsd.SCHEDULE_MONTH,
                                 //qqas.SCHEDULE_YEAR,
                                 qqs.ADMIN_IM_MONTH,
                                 qqs.ADMIN_IM_YEAR
                             }).OrderByDescending(c => c.ADMIN_IM_YEAR).ThenByDescending(c => c.ADMIN_IM_MONTH).Take(1);
                if (query != null)
                {
                    year = (from result in query select result.ADMIN_IM_YEAR).Max();
                    month = (from result in query select result.ADMIN_IM_MONTH).Max();
                }
                return year;
            }
            catch (Exception ex)
            {
                year = 0;
                ErrorLog.LogError(ex, "QualityMonitoringDAL.GetLastYearInspected()");
                return 0;
            }
        }


        public string QMAddAutoScheduleDetailsDAL(AutoScheduleViewModel model)
        {
            dbContext = new Models.PMGSYEntities();
            int i = 0, j = 0;

            try
            {

                i = dbContext.QUALITY_QM_AUTO_SCHEDULE_INSERT(1, model.Month, model.Year);

                if (i > 0)
                {
                    j = dbContext.QUALITY_QM_AUTO_SCHEDULE_INSERT(2, model.Month, model.Year);
                    var query = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                 join qqas in dbContext.QUALITY_QM_AUTO_SCHEDULE on new { x = qqs.ADMIN_IM_MONTH, y = qqs.ADMIN_IM_YEAR, z = qqs.ADMIN_QM_CODE } equals new { x = qqas.SCHEDULE_MONTH, y = qqas.SCHEDULE_YEAR, z = qqas.ADMIN_QM_CODE }
                                 join qqsd in dbContext.QUALITY_QM_SCHEDULE_DETAILS on qqs.ADMIN_SCHEDULE_CODE equals qqsd.ADMIN_SCHEDULE_CODE
                                 where qqs.ADMIN_IM_YEAR == model.Year && qqs.ADMIN_IM_MONTH == model.Month
                                 select new
                                 {
                                     qqsd.ADMIN_SCHEDULE_CODE,
                                     qqsd.IMS_PR_ROAD_CODE
                                 }).ToList();
                    foreach (var item in query)
                    {
                        if (!dbContext.EFORM_MASTER.Any(s => s.ADMIN_SCHEDULE_CODE == item.ADMIN_SCHEDULE_CODE && s.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE))
                        {
                            int userId = PMGSYSession.Current.UserId;
                            string IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                            try
                            {
                                dbContext.USP_EFORMS_INITIALIZE(item.IMS_PR_ROAD_CODE, item.ADMIN_SCHEDULE_CODE, userId, IPADD);
                            }
                            catch (Exception ex1)
                            {
                                ErrorLog.LogError(ex1, "QualityMonitoringDAL.QMAddAutoScheduleDetailsDAL");
                                return ("An Error Occurred While creating schedule for eform.");
                            }
                        }

                    }
                    return string.Empty;
                }
                else
                {
                    return "Details Not Inserted";
                }

                //transaction.Complete();


            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMAddAutoScheduleDetailsDAL()");
                return ("An Error Occurred While District assign.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #region added by abhinav to delete the inspection images

        public bool DeleteInspectionImageDAL(int fieldID, string filename, int obsID, string Year)
        {
            bool result = false;
            // changes made by saurabh on 09-02-2022
            string SQM_Path = string.Empty; string NQM_Path = string.Empty;
            bool SQM_Status = false;
            bool NQM_Status = false;

            // changes ended here. 
            try
            {
                dbContext = new PMGSYEntities();
                var imagedetails = dbContext.QUALITY_QM_INSPECTION_FILE.Where((x) => x.QM_FILE_ID == fieldID && x.QM_FILE_NAME == filename).FirstOrDefault();

                // changes done by saurabh starts here

                if (!(filename.Contains("$")))
                {
                    SQM_Path = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_SQM"], filename).Replace("\\\\", "\\");
                    NQM_Path = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_NQM"], filename).Replace("\\\\", "\\");
                    SQM_Status = System.IO.File.Exists(SQM_Path);
                    NQM_Status = System.IO.File.Exists(NQM_Path);
                }
                else
                {

                    NQM_Path = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_NQM_NEW"], Year, filename);
                    SQM_Path = Path.Combine(ConfigurationManager.AppSettings["QUALITY_INSPECTION_FILE_UPLOAD_SQM_NEW"], Year, filename);
                    NQM_Status = System.IO.File.Exists(NQM_Path);
                    SQM_Status = System.IO.File.Exists(SQM_Path);
                }

                if (imagedetails != null && SQM_Status || NQM_Status)
                { // changes by saurabh ended here....
                    using (TransactionScope TransScope = new TransactionScope())
                    {
                        //remove file from QUALITY_QM_INSPECTION_FILE
                        dbContext.QUALITY_QM_INSPECTION_FILE.Remove(imagedetails);
                        dbContext.SaveChanges();

                        //log entry of deleted file in QUALITY_QM_INSPECTION_FILE_LOG
                        QUALITY_QM_INSPECTION_FILE_LOG LogEntry = new QUALITY_QM_INSPECTION_FILE_LOG();

                        LogEntry.QM_FILE_LOG_ID = dbContext.QUALITY_QM_INSPECTION_FILE_LOG.Select(x => x.QM_FILE_LOG_ID).Any() ? Convert.ToInt32(dbContext.QUALITY_QM_INSPECTION_FILE_LOG.Select(x => x.QM_FILE_LOG_ID).Max()) + 1 : 1;
                        LogEntry.QM_FILE_ID = imagedetails.QM_FILE_ID;
                        LogEntry.ADMIN_SCHEDULE_CODE = imagedetails.ADMIN_SCHEDULE_CODE;
                        LogEntry.IMS_PR_ROAD_CODE = imagedetails.IMS_PR_ROAD_CODE;
                        LogEntry.QM_OBSERVATION_ID = imagedetails.QM_OBSERVATION_ID;
                        LogEntry.QM_FILE_NAME = imagedetails.QM_FILE_NAME;
                        LogEntry.QM_FILE_DESCR = imagedetails.QM_FILE_DESCR;
                        LogEntry.QM_FILE_UPLOAD_DATE = imagedetails.QM_FILE_UPLOAD_DATE;
                        LogEntry.QM_LATITUDE = imagedetails.QM_LATITUDE;
                        LogEntry.QM_LONGITUDE = imagedetails.QM_LONGITUDE;
                        LogEntry.QM_FILE_REMOVED_BY = PMGSYSession.Current.UserId;
                        LogEntry.QM_FILE_REMOVED_DATETIME = DateTime.Now;
                        LogEntry.USERID = PMGSYSession.Current.UserId;
                        LogEntry.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.QUALITY_QM_INSPECTION_FILE_LOG.Add(LogEntry);
                        dbContext.SaveChanges();

                        TransScope.Complete();
                        result = true;
                    }

                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteInspectionImageDAL");
                return result;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        #endregion

        #region Upload Inspection by NRIDA Officials

        public Array GetInspRoadList(int stateCode, int districtCode, int blockCode, int yearCode, int batch, int scheme, string proposalType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                List<ListForUploadedInspectionByNRIDA> lstExecution = new List<ListForUploadedInspectionByNRIDA>();

                var lstExecution1 = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                     join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                     join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                     join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                     join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                     where
                                     (stateCode == 0 ? 1 : item.MAST_STATE_CODE) == (stateCode == 0 ? 1 : stateCode)
                                     && (districtCode == 0 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode == 0 ? 1 : districtCode)
                                     && (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode)
                                     && (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode)
                                     && (batch == 0 ? 1 : item.IMS_BATCH) == (batch == 0 ? 1 : batch)
                                     && (scheme == 0 ? 1 : item.MAST_PMGSY_SCHEME) == (scheme == 0 ? 1 : scheme)
                                     && (proposalType == "A" ? "A" : item.IMS_PROPOSAL_TYPE) == (proposalType == "A" ? "A" : proposalType)
                                     && item.IMS_SANCTIONED == "Y"
                                     select new
                                     {
                                         item.IMS_PR_ROAD_CODE,
                                         state.MAST_STATE_NAME,
                                         district.MAST_DISTRICT_NAME,
                                         block.MAST_BLOCK_NAME,
                                         item.IMS_PACKAGE_ID,
                                         year.MAST_YEAR_TEXT,
                                         item.MAST_PMGSY_SCHEME,
                                         item.IMS_BATCH,
                                         item.IMS_ROAD_NAME,
                                         item.IMS_BRIDGE_NAME,
                                         item.IMS_PROPOSAL_TYPE,
                                         ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                         ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                     : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                         MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                     }).Distinct().ToList();

                if (PMGSYSession.Current.RoleCode == 25 || PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9)
                {
                    foreach (var item in lstExecution1)
                    {
                        lstExecution.Add(new ListForUploadedInspectionByNRIDA
                        {
                            IMS_PR_ROAD_CODE = item.IMS_PR_ROAD_CODE,
                            MAST_STATE_NAME = item.MAST_STATE_NAME,
                            MAST_DISTRICT_NAME = item.MAST_DISTRICT_NAME,
                            MAST_BLOCK_NAME = item.MAST_BLOCK_NAME,
                            IMS_PACKAGE_ID = item.IMS_PACKAGE_ID,
                            MAST_YEAR_TEXT = item.MAST_YEAR_TEXT,
                            MAST_PMGSY_SCHEME = item.MAST_PMGSY_SCHEME,
                            IMS_BATCH = item.IMS_BATCH,
                            IMS_ROAD_NAME = item.IMS_ROAD_NAME,
                            IMS_BRIDGE_NAME = item.IMS_BRIDGE_NAME,
                            IMS_PROPOSAL_TYPE = item.IMS_PROPOSAL_TYPE,
                            ROAD_LENGTH = item.ROAD_LENGTH,
                            ROAD_COST = item.ROAD_COST,
                            MAINTENANCE_COST = item.MAINTENANCE_COST
                        });
                    }
                }
                else if (PMGSYSession.Current.RoleCode == 2)
                {
                    var lst2 = dbContext.QM_IR_ATR_DETAILS.Where(x => x.IS_STATE_OR_NRIDA == "N" && x.IS_FINALIZE == "Y").Select(y => y.IMS_PR_ROAD_CODE).Distinct().ToList();

                    foreach (var road in lst2)
                    {
                        foreach (var item in lstExecution1)
                        {
                            if (item.IMS_PR_ROAD_CODE == road)
                            {
                                lstExecution.Add(new ListForUploadedInspectionByNRIDA
                                {
                                    IMS_PR_ROAD_CODE = item.IMS_PR_ROAD_CODE,
                                    MAST_STATE_NAME = item.MAST_STATE_NAME,
                                    MAST_DISTRICT_NAME = item.MAST_DISTRICT_NAME,
                                    MAST_BLOCK_NAME = item.MAST_BLOCK_NAME,
                                    IMS_PACKAGE_ID = item.IMS_PACKAGE_ID,
                                    MAST_YEAR_TEXT = item.MAST_YEAR_TEXT,
                                    MAST_PMGSY_SCHEME = item.MAST_PMGSY_SCHEME,
                                    IMS_BATCH = item.IMS_BATCH,
                                    IMS_ROAD_NAME = item.IMS_ROAD_NAME,
                                    IMS_BRIDGE_NAME = item.IMS_BRIDGE_NAME,
                                    IMS_PROPOSAL_TYPE = item.IMS_PROPOSAL_TYPE,
                                    ROAD_LENGTH = item.ROAD_LENGTH,
                                    ROAD_COST = item.ROAD_COST,
                                    MAINTENANCE_COST = item.MAINTENANCE_COST
                                });
                            }
                        }
                    }
                }


                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_DISTRICT_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_DISTRICT_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.MAST_STATE_NAME,
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.MAST_PMGSY_SCHEME,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.ROAD_COST,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_BRIDGE_NAME,


                    colorFlag = (from item in dbContext.QM_IR_ATR_DETAILS
                                 where item.IMS_PR_ROAD_CODE == executionDetails.IMS_PR_ROAD_CODE && item.IS_FINALIZE == "N"
                                 select new
                                 {
                                     item.INSPECTION_ID,
                                     item.INSPECTION_DATE,
                                     item.IMS_PR_ROAD_CODE,
                                     item.IS_FINALIZE
                                 }).Any()
                                 ? "Y" : "N",

                }).ToArray();

                return result.Select(m => new
                {

                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                {
                    m.IMS_PR_ROAD_CODE.ToString(),
                    m.MAST_STATE_NAME,
                    m.MAST_DISTRICT_NAME,
                    m.MAST_BLOCK_NAME,
                    m.IMS_PACKAGE_ID,
                    m.MAST_YEAR_TEXT,
                    m.MAST_PMGSY_SCHEME == 1 ? "PMGSY-I" : m.MAST_PMGSY_SCHEME == 2 ? "PMGSY-II" : m.MAST_PMGSY_SCHEME == 3 ? "RCPLWE" : m.MAST_PMGSY_SCHEME == 4 ? "PMGSY-III" : "--",
                    "Batch : " + m.IMS_BATCH.ToString(),
                    m.IMS_PROPOSAL_TYPE == "P" ? "Road" : (m.IMS_PROPOSAL_TYPE == "L" ? "Bridge": (m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--")),
                    m.IMS_PROPOSAL_TYPE == "P" || m.IMS_PROPOSAL_TYPE == "B" ? (m.IMS_ROAD_NAME == null ? string.Empty : m.IMS_ROAD_NAME) : (m.IMS_BRIDGE_NAME == null ? string.Empty : m.IMS_BRIDGE_NAME),
                    (m.ROAD_COST + m.MAINTENANCE_COST).ToString(),
                    m.ROAD_LENGTH.ToString(),
                    (PMGSYSession.Current.RoleCode == 25 || PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9)
                    ? dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N" && x.IS_FINALIZE == "Y").Any()
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-zoomin' title='Click here to View Inspection Report' onClick ='AddIRforMORD(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>" 
                        /*"<a href='"+Path.Combine(ConfigurationManager.AppSettings["INSPECTION_BY_NRIDA_AND_STATE_VIRTUAL_PATH"].ToString(), "NRIDA")+"/" + dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N" && x.IS_FINALIZE == "Y").Select(y => y.FILE_NAME).FirstOrDefault().ToString() +"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>"*/ 
                        /*"<a href='/QualityMonitoring/GetInspByNRIDAPdf?id="+dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N" && x.IS_FINALIZE == "Y").Select(y => y.INSPECTION_ID).FirstOrDefault().ToString() +"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>"*/
                        : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plus' title='Click here to Upload Inspection Report' onClick ='AddIRforMORD(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"
                    : PMGSYSession.Current.RoleCode == 2
                        ? dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N" && x.GRADE == "S").Any()
                            ? "--"
                            : dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "S" && x.IS_ACCEPTED == "A").Any()
                                ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-zoomin' title='Click here to View ATR' onClick ='AddATRforState(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"
                                : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plus' title='Click here to Upload ATR' onClick ='AddATRforState(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"
                        : "--",

                    PMGSYSession.Current.RoleCode == 2
                    ? dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N" && x.IS_FINALIZE == "Y").Any()
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-zoomin' title='Click here to view ATR' onClick ='LoadUploadedStateList(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"
                        : "--"
                    : dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "S" && x.IS_FINALIZE == "Y").Any()
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-zoomin' title='Click here to view ATR' onClick ='LoadUploadedList(\"" + URLEncrypt.EncryptParameters1(new string[]{"imsRoadID="+m.IMS_PR_ROAD_CODE.ToString()}) + "\");' ></span></td></tr></table></center>"
                        : "--",
                    m.colorFlag,
                }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetInspRoadList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddInspByNRIDADetails(FormCollection formCollection, HttpPostedFileBase postedBgFile, out String IsValid)
        {
            int status = 0;
            int roleCode = 0;
            var dbContext = new PMGSYEntities();
            QM_IR_ATR_DETAILS inspModel = new QM_IR_ATR_DETAILS();

            try
            {
                using (var scope = new TransactionScope())
                {
                    Int32 id = dbContext.QM_IR_ATR_DETAILS.Any() ? (from item in dbContext.QM_IR_ATR_DETAILS select item.INSPECTION_ID).Max() + 1 : 1;
                    inspModel.INSPECTION_ID = id;
                    inspModel.IMS_PR_ROAD_CODE = Convert.ToInt32(formCollection["IMS_PR_ROAD_CODE"]);
                    inspModel.FILE_UPLOADED_DATE = DateTime.Now;
                    inspModel.USERID = PMGSYSession.Current.UserId;
                    inspModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    String FilePath = ConfigurationManager.AppSettings["INSPECTION_BY_NRIDA_AND_STATE"];
                    string fullPath = string.Empty;
                    roleCode = Convert.ToInt32(formCollection["roleCode"]);
                    int currYear = DateTime.Now.Year;

                    if (roleCode == 25 || roleCode == 5 || roleCode == 9)
                        fullPath = Path.Combine(FilePath, "NRIDA", currYear.ToString());
                    else if (roleCode == 2)
                        fullPath = Path.Combine(FilePath, "STATE", currYear.ToString());

                    if (!Directory.Exists(fullPath))
                    {
                        Directory.CreateDirectory(fullPath);
                    }

                    DateTime d = DateTime.Now;
                    String format = "d_MMM_yyyy_HH_mm_ss";
                    String currentTime = d.ToString(format);

                    String FileName = string.Empty;
                    inspModel.FILE_PATH = FilePath;

                    if (roleCode == 25 || roleCode == 5 || roleCode == 9)  // "N" is used for NRIDA and "S" is used for state
                    {
                        inspModel.IS_STATE_OR_NRIDA = "N";
                        FileName = currYear + "_N_" + id + "_" + formCollection["IMS_PR_ROAD_CODE"] + "_" + currentTime + ".pdf";
                        inspModel.GRADE = formCollection["GRADE"];
                        inspModel.FIRST_NAME = formCollection["FIRST_NAME"];
                        inspModel.MIDDLE_NAME = formCollection["MIDDLE_NAME"];
                        inspModel.LAST_NAME = formCollection["LAST_NAME"];
                        inspModel.DESIGNATION = formCollection["DESIGNATION"];
                        inspModel.INSPECTION_DATE = Convert.ToDateTime(formCollection["InspectionDate"]);
                    }
                    else if (roleCode == 2)
                    {
                        inspModel.IS_STATE_OR_NRIDA = "S";
                        FileName = currYear + "_S_" + id + "_" + formCollection["IMS_PR_ROAD_CODE"] + "_" + currentTime + ".pdf";
                        inspModel.NRIDA_INSPECTION_ID = dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == inspModel.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N").Select(y => y.INSPECTION_ID).FirstOrDefault();
                        inspModel.IS_ACCEPTED = "N";
                    }

                    inspModel.IS_FINALIZE = "N";
                    inspModel.FILE_NAME = FileName;

                    postedBgFile.SaveAs(System.IO.Path.Combine(fullPath, FileName));

                    dbContext.QM_IR_ATR_DETAILS.Add(inspModel);
                    dbContext.SaveChanges();
                    status = 1;

                    scope.Complete();

                    IsValid = "Details uploaded successfully.";
                    return true;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddInspByNRIDADetails");
                IsValid = "Details not added.";
                return false;

            }

        }

        public Array GetInspByNRIDADetailsList(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            string message = string.Empty;

            try
            {
                var lstExecution = (from item in dbContext.QM_IR_ATR_DETAILS
                                    join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join state in dbContext.MASTER_STATE on details.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                    //join road in dbContext.EXEC_ROADS_MONTHLY_STATUS on details.IMS_PR_ROAD_CODE equals road.IMS_PR_ROAD_CODE
                                    where
                                    (PMGSYSession.Current.RoleCode == 25 || PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9)
                                    ? (item.IMS_PR_ROAD_CODE == roadCode
                                        && item.IS_STATE_OR_NRIDA == "N")
                                    : (item.IMS_PR_ROAD_CODE == roadCode
                                        && item.IS_STATE_OR_NRIDA == "S")
                                    select new
                                    {
                                        item.INSPECTION_ID,
                                        item.IMS_PR_ROAD_CODE,
                                        state.MAST_STATE_NAME,
                                        district.MAST_DISTRICT_NAME,
                                        block.MAST_BLOCK_NAME,
                                        details.IMS_PACKAGE_ID,
                                        year.MAST_YEAR_TEXT,
                                        details.MAST_PMGSY_SCHEME,
                                        details.IMS_BATCH,
                                        details.IMS_PROPOSAL_TYPE,
                                        details.IMS_ROAD_NAME,
                                        item.IS_STATE_OR_NRIDA,
                                        item.INSPECTION_DATE,
                                        item.FIRST_NAME,
                                        item.MIDDLE_NAME,
                                        item.LAST_NAME,
                                        item.DESIGNATION,
                                        item.GRADE,
                                        item.IS_ACCEPTED,
                                        item.ACCEPT_REJECT_REMARK,
                                        details.IMS_BRIDGE_NAME,
                                        item.FILE_NAME,
                                        item.FILE_PATH,
                                        item.FILE_UPLOADED_DATE,
                                        item.IS_FINALIZE
                                    }).ToList();


                totalRecords = lstExecution.Count();

                lstExecution = lstExecution.OrderByDescending(m => m.INSPECTION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                foreach (var item in lstExecution)
                {
                    message += item + " ";
                }

                message += "---------- Total Records : " + totalRecords + "---------------";

                //var result = lstExecution.Select(executionDetails => new
                //{
                //    executionDetails.INSPECTION_ID,
                //    executionDetails.IMS_PR_ROAD_CODE,
                //    executionDetails.MAST_STATE_NAME,
                //    executionDetails.MAST_DISTRICT_NAME,
                //    executionDetails.MAST_BLOCK_NAME,
                //    executionDetails.IMS_PACKAGE_ID,
                //    executionDetails.MAST_YEAR_TEXT,
                //    executionDetails.MAST_PMGSY_SCHEME,
                //    executionDetails.IMS_BATCH,
                //    executionDetails.IMS_PROPOSAL_TYPE,
                //    executionDetails.IMS_ROAD_NAME,
                //    executionDetails.IS_STATE_OR_NRIDA,
                //    executionDetails.INSPECTION_DATE,
                //    executionDetails.FIRST_NAME,
                //    executionDetails.MIDDLE_NAME,
                //    executionDetails.LAST_NAME,
                //    executionDetails.DESIGNATION,
                //    executionDetails.GRADE,
                //    executionDetails.IS_ACCEPTED,
                //    executionDetails.ACCEPT_REJECT_REMARK,
                //    executionDetails.IMS_BRIDGE_NAME,
                //    executionDetails.FILE_NAME,
                //    executionDetails.FILE_PATH,
                //    executionDetails.FILE_UPLOADED_DATE,
                //    executionDetails.IS_FINALIZE
                //}).ToArray();

                return lstExecution.Select(m => new
                {
                    id = m.INSPECTION_ID.ToString(),
                    cell = new[]
                    {
                        m.INSPECTION_ID.ToString(),
                        m.IMS_PR_ROAD_CODE.ToString(),
                        m.MAST_STATE_NAME,
                        m.MAST_DISTRICT_NAME,
                        m.MAST_BLOCK_NAME,
                        m.MAST_YEAR_TEXT,
                        m.MAST_PMGSY_SCHEME == 1 ? "PMGSY-I" : m.MAST_PMGSY_SCHEME == 2 ? "PMGSY-II" : m.MAST_PMGSY_SCHEME == 3 ? "RCPLWE" : m.MAST_PMGSY_SCHEME == 4 ? "PMGSY-III" : "--",
                        "Batch : " + m.IMS_BATCH.ToString(),
                        m.IMS_PACKAGE_ID,
                        m.IMS_PROPOSAL_TYPE == "P" ? "Road" : (m.IMS_PROPOSAL_TYPE == "L" ? "Bridge" : (m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--")),
                        (m.IMS_PROPOSAL_TYPE == "P" || m.IMS_PROPOSAL_TYPE == "B") ? (m.IMS_ROAD_NAME == null || m.IMS_ROAD_NAME == string.Empty ? "--" : m.IMS_ROAD_NAME) : (m.IMS_BRIDGE_NAME == null || m.IMS_BRIDGE_NAME == string.Empty ? "--" : m.IMS_BRIDGE_NAME),
                        m.FIRST_NAME == null || m.FIRST_NAME == string.Empty ? "--" : (m.FIRST_NAME == null || m.FIRST_NAME == string.Empty ? "" : m.FIRST_NAME) + " " + (m.MIDDLE_NAME == null || m.MIDDLE_NAME == string.Empty ? "" : m.MIDDLE_NAME) + " " + (m.LAST_NAME == null || m.LAST_NAME == string.Empty ? "" : m.LAST_NAME) + " (" + (m.DESIGNATION == null || m.DESIGNATION == string.Empty ? "" : m.DESIGNATION) + ")",
                        (m.GRADE == null || m.GRADE == string.Empty ? "--" : m.GRADE),
                        //m.FILE_UPLOADED_DATE.ToShortDateString(),
                        (PMGSYSession.Current.RoleCode == 25 || PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9) ? Convert.ToDateTime(m.INSPECTION_DATE).ToString("dd/MM/yyyy") : PMGSYSession.Current.RoleCode == 2 ? m.FILE_UPLOADED_DATE.ToShortDateString() : "--",
                        (PMGSYSession.Current.RoleCode == 2) ? m.IS_ACCEPTED == null || m.IS_ACCEPTED == string.Empty ? "--" : m.IS_ACCEPTED == "R" ? "Rejected" : m.IS_ACCEPTED == "A" ? "Accepted" : "--" : "--",
                        (PMGSYSession.Current.RoleCode == 2) ? m.ACCEPT_REJECT_REMARK == null || m.ACCEPT_REJECT_REMARK == string.Empty ? "--" : m.ACCEPT_REJECT_REMARK : "--" ,
                        "<a href='"+Path.Combine(ConfigurationManager.AppSettings["INSPECTION_BY_NRIDA_AND_STATE_VIRTUAL_PATH"].ToString(), m.IS_STATE_OR_NRIDA == "N" ? "NRIDA" : "STATE", m.FILE_NAME.Split('_')[0])+"/" + m.FILE_NAME +"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>", //"<a href='/QualityMonitoring/GetInspByNRIDAPdf?id="+dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N" && x.IS_FINALIZE == "Y").Select(y => y.INSPECTION_ID).FirstOrDefault().ToString() +"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>"

                        //"<a href='/QualityMonitoring/GetInspByNRIDAPdf?id="+m.INSPECTION_ID.ToString()+"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>",
                        m.IS_FINALIZE == "Y" ? "-" : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-trash' title='Click here to Delete uploaded details' onClick ='DeleteFile(\"" + m.INSPECTION_ID.ToString() + "\");' ></span></td></tr></table></center>",
                        m.IS_FINALIZE == "Y" ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked'></span></td></tr></table></center>" : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-unlocked' title='Click here to finalize details' onClick ='Finalize(\"" + m.INSPECTION_ID.ToString() + "$" + PMGSYSession.Current.RoleCode + "\");' ></span></td></tr></table></center>",
                    }
                }).ToArray();

            }
            catch (DbEntityValidationException dbEx)
            {
                //string message = string.Empty;
                foreach (var eve in dbEx.EntityValidationErrors)
                {
                    message += eve.ValidationErrors.ToString();
                }
                using (StreamWriter sw = System.IO.File.AppendText(ConfigurationManager.AppSettings["DigSignErrorLogPath"].ToString() +
                     "IRErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt"))
                {
                    sw.WriteLine("Date :" + DateTime.Now.ToString() + " UserName:- " + PMGSYSession.Current.UserName);
                    sw.WriteLine(message);
                    sw.WriteLine("____________________________________________________");
                    sw.Close();
                }
                ErrorLog.LogError(dbEx, "GetInspByNRIDADetailsList().DAL");
                totalRecords = 0;
                return null;
            }
            catch (Exception ex)
            {
                using (StreamWriter sw = System.IO.File.AppendText(ConfigurationManager.AppSettings["OMMASErrorLogPath"].ToString() +
                     "IRErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt"))
                {
                    sw.WriteLine("Date :" + DateTime.Now.ToString() + " UserName:- " + PMGSYSession.Current.UserName);
                    sw.WriteLine(message);
                    sw.WriteLine("____________________________________________________");
                    sw.Close();
                }

                ErrorLog.LogError(ex, "GetInspByNRIDADetailsList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                totalRecords = 0;
                dbContext.Dispose();
                //return null;
            }
        }

        public Array GetInspUploadedDetailsList(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                var lstExecution = (from item in dbContext.QM_IR_ATR_DETAILS
                                    join details in dbContext.IMS_SANCTIONED_PROJECTS on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join state in dbContext.MASTER_STATE on details.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join district in dbContext.MASTER_DISTRICT on details.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join block in dbContext.MASTER_BLOCK on details.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on details.IMS_YEAR equals year.MAST_YEAR_CODE
                                    where
                                    (PMGSYSession.Current.RoleCode == 25 || PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9)
                                    ? (item.IMS_PR_ROAD_CODE == roadCode
                                        && item.IS_STATE_OR_NRIDA == "S"
                                        && item.IS_FINALIZE == "Y")
                                    : (item.IMS_PR_ROAD_CODE == roadCode
                                        && item.IS_STATE_OR_NRIDA == "N"
                                        && item.IS_FINALIZE == "Y")
                                    select new
                                    {
                                        item.INSPECTION_ID,
                                        item.IMS_PR_ROAD_CODE,
                                        state.MAST_STATE_NAME,
                                        district.MAST_DISTRICT_NAME,
                                        block.MAST_BLOCK_NAME,
                                        details.IMS_PACKAGE_ID,
                                        year.MAST_YEAR_TEXT,
                                        details.IMS_PROPOSAL_TYPE,
                                        details.IMS_ROAD_NAME,
                                        details.IMS_BRIDGE_NAME,
                                        item.INSPECTION_DATE,
                                        item.FIRST_NAME,
                                        item.MIDDLE_NAME,
                                        item.LAST_NAME,
                                        item.DESIGNATION,
                                        item.GRADE,
                                        item.IS_ACCEPTED,
                                        item.ACCEPT_REJECT_REMARK,
                                        item.FILE_NAME,
                                        item.FILE_PATH,
                                        item.FILE_UPLOADED_DATE,
                                        item.IS_FINALIZE,
                                        item.IS_STATE_OR_NRIDA
                                    }).ToList();


                totalRecords = lstExecution.Count();

                lstExecution = lstExecution.OrderByDescending(m => m.INSPECTION_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.INSPECTION_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.MAST_STATE_NAME,
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_BRIDGE_NAME,
                    executionDetails.INSPECTION_DATE,
                    executionDetails.FIRST_NAME,
                    executionDetails.MIDDLE_NAME,
                    executionDetails.LAST_NAME,
                    executionDetails.DESIGNATION,
                    executionDetails.GRADE,
                    executionDetails.IS_ACCEPTED,
                    executionDetails.ACCEPT_REJECT_REMARK,
                    executionDetails.FILE_NAME,
                    executionDetails.FILE_PATH,
                    executionDetails.FILE_UPLOADED_DATE,
                    executionDetails.IS_FINALIZE,
                    executionDetails.IS_STATE_OR_NRIDA
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.INSPECTION_ID.ToString(),
                    cell = new[]
                    {
                        m.INSPECTION_ID.ToString(),
                        m.IMS_PR_ROAD_CODE.ToString(),
                        m.MAST_STATE_NAME,
                        m.MAST_DISTRICT_NAME,
                        m.MAST_BLOCK_NAME,
                        m.MAST_YEAR_TEXT,
                        m.IMS_PACKAGE_ID,
                        m.IMS_PROPOSAL_TYPE == "P" ? "Road" : (m.IMS_PROPOSAL_TYPE == "L" ? "Bridge" : (m.IMS_PROPOSAL_TYPE == "B" ? "Building" : "--")),
                        (m.IMS_PROPOSAL_TYPE == "P" || m.IMS_PROPOSAL_TYPE == "B") ? m.IMS_ROAD_NAME : m.IMS_BRIDGE_NAME,
                        m.FIRST_NAME == null || m.FIRST_NAME == string.Empty ? "--" : (m.FIRST_NAME == null || m.FIRST_NAME == string.Empty ? "" : m.FIRST_NAME) + " " + (m.MIDDLE_NAME == null || m.MIDDLE_NAME == string.Empty ? "" : m.MIDDLE_NAME) + " " + (m.LAST_NAME == null || m.LAST_NAME == string.Empty ? "" : m.LAST_NAME) + " (" + (m.DESIGNATION == null || m.DESIGNATION == string.Empty ? "" : m.DESIGNATION) + ")",
                        (m.GRADE == null || m.GRADE == string.Empty ? "--" : m.GRADE),
                        (PMGSYSession.Current.RoleCode == 25 || PMGSYSession.Current.RoleCode == 5 || PMGSYSession.Current.RoleCode == 9) ? m.FILE_UPLOADED_DATE.ToShortDateString()  : Convert.ToDateTime(m.INSPECTION_DATE).ToString("dd/MM/yyyy") ,
                        "<a href='"+Path.Combine(ConfigurationManager.AppSettings["INSPECTION_BY_NRIDA_AND_STATE_VIRTUAL_PATH"].ToString(), m.IS_STATE_OR_NRIDA == "N" ? "NRIDA" : "STATE", m.FILE_NAME.Split('_')[0])+"/" + m.FILE_NAME +"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>", //"<a href='/QualityMonitoring/GetInspByNRIDAPdf?id="+dbContext.QM_IR_ATR_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && x.IS_STATE_OR_NRIDA == "N" && x.IS_FINALIZE == "Y").Select(y => y.INSPECTION_ID).FirstOrDefault().ToString() +"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>"
                        
                        //"<a href='/QualityMonitoring/GetInspByNRIDAPdf?id="+m.INSPECTION_ID.ToString()+"' title='Click here to view uploaded pdf' class='ui-icon 	ui-icon-search  ui-align-center' target=_blank></a>",
                        m.IS_ACCEPTED,
                        m.IS_ACCEPTED + "$" + m.ACCEPT_REJECT_REMARK,
                        m.INSPECTION_ID.ToString() + "$" + m.IS_ACCEPTED
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetInspUploadedDetailsList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Work List Added by Chandra Darshan Agrawal

        public Array GetRoadListDAL(int stateCode, int districtCode, int ddlTech,  int page, int rows, string sidx, string sord, out long totalRecords, string filter)
        {
            dbContext = new Models.PMGSYEntities();
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_get_works_to_assign_Result> scheduleItemList = new List<qm_get_works_to_assign_Result>();
            try
            {
                //var schDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                //                  where qqs.ADMIN_SCHEDULE_CODE == 0//adminSchCode
                //                  select qqs).First();

                JavaScriptSerializer js = null;
                SearchJson test = new SearchJson();
                string blockSearch = string.Empty;
                string packageSearch = string.Empty;
                string roadSearch = string.Empty;
                string propTypeSearch = string.Empty;

                if (filter != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filter);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "Block":
                                blockSearch = item.data;
                                break;
                            case "Package":
                                packageSearch = item.data;
                                break;
                            case "Road":
                                roadSearch = item.data;
                                break;
                            case "Type":
                                propTypeSearch = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                propTypeSearch = propTypeSearch.Equals("road", StringComparison.OrdinalIgnoreCase) ? "P" : (propTypeSearch.Equals("lsb", StringComparison.OrdinalIgnoreCase) ? "L" : "");

                scheduleItemList = dbContext.qm_get_works_to_assign(stateCode, districtCode, 0, Convert.ToInt32(PMGSYSession.Current.PMGSYScheme)).Where
                                    (x => x.MAST_BLOCK_NAME.Contains(blockSearch.Equals(string.Empty) ? "" : blockSearch) &&
                                        x.IMS_PACKAGE_ID.Contains(packageSearch.Equals(string.Empty) ? "" : packageSearch) &&
                                        x.IMS_ROAD_NAME.Contains(roadSearch.Equals(string.Empty) ? "" : roadSearch) &&
                                        x.IMS_PROPOSAL_TYPE.Contains(propTypeSearch.Equals(string.Empty) ? "" : propTypeSearch)
                                    ).ToList<qm_get_works_to_assign_Result>();

                totalRecords = scheduleItemList.Count();

                if (ddlTech > 0)  //Added for FDR 
                {


                    var FDRRoadsList = (from mstech in dbContext.IMS_PROPOSAL_TECH
                                        where mstech.MAST_TECH_CODE == 64
                                        select mstech).ToList();


                    scheduleItemList = (from schitm in scheduleItemList
                                        where FDRRoadsList.Any(x => x.IMS_PR_ROAD_CODE == schitm.IMS_PR_ROAD_CODE)
                                        select schitm).ToList();
                }

                var result = scheduleItemList.Select(executionDetails => new
                {
                    executionDetails.WORK_PRIORITY,
                    executionDetails.MAST_STATE_NAME,
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_YEAR,
                    executionDetails.IMS_PAV_LENGTH,

                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.CONTRACTOR_NAME,
                    executionDetails.COMMENCED_DATE,
                    executionDetails.COMPLETED_DATE,
                    executionDetails.ADDED_BY,
                    executionDetails.SCHEME,
                    executionDetails.NQM_LAST_INSP_DATE,
                    executionDetails.NQM_INSP,
                    executionDetails.SQM_LAST_INSP_DATE,
                    executionDetails.SQM_INSP,
                    executionDetails.IS_ENQUIRY,
                    executionDetails.IMS_ISCOMPLETED,
                    executionDetails.PROPOSAL_STATUS,
                    executionDetails.TECHNOLOGY,

                    flag = getDateDiff(executionDetails.NQM_LAST_INSP_DATE, executionDetails.SQM_LAST_INSP_DATE),

                    colorFlag = (from QOM in dbContext.QUALITY_QM_OBSERVATION_MASTER
                                 join QS in dbContext.QUALITY_QM_SCHEDULE
                                 on QOM.ADMIN_SCHEDULE_CODE equals QS.ADMIN_SCHEDULE_CODE
                                 join AQM in dbContext.ADMIN_QUALITY_MONITORS on QS.ADMIN_QM_CODE equals AQM.ADMIN_QM_CODE
                                 where QOM.IMS_PR_ROAD_CODE == executionDetails.IMS_PR_ROAD_CODE && AQM.ADMIN_QM_TYPE == "I" && (QOM.QM_OVERALL_GRADE == 2 || QOM.QM_OVERALL_GRADE == 3)
                                 select new
                                 {
                                     QOM.IMS_PR_ROAD_CODE,
                                     AQM.ADMIN_QM_TYPE,
                                     QOM.QM_OBSERVATION_ID,
                                     QOM.QM_INSPECTION_DATE,
                                     QOM.QM_OVERALL_GRADE
                                 }).Any()

                                 ? "Y" : "N",

                    executionDetails.TEND_IS_AGREEMENT_FINALIZED
                }).ToArray();

                return result.Select(schRoadDetails => new
                {
                    id = schRoadDetails.IMS_PR_ROAD_CODE.ToString().Trim(),

                    cell = new[] {
                                    schRoadDetails.WORK_PRIORITY,
                                    schRoadDetails.MAST_STATE_NAME,
                                    schRoadDetails.MAST_DISTRICT_NAME,
                                    schRoadDetails.MAST_BLOCK_NAME,
                                    schRoadDetails.IMS_PACKAGE_ID,
                                    schRoadDetails.IMS_YEAR + "-" + (schRoadDetails.IMS_YEAR+1),
                                    schRoadDetails.IMS_ROAD_NAME,
                                    schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : schRoadDetails.IMS_PROPOSAL_TYPE.Equals("L") ? "LSB" : "Building",
                                    schRoadDetails.IMS_PAV_LENGTH.ToString(),
                                    schRoadDetails.CONTRACTOR_NAME,
                                   /* schRoadDetails.COMMENCED_DATE == null ? "-" : (schRoadDetails.COMMENCED_DATE=="01 Jan 1960"?"-":schRoadDetails.COMMENCED_DATE),
                                    schRoadDetails.COMPLETED_DATE==null? "-":(schRoadDetails.COMPLETED_DATE=="01 Jan 1960"?"-":schRoadDetails.COMPLETED_DATE),*/
                                    
                                    schRoadDetails.PROPOSAL_STATUS,
                                    schRoadDetails.IS_ENQUIRY,
                                    
                                    /*schRoadDetails.ADDED_BY != null ? schRoadDetails.ADDED_BY : "",*/
                                    schRoadDetails.NQM_LAST_INSP_DATE + " (" + schRoadDetails.NQM_INSP.ToString() + ")",
                                    schRoadDetails.SCHEME,
                                    /*schRoadDetails.SQM_LAST_INSP_DATE + " (" + schRoadDetails.SQM_INSP.ToString() + ")",*/
                                    schRoadDetails.TECHNOLOGY==null? "-":schRoadDetails.TECHNOLOGY.Trim().Remove(schRoadDetails.TECHNOLOGY.Length-1,1),
                                    schRoadDetails.colorFlag,
                        }
                }).ToArray();
            }
            catch (Exception)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion

        #region Monitor Proficiency Test Score

        public Array GetProficiencyTestScoreList(string filters, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                var lstExecution = (from item in dbContext.QM_PROFICIENCY_TEST_MASTER
                                    select new
                                    {
                                        item.EXAM_ID,
                                        item.DATE_OF_EXAM,
                                        item.INSTITUTE_NAME,
                                        item.MONITOR_TYPE,
                                        item.DATA_ENTRY_DATE,
                                        item.UPLOADED_FILE_NAME,
                                        item.IS_FINALIZED,
                                        item.STATE_CODE
                                    }).Distinct().ToList();

                totalRecords = lstExecution.Count();

                lstExecution = lstExecution.OrderByDescending(m => m.EXAM_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                return lstExecution.Select(m => new
                {
                    id = m.EXAM_ID.ToString(),
                    cell = new[]
                    {
                        m.EXAM_ID.ToString(),
                        m.DATE_OF_EXAM.ToShortDateString(),
                        m.INSTITUTE_NAME,
                        m.MONITOR_TYPE == "I" ? "NQM" : "SQM",
                        m.MONITOR_TYPE == "I" ? "--" : dbContext.MASTER_STATE.Where(x => x.MAST_STATE_CODE == m.STATE_CODE).Select(y => y.MAST_STATE_NAME).FirstOrDefault(),
                        m.DATA_ENTRY_DATE.ToShortDateString(),
                        "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-zoomin' title='Click here to view' onClick ='ViewUploadedDataDetails(\"" + m.EXAM_ID + "\");' ></span></td></tr></table></center>",
                        m.IS_FINALIZED == "Y"
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked'></span></td></tr></table></center>"
                        : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-trash' title='Click here to delete' onClick ='DeleteScore(\"" + m.EXAM_ID + "\");' ></span></td></tr></table></center>",
                        m.IS_FINALIZED == "Y"
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked'></span></td></tr></table></center>"
                        : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-unlocked ui-align-center' title='Click here to finalize' onClick ='FinalizeScore(\"" + m.EXAM_ID + "\");' ></span></td></tr></table></center>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProficiencyTestScoreList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetProficiencyTestScoreListDetails(int examId, string filters, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            JavaScriptSerializer js = null;
            SearchJson test = new SearchJson();
            string firstName = string.Empty;

            try
            {
                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "NAME":
                                firstName = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                var lstExecution = (from item in dbContext.QM_PROFICIENCY_TEST_SCORE
                                    join monitor in dbContext.ADMIN_QUALITY_MONITORS on item.ADMIN_QM_CODE equals monitor.ADMIN_QM_CODE
                                    join interMonitor in dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE on item.ADMIN_QM_CODE equals interMonitor.ADMIN_QM_CODE into interState
                                    from inter in interState.DefaultIfEmpty()
                                    where
                                     ((firstName == string.Empty ? "%" : monitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                     (firstName == string.Empty ? "%" : monitor.ADMIN_QM_MNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                     (firstName == string.Empty ? "%" : monitor.ADMIN_QM_LNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()))
                                     && item.EXAM_ID == examId
                                    select new
                                    {
                                        item.ID,
                                        monitor.ADMIN_QM_FNAME,
                                        monitor.ADMIN_QM_MNAME,
                                        monitor.ADMIN_QM_LNAME,
                                        item.MARKS,
                                        item.EXAM_STATUS,
                                        item.EXAM_ID
                                    }).Distinct().ToList();

                totalRecords = lstExecution.Count();

                lstExecution = lstExecution.OrderBy(m => m.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "PERCENTAGE":
                                lstExecution = lstExecution.OrderBy(m => m.MARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "PERCENTAGE":
                                lstExecution = lstExecution.OrderByDescending(m => m.MARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                return lstExecution.Select(m => new
                {
                    id = m.ID.ToString(),
                    cell = new[]
                    {
                        m.ID.ToString(),
                        (m.ADMIN_QM_FNAME == null || m.ADMIN_QM_FNAME == string.Empty ? "" : m.ADMIN_QM_FNAME) + " " + (m.ADMIN_QM_MNAME == null || m.ADMIN_QM_MNAME == string.Empty ? " " : m.ADMIN_QM_MNAME) + " " + (m.ADMIN_QM_LNAME == null || m.ADMIN_QM_LNAME == string.Empty ? " " : m.ADMIN_QM_LNAME),
                        m.MARKS == null ? (m.EXAM_STATUS == "AB" ? "Absent" : m.EXAM_STATUS == "NRT" ? "Not Registered for Test" : m.EXAM_STATUS == "NA" ? "Not Applicable" : "--") : m.MARKS.ToString(),
                        dbContext.QM_PROFICIENCY_TEST_MASTER.Where(x => x.EXAM_ID == m.EXAM_ID).Select(y => y.IS_FINALIZED).FirstOrDefault() == "Y"
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked'></span></td></tr></table></center>"
                        : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-pencil' title='Click here to delete' onClick ='EditScore(\"" + m.ID + "\");' ></span></td></tr></table></center>",
                        dbContext.QM_PROFICIENCY_TEST_MASTER.Where(x => x.EXAM_ID == m.EXAM_ID).Select(y => y.IS_FINALIZED).FirstOrDefault()
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProficiencyTestScoreListDetails().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool GetUploadDetails(FormCollection formCollection, HttpPostedFileBase fileSrc, ref string message)
        {
            try
            {
                bool flag = false;
                dbContext = new PMGSYEntities();

                QM_PROFICIENCY_TEST_MASTER masterModel = new QM_PROFICIENCY_TEST_MASTER();
                string filePath = ConfigurationManager.AppSettings["PROFICIENCY_TEST_FILE_PATH"];
                masterModel.EXAM_ID = dbContext.QM_PROFICIENCY_TEST_MASTER.Any() ? (from item in dbContext.QM_PROFICIENCY_TEST_MASTER select item.EXAM_ID).Max() + 1 : 1;
                masterModel.DATE_OF_EXAM = Convert.ToDateTime(formCollection["DATE_OF_EXAM"]);
                masterModel.INSTITUTE_NAME = formCollection["INSTITUTION"] == "1" ? "IIT Bhubaneswar" : formCollection["INSTITUTION"] == "2" ? "SVNIT Surat" : formCollection["INSTITUTION"] == "3" ? "IIT BHU" : formCollection["INSTITUTION"] == "4" ? "IIT Guwahati" : "--";
                masterModel.USERID = PMGSYSession.Current.UserId;
                masterModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                masterModel.DATA_ENTRY_DATE = DateTime.Now;
                masterModel.IS_FINALIZED = "N";
                masterModel.MONITOR_TYPE = formCollection["NQM_SQM"];
                if (formCollection["NQM_SQM"] == "S")
                    masterModel.STATE_CODE = Convert.ToInt32(formCollection["STATE_CODE"]);

                string FilePath = ConfigurationManager.AppSettings["PROFICIENCY_TEST_FILE_PATH"];
                int FileYear = DateTime.Now.Year; // current year for file folder
                string monitorType = masterModel.MONITOR_TYPE == "S" ? "SQM" : "NQM";
                var monitorDirectory = Path.Combine(FilePath, monitorType);
                var YearDictionary = Path.Combine(monitorDirectory, FileYear.ToString());

                if (!Directory.Exists(YearDictionary))
                {
                    Directory.CreateDirectory(YearDictionary);
                }

                DateTime d = DateTime.Now;
                String format = "d_MMM_yyyy_HH_mm_ss";
                String currentTime = d.ToString(format);

                String FileName = masterModel.EXAM_ID + "_" + FileYear + "_" + currentTime + ".xlsx";
                fileSrc.SaveAs(System.IO.Path.Combine(YearDictionary, FileName)); // To permanently save file

                masterModel.UPLOADED_FILE_NAME = FileName;
                masterModel.UPLOADED_FILE_PATH = monitorDirectory; // path will be saved till NQM/SQM folder 
                dbContext.QM_PROFICIENCY_TEST_MASTER.Add(masterModel);
                //dbContext.SaveChanges();

                List<ProficiencyTestTemplateModel> dataList = new List<ProficiencyTestTemplateModel>();
                List<ProficiencyTestTemplateModel> adminCodeForPresentMonitor = new List<ProficiencyTestTemplateModel>();
                string filename = fileSrc.FileName;

                // To temporarily save file in PMGSY folder 
                string targetpath = HttpContext.Current.Server.MapPath("~/UploadFile/"); //Server.MapPath("~/Doc/");
                fileSrc.SaveAs(targetpath + filename);
                string pathToExcelFile = targetpath + filename;
                var connectionString = "";

                connectionString = string.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=Excel 12.0", pathToExcelFile);

                using (OleDbConnection connection = new OleDbConnection(connectionString))
                using (OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", connection))
                {
                    connection.Open();
                    using (OleDbDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            //int srno = Convert.ToInt32(reader[0]);
                            //string name = reader[1].ToString();
                            //string email = reader[2].ToString();
                            //string mnum = reader[3].ToString();
                            //int mark = Convert.ToInt32(reader[4]);
                            //string sta = reader[5].ToString().Split(' ')[0];
                            //int code = Convert.ToInt32(reader[6]);
                            //string JSHD = reader[7].ToString().Split(' ')[0];

                            /*
                             * Sr. No. = reader[0]
                             * Monitor Name  = reader[1]
                             * Email ID = reader[2]
                             * Mobile Number = reader[3].Split(' ')[0]
                             * Marks = reader[4]
                             * Monitor Status = reader[5]
                             * Admin QM Code = reader[6]
                             */



                            if (!reader.IsDBNull(5) && !reader.IsDBNull(6)) //(!reader.IsDBNull(2) && !reader.IsDBNull(3))
                            {
                                Regex re = new Regex(@"(^([0-5]?[0-9]|60)$)"); //Regex(@"(^60(\.0{1,2})?$)|(^([0-5]*([0-9])?|0)(\.[0-9]{1,2})?$)"); 
                                bool val = re.IsMatch(Convert.ToString(reader[4]));
                                int adminCode = Convert.ToInt32(reader[6]);
                                int stateCode = Convert.ToInt32(formCollection["STATE_CODE"]);
                                string monitorStatus = Convert.ToString(reader[5]).Split(' ')[0].ToUpper();
                                int marks;
                                //decimal percentage;
                                if (reader.IsDBNull(4))
                                    marks = -1;
                                else
                                    marks = Convert.ToInt32(reader[4]);


                                if (masterModel.MONITOR_TYPE == "I")
                                {
                                    if (!dbContext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_QM_CODE == adminCode && x.ADMIN_QM_TYPE == masterModel.MONITOR_TYPE).Any())
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Please upload valid file for " + monitorType + ".";
                                        return flag;
                                    }
                                    else if (!dbContext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_QM_CODE == adminCode).Any())
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Data for monitor : '" + reader[1] + "' does not exists. Please verify and upload again.";
                                        return flag;
                                    }
                                    else if (!val && monitorStatus == "P")
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Marks for monitor : '" + reader[1] + "' is wrongly entered. Marks should be between 0 to 60 (decimals not allowed). Please correct and upload the file again.";
                                        return flag;
                                    }
                                    else if (monitorStatus == "P" && marks == -1)
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Monitor Status for monitor : '" + reader[1] + "' is P(Present) but marks are not entered. Please correct and upload the file again.";
                                        return flag;
                                    }
                                    else if (monitorStatus == "" && marks != -1)
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Monitor Status for monitor : '" + reader[1] + "' is not chosen as P(Present) but marks are entered. Please correct and upload the file again.";
                                        return flag;
                                    }
                                    else
                                    {
                                        if (monitorStatus == "P")
                                        {
                                            adminCodeForPresentMonitor.Add(new ProficiencyTestTemplateModel
                                            {
                                                ADMIN_QM_CODE = Convert.ToInt32(reader[6])
                                            });
                                        }

                                        //int markN = reader.IsDBNull(2) ? -1 : Convert.ToInt32(reader[2]);

                                        //if(monitorStatus != "NA")
                                        //{
                                        dataList.Add(new ProficiencyTestTemplateModel
                                        {
                                            ADMIN_QM_CODE = Convert.ToInt32(reader[6]),
                                            MARKS = reader.IsDBNull(4) ? -1 : Convert.ToInt32(reader[4]),
                                            //PERCENTAGE = decimal.Round((markN / 60) * 100, 2),
                                            MONITOR_STATUS = Convert.ToString(reader[5]).Split(' ')[0].ToUpper()
                                        });
                                        //}

                                    }
                                }
                                else
                                {
                                    var lst = (from monitor in dbContext.ADMIN_QUALITY_MONITORS
                                               join interMonitor in dbContext.ADMIN_QUALITY_MONITORS_INTER_STATE on monitor.ADMIN_QM_CODE equals interMonitor.ADMIN_QM_CODE into interState
                                               from inter in interState.DefaultIfEmpty()
                                               where
                                                   monitor.ADMIN_QM_CODE == adminCode
                                                   && monitor.ADMIN_QM_TYPE == "S"
                                                   && (monitor.MAST_STATE_CODE == stateCode || inter.ALLOWED_STATE_CODE == stateCode || monitor.MAST_STATE_CODE_ADDR == stateCode)
                                               select new
                                               {
                                                   monitor.ADMIN_QM_CODE
                                               }).Distinct().ToList();

                                    if (lst.Count == 0)
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Uploaded file and selected state did not match !! Please select valid state.";
                                        return flag;
                                    }
                                    else if (!dbContext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_QM_CODE == adminCode && x.ADMIN_QM_TYPE == masterModel.MONITOR_TYPE).Any())
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Please upload valid file for " + monitorType + ".";
                                        return flag;
                                    }
                                    else if (!dbContext.ADMIN_QUALITY_MONITORS.Where(x => x.ADMIN_QM_CODE == adminCode).Any())
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Data for monitor : '" + reader[1] + "' does not exists. Please verify and upload again.";
                                        return flag;
                                    }
                                    else if (!val && monitorStatus == "P")
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Marks for monitor : '" + reader[1] + "' is wrongly entered. Marks should be between 0 to 60 (decimals not allowed). Please correct and upload the file again.";
                                        return flag;
                                    }
                                    else if (monitorStatus == "P" && marks == -1)
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Monitor Status for monitor : '" + reader[1] + "' is P(Present) but marks are not entered. Please correct and upload the file again.";
                                        return flag;
                                    }
                                    else if (monitorStatus == "" && marks != -1)
                                    {
                                        FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                                        if (file.Exists)
                                        {
                                            file.Delete();
                                        }

                                        flag = false;
                                        message = "Monitor Status for monitor : '" + reader[1] + "' is not chosen as P(Present) but marks are entered. Please correct and upload the file again.";
                                        return flag;
                                    }
                                    else
                                    {
                                        if (monitorStatus == "P")
                                        {
                                            adminCodeForPresentMonitor.Add(new ProficiencyTestTemplateModel
                                            {
                                                ADMIN_QM_CODE = Convert.ToInt32(reader[6])
                                            });
                                        }

                                        //int mark = reader.IsDBNull(2) ? -1 : Convert.ToInt32(reader[2]);

                                        //if(monitorStatus != "NA")
                                        //{
                                        dataList.Add(new ProficiencyTestTemplateModel
                                        {

                                            ADMIN_QM_CODE = Convert.ToInt32(reader[6]),
                                            MARKS = reader.IsDBNull(4) ? -1 : Convert.ToInt32(reader[4]),
                                            //PERCENTAGE = decimal.Round((mark / 60) * 100, 2),
                                            MONITOR_STATUS = Convert.ToString(reader[5]).Split(' ')[0].ToUpper()
                                        });
                                        //}

                                    }

                                }
                            }

                        }
                    }
                }

                if (dataList.Count == 0)
                {
                    FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                    if (file.Exists)
                    {
                        file.Delete();
                    }

                    flag = false;
                    message = "Please fill data and upload file.";
                    return flag;
                }

                DataTable uploadedDetailsDT = new DataTable();
                //Create Column
                uploadedDetailsDT.Columns.Add("AdminQmCode", typeof(int));
                uploadedDetailsDT.Columns.Add("Marks", typeof(int));
                uploadedDetailsDT.Columns.Add("Percentage", typeof(decimal));
                uploadedDetailsDT.Columns.Add("MonitorStatus", typeof(string));

                if (dataList != null)
                {
                    foreach (ProficiencyTestTemplateModel item in dataList)
                    {
                        DataRow dr = uploadedDetailsDT.NewRow();
                        decimal marks = ((decimal)(item.MARKS == null ? -1 : item.MARKS));

                        dr[0] = item.ADMIN_QM_CODE;
                        dr[1] = item.MARKS;
                        dr[2] = decimal.Round((marks / 60) * 100, 2);
                        dr[3] = item.MONITOR_STATUS;

                        uploadedDetailsDT.Rows.Add(dr);

                    }
                }

                // DataTable created to fetch Admin QM Code of monitors having monitor Status as present
                DataTable adminCodeDT = new DataTable();
                adminCodeDT.Columns.Add("AdminQmCode", typeof(int));

                if (adminCodeForPresentMonitor != null)
                {
                    foreach (ProficiencyTestTemplateModel item in adminCodeForPresentMonitor)
                    {
                        DataRow dr = adminCodeDT.NewRow();

                        dr[0] = item.ADMIN_QM_CODE;

                        adminCodeDT.Rows.Add(dr);

                    }
                }

                dbContext.SaveChanges(); // To save QM_PROFICIENCY_TEST_MASTER  

                string status = String.Empty;
                SqlConnection storeConnection = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["PMGSYConnection"].ConnectionString);
                using (SqlCommand command = storeConnection.CreateCommand())
                {
                    command.Connection = storeConnection;
                    storeConnection.Open();
                    command.CommandText = "omms.USP_QM_PROFICIENCY_TEST_SCORE";
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.Add(new SqlParameter("@EXAM_ID", SqlDbType.Int)).Value = masterModel.EXAM_ID;
                    command.Parameters.AddWithValue("@QM_CODE_MARKS_PERCENTAGES", uploadedDetailsDT).SqlDbType = SqlDbType.Structured;
                    command.Parameters.AddWithValue("@PRESENT_MONITORS_CODE", adminCodeDT).SqlDbType = SqlDbType.Structured;
                    command.Parameters.Add(new SqlParameter("@USER_ID", SqlDbType.BigInt)).Value = PMGSYSession.Current.UserId;
                    command.Parameters.Add(new SqlParameter("@IP_ADDR", SqlDbType.VarChar)).Value = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    status = command.ExecuteScalar().ToString();
                    storeConnection.Close();
                }

                if (status != "-111")
                {
                    dbContext.QM_PROFICIENCY_TEST_MASTER.Remove(dbContext.QM_PROFICIENCY_TEST_MASTER.Where(s => s.EXAM_ID == masterModel.EXAM_ID).FirstOrDefault());
                    dbContext.SaveChanges();

                    FileInfo file = new FileInfo(Path.Combine(YearDictionary, FileName));
                    if (file.Exists)
                    {
                        file.Delete();
                    }

                    flag = false;
                    message = "Data not uploaded !!";
                    return flag;
                }

                //deleting excel file from temporary folder
                if ((System.IO.File.Exists(pathToExcelFile)))
                {
                    System.IO.File.Delete(pathToExcelFile);
                }

                dbContext.SaveChanges();
                flag = true;
                return flag;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetUploadDetails");
                message = "Error.";
                return false;
            }
        }

        public bool EditProficiencyTestScore(FormCollection formCollection, out String IsValid)
        {
            int status = 0;
            var dbContext = new PMGSYEntities();
            QM_PROFICIENCY_TEST_SCORE model = new QM_PROFICIENCY_TEST_SCORE();
            QM_PROFICIENCY_TEST_SCORE editModel = new QM_PROFICIENCY_TEST_SCORE();
            int id = Convert.ToInt32(formCollection["ID"]);


            try
            {
                model = dbContext.QM_PROFICIENCY_TEST_SCORE.Where(x => x.ID == id).FirstOrDefault();
                model.EXAM_STATUS = formCollection["MONITOR_STATUS"];
                if (formCollection["MONITOR_STATUS"] == "P")
                {
                    decimal marks = formCollection["PERCENTAGE"] == null ? -1 : Convert.ToDecimal(formCollection["PERCENTAGE"]);

                    model.MARKS = Convert.ToInt32(formCollection["PERCENTAGE"]);
                    model.PERCENTAGE = decimal.Round(marks / 60 * 100, 2);//, MidpointRounding.AwayFromZero);
                }
                else
                {
                    model.MARKS = null;
                    model.PERCENTAGE = null;
                }

                model.DATE_OF_ENTRY = DateTime.Now;

                dbContext.Entry(model).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                IsValid = "Details updated successfully.";
                return true;

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditProficiencyScoreDetails");
                IsValid = "Details not updated.";
                return false;

            }

        }

        public Array GetProficiencyTestScoreListCQC(string filters, string monitorType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            JavaScriptSerializer js = null;
            SearchJson test = new SearchJson();
            string firstName = string.Empty;

            try
            {
                if (filters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<SearchJson>(filters);

                    foreach (rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "NAME":
                                firstName = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }

                var lstExecution = (from item in dbContext.QM_PROFICIENCY_TEST_MASTER
                                    join score in dbContext.QM_PROFICIENCY_TEST_SCORE on item.EXAM_ID equals score.EXAM_ID
                                    join monitor in dbContext.ADMIN_QUALITY_MONITORS on score.ADMIN_QM_CODE equals monitor.ADMIN_QM_CODE
                                    where
                                    ((firstName == string.Empty ? "%" : monitor.ADMIN_QM_FNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                    (firstName == string.Empty ? "%" : monitor.ADMIN_QM_MNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()) ||
                                    (firstName == string.Empty ? "%" : monitor.ADMIN_QM_LNAME.ToUpper()).Contains(firstName == string.Empty ? "%" : firstName.ToUpper()))
                                    && (monitorType == "A" ? "A" : item.MONITOR_TYPE) == (monitorType == "A" ? "A" : monitorType)
                                    && item.IS_FINALIZED == "Y"
                                    && score.IS_LATEST == "Y"
                                    && score.EXAM_STATUS == "P"
                                    select new
                                    {
                                        item.EXAM_ID,
                                        score.ID,
                                        monitor.ADMIN_QM_FNAME,
                                        monitor.ADMIN_QM_MNAME,
                                        monitor.ADMIN_QM_LNAME,
                                        item.MONITOR_TYPE,
                                        item.DATE_OF_EXAM,
                                        item.INSTITUTE_NAME,
                                        score.MARKS,
                                        //score.PERCENTAGE,
                                        score.CQC_REMARK
                                    }).Distinct().ToList();

                totalRecords = lstExecution.Count();

                lstExecution = lstExecution.OrderByDescending(m => m.EXAM_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "PERCENTAGE":
                                lstExecution = lstExecution.OrderBy(m => m.MARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.EXAM_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "PERCENTAGE":
                                lstExecution = lstExecution.OrderByDescending(m => m.MARKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.EXAM_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderByDescending(m => m.EXAM_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                return lstExecution.Select(m => new
                {
                    id = m.EXAM_ID.ToString(),
                    cell = new[]
                    {
                        m.INSTITUTE_NAME + " (" + m.DATE_OF_EXAM.ToShortDateString() + ")",
                        m.EXAM_ID.ToString(),
                        (m.ADMIN_QM_FNAME == null || m.ADMIN_QM_FNAME == string.Empty ? "" : m.ADMIN_QM_FNAME) + " " + (m.ADMIN_QM_MNAME == null || m.ADMIN_QM_MNAME == string.Empty ? " " : m.ADMIN_QM_MNAME) + " " + (m.ADMIN_QM_LNAME == null || m.ADMIN_QM_LNAME == string.Empty ? " " : m.ADMIN_QM_LNAME),
                        m.MONITOR_TYPE == "S" ? "SQM" : "NQM",
                        m.MARKS.ToString(),
                        m.CQC_REMARK == null || m.CQC_REMARK == string.Empty ? "--" : m.CQC_REMARK,
                         "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-pencil' title='Click here to edit score' onClick ='EditScore(\"" + m.ID + "\");' ></span></td></tr></table></center>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProficiencyTestScoreListCQC().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool EditProficiencyScoreDetails(FormCollection formCollection, out String IsValid)
        {
            int status = 0;
            var dbContext = new PMGSYEntities();
            QM_PROFICIENCY_TEST_SCORE model = new QM_PROFICIENCY_TEST_SCORE();
            QM_PROFICIENCY_TEST_SCORE editModel = new QM_PROFICIENCY_TEST_SCORE();
            int id = Convert.ToInt32(formCollection["ID"]);
            decimal marks = formCollection["PERCENTAGE"] == null ? -1 : Convert.ToDecimal(formCollection["PERCENTAGE"]);

            try
            {
                model = dbContext.QM_PROFICIENCY_TEST_SCORE.Where(x => x.ID == id).FirstOrDefault();
                model.MARKS = Convert.ToInt32(formCollection["PERCENTAGE"]);
                model.PERCENTAGE = decimal.Round(marks / 60 * 100, 2);
                model.CQC_ENTRY_DATE = DateTime.Now;
                model.CQC_REMARK = formCollection["CQC_REMARK"];
                model.CQC_USER_ID = PMGSYSession.Current.UserId;
                model.CQC_IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                dbContext.Entry(model).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                IsValid = "Details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditProficiencyScoreDetails");
                IsValid = "Details not updated.";
                return false;
            }
        }

        public bool AddProficiencyScore(FormCollection formCollection, out String IsValid)
        {
            int status = 0;
            var dbContext = new PMGSYEntities();
            QM_PROFICIENCY_TEST_SCORE model = new QM_PROFICIENCY_TEST_SCORE();


            int maxId = 0;
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.QM_PROFICIENCY_TEST_SCORE.Any())
                {
                    maxId = dbContext.QM_PROFICIENCY_TEST_SCORE.Max(s => s.ID) + 1;

                }
                else
                {
                    maxId = 1;
                }

                model.ID = maxId;
                model.EXAM_ID = Convert.ToInt32(formCollection["EXAM_ID"]);
                model.ADMIN_QM_CODE = Convert.ToInt32(formCollection["MONITOR_NAME"]);
                model.EXAM_STATUS = formCollection["MONITOR_STATUS"];
                if (model.EXAM_STATUS == "P")
                {
                    decimal marks = formCollection["PERCENTAGE"] == null ? -1 : Convert.ToDecimal(formCollection["PERCENTAGE"]);

                    model.MARKS = Convert.ToInt32(formCollection["PERCENTAGE"]);
                    model.PERCENTAGE = decimal.Round(marks / 60 * 100, 2);
                }
                else
                {
                    model.MARKS = null;
                    model.PERCENTAGE = null;
                }

                model.ENTRY_BY_USERID = PMGSYSession.Current.UserId;
                model.ENTRY_BY_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                model.DATE_OF_ENTRY = DateTime.Now;
                model.EXAM_STATUS = formCollection["MONITOR_STATUS"];
                model.IS_LATEST = "N";

                dbContext.QM_PROFICIENCY_TEST_SCORE.Add(model);
                dbContext.SaveChanges();

                IsValid = "Details added successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditProficiencyScoreDetails");
                IsValid = "Details not updated.";
                return false;
            }
        }

        #endregion

        #region Allocate Works to Technical Expert

        #region Add TE details and create user

        public Array LoadTechnicalExpertDetailsGrid(int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                var lstExecution = (from item in dbContext.MASTER_TECHNICAL_EXPERT select item).Distinct().ToList();

                totalRecords = lstExecution.Count();

                lstExecution = lstExecution.OrderByDescending(m => m.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                return lstExecution.Select(m => new
                {
                    id = m.ID.ToString(),
                    cell = new[]
                    {
                        m.ID.ToString(),
                        ((m.TECHNICAL_EXPERT_FNAME == null || m.TECHNICAL_EXPERT_FNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_FNAME) + " " + ((m.TECHNICAL_EXPERT_MNAME == null || m.TECHNICAL_EXPERT_MNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_MNAME) + " " + ((m.TECHNICAL_EXPERT_LNAME == null || m.TECHNICAL_EXPERT_LNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_LNAME),
                        m.TECHNICAL_EXPERT_PAN,
                        m.TECHNICAL_EXPERT_MOBILE.ToString(),
                        m.TECHNICAL_EXPERT_EMAIL,
                        (m.IS_ACTIVE == "N" && m.DEACTIVATION_DATE == null)
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-pencil' title='Click here to edit details' onClick ='EditTechnicalExpertDetails(" + m.ID.ToString() + ");' ></span></td></tr></table></center>"
                        : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked' ></span></td></tr></table></center>",
                        (m.IS_ACTIVE == "N" && m.DEACTIVATION_DATE == null && m.TECHNICAL_EXPERT_USER_ID == null)
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plus' title='Click here to create user' onClick ='CreateTechnicalExpertUser(" + m.ID.ToString() + ");' ></span></td></tr></table></center>"
                        : dbContext.UM_User_Master.Where(x => x.UserID == m.TECHNICAL_EXPERT_USER_ID).Select(y => y.UserName).FirstOrDefault(),
                        (m.DEACTIVATION_DATE == null)
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-close' title='Click here to deactivate' onClick ='DeactivateTechnicalExpert(" + m.ID.ToString() + ");' ></span></td></tr></table></center>"
                        : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked' ></span></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.LoadTechnicalExpertDetailsGrid()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddTechnicalExpertDetails(FormCollection formCollection, out String IsValid)
        {
            int status = 0;
            PMGSYEntities dbContext = new PMGSYEntities();
            MASTER_TECHNICAL_EXPERT model = new MASTER_TECHNICAL_EXPERT();


            status = dbContext.SaveChanges();
            try
            {
                using (var scope = new TransactionScope())
                {
                    Int32 expertId = dbContext.MASTER_TECHNICAL_EXPERT.Any() ? (from item in dbContext.MASTER_TECHNICAL_EXPERT select item.ID).Max() + 1 : 1;
                    model.ID = expertId;
                    model.TECHNICAL_EXPERT_FNAME = formCollection["TECHNICAL_EXPERT_FNAME"];
                    model.TECHNICAL_EXPERT_MNAME = formCollection["TECHNICAL_EXPERT_MNAME"];
                    model.TECHNICAL_EXPERT_LNAME = formCollection["TECHNICAL_EXPERT_LNAME"];
                    model.TECHNICAL_EXPERT_PAN = formCollection["PAN_NUMBER"];
                    model.TECHNICAL_EXPERT_MOBILE = formCollection["TECHNICAL_EXPERT_MOBILE"];
                    model.TECHNICAL_EXPERT_EMAIL = formCollection["TECHNICAL_EXPERT_EMAIL"];
                    model.IS_ACTIVE = "N";
                    model.TE_CREATED_BY = PMGSYSession.Current.UserId;
                    model.CREATION_DATE = DateTime.Now;

                    dbContext.MASTER_TECHNICAL_EXPERT.Add(model);

                    status = dbContext.SaveChanges();

                    scope.Complete();
                }
                if (status > 0)
                {
                    IsValid = "Technical Expert details saved successfully.";
                    return true;
                }
                else
                {
                    IsValid = "Technical Expert details not saved.";
                    return false;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AddTechnicalExpertDetails");
                IsValid = "Technical Expert details not saved.";
                return false;

            }

        }

        public bool UpdateTechnicalExpertDetails(FormCollection formCollection, out String IsValid)
        {
            int status = 0;
            PMGSYEntities dbContext = new PMGSYEntities();
            MASTER_TECHNICAL_EXPERT model = new MASTER_TECHNICAL_EXPERT();
            dbContext = new PMGSYEntities();
            int id = Convert.ToInt32(formCollection["ID"]);

            model = dbContext.MASTER_TECHNICAL_EXPERT.Where(x => x.ID == id).FirstOrDefault();

            status = dbContext.SaveChanges();
            try
            {
                using (var scope = new TransactionScope())
                {
                    model.TECHNICAL_EXPERT_PAN = formCollection["PAN_NUMBER"];
                    model.TECHNICAL_EXPERT_MOBILE = formCollection["TECHNICAL_EXPERT_MOBILE"];
                    model.TECHNICAL_EXPERT_EMAIL = formCollection["TECHNICAL_EXPERT_EMAIL"];
                    model.TE_CREATED_BY = PMGSYSession.Current.UserId;
                    model.CREATION_DATE = DateTime.Now;

                    dbContext.Entry(model).State = System.Data.Entity.EntityState.Modified;

                    status = dbContext.SaveChanges();

                    scope.Complete();
                }
                if (status > 0)
                {
                    IsValid = "Technical Expert details updated successfully.";
                    return true;
                }
                else
                {
                    IsValid = "Technical Expert details not updated.";
                    return false;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.updatTechnicalExpertDetails");
                IsValid = "Technical Expert details not updated.";
                return false;

            }

        }

        public bool CreateTechnicalExpertUserDAL(int technicalExpertId)
        {
            UM_User_Master obj_User_Master = new UM_User_Master();
            MASTER_TECHNICAL_EXPERT teModel = new MASTER_TECHNICAL_EXPERT();
            var context = new PMGSYEntities();

            try
            {
                teModel = context.MASTER_TECHNICAL_EXPERT.Where(x => x.ID == technicalExpertId).FirstOrDefault();
                int countSameUser = context.MASTER_TECHNICAL_EXPERT.Where(x => x.TECHNICAL_EXPERT_FNAME == teModel.TECHNICAL_EXPERT_FNAME && x.TECHNICAL_EXPERT_USER_ID != null).Count();

                // Create new user details in UM_USER_MASTER
                obj_User_Master.UserID = ((from userid in context.UM_User_Master select userid.UserID).Max()) + 1;
                if (countSameUser == 0)
                    obj_User_Master.UserName = "te" + teModel.TECHNICAL_EXPERT_FNAME;
                else
                    obj_User_Master.UserName = "te" + teModel.TECHNICAL_EXPERT_FNAME + (countSameUser);
                obj_User_Master.LevelID = 2;
                obj_User_Master.DefaultRoleID = 81;
                obj_User_Master.CreatedBy = PMGSYSession.Current.UserId;
                obj_User_Master.CreationDate = DateTime.Now;
                obj_User_Master.IsActive = true;
                obj_User_Master.IsFirstLogin = true;
                obj_User_Master.IsLocked = false;
                obj_User_Master.Password = new Login().EncodePassword(obj_User_Master.UserName);
                obj_User_Master.FailedPasswordAttempts = 0;
                obj_User_Master.FailedPasswordAnswerAttempts = 0;
                obj_User_Master.PreferedLanguageID = 1;
                obj_User_Master.PreferedCssID = 1;
                obj_User_Master.MaxConcurrentLoginsAllowed = 10;
                obj_User_Master.Remarks = "User Created to review works";


                //Assign userRoleMapping details
                UM_User_Role_Mapping userRoleMapping = new UM_User_Role_Mapping();
                userRoleMapping.ID = ((from uurm in context.UM_User_Role_Mapping select uurm.ID).Max()) + 1;
                userRoleMapping.UserId = obj_User_Master.UserID;
                userRoleMapping.RoleId = 81;


                //Assign Security Question Answer
                UM_Security_Question_Answer secQuestionAnswer = new UM_Security_Question_Answer();
                secQuestionAnswer.UserID = obj_User_Master.UserID;
                secQuestionAnswer.PasswordQuestionID = 44;              //Default Question is What is your name?
                secQuestionAnswer.Answer = obj_User_Master.UserName;    //Default Answer is value of UserName
                secQuestionAnswer.SetDate = DateTime.Now;
                secQuestionAnswer.LastUpdatedDate = DateTime.Now;

                // Add User Id in MASTER_TECHNICAL_EXPERT
                teModel.TECHNICAL_EXPERT_USER_ID = obj_User_Master.UserID;
                teModel.IS_ACTIVE = "Y";
                teModel.ACTIVATION_DATE = DateTime.Now;


                //Add all entities
                context.UM_User_Role_Mapping.Add(userRoleMapping);
                context.UM_User_Master.Add(obj_User_Master);
                context.UM_Security_Question_Answer.Add(secQuestionAnswer);
                context.Entry(teModel).State = System.Data.Entity.EntityState.Modified;
                context.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.CreateTechnicalExpertUserDAL()");
                return false;
            }
            finally
            {
                if (context != null)
                    context.Dispose();
            }
        }

        #endregion

        #region Allocate TE at CQC

        //Chnaged By Hrishikesh To "download eform and Test Report For Allocate TechnicalExperts Menu in cqc login" -- 22-06-2023
        public Array QMInspectionDetailsAllocateTechExpertDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int stateCode, int monitorCode, int fromMonth, int fromYear, int toMonth, int toYear, string qmType, int schemeType, string roadStatus, string roadOrBridge, string gradeType, out List<int> allocatedWorksObservationIdsList)
        {
            dbContext = new PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();
            //List<qm_inspection_list_Result> submitedReportList = new List<qm_inspection_list_Result>();
            allocatedWorksObservationIdsList = new List<int>();

            Int32 ImageCount = 0;

            try
            {
                //allocatedWorksObservationIdsList = dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(x => x.TECHNICAL_EXPERT_ID != null).Select(y => y.QM_OBSERVATION_ID).ToList();
                allocatedWorksObservationIdsList = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.TECHNICAL_EXPERT_IS_ASSIGNED == "Y").Select(y => y.OBSERVATION_ID).ToList();

                stateCode = PMGSYSession.Current.StateCode > 0 ? PMGSYSession.Current.StateCode : stateCode;
                ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());

                scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, "0").ToList<qm_inspection_list_Result>();

                totalRecords = scheduleItemList.Count();

                return scheduleItemList.Select(schRoadDetails => new
                {
                    id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                    cell = new[] {
                                schRoadDetails.MONITOR_NAME,
                                schRoadDetails.STATE_NAME,
                                schRoadDetails.DISTRICT_NAME,
                                schRoadDetails.BLOCK_NAME,
                                    schRoadDetails.IMS_ROAD_NAME,
                                schRoadDetails.IMS_PACKAGE_ID,


                                schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                    schRoadDetails.PMGSY_SCHEME,
                                    schRoadDetails.IMS_ISCOMPLETED,
                                schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P")?schRoadDetails.IMS_PAV_LENGTH.ToString():schRoadDetails.IMS_BRIDGE_LENGTH.ToString(),

                                schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                schRoadDetails.OVERALL_GRADE,
                                (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                    ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                    :   "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",  //"<a href='#' title='Click here to upload report' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",

                                    "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                    schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                    //--------------------------------------------------------------------
                                    // Added by Srishti on 10-04-2023
                                (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.TECHNICAL_EXPERT_IS_ASSIGNED  == "Y").Any())
                                ? dbContext.MASTER_TECHNICAL_EXPERT.Where(x => x.ID == (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(y => y.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Select(z => z.TECHNICAL_EXPERT_ID).FirstOrDefault())).Select(m => m.TECHNICAL_EXPERT_FNAME).FirstOrDefault() + " "
                                + dbContext.MASTER_TECHNICAL_EXPERT.Where(x => x.ID == (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(y => y.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Select(z => z.TECHNICAL_EXPERT_ID).FirstOrDefault())).Select(m => m.TECHNICAL_EXPERT_MNAME).FirstOrDefault() + " "
                                + dbContext.MASTER_TECHNICAL_EXPERT.Where(x => x.ID == (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(y => y.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Select(z => z.TECHNICAL_EXPERT_ID).FirstOrDefault())).Select(m => m.TECHNICAL_EXPERT_LNAME).FirstOrDefault()
                                : "--",

                                // Added by Srishti on 10-04-2023
                                (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.TECHNICAL_EXPERT_IS_ASSIGNED == "Y" && x.IS_FINALIZED_BY_CQC != "Y").Any())
                                 ? "<a href='#' title='Click here to finalize details' class='ui-icon ui-icon-circle-minus ui-align-center' onClick='RemoveTechnicalExpert(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'></a>"
                                 :   "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",  //Remove technical expert untill finalize

                                ( dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.TECHNICAL_EXPERT_IS_ASSIGNED == "Y" && x.IS_FINALIZED_BY_CQC != "Y" && x.FORWARD_STATUS == "C").Any())
                                 ? "<input type='checkbox' class='finalizeCheckBox' >"
                                 : "--",    //Once Technical expert is assigned to inspection, CQC will finalize and Forward to Technical Expert 

                               
                                 //(/*PMGSYSession.Current.RoleCode == 9 &&*/ dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.TECHNICAL_EXPERT_IS_ASSIGNED == "Y" && x.IS_FINALIZED_BY_CQC != "Y").Any())
                                 //? "<a href='#' title='Click here to finalize details' class='ui-icon ui-icon-unlocked ui-align-center' onClick='FinalizeTechnicalExpert(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'></a>"
                                 //:   "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",  //Once Technical expert is assigned to inspection, CQC will finalize and Forward to Technical Expert 

                                 (/*PMGSYSession.Current.RoleCode == 9 &&*/ dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS == "C" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y").Any())
                                 ?
                                   "<a href='#' title='Click here to forward to NQM' class='ui-icon ui-icon-circle-arrow-e ui-align-center' onClick='ForwardToNQM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'></a>"
                                 :
                                    (/*PMGSYSession.Current.RoleCode == 9 &&*/ dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && (x.FORWARD_STATUS == "N" || x.FORWARD_STATUS == "F") && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y").Any())
                                    ?
                                      "<a href='#' class='ui-icon ui-icon-check ui-align-center'>"
                                    :
                                      "--",  //Once Technical expert has added remark and forwarded to CQC, CQC can forward it to NQM

                                  (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x=> x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && (x.IS_REVIEWED_BY_TECHNICAL_EXPERT=="Y" || x.IS_REVIEWED_BY_NQM == "Y"))).Any()
                                ? "<a href='#' title='Click here to view Remarks' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ViewTEQMRemark(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$V"  +"\"); return false;'>View</a>"
                                : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",  //CQC can view remarks of inspections where Technical expert has reviwed inpection(STATUS=="C" ) and forwarded to CQC
                                                                                                  //OR NQM has replied to remark (STATUS=="F") and forwarded to CQC
                                    
                                  //added By Hrishikesh To "download eform and Test Report For TechnicalExperts Logins" -- 22-06-2023
                                    ((schRoadDetails.EFORM_STATUS=="3") ?   "<a href='#' title='Click here to view e-Form combined part-1,part-2 pdf'  onClick='viewCombinedPart_1_2_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),

                                    ( ((schRoadDetails.TR_UPLOAD_STATUS=="Y"))? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),



                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                allocatedWorksObservationIdsList = null;
                ErrorLog.LogError(ex, "QMInspectionDetailsAllocateTechExpertDAL()");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AssignTechExpertDAL(int techExpertID, int[] submitarray, out string isValidMsg)
        {
            int status = 0;
            PMGSYEntities dbContext = new PMGSYEntities();
            QUALITY_QM_ASSIGN_TE_MASTER editModel;
            QUALITY_QM_ASSIGN_TE_MASTER addModel;
            dbContext = new PMGSYEntities();

            try
            {
                using (var scope = new TransactionScope())
                {
                    foreach (var item in submitarray)
                    {
                        if (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == item && x.TECHNICAL_EXPERT_IS_ASSIGNED == "Y").Any())
                        { }
                        else if (dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == item && x.TECHNICAL_EXPERT_IS_ASSIGNED == "N").Any())
                        {
                            editModel = new QUALITY_QM_ASSIGN_TE_MASTER();

                            editModel = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == item).FirstOrDefault();

                            editModel.TECHNICAL_EXPERT_ID = techExpertID;
                            editModel.TECHNICAL_EXPERT_ASSIGNED_BY = PMGSYSession.Current.UserId;
                            editModel.TECHNICAL_EXPERT_ASSIGNED_IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            editModel.TECHNICAL_EXPERT_ASSIGN_DATE = DateTime.Now;
                            editModel.TECHNICAL_EXPERT_IS_ASSIGNED = "Y";
                            editModel.FORWARD_STATUS = "C";
                            editModel.IS_FINALIZED_BY_CQC = "N";

                            dbContext.Entry(editModel).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                        else
                        {
                            addModel = new QUALITY_QM_ASSIGN_TE_MASTER();

                            addModel.TE_MASTER_ID = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Any() ? (from details in dbContext.QUALITY_QM_ASSIGN_TE_MASTER select details.TE_MASTER_ID).Max() + 1 : 1;
                            addModel.OBSERVATION_ID = item;
                            addModel.ADMIN_SCHEDULE_CODE = (int)dbContext.QUALITY_QM_OBSERVATION_MASTER.Where(x => x.QM_OBSERVATION_ID == item).Select(y => y.ADMIN_SCHEDULE_CODE).FirstOrDefault();
                            addModel.TECHNICAL_EXPERT_ID = techExpertID;
                            addModel.TECHNICAL_EXPERT_ASSIGNED_BY = PMGSYSession.Current.UserId;
                            addModel.TECHNICAL_EXPERT_ASSIGNED_IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            addModel.TECHNICAL_EXPERT_ASSIGN_DATE = DateTime.Now;
                            addModel.TECHNICAL_EXPERT_IS_ASSIGNED = "Y";
                            addModel.FORWARD_STATUS = "C";
                            addModel.IS_FINALIZED_BY_CQC = "N";

                            dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Add(addModel);
                            dbContext.SaveChanges();
                        }
                    }

                    status = 1;

                    scope.Complete();
                }
                if (status > 0)
                {
                    isValidMsg = "Technical Expert assigned successfully.";
                    return true;
                }
                else
                {
                    isValidMsg = "Technical Expert cannot be assigned.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AssignTechExpertDAL");
                isValidMsg = "Technical Expert cannot be assigned.";
                return false;
            }
        }

        public bool RemoveTechnicalExpertDAL(int observationId, out string isValidMsg)
        {
            int status = 0;
            PMGSYEntities dbContext = new PMGSYEntities();
            //QUALITY_INSPECTION_REPORT_FILE model = new QUALITY_INSPECTION_REPORT_FILE();
            QUALITY_QM_ASSIGN_TE_MASTER model = new QUALITY_QM_ASSIGN_TE_MASTER();

            try
            {
                using (var scope = new TransactionScope())
                {

                    model = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == observationId).FirstOrDefault();

                    model.TECHNICAL_EXPERT_IS_ASSIGNED = "N";
                    model.TECHNICAL_EXPERT_DEASSIGNMENT_DATE = DateTime.Now;

                    dbContext.Entry(model).State = System.Data.Entity.EntityState.Modified;


                    status = dbContext.SaveChanges();

                    scope.Complete();
                }
                if (status > 0)
                {
                    isValidMsg = "Technical Expert removed successfully.";
                    return true;
                }
                else
                {
                    isValidMsg = "Technical Expert cannot be removed.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.RemoveTechnicalExpertDAL");
                isValidMsg = "Technical Expert cannot be removed.";
                return false;
            }
        }


        public bool FinalizeTechnicalExpertDAL(string[] arrWorksToFinalize, out string isValidMsg)
        {
            int status = 0;
            PMGSYEntities dbContext = new PMGSYEntities();
            //QUALITY_INSPECTION_REPORT_FILE model = new QUALITY_INSPECTION_REPORT_FILE();


            try
            {
                using (var scope = new TransactionScope())
                {
                    foreach (var item in arrWorksToFinalize)
                    {
                        QUALITY_QM_ASSIGN_TE_MASTER model = new QUALITY_QM_ASSIGN_TE_MASTER();

                        int observationId = Convert.ToInt32(item);

                        model = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == observationId).FirstOrDefault();

                        model.FORWARD_STATUS = "T";  //T for TechnicalExpert
                        model.IS_FINALIZED_BY_CQC = "Y";
                        model.CQC_FINALIZATION_DATE = DateTime.Now;

                        dbContext.Entry(model).State = System.Data.Entity.EntityState.Modified;
                    }

                    status = dbContext.SaveChanges();

                    scope.Complete();
                }
                if (status > 0)
                {
                    isValidMsg = "Technical Expert assigned successfully.";
                    return true;
                }
                else
                {
                    isValidMsg = "Technical Expert cannot be assigned.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AssignTechExpertDAL");
                isValidMsg = "Technical Expert cannot be assigned.";
                return false;
            }
        }

        public TEQMFillObservationModel TEQMObservationDetailsDAL(int obsId)
        {
            PMGSYEntities dbContext = new Models.PMGSYEntities();

            try
            {
                QUALITY_QM_OBSERVATION_MASTER qmObservationMaster = dbContext.QUALITY_QM_OBSERVATION_MASTER.Find(obsId);
                TEQMFillObservationModel fillObservationModel = new TEQMFillObservationModel();
                //Get Road Status
                var roadDetails = (from isp in dbContext.IMS_SANCTIONED_PROJECTS
                                   where isp.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                   select isp).First();

                //Default Road Status, as in IMS_SANCTIONED_PROJECTS
                //string roadStatus = roadDetails.IMS_ISCOMPLETED;
                string roadStatus = qmObservationMaster.QM_ROAD_STATUS;

                var scheduleDetails = (from qqs in dbContext.QUALITY_QM_SCHEDULE
                                       where qqs.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE
                                       select qqs).FirstOrDefault();

                fillObservationModel.MONITOR_NAME = Convert.ToString(dbContext.ADMIN_QUALITY_MONITORS.Where(m => m.ADMIN_QM_CODE == scheduleDetails.ADMIN_QM_CODE)
                    .Select(m => (m.ADMIN_QM_LNAME == null ? "" : m.ADMIN_QM_LNAME) + " " + m.ADMIN_QM_FNAME + " " + (m.ADMIN_QM_MNAME == null ? "" : m.ADMIN_QM_MNAME)).FirstOrDefault());

                List<qm_observation_grading_detail_Result> itemList = new List<qm_observation_grading_detail_Result>();
                itemList = dbContext.qm_observation_grading_detail(obsId, "N").ToList<qm_observation_grading_detail_Result>();
                List<TE_QM_OBSERVATION_GRADING_DETAIL> teObsItemList = new List<TE_QM_OBSERVATION_GRADING_DETAIL>();

                foreach (qm_observation_grading_detail_Result item in itemList)
                {
                    TE_QM_OBSERVATION_GRADING_DETAIL modelItem = new TE_QM_OBSERVATION_GRADING_DETAIL();
                    if (item != null)
                    {
                        modelItem.MAST_ITEM_NO = item.MAST_ITEM_NO;
                        modelItem.MAST_ITEM_CODE = item.MAST_ITEM_CODE;
                        modelItem.MAST_SUB_ITEM_CODE = item.MAST_SUB_ITEM_CODE;
                        modelItem.MAST_ITEM_NAME = item.MAST_ITEM_NAME;
                        modelItem.MAST_GRADE_CODE = item.MAST_GRADE_CODE;
                        modelItem.ASSIGNED_GRADE_CODE = item.ASSIGNED_GRADE_CODE;
                        modelItem.MAST_GRADE_NAME = item.MAST_GRADE_NAME;
                        modelItem.NO_OF_ITEM = item.NO_OF_ITEM;
                        modelItem.NO_OF_SUB_ITEM = item.NO_OF_SUB_ITEM;
                        modelItem.REMARKS = item.REMARKS;
                        modelItem.TEREMARKS = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.MAST_ITEM_NO && x.TECH_EXPERT_REMARK != null).Any() ? dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.MAST_ITEM_NO && x.TECH_EXPERT_REMARK != null).Select(x => x.TECH_EXPERT_REMARK).FirstOrDefault() : String.Empty;
                        modelItem.NQMREMARKS = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.MAST_ITEM_NO && x.NQM_REMARK != null).Any() ? dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.MAST_ITEM_NO && x.NQM_REMARK != null).Select(x => x.NQM_REMARK).FirstOrDefault() : String.Empty;

                        teObsItemList.Add(modelItem);
                    }



                }
                fillObservationModel.GRADE_DETAILS_LIST = teObsItemList;
                fillObservationModel.GENERALREMARKS = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == obsId).Any() ? dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == obsId).Select(x => x.GENERAL_OBSERVATION).FirstOrDefault() : null;

                //fillObservationModel.GRADE_DETAILS_LIST = itemList;
                fillObservationModel.MAX_MAIN_ITEM_COUNT = (from list in itemList select list.MAST_ITEM_CODE).Max();

                fillObservationModel.SCHEDULE_MONTH_YEAR = new CommonFunctions().getMonthText(Convert.ToInt16(scheduleDetails.ADMIN_IM_MONTH)) + " " + scheduleDetails.ADMIN_IM_YEAR.ToString();
                fillObservationModel.ADMIN_SCHEDULE_CODE = Convert.ToInt32(qmObservationMaster.ADMIN_SCHEDULE_CODE);
                fillObservationModel.IMS_PR_ROAD_CODE = qmObservationMaster.IMS_PR_ROAD_CODE;
                fillObservationModel.FROM_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_START_CHAINAGE;
                fillObservationModel.TO_ROAD_LENGTH = qmObservationMaster.QM_INSPECTED_END_CHAINAGE;

                //To Show actual inspection date entered by Monitor in case of uploading through web
                string uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");

                string device_flag = dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault() == null ? "W" : dbContext.QUALITY_QM_SCHEDULE_DETAILS.Where(x => x.ADMIN_SCHEDULE_CODE == qmObservationMaster.ADMIN_SCHEDULE_CODE && x.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE).FirstOrDefault().DEVICE_FLAG;

                if (device_flag.Equals("W") || device_flag.Equals("N"))
                {
                    uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                }
                else
                {
                    if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).Any())
                    {
                        if (string.IsNullOrEmpty(Convert.ToString(dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE).FirstOrDefault())))
                        {
                            uploadDate = qmObservationMaster.QM_INSPECTION_DATE.ToString("dd-MMM-yyyy");
                        }
                        else
                        {
                            uploadDate = dbContext.QUALITY_QM_INSPECTION_FILE.Where(x => x.QM_OBSERVATION_ID == obsId).OrderBy(x => x.QM_FILE_ID).Select(x => x.QM_FILE_UPLOAD_DATE.Value).FirstOrDefault().ToString("dd-MMM-yyyy");
                        }
                    }
                }
                fillObservationModel.QM_INSPECTION_DATE = uploadDate;
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;

                //-----***************************************************
                fillObservationModel.IMS_ISCOMPLETED = roadStatus;
                if (roadStatus.Equals("C") || roadStatus.Equals("M"))
                {
                    var execMonthlyProgress = (from erms in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                               where erms.IMS_PR_ROAD_CODE == qmObservationMaster.IMS_PR_ROAD_CODE
                                               && erms.EXEC_ISCOMPLETED == "C"
                                               select erms).FirstOrDefault();

                    if (execMonthlyProgress != null)
                    {
                        fillObservationModel.COMPLETION_DATE = DateTime.Parse(execMonthlyProgress.EXEC_COMPLETION_DATE.ToString()).ToString("dd-MMM-yyyy");
                    }
                    else
                    {
                        fillObservationModel.COMPLETION_DATE = "--";
                    }
                }
                else
                {
                    fillObservationModel.COMPLETION_DATE = "--";
                }
                //-----***************************************************
                // Bridge Inspections
                if (roadDetails.IMS_PROPOSAL_TYPE.ToUpper().Equals("L"))
                {
                    fillObservationModel.IMS_BRIDGE_NAME = roadDetails.IMS_BRIDGE_NAME;
                    fillObservationModel.IMS_BRIDGE_LENGTH = roadDetails.IMS_BRIDGE_LENGTH;
                }
                fillObservationModel.IMS_PROPOSAL_TYPE = roadDetails.IMS_PROPOSAL_TYPE;

                fillObservationModel.STATE_NAME = roadDetails.MASTER_STATE.MAST_STATE_NAME;
                fillObservationModel.DISTRICT_NAME = roadDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME;
                fillObservationModel.IMS_PACKAGE_ID = roadDetails.IMS_PACKAGE_ID;
                fillObservationModel.IMS_YEAR = roadDetails.IMS_YEAR + "-" + (roadDetails.IMS_YEAR + 1);
                fillObservationModel.IMS_PAV_LENGTH = roadDetails.IMS_PAV_LENGTH;
                fillObservationModel.IMS_ROAD_NAME = roadDetails.IMS_ROAD_NAME;

                // If latlong for any of the corresponding Images are available then only show Google Map, so setting flag here
                if (dbContext.QUALITY_QM_INSPECTION_FILE.Where(c => c.QM_OBSERVATION_ID == qmObservationMaster.QM_OBSERVATION_ID && (c.QM_LATITUDE != null || c.QM_LONGITUDE != null)).Select(c => c.QM_FILE_ID).Any())
                    fillObservationModel.IsLatLongAvailable = true;
                else
                    fillObservationModel.IsLatLongAvailable = false;

                return fillObservationModel;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.TEQMObservationDetailsDAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Add remark by TE 
        // Bhushan
        //Chnaged By Hrishikesh To "download eform and Test Report For TechnicalExperts Logins" -- 22-06-2023
        public Array QMInspectionDetailsTechExpertReviewDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                           int stateCode, int monitorCode, int fromMonth, int fromYear,
                                           int toMonth, int toYear, string qmType, int schemeType, string roadStatus, string roadOrBridge, string gradeType)
        {
            dbContext = new PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            List<qm_inspection_list_Result> scheduleItemList = new List<qm_inspection_list_Result>();
            List<qm_inspection_list_Result> submitedReportList = new List<qm_inspection_list_Result>();
            List<QUALITY_QM_TE_REVIEW_REMARKS_LIST_Result> teReviewList = new List<QUALITY_QM_TE_REVIEW_REMARKS_LIST_Result>();

            Int32 ImageCount = 0;

            try
            {

                stateCode = PMGSYSession.Current.StateCode > 0 ? PMGSYSession.Current.StateCode : stateCode;
                ImageCount = Convert.ToInt32(dbContext.ADMIN_MODULE_CONFIGURATION.Where(c => c.Parameter == "SQM_MAX_IMAGE_CNT").Select(c => c.Value).First());

                if (PMGSYSession.Current.RoleCode == 81)
                {
                    int? techexpertId = dbContext.MASTER_TECHNICAL_EXPERT.Where(x => x.TECHNICAL_EXPERT_USER_ID == PMGSYSession.Current.UserId).Select(x => x.ID).FirstOrDefault();

                    teReviewList = dbContext.QUALITY_QM_TE_REVIEW_REMARKS_LIST(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, "0", techexpertId).ToList<QUALITY_QM_TE_REVIEW_REMARKS_LIST_Result>();

                    totalRecords = teReviewList.Count();

                    return teReviewList.Select(schRoadDetails => new
                    {
                        id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                        cell = new[] {
                                schRoadDetails.MONITOR_NAME,
                                schRoadDetails.STATE_NAME,
                                schRoadDetails.DISTRICT_NAME,
                                schRoadDetails.BLOCK_NAME,
                                schRoadDetails.IMS_ROAD_NAME,
                                schRoadDetails.IMS_PACKAGE_ID,
                                schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                schRoadDetails.PMGSY_SCHEME,
                                schRoadDetails.IMS_ISCOMPLETED,
                                schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P")?schRoadDetails.IMS_PAV_LENGTH.ToString():schRoadDetails.IMS_BRIDGE_LENGTH.ToString(),
                                schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                schRoadDetails.OVERALL_GRADE,
                                (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                    ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                    :   "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                    "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                    schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                     
                                    //Below condition added to allow QM to send Technical expert review to cqc by adding reply
                                    //If RoleCode=79(Technical Expert) , STATUS=="T"(T="Forwarded to Technical Expert by CQC")   . 'Add Reply' button will be available to Tech Expert ,if the allocation of tech expert is finalized by CQC.
                                    //After successfull Submission of Remarks by Technical Expert i.e. IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" , '+' icon will be changed to 'Zoom-icon' and Remarks will be available for View.
                                    
                                    //If RoleCode=6(NQM) , STATUS=="N"(N="Forwarded to NQM by CQC")  ,IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"(Y=Terchnical expert submitted remarks), . If the Review is submitted by Tech Expert and it is forwarded to NQM by CQC , then 'Add Reply' button will be available to NQM.
                                    //After successfull Submission of Remarks by NQM i.e.IS_REVIEWED_BY_NQM == "Y" (Y=NQM submitted remarks) ,'+' icon will be changed to 'Zoom-icon' and it will be available for View.

                                    //Add , Edit,View
                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()
                                    ?
                                        PMGSYSession.Current.RoleCode==6 //NQM
                                        ?
                                           ( dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="N" && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM != "Y").Any()
                                            ?
                                               dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && (x.NQM_REMARK != "" && x.NQM_REMARK != null)).Any() ?"<a href='#' title='Click here to Edit Remarks' class='ui-icon ui-icon-pencil ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$E" +"\"); return false;'>Edit Remarks</a>" : "<a href='#' title='Click here to Add Remarks' class='ui-icon ui-icon-plus ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"$A"+"\"); return false;'>Add Remarks</a>"
                                            :
                                                //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")
                                                //View Section
                                                dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM=="Y").Any()
                                                ?
                                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x=>x.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID ).Any() ? "<a href='#' title='Click here to View Remarks' class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$V" +"\"); return false;'>" : "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                                                :
                                                    "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>")
                                        :
                                            PMGSYSession.Current.RoleCode==81 //TE
                                            ?
                                                ( dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="T" && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT != "Y").Any()
                                                ?
                                                    dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && ( (x.TECH_EXPERT_REMARK != null && x.TECH_EXPERT_REMARK != "")|| (x.QUALITY_QM_ASSIGN_TE_MASTER.GENERAL_OBSERVATION != null && x.QUALITY_QM_ASSIGN_TE_MASTER.GENERAL_OBSERVATION != "") )).Any() ?"<a href='#' title='Click here to Edit Remarks' class='ui-icon ui-icon-pencil ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$E" +"\"); return false;'>Edit Remarks</a>" : "<a href='#' title='Click here to Add Remarks' class='ui-icon ui-icon-plus ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$A" +"\"); return false;'>Add Remarks</a>"
                                                :
                                                   //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")
                                                   //View Section
                                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT=="Y").Any()
                                                    ?
                                                        dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x=>x.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID ).Any() ? "<a href='#' title='Click here to View Remarks' class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$V" +"\"); return false;'>" : "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                                                    :
                                                        "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>")
                                            :
                                            "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                     :
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" ,

                           
                              

                                    //Forward to CQC
                                    //If RoleCode=79(Technical Expert) , STATUS=="T"(T="Forwarded to Technical Expert by CQC")  ,IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"(Y=Terchnical expert submitted remarks) . If the Review is submitted by Tech Expert , then Tech Expert can forward it to CQC.After Forwrding to CQC by Tech Expert , then Status="C"
                                    //If RoleCode=6(NQM) , STATUS=="N"(N="Forwarded to NQM by CQC")  ,IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"(Y=Terchnical expert submitted remarks) && x.IS_REVIEWED_BY_NQM == "Y" (Y=NQM submitted remarks)  . If the Review is submitted by both Tech Expert and NQM , then NQM can forward it to CQC . After Forwrding to CQC by NQM , then Status="F"
                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()
                                    ?
                                        PMGSYSession.Current.RoleCode==6 //NQM
                                        ?
                                            dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="N" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM != "Y" ).Any()
                                            ?
                                                dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && (x.NQM_REMARK != "" && x.NQM_REMARK != null && x.MAST_ITEM_NUMBER != 52)).Any() ? "<a href='#' title='Click here to forward to CQC' class='ui-icon ui-icon-circle-arrow-e ui-align-center' onClick='ForwardTEQMReplyToCQC(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>Forward to CQC</a>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                            :
                                                dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="F" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM == "Y" ).Any() ? "<a href='#' class='ui-icon	ui-icon-check ui-align-center'>": "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        :
                                            PMGSYSession.Current.RoleCode==81 //TE
                                            ?
                                                 dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="T" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT != "Y").Any()
                                                 ?
                                                    dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && (x.TECH_EXPERT_REMARK != "" && x.TECH_EXPERT_REMARK != null)).Any() ? "<a href='#' title='Click here to forward to CQC' class='ui-icon ui-icon-circle-arrow-e ui-align-center' onClick='ForwardTEQMReplyToCQC(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>Forward to CQC</a>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                 :
                                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && (x.FORWARD_STATUS=="C" || x.FORWARD_STATUS=="N" || x.FORWARD_STATUS=="F" )&& x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y").Any() ? "<a href='#' class='ui-icon	ui-icon-check ui-align-center'>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                    :
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" ,

                                    //added By Hrishikesh To "download eform and Test Report For TechnicalExperts Logins" -- 22-06-2023
                                    ((schRoadDetails.EFORM_STATUS=="3") ?   "<a href='#' title='Click here to view e-Form combined part-1,part-2 pdf'  onClick='viewCombinedPart_1_2_Pdf(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),

                                    ( ((schRoadDetails.TR_UPLOAD_STATUS=="Y"))? "<a href='#' title='Click here to view e-Form Test Report pdf'  onClick='viewTRPdfVirtualDir(\"" + schRoadDetails.EFORM_ID.ToString()+"\");'   ><input type='button' value='View'/></a>":"-"),


                }
                    }).ToArray();
                }
                else
                {
                    scheduleItemList = dbContext.qm_inspection_list(monitorCode, fromMonth, fromYear, toMonth, toYear, "0", roadStatus, stateCode, 0, qmType, schemeType, PMGSYSession.Current.RoleCode, roadOrBridge, gradeType, "0").ToList<qm_inspection_list_Result>();

                    //int? techexpertId = dbContext.MASTER_TECHNICAL_EXPERT.Where(x => x.TECHNICAL_EXPERT_USER_ID == PMGSYSession.Current.UserId).Select(x => x.ID).FirstOrDefault();

                    if (PMGSYSession.Current.RoleCode == 6)
                    {
                        foreach (var item in scheduleItemList)
                        {
                            bool isforwardStatus = false;

                            int? nqmUserId = (from x in dbContext.QUALITY_QM_SCHEDULE
                                              join y in dbContext.ADMIN_QUALITY_MONITORS
                                              on x.ADMIN_QM_CODE equals y.ADMIN_QM_CODE
                                              where x.ADMIN_SCHEDULE_CODE == item.ADMIN_SCHEDULE_CODE
                                              select y.ADMIN_USER_ID).FirstOrDefault();

                            isforwardStatus = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == item.QM_OBSERVATION_ID && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && PMGSYSession.Current.UserId == nqmUserId).Any();

                            if (isforwardStatus == true)
                            {
                                submitedReportList.Add(item);
                            }
                        }
                    }

                    totalRecords = submitedReportList.Count();

                    return submitedReportList.Select(schRoadDetails => new
                    {
                        id = schRoadDetails.QM_OBSERVATION_ID.ToString().Trim(),
                        cell = new[] {
                                schRoadDetails.MONITOR_NAME,
                                schRoadDetails.STATE_NAME,
                                schRoadDetails.DISTRICT_NAME,
                                schRoadDetails.BLOCK_NAME,
                                schRoadDetails.IMS_ROAD_NAME,
                                schRoadDetails.IMS_PACKAGE_ID,
                                schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                schRoadDetails.PMGSY_SCHEME,
                                schRoadDetails.IMS_ISCOMPLETED,
                                schRoadDetails.IMS_PROPOSAL_TYPE.Equals("P")?schRoadDetails.IMS_PAV_LENGTH.ToString():schRoadDetails.IMS_BRIDGE_LENGTH.ToString(),
                                schRoadDetails.QM_INSPECTED_START_CHAINAGE.ToString(),
                                schRoadDetails.QM_INSPECTED_END_CHAINAGE.ToString(),
                                schRoadDetails.QM_INSPECTION_DATE.ToString(),
                                schRoadDetails.OVERALL_GRADE,
                                (dbContext.QUALITY_INSPECTION_REPORT_FILE.Where(c => c.QM_OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any())
                                    ? "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowInspReportFile(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>"
                                    :   "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                    "<a href='#' title='Click here to view details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowObservationDetails(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>View</a>",
                                    schRoadDetails.NO_OF_PHOTO_UPLOADED.ToString(),
                                     
                                    //Below condition added to allow QM to send Technical expert review to cqc by adding reply
                                    //If RoleCode=79(Technical Expert) , STATUS=="T"(T="Forwarded to Technical Expert by CQC")   . 'Add Reply' button will be available to Tech Expert ,if the allocation of tech expert is finalized by CQC.
                                    //After successfull Submission of Remarks by Technical Expert i.e. IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" , '+' icon will be changed to 'Zoom-icon' and Remarks will be available for View.
                                    
                                    //If RoleCode=6(NQM) , STATUS=="N"(N="Forwarded to NQM by CQC")  ,IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"(Y=Terchnical expert submitted remarks), . If the Review is submitted by Tech Expert and it is forwarded to NQM by CQC , then 'Add Reply' button will be available to NQM.
                                    //After successfull Submission of Remarks by NQM i.e.IS_REVIEWED_BY_NQM == "Y" (Y=NQM submitted remarks) ,'+' icon will be changed to 'Zoom-icon' and it will be available for View.

                                    //Add , Edit,View
                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()
                                    ?
                                        PMGSYSession.Current.RoleCode==6 //NQM
                                        ?
                                           ( dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="N" && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM != "Y").Any()
                                            ?
                                               dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && (x.NQM_REMARK != "" && x.NQM_REMARK != null)).Any() ?"<a href='#' title='Click here to Edit Remarks' class='ui-icon ui-icon-pencil ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$E" +"\"); return false;'>Edit Remarks</a>" : "<a href='#' title='Click here to Add Remarks' class='ui-icon ui-icon-plus ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"$A"+"\"); return false;'>Add Remarks</a>"
                                            :
                                                //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")
                                                //View Section
                                                dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM=="Y").Any()
                                                ?
                                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x=>x.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID ).Any() ? "<a href='#' title='Click here to View Remarks' class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$V" +"\"); return false;'>" : "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                                                :
                                                    "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>")
                                        :
                                            PMGSYSession.Current.RoleCode==81 //TE
                                            ?
                                                ( dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="T" && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT != "Y").Any()
                                                ?
                                                    dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && ( (x.TECH_EXPERT_REMARK != null && x.TECH_EXPERT_REMARK != "")|| (x.QUALITY_QM_ASSIGN_TE_MASTER.GENERAL_OBSERVATION != null && x.QUALITY_QM_ASSIGN_TE_MASTER.GENERAL_OBSERVATION != "") )).Any() ?"<a href='#' title='Click here to Edit Remarks' class='ui-icon ui-icon-pencil ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$E" +"\"); return false;'>Edit Remarks</a>" : "<a href='#' title='Click here to Add Remarks' class='ui-icon ui-icon-plus ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$A" +"\"); return false;'>Add Remarks</a>"
                                                :
                                                   //"<a href='#' class='ui-icon ui-icon-locked ui-align-center'>")
                                                   //View Section
                                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT=="Y").Any()
                                                    ?
                                                        dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x=>x.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID ).Any() ? "<a href='#' title='Click here to View Remarks' class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$V" +"\"); return false;'>" : "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                                                    :
                                                        "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>")
                                            :
                                            "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                     :
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" ,

                              //View 
                              #region View Region commented

	                   
                        //dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()
                        //            ?
                        //                PMGSYSession.Current.RoleCode==6 //NQM
                        //                ?
                        //                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM=="Y").Any()
                        //                    ?
                        //                        dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x=>x.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID ).Any() ? "<a href='#' title='Click here to View Remarks' class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$V" +"\"); return false;'>" : "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                        //                    :
                        //                       "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                        //                :
                        //                    PMGSYSession.Current.RoleCode==79 //TE
                        //                    ?
                        //                         dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.IS_FINALIZED_BY_CQC == "Y" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT=="Y").Any()
                        //                         ?
                        //                            dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x=>x.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID ).Any() ? "<a href='#' title='Click here to View Remarks' class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddEditViewReplyBy_TE_QM(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim() +"$V" +"\"); return false;'>" : "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                        //                         :
                        //                            "<a href='#' class='ui-icon ui-icon-minus ui-align-center'>"
                        //                    :
                        //                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                        //             :
                        //            "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" ,
                         #endregion

                                    //Forward to CQC
                                    //If RoleCode=79(Technical Expert) , STATUS=="T"(T="Forwarded to Technical Expert by CQC")  ,IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"(Y=Terchnical expert submitted remarks) . If the Review is submitted by Tech Expert , then Tech Expert can forward it to CQC.After Forwrding to CQC by Tech Expert , then Status="C"
                                    //If RoleCode=6(NQM) , STATUS=="N"(N="Forwarded to NQM by CQC")  ,IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"(Y=Terchnical expert submitted remarks) && x.IS_REVIEWED_BY_NQM == "Y" (Y=NQM submitted remarks)  . If the Review is submitted by both Tech Expert and NQM , then NQM can forward it to CQC . After Forwrding to CQC by NQM , then Status="F"
                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID).Any()
                                    ?
                                        PMGSYSession.Current.RoleCode==6 //NQM
                                        ?
                                            dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="N" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM != "Y" ).Any()
                                            ?
                                                dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && (x.NQM_REMARK != "" && x.NQM_REMARK != null && x.MAST_ITEM_NUMBER != 52)).Any() ? "<a href='#' title='Click here to forward to CQC' class='ui-icon ui-icon-circle-arrow-e ui-align-center' onClick='ForwardTEQMReplyToCQC(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>Forward to CQC</a>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                            :
                                                dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="F" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" && x.IS_REVIEWED_BY_NQM == "Y" ).Any() ? "<a href='#' class='ui-icon	ui-icon-check ui-align-center'>": "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        :
                                            PMGSYSession.Current.RoleCode==81 //TE
                                            ?
                                                 dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && x.FORWARD_STATUS=="T" && x.IS_REVIEWED_BY_TECHNICAL_EXPERT != "Y").Any()
                                                 ?
                                                    dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x=>x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID==schRoadDetails.QM_OBSERVATION_ID && (x.TECH_EXPERT_REMARK != "" && x.TECH_EXPERT_REMARK != null)).Any() ? "<a href='#' title='Click here to forward to CQC' class='ui-icon ui-icon-circle-arrow-e ui-align-center' onClick='ForwardTEQMReplyToCQC(\"" + schRoadDetails.QM_OBSERVATION_ID.ToString().Trim()  +"\"); return false;'>Forward to CQC</a>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                 :
                                                    dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == schRoadDetails.QM_OBSERVATION_ID && (x.FORWARD_STATUS=="C" || x.FORWARD_STATUS=="N" || x.FORWARD_STATUS=="F" )&& x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y").Any() ? "<a href='#' class='ui-icon	ui-icon-check ui-align-center'>" : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                    :
                                    "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" ,

                }
                    }).ToArray();
                }


            }
            catch (Exception ex)
            {
                totalRecords = 0;
                ErrorLog.LogError(ex, "QualityMonitoringDAL.QMViewInspectionDetailsSQCPIUDAL()");
                return null;
            }

            finally
            {
                dbContext.Dispose();

            }

        }

        public bool SaveTechExpertRemarksDAL(Dictionary<int, string> itemwiseRemark, int obsId, out string message, string generalObs)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                using (TransactionScope transaction = new TransactionScope())
                {
                    int count = 0;
                    QUALITY_QM_ASSIGN_TE_MASTER masterData = new QUALITY_QM_ASSIGN_TE_MASTER();

                    if (PMGSYSession.Current.RoleCode == 81)
                    {
                        masterData = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == obsId).FirstOrDefault();
                    }
                    else if (PMGSYSession.Current.RoleCode == 6)
                    {
                        masterData = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == obsId).FirstOrDefault();
                    }


                    foreach (var item in itemwiseRemark)
                    {
                        QUALITY_QM_TE_REMARK_DETAILS detailsData = new QUALITY_QM_TE_REMARK_DETAILS();

                        if (PMGSYSession.Current.RoleCode == 81)
                        {
                            detailsData.REMARK_ID = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Any() ? dbContext.QUALITY_QM_TE_REMARK_DETAILS.Max(x => x.REMARK_ID) + 1 : 1;
                            detailsData.TE_MASTER_ID = masterData.TE_MASTER_ID;
                            detailsData.MAST_ITEM_NUMBER = item.Key;
                            detailsData.TECH_EXPERT_REMARK = item.Value;
                            detailsData.TECH_EXPERT_USER_ID = PMGSYSession.Current.UserId;
                            detailsData.TECH_EXPERT__IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            detailsData.TECH_EXPERT_ENTRY_DATE = DateTime.Now;

                            dbContext.QUALITY_QM_TE_REMARK_DETAILS.Add(detailsData);
                            count++;

                        }
                        else if (PMGSYSession.Current.RoleCode == 6 && masterData != null)
                        {
                            detailsData = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.Key && x.TE_MASTER_ID == masterData.TE_MASTER_ID).Any() ? dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.Key && x.TE_MASTER_ID == masterData.TE_MASTER_ID).FirstOrDefault() : null;
                            if (detailsData != null)
                            {
                                if (detailsData.TECH_EXPERT_REMARK != null && item.Value == null)
                                {
                                    //ModelState.AddModelError("NQM_REMARK", @"NQM remark is mandatory.");
                                    //ModelState.AddModelError("NQM_REMARK", @"NQM remark is mandatory.");
                                    message = "All NQM Remarks are mandatory !!";
                                    return false;
                                }
                                detailsData.NQM_REMARK = item.Value;
                                detailsData.NQM_USER_ID = PMGSYSession.Current.UserId;
                                detailsData.NQM_IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                detailsData.NQM_ENTRY_DATE = DateTime.Now;
                                dbContext.Entry(detailsData).State = System.Data.Entity.EntityState.Modified;
                            }
                        }


                        dbContext.SaveChanges();

                    }


                    //masterData.GENERAL_OBSERVATION = 
                    if (PMGSYSession.Current.RoleCode == 81 && !(generalObs == null || generalObs == ""))
                    {
                        masterData.GENERAL_OBSERVATION = generalObs;
                        dbContext.Entry(masterData).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();
                        count++;
                    }

                    if (PMGSYSession.Current.RoleCode == 81 && count == 0)
                    {
                        message = "All the remarks cannot be empty !!";
                        return false;
                    }


                    transaction.Complete();

                    message = "Remarks added successfully !!";
                    return true;
                }

            }
            catch (Exception ex)
            {
                message = "Failed to add Remarks !!";
                ErrorLog.LogError(ex, "QualityMonitoringDAL.SaveTechExpertRemarksDAL()");

                //return false;
                throw;

            }
            finally
            {
                dbContext.Dispose();
            }

        }


        public bool UpdateTechExpertRemarksDAL(Dictionary<int, string> itemwiseRemark, int obsId, out string message, string generalObs)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                using (TransactionScope transaction = new TransactionScope())
                {
                    QUALITY_QM_ASSIGN_TE_MASTER masterData = new QUALITY_QM_ASSIGN_TE_MASTER();
                    masterData = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == obsId).Any() ? dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.OBSERVATION_ID == obsId).FirstOrDefault() : null;

                    int count = 0, storedDataCount = 0;//To check the count of deleted records while editing;count=delete record count
                    storedDataCount = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.TE_MASTER_ID == masterData.TE_MASTER_ID).Count();

                    if (masterData != null)
                    {
                        foreach (var item in itemwiseRemark)
                        {
                            QUALITY_QM_TE_REMARK_DETAILS detailsData = new QUALITY_QM_TE_REMARK_DETAILS();

                            if (PMGSYSession.Current.RoleCode == 81)//TE
                            {
                                if (dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.Key && x.TE_MASTER_ID == masterData.TE_MASTER_ID).Any())
                                {
                                    detailsData = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.Key && x.TE_MASTER_ID == masterData.TE_MASTER_ID).FirstOrDefault();

                                    if (item.Value == "" || item.Value == null)
                                    {
                                        dbContext.Entry(detailsData).State = System.Data.Entity.EntityState.Deleted;//If the record is deleted while editing
                                        //count++;
                                    }
                                    else
                                    {
                                        detailsData.TECH_EXPERT_REMARK = item.Value;
                                        detailsData.TECH_EXPERT_USER_ID = PMGSYSession.Current.UserId;
                                        detailsData.TECH_EXPERT__IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        detailsData.TECH_EXPERT_ENTRY_DATE = DateTime.Now;
                                        dbContext.Entry(detailsData).State = System.Data.Entity.EntityState.Modified;
                                        //count++;
                                    }

                                }
                                else
                                {
                                    if (item.Value != "" && item.Value != null)
                                    {
                                        detailsData.REMARK_ID = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Any() ? dbContext.QUALITY_QM_TE_REMARK_DETAILS.Max(x => x.REMARK_ID) + 1 : 1;
                                        detailsData.TE_MASTER_ID = masterData.TE_MASTER_ID;
                                        // detailsData.OBSERVATION_ID = obsId;
                                        detailsData.MAST_ITEM_NUMBER = item.Key;
                                        detailsData.TECH_EXPERT_REMARK = item.Value;
                                        detailsData.TECH_EXPERT_USER_ID = PMGSYSession.Current.UserId;
                                        detailsData.TECH_EXPERT__IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        detailsData.TECH_EXPERT_ENTRY_DATE = DateTime.Now;
                                        dbContext.QUALITY_QM_TE_REMARK_DETAILS.Add(detailsData);
                                        //count--;
                                    }

                                }


                            }
                            else if (PMGSYSession.Current.RoleCode == 6)//NQM
                            {
                                if (dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.Key && x.TE_MASTER_ID == masterData.TE_MASTER_ID).Any())
                                {
                                    detailsData = dbContext.QUALITY_QM_TE_REMARK_DETAILS.Where(x => x.QUALITY_QM_ASSIGN_TE_MASTER.OBSERVATION_ID == obsId && x.MAST_ITEM_NUMBER == item.Key && x.TE_MASTER_ID == masterData.TE_MASTER_ID).FirstOrDefault();

                                    if (detailsData.TECH_EXPERT_REMARK != null && item.Value == null)
                                    {
                                        message = "All NQM Remarks are mandatory !!";
                                        return false;
                                    }

                                    detailsData.NQM_REMARK = item.Value;
                                    detailsData.NQM_USER_ID = PMGSYSession.Current.UserId;
                                    detailsData.NQM_IP_ADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    detailsData.NQM_ENTRY_DATE = DateTime.Now;

                                    dbContext.Entry(detailsData).State = System.Data.Entity.EntityState.Modified;
                                }

                            }


                            dbContext.SaveChanges();

                        }
                        //if (PMGSYSession.Current.RoleCode == 79 && count == storedDataCount)
                        //{
                        //    message = "All the remarks cannot be empty !!";
                        //    return false;
                        //}
                        if (PMGSYSession.Current.RoleCode == 81 && !(generalObs == null || generalObs == ""))
                        {
                            masterData.GENERAL_OBSERVATION = generalObs;
                            dbContext.Entry(masterData).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();

                        }
                        transaction.Complete();

                    }
                    else
                    {
                        message = "Failed to Update Remarks !!";
                        return false;
                    }


                    message = "Remarks Updated successfully !!";
                    return true;
                }

            }
            catch (Exception ex)
            {
                message = "Failed to Update Remarks !!";
                ErrorLog.LogError(ex, "QualityMonitoringDAL.UpdateTechExpertRemarksDAL()");

                //return false;
                throw;

            }
            finally
            {
                dbContext.Dispose();
            }

        }
        #endregion

        #region Add remark by NQM
        #endregion

        #region Add Payment Information For TE 

        public Array TechnicalExpertPaymentDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            try
            {
                var lstExecution = (from item in dbContext.QUALITY_QM_ASSIGN_TE_MASTER
                                    join technicalExpert in dbContext.MASTER_TECHNICAL_EXPERT
                                    on item.TECHNICAL_EXPERT_ID equals technicalExpert.ID
                                    where item.IS_FINALIZED_BY_CQC == "Y"
                                    group item by new
                                    {
                                        technicalExpert.ID,
                                        technicalExpert.TECHNICAL_EXPERT_PAN,
                                        technicalExpert.TECHNICAL_EXPERT_FNAME,
                                        technicalExpert.TECHNICAL_EXPERT_MNAME,
                                        technicalExpert.TECHNICAL_EXPERT_LNAME
                                    } into g
                                    select new
                                    {
                                        g.Key.ID,
                                        g.Key.TECHNICAL_EXPERT_FNAME,
                                        g.Key.TECHNICAL_EXPERT_MNAME,
                                        g.Key.TECHNICAL_EXPERT_LNAME,
                                        g.Key.TECHNICAL_EXPERT_PAN,
                                        TOTAL_ALLOCATED_WORKS = g.Count(x => x.IS_FINALIZED_BY_CQC == "Y"),
                                        TOTAL_REVIEWED_WORKS = g.Count(x => x.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"),
                                        TOTAL_PAID_WORKS = g.Count(x => x.IS_TECHNICAL_EXPERT_PAID == "Y")
                                    }).ToList();

                totalRecords = lstExecution.Count();

                lstExecution = lstExecution.OrderByDescending(m => m.ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                return lstExecution.Select(m => new
                {
                    id = m.ID.ToString(),
                    cell = new[]
                    {
                        m.ID.ToString(),
                        ((m.TECHNICAL_EXPERT_FNAME == null || m.TECHNICAL_EXPERT_FNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_FNAME) + " " + ((m.TECHNICAL_EXPERT_MNAME == null || m.TECHNICAL_EXPERT_MNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_MNAME) + " " + ((m.TECHNICAL_EXPERT_LNAME == null || m.TECHNICAL_EXPERT_LNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_LNAME),
                        m.TECHNICAL_EXPERT_PAN,
                        m.TOTAL_ALLOCATED_WORKS == 0 ? m.TOTAL_ALLOCATED_WORKS.ToString() : "<center><table><tr><td  style='border-color:white; color:blue'><span title='Click here to view total allocated works' onClick ='GetTotalAllocatedWorksDetails(\" " + m.ID.ToString() + "$A" + " \");' >" + m.TOTAL_ALLOCATED_WORKS.ToString() + "</span></td></tr></table></center>",
                        m.TOTAL_REVIEWED_WORKS == 0 ? m.TOTAL_REVIEWED_WORKS.ToString() : "<center><table><tr><td  style='border-color:white; color:blue'><span title='Click here to view total reviewed works' onClick ='GetTotalAllocatedWorksDetails(\" " + m.ID.ToString() + "$B" + " \");' >" + m.TOTAL_REVIEWED_WORKS.ToString() + "</span></td></tr></table></center>",
                        m.TOTAL_PAID_WORKS == 0 ? m.TOTAL_PAID_WORKS.ToString() : "<center><table><tr><td  style='border-color:white; color:blue'><span title='Click here to view total paid works' onClick ='GetTotalAllocatedWorksDetails(\" " + m.ID.ToString() + "$C" + " \");' >" + m.TOTAL_PAID_WORKS.ToString() + "</span></td></tr></table></center>",
                        //m.TOTAL_ALLOCATED_WORKS.ToString(),
                        //m.TOTAL_REVIEWED_WORKS.ToString(),
                        //m.TOTAL_PAID_WORKS.ToString(),
                        (m.TOTAL_REVIEWED_WORKS - m.TOTAL_PAID_WORKS).ToString(),
                        ((m.TOTAL_REVIEWED_WORKS - m.TOTAL_PAID_WORKS) == 0)
                        ? "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-locked' ></span></td></tr></table></center>"
                        : "<center><table><tr><td  style='border-color:white'><span class='ui-icon ui-icon-plusthick' title='Click here to add payment' onClick ='AddTechnicalExpertPayment(" + m.ID.ToString() + ");' ></span></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.TechnicalExpertPaymentDetailsDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array AddTechnicalExpertPaymentListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int teId, out List<int> allocatedWorksObservationIdsList)
        {
            dbContext = new PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            allocatedWorksObservationIdsList = new List<int>();

            try
            {
                allocatedWorksObservationIdsList = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.TECHNICAL_EXPERT_ID == teId && x.IS_TECHNICAL_EXPERT_PAID == "Y").Select(y => y.OBSERVATION_ID).ToList();

                var scheduleItemList = (from qqatm in dbContext.QUALITY_QM_ASSIGN_TE_MASTER
                                        join mte in dbContext.MASTER_TECHNICAL_EXPERT on qqatm.TECHNICAL_EXPERT_ID equals mte.ID
                                        join qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqatm.OBSERVATION_ID equals qqom.QM_OBSERVATION_ID
                                        join isp in dbContext.IMS_SANCTIONED_PROJECTS on qqom.IMS_PR_ROAD_CODE equals isp.IMS_PR_ROAD_CODE
                                        join qqs in dbContext.QUALITY_QM_SCHEDULE on qqatm.ADMIN_SCHEDULE_CODE equals qqs.ADMIN_SCHEDULE_CODE
                                        join aqm in dbContext.ADMIN_QUALITY_MONITORS on qqs.ADMIN_QM_CODE equals aqm.ADMIN_QM_CODE
                                        join ms in dbContext.MASTER_STATE on isp.MAST_STATE_CODE equals ms.MAST_STATE_CODE
                                        join md in dbContext.MASTER_DISTRICT on isp.MAST_DISTRICT_CODE equals md.MAST_DISTRICT_CODE
                                        join mb in dbContext.MASTER_BLOCK on isp.MAST_BLOCK_CODE equals mb.MAST_BLOCK_CODE
                                        where qqatm.TECHNICAL_EXPERT_ID == teId
                                        && qqatm.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"
                                        && qqatm.IS_TECHNICAL_EXPERT_PAID == null
                                        select new
                                        {
                                            qqatm.TE_MASTER_ID,
                                            qqatm.OBSERVATION_ID,
                                            ms.MAST_STATE_NAME,
                                            md.MAST_DISTRICT_NAME,
                                            mb.MAST_BLOCK_NAME,
                                            aqm.ADMIN_QM_FNAME,
                                            aqm.ADMIN_QM_MNAME,
                                            aqm.ADMIN_QM_LNAME,
                                            isp.IMS_PROPOSAL_TYPE,
                                            ROAD_BRIDGE_NAME = isp.IMS_PROPOSAL_TYPE == "P" ? isp.IMS_ROAD_NAME : isp.IMS_BRIDGE_NAME,
                                            isp.IMS_PACKAGE_ID,
                                            isp.MAST_PMGSY_SCHEME,
                                            qqom.QM_INSPECTION_DATE,
                                            mte.TECHNICAL_EXPERT_FNAME,
                                            mte.TECHNICAL_EXPERT_MNAME,
                                            mte.TECHNICAL_EXPERT_LNAME
                                        }).ToList();

                totalRecords = scheduleItemList.Count();

                return scheduleItemList.Select(m => new
                {
                    id = m.TE_MASTER_ID.ToString().Trim(),
                    cell = new[] {
                                m.TE_MASTER_ID.ToString(),
                                m.OBSERVATION_ID.ToString(),
                                ((m.TECHNICAL_EXPERT_FNAME == null || m.TECHNICAL_EXPERT_FNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_FNAME) + " " + ((m.TECHNICAL_EXPERT_MNAME == null || m.TECHNICAL_EXPERT_MNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_MNAME) + " " + ((m.TECHNICAL_EXPERT_LNAME == null || m.TECHNICAL_EXPERT_LNAME == string.Empty) ? "" : m.TECHNICAL_EXPERT_LNAME),
                                ((m.ADMIN_QM_FNAME == null || m.ADMIN_QM_FNAME == string.Empty) ? "" : m.ADMIN_QM_FNAME) + " " + ((m.ADMIN_QM_MNAME == null || m.ADMIN_QM_MNAME == string.Empty) ? "" : m.ADMIN_QM_MNAME) + " " + ((m.ADMIN_QM_LNAME == null || m.ADMIN_QM_LNAME == string.Empty) ? "" : m.ADMIN_QM_LNAME),
                                m.MAST_STATE_NAME,
                                m.MAST_DISTRICT_NAME,
                                m.MAST_BLOCK_NAME,
                                m.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                m.ROAD_BRIDGE_NAME,
                                m.IMS_PACKAGE_ID,
                                m.MAST_PMGSY_SCHEME == 1 ? "PMGSY 1" : m.MAST_PMGSY_SCHEME == 2 ? "PMGSY 2" : m.MAST_PMGSY_SCHEME == 3 ? "RCPLWE" : m.MAST_PMGSY_SCHEME == 4 ? "PMGSY 4" : "--",
                                m.QM_INSPECTION_DATE.ToShortDateString(),
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                allocatedWorksObservationIdsList = null;
                ErrorLog.LogError(ex, "AddTechnicalExpertPaymentListDAL()");
                return null;
            }

            finally
            {
                dbContext.Dispose();
            }
        }

        public Array AddTechnicalExpertPaymentWiseListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string teId, out List<int> allocatedWorksObservationIdsList)
        {
            dbContext = new PMGSYEntities();
            ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 360;
            CommonFunctions objCommonFunctions = new CommonFunctions();
            allocatedWorksObservationIdsList = new List<int>();
            int tecExpId = Convert.ToInt32(teId.Split('$')[0]);
            string paymentType = teId.Split('$')[1];

            try
            {
                allocatedWorksObservationIdsList = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.TECHNICAL_EXPERT_ID == tecExpId && x.IS_TECHNICAL_EXPERT_PAID == "Y").Select(y => y.OBSERVATION_ID).ToList();

                var scheduleItemList = (from qqatm in dbContext.QUALITY_QM_ASSIGN_TE_MASTER
                                        join mte in dbContext.MASTER_TECHNICAL_EXPERT on qqatm.TECHNICAL_EXPERT_ID equals mte.ID
                                        join qqom in dbContext.QUALITY_QM_OBSERVATION_MASTER on qqatm.OBSERVATION_ID equals qqom.QM_OBSERVATION_ID
                                        join isp in dbContext.IMS_SANCTIONED_PROJECTS on qqom.IMS_PR_ROAD_CODE equals isp.IMS_PR_ROAD_CODE
                                        join qqs in dbContext.QUALITY_QM_SCHEDULE on qqatm.ADMIN_SCHEDULE_CODE equals qqs.ADMIN_SCHEDULE_CODE
                                        join aqm in dbContext.ADMIN_QUALITY_MONITORS on qqs.ADMIN_QM_CODE equals aqm.ADMIN_QM_CODE
                                        join ms in dbContext.MASTER_STATE on isp.MAST_STATE_CODE equals ms.MAST_STATE_CODE
                                        join md in dbContext.MASTER_DISTRICT on isp.MAST_DISTRICT_CODE equals md.MAST_DISTRICT_CODE
                                        join mb in dbContext.MASTER_BLOCK on isp.MAST_BLOCK_CODE equals mb.MAST_BLOCK_CODE
                                        where qqatm.TECHNICAL_EXPERT_ID == tecExpId
                                        && qqatm.IS_FINALIZED_BY_CQC == "Y"
                                        //&& qqatm.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y"
                                        //&& qqatm.IS_TECHNICAL_EXPERT_PAID == null
                                        && (paymentType == "B" ? qqatm.IS_REVIEWED_BY_TECHNICAL_EXPERT == "Y" : qqatm.IS_REVIEWED_BY_TECHNICAL_EXPERT == qqatm.IS_REVIEWED_BY_TECHNICAL_EXPERT)
                                        && (paymentType == "C" ? qqatm.IS_TECHNICAL_EXPERT_PAID == "Y" : qqatm.IS_TECHNICAL_EXPERT_PAID == qqatm.IS_TECHNICAL_EXPERT_PAID)
                                        select new
                                        {
                                            qqatm.TE_MASTER_ID,
                                            qqatm.OBSERVATION_ID,
                                            ms.MAST_STATE_NAME,
                                            md.MAST_DISTRICT_NAME,
                                            mb.MAST_BLOCK_NAME,
                                            aqm.ADMIN_QM_FNAME,
                                            aqm.ADMIN_QM_MNAME,
                                            aqm.ADMIN_QM_LNAME,
                                            isp.IMS_PROPOSAL_TYPE,
                                            ROAD_BRIDGE_NAME = isp.IMS_PROPOSAL_TYPE == "P" ? isp.IMS_ROAD_NAME : isp.IMS_BRIDGE_NAME,
                                            isp.IMS_PACKAGE_ID,
                                            isp.MAST_PMGSY_SCHEME,
                                            qqom.QM_INSPECTION_DATE,
                                            mte.TECHNICAL_EXPERT_FNAME,
                                            mte.TECHNICAL_EXPERT_MNAME,
                                            mte.TECHNICAL_EXPERT_LNAME
                                        }).ToList();

                totalRecords = scheduleItemList.Count();

                scheduleItemList = scheduleItemList.OrderBy(m => m.TE_MASTER_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();

                return scheduleItemList.Select(m => new
                {
                    id = m.TE_MASTER_ID.ToString().Trim(),
                    cell = new[] {
                                m.TE_MASTER_ID.ToString(),
                                m.OBSERVATION_ID.ToString(),
                                ((m.ADMIN_QM_FNAME == null || m.ADMIN_QM_FNAME == string.Empty) ? "" : m.ADMIN_QM_FNAME) + " " + ((m.ADMIN_QM_MNAME == null || m.ADMIN_QM_MNAME == string.Empty) ? "" : m.ADMIN_QM_MNAME) + " " + ((m.ADMIN_QM_LNAME == null || m.ADMIN_QM_LNAME == string.Empty) ? "" : m.ADMIN_QM_LNAME),
                                m.MAST_STATE_NAME,
                                m.MAST_DISTRICT_NAME,
                                m.MAST_BLOCK_NAME,
                                m.IMS_PROPOSAL_TYPE.Equals("P") ? "Road" : "LSB",
                                m.ROAD_BRIDGE_NAME,
                                m.IMS_PACKAGE_ID,
                                m.MAST_PMGSY_SCHEME == 1 ? "PMGSY 1" : m.MAST_PMGSY_SCHEME == 2 ? "PMGSY 2" : m.MAST_PMGSY_SCHEME == 3 ? "RCPLWE" : m.MAST_PMGSY_SCHEME == 4 ? "PMGSY 4" : "--",
                                m.QM_INSPECTION_DATE.ToShortDateString(),
                            }
                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                allocatedWorksObservationIdsList = null;
                ErrorLog.LogError(ex, "AddTechnicalExpertPaymentWiseListDAL()");
                return null;
            }

            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddPaymentDetailsDAL(int[] submitarray, out string isValidMsg)
        {
            int status = 0;
            PMGSYEntities dbContext = new PMGSYEntities();
            QUALITY_QM_ASSIGN_TE_MASTER model = new QUALITY_QM_ASSIGN_TE_MASTER();
            dbContext = new PMGSYEntities();

            try
            {
                using (var scope = new TransactionScope())
                {
                    foreach (var item in submitarray)
                    {
                        model = dbContext.QUALITY_QM_ASSIGN_TE_MASTER.Where(x => x.TE_MASTER_ID == item).FirstOrDefault();

                        model.IS_TECHNICAL_EXPERT_PAID = "Y";

                        dbContext.Entry(model).State = System.Data.Entity.EntityState.Modified;
                    }

                    status = dbContext.SaveChanges();

                    scope.Complete();
                }
                if (status > 0)
                {
                    isValidMsg = "Payment details added successfully.";
                    return true;
                }
                else
                {
                    isValidMsg = "Payment details cannot be added.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "QualityMonitoringDAL.AddPaymentDetailsDAL");
                isValidMsg = "Payment details cannot be added.";
                return false;
            }
        }

        #endregion

        #endregion

        //addded by hrishikesh
        public Array GetmonitorDetailsListJSONDAL(string data, string filters, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions commnObj = new CommonFunctions();
                //List<GetMonitorListTemplateModel> adminQualityMonitorList = new List<GetMonitorListTemplateModel>();
                List<ProficiencyTestTemplateModel> adminQualityMonitorList = new List<ProficiencyTestTemplateModel>();
                //SearchJson json = new SearchJson();
                var monitorType = data.Split('$')[0];
                var stateCode = Convert.ToInt32(data.Split('$')[1]);

                //var monitorList = commnObj.PopulateMonitors("false", monitorType, stateCode);
                //adminQualityMonitorList = commnObj.PopulateGenerateMonitorsList(monitorType, stateCode);
                adminQualityMonitorList = commnObj.PopulateMonitorsListForProficiencyTestScoreNew(monitorType, stateCode);

                totalRecords = adminQualityMonitorList.Count();

                adminQualityMonitorList = adminQualityMonitorList.Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();


                //adminQualityMonitorList = adminQualityMonitorList.OrderBy(x=>x.ADMIN_QM_FNAME).ToList();

                return adminQualityMonitorList.Select(m => new
                {
                    id = m.ADMIN_QM_CODE.ToString(), //value=ADMIN_QM_CODE

                    cell = new[]
                    {
                        m.ADMIN_QM_CODE.ToString(),
                        m.MONITOR_NAME,
                        m.EMAIL,
                        m.MOBILE_NUMBER
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetmonitorDetailsListJSONDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
    }

    class TargetInspection
    {
        public string MAST_STATE_NAME { get; set; }
        public int InspMonth { get; set; }
        public int Year { get; set; }
        public int NUMBER_NQM { get; set; }
    }

    public interface IQualityMonitoringDAL
    {
        #region Allocate Roads to NQM
        Array AllocateRoadsToNQmList(AllocateRoadsToNQMModel objFilter, out long totalRecords);
        string GetAssignedRoadButtonIcon(Int32 AUTO_SCHEDULE_ID);
        string GetViewRoadIcon(Int32 AUTO_SCHEDULE_ID);
        string GetNQMName(Int32 NQMCode);
        string GetDistrictName(Int32? DistrictCode);
        #endregion

        #region CQCAdmin + SQC Common

        Array GetScheduleListDAL(int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters);

        Array QMSQCLetterListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters, int inspMonth, int inspYear);
        bool AddSQCLetterDetailsDAL(int id, short inspMonth, short inspYear, ref string message);
        bool AddNQMLetterDetailsDAL(int scheduleCode, ref string message);
        string QMCreateScheduleDAL(QUALITY_QM_SCHEDULE objQualityQMSchedule);
        List<SelectListItem> GetDistrictForScheduleCreationDAL(int selectedState, int month, int year);
        MasterAdminQualityMonitorViewModel MonitorDetailsDAL(int qualityMonitorCode);
        List<SelectListItem> GetScheduledDistrictListDAL(int scheduleCode, bool isAssignedDistricts);
        string CQCAddDistrictsDAL(QMCQCAddDistrictModel qmCQCAddDistrict);
        Array GetRoadListToAssignDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters, int districtCode, int adminSchCode, int techCode);
        Array GetRoadPhysicalProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);
        //string QMAssignRoadsDAL(QUALITY_QM_SCHEDULE_DETAILS objQualityQMSchedule);
        string QMAssignWorksDAL(List<QUALITY_QM_SCHEDULE_DETAILS> lstSchedule);
        Array QMViewScheduleDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int adminSchCode);
        string QMDeleteSchRoadsDAL(int prRoadCode, int scheduleCode);
        string CQCDeleteDistrictDAL(int districtCode, int scheduleCode);
        string FinalizeDistrictsDAL(int scheduleCode);
        string FinalizeRoadDAL(int prRoadCode, int scheduleCode, bool isFinalizeAllRoads);
        string ForwardScheduleDAL(int scheduleCode);
        string UnlockScheduleDAL(int scheduleCode);
        Array QMViewInspectionDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                        int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                        int toMonth, int toYear, int schemeType, string roadStatus, string roadOrBridge, string gradeType, string eFormStatusType);
        Array QMViewInspectionDetails2TierCQCDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                        int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                        int toMonth, int toYear, string ROAD_STATUS, int schemeType, string roadOrBridge, string gradeType, string eFormStatus);
        Array QMViewATRDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                        int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                        int toMonth, int toYear, string atrStatus, string rdStatus);
        Array QMViewBulkATRListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int stateCode, int duration);
        Array GetPrevScheduleListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int monitorId, int prevMonth, int prevYear, bool is3Tier);
        QMFillObservationModel QMGradingCorrectionDAL(int obsId);
        string QMGradingCorrectionDAL(FormCollection formCollection);
        string QMDeleteObservationDAL(int obsId);
        QMFillObservationModel QMObservationDetailsDAL(int obsId);
        QMFillObservationModel QMObservationDetailsATRDAL(int obsId);
        QMFillObservationModel QMObservationDetails2TierCQCDAL(int obsId);
        Array Get2TierScheduleListCQCDAL(int state, int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters);
        Array ListQualityMonitor(string qmTypeName, int stateCode, int districtCode, string isEmpanelled, string filters, int? page, int? rows, string sidx, string sord, out long totalRecords);
        #endregion


        #region SQC 3-Tier

        Array QMViewInspectionDetailsSQCPIUDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                       int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                       int toMonth, int toYear, string qmType, int schemeType, string roadStatus, string roadOrBridge, string gradeType, string eFormStatus);
        Array GetSqc3TierScheduleListDAL(int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters);
        List<SelectListItem> PopulateMonitorsDAL(int state, int inspMonth, int inspYear, int districtCode, string qmType);
        QMFillObservationModel QMObservationDetails3TierSQCDAL(int obsId);
        #endregion


        #region PIU
        Array GetPIU3TierScheduleListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters);
        Array GetPIU2TierScheduleListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters);
        #endregion


        #region  Monitors
        Array GetMonitorsCurrScheduleListDAL(int month, int year, int? page, int? rows, string sidx, string sord, out Int32 totalRecords);
        Array QMMonitorInspListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                  int fromMonth, int fromYear, int toMonth, int toYear);
        Array GetMonitorsScheduledRoadListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int inspMonth, int inspYear);
        QMFillObservationModel QMFillObservationsDAL(int adminSchCode, int prRoadCode, string roadStatus);
        string QMSaveObservationsDAL(FormCollection formCollection);
        QMTourViewModel GetTourDetailsDAL(int scheduleCode);
        string SaveTourDetailsDAL(QMTourViewModel model);
        Array GetTourListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int state, int qmCode, int frmMonth, int frmYear, int toMonth, int toYear);
        QMTourViewModel GetTourDetailsForUpdateDAL(int tourId);
        string UpdateTourDetailsDAL(QMTourViewModel model);
        string DeleteTourDetailsDAL(int tourId);
        string FinalizeTourDetailsDAL(int tourId, string flagValue);
        #endregion


        #region File Details
        string AddFileUploadDetailsDAL(QUALITY_QM_INSPECTION_FILE lst_inspection_files);
        Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId);
        string GetStartEndLatLongDAL(int obsId);
        string GetLatLongDAL(int obsId);
        Array GetPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId, int QM_ATR_ID);
        string AddATRDetailsDAL(QUALITY_ATR_FILE lst_atr_files);
        string UpdateImageDetailsDAL(QUALITY_QM_INSPECTION_FILE qm_inspection_files);
        string DeleteFileDetailsDAL(int QM_FILE_ID);
        #endregion


        #region PDF Upload BY Monitor

        Array GetInspReportFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId, string isATRPage);
        string AddPdfUploadDetailsDAL(QUALITY_INSPECTION_REPORT_FILE qmFiles);
        string UpdatePDFDetailsDAL(QUALITY_INSPECTION_REPORT_FILE qmFiles);
        string DeleteInspFileDetailsBAL(int fileId, int obsId, string fileType);

        //added by abhinav pathak
        #region
        string AddMultiplePdfUploadDetailsDAL(QUALITY_QM_INSPECTION_FILES qmFiles);
        Array GetInspMultipleFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId);
        bool FinalisePDFDeatilsDAL(int id);
        string UpdateMultiplePDFDetailsDAL(QUALITY_QM_INSPECTION_FILES qmFiles);
        string DeleteMultipleInspFileDetailsDAL(int fileId, int obsId);
        #endregion
        #endregion

        #region QCR Part-I PDF by Srishti and Vikki
        Array GetExecutionList(int yearCode, int districtCode, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetQCRList(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);
        bool AddQCRdDetails(AddUploadQCRDetailsModel model, out String IsValid);
        #endregion

        #region View Uploaded QCR PDF

        Array GetExecutionListView(int yearCode, int districtCode, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetQCRListToView(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);

        #endregion


        #region ATR
        List<qm_inspection_list_atr_Result> ATRDetailsDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                int toMonth, int toYear, string atrStatus, string rdStatus, int PmgsyScheme);//ATR_Change

        List<qm_inspection_list_atrr_Result> ATRDetailssDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                            int toMonth, int toYear, string atrStatus, string rdStatus, int PmgsyScheme, string flag);//ATR_Change


        string QMATRRegradeDAL(QMATRRegradeModel qmATRRegradeModel);
        string QMDeleteATRDetailsDAL(int obsId, int atrId);
        #endregion

        #region 2 tier atr vikky
        List<qm_inspection_list_2_Tier_atrr_Result> ATR2TierDetailssDAL(int stateCode, int monitorCode, int fromMonth, int fromYear,
                                         int toMonth, int toYear, string atrStatus, string rdStatus, int PmgsyScheme, string flag);//ATR_Change
        Array Get2TierPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int obsId, int QM_ATR_ID);

        string QM2TierSaveATRRegradeDAL(QMATRRegradeModel qmATRRegradeModel);
        #endregion

        #region CQC
        Array CQCMonitorsScheduledRoadListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int monitorCode, int inspMonth, int inspYear);
        #endregion


        #region Reports
        Array QMInspectionReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords);
        Array QMOverallDistrictwiseInspDetailsReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, Int32 stateCode, Int32 districtCode, string qmType);
        Array QMGradingAndATRListingDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int fromYear, int toYear, int fromMonth, int toMonth, string qmType);
        Array QMGradingComparisionListingDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int state, string district, int year, string month);
        Array QMMonthwiseInspectionListingDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int state, int year, string qmType);
        Array QMATRDetailsReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, Int32 fromyear, Int32 frommonth, Int32 toyear, Int32 tomonth);
        Array QMItemwiseNQMInspectionReportDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string state, int grade, Int32 fromyear, Int32 frommonth, Int32 toyear, Int32 tomonth, int citem, string qmType);
        List<USP_QM_UNSATISFACTORY_WORKS_FOR_STATE_Result> UnsatisfactoryWorkDetailsDAL(int stateCode, string qmType);
        List<USP_QM_COMMENCED_WORKS_Result> CommencedWorkDetailsDAL();
        List<USP_QM_COMMENCED_INSP_DETAILS_Result> CommencedInspDetailsDAL(int state, int duration, string qmType);
        List<USP_QM_COMMENCED_WORKS_DETAILS_Result> CommencedRoadDetailsDAL(int state, int duration);
        List<USP_QM_COMPLETED_WORKS_Result> CompletedWorksDAL(string frmDate, string toDate);
        List<USP_QM_COMPLETED_INSP_DETAILS_Result> CompletedInspDetailsDAL(int roadCode, string qmType);
        List<USP_QM_DEFFECTIVE_GRAPH_Result> DefectiveGradingLineChartDAL(int state, int year, string rdStatus, string valueType);
        #endregion


        #region Maintenance_Inspection

        bool SaveMaintenanceInspectionDAL(MaintenanceInspectionViewModel model, out string message);
        List<SelectListItem> PopulateMaintenanceMonitorsDAL();
        List<SelectListItem> PopulateMaintenanceInspectionRoadsDAL(string id);
        decimal? GetProposalLengthDAL(int proposalCode);
        List<SelectListItem> PopulateRoadByPackageDAL(string package);
        List<SelectListItem> PopulatePackageDAL(string id);

        #endregion


        #region LabDetails --- developed by Anand Singh (Integrated on 09/09/2014 by Shyam Yadav)
        Array GetPIU1TierLabDetailListDAL(int state, int district, string level, out long totalRecords);
        bool LabDetailSave(int agreementCode, string packageId, string labEshtablishedDate, ref string message);
        string AddLabFileUploadDetailsDAL(QUALITY_QM_LAB_DETAILS lst_lab_files);
        Array GetLabFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int labId);
        bool LabDetailDeleteFinalizeDAL(int id, string type, ref string message);
        bool AddLABSaveDetailsDAL(LabDateViewModel labDateViewModel, ref string message);
        string DeleteLabFileDetailsDAL(int QM_FILE_ID);
        string UpdateLabImageDetailsDAL(LabFileUploadViewModel labfileuploadViewModel);
        #endregion


        #region MP Visit

        Array GetRoadListForMPVisitDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, string filters, int stateCode, int districtCode, int blockCode);

        bool AddMPVisitDetailsDAL(FillMPVisitModel model, ref string message);

        Array GetMPVisitListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int prRoadCode);

        FillMPVisitModel GetMPVisitDetailsDAL(int visitCode);

        bool UpdateMpVisitDAL(FillMPVisitModel model, ref string message);

        bool DeleteMPDAL(int visitCode);

        int GetBlockCodeDAL(int prRoadCode);

        QUALITY_QM_MP_VISIT GetVisitDetails(int VisitCode);

        IMS_SANCTIONED_PROJECTS GetRoadDetails(int prRoadCode);

        #region File Upload

        string AddFileUploadMPVisitDetailsDAL(List<QUALITY_QM_MP_VISIT_FILES> lst_files);

        Array GetImageListMPVisitDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MP_VISIT_ID);

        Array GetPDFListMPVisitDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MP_VISIT_ID);

        string DeleteMPVisitFileDetailsDAL(QUALITY_QM_MP_VISIT_FILES visit_files);

        #endregion

        #endregion

        // Added By Aanad 10 DEC 2015
        #region TEAM Details
        string QMTeamCreateDAL(QUALITY_QM_TEAM team);
        string QMTeamDeActivateDAL(int teamid);
        void GenerateLetterForTeam(QMLetterModel model);
        #endregion

        #region Tour Generate Invoice
        Array GetTourPaymentListDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_YEAR, int Month, int Monitor);
        Array GetTourInvoiceListDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int scheduleCode);
        string AddTourInvoiceDetailsDAL(QMTourGenerateInvoice model);
        bool DeleteTourGeneratedInvoiceDAL(int invoiceID, ref string message);
        #endregion

        #region Tour Payment
        Array ListTourPaymentInvoiceDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_YEAR, int Month, int Monitor);
        Array GetTourPaymentListDAL(int invoiceCode, int page, int rows, string sidx, string sord, out long totalRecords);
        bool AddTourPaymentDetailsDAL(TourAddPaymentModel model, ref string message);
        TourAddPaymentModel GetTourPaymentDetailsDAL(int PayemntCode, int IMSInvoiceCode);
        bool UpdateTourPaymentDetailsDAL(TourAddPaymentModel model, ref string message);
        bool DeleteTourPaymentDetailsDAL(int paymentCode, int imsInvoiceCode, ref string message);
        bool FinalizeTourPaymentDetailsDAL(int paymentCode, int imsInvoiceCode, ref string message);
        #endregion

        #region Bank DEtails
        Array ListBankDetailsQMDAL(int adminQmCode, int? page, int? rows, string sidx, string sord, out long totalRecords);
        bool AddBankDetailsQM(QMBankDetailsModel model, ref string message);
        //bool IsBankDetailsExistsQM(QMBankDetailsModel model, ref string message);
        //bool checkAlreadyExistsQM(QMBankDetailsModel model, ref string message)
        bool DeleteBankDetailsQM(int accountId, int customerId, ref string message);
        #endregion

        #region Joint Inspection
        byte[] GenerateJointInspectionPDF(int id);
        Array GetJointInspectionDetailsList(int blockCode, string ptype, string inspstatus, int page, int rows, string sidx, string sord, out Int32 totalRecords);
        QMJIViewModel QMJIHeader(int roadCode);
        bool SaveQMJointInspectionDetailsDAL(QMJIViewModel model, ref string message);
        QMJIViewModel GetJIDetailsDAL(int jiCode);
        string UpdateQMJointInspectionDetailsDAL(QMJIViewModel model);
        string QMJIDeleteDAL(int jiCode);
        string QMJIATRAddDAL(QMJIATRModel model);
        string QMJIATRDeleteDAL(int atfileId);
        List<QMJIATRModel> QMJIATRListDAL(int jiCode);
        Array GetJIDetailsListDAL(int prRoadCode, int page, int rows, string sidx, string sord, out Int32 totalRecords);
        #endregion

        #region Quality Complain
        bool QMComplainAddDAL(QMComplainViewModel complainModel);
        Array QMComplainListDAL(QMComplainFilterViewModel complainFilterModel);
        QMComplainDetailViewModel GetQMComplainDAL(int ComplainId);
        bool QMComplainDetailFileUploadDAL(QMComplainUploadViewModel uploadModel);
        bool QMComplainFileUploadDAL(QMComplainUploadViewModel uploadModel);
        string QMComplainDeleteDAL(int complainId);
        string QMComplainDetailDeleteDAL(int detailId);
        #endregion

        #region Road List to Assigned roads against Schedule contractor wise added by deendayal
        Array GetRoadListToAssignContractorwiseDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string filters, int districtCode, int adminSchCode, int sanctionYear);
        #endregion


        #region Get current work status
        string GetCurrentworkStatus(int road_code);
        #endregion

        //added by abhinav
        #region Delete uploaded inspection image uploaded through web

        bool DeleteInspectionImageDAL(int fieldID, string filename, int obsID, string Year);

        #endregion

        #region Upload Inspection by NRIDA Officials
        Array GetInspRoadList(int stateCode, int districtCode, int blockCode, int yearCode, int batch, int scheme, string proposalType, int page, int rows, string sidx, string sord, out long totalRecords);
        bool AddInspByNRIDADetails(FormCollection formCollection, HttpPostedFileBase postedBgFile, out String IsValid);
        Array GetInspByNRIDADetailsList(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetInspUploadedDetailsList(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);
        #endregion

        #region Work List Added by Chandra Darshan Agrawal

        Array GetRoadListDAL(int stateCode, int districtCode, int ddlTech, int page, int rows, string sidx, string sord, out long totalRecords, string filter);

        #endregion

        #region Monitor Proficiency Test Score

        Array GetProficiencyTestScoreList(string filters, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetProficiencyTestScoreListDetails(int examId, string filters, int page, int rows, string sidx, string sord, out long totalRecords);

        //added by hrishikesh
        Array GetmonitorDetailsListJSONDAL(string data, string filters, int page, int rows, string sidx, string sord, out long totalRecords);

        bool AddProficiencyScore(FormCollection formCollection, out String IsValid);
        bool EditProficiencyTestScore(FormCollection formCollection, out String IsValid);
        Array GetProficiencyTestScoreListCQC(string filters, string monitorType, int page, int rows, string sidx, string sord, out long totalRecords);
        bool EditProficiencyScoreDetails(FormCollection formCollection, out String IsValid);
        bool GetUploadDetails(FormCollection formCollection, HttpPostedFileBase fileSrc, ref string message);

        #endregion

        #region Allocate Works to Technical Expert

        #region Add TE details and create user

        Array LoadTechnicalExpertDetailsGrid(int page, int rows, string sidx, string sord, out long totalRecords);
        bool AddTechnicalExpertDetails(FormCollection formCollection, out String IsValid);
        bool UpdateTechnicalExpertDetails(FormCollection formCollection, out String IsValid);
        bool CreateTechnicalExpertUserDAL(int technicalExpertId);

        #endregion

        #region Allocate TE at CQC

        Array QMInspectionDetailsAllocateTechExpertDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int stateCode, int monitorCode, int fromMonth, int fromYear, int toMonth, int toYear, string qmType, int schemeType, string roadStatus, string roadOrBridge, string gradeType, out List<int> allocatedWorksObservationIdsList);
        bool AssignTechExpertDAL(int techExpertID, int[] submitarray, out string isValidMsg);
        bool RemoveTechnicalExpertDAL(int observationId, out string isValidMsg);
        bool FinalizeTechnicalExpertDAL(string[] arrWorksToFinalize, out string isValidMsg);
        TEQMFillObservationModel TEQMObservationDetailsDAL(int obsId);

        #endregion

        #region Add remark by TE 
        Array QMInspectionDetailsTechExpertReviewDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords,
                                                      int stateCode, int monitorCode, int fromMonth, int fromYear,
                                                      int toMonth, int toYear, string qmType, int schemeType, string roadStatus, string roadOrBridge, string gradeType);

        bool SaveTechExpertRemarksDAL(Dictionary<int, string> itemwiseRemark, int obsId, out string message, string generalObs);

        bool UpdateTechExpertRemarksDAL(Dictionary<int, string> itemwiseRemark, int obsId, out string message, string generalObs);
        #endregion

        #region Add Payment Information For TE

        Array TechnicalExpertPaymentDetailsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords);
        Array AddTechnicalExpertPaymentListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int teId, out List<int> allocatedWorksObservationIdsList);
        Array AddTechnicalExpertPaymentWiseListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, string teId, out List<int> allocatedWorksObservationIdsList);
        bool AddPaymentDetailsDAL(int[] submitarray, out string isValidMsg);

        #endregion

        #endregion
    }

}