#region HEADER
/*
 * Project Id:

 * Project Name:OMMAS-II

 * File Name: ExecutionDAL.cs

 * Author : Vikram Nandanwar

 * Creation Date :30/May/2013

 * Desc : This class is used as data access layer to perform Save,Edit,Delete and listing of Execution screens.  
*/

#endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PMGSY.Models.Execution;
using PMGSY.Models;
using PMGSY.Models.PaymentModel;
using System.Web.Script.Serialization;
using PMGSY.Controllers;
using PMGSY.Common;
using PMGSY.Extensions;
using System.Web.Mvc;
using System.Data.Entity;
using PMGSY.BAL.Execution;
using System.Data.Entity.Infrastructure;
using System.IO;
using System.Transactions;
using System.Configuration;
using System.Data.Entity.Core;


namespace PMGSY.DAL.Execution
{
    public class ExecutionDAL : IExecutionDAL
    {
        PMGSYEntities dbContext = null;
        Dictionary<string, string> decryptedParameters = null;
        string[] encryptedParameters = null;

        public bool UpdateRoadProgressDetailsITNO(ProposalFilterForITNOViewModel progressModel, ref string message)
        {
            decimal perChange = 0;
            string changeType = "";
            try
            {
                dbContext = new PMGSYEntities();

                EXEC_ROADS_MONTHLY_STATUS execRoads = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(progressModel.ProposalCode, progressModel.EXEC_PROG_YEAR, progressModel.EXEC_PROG_MONTH);
                if (execRoads == null)
                {
                    message = "Physical progress details not exist for this road.";
                    return false;
                }

                var query = (from length in dbContext.IMS_PROGRESS_LENGTH_COMPLETION
                             where length.IMS_PR_ROAD_CODE == progressModel.ProposalCode && length.IMS_IS_MRD_APPROVED == "Y"
                             select new
                             {
                                 length.IMS_PERCENTAGE_CHANGE,
                                 length.IMS_CHANGE_TYPE
                             }).ToList();
                if (query.Count() > 0)
                {
                    foreach (var itm in query)
                    {
                        perChange = itm.IMS_PERCENTAGE_CHANGE;
                        changeType = itm.IMS_CHANGE_TYPE;
                    }
                }
                else
                {
                    perChange = 10;
                    changeType = "0";
                }
                decimal rLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == progressModel.ProposalCode).Select(m => m.IMS_PAV_LENGTH).FirstOrDefault();

                decimal roadLength = 0;// changeType == "I" ? (rLength + (rLength * (perChange / 100))) : (rLength - (rLength * (perChange / 100)));
                if (rLength > 0)
                {
                    if ((changeType == "I") || (changeType == "0"))
                    {
                        if (changeType == "0")
                        {
                            perChange = 10;
                        }
                        roadLength = (rLength + (rLength * (perChange / 100)));

                        if (progressModel.EXEC_PREPARATORY_WORK > roadLength)
                        {
                            message = "Preparatory works length should not be greater than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_EARTHWORK_SUBGRADE > roadLength)
                        {
                            message = "Subgrade earth works length should not be greater than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_SUBBASE_PREPRATION > roadLength)
                        {
                            message = "Subbase works length should not be greater than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_BASE_COURSE > roadLength)
                        {
                            message = "Base course works length should not be greater than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_SURFACE_COURSE > roadLength)
                        {
                            message = "surface course length should not be greater than " + roadLength;
                            return false;
                        }
                        //if (progressModel.EXEC_MISCELANEOUS > roadLength)
                        //{
                        //    message = "Miscelaneous works length should not be greater then Road Length.";
                        //    return false;
                        //}
                        if (progressModel.EXEC_COMPLETED > roadLength)
                        {
                            message = "Completed works length should not be greater than " + roadLength;
                            return false;
                        }
                    }
                    else if (changeType == "D")
                    {
                        roadLength = (rLength - (rLength * (perChange / 100)));

                        if (progressModel.EXEC_PREPARATORY_WORK < roadLength)
                        {
                            message = "Preparatory works length should not be less than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_EARTHWORK_SUBGRADE < roadLength)
                        {
                            message = "Subgrade earth works length should not be less than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_SUBBASE_PREPRATION < roadLength)
                        {
                            message = "Subbase works length should not be less than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_BASE_COURSE < roadLength)
                        {
                            message = "Base course works length should not be less than " + roadLength;
                            return false;
                        }
                        if (progressModel.EXEC_SURFACE_COURSE < roadLength)
                        {
                            message = "surface course length should not be less than " + roadLength;
                            return false;
                        }
                        //if (progressModel.EXEC_MISCELANEOUS < roadLength)
                        //{
                        //    message = "Miscelaneous works length should not be less then Road Length.";
                        //    return false;
                        //}
                        if (progressModel.EXEC_COMPLETED < roadLength)
                        {
                            message = "Completed works length should not be less than " + roadLength;
                            return false;
                        }
                    }
                    #region Change in Code
                    //else if (changeType == "0")
                    //{
                    //    decimal maxroadLength = (rLength + (rLength * (perChange / 100)));
                    //    decimal minroadLength = (rLength - (rLength * (perChange / 100)));

                    //    if ((progressModel.EXEC_PREPARATORY_WORK < minroadLength) || (progressModel.EXEC_PREPARATORY_WORK > maxroadLength))
                    //    {
                    //        message = "Preparatory works length should be between " + minroadLength + " and " + maxroadLength;// +" of Road Length.";
                    //        return false;
                    //    }
                    //    if ((progressModel.EXEC_EARTHWORK_SUBGRADE < minroadLength) || (progressModel.EXEC_EARTHWORK_SUBGRADE > maxroadLength))
                    //    {
                    //        message = "Subgrade earth works length should be between " + minroadLength + " and " + maxroadLength;// ;
                    //        return false;
                    //    }
                    //    if ((progressModel.EXEC_SUBBASE_PREPRATION < minroadLength) || (progressModel.EXEC_SUBBASE_PREPRATION > maxroadLength))
                    //    {
                    //        message = "Subbase works length should be between  " + minroadLength + " and " + maxroadLength;//  Road Length.";
                    //        return false;
                    //    }
                    //    if ((progressModel.EXEC_BASE_COURSE < minroadLength) || (progressModel.EXEC_BASE_COURSE > maxroadLength))
                    //    {
                    //        message = "Base course works length should be between  " + minroadLength + " and " + maxroadLength;//  of Road Length.";
                    //        return false;
                    //    }
                    //    if ((progressModel.EXEC_SURFACE_COURSE < minroadLength) || (progressModel.EXEC_SURFACE_COURSE > maxroadLength))
                    //    {
                    //        message = "surface course length should be between  " + minroadLength + " and " + maxroadLength;// of Road Length.";
                    //        return false;
                    //    }
                    //    //if ((progressModel.EXEC_MISCELANEOUS < minroadLength) || (progressModel.EXEC_MISCELANEOUS > maxroadLength))
                    //    //{
                    //    //    message = "Miscelaneous works length should be between  " + minroadLength + " and " + maxroadLength;//  of Road Length.";
                    //    //    return false;
                    //    //}
                    //    if ((progressModel.EXEC_COMPLETED < minroadLength) || (progressModel.EXEC_COMPLETED > maxroadLength))
                    //    {
                    //        message = "Completed works length should be between  " + minroadLength + " and " + maxroadLength;// of Road Length.";
                    //        return false;
                    //    }
                    //}
                    #endregion
                }

                execRoads.EXEC_BASE_COURSE = progressModel.EXEC_BASE_COURSE;
                execRoads.EXEC_CD_WORKS = progressModel.EXEC_CD_WORKS;
                execRoads.EXEC_COMPLETED = progressModel.EXEC_COMPLETED;
                execRoads.EXEC_EARTHWORK_SUBGRADE = progressModel.EXEC_EARTHWORK_SUBGRADE;
                //execRoads.EXEC_ISCOMPLETED = progressModel.EXEC_ISCOMPLETED;
                execRoads.EXEC_LSB_WORKS = progressModel.EXEC_LSB_WORKS;
                execRoads.EXEC_MISCELANEOUS = progressModel.EXEC_MISCELANEOUS;
                execRoads.EXEC_PREPARATORY_WORK = progressModel.EXEC_PREPARATORY_WORK;
                execRoads.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                execRoads.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;
                execRoads.EXEC_SIGNS_STONES = progressModel.EXEC_SIGNS_STONES;
                execRoads.EXEC_SUBBASE_PREPRATION = progressModel.EXEC_SUBBASE_PREPRATION;
                execRoads.EXEC_SURFACE_COURSE = progressModel.EXEC_SURFACE_COURSE;

                execRoads.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                execRoads.USERID = PMGSYSession.Current.UserId;
                dbContext.Entry(execRoads).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #region Work Program DAL Definition

        /// <summary>
        /// list of proposal details
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalFilterViewModel">data containing filter details</param>
        /// <returns></returns>
        public Array GetProposalsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, ProposalFilterViewModel proposalFilterViewModel)
        {
            try
            {
                JavaScriptSerializer js = null;
                CommonFunctions.SearchJson test = new CommonFunctions.SearchJson();
                string roadName = string.Empty;

                if (proposalFilterViewModel.filterParameters != null)
                {
                    js = new JavaScriptSerializer();
                    test = js.Deserialize<CommonFunctions.SearchJson>(proposalFilterViewModel.filterParameters);
                    foreach (CommonFunctions.rules item in test.rules)
                    {
                        switch (item.field)
                        {
                            case "MAST_ER_ROAD_NAME": roadName = item.data;
                                break;
                            default:
                                break;
                        }
                    }
                }//end of get filter parameter 


                dbContext = new Models.PMGSYEntities();
                var listProposals = (from ImsSanctionedProjects in dbContext.IMS_SANCTIONED_PROJECTS
                                     join TendAgreementDetails in dbContext.TEND_AGREEMENT_DETAIL
                                     on ImsSanctionedProjects.IMS_PR_ROAD_CODE equals TendAgreementDetails.IMS_PR_ROAD_CODE
                                     join TendAgreementMaster in dbContext.TEND_AGREEMENT_MASTER
                                     on TendAgreementDetails.TEND_AGREEMENT_CODE equals TendAgreementMaster.TEND_AGREEMENT_CODE
                                     where
                                     ((proposalFilterViewModel.MAST_BLOCK_CODE == -1 ? 1 : ImsSanctionedProjects.MAST_BLOCK_CODE) == (proposalFilterViewModel.MAST_BLOCK_CODE == -1 ? 1 : proposalFilterViewModel.MAST_BLOCK_CODE)) &&
                                     ((proposalFilterViewModel.IMS_YEAR == -1 ? 1 : ImsSanctionedProjects.IMS_YEAR) == (proposalFilterViewModel.IMS_YEAR == -1 ? 1 : proposalFilterViewModel.IMS_YEAR)) &&
                                         //((proposalFilterViewModel.IMS_STREAMS == -1 ? 1 : ImsSanctionedProjects.IMS_STREAMS) == (proposalFilterViewModel.IMS_STREAMS == -1 ? 1 : proposalFilterViewModel.IMS_STREAMS)) &&
                                         //((proposalFilterViewModel.IMS_BATCH == -1 ? 1 : ImsSanctionedProjects.IMS_BATCH) == (proposalFilterViewModel.IMS_BATCH == -1 ? 1 : proposalFilterViewModel.IMS_BATCH)) &&
                                     ((proposalFilterViewModel.IMS_PACKAGE == "All" ? "%" : ImsSanctionedProjects.IMS_PACKAGE_ID) == (proposalFilterViewModel.IMS_PACKAGE == "All" ? "%" : proposalFilterViewModel.IMS_PACKAGE)) &&
                                     ((proposalFilterViewModel.IMS_PROPOSAL_TYPE == "A" ? "%" : ImsSanctionedProjects.IMS_PROPOSAL_TYPE) == (proposalFilterViewModel.IMS_PROPOSAL_TYPE == "A" ? "%" : proposalFilterViewModel.IMS_PROPOSAL_TYPE)) &&
                                         //new filters added by Vikram 
                                    (proposalFilterViewModel.Batch == 0 ? 1 : ImsSanctionedProjects.IMS_BATCH) == (proposalFilterViewModel.Batch == 0 ? 1 : proposalFilterViewModel.Batch) &&
                                    (proposalFilterViewModel.Collaboration <= 0 ? 1 : ImsSanctionedProjects.IMS_COLLABORATION) == (proposalFilterViewModel.Collaboration <= 0 ? 1 : proposalFilterViewModel.Collaboration) &&
                                    (proposalFilterViewModel.UpgradeConnect == "0" ? "%" : ImsSanctionedProjects.IMS_UPGRADE_CONNECT) == (proposalFilterViewModel.UpgradeConnect == "0" ? "%" : proposalFilterViewModel.UpgradeConnect) &&
                                         //end of change
                                   ImsSanctionedProjects.MAST_STATE_CODE == PMGSYSession.Current.StateCode &&
                                   ImsSanctionedProjects.MAST_DISTRICT_CODE == PMGSYSession.Current.DistrictCode &&
                                   TendAgreementMaster.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                   ImsSanctionedProjects.IMS_SANCTIONED == "Y" &&
                                   TendAgreementMaster.TEND_AGREEMENT_TYPE == "C" &&
                                   (ImsSanctionedProjects.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode) &&
                                   ImsSanctionedProjects.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014 
                                   && ImsSanctionedProjects.IMS_DPR_STATUS == "N" // new change done by Vikram
                                     select ImsSanctionedProjects
                                                               ).Distinct().OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList();
                //&&(roadName == string.Empty ? "%" : ImsSanctionedProjects.IMS_ROAD_NAME).Contains(roadName == string.Empty ? "%" : roadName)&&

                totalRecords = listProposals.Count();



                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {

                        switch (sidx)
                        {

                            case "Block":
                                listProposals = listProposals.OrderBy(x => x.MASTER_BLOCK.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "Year":
                                listProposals = listProposals.OrderBy(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "Package":
                                listProposals = listProposals.OrderBy(x => x.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "PackageNumber":
                                listProposals = listProposals.OrderBy(x => x.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "RoadBridgeName":
                                listProposals = listProposals.OrderBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "RoadBridgeLength":
                                listProposals = listProposals.OrderBy(x => x.IMS_PAV_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {

                            case "Block":
                                listProposals = listProposals.OrderByDescending(x => x.MASTER_BLOCK.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "Year":
                                listProposals = listProposals.OrderByDescending(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "Package":
                                listProposals = listProposals.OrderByDescending(x => x.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "PackageNumber":
                                listProposals = listProposals.OrderByDescending(x => x.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "RoadBridgeName":
                                listProposals = listProposals.OrderByDescending(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "RoadBridgeLength":
                                listProposals = listProposals.OrderByDescending(x => x.IMS_PAV_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                break;
                        }
                    }
                }
                else
                {
                    listProposals = listProposals.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }
                return listProposals.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {                         
                                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.ToString().Trim(),
                                    propDetails.IMS_YEAR == null ? "-" :(propDetails.IMS_YEAR + "-" + (propDetails.IMS_YEAR + 1)).ToString(),
                                    propDetails.IMS_BATCH == null ? "-" : ("Batch " +propDetails.IMS_BATCH.ToString()),
                                    propDetails.IMS_PACKAGE_ID,
                                    propDetails.IMS_PROPOSAL_TYPE=="P"?"Road":"Bridge",
                                   // propDetails.IMS_ROAD_NAME,
                                    propDetails.IMS_PROPOSAL_TYPE== "P"?propDetails.IMS_ROAD_NAME:propDetails.IMS_BRIDGE_NAME,
                                    propDetails.IMS_PROPOSAL_TYPE=="P"?propDetails.IMS_PAV_LENGTH.ToString():propDetails.IMS_BRIDGE_LENGTH.ToString(),   
             
                                    //(propDetails.IMS_SANCTIONED_PAV_AMT + propDetails.IMS_SANCTIONED_CD_AMT + propDetails.IMS_SANCTIONED_PW_AMT + propDetails.IMS_SANCTIONED_OW_AMT + propDetails.IMS_SANCTIONED_BW_AMT + propDetails.IMS_SANCTIONED_RS_AMT + propDetails.IMS_SANCTIONED_BS_AMT).ToString(),

                                    ///Change made by SAMMED PATIL on 29MAR2016 
                                    PMGSYSession.Current.PMGSYScheme == 1 ? 
                                                      ((propDetails.IMS_SANCTIONED_PAV_AMT == null ? 0 : propDetails.IMS_SANCTIONED_PAV_AMT) + (propDetails.IMS_SANCTIONED_PW_AMT == null ? 0 : propDetails.IMS_SANCTIONED_PW_AMT) + (propDetails.IMS_SANCTIONED_OW_AMT == null ? 0 : propDetails.IMS_SANCTIONED_OW_AMT) + (propDetails.IMS_SANCTIONED_CD_AMT == null ? 0 : propDetails.IMS_SANCTIONED_CD_AMT) + (propDetails.IMS_SANCTIONED_BW_AMT == null ? 0 : propDetails.IMS_SANCTIONED_BW_AMT) + (propDetails.IMS_SANCTIONED_BS_AMT == null ? 0 : propDetails.IMS_SANCTIONED_BS_AMT) + (propDetails.IMS_SANCTIONED_RS_AMT == null ? 0 : propDetails.IMS_SANCTIONED_RS_AMT)).ToString()
                                                    : ((propDetails.IMS_SANCTIONED_PAV_AMT == null ? 0 : propDetails.IMS_SANCTIONED_PAV_AMT) + (propDetails.IMS_SANCTIONED_PW_AMT == null ? 0 : propDetails.IMS_SANCTIONED_PW_AMT) + (propDetails.IMS_SANCTIONED_OW_AMT == null ? 0 : propDetails.IMS_SANCTIONED_OW_AMT) + (propDetails.IMS_SANCTIONED_CD_AMT == null ? 0 : propDetails.IMS_SANCTIONED_CD_AMT) + (propDetails.IMS_SANCTIONED_FC_AMT == null ? 0 : propDetails.IMS_SANCTIONED_FC_AMT) + (propDetails.IMS_SANCTIONED_HS_AMT == null ? 0 : propDetails.IMS_SANCTIONED_HS_AMT) + (propDetails.IMS_SANCTIONED_BW_AMT == null ? 0 : propDetails.IMS_SANCTIONED_BW_AMT) + (propDetails.IMS_SANCTIONED_BS_AMT == null ? 0 : propDetails.IMS_SANCTIONED_BS_AMT)).ToString(),

                                    //dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(s => s.TEND_AGREEMENT_AMOUNT).SingleOrDefault().ToString(),
                    
                                    URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+propDetails.IMS_PR_ROAD_CODE.ToString().Trim()}),   
                                    URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+propDetails.IMS_PR_ROAD_CODE.ToString().Trim()}),   
                   }
                }).ToArray();
            }
            catch (Exception)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// saves the Work program details
        /// </summary>
        /// <param name="workProgramViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddWorkProgramDetails(WorkProgramViewModel workProgramViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                // date validation logic start

                TEND_AGREEMENT_MASTER tendAgreementMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == (dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == workProgramViewModel.IMS_PR_ROAD_CODE).OrderBy(c => c.TEND_AGREEMENT_ID).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault())).FirstOrDefault();

                if (tendAgreementMaster == null)
                {
                    message = "An Error Occured While proccessing your request";
                    return false;
                }

                DateTime? startDate = ConvertStringToDate(workProgramViewModel.EXEC_START_DATE);

                if (startDate < tendAgreementMaster.TEND_DATE_OF_AGREEMENT)
                {
                    message = "Start Date (" + workProgramViewModel.EXEC_START_DATE + ") must be greater than Date of Agreement (" + ConvertDateToString(tendAgreementMaster.TEND_DATE_OF_AGREEMENT) + ")";
                    return false;
                }

                //if (startDate < tendAgreementMaster.TEND_DATE_OF_WORK_ORDER)
                //{
                //    message = "Start Date (" + workProgramViewModel.EXEC_START_DATE + ") must be greater than Date of Work Order (" + ConvertDateToString(tendAgreementMaster.TEND_DATE_OF_WORK_ORDER) + ")";
                //    return false;
                //}

                //if (ConvertStringToDate(workProgramViewModel.EXEC_END_DATE) > tendAgreementMaster.TEND_AGREEMENT_END_DATE)
                //{
                //    message = "End Date (" + workProgramViewModel.EXEC_END_DATE + ") must be less than Agreement End Date (" + ConvertDateToString(tendAgreementMaster.TEND_AGREEMENT_END_DATE) + ")";
                //    return false;
                //}

                //data validation for Road work completed start 

                DateTime? execEndDate = dbContext.EXEC_WORK_PROGRAM.Where(m => m.IMS_PR_ROAD_CODE == workProgramViewModel.IMS_PR_ROAD_CODE).Max(s => s.EXEC_END_DATE);

                // Road work completed code(26) check

                if (workProgramViewModel.MAST_HEAD_CODE == 23)
                {
                    if (ConvertStringToDate(workProgramViewModel.EXEC_START_DATE) < execEndDate)
                    {
                        message = "Start Date (" + workProgramViewModel.EXEC_START_DATE + ") must be greater than last entered End Date (" + ConvertDateToString(execEndDate) + ")";
                        return false;
                    }
                }

                //if Road work is completed then all other entry date must be less than End date of completed date
                if (dbContext.EXEC_WORK_PROGRAM.Where(m => m.IMS_PR_ROAD_CODE == workProgramViewModel.IMS_PR_ROAD_CODE && m.MAST_HEAD_CODE == 23).Any())
                {
                    if (ConvertStringToDate(workProgramViewModel.EXEC_END_DATE) > execEndDate)
                    {
                        message = "End Date (" + workProgramViewModel.EXEC_END_DATE + ") must be less than Road Completed End Date(" + ConvertDateToString(execEndDate) + ")";
                        return false;
                    }
                }

                //data validation for Road work completed end


                // date validation logic end

                //data copy view model to actual model
                EXEC_WORK_PROGRAM execWorkProgramModel = new EXEC_WORK_PROGRAM();
                execWorkProgramModel.IMS_PR_ROAD_CODE = workProgramViewModel.IMS_PR_ROAD_CODE;
                execWorkProgramModel.MAST_HEAD_CODE = workProgramViewModel.MAST_HEAD_CODE;
                execWorkProgramModel.EXEC_START_DATE = ConvertStringToDate(workProgramViewModel.EXEC_START_DATE);
                execWorkProgramModel.EXEC_END_DATE = ConvertStringToDate(workProgramViewModel.EXEC_END_DATE);
                dbContext.EXEC_WORK_PROGRAM.Add(execWorkProgramModel);
                dbContext.SaveChanges();
                message = "Work Program details saved successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the work program details
        /// </summary>
        /// <param name="workProgramViewModel">model containing the updates work program details</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool EditWorkProgramDetails(WorkProgramViewModel workProgramViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                TEND_AGREEMENT_MASTER tendAgreementMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == (dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == workProgramViewModel.IMS_PR_ROAD_CODE).OrderBy(c => c.TEND_AGREEMENT_ID).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault())).FirstOrDefault();

                if (tendAgreementMaster == null)
                {
                    message = "An Error Occured While proccessing your request";
                    return false;
                }

                DateTime? startDate = ConvertStringToDate(workProgramViewModel.EXEC_START_DATE);

                if (startDate < tendAgreementMaster.TEND_DATE_OF_AGREEMENT)
                {
                    message = "Start Date (" + workProgramViewModel.EXEC_START_DATE + ") must be greater than Date of Agreement (" + ConvertDateToString(tendAgreementMaster.TEND_DATE_OF_AGREEMENT) + ")";
                    return false;
                }

                //if (ConvertStringToDate(workProgramViewModel.EXEC_END_DATE) > tendAgreementMaster.TEND_AGREEMENT_END_DATE)
                //{
                //    message = "End Date " + workProgramViewModel.EXEC_END_DATE + " must be less than Agreement End Date (" + ConvertDateToString(tendAgreementMaster.TEND_AGREEMENT_END_DATE) + ")";
                //    return false;
                //}


                //data validation for Road work completed start 

                DateTime? execEndDate = dbContext.EXEC_WORK_PROGRAM.Where(m => m.IMS_PR_ROAD_CODE == workProgramViewModel.IMS_PR_ROAD_CODE).Max(s => s.EXEC_END_DATE);

                // Road work completed code(26) check

                if (workProgramViewModel.MAST_HEAD_CODE == 23)
                {
                    if (ConvertStringToDate(workProgramViewModel.EXEC_START_DATE) < execEndDate)
                    {
                        message = "Start Date (" + workProgramViewModel.EXEC_START_DATE + ") must be greater than last entered End Date (" + ConvertDateToString(execEndDate) + ")";
                        return false;
                    }
                }

                //if Road work is completed then all other entry date must be less than End date of completed date
                if (dbContext.EXEC_WORK_PROGRAM.Where(m => m.IMS_PR_ROAD_CODE == workProgramViewModel.IMS_PR_ROAD_CODE && m.MAST_HEAD_CODE == 23).Any())
                {
                    if (ConvertStringToDate(workProgramViewModel.EXEC_END_DATE) > execEndDate)
                    {
                        message = "End Date (" + workProgramViewModel.EXEC_END_DATE + ") must be less than Road Completed End Date(" + ConvertDateToString(execEndDate) + ")";
                        return false;
                    }
                }

                //data validation for Road work completed end

                // date validation logic end

                EXEC_WORK_PROGRAM workProgramModel = dbContext.EXEC_WORK_PROGRAM.Where(m => m.IMS_PR_ROAD_CODE == workProgramViewModel.IMS_PR_ROAD_CODE && m.MAST_HEAD_CODE == workProgramViewModel.MAST_HEAD_CODE).FirstOrDefault();
                if (workProgramModel == null)
                {
                    message = "An Error Occured While processing your request.";
                    return false;
                }

                //copy view model data into Actual Model
                workProgramModel.MAST_HEAD_CODE = workProgramViewModel.MAST_HEAD_CODE;
                workProgramModel.EXEC_START_DATE = ConvertStringToDate(workProgramViewModel.EXEC_START_DATE);
                workProgramModel.EXEC_END_DATE = ConvertStringToDate(workProgramViewModel.EXEC_END_DATE);

                dbContext.Entry(workProgramModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                message = "Work Program details updated successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }


        }

        /// <summary>
        /// deletes the Work Program details
        /// </summary>
        /// <param name="imsPrRoadCode">proposal id</param>
        /// <param name="headCode">head id</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool DeleteWorkProgramDetails(int imsPrRoadCode, int headCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                EXEC_WORK_PROGRAM execWorkModel = dbContext.EXEC_WORK_PROGRAM.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode && m.MAST_HEAD_CODE == headCode).FirstOrDefault();

                if (execWorkModel == null)
                {
                    message = "An Error Occurred While Your Processing Request.";
                    return false;
                }

                dbContext.EXEC_WORK_PROGRAM.Remove(execWorkModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException)
            {
                message = "Work Program details can not be deleted because other details for work program are entered.";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occurred While Your Processing Request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the Work Program details for updation
        /// </summary>
        /// <param name="imsPrRoadCode">proposal code</param>
        /// <param name="headCode"></param>
        /// <returns></returns>
        public WorkProgramViewModel GetWorkProgramDetails(int imsPrRoadCode, int headCode)
        {
            try
            {
                dbContext = new PMGSYEntities();

                EXEC_WORK_PROGRAM execWorkProgramModel = dbContext.EXEC_WORK_PROGRAM.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode && m.MAST_HEAD_CODE == headCode).FirstOrDefault();

                WorkProgramViewModel execWorkProgramViewModel = new WorkProgramViewModel();
                if (execWorkProgramModel != null)
                {
                    execWorkProgramViewModel.IMS_PR_ROAD_CODE = execWorkProgramModel.IMS_PR_ROAD_CODE;
                    execWorkProgramViewModel.MAST_HEAD_CODE = execWorkProgramModel.MAST_HEAD_CODE;
                    execWorkProgramViewModel.EXEC_START_DATE = ConvertDateToString(execWorkProgramModel.EXEC_START_DATE);
                    execWorkProgramViewModel.EXEC_END_DATE = ConvertDateToString(execWorkProgramModel.EXEC_END_DATE);
                }

                //set District,Year,Block,Road Name
                IMS_SANCTIONED_PROJECTS ImsSanctionedProjectsModel = dbContext.IMS_SANCTIONED_PROJECTS.Find(imsPrRoadCode);
                execWorkProgramViewModel.District = PMGSYSession.Current.DistrictName;
                execWorkProgramViewModel.Year = (ImsSanctionedProjectsModel.IMS_YEAR) + "-" + ((ImsSanctionedProjectsModel.IMS_YEAR) + 1);
                execWorkProgramViewModel.Block = ImsSanctionedProjectsModel.MASTER_BLOCK.MAST_BLOCK_NAME;
                execWorkProgramViewModel.PackageNumber = ImsSanctionedProjectsModel.IMS_PACKAGE_ID;
                execWorkProgramViewModel.RoadName = ImsSanctionedProjectsModel.IMS_ROAD_NAME;
                execWorkProgramViewModel.ProposalType = ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE;

                //set  sanctioned Amount,Length,Agreement Amount details
                decimal? agreementAmout = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode).Select(s => s.TEND_AGREEMENT_AMOUNT).FirstOrDefault();

                //paymentScheduleViewModel.SanctionedCost = tendAgreementDetails.TEND_AGREEMENT_AMOUNT.ToString();
                execWorkProgramViewModel.SanctionedCost = (ImsSanctionedProjectsModel.IMS_SANCTIONED_PAV_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_CD_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_PW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_OW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_RS_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BS_AMT).ToString();

                execWorkProgramViewModel.AgreementAmount = agreementAmout.ToString();
                if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "P")
                {
                    execWorkProgramViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_PAV_LENGTH.ToString();
                }
                else if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "L")
                {
                    execWorkProgramViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_BRIDGE_LENGTH.ToString();
                }
                //agreement date information
                TEND_AGREEMENT_MASTER tendAgreementMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == (dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == imsPrRoadCode).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault())).FirstOrDefault();

                execWorkProgramViewModel.AgreementStartDate = Convert.ToDateTime(tendAgreementMaster.TEND_DATE_OF_WORK_ORDER).ToString("dd/MM/yyy");
                execWorkProgramViewModel.AgreementEndDate = Convert.ToDateTime(tendAgreementMaster.TEND_AGREEMENT_END_DATE).ToString("dd/MM/yyy");

                return execWorkProgramViewModel;
            }
            catch
            {
                return null;
            }
            finally { dbContext.Dispose(); }
        }

        /// <summary>
        /// returns the extra information for display and validation
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE">id of proposal</param>
        /// <returns></returns>
        public WorkProgramViewModel GetWorkProgramInformation(int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                CommonFunctions objCommon = new CommonFunctions();
                WorkProgramViewModel workProgramViewModel = new WorkProgramViewModel();

                IMS_SANCTIONED_PROJECTS ImsSanctionedProjectsModel = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);
                workProgramViewModel.District = PMGSYSession.Current.DistrictName;
                workProgramViewModel.Year = (ImsSanctionedProjectsModel.IMS_YEAR) + "-" + ((ImsSanctionedProjectsModel.IMS_YEAR) + 1);
                workProgramViewModel.Block = ImsSanctionedProjectsModel.MASTER_BLOCK.MAST_BLOCK_NAME;
                workProgramViewModel.PackageNumber = ImsSanctionedProjectsModel.IMS_PACKAGE_ID;
                workProgramViewModel.RoadName = ImsSanctionedProjectsModel.IMS_ROAD_NAME;
                workProgramViewModel.IMS_PR_ROAD_CODE = IMS_PR_ROAD_CODE;
                workProgramViewModel.ProposalType = ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE;

                // sanctioned Amount,Length,Agreement Amount details
                decimal agreementAmout = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(s => s.TEND_AGREEMENT_AMOUNT).FirstOrDefault();
                workProgramViewModel.SanctionedCost = (ImsSanctionedProjectsModel.IMS_SANCTIONED_PAV_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_CD_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_PW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_OW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_RS_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BS_AMT).ToString();

                //agreement date information
                TEND_AGREEMENT_MASTER tendAgreementMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == (dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).OrderBy(c => c.TEND_AGREEMENT_ID).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault())).FirstOrDefault();

                workProgramViewModel.AgreementStartDate = Convert.ToDateTime(tendAgreementMaster.TEND_DATE_OF_WORK_ORDER).ToString("dd/MM/yyyy");
                workProgramViewModel.AgreementEndDate = Convert.ToDateTime(tendAgreementMaster.TEND_AGREEMENT_END_DATE).ToString("dd/MM/yyyy");
                workProgramViewModel.AgreementDate = objCommon.GetDateTimeToString(tendAgreementMaster.TEND_DATE_OF_AGREEMENT);


                workProgramViewModel.AgreementAmount = agreementAmout.ToString();
                if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "P")
                {
                    workProgramViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_PAV_LENGTH.ToString();
                }
                else if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "L")
                {
                    workProgramViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_BRIDGE_LENGTH.ToString();
                }
                workProgramViewModel.Operation = "A";
                return workProgramViewModel;

                //workProgramViewModel.Ims_Proposal_Type = ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// list the details of work program of the associated proposal code
        /// </summary>
        /// <param name="page">no . of pages</param>
        /// <param name="rows">no . of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no . of records</param>
        /// <param name="IMS_PR_ROAD_CODE">proposal code</param>
        /// <returns></returns>
        public Array GetWorkProgramList(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();

                List<EXEC_WORK_PROGRAM> listExecWorkProgram = (from workProgram in dbContext.EXEC_WORK_PROGRAM
                                                               where workProgram.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE
                                                               select workProgram).OrderBy(w => w.IMS_PR_ROAD_CODE).ToList<EXEC_WORK_PROGRAM>();

                totalRecords = listExecWorkProgram.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "HeadItem":
                                listExecWorkProgram = listExecWorkProgram.OrderBy(x => x.MAST_HEAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "StartDate":
                                listExecWorkProgram = listExecWorkProgram.OrderBy(x => x.EXEC_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "EndDate":
                                listExecWorkProgram = listExecWorkProgram.OrderBy(x => x.EXEC_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "HeadItem":
                                listExecWorkProgram = listExecWorkProgram.OrderByDescending(x => x.MAST_HEAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "StartDate":
                                listExecWorkProgram = listExecWorkProgram.OrderByDescending(x => x.EXEC_START_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "EndDate":
                                listExecWorkProgram = listExecWorkProgram.OrderByDescending(x => x.EXEC_END_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    listExecWorkProgram = listExecWorkProgram.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }
                return listExecWorkProgram.Select(WorkProgramDetails => new
                {
                    cell = new[] {                                      
                                    WorkProgramDetails.MASTER_EXECUTION_ITEM.MAST_HEAD_DESC.ToString().Trim(),
                                    Convert.ToDateTime(WorkProgramDetails.EXEC_START_DATE).ToString("dd/MM/yyyy"),
                                    Convert.ToDateTime(WorkProgramDetails.EXEC_END_DATE).ToString("dd/MM/yyyy"),

                                    URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+WorkProgramDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"MAST_HEAD_CODE="+WorkProgramDetails.MAST_HEAD_CODE.ToString().Trim()}),
                                    URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+WorkProgramDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"MAST_HEAD_CODE="+WorkProgramDetails.MAST_HEAD_CODE.ToString().Trim()}),
                    }
                }).ToArray();
            }
            catch (Exception)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// populates the head item
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE">proposal code</param>
        /// <returns></returns>
        public List<SelectListItem> PopulateHeadItemForRoad(int IMS_PR_ROAD_CODE)
        {
            try
            {
                List<SelectListItem> AllHeadItemsForRoad = PopulateAllHeadItemForRoad();
                dbContext = new PMGSYEntities();
                var query = (from execWorkProgram in dbContext.EXEC_WORK_PROGRAM
                             where execWorkProgram.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE

                             select new
                             {
                                 Value = execWorkProgram.MAST_HEAD_CODE
                             }).ToList();


                foreach (var data in query)
                {
                    AllHeadItemsForRoad.Remove(AllHeadItemsForRoad.Where(h => h.Value == data.Value.ToString()).Single());
                }
                return AllHeadItemsForRoad;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// populates the head item for LSB
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE">proposal code</param>
        /// <returns></returns>
        public List<SelectListItem> PopulateHeadItemForLSB(int IMS_PR_ROAD_CODE)
        {
            try
            {
                List<SelectListItem> AllHeadItemsForLSB = PopulateAllHeadItemForLSB();
                dbContext = new PMGSYEntities();
                var query = (from execWorkProgram in dbContext.EXEC_WORK_PROGRAM
                             where execWorkProgram.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE
                             select new
                             {
                                 Value = execWorkProgram.MAST_HEAD_CODE
                             }).ToList();

                foreach (var data in query)
                {
                    AllHeadItemsForLSB.Remove(AllHeadItemsForLSB.Where(h => h.Value == data.Value.ToString()).Single());
                }
                return AllHeadItemsForLSB;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// populates the head items for roads
        /// </summary>
        /// <returns></returns>
        public List<SelectListItem> PopulateAllHeadItemForRoad()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<SelectListItem> lstHeadItemsForRoad = null;
                lstHeadItemsForRoad = new SelectList(dbContext.MASTER_EXECUTION_ITEM.Where(m => m.MAST_HEAD_TYPE == "R").OrderBy(m => m.MAST_HEAD_DESC), "MAST_HEAD_CODE", "MAST_HEAD_DESC").ToList();
                return lstHeadItemsForRoad;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public List<SelectListItem> PopulateAllHeadItemForLSB()
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<SelectListItem> lstHeadItemForLSB = new SelectList(dbContext.MASTER_EXECUTION_ITEM.Where(m => m.MAST_HEAD_TYPE == "L").OrderBy(m => m.MAST_HEAD_DESC), "MAST_HEAD_CODE", "MAST_HEAD_DESC").ToList();
                return lstHeadItemForLSB;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// converts the date to string
        /// </summary>
        /// <param name="dateToConvert">date to convert</param>
        /// <returns></returns>
        public DateTime? ConvertStringToDate(string dateToConvert)
        {
            try
            {
                if (dateToConvert != null)
                {
                    DateTime MyDateTime;
                    MyDateTime = new DateTime();
                    MyDateTime = DateTime.ParseExact(dateToConvert, "dd/MM/yyyy",
                                                     null);
                    return MyDateTime;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// converts date to string 
        /// </summary>
        /// <param name="date">date to convert</param>
        /// <returns></returns>
        public string ConvertDateToString(DateTime? date)
        {
            try
            {
                return Convert.ToDateTime(date).ToString("dd/MM/yyyy");
            }
            catch
            {
                throw;
            }
        }

        #endregion Work Program DAL Definition

        #region Payment Schedule Definition

        /// <summary>
        /// saves the Payment schedule
        /// </summary>
        /// <param name="paymentScheduleViewModel">model containing data to save</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool AddPaymentScheduleDetails(PaymentScheduleViewModel paymentScheduleViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                // validation logic start

                //isExist
                int paymentScheduleExist = dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE && m.EXEC_MPS_MONTH == paymentScheduleViewModel.EXEC_MPS_MONTH && m.EXEC_MPS_YEAR == paymentScheduleViewModel.EXEC_MPS_YEAR).Count();

                if (paymentScheduleExist > 0)
                {
                    string monthName = dbContext.MASTER_MONTH.Where(m => m.MAST_MONTH_CODE == paymentScheduleViewModel.EXEC_MPS_MONTH).Select(s => s.MAST_MONTH_FULL_NAME).FirstOrDefault();

                    message = "Data already exist for the month " + monthName + " and year " + paymentScheduleViewModel.EXEC_MPS_YEAR + " Please select any other month or year.";
                    return false;
                }

                //check Schedule Payment < agreement amount
                decimal totalEnteredSchedulePayment = 0;
                if (dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).Any())
                {
                    totalEnteredSchedulePayment = dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).Sum(s => s.EXEC_MPS_AMOUNT);
                }
                decimal CheckSchedulePayment = totalEnteredSchedulePayment + paymentScheduleViewModel.EXEC_MPS_AMOUNT;

                //agreement amount
                decimal agreementAmout = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).Select(s => s.TEND_AGREEMENT_AMOUNT).FirstOrDefault();

                if (CheckSchedulePayment > agreementAmout)
                {
                    message = "Sum of Scheduled Payment (" + CheckSchedulePayment + ") must be less than Agreement Amount (" + agreementAmout + ")";
                    return false;
                }

                //year check
                //TEND_AGREEMENT_MASTER tendAgreementMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == (dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).OrderByDescending(c=>c.TEND_AGREEMENT_ID).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault())).FirstOrDefault();

                ////int dateOfWorkOrder = 2000;
                //int startDateYear = Convert.ToDateTime(tendAgreementMaster.TEND_AGREEMENT_START_DATE).Year;
                //int endDateYear = tendAgreementMaster.TEND_AGREEMENT_END_DATE.Year;

                //if (!((paymentScheduleViewModel.EXEC_MPS_YEAR >= startDateYear) && (paymentScheduleViewModel.EXEC_MPS_YEAR <= endDateYear)))
                //{
                //    message = "Year must be between " + (startDateYear + "-" + (startDateYear + 1)) + " to " + (endDateYear + "-" + (endDateYear + 1));
                //    return false;
                //}

                // validation logic end

                //data copy view model to actual model
                EXEC_PAYMENT_SCHEDULE paymentScheduleModel = new EXEC_PAYMENT_SCHEDULE();
                paymentScheduleModel.IMS_PR_ROAD_CODE = paymentScheduleViewModel.IMS_PR_ROAD_CODE;
                paymentScheduleModel.EXEC_MPS_MONTH = paymentScheduleViewModel.EXEC_MPS_MONTH;
                paymentScheduleModel.EXEC_MPS_YEAR = paymentScheduleViewModel.EXEC_MPS_YEAR;
                paymentScheduleModel.EXEC_MPS_AMOUNT = paymentScheduleViewModel.EXEC_MPS_AMOUNT;
                dbContext.EXEC_PAYMENT_SCHEDULE.Add(paymentScheduleModel);
                dbContext.SaveChanges();
                message = "Payment Schedule details saved successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the Payment schedule
        /// </summary>
        /// <param name="paymentScheduleViewModel">updated payment schedule details</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool EditPaymentScheduleDetails(PaymentScheduleViewModel paymentScheduleViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                // validation logic start

                //check Schedule Payment < agreement amount
                decimal totalEnteredSchedulePayment = 0;
                if (dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).Any())
                {
                    totalEnteredSchedulePayment = dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).Sum(s => s.EXEC_MPS_AMOUNT);
                }

                decimal editSchedulePayment = dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE && m.EXEC_MPS_MONTH == paymentScheduleViewModel.EXEC_MPS_MONTH && m.EXEC_MPS_YEAR == paymentScheduleViewModel.EXEC_MPS_YEAR).Select(s => s.EXEC_MPS_AMOUNT).FirstOrDefault();

                decimal CheckSchedulePayment = (totalEnteredSchedulePayment - editSchedulePayment) + paymentScheduleViewModel.EXEC_MPS_AMOUNT;

                //agreement amount
                decimal? agreementAmout = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).Select(s => s.TEND_AGREEMENT_AMOUNT).FirstOrDefault();

                if (CheckSchedulePayment > agreementAmout)
                {
                    message = "Sum of Scheduled Payment (" + CheckSchedulePayment + ") must be less than Agreement Amount (" + agreementAmout + ")";
                    return false;
                }

                //year check
                TEND_AGREEMENT_MASTER tendAgreementMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == (dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault())).FirstOrDefault();

                //int dateOfWorkOrder = 2000;
                int startDateYear = Convert.ToDateTime(tendAgreementMaster.TEND_AGREEMENT_START_DATE).Year;
                int endDateYear = tendAgreementMaster.TEND_AGREEMENT_END_DATE.Year;

                //if (!((paymentScheduleViewModel.EXEC_MPS_YEAR >= startDateYear) && (paymentScheduleViewModel.EXEC_MPS_YEAR <= endDateYear)))
                //{
                //    message = "Year must be between " + (startDateYear + "-" + (startDateYear + 1)) + " to " + (endDateYear + "-" + (endDateYear + 1));
                //    return false;
                //}

                // validation logic end

                EXEC_PAYMENT_SCHEDULE paymentScheduleModel = dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == paymentScheduleViewModel.IMS_PR_ROAD_CODE && m.EXEC_MPS_MONTH == paymentScheduleViewModel.EXEC_MPS_MONTH && m.EXEC_MPS_YEAR == paymentScheduleViewModel.EXEC_MPS_YEAR).FirstOrDefault();
                if (paymentScheduleModel == null)
                {
                    message = "An Error Occured While processing your request.";
                    return false;
                }

                //copy view model data into Actual Model
                paymentScheduleModel.EXEC_MPS_MONTH = paymentScheduleViewModel.EXEC_MPS_MONTH;
                paymentScheduleModel.EXEC_MPS_YEAR = paymentScheduleViewModel.EXEC_MPS_YEAR;
                paymentScheduleModel.EXEC_MPS_AMOUNT = paymentScheduleViewModel.EXEC_MPS_AMOUNT;

                dbContext.Entry(paymentScheduleModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                message = "Payment Schedule details updated successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// deletes the payment schedule
        /// </summary>
        /// <param name="imsPrRoadCode">proposal code</param>
        /// <param name="month">month code</param>
        /// <param name="year">year code</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool DeletePaymentScheduleDetails(int imsPrRoadCode, int month, int year, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                EXEC_PAYMENT_SCHEDULE paymentScheduleModel = dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode && m.EXEC_MPS_MONTH == month && m.EXEC_MPS_YEAR == year).FirstOrDefault();

                if (paymentScheduleModel == null)
                {
                    message = "An Error Occurred While Your Processing Request.";
                    return false;
                }

                dbContext.EXEC_PAYMENT_SCHEDULE.Remove(paymentScheduleModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException)
            {
                message = "Payment Schedule details can not be deleted because other details for payment details are entered.";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occurred While Your Processing Request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the payment schedule details
        /// </summary>
        /// <param name="imsPrRoadCode">proposal code</param>
        /// <param name="month">month code</param>
        /// <param name="year">year code</param>
        /// <returns></returns>
        public PaymentScheduleViewModel GetPaymentScheduleDetails(int imsPrRoadCode, int month, int year)
        {
            try
            {
                dbContext = new PMGSYEntities();

                EXEC_PAYMENT_SCHEDULE paymentScheduleModel = dbContext.EXEC_PAYMENT_SCHEDULE.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode && m.EXEC_MPS_MONTH == month && m.EXEC_MPS_YEAR == year).FirstOrDefault();

                PaymentScheduleViewModel paymentScheduleViewModel = new PaymentScheduleViewModel();
                if (paymentScheduleModel != null)
                {
                    // IExecutionBAL objBAL = new ExecutionBAL();

                    paymentScheduleViewModel.IMS_PR_ROAD_CODE = paymentScheduleModel.IMS_PR_ROAD_CODE;
                    paymentScheduleViewModel.EXEC_MPS_MONTH = paymentScheduleModel.EXEC_MPS_MONTH;
                    paymentScheduleViewModel.EXEC_MPS_YEAR = paymentScheduleModel.EXEC_MPS_YEAR;
                    paymentScheduleViewModel.EXEC_MPS_AMOUNT = paymentScheduleModel.EXEC_MPS_AMOUNT;
                }

                //set District,Year,Block,Road Name
                IMS_SANCTIONED_PROJECTS ImsSanctionedProjectsModel = dbContext.IMS_SANCTIONED_PROJECTS.Find(imsPrRoadCode);
                paymentScheduleViewModel.District = PMGSYSession.Current.DistrictName;
                paymentScheduleViewModel.SanctionedYear = (ImsSanctionedProjectsModel.IMS_YEAR) + "-" + ((ImsSanctionedProjectsModel.IMS_YEAR) + 1);
                paymentScheduleViewModel.Block = ImsSanctionedProjectsModel.MASTER_BLOCK.MAST_BLOCK_NAME;
                paymentScheduleViewModel.PackageNumber = ImsSanctionedProjectsModel.IMS_PACKAGE_ID;
                paymentScheduleViewModel.RoadName = ImsSanctionedProjectsModel.IMS_ROAD_NAME;

                // sanctioned Amount,Length,Agreement Amount details
                decimal? agreementAmout = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode).Select(s => s.TEND_AGREEMENT_AMOUNT).FirstOrDefault();

                //paymentScheduleViewModel.SanctionedCost = tendAgreementDetails.TEND_AGREEMENT_AMOUNT.ToString();
                paymentScheduleViewModel.SanctionedCost = (ImsSanctionedProjectsModel.IMS_SANCTIONED_PAV_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_CD_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_PW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_OW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_RS_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BS_AMT).ToString();

                paymentScheduleViewModel.AgreementAmount = agreementAmout.ToString();
                if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "P")
                {
                    paymentScheduleViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_PAV_LENGTH.ToString();
                }
                else if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "L")
                {
                    paymentScheduleViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_BRIDGE_LENGTH.ToString();
                }

                TEND_AGREEMENT_MASTER master = (dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == imsPrRoadCode).OrderBy(c => c.TEND_AGREEMENT_ID).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault()).FirstOrDefault());
                paymentScheduleViewModel.AgreementDate = new CommonFunctions().GetDateTimeToString(master.TEND_DATE_OF_AGREEMENT);
                paymentScheduleViewModel.AgreementMonth = master.TEND_DATE_OF_AGREEMENT.Month;
                paymentScheduleViewModel.AgreementYear = master.TEND_DATE_OF_AGREEMENT.Year;

                return paymentScheduleViewModel;
            }
            catch
            {
                return null;
            }
            finally { dbContext.Dispose(); }
        }

        /// <summary>
        /// returns the payment schedule details 
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="IMS_PR_ROAD_CODE">proposal code</param>
        /// <returns></returns>
        public Array GetPaymentScheduleList(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();

                List<EXEC_PAYMENT_SCHEDULE> listPaymentSchedule = (from paymentSchedule in dbContext.EXEC_PAYMENT_SCHEDULE
                                                                   //from month in dbContext.MASTER_MONTH
                                                                   where paymentSchedule.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE
                                                                   select paymentSchedule).OrderBy(w => w.IMS_PR_ROAD_CODE).ToList<EXEC_PAYMENT_SCHEDULE>();

                totalRecords = listPaymentSchedule.Count();

                //int recCount=totalRecords;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "Year":
                                listPaymentSchedule = listPaymentSchedule.OrderBy(x => x.EXEC_MPS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "Month":
                                listPaymentSchedule = listPaymentSchedule.OrderBy(x => x.EXEC_MPS_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ScheduledPayment":
                                listPaymentSchedule = listPaymentSchedule.OrderBy(x => x.EXEC_MPS_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "Year":
                                listPaymentSchedule = listPaymentSchedule.OrderByDescending(x => x.EXEC_MPS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "Month":
                                listPaymentSchedule = listPaymentSchedule.OrderByDescending(x => x.EXEC_MPS_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "ScheduledPayment":
                                listPaymentSchedule = listPaymentSchedule.OrderByDescending(x => x.EXEC_MPS_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    listPaymentSchedule = listPaymentSchedule.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }
                return listPaymentSchedule.Select(paymentScheduleDetails => new
                {
                    cell = new[] {                                      
                                    dbContext.MASTER_MONTH.Where(m=>m.MAST_MONTH_CODE==paymentScheduleDetails.EXEC_MPS_MONTH).Select(s=>s.MAST_MONTH_FULL_NAME).Single(),
                                    paymentScheduleDetails.EXEC_MPS_YEAR.ToString(),
                                    paymentScheduleDetails.EXEC_MPS_AMOUNT.ToString(),

                                    URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+paymentScheduleDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"MONTH="+paymentScheduleDetails.EXEC_MPS_MONTH.ToString().Trim(),"YEAR="+paymentScheduleDetails.EXEC_MPS_YEAR.ToString().Trim()}),
                                    URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+paymentScheduleDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"MONTH="+paymentScheduleDetails.EXEC_MPS_MONTH.ToString().Trim(),"YEAR="+paymentScheduleDetails.EXEC_MPS_YEAR.ToString().Trim()}),
                                    
                    }
                }).ToArray();
            }
            catch (Exception)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public PaymentScheduleViewModel getInformation(int imsPrRoadCode)
        {
            try
            {
                dbContext = new PMGSYEntities();

                IMS_SANCTIONED_PROJECTS ImsSanctionedProjectsModel = dbContext.IMS_SANCTIONED_PROJECTS.Find(imsPrRoadCode);
                PaymentScheduleViewModel paymentScheduleViewModel = new PaymentScheduleViewModel();

                paymentScheduleViewModel.District = PMGSYSession.Current.DistrictName;
                paymentScheduleViewModel.SanctionedYear = (ImsSanctionedProjectsModel.IMS_YEAR) + "-" + ((ImsSanctionedProjectsModel.IMS_YEAR) + 1);
                paymentScheduleViewModel.Block = ImsSanctionedProjectsModel.MASTER_BLOCK.MAST_BLOCK_NAME;
                paymentScheduleViewModel.PackageNumber = ImsSanctionedProjectsModel.IMS_PACKAGE_ID;
                paymentScheduleViewModel.RoadName = ImsSanctionedProjectsModel.IMS_ROAD_NAME;
                paymentScheduleViewModel.IMS_PR_ROAD_CODE = imsPrRoadCode;

                // sanctioned Amount,Length,Agreement Amount details
                decimal agreementAmout = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode).Select(s => s.TEND_AGREEMENT_AMOUNT).FirstOrDefault();
                //paymentScheduleViewModel.SanctionedCost = tendAgreementDetails.TEND_AGREEMENT_AMOUNT.ToString();
                paymentScheduleViewModel.SanctionedCost = (ImsSanctionedProjectsModel.IMS_SANCTIONED_PAV_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_CD_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_PW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_OW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BW_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_RS_AMT + ImsSanctionedProjectsModel.IMS_SANCTIONED_BS_AMT).ToString();

                paymentScheduleViewModel.AgreementAmount = agreementAmout.ToString();
                if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "P")
                {
                    paymentScheduleViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_PAV_LENGTH.ToString();
                }
                else if (ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE == "L")
                {
                    paymentScheduleViewModel.SactionedLength = ImsSanctionedProjectsModel.IMS_BRIDGE_LENGTH.ToString();
                }

                paymentScheduleViewModel.ProposalType = ImsSanctionedProjectsModel.IMS_PROPOSAL_TYPE;
                int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == imsPrRoadCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                TEND_AGREEMENT_MASTER master = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                paymentScheduleViewModel.AgreementDate = new CommonFunctions().GetDateTimeToString(master.TEND_DATE_OF_AGREEMENT);
                paymentScheduleViewModel.AgreementMonth = master.TEND_DATE_OF_AGREEMENT.Month;
                paymentScheduleViewModel.AgreementYear = master.TEND_DATE_OF_AGREEMENT.Year;
                return paymentScheduleViewModel;
            }
            catch (Exception)
            {
                return null;
                //throw ex;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// populates the years
        /// </summary>
        /// <param name="imsPrRoadCode">proposal code</param>
        /// <returns></returns>
        public List<SelectListItem> GetYears(int imsPrRoadCode)
        {
            try
            {
                dbContext = new PMGSYEntities();

                TEND_AGREEMENT_MASTER tendAgreementMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == (dbContext.TEND_AGREEMENT_DETAIL.Where(c => c.IMS_PR_ROAD_CODE == imsPrRoadCode).Select(c => c.TEND_AGREEMENT_CODE).FirstOrDefault())).FirstOrDefault();

                //int dateOfWorkOrder = 2000;
                int dateOfWorkOrder = Convert.ToDateTime(tendAgreementMaster.TEND_DATE_OF_WORK_ORDER).Year;
                int endDateYear = tendAgreementMaster.TEND_AGREEMENT_END_DATE.Year;

                List<SelectListItem> yearList = new List<SelectListItem>();
                yearList.Add(
                    new SelectListItem()
                    {
                        Text = "-- Select Year --",
                        Value = "0"
                    }
                    );

                for (int i = dateOfWorkOrder; i <= endDateYear; i++)
                {
                    yearList.Add(
                        new SelectListItem()
                        {
                            Text = (i) + "-" + (i + 1),
                            Value = i.ToString()
                        }
                        );
                }
                return yearList;
            }
            catch
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion Payment Schedule Definition

        #region EXECUTION_PROGRESS

        #region PHYSICAL_ROAD_STATUS

        public void GetPhysicalRoadWeeklyDetails(ref ExecutionRoadStatusViewModel roadModel)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            int year = 0, month = 0, roadCode = 0;
            try
            {
                roadCode = roadModel.IMS_PR_ROAD_CODE;
                month = roadModel.AgreementMonth;
                year = roadModel.Year;

                ExecutionRoadStatusViewModel model = null;
                CommonFunctions objCommon = new CommonFunctions();
                //EXEC_ROADS_WEEKLY_STATUS roadMaster 
                var query = dbContext.EXEC_ROADS_WEEKLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == roadCode && x.EXEC_PROGRESS_DATE.Year == year && x.EXEC_PROGRESS_DATE.Month == month).ToList();
                if (query != null)
                {
                    model = new ExecutionRoadStatusViewModel();
                    foreach (var itm in query)
                    {
                        //EncryptedPhysicalRoadCode = URLEncrypt.EncryptParameters1(new string[] { "RoadCode=" + roadMaster.IMS_PR_ROAD_CODE }),
                        roadModel.EXEC_BASE_COURSE = Convert.ToDecimal(roadModel.EXEC_BASE_COURSE) + Convert.ToDecimal(itm.EXEC_BASE_COURSE);
                        roadModel.EXEC_CD_WORKS = Convert.ToDecimal(roadModel.EXEC_CD_WORKS) + Convert.ToDecimal(itm.EXEC_CD_WORKS);
                        roadModel.EXEC_COMPLETED = Convert.ToDecimal(roadModel.EXEC_COMPLETED) + Convert.ToDecimal(itm.EXEC_COMPLETED);
                        roadModel.EXEC_EARTHWORK_SUBGRADE = Convert.ToDecimal(roadModel.EXEC_EARTHWORK_SUBGRADE) + Convert.ToDecimal(itm.EXEC_EARTHWORK_SUBGRADE);
                        //roadModel.EXEC_ISCOMPLETED += Convert.ToDecimal(itm.EXEC_ISCOMPLETED);
                        roadModel.EXEC_MISCELANEOUS = Convert.ToDecimal(roadModel.EXEC_MISCELANEOUS) + Convert.ToDecimal(itm.EXEC_MISCELANEOUS);
                        roadModel.EXEC_PREPARATORY_WORK = Convert.ToDecimal(roadModel.EXEC_PREPARATORY_WORK) + Convert.ToDecimal(itm.EXEC_PREPARATORY_WORK);
                        roadModel.EXEC_SIGNS_STONES = Convert.ToDecimal(roadModel.EXEC_SIGNS_STONES) + Convert.ToDecimal(itm.EXEC_SIGNS_STONES);
                        roadModel.EXEC_SUBBASE_PREPRATION = Convert.ToDecimal(roadModel.EXEC_SUBBASE_PREPRATION) + Convert.ToDecimal(itm.EXEC_SUBBASE_PREPRATION);
                        roadModel.EXEC_SURFACE_COURSE = Convert.ToDecimal(roadModel.EXEC_SURFACE_COURSE) + Convert.ToDecimal(itm.EXEC_SURFACE_COURSE);
                    };
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetPhysicalRoadWeeklyDetails().DAL");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// return the grid data of execution details
        /// </summary>
        /// <param name="yearCode"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="packageCode"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetExecutionList(int yearCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);
            bool flag = false;
            var status = 0;
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                    join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                    join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                    where
                                    master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                    item.IMS_SANCTIONED == "Y" &&
                                    master.TEND_AGREEMENT_TYPE == "C" &&
                                    (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                    (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                    (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                    (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                    (item.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode) &&
                                    item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                    && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                    && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)

                                    select new
                                    {
                                        block.MAST_BLOCK_NAME,
                                        item.IMS_PACKAGE_ID,
                                        item.IMS_BATCH,
                                        item.IMS_PR_ROAD_CODE,
                                        item.IMS_ROAD_NAME,
                                        item.IMS_BRIDGE_NAME,
                                        year.MAST_YEAR_TEXT,
                                        item.IMS_LOCK_STATUS,
                                        item.IMS_NO_OF_CDWORKS,
                                        item.IMS_NO_OF_BRIDGEWRKS,
                                        item.IMS_PROPOSAL_TYPE,
                                        ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                        //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P"?(item.IMS_SANCTIONED_PAV_AMT+item.IMS_SANCTIONED_CD_AMT+item.IMS_SANCTIONED_PW_AMT+
                                        //            item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                        //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                        ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                    : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                        //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                        ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                        MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                        EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                        EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                        status,
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                var ExecResultList = new List<ExecViewListModel>();

                foreach (var item in lstExecution)
                {
                    flag = item.EXEC_COMPLETION_DATE.HasValue ? (item.EXEC_COMPLETION_DATE.Value >= stDate && item.EXEC_COMPLETION_DATE.Value <= endDate) : false;
                    if (item.IMS_PROPOSAL_TYPE == "P")
                    {

                        var Road_STATUS = (from SP in dbContext.IMS_SANCTIONED_PROJECTS
                                           join ELMS in dbContext.EXEC_ROADS_MONTHLY_STATUS on SP.IMS_PR_ROAD_CODE equals ELMS.IMS_PR_ROAD_CODE
                                           where
                                           SP.IMS_PROPOSAL_TYPE == "P" && SP.IMS_SANCTIONED == "Y" && ((ELMS.EXEC_PROG_YEAR * 12) + ELMS.EXEC_PROG_MONTH) <= (DateTime.Now.Year * 12) + (DateTime.Now.Month) &&
                                            ((ELMS.EXEC_PROG_YEAR * 12) + ELMS.EXEC_PROG_MONTH)
                                            == (from IES in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                                where
                                            IES.IMS_PR_ROAD_CODE == ELMS.IMS_PR_ROAD_CODE && ((IES.EXEC_PROG_YEAR * 12) + IES.EXEC_PROG_MONTH)
                                            <= (((DateTime.Now.Year) * 12) + DateTime.Now.Year)
                                                select (IES.EXEC_PROG_YEAR * 12) + IES.EXEC_PROG_MONTH).Max()
                                           where
                                       SP.IMS_SANCTIONED == "Y" && SP.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE
                                           select new
                                           {

                                               ELMS.EXEC_ISCOMPLETED

                                           });



                        Road_STATUS = Road_STATUS.DefaultIfEmpty();


                        foreach (var check1 in Road_STATUS)
                        {
                            if (check1 == null && PMGSYSession.Current.PMGSYScheme != 4)
                            {
                                status = 1;
                            }

                            else if (check1 != null)
                            {
                                if (check1.EXEC_ISCOMPLETED != "C" && PMGSYSession.Current.PMGSYScheme != 4)
                                {
                                    status = 1;
                                }
                                else
                                {
                                    status = 0;
                                }
                            }

                        }

                    }
                    else
                    {
                        var BRIDGE_STATUS = (from SP in dbContext.IMS_SANCTIONED_PROJECTS
                                             join ELMS in dbContext.EXEC_LSB_MONTHLY_STATUS on SP.IMS_PR_ROAD_CODE equals ELMS.IMS_PR_ROAD_CODE
                                             where
                                             SP.IMS_PROPOSAL_TYPE == "L" && SP.IMS_SANCTIONED == "Y" && ((ELMS.EXEC_PROG_YEAR * 12) + ELMS.EXEC_PROG_MONTH) <= (DateTime.Now.Year * 12) + (DateTime.Now.Month) &&
                                              ((ELMS.EXEC_PROG_YEAR * 12) + ELMS.EXEC_PROG_MONTH)
                                              == (from IES in dbContext.EXEC_LSB_MONTHLY_STATUS
                                                  where
                                              IES.IMS_PR_ROAD_CODE == ELMS.IMS_PR_ROAD_CODE && ((IES.EXEC_PROG_YEAR * 12) + IES.EXEC_PROG_MONTH)
                                              <= (((DateTime.Now.Year) * 12) + DateTime.Now.Year)
                                                  select (IES.EXEC_PROG_YEAR * 12) + IES.EXEC_PROG_MONTH).Max()
                                             where
                                         SP.IMS_SANCTIONED == "Y" && SP.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE
                                             select new
                                             {

                                                 ELMS.EXEC_ISCOMPLETED

                                             });



                        BRIDGE_STATUS = BRIDGE_STATUS.DefaultIfEmpty();


                        foreach (var check1 in BRIDGE_STATUS)
                        {

                            if (check1 == null && PMGSYSession.Current.PMGSYScheme != 4)
                            {
                                status = 1;
                            }
                            else if (check1 != null)
                            {
                                if (check1.EXEC_ISCOMPLETED == "C")
                                {
                                    status = 0;
                                }
                                else if (check1.EXEC_ISCOMPLETED != "C" && PMGSYSession.Current.PMGSYScheme != 4)
                                {
                                    status = 1;
                                }
                                else
                                {
                                    status = 0;
                                }
                            }
                        }

                    }
                    ExecResultList.Add(new ExecViewListModel
                    {
                        MAST_BLOCK_NAME = item.MAST_BLOCK_NAME,
                        IMS_ROAD_NAME = item.IMS_ROAD_NAME,
                        IMS_PACKAGE_ID = item.IMS_PACKAGE_ID,
                        IMS_PR_ROAD_CODE = item.IMS_PR_ROAD_CODE,
                        IMS_NO_OF_CDWORKS = item.IMS_NO_OF_CDWORKS,
                        IMS_NO_OF_BRIDGEWRKS = Convert.ToInt32(item.IMS_NO_OF_BRIDGEWRKS),
                        IMS_PROPOSAL_TYPE = item.IMS_PROPOSAL_TYPE,
                        IMS_LOCK_STATUS = item.IMS_LOCK_STATUS,
                        ROAD_COST = Convert.ToDecimal(item.ROAD_COST),
                        ROAD_LENGTH = Convert.ToDecimal(item.ROAD_LENGTH),
                        MAINTENANCE_COST = item.MAINTENANCE_COST,
                        IMS_BATCH = item.IMS_BATCH,
                        IMS_BRIDGE_NAME = item.IMS_BRIDGE_NAME,
                        MAST_YEAR_TEXT = item.MAST_YEAR_TEXT,
                        EXEC_ISCOMPLETED = item.EXEC_ISCOMPLETED,
                        flag = flag,
                        status = status,

                    });
                }
                var totalRecords1 = ExecResultList.Count();

                return ExecResultList.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + URLEncrypt.EncryptParameters(new string[] { m.IMS_PR_ROAD_CODE.ToString().Trim() }) + "'); return false;'>Convergence of Technology</a>",
                        //m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>")
                        //                           : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>"),

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_NO_OF_CDWORKS==0 || PMGSYSession.Current.PMGSYScheme == 4)?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
      
          // Unfreezing and Adding Physical Road and Bridge Progress Details on 17-12-2021
                     

                 m.IMS_PROPOSAL_TYPE=="P" && m.status==1 ?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>" : m.IMS_PROPOSAL_TYPE=="L" && m.status==1 ? "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>" : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",


                      //   below Changes for Habitation Progress Details
                          m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>"
                        : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"):"-",
  
        // Changes Made by Saurabh Jojare Ended Here.

       


                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbConC:\Laptop Backup for Code\01-01-2022_Saturday\PMGSY\Common\text.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Road Safety Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        
                        "<a href='#' title='Click here to view Execution Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>View Execution Details</a>",

                        //Added By Avinash on 03_08_2018 to View Captured LocationDetails on Google Map
                        (dbContext.IMS_SANCTIONED_PROJECTS.Join(dbContext.EXEC_LOCATION_DETAILS,
                                                                sancProject=> sancProject.IMS_PR_ROAD_CODE,
                                                                locDetails=>locDetails.IMS_PR_ROAD_CODE,
                                                                (sancProject,locDetails)=>    new  {locDetails.IMS_PR_ROAD_CODE}).Where(c=>c.IMS_PR_ROAD_CODE== m.IMS_PR_ROAD_CODE).Any() )
                         ? "<a href='#' title='Click here to view Location Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewLocation('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                            :"-"
                    
                    }
                }).ToArray();


            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetExecutionList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of work status dropdown
        /// </summary>
        /// <returns></returns>
        public List<SelectListItem> GetWorkStatus(string flag = "")
        {
            try
            {
                List<SelectListItem> lstWorkStatus = new List<SelectListItem>();
                ///Commented by SAMMED A. PATIL on 23JAN2017 to enable provision of adding Pending status for Bridge Proposals
                //if (flag == "L")
                //{
                //    lstWorkStatus.Add(new SelectListItem { Value = "0", Text = "--Select Work Status--" });
                //    lstWorkStatus.Add(new SelectListItem { Value = "C", Text = "Completed" });
                //    lstWorkStatus.Add(new SelectListItem { Value = "P", Text = "In Progress" });
                //}
                //else
                //{
                lstWorkStatus.Add(new SelectListItem { Value = "0", Text = "--Select Work Status--" });
                lstWorkStatus.Add(new SelectListItem { Value = "C", Text = "Completed" });
                lstWorkStatus.Add(new SelectListItem { Value = "P", Text = "In Progress" });
                lstWorkStatus.Add(new SelectListItem { Value = "F", Text = "Pending:Forest Clearance" });
                lstWorkStatus.Add(new SelectListItem { Value = "A", Text = "Pending:Land Acquisition" });
                lstWorkStatus.Add(new SelectListItem { Value = "L", Text = "Pending:Legal cases" });
                //}

                return lstWorkStatus;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetWorkStatus().DAL");
                return null;
            }
        }

        /// <summary>
        /// returns the list of details of Road Physical Progress 
        /// </summary>
        /// <param name="page">indicates number of pages of list</param>
        /// <param name="rows">indicates no. of rows of each page of list</param>
        /// <param name="sidx">indicates the sort index(on which column sorting is applied)</param>
        /// <param name="sord">indicates sort order(either asc or desc)</param>
        /// <param name="totalRecords">indicates total records</param>
        /// <returns></returns>
        public Array GetRoadPhysicalProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int currMonth = DateTime.Now.Month;
            int currYear = DateTime.Now.Year;

            //Avinash For Physical road progress April Month Relaxation..
            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];
            int AprilMonthValue = Convert.ToInt16(AprilMonth);

            int yearCode = 0;
            int monthCode = 0;
            if ((dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
            {
                yearCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                monthCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
            }
            try
            {
                var lstRoadDetails = (from item in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                      where item.IMS_PR_ROAD_CODE == proposalCode
                                      select new
                                      {
                                          item.EXEC_BASE_COURSE,
                                          item.EXEC_CD_WORKS,
                                          item.EXEC_COMPLETED,
                                          item.EXEC_EARTHWORK_SUBGRADE,
                                          item.EXEC_ISCOMPLETED,
                                          item.EXEC_LSB_WORKS,
                                          item.EXEC_MISCELANEOUS,
                                          item.EXEC_PREPARATORY_WORK,
                                          item.EXEC_PROG_MONTH,
                                          item.EXEC_PROG_YEAR,
                                          item.EXEC_SIGNS_STONES,
                                          item.EXEC_SUBBASE_PREPRATION,
                                          item.EXEC_SURFACE_COURSE,
                                          item.IMS_PR_ROAD_CODE,
                                          item.EXEC_COMPLETION_DATE,
                                      });


                totalRecords = lstRoadDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                        }
                        //lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstRoadDetails.Select(physicalDetails => new
                {
                    physicalDetails.EXEC_BASE_COURSE,
                    physicalDetails.EXEC_CD_WORKS,
                    physicalDetails.EXEC_COMPLETED,
                    physicalDetails.EXEC_EARTHWORK_SUBGRADE,
                    physicalDetails.EXEC_ISCOMPLETED,
                    physicalDetails.EXEC_LSB_WORKS,
                    physicalDetails.EXEC_MISCELANEOUS,
                    physicalDetails.EXEC_PREPARATORY_WORK,
                    physicalDetails.EXEC_PROG_MONTH,
                    physicalDetails.EXEC_PROG_YEAR,
                    physicalDetails.EXEC_SIGNS_STONES,
                    physicalDetails.EXEC_SUBBASE_PREPRATION,
                    physicalDetails.EXEC_SURFACE_COURSE,
                    physicalDetails.IMS_PR_ROAD_CODE,
                    physicalDetails.EXEC_COMPLETION_DATE,
                }).ToArray();

                return gridData.Select(physicalDetails => new
                {
                    id = physicalDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        physicalDetails.EXEC_PROG_MONTH == 1?"January":(physicalDetails.EXEC_PROG_MONTH == 2?"February":(physicalDetails.EXEC_PROG_MONTH == 3?"March":(physicalDetails.EXEC_PROG_MONTH == 4?"April":(physicalDetails.EXEC_PROG_MONTH == 5?"May":(physicalDetails.EXEC_PROG_MONTH == 6?"June":(physicalDetails.EXEC_PROG_MONTH == 7?"July":physicalDetails.EXEC_PROG_MONTH == 8?"August":(physicalDetails.EXEC_PROG_MONTH == 9?"September":(physicalDetails.EXEC_PROG_MONTH == 10?"October":(physicalDetails.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        physicalDetails.EXEC_PROG_YEAR.ToString(),
                        physicalDetails.EXEC_ISCOMPLETED=="P"?"In Progress":(physicalDetails.EXEC_ISCOMPLETED == "C"?"Completed (" + physicalDetails.EXEC_COMPLETION_DATE.Value.ToString("dd/MM/yyyy") + ")" :physicalDetails.EXEC_ISCOMPLETED == "F"?"Pending(Forest Clearance)":physicalDetails.EXEC_ISCOMPLETED == "A"?"Pending(Land Acquisition)":"Pending Legal Cases"),
                        physicalDetails.EXEC_PREPARATORY_WORK==null?"-":physicalDetails.EXEC_PREPARATORY_WORK.ToString(),
                        physicalDetails.EXEC_EARTHWORK_SUBGRADE==null?"-":physicalDetails.EXEC_EARTHWORK_SUBGRADE.ToString(),
                        physicalDetails.EXEC_SUBBASE_PREPRATION == null?"-":physicalDetails.EXEC_SUBBASE_PREPRATION.ToString(),
                        physicalDetails.EXEC_BASE_COURSE == null?"-":physicalDetails.EXEC_BASE_COURSE.ToString(),
                        physicalDetails.EXEC_SURFACE_COURSE == null?"-":physicalDetails.EXEC_SURFACE_COURSE.ToString(),
                        physicalDetails.EXEC_SIGNS_STONES == null?"-":physicalDetails.EXEC_SIGNS_STONES.ToString(),
                        physicalDetails.EXEC_CD_WORKS == null?"-":physicalDetails.EXEC_CD_WORKS.ToString(),
                        physicalDetails.EXEC_LSB_WORKS == null?"-":physicalDetails.EXEC_LSB_WORKS.ToString(),
                        physicalDetails.EXEC_MISCELANEOUS == null?"-":physicalDetails.EXEC_MISCELANEOUS.ToString(),
                        physicalDetails.EXEC_COMPLETED == null?"-":physicalDetails.EXEC_COMPLETED.ToString(),
                        //(physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 05APR2017 to restrict Physical progress entry for current financial year
                        //(physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear)?"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear)?"<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 04MAY2017 to allow editing of latest record                        
                        //( (DateTime.Now.Day <= 5) ? ((physicalDetails.EXEC_PROG_MONTH== (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") ) ? "<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //( (DateTime.Now.Day <= 5) ? ((physicalDetails.EXEC_PROG_MONTH== (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") ) ? "<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 01JAN2018 to allow editing of latest record
                        /*///Edit
                        ( 
                            //(DateTime.Now.Day <= 5) 
                            (DateTime.Now.Day <= 5) 
                                ? (
                                    (DateTime.Now.Month == 1) 
                                    ? ((physicalDetails.EXEC_PROG_MONTH == 12 || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR == (yearCode) && physicalDetails.EXEC_ISCOMPLETED != "C")
                                    : ((physicalDetails.EXEC_PROG_MONTH == (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C")
                                  ) 
                                : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>"
                           :"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        ///Delete
                        ( 
                            //(DateTime.Now.Day <= 5) 
                            (DateTime.Now.Day <= 5) 
                                ? (
                                    (DateTime.Now.Month == 1) 
                                    ? ((physicalDetails.EXEC_PROG_MONTH == 12 || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR == (yearCode) && physicalDetails.EXEC_ISCOMPLETED != "C")
                                    : ((physicalDetails.EXEC_PROG_MONTH== (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                                   )
                                : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",*/

                        ///Changes by Avinash
                        //EDIT
                        currMonth==AprilMonthValue && DateTime.Now.Day<=AprilMonthDayValue ?  ( 
                            (DateTime.Now.Day <= AprilMonthDayValue ) 
                                ? (
                                    (DateTime.Now.Month == 1) 
                                    ? ((physicalDetails.EXEC_PROG_MONTH == 12 || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR == (yearCode) && physicalDetails.EXEC_ISCOMPLETED != "C")
                                    : ((physicalDetails.EXEC_PROG_MONTH == (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C")
                                  ) 
                                : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>"
                           :"<span class='ui-icon ui-icon-locked ui-align-center'></span>" :   
                           
                           
                           ( 
                            (DateTime.Now.Day <= 5) 
                                ? (
                                    (DateTime.Now.Month == 1) 
                                    ? ((physicalDetails.EXEC_PROG_MONTH == 12 || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR == (yearCode) && physicalDetails.EXEC_ISCOMPLETED != "C")
                                    : ((physicalDetails.EXEC_PROG_MONTH == (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C")
                                  ) 
                                : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>"
                           :"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        

                           //Delete
                           currMonth==AprilMonthValue && DateTime.Now.Day<=AprilMonthDayValue ?       ( 
                            (DateTime.Now.Day <= AprilMonthDayValue) 
                                ? (
                                    (DateTime.Now.Month == 1) 
                                    ? ((physicalDetails.EXEC_PROG_MONTH == 12 || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR == (yearCode) && physicalDetails.EXEC_ISCOMPLETED != "C")
                                    : ((physicalDetails.EXEC_PROG_MONTH== (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                                   )
                                : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>"   
                           
                           : ( 
                            (DateTime.Now.Day <= 5) 
                                ? (
                                    (DateTime.Now.Month == 1) 
                                    ? ((physicalDetails.EXEC_PROG_MONTH == 12 || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR == (yearCode) && physicalDetails.EXEC_ISCOMPLETED != "C")
                                    : ((physicalDetails.EXEC_PROG_MONTH== (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                                   )
                                : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetRoadPhysicalProgressList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns physical road progress details
        /// </summary>
        /// <param name="proposalCode">indicates proposal code</param>
        /// <param name="monthCode">indicates monthcode</param>
        /// <param name="yearCode">indicates year code</param>
        /// <returns></returns>
        public ExecutionRoadStatusViewModel GetPhysicalRoadDetails(int proposalCode, int monthCode, int yearCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                ExecutionRoadStatusViewModel model = null;
                CommonFunctions objCommon = new CommonFunctions();
                EXEC_ROADS_MONTHLY_STATUS roadMaster = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(proposalCode, yearCode, monthCode);
                if (roadMaster != null)
                {
                    model = new ExecutionRoadStatusViewModel
                    {
                        EncryptedPhysicalRoadCode = URLEncrypt.EncryptParameters1(new string[] { "RoadCode=" + roadMaster.IMS_PR_ROAD_CODE }),
                        EXEC_BASE_COURSE = roadMaster.EXEC_BASE_COURSE,
                        EXEC_CD_WORKS = roadMaster.EXEC_CD_WORKS,
                        EXEC_COMPLETED = roadMaster.EXEC_COMPLETED,
                        EXEC_EARTHWORK_SUBGRADE = roadMaster.EXEC_EARTHWORK_SUBGRADE,
                        EXEC_ISCOMPLETED = roadMaster.EXEC_ISCOMPLETED,
                        EXEC_LSB_WORKS = roadMaster.EXEC_LSB_WORKS,
                        EXEC_MISCELANEOUS = roadMaster.EXEC_MISCELANEOUS,
                        EXEC_PREPARATORY_WORK = roadMaster.EXEC_PREPARATORY_WORK,
                        EXEC_PROG_MONTH = roadMaster.EXEC_PROG_MONTH,
                        EXEC_PROG_YEAR = roadMaster.EXEC_PROG_YEAR,
                        EXEC_SIGNS_STONES = roadMaster.EXEC_SIGNS_STONES,
                        EXEC_SUBBASE_PREPRATION = roadMaster.EXEC_SUBBASE_PREPRATION,
                        EXEC_SURFACE_COURSE = roadMaster.EXEC_SURFACE_COURSE,
                        IMS_PR_ROAD_CODE = roadMaster.IMS_PR_ROAD_CODE,
                        Operation = "E"
                    };

                    if (roadMaster.EXEC_COMPLETION_DATE != null)
                    {
                        model.ExecutionCompleteDate = objCommon.GetDateTimeToString(roadMaster.EXEC_COMPLETION_DATE.Value);
                    }

                    if (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                    {
                        int? year = 0;
                        if (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.EXEC_PROG_YEAR == yearCode && m.IMS_PR_ROAD_CODE == proposalCode).Count() >= 2)
                        {
                            year = yearCode;
                        }
                        else
                        {
                            year = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR < yearCode).Max(m => (Int32?)m.EXEC_PROG_YEAR);
                        }

                        //year = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(m => m.EXEC_PROG_YEAR);
                        EXEC_ROADS_MONTHLY_STATUS masterMonth = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_MONTH != monthCode).OrderByDescending(m => m.EXEC_PROG_MONTH).FirstOrDefault();

                        if (masterMonth != null)
                        {
                            model.PreviousMonth = masterMonth.EXEC_PROG_MONTH;
                            model.PreviousYear = masterMonth.EXEC_PROG_YEAR;
                            model.OldCompleted = masterMonth.EXEC_COMPLETED;
                        }

                        EXEC_ROADS_MONTHLY_STATUS masterRoad = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(proposalCode, model.PreviousYear, model.PreviousMonth);
                        if (masterRoad != null)
                        {
                            model.PreviousBaseCourse = masterRoad.EXEC_BASE_COURSE == null ? 0 : masterRoad.EXEC_BASE_COURSE.Value;
                            model.PreviousEarthWork = masterRoad.EXEC_EARTHWORK_SUBGRADE == null ? 0 : masterRoad.EXEC_EARTHWORK_SUBGRADE.Value;
                            model.PreviousMiscellaneous = masterRoad.EXEC_MISCELANEOUS == null ? 0 : masterRoad.EXEC_MISCELANEOUS.Value;
                            model.PreviousPreparatoryWork = masterRoad.EXEC_PREPARATORY_WORK == null ? 0 : masterRoad.EXEC_PREPARATORY_WORK.Value;
                            model.PreviousSubbase = masterRoad.EXEC_SUBBASE_PREPRATION == null ? 0 : masterRoad.EXEC_SUBBASE_PREPRATION.Value;
                            model.PreviousSurfaceCourse = masterRoad.EXEC_SURFACE_COURSE == null ? 0 : masterRoad.EXEC_SURFACE_COURSE.Value;
                            model.PreviousCDWorks = Convert.ToInt32(masterRoad.EXEC_CD_WORKS);
                            model.PreviousLSB = Convert.ToInt32(masterRoad.EXEC_LSB_WORKS);
                            model.PreviousRoadSigns = Convert.ToInt32(masterRoad.EXEC_SIGNS_STONES);
                            model.PreviousCompletedLength = masterRoad.EXEC_COMPLETED == null ? 0 : masterRoad.EXEC_COMPLETED.Value;
                        }
                        else
                        {
                            model.PreviousBaseCourse = null;
                            model.PreviousEarthWork = null;
                            model.PreviousMiscellaneous = null;
                            model.PreviousPreparatoryWork = null;
                            model.PreviousSubbase = null;
                            model.PreviousSurfaceCourse = null;
                            model.PreviousCDWorks = 0;
                            model.PreviousLSB = 0;
                            model.PreviousRoadSigns = 0;
                            model.PreviousCompletedLength = null;
                        }


                    }
                    model.IsStage = (dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_STAGE_PHASE)).FirstOrDefault();
                    string status = (from item in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                     where item.IMS_PR_ROAD_CODE == proposalCode
                                     && item.EXEC_ISCOMPLETED == "C"
                                     select item.EXEC_ISCOMPLETED).FirstOrDefault();
                    if (status == "C")
                    {
                        model.CompleteStatus = "C";
                    }
                    else
                    {
                        model.CompleteStatus = "P";
                    }

                    IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    if (master != null)
                    {
                        model.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                        model.Package = master.IMS_PACKAGE_ID.ToString();
                        model.RoadName = master.IMS_ROAD_NAME;
                        model.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                        model.Sanction_length = master.IMS_PAV_LENGTH;
                        model.MaintananceCost = Convert.ToDouble(master.IMS_SANCTIONED_MAN_AMT1 + master.IMS_SANCTIONED_MAN_AMT2 + master.IMS_SANCTIONED_MAN_AMT3 + master.IMS_SANCTIONED_MAN_AMT4 + master.IMS_SANCTIONED_MAN_AMT5);
                    }

                    int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                    TEND_AGREEMENT_MASTER masterAgreement = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                    model.AgreementYear = masterAgreement.TEND_DATE_OF_AGREEMENT.Year;
                    model.AgreementMonth = masterAgreement.TEND_DATE_OF_AGREEMENT.Month;
                    model.AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);

                    model.changedLength = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Any() ? dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_IS_MRD_APPROVED == "Y").Select(m => m.IMS_CHANGED_LENGTH).FirstOrDefault() : 0;

                    model.changed_SanctionedLength = model.changedLength <= 0 ? model.Sanction_length : model.changedLength;

                    return model;
                }
                else
                    return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetPhysicalRoadDetails().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// save the Physical Road details
        /// </summary>
        /// <param name="progressModel">model containing the physical road details</param>
        /// <param name="message">returns the status of save operation</param>
        /// <returns></returns>
        public bool AddPhysicalProgressDetails(ExecutionRoadStatusViewModel progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            //List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = null;

            // Added on 30-03-2022 by Srishti Tyagi
            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];   //10
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];  //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);
            int allowedMonth = (DateTime.Now.Month == AprilMonthValue && DateTime.Now.Day <= AprilMonthDayValue) ? (DateTime.Now.Month - 1) : DateTime.Now.Month;
            int allowedYear = DateTime.Now.Year;
            // Changes end here 

            // Changes START here  by saurabh
            DateTime FinanDate = DateTime.Now; // change
            //int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year - 1; // change
            //DateTime Conditional_Date_Value = new DateTime(FinancialYear + 1, 3, 31, 00, 00, 00);  // change

            int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year; // change
            DateTime Conditional_Date_Value = new DateTime(FinancialYear, 3, 31, 00, 00, 00);  // change
            int CondFinanYear = FinancialYear;
            //DateTime TestDate = new DateTime(2023, 4, 6, 00, 00, 00);  // change commentable
            //progressModel.ExecutionCompleteDate = TestDate.ToString();  // change commentable
            Nullable<DateTime> ProgressDate = new DateTime();
            if (progressModel.ExecutionCompleteDate != null)
            {
                
                ProgressDate = Convert.ToDateTime(progressModel.ExecutionCompleteDate);
            }
            else
            {
                ProgressDate = DateTime.Now;
            }
            Nullable<DateTime> Entry_Date = new DateTime();
            if (ProgressDate != null)
            {
                Entry_Date = (ProgressDate.Value.Day <= AprilMonthDayValue && ProgressDate.Value.Month == AprilMonthValue)
                        ? Conditional_Date_Value : ProgressDate;
            }
            if (FinanDate.Month == AprilMonthValue && FinanDate.Day > AprilMonthDayValue)   // CHANGE
            {
                if (Entry_Date.Value.Year * 12 + Entry_Date.Value.Month <= CondFinanYear * 12 + 3)
                {
                    message = "Progress can be entered in Current Date of Current Financial Year.";
                    return false;                  
                }
            }
            var ProgressMonth = Entry_Date.Value.Month;
            var ProgressYear = Entry_Date.Value.Year;
            // Change ended here by saurabh

            using (TransactionScope ts = new TransactionScope())
            {
                try
                {

                    //if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE && m.IMS_PROGRESS_STATUS_FREEZE!=null && m.IMS_PROGRESS_STATUS_FREEZE=="Y"))
                    //{
                    //    message = "Physical Road Progress Details freezed for this Road. Progress Details can not be added further for this Road.";
                    //    return false;
                    //}
                    // Above Code Commented By Saurabh Jojare for Adding Progress to Freezed Road on 17-12-2021


                    //if (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE && m.EXEC_PROG_YEAR == progressModel.EXEC_PROG_YEAR && m.EXEC_PROG_MONTH == progressModel.EXEC_PROG_MONTH))
                    //{
                    //    message = "Physical Road Progress Details Already Exist.";
                    //    return false;
                    //}
                    if (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE && m.EXEC_PROG_YEAR == ProgressYear && m.EXEC_PROG_MONTH == ProgressMonth))
                    {
                        message = "Physical Road Progress Details Already Exist.";
                        return false;
                    }  // if loop changed by saurabh
                    else
                    {
                        EXEC_ROADS_MONTHLY_STATUS masterRoadProgress = new EXEC_ROADS_MONTHLY_STATUS();
                        masterRoadProgress.EXEC_BASE_COURSE = progressModel.EXEC_BASE_COURSE;
                        masterRoadProgress.EXEC_CD_WORKS = progressModel.EXEC_CD_WORKS;
                        masterRoadProgress.EXEC_COMPLETED = progressModel.EXEC_COMPLETED;
                        masterRoadProgress.EXEC_EARTHWORK_SUBGRADE = progressModel.EXEC_EARTHWORK_SUBGRADE;
                        masterRoadProgress.EXEC_ISCOMPLETED = progressModel.EXEC_ISCOMPLETED;
                        masterRoadProgress.EXEC_LSB_WORKS = progressModel.EXEC_LSB_WORKS;
                        masterRoadProgress.EXEC_MISCELANEOUS = progressModel.EXEC_MISCELANEOUS;
                        masterRoadProgress.EXEC_PREPARATORY_WORK = progressModel.EXEC_PREPARATORY_WORK;

                        //masterRoadProgress.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                        //masterRoadProgress.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;
                        masterRoadProgress.EXEC_PROG_MONTH = ProgressMonth; // change by saurabh
                        masterRoadProgress.EXEC_PROG_YEAR = ProgressYear;      // change by saurabh

                        masterRoadProgress.EXEC_SIGNS_STONES = progressModel.EXEC_SIGNS_STONES;
                        masterRoadProgress.EXEC_SUBBASE_PREPRATION = progressModel.EXEC_SUBBASE_PREPRATION;
                        masterRoadProgress.EXEC_SURFACE_COURSE = progressModel.EXEC_SURFACE_COURSE;
                        masterRoadProgress.IMS_PR_ROAD_CODE = progressModel.IMS_PR_ROAD_CODE;
                        if (progressModel.EXEC_ISCOMPLETED == "C")
                        {
                            //masterRoadProgress.EXEC_COMPLETION_DATE = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                            masterRoadProgress.EXEC_COMPLETION_DATE = Entry_Date;  // change by saurabh
                        }
                        else
                        {
                            masterRoadProgress.EXEC_COMPLETION_DATE = null;
                        }
                        masterRoadProgress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        masterRoadProgress.USERID = PMGSYSession.Current.UserId;
                        dbContext.EXEC_ROADS_MONTHLY_STATUS.Add(masterRoadProgress);
                        dbContext.SaveChanges();

                        if (masterRoadProgress.EXEC_ISCOMPLETED == "C")
                        {
                            IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                            if (imsMaster != null)
                            {
                                //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                                //{
                                //    imsMaster.IMS_ISCOMPLETED = "C";
                                //}
                                ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                                imsMaster.IMS_ISCOMPLETED = "C";
                               // imsMaster.IMS_ENTRY_DATE_PHYSICAL = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                                imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date; // change by saurabh
                                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                imsMaster.USERID = PMGSYSession.Current.UserId;
                                dbContext.SaveChanges();
                            }
                            if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                            {
                                List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                                 join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                                 where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                                 details.TEND_AGREEMENT_STATUS == "P" &&
                                                                                 master.TEND_AGREEMENT_TYPE == "C"
                                                                                 select details).ToList<TEND_AGREEMENT_DETAIL>();

                                lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m => { m.TEND_AGREEMENT_STATUS = "C"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; m.USERID = PMGSYSession.Current.UserId; });
                                dbContext.SaveChanges();

                                foreach (var item in lstAggrementCodes)
                                {
                                    if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "P";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "W";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).All(m => m.TEND_AGREEMENT_STATUS == "C"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                        tendMaster.TEND_AGREEMENT_STATUS = "C";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }

                                    //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                                }
                            }
                        }
                        else if (masterRoadProgress.EXEC_ISCOMPLETED == "P")
                        {
                            IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                            if (imsMaster != null)
                            {
                                //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                                //{
                                //    imsMaster.IMS_ISCOMPLETED = "P";
                                //}
                                ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                                imsMaster.IMS_ISCOMPLETED = "P";
                                // Added on 30-03-2022 by Srishti Tyagi 
                                //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                                //imsMaster.IMS_ENTRY_DATE_PHYSICAL = (DateTime.Now.Day <= AprilMonthDayValue && DateTime.Now.Month == AprilMonthValue)
                                //    ? Conditional_Date_Value : DateTime.Now;
                                imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date; // change by saurabh
                                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                imsMaster.USERID = PMGSYSession.Current.UserId;
                                dbContext.SaveChanges();
                            }

                            if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                            {
                                List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                                 join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                                 where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                                 (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") &&
                                                                                 master.TEND_AGREEMENT_TYPE == "C"
                                                                                 select details).ToList<TEND_AGREEMENT_DETAIL>();

                                lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m => { m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; m.USERID = PMGSYSession.Current.UserId; });
                                dbContext.SaveChanges();

                                foreach (var item in lstAggrementCodes)
                                {
                                    if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "P";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "W";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).All(m => m.TEND_AGREEMENT_STATUS == "C"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                        tendMaster.TEND_AGREEMENT_STATUS = "C";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                                }
                            }
                        }
                        else
                        {
                            IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                            if (imsMaster != null)
                            {
                                //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                                //{
                                //    imsMaster.IMS_ISCOMPLETED = masterRoadProgress.EXEC_ISCOMPLETED;
                                //}
                                ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                                imsMaster.IMS_ISCOMPLETED = masterRoadProgress.EXEC_ISCOMPLETED;
                                // Added on 31-03-2022 by Srishti Tyagi
                                //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                                //imsMaster.IMS_ENTRY_DATE_PHYSICAL = (DateTime.Now.Day <= AprilMonthDayValue && DateTime.Now.Month == AprilMonthValue)
                                //    ? Conditional_Date_Value : DateTime.Now;
                                imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date; // change by saurabh
                                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                imsMaster.USERID = PMGSYSession.Current.UserId;
                                dbContext.SaveChanges();
                            }
                        }
                        ts.Complete();
                        //foreach (var item in lstAggrementCodes)
                        //{
                        //    objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                        //}

                        message = "Physical Road Progress details added successfully";
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "AddPhysicalProgressDetails().DAL");
                    message = ex.Message;
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// updates the Physical road details
        /// </summary>
        /// <param name="progressModel">model containing the updated data</param>
        /// <param name="message">returns the result message</param>
        /// <returns></returns>
        public bool EditPhysicalRoadDetails(ExecutionRoadStatusViewModel progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            Dictionary<string, string> decryptedParameters = null;
            string[] encryptedParameters = null;

            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];   //5
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];  //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);

            // Changes Start here by Saurabh
            DateTime FinanDate = DateTime.Now; // change
            //int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year - 1; // change
            //DateTime Conditional_Date_Value = new DateTime(FinancialYear + 1, 3, 31, 00, 00, 00);  // change
            int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year; // change
            DateTime Conditional_Date_Value = new DateTime(FinancialYear, 3, 31, 00, 00, 00);  // change
            int CondFinanYear = FinancialYear;
            //DateTime TestDate = new DateTime(2023, 4, 6, 00, 00, 00);  // change commentable
            //progressModel.ExecutionCompleteDate = TestDate.ToString();  // change commentable
            Nullable<DateTime> ProgressDate = new DateTime();
            if (progressModel.ExecutionCompleteDate != null)
            {
                ProgressDate = Convert.ToDateTime(progressModel.ExecutionCompleteDate);
            }
            else
            {
                ProgressDate = DateTime.Now;
            }
           
            Nullable<DateTime> Entry_Date = new DateTime();
            if (ProgressDate != null)
            {
                Entry_Date = (ProgressDate.Value.Day <= AprilMonthDayValue && ProgressDate.Value.Month == AprilMonthValue)
                        ? Conditional_Date_Value : ProgressDate;
            }
            if (FinanDate.Month == AprilMonthValue && FinanDate.Day > AprilMonthDayValue)   // CHANGE
            {
                if (Entry_Date.Value.Year * 12 + Entry_Date.Value.Month <= CondFinanYear * 12 + 3)
                {
                    message = "Progress can be entered in Current Date of Current Financial Year.";
                    return false;
                }
            }
            var ProgressMonth = Entry_Date.Value.Month;
            var ProgressYear = Entry_Date.Value.Year;
            // Changes ended here by Saurabh

            //List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = null;
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    encryptedParameters = progressModel.EncryptedPhysicalRoadCode.Split('/');
                    if (!(encryptedParameters.Length == 3))
                    {
                        return false;
                    }

                    decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    int IMS_PR_ROAD_CODE = Convert.ToInt32(decryptedParameters["RoadCode"]);
                  //  EXEC_ROADS_MONTHLY_STATUS roadMaster = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(IMS_PR_ROAD_CODE, progressModel.EXEC_PROG_YEAR, progressModel.EXEC_PROG_MONTH);

                    EXEC_ROADS_MONTHLY_STATUS roadMaster = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(IMS_PR_ROAD_CODE, ProgressYear, ProgressMonth);  // change by saurabh
                   
                    //if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && m.IMS_PROGRESS_STATUS_FREEZE != null && m.IMS_PROGRESS_STATUS_FREEZE == "Y"))
                    //{
                    //    message = "Physical Road Progress Details freezed for this Road. Progress Details can not be updated for this Road.";
                    //    return false;
                    //}      
                    // Above Code Commented By Saurabh Jojare for Adding Progress to Freezed Road on 17-12-2021
                    if (roadMaster == null)
                    {
                        message = "Physical progress details not exist for this month and year.";
                        return false;
                    }
                    roadMaster.EXEC_BASE_COURSE = progressModel.EXEC_BASE_COURSE;
                    roadMaster.EXEC_CD_WORKS = progressModel.EXEC_CD_WORKS;
                    roadMaster.EXEC_COMPLETED = progressModel.EXEC_COMPLETED;
                    roadMaster.EXEC_EARTHWORK_SUBGRADE = progressModel.EXEC_EARTHWORK_SUBGRADE;
                    roadMaster.EXEC_ISCOMPLETED = progressModel.EXEC_ISCOMPLETED;
                    roadMaster.EXEC_LSB_WORKS = progressModel.EXEC_LSB_WORKS;
                    roadMaster.EXEC_MISCELANEOUS = progressModel.EXEC_MISCELANEOUS;
                    roadMaster.EXEC_PREPARATORY_WORK = progressModel.EXEC_PREPARATORY_WORK;

                    //roadMaster.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                    //roadMaster.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;
                    roadMaster.EXEC_PROG_MONTH = ProgressMonth; // change
                    roadMaster.EXEC_PROG_YEAR = ProgressYear;   // change

                    roadMaster.EXEC_SIGNS_STONES = progressModel.EXEC_SIGNS_STONES;
                    roadMaster.EXEC_SUBBASE_PREPRATION = progressModel.EXEC_SUBBASE_PREPRATION;
                    roadMaster.EXEC_SURFACE_COURSE = progressModel.EXEC_SURFACE_COURSE;
                    if (progressModel.EXEC_ISCOMPLETED == "C")
                    {
                        //roadMaster.EXEC_COMPLETION_DATE = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                        roadMaster.EXEC_COMPLETION_DATE = Entry_Date; //  change by saurabh
                    }
                    else
                    {
                        roadMaster.EXEC_COMPLETION_DATE = null;
                    }
                    roadMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    roadMaster.USERID = PMGSYSession.Current.UserId;
                    dbContext.Entry(roadMaster).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();


                    if (roadMaster.EXEC_ISCOMPLETED == "C")
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                            //{
                            //    imsMaster.IMS_ISCOMPLETED = "C";
                            //}
                            ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                            imsMaster.IMS_ISCOMPLETED = "C";
                            // Added on 30-03-2022 by srishti Tyagi
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                           // imsMaster.IMS_ENTRY_DATE_PHYSICAL = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;   // change by saurabh
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }
                        if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                        {
                            List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                             join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                             where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                             details.TEND_AGREEMENT_STATUS == "P" &&
                                                                             master.TEND_AGREEMENT_TYPE == "C"
                                                                             select details).ToList<TEND_AGREEMENT_DETAIL>();

                            lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                            {
                                m.TEND_AGREEMENT_STATUS = "C";
                                m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                m.USERID = PMGSYSession.Current.UserId;
                            });
                            dbContext.SaveChanges();

                            foreach (var item in lstAggrementCodes)
                            {
                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "P";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "W";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).All(m => m.TEND_AGREEMENT_STATUS == "C"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                    tendMaster.TEND_AGREEMENT_STATUS = "C";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                            }

                        }
                    }
                    else if (roadMaster.EXEC_ISCOMPLETED == "P")
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L" || imsMaster.IMS_ISCOMPLETED == "C")
                            //{
                            //    imsMaster.IMS_ISCOMPLETED = "P";
                            //}
                            ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                            imsMaster.IMS_ISCOMPLETED = "P";
                            // Added on 31-03-2022 by Srishti Tyagi
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = (DateTime.Now.Day <= AprilMonthDayValue && DateTime.Now.Month == AprilMonthValue)
                            //    ? Conditional_Date_Value : DateTime.Now;
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;   // change by saurabh
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }

                        if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                        {
                            List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                             join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                             where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                             (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") &&
                                                                             master.TEND_AGREEMENT_TYPE == "C"
                                                                             select details).ToList<TEND_AGREEMENT_DETAIL>();

                            lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                            {
                                m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                m.USERID = PMGSYSession.Current.UserId;
                            });
                            dbContext.SaveChanges();

                            foreach (var item in lstAggrementCodes)
                            {
                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "P";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "W";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "C"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                    tendMaster.TEND_AGREEMENT_STATUS = "C";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);

                            }

                        }
                    }
                    else
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                            //{
                            //    imsMaster.IMS_ISCOMPLETED = roadMaster.EXEC_ISCOMPLETED;
                            //}
                            ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                            imsMaster.IMS_ISCOMPLETED = roadMaster.EXEC_ISCOMPLETED;
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = (DateTime.Now.Day <= AprilMonthDayValue && DateTime.Now.Month == AprilMonthValue)
                            //    ? Conditional_Date_Value : DateTime.Now;
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;   // change by saurabh
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }
                    }
                    ts.Complete();
                    //foreach (var item in lstAggrementCodes)
                    //{
                    //    objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                    //}
                    message = "Physical road details updated successfully.";
                    return true;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "EditPhysicalRoadDetails().DAL");
                    message = "Error occurred while processing your request.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// save the LSB Physical de
        /// </summary>
        /// <param name="progressModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddLSBPhysicalProgressDetails(ExecutionLSBStatusViewModel progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();

            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];   //10
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];  //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);

            // Changes Start here by Saurabh
            DateTime FinanDate = DateTime.Now; // change
            //int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year - 1; // change
            //DateTime Conditional_Date_Value = new DateTime(FinancialYear + 1, 3, 31, 00, 00, 00);  // change
            int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year; // change
            DateTime Conditional_Date_Value = new DateTime(FinancialYear, 3, 31, 00, 00, 00);  // change
            int CondFinanYear = FinancialYear;
            //DateTime TestDate = new DateTime(2023, 4, 6, 00, 00, 00);  // change commentable
            //progressModel.ExecutionCompleteDate = TestDate.ToString();  // change commentable
            Nullable<DateTime> ProgressDate = new DateTime();
            if (progressModel.ExecutionCompleteDate != null)
            {
                ProgressDate = Convert.ToDateTime(progressModel.ExecutionCompleteDate);
            }
            else
            {
                ProgressDate = DateTime.Now;
            }

            Nullable<DateTime> Entry_Date = new DateTime();
            if (ProgressDate != null)
            {
                Entry_Date = (ProgressDate.Value.Day <= AprilMonthDayValue && ProgressDate.Value.Month == AprilMonthValue)
                        ? Conditional_Date_Value : ProgressDate;
            }
            if (FinanDate.Month == AprilMonthValue && FinanDate.Day > AprilMonthDayValue)   // CHANGE
            {
                if (Entry_Date.Value.Year * 12 + Entry_Date.Value.Month <= CondFinanYear * 12 + 3)
                {
                    message = "Progress can be entered in Current Date of Current Financial Year.";
                    return false;
                }
            }
            var ProgressMonth = Entry_Date.Value.Month;
            var ProgressYear = Entry_Date.Value.Year;
            // Changes ended here by Saurabh

            //List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = null;

            try
            {
                    using (TransactionScope ts = new TransactionScope())
                    {

                        //if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE && m.IMS_PROGRESS_STATUS_FREEZE != null && m.IMS_PROGRESS_STATUS_FREEZE == "Y"))
                        //{
                        //    message = "LSB Physical Progress Details freezed for this LSB. LSB Progress Details can not be added further for this LSB.";
                        //    return false;
                        //}
                        // Above Code Commented By Saurabh Jojare for Adding Progress to Freezed LSB on 17-12-2021


                        //if (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE && m.EXEC_PROG_YEAR == progressModel.EXEC_PROG_YEAR && m.EXEC_PROG_MONTH == progressModel.EXEC_PROG_MONTH).Any())
                        //{
                        //    message = "Physical LSB details already exist.";
                        //    return false;
                        //}
                        if (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE && m.EXEC_PROG_YEAR == ProgressYear && m.EXEC_PROG_MONTH == ProgressMonth).Any())
                        {
                            message = "Physical LSB details already exist.";
                            return false;
                        }
                        else
                        {
                            EXEC_LSB_MONTHLY_STATUS lsbMaster = new EXEC_LSB_MONTHLY_STATUS();
                            lsbMaster.EXEC_APP_CD_WORKS = progressModel.EXEC_APP_CD_WORKS;
                            lsbMaster.EXEC_APP_COMPLETED = progressModel.EXEC_APP_COMPLETED;
                            lsbMaster.EXEC_APP_ROAD_WORK = progressModel.EXEC_APP_ROAD_WORK;
                            lsbMaster.EXEC_BEARINGS = progressModel.EXEC_BEARINGS;
                            lsbMaster.EXEC_BOTTOM_PLUGGING = progressModel.EXEC_BOTTOM_PLUGGING;
                            lsbMaster.EXEC_BRIDGE_COMPLETED = progressModel.EXEC_BRIDGE_COMPLETED;
                            lsbMaster.EXEC_DECK_SLAB = progressModel.EXEC_DECK_SLAB;
                            lsbMaster.EXEC_FLOOR_PROTECTION = progressModel.EXEC_FLOOR_PROTECTION;
                            lsbMaster.EXEC_ISCOMPLETED = progressModel.EXEC_ISCOMPLETED;
                            lsbMaster.EXEC_PIER_CAP = progressModel.EXEC_PIER_CAP;
                            lsbMaster.EXEC_PIER_SHAFT = progressModel.EXEC_PIER_SHAFT;
                            lsbMaster.EXEC_POSTS_RAILING = progressModel.EXEC_POSTS_RAILING;

                        //lsbMaster.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                        //lsbMaster.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;

                            lsbMaster.EXEC_PROG_MONTH = ProgressMonth;
                            lsbMaster.EXEC_PROG_YEAR = ProgressYear;

                            lsbMaster.EXEC_RAFT = progressModel.EXEC_RAFT;
                            lsbMaster.EXEC_SINKING = progressModel.EXEC_SINKING;
                            lsbMaster.EXEC_TOP_PLUGGING = progressModel.EXEC_TOP_PLUGGING;
                            lsbMaster.EXEC_WEARING_COAT = progressModel.EXEC_WEARING_COAT;
                            lsbMaster.EXEC_WELL_CAP = progressModel.EXEC_WELL_CAP;
                            lsbMaster.IMS_PR_ROAD_CODE = progressModel.IMS_PR_ROAD_CODE;
                            if (progressModel.EXEC_ISCOMPLETED == "C")
                            {
                                //lsbMaster.EXEC_COMPLETION_DATE = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                                  lsbMaster.EXEC_COMPLETION_DATE = Entry_Date;
                            }
                            else
                            {
                                lsbMaster.EXEC_COMPLETION_DATE = null;
                            }
                            lsbMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            lsbMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.EXEC_LSB_MONTHLY_STATUS.Add(lsbMaster);
                            dbContext.SaveChanges();

                            if (lsbMaster.EXEC_ISCOMPLETED == "C")
                            {
                                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                                if (imsMaster != null)
                                {
                                    imsMaster.IMS_ISCOMPLETED = "C";
                                    //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                                    imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;
                                    imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    imsMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                }
                                if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                                {
                                    List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                                     join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                                     where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                                     details.TEND_AGREEMENT_STATUS == "P" &&
                                                                                     master.TEND_AGREEMENT_TYPE == "C"
                                                                                     select details).ToList<TEND_AGREEMENT_DETAIL>();

                                    lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                                    {
                                        m.TEND_AGREEMENT_STATUS = "C";
                                        m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        m.USERID = PMGSYSession.Current.UserId;
                                    });
                                    dbContext.SaveChanges();

                                    foreach (var item in lstAggrementCodes)
                                    {
                                        if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                        {
                                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                            tendMaster.TEND_AGREEMENT_STATUS = "P";
                                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                            tendMaster.USERID = PMGSYSession.Current.UserId;
                                            dbContext.SaveChanges();
                                            continue;
                                        }

                                        if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                        {
                                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                            tendMaster.TEND_AGREEMENT_STATUS = "W";
                                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                            tendMaster.USERID = PMGSYSession.Current.UserId;
                                            dbContext.SaveChanges();
                                            continue;
                                        }

                                        if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "C"))
                                        {
                                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                            tendMaster.TEND_AGREEMENT_STATUS = "C";
                                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                            tendMaster.USERID = PMGSYSession.Current.UserId;
                                            dbContext.SaveChanges();
                                            continue;
                                        }
                                        //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                                    }

                                }
                            }
                            else if (lsbMaster.EXEC_ISCOMPLETED == "P")
                            {
                                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                                if (imsMaster != null)
                                {
                                    imsMaster.IMS_ISCOMPLETED = "P";
                                    //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                                    imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;
                                    imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    imsMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                }

                                if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                                {
                                    List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                                     join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                                     where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                                     (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") &&
                                                                                     master.TEND_AGREEMENT_TYPE == "C"
                                                                                     select details).ToList<TEND_AGREEMENT_DETAIL>();

                                    lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                                    {
                                        m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        m.USERID = PMGSYSession.Current.UserId;
                                    });
                                    dbContext.SaveChanges();

                                    foreach (var item in lstAggrementCodes)
                                    {
                                        if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                        {
                                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                            tendMaster.TEND_AGREEMENT_STATUS = "P";
                                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                            tendMaster.USERID = PMGSYSession.Current.UserId;
                                            dbContext.SaveChanges();
                                            continue;
                                        }

                                        if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W"))
                                        {
                                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                            tendMaster.TEND_AGREEMENT_STATUS = "W";
                                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                            tendMaster.USERID = PMGSYSession.Current.UserId;
                                            dbContext.SaveChanges();
                                            continue;
                                        }

                                        if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "C"))
                                        {
                                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                            tendMaster.TEND_AGREEMENT_STATUS = "C";
                                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                            tendMaster.USERID = PMGSYSession.Current.UserId;
                                            dbContext.SaveChanges();
                                            continue;
                                        }

                                        //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);

                                    }

                                }
                            }
                            else
                            {
                                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                                if (imsMaster != null)
                                {
                                    //if (imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                                    //{
                                    //    imsMaster.IMS_ISCOMPLETED = lsbMaster.EXEC_ISCOMPLETED;
                                    //}
                                    ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                                    imsMaster.IMS_ISCOMPLETED = lsbMaster.EXEC_ISCOMPLETED;
                                    //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                                    imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;
                                    imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    imsMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                }
                            }
                            ts.Complete();
                            //foreach (var item in lstAggrementCodes)
                            //{
                            //    objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                            //}
                            message = "LSB details added successfully";
                            return true;
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "AddLSBPhysicalProgressDetails().DAL");
                    message = "LSB Details not added successfully.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            //}
        }

        /// <summary>
        /// Updates the LSB Physical Details
        /// </summary>
        /// <param name="progressModel">model containing the updated data</param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditLSBPhysicalRoadDetails(ExecutionLSBStatusViewModel progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            Dictionary<string, string> decryptedParameters = null;
            //List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = null;
            string[] encryptedParameters = null;

            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];   //10
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];  //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);

            // Changes Start here by Saurabh
            DateTime FinanDate = DateTime.Now; // change
            //int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year - 1; // change
            //DateTime Conditional_Date_Value = new DateTime(FinancialYear + 1, 3, 31, 00, 00, 00);  // change
            int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year; // change
            DateTime Conditional_Date_Value = new DateTime(FinancialYear, 3, 31, 00, 00, 00);  // change
            int CondFinanYear = FinancialYear;
            //DateTime TestDate = new DateTime(2023, 4, 6, 00, 00, 00);  // change commentable
            //progressModel.ExecutionCompleteDate = TestDate.ToString();  // change commentable
            Nullable<DateTime> ProgressDate = new DateTime();
            if (progressModel.ExecutionCompleteDate != null)
            {
                ProgressDate = Convert.ToDateTime(progressModel.ExecutionCompleteDate);
            }
            else
            {
                ProgressDate = DateTime.Now;
            }

            Nullable<DateTime> Entry_Date = new DateTime();
            if (ProgressDate != null)
            {
                Entry_Date = (ProgressDate.Value.Day <= AprilMonthDayValue && ProgressDate.Value.Month == AprilMonthValue)
                        ? Conditional_Date_Value : ProgressDate;
            }
            if (FinanDate.Month == AprilMonthValue && FinanDate.Day > AprilMonthDayValue)   // CHANGE
            {
                if (Entry_Date.Value.Year * 12 + Entry_Date.Value.Month <= CondFinanYear * 12 + 3)
                {
                    message = "Progress can be entered in Current Date of Current Financial Year.";
                    return false;
                }
            }
            var ProgressMonth = Entry_Date.Value.Month;
            var ProgressYear = Entry_Date.Value.Year;

            // Changes ended here by Saurabh

            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    encryptedParameters = progressModel.EncryptedLSBCode.Split('/');
                    if (!(encryptedParameters.Length == 3))
                    {
                        message = "LSB Physical details not added successfully.";
                        return false;
                    }

                    decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    int IMS_PR_ROAD_CODE = Convert.ToInt32(decryptedParameters["LSBCode"]);

                    //if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && m.IMS_PROGRESS_STATUS_FREEZE != null && m.IMS_PROGRESS_STATUS_FREEZE == "Y"))
                    //{
                    //    message = "LSB Physical Progress Details freezed for this LSB. LSB Progress Details can not be updated for this LSB.";
                    //    return false;
                    //}
                    // Above Code Commented By Saurabh Jojare for Adding Progress to Freezed LSB on 17-12-2021
                    
                    //EXEC_LSB_MONTHLY_STATUS lsbMaster = dbContext.EXEC_LSB_MONTHLY_STATUS.Find(IMS_PR_ROAD_CODE, progressModel.EXEC_PROG_YEAR, progressModel.EXEC_PROG_MONTH);
                    
                    EXEC_LSB_MONTHLY_STATUS lsbMaster = dbContext.EXEC_LSB_MONTHLY_STATUS.Find(IMS_PR_ROAD_CODE, ProgressYear, ProgressMonth);
                    lsbMaster.EXEC_APP_CD_WORKS = progressModel.EXEC_APP_CD_WORKS;
                    lsbMaster.EXEC_APP_COMPLETED = progressModel.EXEC_APP_COMPLETED;
                    lsbMaster.EXEC_APP_ROAD_WORK = progressModel.EXEC_APP_ROAD_WORK;
                    lsbMaster.EXEC_BEARINGS = progressModel.EXEC_BEARINGS;
                    lsbMaster.EXEC_BOTTOM_PLUGGING = progressModel.EXEC_BOTTOM_PLUGGING;
                    lsbMaster.EXEC_BRIDGE_COMPLETED = progressModel.EXEC_BRIDGE_COMPLETED;
                    lsbMaster.EXEC_DECK_SLAB = progressModel.EXEC_DECK_SLAB;
                    lsbMaster.EXEC_FLOOR_PROTECTION = progressModel.EXEC_FLOOR_PROTECTION;
                    lsbMaster.EXEC_ISCOMPLETED = progressModel.EXEC_ISCOMPLETED;
                    lsbMaster.EXEC_PIER_CAP = progressModel.EXEC_PIER_CAP;
                    lsbMaster.EXEC_PIER_SHAFT = progressModel.EXEC_PIER_SHAFT;
                    lsbMaster.EXEC_POSTS_RAILING = progressModel.EXEC_POSTS_RAILING;

                    //lsbMaster.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                    //lsbMaster.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;

                    lsbMaster.EXEC_PROG_MONTH = ProgressMonth;
                    lsbMaster.EXEC_PROG_YEAR = ProgressYear;

                    lsbMaster.EXEC_RAFT = progressModel.EXEC_RAFT;
                    lsbMaster.EXEC_SINKING = progressModel.EXEC_SINKING;
                    lsbMaster.EXEC_TOP_PLUGGING = progressModel.EXEC_TOP_PLUGGING;
                    lsbMaster.EXEC_WEARING_COAT = progressModel.EXEC_WEARING_COAT;
                    lsbMaster.EXEC_WELL_CAP = progressModel.EXEC_WELL_CAP;
                    //lsbMaster.IMS_PR_ROAD_CODE = progressModel.IMS_PR_ROAD_CODE;
                    if (progressModel.EXEC_ISCOMPLETED == "C")
                    {
                        //lsbMaster.EXEC_COMPLETION_DATE = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                        lsbMaster.EXEC_COMPLETION_DATE = Entry_Date;
                    }
                    else
                    {
                        lsbMaster.EXEC_COMPLETION_DATE = null;
                    }
                    lsbMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    lsbMaster.USERID = PMGSYSession.Current.UserId;
                    dbContext.Entry(lsbMaster).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    if (lsbMaster.EXEC_ISCOMPLETED == "C")
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            imsMaster.IMS_ISCOMPLETED = "C";
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }
                        if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                        {
                            List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                             join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                             where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                             (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") &&
                                                                             master.TEND_AGREEMENT_TYPE == "C"
                                                                             select details).ToList<TEND_AGREEMENT_DETAIL>();

                            lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                            {
                                m.TEND_AGREEMENT_STATUS = "C"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                m.USERID = PMGSYSession.Current.UserId;
                            });
                            dbContext.SaveChanges();


                            foreach (var item in lstAggrementCodes)
                            {
                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "P";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                                    dbContext.SaveChanges();
                                    continue;
                                }

                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "W";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }

                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "C"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                    tendMaster.TEND_AGREEMENT_STATUS = "C";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                            }


                        }
                    }
                    else if (lsbMaster.EXEC_ISCOMPLETED == "P")
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            imsMaster.IMS_ISCOMPLETED = "P";
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }

                        if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                        {
                            List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                             join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                             where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                             (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") &&
                                                                             master.TEND_AGREEMENT_TYPE == "C"
                                                                             select details).ToList<TEND_AGREEMENT_DETAIL>();

                            lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                            {
                                m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                m.USERID = PMGSYSession.Current.UserId;
                            });
                            dbContext.SaveChanges();

                            foreach (var item in lstAggrementCodes)
                            {
                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "P";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }

                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "W";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }

                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "C"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                    tendMaster.TEND_AGREEMENT_STATUS = "C";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                }
                            }
                        }
                    }
                    else
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            //if (imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                            //{
                            //    imsMaster.IMS_ISCOMPLETED = lsbMaster.EXEC_ISCOMPLETED;
                            //}
                            ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                            imsMaster.IMS_ISCOMPLETED = lsbMaster.EXEC_ISCOMPLETED;
                            //imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = Entry_Date;
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }
                    }

                    ts.Complete();
                    //foreach (var item in lstAggrementCodes)
                    //{
                    //    objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                    //}
                    message = "LSB Details updated successfully.";
                    return true;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "EditLSBPhysicalRoadDetails().DAL");
                    message = "Error occurred while processing your request.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// returns physical details list of bridges
        /// </summary>
        /// <param name="page">indicates the no. of pages</param>
        /// <param name="rows">indicates no. of rows</param>
        /// <param name="sidx">indicates the sort index </param>
        /// <param name="sord">indicates the sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalCode">id of list details</param>
        /// <returns></returns>
        public Array GetLSBPhysicalProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            int yearCode = 0;
            int monthCode = 0;
            int currMonth = DateTime.Now.Month;
            int currYear = DateTime.Now.Year;
            try
            {

                if ((dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
                }
                var lsbDetails = (from item in dbContext.EXEC_LSB_MONTHLY_STATUS
                                  where item.IMS_PR_ROAD_CODE == proposalCode
                                  select new
                                  {
                                      item.EXEC_APP_CD_WORKS,
                                      item.EXEC_APP_COMPLETED,
                                      item.EXEC_APP_ROAD_WORK,
                                      item.EXEC_BEARINGS,
                                      item.EXEC_BOTTOM_PLUGGING,
                                      item.EXEC_BRIDGE_COMPLETED,
                                      item.EXEC_DECK_SLAB,
                                      item.EXEC_FLOOR_PROTECTION,
                                      item.EXEC_ISCOMPLETED,
                                      item.EXEC_PIER_CAP,
                                      item.EXEC_PIER_SHAFT,
                                      item.EXEC_POSTS_RAILING,
                                      item.EXEC_PROG_MONTH,
                                      item.EXEC_PROG_YEAR,
                                      item.EXEC_RAFT,
                                      item.EXEC_SINKING,
                                      item.EXEC_TOP_PLUGGING,
                                      item.EXEC_WEARING_COAT,
                                      item.EXEC_WELL_CAP,
                                      item.IMS_PR_ROAD_CODE,
                                      item.EXEC_COMPLETION_DATE
                                  });

                totalRecords = lsbDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_APP_CD_WORKS":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_COMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_ROAD_WORK":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_ROAD_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BEARINGS":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BEARINGS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BOTTOM_PLUGGING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BOTTOM_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BRIDGE_COMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BRIDGE_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_DECK_SLAB":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_DECK_SLAB).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FLOOR_PROTECTION":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_FLOOR_PROTECTION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_CAP":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PIER_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_SHAFT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PIER_SHAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_POSTS_RAILING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_POSTS_RAILING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RAFT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_RAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SINKING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_SINKING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_TOP_PLUGGING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_TOP_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WEARING_COAT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_WEARING_COAT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WELL_CAP":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_WELL_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                        //lsbDetails = lsbDetails.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_APP_CD_WORKS":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_COMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_ROAD_WORK":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_ROAD_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BEARINGS":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BEARINGS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BOTTOM_PLUGGING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BOTTOM_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BRIDGE_COMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BRIDGE_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_DECK_SLAB":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_DECK_SLAB).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FLOOR_PROTECTION":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_FLOOR_PROTECTION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_CAP":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PIER_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_SHAFT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PIER_SHAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_POSTS_RAILING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_POSTS_RAILING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RAFT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_RAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SINKING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_SINKING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_TOP_PLUGGING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_TOP_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WEARING_COAT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_WEARING_COAT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WELL_CAP":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_WELL_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //lsbDetails = lsbDetails.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lsbDetails.Select(lsbList => new
                {
                    lsbList.EXEC_APP_CD_WORKS,
                    lsbList.EXEC_APP_COMPLETED,
                    lsbList.EXEC_APP_ROAD_WORK,
                    lsbList.EXEC_BEARINGS,
                    lsbList.EXEC_BOTTOM_PLUGGING,
                    lsbList.EXEC_BRIDGE_COMPLETED,
                    lsbList.EXEC_DECK_SLAB,
                    lsbList.EXEC_FLOOR_PROTECTION,
                    lsbList.EXEC_ISCOMPLETED,
                    lsbList.EXEC_PIER_CAP,
                    lsbList.EXEC_PIER_SHAFT,
                    lsbList.EXEC_POSTS_RAILING,
                    lsbList.EXEC_PROG_MONTH,
                    lsbList.EXEC_PROG_YEAR,
                    lsbList.EXEC_RAFT,
                    lsbList.EXEC_SINKING,
                    lsbList.EXEC_TOP_PLUGGING,
                    lsbList.EXEC_WEARING_COAT,
                    lsbList.EXEC_WELL_CAP,
                    lsbList.IMS_PR_ROAD_CODE,
                    lsbList.EXEC_COMPLETION_DATE
                }).ToArray();

                return gridData.Select(lsbList => new
                {
                    id = lsbList.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        lsbList.EXEC_PROG_MONTH == 1?"January":(lsbList.EXEC_PROG_MONTH == 2?"February":(lsbList.EXEC_PROG_MONTH == 3?"March":(lsbList.EXEC_PROG_MONTH == 4?"April":(lsbList.EXEC_PROG_MONTH == 5?"May":(lsbList.EXEC_PROG_MONTH == 6?"June":(lsbList.EXEC_PROG_MONTH == 7?"July":lsbList.EXEC_PROG_MONTH == 8?"August":(lsbList.EXEC_PROG_MONTH == 9?"September":(lsbList.EXEC_PROG_MONTH == 10?"October":(lsbList.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        lsbList.EXEC_PROG_YEAR.ToString(),
                        //lsbList.EXEC_ISCOMPLETED.ToString() == "P"?"In Progress":"Completed",
                        lsbList.EXEC_ISCOMPLETED=="P"?"In Progress":(lsbList.EXEC_ISCOMPLETED == "C"?"Completed (" + lsbList.EXEC_COMPLETION_DATE.Value.ToString("dd/MM/yyyy") + ")" : lsbList.EXEC_ISCOMPLETED == "F"?"Pending(Forest Clearance)":lsbList.EXEC_ISCOMPLETED == "A"?"Pending(Land Acquisition)":"Pending Legal Cases"),
                        lsbList.EXEC_RAFT.ToString(),
                        lsbList.EXEC_FLOOR_PROTECTION.ToString(),
                        lsbList.EXEC_SINKING.ToString(),
                        lsbList.EXEC_BOTTOM_PLUGGING.ToString(),
                        lsbList.EXEC_TOP_PLUGGING.ToString(),
                        lsbList.EXEC_WELL_CAP.ToString(),
                        lsbList.EXEC_PIER_SHAFT.ToString(),
                        lsbList.EXEC_PIER_CAP.ToString(),
                        lsbList.EXEC_BEARINGS.ToString(),
                        lsbList.EXEC_DECK_SLAB.ToString(),
                        lsbList.EXEC_WEARING_COAT.ToString(),
                        lsbList.EXEC_POSTS_RAILING.ToString(),
                        lsbList.EXEC_APP_ROAD_WORK.ToString(),
                        lsbList.EXEC_APP_CD_WORKS.ToString(),
                        lsbList.EXEC_BRIDGE_COMPLETED.ToString(),
                        lsbList.EXEC_APP_COMPLETED.ToString(),
                        //(lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Physical LSB Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Physical LSB Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 21JULY2017 to allow editing of latest record
                        //( (DateTime.Now.Day <= 5) ? ((lsbList.EXEC_PROG_MONTH== (currMonth - 1) || lsbList.EXEC_PROG_MONTH==currMonth) && lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==currYear && lsbList.EXEC_ISCOMPLETED != "C") : (lsbList.EXEC_PROG_MONTH==currMonth && lsbList.EXEC_PROG_YEAR==currYear && lsbList.EXEC_ISCOMPLETED != "C") ) ?"<a href='#' title='Click here to edit Physical LSB Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //( (DateTime.Now.Day <= 5) ? ((lsbList.EXEC_PROG_MONTH== (currMonth - 1) || lsbList.EXEC_PROG_MONTH==currMonth) && lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==currYear && lsbList.EXEC_ISCOMPLETED != "C") : (lsbList.EXEC_PROG_MONTH==currMonth && lsbList.EXEC_PROG_YEAR==currYear && lsbList.EXEC_ISCOMPLETED != "C") )?"<a href='#' title='Click here to delete Physical LSB Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 01JAN2018 to allow editing of latest record
                        ///Edit
                        ( 
                            //(DateTime.Now.Day <= 5) 
                            (DateTime.Now.Day <= 10) 
                                ? (
                                    (DateTime.Now.Month == 1) ///Check for year change
                                    ? ((lsbList.EXEC_PROG_MONTH== (12) || lsbList.EXEC_PROG_MONTH==currMonth) && lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==(yearCode) && lsbList.EXEC_ISCOMPLETED != "C")
                                    : ((lsbList.EXEC_PROG_MONTH== (currMonth - 1) || lsbList.EXEC_PROG_MONTH==currMonth) && lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==currYear && lsbList.EXEC_ISCOMPLETED != "C") 
                                  )
                                : (lsbList.EXEC_PROG_MONTH==currMonth && lsbList.EXEC_PROG_YEAR==currYear && lsbList.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to edit Physical LSB Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>"
                           : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        ///Delete
                        ( 
                            //(DateTime.Now.Day <= 5) 
                            (DateTime.Now.Day <= 10) 
                                ? (
                                    (DateTime.Now.Day == 1)           
                                    ? ((lsbList.EXEC_PROG_MONTH== (12) || lsbList.EXEC_PROG_MONTH==currMonth) && lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==(yearCode) && lsbList.EXEC_ISCOMPLETED != "C")
                                    : ((lsbList.EXEC_PROG_MONTH== (currMonth - 1) || lsbList.EXEC_PROG_MONTH==currMonth) && lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==yearCode && lsbList.EXEC_ISCOMPLETED != "C")
                                  ) 
                                : (lsbList.EXEC_PROG_MONTH==currMonth && lsbList.EXEC_PROG_YEAR==currYear && lsbList.EXEC_ISCOMPLETED != "C") 
                        
                         ) ? "<a href='#' title='Click here to delete Physical LSB Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>"
                           : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetLSBPhysicalProgressList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the LSB Physical details
        /// </summary>
        /// <param name="proposalCode">id of Proposal Details</param>
        /// <param name="yearCode">year of Propsal details</param>
        /// <param name="monthCode">month of proposal details</param>
        /// <returns>view model of LSB details for updation</returns>
        public ExecutionLSBStatusViewModel GetPhysicalLSBDetails(int proposalCode, int yearCode, int monthCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            ExecutionLSBStatusViewModel lsbModel = new ExecutionLSBStatusViewModel();
            try
            {
                EXEC_LSB_MONTHLY_STATUS lsbMaster = dbContext.EXEC_LSB_MONTHLY_STATUS.Find(proposalCode, yearCode, monthCode);

                lsbModel.EncryptedLSBCode = URLEncrypt.EncryptParameters1(new string[] { "LSBCode=" + lsbMaster.IMS_PR_ROAD_CODE.ToString().Trim() });
                lsbModel.EXEC_APP_CD_WORKS = lsbMaster.EXEC_APP_CD_WORKS;
                lsbModel.EXEC_APP_COMPLETED = lsbMaster.EXEC_APP_COMPLETED;
                lsbModel.EXEC_APP_ROAD_WORK = lsbMaster.EXEC_APP_ROAD_WORK;
                lsbModel.EXEC_BEARINGS = lsbMaster.EXEC_BEARINGS;
                lsbModel.EXEC_BOTTOM_PLUGGING = lsbMaster.EXEC_BOTTOM_PLUGGING;
                lsbModel.EXEC_BRIDGE_COMPLETED = lsbMaster.EXEC_BRIDGE_COMPLETED;
                lsbModel.EXEC_DECK_SLAB = lsbMaster.EXEC_DECK_SLAB;
                lsbModel.EXEC_FLOOR_PROTECTION = lsbMaster.EXEC_FLOOR_PROTECTION;
                lsbModel.EXEC_ISCOMPLETED = lsbMaster.EXEC_ISCOMPLETED;
                lsbModel.EXEC_PIER_CAP = lsbMaster.EXEC_PIER_CAP;
                lsbModel.EXEC_PIER_SHAFT = lsbMaster.EXEC_PIER_SHAFT;
                lsbModel.EXEC_POSTS_RAILING = lsbMaster.EXEC_POSTS_RAILING;
                lsbModel.EXEC_PROG_MONTH = lsbMaster.EXEC_PROG_MONTH;
                lsbModel.EXEC_PROG_YEAR = lsbMaster.EXEC_PROG_YEAR;
                lsbModel.EXEC_RAFT = lsbMaster.EXEC_RAFT;
                lsbModel.EXEC_SINKING = lsbMaster.EXEC_SINKING;
                lsbModel.EXEC_TOP_PLUGGING = lsbMaster.EXEC_TOP_PLUGGING;
                lsbModel.EXEC_WEARING_COAT = lsbMaster.EXEC_WEARING_COAT;
                lsbModel.EXEC_WELL_CAP = lsbMaster.EXEC_WELL_CAP;
                lsbModel.IMS_PR_ROAD_CODE = lsbMaster.IMS_PR_ROAD_CODE;
                lsbModel.Operation = "E";
                if (lsbMaster.EXEC_COMPLETION_DATE != null)
                {
                    lsbModel.ExecutionCompleteDate = objCommon.GetDateTimeToString(lsbMaster.EXEC_COMPLETION_DATE.Value);
                }


                if (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.EXEC_ISCOMPLETED == "C" && m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    lsbModel.CompleteStatus = "C";
                }
                else
                {
                    if (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                    {
                        int? year = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR)) == null ? 0 : (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                        EXEC_LSB_MONTHLY_STATUS lsbDetails = dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_MONTH).FirstOrDefault();
                        lsbModel.previousMonth = lsbDetails.EXEC_PROG_MONTH;
                        lsbModel.previousYear = lsbDetails.EXEC_PROG_YEAR;
                    }
                }

                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (master != null)
                {
                    lsbModel.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    lsbModel.Package = master.IMS_PACKAGE_ID.ToString();
                    lsbModel.RoadName = master.IMS_ROAD_NAME;
                    lsbModel.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    lsbModel.Sanction_length = master.IMS_PAV_LENGTH;
                    lsbModel.Bridge_Cost = Convert.ToDecimal(master.IMS_BRIDGE_WORKS_EST_COST);

                    ///LSB Change 05NOV2019
                    lsbModel.Bridge_Length = master.IMS_BRIDGE_LENGTH;
                    lsbModel.changedLength = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Any() ? dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_IS_MRD_APPROVED == "Y").Select(m => m.IMS_CHANGED_LENGTH).FirstOrDefault() : 0;
                    //roadModel.changed_SanctionedLength = roadModel.changedLength <= 0 ? master.IMS_BRIDGE_LENGTH.Value : roadModel.changedLength;
                }

                int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                TEND_AGREEMENT_MASTER masterAgreement = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                lsbModel.AgreementYear = masterAgreement.TEND_DATE_OF_AGREEMENT.Year;
                lsbModel.AgreementMonth = masterAgreement.TEND_DATE_OF_AGREEMENT.Month;
                lsbModel.AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);

                return lsbModel;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetPhysicalLSBDetails().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// deletes the Physical road progress details entry
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <param name="yearCode">year of progress details</param>
        /// <param name="monthCode">month of progress details</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with response message</returns>
        public bool DeletePhysicalRoadDetails(int proposalCode, int yearCode, int monthCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            int month = 0;
            int year = 0;
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    string completeStatus = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_MONTH == monthCode && m.EXEC_PROG_YEAR == yearCode).Select(m => m.EXEC_ISCOMPLETED).FirstOrDefault();
                    if ((dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode && m.EXEC_PROG_MONTH != monthCode)))
                    {
                        year = yearCode;
                        month = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode && m.EXEC_PROG_MONTH != monthCode).Max(s => s.EXEC_PROG_MONTH));
                    }
                    else if ((dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR != yearCode)))
                    {
                        year = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR != yearCode).Max(y => y.EXEC_PROG_YEAR));
                        month = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == year).Max(s => s.EXEC_PROG_MONTH));
                    }

                    string statusToUpdate = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year).Select(m => m.EXEC_ISCOMPLETED).FirstOrDefault();

                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    if (imsMaster != null)
                    {
                        imsMaster.IMS_ISCOMPLETED = statusToUpdate == null ? "G" : statusToUpdate;
                        if (!dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                        {
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = null;
                        }
                        imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        imsMaster.USERID = PMGSYSession.Current.UserId;
                        dbContext.SaveChanges();
                    }

                    if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                    {
                        List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                         join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                         where details.IMS_PR_ROAD_CODE == proposalCode &&
                                                                         (details.TEND_AGREEMENT_STATUS == "C" || details.TEND_AGREEMENT_STATUS == "P"
                                                                         || details.TEND_AGREEMENT_STATUS == "M") //Added by SAMMED PATIL as per Directions from Srinivasa Sir on 14 October,2016) 
                                                                         && master.TEND_AGREEMENT_TYPE == "C"

                                                                         select details).ToList<TEND_AGREEMENT_DETAIL>();

                        lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == proposalCode).ToList().ForEach(m =>
                        {
                            m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            m.USERID = PMGSYSession.Current.UserId;
                        });
                        dbContext.SaveChanges();
                        foreach (var item in lstAggrementCodes)
                        {
                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).FirstOrDefault();
                            tendMaster.TEND_AGREEMENT_STATUS = "P";
                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            tendMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }

                    }

                    EXEC_ROADS_MONTHLY_STATUS roadMaster = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(proposalCode, yearCode, monthCode);
                    if (roadMaster != null)
                    {
                        roadMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        roadMaster.USERID = PMGSYSession.Current.UserId;
                        dbContext.Entry(roadMaster).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();

                        dbContext.EXEC_ROADS_MONTHLY_STATUS.Remove(roadMaster);
                        dbContext.SaveChanges();
                        ts.Complete();
                        message = "Road Progress details deleted successfully.";
                        return true;
                    }
                    else
                    {
                        message = "Road Progress details is in use and can not be deleted.";
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "DeletePhysicalRoadDetails().DAL");
                    message = "Error Occurred while processing your request.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        #endregion

        #region PHYSICAL_LSB_STATUS

        /// <summary>
        /// returns the progress list of financial details
        /// </summary>
        /// <param name="page">no. of pages in list</param>
        /// <param name="rows">no. of rows per page</param>
        /// <param name="sidx">sort column index</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalCode">list of particular id</param>
        /// <returns></returns>
        public Array GetFinancialProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode, string progressType)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                int? monthCode = 0;
                int? yearCode = 0;
                if ((dbContext.EXEC_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => (Int32?)y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => (Int32?)s.EXEC_PROG_MONTH));
                }

                var lstFinancialProgress = (from item in dbContext.EXEC_PROGRESS
                                            where item.IMS_PR_ROAD_CODE == proposalCode
                                            select new
                                            {
                                                item.EXEC_FINAL_PAYMENT_DATE,
                                                item.EXEC_FINAL_PAYMENT_FLAG,
                                                item.EXEC_PAYMENT_LASTMONTH,
                                                item.EXEC_PAYMENT_THISMONTH,
                                                item.EXEC_PROG_MONTH,
                                                item.EXEC_PROG_YEAR,
                                                item.EXEC_VALUEOFWORK_LASTMONTH,
                                                item.EXEC_VALUEOFWORK_THISMONTH,
                                                item.IMS_PR_ROAD_CODE
                                            });

                totalRecords = lstFinancialProgress.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_FINAL_PAYMENT_DATE":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_FINAL_PAYMENT_DATE).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FINAL_PAYMENT_FLAG":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_FINAL_PAYMENT_FLAG).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PAYMENT_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PAYMENT_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PROG_MONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROGRAM_YEAR":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_VALUEOFWORK_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_VALUEOFWORK_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_FINAL_PAYMENT_DATE":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_FINAL_PAYMENT_DATE).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FINAL_PAYMENT_FLAG":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_FINAL_PAYMENT_FLAG).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PAYMENT_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PAYMENT_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_MONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROGRAM_YEAR":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_VALUEOFWORK_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_VALUEOFWORK_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstFinancialProgress.Select(progressDetails => new
                {
                    progressDetails.EXEC_FINAL_PAYMENT_DATE,
                    progressDetails.EXEC_FINAL_PAYMENT_FLAG,
                    progressDetails.EXEC_PAYMENT_LASTMONTH,
                    progressDetails.EXEC_PAYMENT_THISMONTH,
                    progressDetails.EXEC_PROG_MONTH,
                    progressDetails.EXEC_PROG_YEAR,
                    progressDetails.EXEC_VALUEOFWORK_LASTMONTH,
                    progressDetails.EXEC_VALUEOFWORK_THISMONTH,
                    progressDetails.IMS_PR_ROAD_CODE
                }).ToArray();

                return gridData.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        m.EXEC_PROG_YEAR.ToString(),
                        m.EXEC_PROG_MONTH == 1?"January":(m.EXEC_PROG_MONTH == 2?"February":(m.EXEC_PROG_MONTH == 3?"March":(m.EXEC_PROG_MONTH == 4?"April":(m.EXEC_PROG_MONTH == 5?"May":(m.EXEC_PROG_MONTH == 6?"June":(m.EXEC_PROG_MONTH == 7?"July":m.EXEC_PROG_MONTH == 8?"August":(m.EXEC_PROG_MONTH == 9?"September":(m.EXEC_PROG_MONTH == 10?"October":(m.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        m.EXEC_VALUEOFWORK_LASTMONTH.ToString(),
                        m.EXEC_VALUEOFWORK_THISMONTH.ToString(),
                        (m.EXEC_VALUEOFWORK_LASTMONTH + m.EXEC_VALUEOFWORK_THISMONTH).ToString(),
                        m.EXEC_PAYMENT_LASTMONTH.ToString(),
                        m.EXEC_PAYMENT_THISMONTH.ToString(),
                        (m.EXEC_PAYMENT_LASTMONTH + m.EXEC_PAYMENT_THISMONTH).ToString(),
                        m.EXEC_FINAL_PAYMENT_FLAG=="Y"?"Yes":"No",
                        m.EXEC_FINAL_PAYMENT_DATE==null?"-":Convert.ToDateTime(m.EXEC_FINAL_PAYMENT_DATE).ToString("dd/MM/yyyy"),
                        (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Financial Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditFinancialProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Financial Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFinancialProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetFinancialProgressList().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the data for updation
        /// </summary>
        /// <param name="proposalCode">proposal code </param>
        /// <param name="yearCode">year of data</param>
        /// <param name="monthCode">month of data</param>
        /// <returns></returns>
        public ExecutionProgressViewModel GetFinancialDetails(int proposalCode, int yearCode, int monthCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                CommonFunctions objCommon = new CommonFunctions();
                EXEC_PROGRESS progressMaster = dbContext.EXEC_PROGRESS.Find(proposalCode, yearCode, monthCode);
                ExecutionProgressViewModel progressModel = new ExecutionProgressViewModel();
                if (progressMaster != null)
                {
                    progressModel.EncyptedProgressCode = URLEncrypt.EncryptParameters1(new string[] { "ProposalCode=" + progressMaster.IMS_PR_ROAD_CODE.ToString().Trim() });
                    if (progressMaster.EXEC_FINAL_PAYMENT_DATE != null)
                    {
                        progressModel.EXEC_FINAL_PAYMENT_DATE = objCommon.GetDateTimeToString(progressMaster.EXEC_FINAL_PAYMENT_DATE.Value);
                    }
                    else
                    {
                        progressModel.EXEC_FINAL_PAYMENT_DATE = null;
                    }
                    progressModel.EXEC_FINAL_PAYMENT_FLAG = progressMaster.EXEC_FINAL_PAYMENT_FLAG;
                    progressModel.EXEC_PAYMENT_LASTMONTH = progressMaster.EXEC_PAYMENT_LASTMONTH;
                    progressModel.EXEC_PAYMENT_THISMONTH = progressMaster.EXEC_PAYMENT_THISMONTH;
                    progressModel.EXEC_PROG_MONTH = progressMaster.EXEC_PROG_MONTH;
                    progressModel.EXEC_PROG_YEAR = progressMaster.EXEC_PROG_YEAR;
                    //progressModel.EXEC_PROGRESS_TYPE = progressMaster.EXEC_PROGRESS_TYPE;
                    progressModel.EXEC_VALUEOFWORK_LASTMONTH = progressMaster.EXEC_VALUEOFWORK_LASTMONTH;
                    progressModel.EXEC_VALUEOFWORK_THISMONTH = progressMaster.EXEC_VALUEOFWORK_THISMONTH;
                    progressModel.IMS_PR_ROAD_CODE = progressMaster.IMS_PR_ROAD_CODE;
                    progressModel.Operation = "E";

                    if (dbContext.EXEC_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                    {
                        int? year = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(y => y.EXEC_PROG_YEAR).Select(y => y.EXEC_PROG_YEAR).FirstOrDefault());
                        int? month = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == year).Max(m => m.EXEC_PROG_MONTH));
                        EXEC_PROGRESS masterRoad = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_MONTH).FirstOrDefault());

                        if (masterRoad != null)
                        {
                            progressModel.PreviousMonth = masterRoad.EXEC_PROG_MONTH;
                            progressModel.PreviousYear = masterRoad.EXEC_PROG_YEAR;
                            progressModel.TotalValueofwork = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault()) + (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_VALUEOFWORK_THISMONTH).FirstOrDefault());
                            progressModel.TotalPayment = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault()) + (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_PAYMENT_THISMONTH).FirstOrDefault());
                            progressModel.LastPaymentValue = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault());
                            progressModel.LastMonthValue = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault());
                            progressModel.EXEC_PAYMENT_LASTMONTH = progressModel.LastPaymentValue;
                            progressModel.EXEC_VALUEOFWORK_LASTMONTH = progressModel.LastMonthValue;
                            string status = (from item in dbContext.EXEC_PROGRESS
                                             where item.IMS_PR_ROAD_CODE == proposalCode &&
                                             item.EXEC_FINAL_PAYMENT_FLAG == "Y"
                                             select item.EXEC_FINAL_PAYMENT_FLAG).FirstOrDefault();

                            if (status == "Y")
                            {
                                progressModel.CompleteStatus = "C";
                            }
                            else
                            {
                                progressModel.CompleteStatus = "N";
                            }
                        }
                    }
                    progressModel.AgreementTotal = (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.TEND_AGREEMENT_AMOUNT).FirstOrDefault());

                    int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                    progressModel.AgreementCost = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(m => m.TEND_AGREEMENT_AMOUNT).FirstOrDefault();
                    progressModel.AgreementDate = objCommon.GetDateTimeToString(dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(m => m.TEND_DATE_OF_AGREEMENT).FirstOrDefault());
                    IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    if (master != null)
                    {
                        progressModel.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                        progressModel.Package = master.IMS_PACKAGE_ID.ToString();
                        progressModel.RoadName = master.IMS_ROAD_NAME;
                        progressModel.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                        progressModel.Sanction_length = master.IMS_PAV_LENGTH;
                    }
                    return progressModel;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetFinancialDetails().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// save the data of financial details
        /// </summary>
        /// <param name="progressModel">model containing data </param>
        /// <param name="message">returns the error message</param>
        /// <returns></returns>
        public bool AddFinancialProgress(ExecutionProgressViewModel progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    DateTime? finalPaymentDate = null;
                    EXEC_PROGRESS progreeMaster = new EXEC_PROGRESS();
                    CommonFunctions objCommon = new CommonFunctions();
                    if (progressModel.EXEC_FINAL_PAYMENT_DATE != null)
                    {
                        finalPaymentDate = objCommon.GetStringToDateTime(progressModel.EXEC_FINAL_PAYMENT_DATE);
                        progreeMaster.EXEC_FINAL_PAYMENT_DATE = finalPaymentDate;
                    }
                    progreeMaster.EXEC_FINAL_PAYMENT_FLAG = progressModel.EXEC_FINAL_PAYMENT_FLAG;
                    progreeMaster.EXEC_PAYMENT_LASTMONTH = progressModel.EXEC_PAYMENT_LASTMONTH;
                    progreeMaster.EXEC_PAYMENT_THISMONTH = progressModel.EXEC_PAYMENT_THISMONTH;
                    progreeMaster.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                    progreeMaster.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;
                    //progreeMaster.EXEC_PROGRESS_TYPE = progressModel.EXEC_PROGRESS_TYPE;
                    progreeMaster.EXEC_VALUEOFWORK_LASTMONTH = progressModel.EXEC_VALUEOFWORK_LASTMONTH;
                    progreeMaster.EXEC_VALUEOFWORK_THISMONTH = progressModel.EXEC_VALUEOFWORK_THISMONTH;
                    progreeMaster.IMS_PR_ROAD_CODE = progressModel.IMS_PR_ROAD_CODE;
                    progreeMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    progreeMaster.USERID = PMGSYSession.Current.UserId;
                    dbContext.EXEC_PROGRESS.Add(progreeMaster);
                    dbContext.SaveChanges();

                    IMS_SANCTIONED_PROJECTS proposalMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                    if (proposalMaster != null)
                    {
                        proposalMaster.IMS_VALUEOFWORK_DONE = (progressModel.EXEC_VALUEOFWORK_LASTMONTH + progressModel.EXEC_VALUEOFWORK_THISMONTH);
                        proposalMaster.IMS_PAYMENT_MADE = (progressModel.EXEC_PAYMENT_LASTMONTH + progressModel.EXEC_PAYMENT_THISMONTH);
                        proposalMaster.IMS_FINAL_PAYMENT_FLAG = progressModel.EXEC_FINAL_PAYMENT_FLAG;
                        proposalMaster.IMS_ENTRY_DATE_FINANCIAL = DateTime.Now;
                        if (proposalMaster.IMS_VALUEOFWORK_DONE > Convert.ToDecimal(99999999.99))
                        {
                            message = "Total Value of work done is invalid. ";
                            return false;
                        }

                        if (proposalMaster.IMS_PAYMENT_MADE > Convert.ToDecimal(99999999.99))
                        {
                            message = "Total Value of payment is invalid. ";
                            return false;
                        }


                        if (progressModel.EXEC_FINAL_PAYMENT_DATE != null)
                        {
                            proposalMaster.IMS_FINAL_PAYMENT_DATE = finalPaymentDate; //new CommonFunctions().GetStringToDateTime(progressModel.EXEC_FINAL_PAYMENT_DATE);
                        }
                        progreeMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        progreeMaster.USERID = PMGSYSession.Current.UserId;
                        dbContext.Entry(proposalMaster).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    ts.Complete();
                    message = "Financial Details added successfully.";
                    return true;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "AddFinancialProgress().DAL");
                    message = "Error Occurred while processing your request.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// updates the financial details
        /// </summary>
        /// <param name="progressModel">model containing the updated data</param>
        /// <param name="message">indicates the response message</param>
        /// <returns>returns status along with the response message</returns>
        public bool EditFinancialProgress(ExecutionProgressViewModel progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    EXEC_PROGRESS master = dbContext.EXEC_PROGRESS.Find(progressModel.IMS_PR_ROAD_CODE, progressModel.EXEC_PROG_YEAR, progressModel.EXEC_PROG_MONTH);
                    if (master != null)
                    {
                        if (progressModel.EXEC_FINAL_PAYMENT_FLAG == "Y")
                        {
                            master.EXEC_FINAL_PAYMENT_DATE = new CommonFunctions().GetStringToDateTime(progressModel.EXEC_FINAL_PAYMENT_DATE);
                        }
                        else
                        {
                            master.EXEC_FINAL_PAYMENT_DATE = null;
                        }
                        master.EXEC_FINAL_PAYMENT_FLAG = progressModel.EXEC_FINAL_PAYMENT_FLAG;
                        master.EXEC_PAYMENT_THISMONTH = progressModel.EXEC_PAYMENT_THISMONTH;
                        master.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                        master.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;
                        master.EXEC_VALUEOFWORK_THISMONTH = progressModel.EXEC_VALUEOFWORK_THISMONTH;
                        master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        master.USERID = PMGSYSession.Current.UserId;
                        dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();

                        IMS_SANCTIONED_PROJECTS proposalMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (proposalMaster != null)
                        {
                            proposalMaster.IMS_VALUEOFWORK_DONE = (master.EXEC_VALUEOFWORK_LASTMONTH + progressModel.EXEC_VALUEOFWORK_THISMONTH);
                            proposalMaster.IMS_PAYMENT_MADE = (master.EXEC_PAYMENT_LASTMONTH + progressModel.EXEC_PAYMENT_THISMONTH);
                            proposalMaster.IMS_FINAL_PAYMENT_FLAG = progressModel.EXEC_FINAL_PAYMENT_FLAG;
                            proposalMaster.IMS_ENTRY_DATE_FINANCIAL = DateTime.Now;
                            if (proposalMaster.IMS_VALUEOFWORK_DONE > Convert.ToDecimal(99999999.99))
                            {
                                message = "Total Value of work done is invalid. ";
                                return false;
                            }

                            if (proposalMaster.IMS_PAYMENT_MADE > Convert.ToDecimal(99999999.99))
                            {
                                message = "Total Value of payment is invalid. ";
                                return false;
                            }

                            if (progressModel.EXEC_FINAL_PAYMENT_DATE != null)
                            {
                                proposalMaster.IMS_FINAL_PAYMENT_DATE = new CommonFunctions().GetStringToDateTime(progressModel.EXEC_FINAL_PAYMENT_DATE);
                            }
                            proposalMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            proposalMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.Entry(proposalMaster).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                        ts.Complete();
                        message = "Financial Details Updated successfully.";
                        return true;
                    }
                    else
                    {
                        message = "Error Occurred while processing your request.";
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "AddFinancialProgress().DAL");
                    message = "Error Occurred while processing your request.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// returns the extra details associated with the road
        /// </summary>
        /// <param name="proposalCode">road proposal id</param>
        /// <returns>model of road status along with the extra details</returns>
        public ExecutionRoadStatusViewModel GetRoadDetails(int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                ExecutionRoadStatusViewModel roadModel = new ExecutionRoadStatusViewModel();
                if (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    int? year = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(m => m.EXEC_PROG_YEAR);
                    EXEC_ROADS_MONTHLY_STATUS masterMonth = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_MONTH).FirstOrDefault();
                    if (masterMonth != null)
                    {
                        roadModel.PreviousMonth = masterMonth.EXEC_PROG_MONTH;
                        roadModel.PreviousYear = masterMonth.EXEC_PROG_YEAR;
                        roadModel.OldCompleted = masterMonth.EXEC_COMPLETED;
                    }

                    int newmonthCode = roadModel.PreviousMonth;
                    int newyearCode = roadModel.PreviousYear;

                    EXEC_ROADS_MONTHLY_STATUS masterRoad = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(proposalCode, newyearCode, newmonthCode);
                    if (masterRoad != null)
                    {
                        roadModel.PreviousBaseCourse = masterRoad.EXEC_BASE_COURSE == null ? 0 : masterRoad.EXEC_BASE_COURSE.Value;
                        roadModel.PreviousEarthWork = masterRoad.EXEC_EARTHWORK_SUBGRADE == null ? 0 : masterRoad.EXEC_EARTHWORK_SUBGRADE.Value;
                        roadModel.PreviousMiscellaneous = masterRoad.EXEC_MISCELANEOUS == null ? 0 : masterRoad.EXEC_MISCELANEOUS.Value;
                        roadModel.PreviousPreparatoryWork = masterRoad.EXEC_PREPARATORY_WORK == null ? 0 : masterRoad.EXEC_PREPARATORY_WORK.Value;
                        roadModel.PreviousSubbase = masterRoad.EXEC_SUBBASE_PREPRATION == null ? 0 : masterRoad.EXEC_SUBBASE_PREPRATION.Value;
                        roadModel.PreviousSurfaceCourse = masterRoad.EXEC_SURFACE_COURSE == null ? 0 : masterRoad.EXEC_SURFACE_COURSE.Value;
                        roadModel.PreviousCDWorks = Convert.ToInt32(masterRoad.EXEC_CD_WORKS);
                        roadModel.PreviousLSB = Convert.ToInt32(masterRoad.EXEC_LSB_WORKS);
                        roadModel.PreviousRoadSigns = Convert.ToInt32(masterRoad.EXEC_SIGNS_STONES);
                        roadModel.PreviousCompletedLength = masterRoad.EXEC_COMPLETED == null ? 0 : masterRoad.EXEC_COMPLETED.Value;
                    }
                    else
                    {
                        roadModel.PreviousBaseCourse = 0;
                        roadModel.PreviousEarthWork = 0;
                        roadModel.PreviousMiscellaneous = 0;
                        roadModel.PreviousPreparatoryWork = 0;
                        roadModel.PreviousSubbase = 0;
                        roadModel.PreviousSurfaceCourse = 0;
                        roadModel.PreviousCDWorks = 0;
                        roadModel.PreviousLSB = 0;
                        roadModel.PreviousRoadSigns = 0;
                        roadModel.PreviousCompletedLength = 0;
                    }
                }

                int agreementCode = 0;

                if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "P"))
                {
                    agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "P").OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                }
                else
                {
                    agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                }

                TEND_AGREEMENT_MASTER masterAgreement = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                roadModel.AgreementYear = masterAgreement.TEND_DATE_OF_AGREEMENT.Year;
                roadModel.AgreementMonth = masterAgreement.TEND_DATE_OF_AGREEMENT.Month;
                roadModel.AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);

                roadModel.IsStage = (dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_STAGE_PHASE)).FirstOrDefault();

                string status = (from item in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                 where item.IMS_PR_ROAD_CODE == proposalCode
                                 && item.EXEC_ISCOMPLETED == "C"
                                 select item.EXEC_ISCOMPLETED).FirstOrDefault();
                if (status == "C")
                {
                    roadModel.CompleteStatus = "C";
                }
                else
                {
                    roadModel.CompleteStatus = "P";
                }

                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (master != null)
                {
                    roadModel.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    roadModel.Package = master.IMS_PACKAGE_ID.ToString();
                    roadModel.RoadName = master.IMS_ROAD_NAME;
                    roadModel.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    //roadModel.Sanction_Cost = PMGSYSession.Current.PMGSYScheme == 1 ? Convert.ToDouble((master.IMS_SANCTIONED_PAV_AMT == null ? 0 : master.IMS_SANCTIONED_PAV_AMT) + (master.IMS_SANCTIONED_PW_AMT == null ? 0 : master.IMS_SANCTIONED_PW_AMT) + (master.IMS_SANCTIONED_OW_AMT == null ? 0 : master.IMS_SANCTIONED_OW_AMT) + (master.IMS_SANCTIONED_CD_AMT == null ? 0 : master.IMS_SANCTIONED_CD_AMT) + (master.IMS_SANCTIONED_BW_AMT == null ? 0 : master.IMS_SANCTIONED_BW_AMT) + (master.IMS_SANCTIONED_BS_AMT == null ? 0 : master.IMS_SANCTIONED_BS_AMT) + (master.IMS_SANCTIONED_RS_AMT == null ? 0 : master.IMS_SANCTIONED_RS_AMT))
                    //                                : Convert.ToDouble((master.IMS_SANCTIONED_PAV_AMT == null ? 0 : master.IMS_SANCTIONED_PAV_AMT) + (master.IMS_SANCTIONED_PW_AMT == null ? 0 : master.IMS_SANCTIONED_PW_AMT) + (master.IMS_SANCTIONED_OW_AMT == null ? 0 : master.IMS_SANCTIONED_OW_AMT) + (master.IMS_SANCTIONED_CD_AMT == null ? 0 : master.IMS_SANCTIONED_CD_AMT) + (master.IMS_SANCTIONED_FC_AMT == null ? 0 : master.IMS_SANCTIONED_FC_AMT) + (master.IMS_SANCTIONED_HS_AMT == null ? 0 : master.IMS_SANCTIONED_HS_AMT) + (master.IMS_SANCTIONED_BW_AMT == null ? 0 : master.IMS_SANCTIONED_BW_AMT) + (master.IMS_SANCTIONED_BS_AMT == null ? 0 : master.IMS_SANCTIONED_BS_AMT));
                    roadModel.Sanction_length = master.IMS_PAV_LENGTH;
                    roadModel.Year = master.IMS_YEAR;

                    roadModel.SanctionYear = roadModel.Year + "-" + (roadModel.Year + 1);

                    if (dbContext.IMS_PROPOSAL_WORK.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                    {
                        var workCodeList = dbContext.IMS_PROPOSAL_WORK.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_WORK_CODE).ToList();
                        var agreementMasterCodes = dbContext.TEND_AGREEMENT_DETAIL.Where(m => workCodeList.Contains(m.IMS_WORK_CODE.Value)).Select(m => m.TEND_AGREEMENT_CODE).ToList();
                        roadModel.AgreementCost = dbContext.TEND_AGREEMENT_MASTER.Where(m => agreementMasterCodes.Contains(m.TEND_AGREEMENT_CODE)).Sum(m => m.TEND_AGREEMENT_AMOUNT);
                    }
                    else
                    {
                        roadModel.AgreementCost = masterAgreement.TEND_AGREEMENT_AMOUNT;
                    }
                }

                roadModel.changedLength = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Any() ? dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_IS_MRD_APPROVED == "Y").Select(m => m.IMS_CHANGED_LENGTH).FirstOrDefault() : 0;

                roadModel.changed_SanctionedLength = roadModel.changedLength <= 0 ? roadModel.Sanction_length : roadModel.changedLength;

                return roadModel;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetRoadDetails().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// deletes the Physical bridge progress details entry
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <param name="yearCode">year of progress details</param>
        /// <param name="monthCode">month of progress details</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with response message</returns>
        public bool DeletePhysicalLSBDetails(int proposalCode, int yearCode, int monthCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    string completeStatus = dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode && m.EXEC_PROG_MONTH == monthCode).Select(m => m.EXEC_ISCOMPLETED).FirstOrDefault();
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    if (imsMaster != null)
                    {
                        imsMaster.IMS_ISCOMPLETED = "P";
                        if (!dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                        {
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = null;
                        }
                        imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        imsMaster.USERID = PMGSYSession.Current.UserId;
                        dbContext.SaveChanges();
                    }



                    if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                    {
                        List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                         join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                         where details.IMS_PR_ROAD_CODE == proposalCode &&
                                                                         (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") && master.TEND_AGREEMENT_TYPE == "C"
                                                                         select details).ToList<TEND_AGREEMENT_DETAIL>();

                        lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == proposalCode).ToList().ForEach(m =>
                        {
                            m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            m.USERID = PMGSYSession.Current.UserId;
                        });
                        dbContext.SaveChanges();

                        foreach (var item in lstAggrementCodes)
                        {
                            TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).FirstOrDefault();
                            tendMaster.TEND_AGREEMENT_STATUS = "P";
                            tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            tendMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                    }
                    EXEC_LSB_MONTHLY_STATUS lsbMaster = dbContext.EXEC_LSB_MONTHLY_STATUS.Find(proposalCode, yearCode, monthCode);
                    if (lsbMaster != null)
                    {

                        lsbMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        lsbMaster.USERID = PMGSYSession.Current.UserId;
                        dbContext.Entry(lsbMaster).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();

                        dbContext.EXEC_LSB_MONTHLY_STATUS.Remove(lsbMaster);
                        dbContext.SaveChanges();
                        ts.Complete();
                        message = "LSB Progress details deleted successfully.";
                        return true;
                    }
                    else
                    {
                        message = "LSB Progress details is in use and can not be deleted.";
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "DeletePhysicalLSBDetails().DAL");
                    message = "Error Occurred while processing your request.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        #endregion

        #region CD_WORKS

        /// <summary>
        /// returns the data for populating the CDWorks list
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sorting column name</param>
        /// <param name="sord">sorting order</param>
        /// <param name="totalRecords">total no. of records </param>
        /// <param name="proposalCode">id representing the details</param>
        /// <returns></returns>
        public Array GetCDWorksList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var cdWorksList = (from item in dbContext.EXEC_CDWORKS
                                   join masterCDWorks in dbContext.MASTER_CDWORKS_TYPE on item.MAST_CDWORKS_CODE equals masterCDWorks.MAST_CDWORKS_CODE
                                   where item.IMS_PR_ROAD_CODE == proposalCode
                                   select new
                                   {
                                       item.IMS_PR_ROAD_CODE,
                                       item.EXEC_RCD_CHAINAGE,
                                       item.EXEC_RCD_CODE,
                                       item.EXEC_RCD_STATUS,
                                       masterCDWorks.MAST_CDWORKS_NAME,
                                   });

                totalRecords = cdWorksList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_PR_ROAD_CODE":
                                cdWorksList = cdWorksList.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RCD_CHAINAGE":
                                cdWorksList = cdWorksList.OrderBy(m => m.EXEC_RCD_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RCD_CODE":
                                cdWorksList = cdWorksList.OrderBy(m => m.EXEC_RCD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RCD_STATUS":
                                cdWorksList = cdWorksList.OrderBy(m => m.EXEC_RCD_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                cdWorksList = cdWorksList.OrderBy(m => m.EXEC_RCD_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "IMS_PR_ROAD_CODE":
                                cdWorksList = cdWorksList.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RCD_CHAINAGE":
                                cdWorksList = cdWorksList.OrderByDescending(m => m.EXEC_RCD_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RCD_CODE":
                                cdWorksList = cdWorksList.OrderByDescending(m => m.EXEC_RCD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RCD_STATUS":
                                cdWorksList = cdWorksList.OrderByDescending(m => m.EXEC_RCD_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                cdWorksList = cdWorksList.OrderByDescending(m => m.EXEC_RCD_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    cdWorksList = cdWorksList.OrderBy(m => m.EXEC_RCD_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = cdWorksList.Select(listDetails => new
                {
                    listDetails.IMS_PR_ROAD_CODE,
                    listDetails.EXEC_RCD_CHAINAGE,
                    listDetails.EXEC_RCD_CODE,
                    listDetails.MAST_CDWORKS_NAME,
                }).ToArray();

                return gridData.Select(listDetails => new
                {
                    id = listDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        listDetails.EXEC_RCD_CHAINAGE.ToString(),
                        listDetails.MAST_CDWORKS_NAME.ToString(),
                        "<a href='#' title='Click here to edit CDWorks Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+listDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"CDWorksCode="+listDetails.EXEC_RCD_CODE.ToString().Trim()}) +"'); return false;'>Add Remarks</a>",
                        "<a href='#' title='Click here to delete CDWorks Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+listDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"CDWorksCode="+listDetails.EXEC_RCD_CODE.ToString().Trim()}) +"'); return false;'>Add Remarks</a>",
                    }
                }).ToArray();




            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// save the CDWorks details
        /// </summary>
        /// <param name="cdWorksModel">model containing the data</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with response message</returns>
        public bool AddCDWorksDetails(ExecutionCDWorksViewModel cdWorksModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                EXEC_CDWORKS cdWorksMaster = new EXEC_CDWORKS();
                cdWorksMaster.EXEC_RCD_CHAINAGE = cdWorksModel.ChainageMajor + (cdWorksModel.ChainageMinor / 1000);
                if (!dbContext.EXEC_CDWORKS.Any())
                {
                    cdWorksMaster.EXEC_RCD_CODE = 1;
                }
                else
                {
                    cdWorksMaster.EXEC_RCD_CODE = (from item in dbContext.EXEC_CDWORKS where item.IMS_PR_ROAD_CODE == cdWorksModel.IMS_PR_ROAD_CODE select (Int32?)item.EXEC_RCD_CODE).Max() == null ? 1 : (from item in dbContext.EXEC_CDWORKS where item.IMS_PR_ROAD_CODE == cdWorksModel.IMS_PR_ROAD_CODE select item.EXEC_RCD_CODE).Max() + 1;
                }

                cdWorksMaster.IMS_PR_ROAD_CODE = cdWorksModel.IMS_PR_ROAD_CODE;
                cdWorksMaster.MAST_CDWORKS_CODE = cdWorksModel.MAST_CDWORKS_CODE;
                cdWorksMaster.EXEC_RCD_STATUS = (cdWorksModel.EXEC_RCD_STATUS == null ? "U" : cdWorksModel.EXEC_RCD_STATUS);
                //cdWorksMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                //cdWorksMaster.USERID = PMGSYSession.Current.UserId; 
                dbContext.EXEC_CDWORKS.Add(cdWorksMaster);
                dbContext.SaveChanges();
                message = "CDWorks Details Added Successfully.";
                return true;
            }
            catch
            {
                message = "Error Occurred While Processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// updates the CDWorks details
        /// </summary>
        /// <param name="cdWorksModel">model containing data</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with response message</returns>
        public bool EditCDWorksDetails(ExecutionCDWorksViewModel cdWorksModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            Dictionary<string, string> decryptedParameters = null;
            String[] encryptedParameters = null;
            int cdWorksCode = 0;
            try
            {
                encryptedParameters = cdWorksModel.EncryptedCdWorksCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    message = "Error Occurred While Processing your request.";
                    return false;
                }
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                cdWorksCode = Convert.ToInt32(decryptedParameters["CDWorksCode"]);
                EXEC_CDWORKS cdWorksMaster = dbContext.EXEC_CDWORKS.Find(cdWorksModel.IMS_PR_ROAD_CODE, cdWorksCode);
                if (cdWorksMaster == null)
                {
                    message = "CDWorks details not exist for this road.";
                    return false;
                }
                else
                {
                    cdWorksMaster.EXEC_RCD_CHAINAGE = cdWorksModel.ChainageMajor + (cdWorksModel.ChainageMinor / 1000);
                    cdWorksMaster.MAST_CDWORKS_CODE = cdWorksModel.MAST_CDWORKS_CODE;
                    dbContext.Entry(cdWorksMaster).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "CDWorks Details Updated Successfully.";
                    return true;
                }
            }
            catch
            {
                message = "Error Occurred While Processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// deletes the CDWorks details
        /// </summary>
        /// <param name="proposalCode">indicates the road proposal code</param>
        /// <param name="cdWorksCode">id representing cdworks details</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with the response message</returns>
        public bool DeleteCDWorksDetails(int proposalCode, int cdWorksCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                EXEC_CDWORKS cdWorksMaster = dbContext.EXEC_CDWORKS.Find(proposalCode, cdWorksCode);
                dbContext.EXEC_CDWORKS.Remove(cdWorksMaster);
                dbContext.SaveChanges();
                message = "CDWorks details deleted successfully.";
                return true;
            }
            catch
            {
                message = "CDWorks details is in use and can not be deleted.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// populates the CDWorks dropdown values
        /// </summary>
        /// <returns>list for populating cdworks dropdown</returns>
        public List<SelectListItem> GetCdWorksValues()
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                List<SelectListItem> lstCDWorks = new SelectList(dbContext.MASTER_CDWORKS_TYPE.ToList().OrderBy(m => m.MAST_CDWORKS_NAME), "MAST_CDWORKS_CODE", "MAST_CDWORKS_NAME").ToList();
                lstCDWorks.Add(new SelectListItem { Value = "0", Text = "--Select Type--" });
                return lstCDWorks;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the data for upadating CDWorks details
        /// </summary>
        /// <param name="proposalCode">road proposal id</param>
        /// <param name="cdWorksCode">CDWorks details id</param>
        /// <returns>model containing data for updation</returns>
        public ExecutionCDWorksViewModel GetCdWorksDetails(int proposalCode, int cdWorksCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                EXEC_CDWORKS cdWorksMaster = dbContext.EXEC_CDWORKS.Find(proposalCode, cdWorksCode);
                ExecutionCDWorksViewModel model = new ExecutionCDWorksViewModel();
                model.EncryptedCdWorksCode = URLEncrypt.EncryptParameters1(new string[] { "CDWorksCode=" + cdWorksMaster.EXEC_RCD_CODE.ToString().Trim() });
                model.EXEC_RCD_CHAINAGE = cdWorksMaster.EXEC_RCD_CHAINAGE;
                string[] chainage = cdWorksMaster.EXEC_RCD_CHAINAGE.ToString().Split('.');
                model.ChainageMajor = Convert.ToInt32(chainage[0]);
                model.ChainageMinor = Convert.ToInt32(chainage[1]);
                model.EXEC_RCD_CODE = cdWorksMaster.EXEC_RCD_CODE;
                model.EXEC_RCD_STATUS = cdWorksMaster.EXEC_RCD_STATUS;
                model.IMS_PR_ROAD_CODE = cdWorksMaster.IMS_PR_ROAD_CODE;
                model.MAST_CDWORKS_CODE = cdWorksMaster.MAST_CDWORKS_CODE;
                model.Operation = "E";

                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (master != null)
                {
                    model.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    model.Package = master.IMS_PACKAGE_ID.ToString();
                    model.RoadName = master.IMS_ROAD_NAME;
                    model.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    model.Sanction_length = master.IMS_PAV_LENGTH;
                    model.CDWorks_Cost = master.IMS_CD_WORKS_EST_COST;
                    model.CDWorks_No = master.IMS_NO_OF_CDWORKS;
                }

                if (dbContext.EXEC_CDWORKS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    model.PreviousCDWorksCount = dbContext.EXEC_CDWORKS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Count();
                }
                return model;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool CheckCDWorksCount(int proposalCode, string operation)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int sanctionedCount = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_NO_OF_CDWORKS).FirstOrDefault();
                int cdworksCount = 0;
                if (dbContext.EXEC_CDWORKS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    cdworksCount = dbContext.EXEC_CDWORKS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Count();
                }
                if (cdworksCount < sanctionedCount)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region FINANCIAL_STATUS

        /// <summary>
        /// saves the Progress Remarks 
        /// </summary>
        /// <param name="model">progress remarks data</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with response message</returns>
        public bool AddProgressRemarks(ProposalRemarksViewModel model, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS masterProposal = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.IMS_PR_ROAD_CODE);
                masterProposal.IMS_EXEC_REMARKS = model.Remarks;
                masterProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                masterProposal.USERID = PMGSYSession.Current.UserId;
                dbContext.Entry(masterProposal).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Remarks added successfully.";
                return true;
            }
            catch
            {
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the financial details
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <returns>financial details</returns>
        public ExecutionProgressViewModel GetFinancialDetails(int proposalCode, string progressType)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                ExecutionProgressViewModel model = new ExecutionProgressViewModel();
                if (dbContext.EXEC_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    int? year = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(y => y.EXEC_PROG_YEAR).Select(y => y.EXEC_PROG_YEAR).FirstOrDefault());
                    int? month = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == year).OrderByDescending(y => y.EXEC_PROG_MONTH).Select(y => y.EXEC_PROG_MONTH).FirstOrDefault());
                    EXEC_PROGRESS masterRoad = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_MONTH).FirstOrDefault());

                    if (masterRoad != null)
                    {
                        model.PreviousMonth = masterRoad.EXEC_PROG_MONTH;
                        model.PreviousYear = masterRoad.EXEC_PROG_YEAR;
                        model.TotalValueofwork = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault()) + (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_VALUEOFWORK_THISMONTH).FirstOrDefault());
                        model.TotalPayment = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault()) + (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_PAYMENT_THISMONTH).FirstOrDefault());
                        model.LastPaymentValue = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault());
                        model.LastMonthValue = (dbContext.EXEC_PROGRESS.Where(m => m.EXEC_PROG_MONTH == month && m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault());
                        model.EXEC_PAYMENT_LASTMONTH = model.LastPaymentValue;
                        model.EXEC_VALUEOFWORK_LASTMONTH = model.LastMonthValue;
                        string status = (from item in dbContext.EXEC_PROGRESS
                                         where item.IMS_PR_ROAD_CODE == proposalCode &&
                                         item.EXEC_FINAL_PAYMENT_FLAG == "Y"
                                         select item.EXEC_FINAL_PAYMENT_FLAG).FirstOrDefault();

                        if (status == "Y")
                        {
                            model.CompleteStatus = "C";
                        }
                        else
                        {
                            model.CompleteStatus = "N";
                        }
                    }
                    else
                    {
                        model.TotalValueofwork = 0;
                        model.TotalPayment = 0;
                        model.LastPaymentValue = 0;
                        model.LastMonthValue = 0;
                        model.EXEC_PAYMENT_LASTMONTH = 0;
                        model.EXEC_VALUEOFWORK_LASTMONTH = 0;
                    }
                }
                else
                {
                    model.TotalValueofwork = 0;
                    model.TotalPayment = 0;
                    model.LastPaymentValue = 0;
                    model.LastMonthValue = 0;
                    model.EXEC_PAYMENT_LASTMONTH = 0;
                    model.EXEC_VALUEOFWORK_LASTMONTH = 0;
                }
                if (dbContext.EXEC_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_FINAL_PAYMENT_FLAG == "Y"))
                {
                    model.IsFinalPaymentBefore = "Y";
                }
                int agreementId = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();

                TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(agreementId);
                model.AgreementDate = new CommonFunctions().GetDateTimeToString(tendMaster.TEND_AGREEMENT_START_DATE);
                model.AgreementMonth = tendMaster.TEND_DATE_OF_AGREEMENT.Month;
                model.AgreementYear = tendMaster.TEND_DATE_OF_AGREEMENT.Year;
                model.AgreementCost = tendMaster.TEND_AGREEMENT_AMOUNT;
                decimal? valAgreement = null;
                if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "W"))
                {
                    valAgreement = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "W").Sum(m => m.TEND_VALUE_WORK_DONE);
                }

                if (valAgreement == null)
                {
                    valAgreement = 0;
                    model.AgreementCost = valAgreement + tendMaster.TEND_AGREEMENT_AMOUNT;
                }
                else
                {
                    model.AgreementCost = valAgreement + tendMaster.TEND_AGREEMENT_AMOUNT;
                }

                //if (dbContext.IMS_PROPOSAL_WORK.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                //{
                //    model.AgreementCost = (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_WORK_CODE != null && m.TEND_AGREEMENT_STATUS == "P").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT) == null ? 0 : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_WORK_CODE != null && m.TEND_AGREEMENT_STATUS == "P").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT)) + valAgreement;
                //}
                //else
                //{
                //    model.AgreementCost = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT) == null ? 0 : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT) + valAgreement;
                //}

                model.AgreementCost = valAgreement + (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT) == null ? 0 : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT));

                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (master != null)
                {
                    model.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    model.Package = master.IMS_PACKAGE_ID.ToString();
                    model.RoadName = master.IMS_ROAD_NAME;
                    model.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    model.Sanction_length = master.IMS_PAV_LENGTH;
                }

                //new change done for validating additional cost if done on proposal.
                if (dbContext.IMS_PROPOSAL_COST_ADD.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    decimal? stateCost = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Sum(m => m.IMS_STATE_AMOUNT);
                    decimal? mordCost = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Sum(m => m.IMS_MORD_AMOUNT);

                    model.AdditionalCost = ((stateCost.HasValue ? stateCost.Value : 0) + (mordCost.HasValue ? mordCost.Value : 0));
                }

                return model;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the sanction length 
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <returns>sanction length of particular road proposal code</returns>
        public decimal? GetSanctionedLength(int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                decimal sanctionLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(s => s.IMS_PAV_LENGTH).FirstOrDefault();
                return sanctionLength;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the CDWorks details
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <returns>CDWorks details</returns>
        public ExecutionCDWorksViewModel GetOldValues(int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            ExecutionCDWorksViewModel model = new ExecutionCDWorksViewModel();
            try
            {
                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (master != null)
                {
                    model.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    model.Package = master.IMS_PACKAGE_ID.ToString();
                    model.RoadName = master.IMS_ROAD_NAME;
                    model.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    model.Sanction_length = master.IMS_PAV_LENGTH;
                    model.CDWorks_Cost = master.IMS_CD_WORKS_EST_COST;
                    model.CDWorks_No = master.IMS_NO_OF_CDWORKS;
                }

                if (dbContext.EXEC_CDWORKS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    model.PreviousCDWorksCount = dbContext.EXEC_CDWORKS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Count();
                }

                return model;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns progress remarks details 
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <returns>Progress remarks details</returns>
        public ProposalRemarksViewModel GetProgressValues(int proposalCode, bool iseditmode = false)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                ProposalRemarksViewModel roadModel = new ProposalRemarksViewModel();
                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (master != null)
                {
                    roadModel.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    roadModel.Package = master.IMS_PACKAGE_ID.ToString();
                    roadModel.RoadName = master.IMS_ROAD_NAME;
                    roadModel.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    roadModel.Sanction_length = master.IMS_PAV_LENGTH;
                    if (iseditmode)
                    {
                        roadModel.Remarks = master.IMS_EXEC_REMARKS;
                        roadModel.Operation = "E";
                        roadModel.IMS_PR_ROAD_CODE = proposalCode;
                    }
                }
                return roadModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the bridge details
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <returns>bridge details</returns>
        public ExecutionLSBStatusViewModel GetLSBValues(int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                ExecutionLSBStatusViewModel roadModel = new ExecutionLSBStatusViewModel();
                if (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.EXEC_ISCOMPLETED == "C" && m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    roadModel.CompleteStatus = "C";
                }
                else
                {
                    if (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                    {
                        int? year = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR)) == null ? 0 : (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                        EXEC_LSB_MONTHLY_STATUS lsbDetails = dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_MONTH).FirstOrDefault();
                        roadModel.previousMonth = lsbDetails.EXEC_PROG_MONTH;
                        roadModel.previousYear = lsbDetails.EXEC_PROG_YEAR;
                    }
                }

                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (master != null)
                {
                    roadModel.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    roadModel.Package = master.IMS_PACKAGE_ID.ToString();
                    roadModel.RoadName = master.IMS_BRIDGE_NAME;
                    roadModel.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    roadModel.Sanction_length = master.IMS_PAV_LENGTH;
                    //roadModel.Bridge_Cost = Convert.ToDouble(master.IMS_BRIDGE_WORKS_EST_COST);
                    roadModel.Bridge_Cost = PMGSYSession.Current.PMGSYScheme == 1 ? ((master.IMS_SANCTIONED_PAV_AMT == null ? 0 : master.IMS_SANCTIONED_PAV_AMT) + (master.IMS_SANCTIONED_PW_AMT == null ? 0 : master.IMS_SANCTIONED_PW_AMT) + (master.IMS_SANCTIONED_OW_AMT == null ? 0 : master.IMS_SANCTIONED_OW_AMT) + (master.IMS_SANCTIONED_CD_AMT == null ? 0 : master.IMS_SANCTIONED_CD_AMT) + (master.IMS_SANCTIONED_BW_AMT == null ? 0 : master.IMS_SANCTIONED_BW_AMT) + (master.IMS_SANCTIONED_BS_AMT == null ? 0 : master.IMS_SANCTIONED_BS_AMT) + (master.IMS_SANCTIONED_RS_AMT == null ? 0 : master.IMS_SANCTIONED_RS_AMT))
                                                    : ((master.IMS_SANCTIONED_PAV_AMT == null ? 0 : master.IMS_SANCTIONED_PAV_AMT) + (master.IMS_SANCTIONED_PW_AMT == null ? 0 : master.IMS_SANCTIONED_PW_AMT) + (master.IMS_SANCTIONED_OW_AMT == null ? 0 : master.IMS_SANCTIONED_OW_AMT) + (master.IMS_SANCTIONED_CD_AMT == null ? 0 : master.IMS_SANCTIONED_CD_AMT) + (master.IMS_SANCTIONED_FC_AMT == null ? 0 : master.IMS_SANCTIONED_FC_AMT) + (master.IMS_SANCTIONED_HS_AMT == null ? 0 : master.IMS_SANCTIONED_HS_AMT) + (master.IMS_SANCTIONED_BW_AMT == null ? 0 : master.IMS_SANCTIONED_BW_AMT) + (master.IMS_SANCTIONED_BS_AMT == null ? 0 : master.IMS_SANCTIONED_BS_AMT));

                    ///LSB Change 05NOV2019
                    roadModel.Bridge_Length = master.IMS_BRIDGE_LENGTH;
                    roadModel.changedLength = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Any() ? dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_IS_MRD_APPROVED == "Y").Select(m => m.IMS_CHANGED_LENGTH).FirstOrDefault() : 0;
                    //roadModel.changed_SanctionedLength = roadModel.changedLength <= 0 ? master.IMS_BRIDGE_LENGTH.Value : roadModel.changedLength;
                }

                int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                TEND_AGREEMENT_MASTER masterAgreement = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                roadModel.AgreementYear = masterAgreement.TEND_DATE_OF_AGREEMENT.Year;
                roadModel.AgreementMonth = masterAgreement.TEND_DATE_OF_AGREEMENT.Month;
                roadModel.AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);

                return roadModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// deletes the financial details
        /// </summary>
        /// <param name="proposalCode">road proposal code</param>
        /// <param name="progressType">progress type of financial details </param>
        /// <param name="yearCode">year of financial details </param>
        /// <param name="monthCode">month of financial details</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with response message</returns>
        public bool DeleteFinancialRoadDetails(int proposalCode, int yearCode, int monthCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                EXEC_PROGRESS master = dbContext.EXEC_PROGRESS.Find(proposalCode, yearCode, monthCode);
                if (master != null)
                {
                    master.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    master.USERID = PMGSYSession.Current.UserId;
                    dbContext.Entry(master).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    dbContext.EXEC_PROGRESS.Remove(master);
                    dbContext.SaveChanges();
                    message = "Financial Progress details deleted successfully.";
                    return true;
                }
                else
                {
                    message = "Financial Progress details is in use and can not be deleted.";
                    return false;
                }
            }
            catch
            {
                message = "Error Occurred while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetRoadAgreementDetailsList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();

                var lstAggDetails = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                     join aggDetails in dbContext.TEND_AGREEMENT_DETAIL
                                     on item.IMS_PR_ROAD_CODE equals aggDetails.IMS_PR_ROAD_CODE
                                     join aggMaster in dbContext.TEND_AGREEMENT_MASTER
                                     on aggDetails.TEND_AGREEMENT_CODE equals aggMaster.TEND_AGREEMENT_CODE
                                     join splitWork in dbContext.IMS_PROPOSAL_WORK
                                     on aggDetails.IMS_WORK_CODE equals splitWork.IMS_WORK_CODE into splitDetails
                                     from sd in splitDetails.DefaultIfEmpty()
                                     where item.IMS_PR_ROAD_CODE == proposalCode
                                     select new
                                     {
                                         item.IMS_PR_ROAD_CODE,
                                         aggMaster.TEND_AGREEMENT_CODE,
                                         aggMaster.TEND_DATE_OF_AGREEMENT,
                                         aggMaster.TEND_AGREEMENT_NUMBER,
                                         aggDetails.TEND_AGREEMENT_STATUS,
                                         aggMaster.TEND_AMOUNT_YEAR1,
                                         aggMaster.TEND_AMOUNT_YEAR2,
                                         aggMaster.TEND_AMOUNT_YEAR3,
                                         aggMaster.TEND_AMOUNT_YEAR4,
                                         aggMaster.TEND_AMOUNT_YEAR5,
                                         aggDetails.TEND_AGREEMENT_AMOUNT,
                                         aggDetails.TEND_VALUE_WORK_DONE,
                                         sd.IMS_WORK_DESC,
                                         SPLIT_LENGTH = (sd.IMS_PAV_LENGTH == null ? 0 : sd.IMS_PAV_LENGTH),
                                         SPLIT_COST = (sd.IMS_PAV_EST_COST == null ? 0 : sd.IMS_PAV_EST_COST)
                                     }).OrderBy(m => m.TEND_AGREEMENT_CODE).ThenBy(m => m.TEND_DATE_OF_AGREEMENT).ToList();

                totalRecords = lstAggDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "TEND_AGREEMENT_NUMBER":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_AGREEMENT_CODE).ThenBy(m => m.TEND_DATE_OF_AGREEMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_WORK_DESC":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.IMS_WORK_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_PAV_LENGTH":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.SPLIT_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_PAV_EST_COST":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.SPLIT_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_DATE_OF_AGREEMENT":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_DATE_OF_AGREEMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_AGREEMENT_AMOUNT":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_AGREEMENT_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_AGREEMENT_STATUS":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_AGREEMENT_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_VALUE_WORK_DONE":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_VALUE_WORK_DONE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_AGREEMENT_CODE).ThenBy(m => m.TEND_DATE_OF_AGREEMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "TEND_AGREEMENT_NUMBER":
                                lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_AGREEMENT_CODE).ThenBy(m => m.TEND_DATE_OF_AGREEMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_WORK_DESC":
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.IMS_WORK_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_PAV_LENGTH":
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.SPLIT_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_PAV_EST_COST":
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.SPLIT_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_DATE_OF_AGREEMENT":
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.TEND_DATE_OF_AGREEMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_AGREEMENT_AMOUNT":
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.TEND_AGREEMENT_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_AGREEMENT_STATUS":
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.TEND_AGREEMENT_STATUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "TEND_VALUE_WORK_DONE":
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.TEND_VALUE_WORK_DONE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstAggDetails = lstAggDetails.OrderByDescending(m => m.TEND_AGREEMENT_CODE).ThenBy(m => m.TEND_DATE_OF_AGREEMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstAggDetails = lstAggDetails.OrderBy(m => m.TEND_AGREEMENT_CODE).ThenBy(m => m.TEND_DATE_OF_AGREEMENT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var gridData = lstAggDetails.Select(progressDetails => new
                {
                    progressDetails.TEND_AGREEMENT_NUMBER,
                    progressDetails.TEND_DATE_OF_AGREEMENT,
                    progressDetails.TEND_AGREEMENT_AMOUNT,
                    progressDetails.TEND_AGREEMENT_STATUS,
                    progressDetails.TEND_VALUE_WORK_DONE,
                    progressDetails.IMS_PR_ROAD_CODE,
                    progressDetails.IMS_WORK_DESC,
                    progressDetails.SPLIT_LENGTH,
                    progressDetails.SPLIT_COST
                }).ToArray();

                return gridData.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        m.TEND_AGREEMENT_NUMBER.ToString(),
                        m.IMS_WORK_DESC == null?"-":m.IMS_WORK_DESC.ToString(),
                        m.SPLIT_LENGTH == 0?"-":m.SPLIT_LENGTH.ToString(),
                        m.SPLIT_COST == 0?"-":m.SPLIT_COST.ToString(),
                        Convert.ToDateTime(m.TEND_DATE_OF_AGREEMENT).ToString("dd/MM/yyyy"),
                        m.TEND_AGREEMENT_AMOUNT.ToString(),
                        m.TEND_AGREEMENT_STATUS =="P"?"In Progress":(m.TEND_AGREEMENT_STATUS == "C"?"Completed":(m.TEND_AGREEMENT_STATUS == "M"?"In Maintenance":"Terminated")),
                        m.TEND_VALUE_WORK_DONE == null?"-":m.TEND_VALUE_WORK_DONE.ToString()
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        #endregion

        #region REMARKS

        /// <summary>
        /// return the remarks rows
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalCode">id of proposal</param>
        /// <returns></returns>
        public Array GetRemarksList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstRemarks = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                  where item.IMS_PR_ROAD_CODE == proposalCode
                                  select new
                                  {
                                      item.IMS_PR_ROAD_CODE,
                                      item.IMS_EXEC_REMARKS
                                  });

                totalRecords = lstRemarks.Count();

                if (lstRemarks.Select(m => m.IMS_EXEC_REMARKS).FirstOrDefault() == null)
                {
                    totalRecords = 0;
                    return null;
                }

                var gridData = lstRemarks.Select(m => new
                {
                    m.IMS_PR_ROAD_CODE,
                    m.IMS_EXEC_REMARKS
                }).ToArray();

                return gridData.Select(m => new
                {
                    cell = new[]
                    {
                        m.IMS_EXEC_REMARKS==null?string.Empty:m.IMS_EXEC_REMARKS.ToString(),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode = "+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode = "+m.IMS_PR_ROAD_CODE.ToString().Trim()})
                    }
                }).ToArray();
            }
            catch (Exception)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// delete the remark of particular proposal
        /// </summary>
        /// <param name="proposalCode">id of proposal </param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool DeleteRemark(int proposalCode, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                imsMaster.IMS_EXEC_REMARKS = null;
                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                imsMaster.USERID = PMGSYSession.Current.UserId;
                dbContext.Entry(imsMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Remark Deleted Successfully.";
                return true;
            }
            catch (Exception)
            {
                message = "The Remark is in use and can not be deleted.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// update the remark of particular proposal
        /// </summary>
        /// <param name="proposalCode">id of proposal </param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool EditRemark(ProposalRemarksViewModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.IMS_PR_ROAD_CODE);
                imsMaster.IMS_EXEC_REMARKS = model.Remarks;
                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                imsMaster.USERID = PMGSYSession.Current.UserId;
                dbContext.Entry(imsMaster).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                message = "Remark Updated Successfully.";
                return true;
            }
            catch (Exception)
            {
                message = "Error occurred while processing the request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region OTHER

        public bool CheckAgreementStatus(int proposalCode, ref string message)
        {
            return false;
        }

        //public bool CheckSanctionValue(int proposalCode, decimal valueOfWork, decimal valueOfPayment,string operation)
        //{
        //    dbContext = new PMGSYEntities();
        //    decimal? TotalPayment = 0;
        //    decimal? TotalValue = 0;
        //    try
        //    {
        //        IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
        //        if (operation == "E")
        //        {
        //            TotalPayment = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault() ;
        //            TotalValue = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault() ;
        //        }
        //        else
        //        {
        //            TotalPayment = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault() + dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_THISMONTH).FirstOrDefault();
        //            TotalValue = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault() + dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_THISMONTH).FirstOrDefault();
        //        }

        //        //int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
        //        decimal? agreementCost = null;
        //        var listAgreements = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m=>m.TEND_AGREEMENT_CODE).Select(m => m.TEND_AGREEMENT_CODE);
        //        if (listAgreements.Count() == 1)
        //        {
        //            decimal? aggCost = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == listAgreements.FirstOrDefault()).Select(m => m.TEND_AGREEMENT_AMOUNT).FirstOrDefault();
        //            if (TotalValue == null) { TotalValue = 0; }
        //            TotalValue = TotalValue + valueOfWork;
        //            if (TotalValue > (aggCost + aggCost / 10))
        //            {
        //                return false;
        //            }
        //        }

        //        foreach (var item in listAgreements)
        //        {
        //            if(dbContext.TEND_AGREEMENT_DETAIL.Any(m=>m.TEND_AGREEMENT_CODE == item && m.IMS_PR_ROAD_CODE == proposalCode))
        //            {
        //                agreementCost = dbContext.TEND_AGREEMENT_DETAIL.Where(m=>m.TEND_AGREEMENT_CODE == item && m.IMS_PR_ROAD_CODE == proposalCode).Sum(m=>m.TEND_VALUE_WORK_DONE);
        //            }
        //        }

        //        int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m=>m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "P").OrderBy(m=>m.TEND_AGREEMENT_ID).Select(m=>m.TEND_AGREEMENT_CODE).FirstOrDefault();
        //        decimal? firstAgreementCost = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(m => m.TEND_AGREEMENT_AMOUNT).FirstOrDefault();
        //        if (agreementCost == null)
        //        {
        //            agreementCost = 0;
        //            agreementCost = agreementCost + valueOfWork;
        //        }

        //        if (agreementCost < (firstAgreementCost + firstAgreementCost / 10))
        //        {
        //            return true;
        //        }
        //        else
        //        {
        //            return false;
        //        }


        //        if (TotalPayment == null)
        //        {
        //            TotalPayment = 0;
        //        }

        //        if (TotalValue == null)
        //        {
        //            TotalValue = 0;
        //        }
        //        TotalPayment = TotalPayment + valueOfPayment;
        //        TotalValue = TotalValue + valueOfWork;

        //        //if (TotalPayment <= (agreementCost + (agreementCost / 10)) && TotalValue <= (agreementCost + (agreementCost / 10)))
        //        if (TotalPayment <= (agreementCost + (agreementCost / 10)))
        //        {
        //            return true;
        //        }
        //        else
        //        {
        //            return false;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        return false;
        //    }
        //}

        public bool CheckSanctionValue(int proposalCode, decimal valueOfWork, decimal valueOfPayment, string operation)
        {
            dbContext = new PMGSYEntities();
            decimal? TotalPayment = 0;
            decimal? TotalValue = 0;
            decimal totalCostToAdd = 0;
            try
            {
                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (operation == "E")
                {
                    TotalPayment = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault();
                    TotalValue = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault();
                }
                else
                {
                    TotalPayment = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault() + dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_THISMONTH).FirstOrDefault();
                    TotalValue = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault() + dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_THISMONTH).FirstOrDefault();
                }

                decimal? overallCost = (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "W").Sum(m => (Decimal?)m.TEND_VALUE_WORK_DONE) == null ? 0 : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "W").Sum(m => (Decimal?)m.TEND_VALUE_WORK_DONE)) + (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT) == null ? 0 : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT));

                overallCost = overallCost.HasValue ? overallCost.Value : 0;

                //new change done for validating additional cost if done on proposal.
                if (dbContext.IMS_PROPOSAL_COST_ADD.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    decimal? stateCost = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Sum(m => m.IMS_STATE_AMOUNT);
                    decimal? mordCost = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Sum(m => m.IMS_MORD_AMOUNT);

                    totalCostToAdd = ((stateCost.HasValue ? stateCost.Value : 0) + (mordCost.HasValue ? mordCost.Value : 0));
                }

                if (TotalPayment == null)
                {
                    TotalPayment = 0;
                }

                if (TotalValue == null)
                {
                    TotalValue = 0;
                }

                TotalPayment = TotalPayment + valueOfPayment;
                TotalValue = TotalValue + valueOfWork;

                if (TotalPayment <= ((overallCost + (overallCost / 5)) + totalCostToAdd))
                {
                    return true;
                }
                else
                {
                    return false;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        public bool CheckPhysicalRoadDetails(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Any(m => m.EXEC_ISCOMPLETED == "C"))
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool CheckPhysicalLSBDetails(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Any(m => m.EXEC_ISCOMPLETED == "C"))
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool CheckProposalType(int proposalCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_PROPOSAL_TYPE == "P"))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool CheckFinancialDetails(int proposalCode, string progressType)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Any(m => m.EXEC_FINAL_PAYMENT_FLAG == "Y"))
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public DateTime? GetAgreementDate(int proposalCode)
        {
            DateTime? agreementDate = null;
            dbContext = new PMGSYEntities();
            try
            {
                int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                agreementDate = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(m => m.TEND_DATE_OF_AGREEMENT).FirstOrDefault();
                return agreementDate;
            }
            catch (Exception)
            {
                return agreementDate;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region TECHNOLOGY

        /// <summary>
        /// returns the list of technology details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public Array GetTechnologyProgressDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int agreementCode = 0;
                int maxTechCode = 0;

                var workCodeList = dbContext.IMS_PROPOSAL_WORK.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_WORK_CODE).ToList();
                var agreementMasterCodes = dbContext.TEND_AGREEMENT_DETAIL.Where(m => workCodeList.Contains(m.IMS_WORK_CODE.Value)).Select(m => m.TEND_AGREEMENT_CODE).ToList();

                agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "P").OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).Any()
                                                            ? dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "P").OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault()
                                                            : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_CODE).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();

                var lstTechnologyDetails = (from item in dbContext.IMS_PROPOSAL_TECH
                                            where item.IMS_PR_ROAD_CODE == proposalCode
                                            select new
                                            {
                                                item.IMS_SANCTIONED_PROJECTS.MASTER_BLOCK.MAST_BLOCK_NAME,
                                                item.IMS_SANCTIONED_PROJECTS.IMS_PACKAGE_ID,
                                                WORK_NAME = item.IMS_SANCTIONED_PROJECTS.IMS_PROPOSAL_TYPE == "L" ? item.IMS_SANCTIONED_PROJECTS.IMS_BRIDGE_NAME.Trim() : item.IMS_SANCTIONED_PROJECTS.IMS_ROAD_NAME.Trim(),

                                                Sanction_Cost = (item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_BS_AMT + item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_CD_AMT + item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_PW_AMT + item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_RS_AMT),
                                                Sanction_Length = item.IMS_SANCTIONED_PROJECTS.IMS_PAV_LENGTH,
                                                SanctionYear = item.IMS_SANCTIONED_PROJECTS.IMS_YEAR,
                                                AgreementCost = dbContext.IMS_PROPOSAL_WORK.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)
                                                            ? dbContext.TEND_AGREEMENT_MASTER.Where(m => agreementMasterCodes.Contains(m.TEND_AGREEMENT_CODE)).Sum(m => m.TEND_AGREEMENT_AMOUNT)
                                                            : dbContext.TEND_AGREEMENT_MASTER.Where(x => x.TEND_AGREEMENT_CODE == agreementCode).Select(x => x.TEND_AGREEMENT_AMOUNT).FirstOrDefault(),
                                                AgreementDate = dbContext.TEND_AGREEMENT_MASTER.Where(x => x.TEND_AGREEMENT_CODE == agreementCode).Select(x => x.TEND_DATE_OF_AGREEMENT).FirstOrDefault(),
                                                //oadModel.AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);
                                                item.IMS_PR_ROAD_CODE,
                                                item.IMS_END_CHAINAGE,
                                                item.IMS_SEGMENT_NO,
                                                item.IMS_START_CHAINAGE,
                                                item.MASTER_EXECUTION_ITEM.MAST_HEAD_DESC,
                                                item.MASTER_TECHNOLOGY.MAST_TECH_NAME,
                                                item.IMS_TECH_COST,
                                                item.IMS_LAYER_COST,
                                                item.MAST_LAYER_CODE,
                                                item.MASTER_TECHNOLOGY.MAST_TECH_TYPE,
                                                TechCode = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_SEGMENT_NO == item.IMS_SEGMENT_NO).Select(x => x.MAST_TECH_CODE).FirstOrDefault()
                                            }).OrderByDescending(m => m.IMS_SEGMENT_NO).Distinct();

                totalRecords = lstTechnologyDetails.Count();

                if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    maxTechCode = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.IMS_SEGMENT_NO).ThenByDescending(m => m.MAST_TECH_CODE).ThenByDescending(m => m.MAST_LAYER_CODE).Select(m => m.IMS_SEGMENT_NO).FirstOrDefault();
                }

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_SEGMENT_NO":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "O_CDWORKS_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_START_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_END_CHAINAGE":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_END_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_HEAD_DESC":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_TECH_NAME":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_TECH_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_TECH_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_LAYER_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_LAYER_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "IMS_SEGMENT_NO":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "O_CDWORKS_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_START_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_END_CHAINAGE":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_END_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_HEAD_DESC":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_TECH_NAME":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_TECH_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_TECH_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_LAYER_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_LAYER_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstTechnologyDetails.Select(m => new
                {
                    m.MAST_BLOCK_NAME,
                    m.IMS_PACKAGE_ID,
                    m.WORK_NAME,
                    //m.agreementCode,
                    m.Sanction_Cost,
                    m.Sanction_Length,
                    m.SanctionYear,
                    m.AgreementCost,
                    m.AgreementDate,
                    m.IMS_PR_ROAD_CODE,
                    m.IMS_SEGMENT_NO,
                    m.IMS_END_CHAINAGE,
                    m.IMS_START_CHAINAGE,
                    m.MAST_HEAD_DESC,
                    m.MAST_TECH_NAME,
                    m.IMS_TECH_COST,
                    m.IMS_LAYER_COST,
                    m.MAST_LAYER_CODE,
                    m.MAST_TECH_TYPE,
                    m.TechCode
                }).ToArray();

                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        /*m.MAST_BLOCK_NAME.ToString(),
                        m.IMS_PACKAGE_ID.ToString(),
                        m.WORK_NAME.ToString(),
                        m.AgreementDate == null ? "-" : new CommonFunctions().GetDateTimeToString(m.AgreementDate),
                        m.Sanction_Cost.ToString(),
                        m.Sanction_Length.ToString(),
                        m.AgreementCost.ToString(),
                        m.SanctionYear.ToString() + "-" + (m.SanctionYear + 1).ToString(),*/
                        m.IMS_SEGMENT_NO == null?string.Empty:m.IMS_SEGMENT_NO.ToString(),
                        m.IMS_START_CHAINAGE == null?string.Empty:m.IMS_START_CHAINAGE.ToString(),
                        m.IMS_END_CHAINAGE == null?string.Empty:m.IMS_END_CHAINAGE.ToString(),
                        m.IMS_TECH_COST==null?string.Empty:m.IMS_TECH_COST.ToString(),
                        m.IMS_LAYER_COST==null?string.Empty:m.IMS_LAYER_COST.ToString(),
                        m.MAST_HEAD_DESC == null?string.Empty:m.MAST_HEAD_DESC.ToString(),
                        m.MAST_TECH_NAME == null?string.Empty:m.MAST_TECH_NAME.ToString(),
                        m.MAST_TECH_TYPE == "A" ? "IRC Agreegated" : "IRC Non Agreegated",
                        "<a href='#' title='Click here to Add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyProgressDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode=" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechnologyCode=" + m.TechCode.ToString().Trim(), "StChainage=" + m.IMS_START_CHAINAGE.ToString().Trim(), "EndChainage=" + m.IMS_END_CHAINAGE.ToString().Trim(), "LayerCode=" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Add Technology Details</a>",
                        
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetTechnologyProgressDetailsListDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetExecTechnologyProgressDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode, int technologyCode, int layerCode)
        {
            CommonFunctions comm = new CommonFunctions();
            dbContext = new PMGSYEntities();

            //Avinash15 For Physical road progress April Month Relaxation..
            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];    //15
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];   //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);

            int currMonth = DateTime.Now.Month;
            int currYear = DateTime.Now.Year;

            int monthCode = 0, yearCode = 0;

            try
            {
                int agreementCode = 0;
                int maxTechCode = 0;
                if ((dbContext.EXEC_TECH_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == technologyCode && m.MAST_LAYER_CODE == layerCode)))
                {
                    yearCode = (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == technologyCode && m.MAST_LAYER_CODE == layerCode).Max(y => y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == technologyCode && m.MAST_LAYER_CODE == layerCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
                }

                var lstTechnologyDetails = (from item in dbContext.EXEC_TECH_MONTHLY_STATUS
                                            where item.IMS_PR_ROAD_CODE == proposalCode
                                            && item.MAST_TECH_CODE == technologyCode
                                            && item.MAST_LAYER_CODE == layerCode
                                            select new
                                            {
                                                item.TECH_MONTHLY_CODE,
                                                item.IMS_PR_ROAD_CODE,
                                                item.MAST_TECH_CODE,
                                                item.EXEC_PROG_YEAR,
                                                item.IMS_SANCTIONED_PROJECTS.IMS_PAV_LENGTH,
                                                item.MASTER_TECHNOLOGY.MAST_TECH_NAME,
                                                item.EXEC_PROG_MONTH,
                                                item.EXEC_PROGRESS_DATE,
                                                item.EXEC_COMPLETED,
                                                item.EXEC_ISCOMPLETED,
                                                item.MAST_LAYER_CODE
                                            }).Distinct();

                totalRecords = lstTechnologyDetails.Count();

                if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == technologyCode))
                {
                    maxTechCode = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == technologyCode).OrderByDescending(m => m.IMS_SEGMENT_NO).ThenByDescending(m => m.MAST_TECH_CODE).ThenByDescending(m => m.MAST_LAYER_CODE).Select(m => m.IMS_SEGMENT_NO).FirstOrDefault();
                }

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            //case "IMS_SEGMENT_NO":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "O_CDWORKS_COST":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_START_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "IMS_END_CHAINAGE":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_END_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "MAST_HEAD_DESC":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "MAST_TECH_NAME":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "IMS_TECH_COST":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_TECH_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "IMS_LAYER_COST":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_LAYER_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            default:
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.EXEC_PROGRESS_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            //case "IMS_SEGMENT_NO":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "O_CDWORKS_COST":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_START_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "IMS_END_CHAINAGE":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_END_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "MAST_HEAD_DESC":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "MAST_TECH_NAME":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "IMS_TECH_COST":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_TECH_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            //case "IMS_LAYER_COST":
                            //    lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_LAYER_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                            //    break;
                            default:
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.EXEC_PROGRESS_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.EXEC_PROGRESS_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstTechnologyDetails.Select(m => new
                {
                    m.TECH_MONTHLY_CODE,
                    m.IMS_PR_ROAD_CODE,
                    m.MAST_TECH_CODE,
                    m.EXEC_PROG_YEAR,
                    m.EXEC_PROG_MONTH,
                    m.IMS_PAV_LENGTH,
                    m.MAST_TECH_NAME,
                    m.EXEC_PROGRESS_DATE,
                    m.EXEC_COMPLETED,
                    m.EXEC_ISCOMPLETED,
                    m.MAST_LAYER_CODE
                }).ToArray();

                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        //m.IMS_PR_ROAD_CODE.ToString(),
                        comm.getMonthText((short)m.EXEC_PROG_MONTH),
                        m.EXEC_PROG_YEAR.ToString(),
                        m.IMS_PAV_LENGTH.ToString(),
                        (dbContext.MASTER_EXECUTION_ITEM.Where(x=>x.MAST_HEAD_CODE == m.MAST_LAYER_CODE).Select(x=>x.MAST_HEAD_DESC).FirstOrDefault()),
                        m.MAST_TECH_NAME,
                        m.EXEC_ISCOMPLETED.ToString() == "C" ? "Completed" : "In Progress",
                        m.EXEC_COMPLETED.ToString(),
                        comm.GetDateTimeToString(m.EXEC_PROGRESS_DATE.Value),
                        //(physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        
                        //(m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Technology Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=AddEditTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechnologyCode=" + m.MAST_TECH_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Edit Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Delete Technology Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Delete Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        
                        ///Changed by SAMMED A. PATIL on 12APR2017 to restrict Technology progress entry for current financial year
                        //(m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear)?"<a href='#' title='Click here to edit Technology Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=AddEditTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechnologyCode=" + m.MAST_TECH_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Edit Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear)?"<a href='#' title='Delete Technology Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Delete Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        /////Changed by SAMMED A. PATIL on 02JUNE2017 to to allow editing of latest record for current month
                        //( (DateTime.Now.Day <= 5) ? ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") ) ? "<a href='#' title='Click here to edit Technology Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=AddEditTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechnologyCode=" + m.MAST_TECH_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Edit Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //( (DateTime.Now.Day <= 5) ? ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") ) ? "<a href='#' title='Delete Technology Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Delete Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 02JAN2018 to to allow editing of latest record for current month
                        /*( ///Edit
                            //(DateTime.Now.Day <= 5) 
                            (DateTime.Now.Day <= 10) 
                            ?  ( (DateTime.Now.Month == 1) 
                                    ? ((m.EXEC_PROG_MONTH == 12 || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR == (yearCode) && m.EXEC_ISCOMPLETED != "C")
                                    : ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                                )
                            : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to edit Technology Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=AddEditTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechnologyCode=" + m.MAST_TECH_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Edit Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        (///Delete 
                            //(DateTime.Now.Day <= 5) 
                            (DateTime.Now.Day <= 10) 
                            ? ( (DateTime.Now.Month == 1) 
                                    ? ((m.EXEC_PROG_MONTH == 12 || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR == (yearCode) && m.EXEC_ISCOMPLETED != "C")
                                    : ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                               )
                            : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Delete Technology Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Delete Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",*/

                        //Avinash15 Technology
                        //Edit


                        currMonth==AprilMonthValue && DateTime.Now.Day<=AprilMonthDayValue ?  
                        ( 
                            (DateTime.Now.Day <= AprilMonthDayValue) 
                            ?  ( 
                                    (DateTime.Now.Month == 1) 
                                     ? ((m.EXEC_PROG_MONTH == 12 || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR == (yearCode) && m.EXEC_ISCOMPLETED != "C")
                                     : ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                                )
                            : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to edit Technology Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=AddEditTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechnologyCode=" + m.MAST_TECH_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Edit Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 


                          ( 
                            (DateTime.Now.Day <= 5) 
                            ?  ( (DateTime.Now.Month == 1) 
                                    ? ((m.EXEC_PROG_MONTH == 12 || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR == (yearCode) && m.EXEC_ISCOMPLETED != "C")
                                    : ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                                )
                            : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Click here to edit Technology Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=AddEditTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechnologyCode=" + m.MAST_TECH_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Edit Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",


                         //Delete
                         currMonth==AprilMonthValue && DateTime.Now.Day<=AprilMonthDayValue ?
                         (
                            (DateTime.Now.Day <= AprilMonthDayValue) 
                            ? ( (DateTime.Now.Month == 1) 
                                    ? ((m.EXEC_PROG_MONTH == 12 || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR == (yearCode) && m.EXEC_ISCOMPLETED != "C")
                                    : ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                               )
                            : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Delete Technology Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Delete Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>" :

                          (
                            (DateTime.Now.Day <= 5) 
                            ? ( (DateTime.Now.Month == 1) 
                                    ? ((m.EXEC_PROG_MONTH == 12 || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR == (yearCode) && m.EXEC_ISCOMPLETED != "C")
                                    : ((m.EXEC_PROG_MONTH== (currMonth - 1) || m.EXEC_PROG_MONTH==currMonth) && m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                               )
                            : (m.EXEC_PROG_MONTH==currMonth && m.EXEC_PROG_YEAR==currYear && m.EXEC_ISCOMPLETED != "C") 
                         ) ? "<a href='#' title='Delete Technology Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode =" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TechMonthlyCode =" + m.TECH_MONTHLY_CODE.ToString().Trim(), "LayerCode =" + m.MAST_LAYER_CODE.ToString().Trim() }) +"'); return false;'>Delete Technology Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>", 
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetExecTechnologyProgressDetailsListDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public TechnologyDetailsViewModel GetTechProgressDetails(int proposalCode, int techCode, int techMonthlyCode, int layerCode, string opr)
        {
            TechnologyDetailsViewModel model = new TechnologyDetailsViewModel();

            try
            {
                dbContext = new PMGSYEntities();

                int? year = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == techCode && m.MAST_LAYER_CODE == layerCode).Max(m => m.EXEC_PROG_YEAR);
                EXEC_TECH_MONTHLY_STATUS masterMonth = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(m => m.EXEC_PROG_YEAR == year && m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == techCode && m.MAST_LAYER_CODE == layerCode).OrderByDescending(m => m.EXEC_PROG_MONTH).FirstOrDefault();
                if (masterMonth != null)
                {
                    model.previousMonth = masterMonth.EXEC_PROG_MONTH;
                    model.previousYear = masterMonth.EXEC_PROG_YEAR;
                }

                int newmonthCode = model.previousMonth;
                int newyearCode = model.previousYear;

                ///Changes by SAMMED A. PATIL on 20JULY2017 
                var TechProgressDetails = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == proposalCode && x.MAST_TECH_CODE == techCode && x.MAST_LAYER_CODE == layerCode).Select(x => x.EXEC_TECH_PROGRESS_DETAILS).FirstOrDefault();
                if (TechProgressDetails != null)
                {
                    model.totalTechQuantity = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == proposalCode && x.MAST_TECH_CODE == techCode && x.MAST_LAYER_CODE == layerCode).Select(x => x.EXEC_TECH_PROGRESS_DETAILS.TECH_QUANTITY).Sum();
                }
                else
                {
                    model.totalTechQuantity = 0;
                }

                if (opr == "E" && dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == proposalCode && x.MAST_TECH_CODE == techCode && x.MAST_LAYER_CODE == layerCode).Count() == 1)
                {
                    return null;
                }
                else if (opr == "E" && dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == proposalCode && x.MAST_TECH_CODE == techCode && x.MAST_LAYER_CODE == layerCode).Count() > 1)
                {
                    EXEC_TECH_MONTHLY_STATUS masterTech = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == proposalCode && x.MAST_TECH_CODE == techCode && x.MAST_LAYER_CODE == layerCode && x.MAST_LAYER_CODE == layerCode && x.TECH_MONTHLY_CODE != techMonthlyCode).OrderByDescending(x => x.TECH_MONTHLY_CODE).FirstOrDefault();
                    if (masterTech != null)
                    {
                        model.previousMonth = masterTech.EXEC_PROG_MONTH;
                        model.previousYear = masterTech.EXEC_PROG_YEAR;
                        model.previousDate = masterTech.EXEC_PROGRESS_DATE == null ? "" : new CommonFunctions().GetDateTimeToString(masterTech.EXEC_PROGRESS_DATE.Value);
                        model.previousCompletedLength = masterTech.EXEC_COMPLETED == null ? 0 : masterTech.EXEC_COMPLETED.Value;
                        model.previousStatus = masterTech.EXEC_ISCOMPLETED == null ? "" : masterTech.EXEC_ISCOMPLETED;


                        //Added by pradip patil [08/02/2017]

                        EXEC_TECH_PROGRESS_DETAILS TechoprogressModel = dbContext.EXEC_TECH_PROGRESS_DETAILS.Where(x => x.TECH_MONTHLY_CODE == techMonthlyCode).FirstOrDefault();

                        if (TechoprogressModel != null)
                        {
                            model.TechQuantity = Convert.ToDecimal(TechoprogressModel.TECH_QUANTITY.ToString("0.00"));
                            model.TechUnit = TechoprogressModel.TECH_UNIT;
                            model.TechSupplier = TechoprogressModel.TECH_SUPPLIER;
                            model.RatePerunit = Convert.ToDecimal(TechoprogressModel.TECH_RATE_PER_UNIT.ToString("0.00")); ;

                        }
                        //ends

                    }
                }
                else
                {
                    //EXEC_TECH_MONTHLY_STATUS masterTech = dbContext.EXEC_TECH_MONTHLY_STATUS.Find(proposalCode, newyearCode, newmonthCode);
                    EXEC_TECH_MONTHLY_STATUS masterTech = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == proposalCode && x.MAST_TECH_CODE == techCode && x.MAST_LAYER_CODE == layerCode && x.EXEC_PROG_YEAR == newyearCode && x.EXEC_PROG_MONTH == newmonthCode).FirstOrDefault();
                    if (masterTech != null)
                    {
                        model.previousMonth = masterTech.EXEC_PROG_MONTH;
                        model.previousYear = masterTech.EXEC_PROG_YEAR;
                        model.previousDate = masterTech.EXEC_PROGRESS_DATE == null ? "" : new CommonFunctions().GetDateTimeToString(masterTech.EXEC_PROGRESS_DATE.Value);
                        model.previousCompletedLength = masterTech.EXEC_COMPLETED == null ? 0 : masterTech.EXEC_COMPLETED.Value;
                        model.previousStatus = masterTech.EXEC_ISCOMPLETED == null ? "" : masterTech.EXEC_ISCOMPLETED;
                    }
                    else
                    {
                        model.previousMonth = 0;
                        model.previousYear = 0;
                        model.previousDate = "";
                        model.previousCompletedLength = 0;
                        model.previousStatus = "";
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetTechProgressDetails().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Add Image Files
        /// </summary>
        /// <param name="lst_execution_files">list of files along with file details</param>
        /// <returns></returns>
        public string AddExecTechnologyProgressDetailsDAL(TechnologyDetailsViewModel model)
        {
            EXEC_TECH_MONTHLY_STATUS exec_tech_monthly_status = new EXEC_TECH_MONTHLY_STATUS();
            CommonFunctions comm = new CommonFunctions();
            int techCode = 0, layerCode = 0, maxId = 0;
            // Changes start here by saurabh
            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];   //10
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);
            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];  //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);
            int allowedMonth = (DateTime.Now.Month == AprilMonthValue && DateTime.Now.Day <= AprilMonthDayValue) ? (DateTime.Now.Month - 1) : DateTime.Now.Month;
            int allowedYear = DateTime.Now.Year;
            // Changes ended here by saurabh
            try
            {
                // Changes START here 
                DateTime FinanDate = DateTime.Now; // change
                int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year - 1; // change
                DateTime Conditional_Date_Value = new DateTime(FinancialYear , 3, 31, 00, 00, 00);  // change
                int CondFinanYear = FinancialYear;
                //DateTime TestDate = new DateTime(2023, 4, 6, 00, 00, 00);  // change commentable
                //model.Date = TestDate.ToString();  // change commentable
                Nullable<DateTime> ProgressDate = new DateTime();
                if (model.Date != null)
                {
                    ProgressDate = Convert.ToDateTime(model.Date);
                }

                Nullable<DateTime> Entry_Date = new DateTime();
                if (ProgressDate != null)
                {
                    Entry_Date = (ProgressDate.Value.Day <= AprilMonthDayValue && ProgressDate.Value.Month == AprilMonthValue)
                            ? Conditional_Date_Value : ProgressDate;
                }

                //if (FinanDate.Month == AprilMonthValue && FinanDate.Day > AprilMonthDayValue)   // CHANGE
                //{
                //    if (Entry_Date.Value.Year * 12 + Entry_Date.Value.Month <= CondFinanYear * 12 + 3)
                //    {
                //        //return ("An Error Occurred While Your Processing Request.");
                //        return ("Technology Details can be entered in Current Date of Current Financial Year");
                //    }
                //}
                var ProgressMonth = Entry_Date.Value.Month;
                var ProgressYear = Entry_Date.Value.Year;

                // change end here

                dbContext = new PMGSYEntities();

                //if (dbContext.EXEC_TECH_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE && m.MAST_TECH_CODE == model.TechnologyCode && m.MAST_LAYER_CODE == model.hdnLayerCode && m.EXEC_PROG_YEAR == model.Year && m.EXEC_PROG_MONTH == model.Month))
                //{
                //    return "Technology Progress Details Already Exist for selected month and year.";
                //}
                // Change in below if block
                if (dbContext.EXEC_TECH_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE && m.MAST_TECH_CODE == model.TechnologyCode && m.MAST_LAYER_CODE == model.hdnLayerCode && m.EXEC_PROG_YEAR == ProgressYear && m.EXEC_PROG_MONTH == ProgressMonth))
                {
                    return "Technology Progress Details Already Exist for selected month and year.";
                }   // change

                //var query = dbContext.IMS_PROPOSAL_TECH.Where(x => x.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE && x.MAST_TECH_CODE == model.TechnologyCode).FirstOrDefault();
                //if (query != null)
                //{
                //    //techCode = query.MASTER_TECHNOLOGY.MAST_TECH_CODE;
                //    layerCode = query.MASTER_EXECUTION_ITEM.MAST_HEAD_CODE;
                //}
                if (dbContext.EXEC_TECH_MONTHLY_STATUS.Any())
                {
                    maxId = dbContext.EXEC_TECH_MONTHLY_STATUS.Max(x => x.TECH_MONTHLY_CODE);
                }
                maxId++;
                exec_tech_monthly_status.TECH_MONTHLY_CODE = maxId;
                exec_tech_monthly_status.IMS_PR_ROAD_CODE = model.IMS_PR_ROAD_CODE;
                ///default values to be replaced after discussion
                exec_tech_monthly_status.MAST_TECH_CODE = model.TechnologyCode;
                exec_tech_monthly_status.EXEC_ISCOMPLETED = model.Status;
                ///default values to be replaced after discussion
                exec_tech_monthly_status.EXEC_COMPLETED = model.completedLength;

                //exec_tech_monthly_status.EXEC_PROG_MONTH = model.Month;
                //exec_tech_monthly_status.EXEC_PROG_YEAR = model.Year;
                //exec_tech_monthly_status.EXEC_PROGRESS_DATE = comm.GetStringToDateTime(model.Date);

                exec_tech_monthly_status.EXEC_PROG_MONTH = ProgressMonth;  // change by saurabh
                exec_tech_monthly_status.EXEC_PROG_YEAR = ProgressYear;    // change by saurabh
                exec_tech_monthly_status.EXEC_PROGRESS_DATE = Entry_Date;  // change by saurabh

                exec_tech_monthly_status.MAST_LAYER_CODE = model.hdnLayerCode;


                exec_tech_monthly_status.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                exec_tech_monthly_status.USERID = PMGSYSession.Current.UserId;

                dbContext.EXEC_TECH_MONTHLY_STATUS.Add(exec_tech_monthly_status);

                //Added by Pradip Patil[08-05-2017]

                EXEC_TECH_PROGRESS_DETAILS techProgressModel = new EXEC_TECH_PROGRESS_DETAILS();
                techProgressModel.TECH_MONTHLY_CODE = maxId;
                techProgressModel.TECH_QUANTITY = model.TechQuantity;
                techProgressModel.TECH_UNIT = model.TechUnit;
                techProgressModel.TECH_SUPPLIER = (model.TechSupplier == null || model.TechSupplier == string.Empty) ? "NA" : model.TechSupplier;
                techProgressModel.TECH_RATE_PER_UNIT = model.RatePerunit;
                dbContext.EXEC_TECH_PROGRESS_DETAILS.Add(techProgressModel);


                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException dbx)
            {
                ErrorLog.LogError(dbx, "AddExecTechnologyProgressDetailsDAL().DbUpdateException");
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (OptimisticConcurrencyException ocx)
            {
                ErrorLog.LogError(ocx, "AddExecTechnologyProgressDetailsDAL().OptimisticConcurrencyException");
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddExecTechnologyProgressDetailsDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// update the remark of particular proposal
        /// </summary>
        /// <param name="proposalCode">id of proposal </param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool EditExecTechnologyProgressDetailsDAL(TechnologyDetailsViewModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions comm = new CommonFunctions();
            // Change start here by saurabh
            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];   //10
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);
            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];  //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);
            int allowedMonth = (DateTime.Now.Month == AprilMonthValue && DateTime.Now.Day <= AprilMonthDayValue) ? (DateTime.Now.Month - 1) : DateTime.Now.Month;
            int allowedYear = DateTime.Now.Year;
            // Change ended here by saurabh
            try
            {
                // Changes START here 
                DateTime FinanDate = DateTime.Now; // change
                int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year - 1; // change
                DateTime Conditional_Date_Value = new DateTime(FinancialYear , 3, 31, 00, 00, 00);  // change
                int CondFinanYear = FinancialYear;
                //DateTime TestDate = new DateTime(2023, 4, 6, 00, 00, 00);  // change commentable
                //model.Date = TestDate.ToString();  // change commentable
                Nullable<DateTime> ProgressDate = new DateTime();
                if (model.Date != null)
                {
                    ProgressDate = Convert.ToDateTime(model.Date);
                }

                Nullable<DateTime> Entry_Date = new DateTime();
                if (ProgressDate != null)
                {
                    Entry_Date = (ProgressDate.Value.Day <= AprilMonthDayValue && ProgressDate.Value.Month == AprilMonthValue)
                            ? Conditional_Date_Value : ProgressDate;
                }
                if (FinanDate.Month == AprilMonthValue && FinanDate.Day > AprilMonthDayValue)   // CHANGE
                {
                    if (Entry_Date.Value.Year * 12 + Entry_Date.Value.Month <= CondFinanYear * 12 + 3)
                    {
                        message = "Technology Details can be entered in Current Date of Current Financial Year.";
                        return false;
                    }
                }
                var ProgressMonth = Entry_Date.Value.Month;
                var ProgressYear = Entry_Date.Value.Year;
                // change end here

                EXEC_TECH_MONTHLY_STATUS exec_tech_monthly_status = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.TECH_MONTHLY_CODE == model.techMonthlyCode).FirstOrDefault();
                exec_tech_monthly_status.EXEC_ISCOMPLETED = model.Status;
                exec_tech_monthly_status.EXEC_COMPLETED = model.completedLength;

                //exec_tech_monthly_status.EXEC_PROG_MONTH = model.Month;
                //exec_tech_monthly_status.EXEC_PROG_YEAR = model.Year;                
                //exec_tech_monthly_status.EXEC_PROGRESS_DATE = comm.GetStringToDateTime(model.Date);
               

                exec_tech_monthly_status.EXEC_PROG_MONTH = ProgressMonth;    // change by saurabh
                exec_tech_monthly_status.EXEC_PROG_YEAR = ProgressYear;      // change by saurabh
                exec_tech_monthly_status.EXEC_PROGRESS_DATE = Entry_Date;    // change by saurabh

                exec_tech_monthly_status.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                exec_tech_monthly_status.USERID = PMGSYSession.Current.UserId;

                dbContext.Entry(exec_tech_monthly_status).State = System.Data.Entity.EntityState.Modified;

                //Added by Pradip Patil[08/05/2017] starts

                EXEC_TECH_PROGRESS_DETAILS techProgressModel = dbContext.EXEC_TECH_PROGRESS_DETAILS.Where(x => x.TECH_MONTHLY_CODE == model.techMonthlyCode).FirstOrDefault();
                //   techProgressModel.TECH_MONTHLY_CODE = maxId;
                if (techProgressModel != null)
                {
                    techProgressModel.TECH_QUANTITY = model.TechQuantity;
                    techProgressModel.TECH_UNIT = model.TechUnit;
                    techProgressModel.TECH_SUPPLIER = (model.TechSupplier == null || model.TechSupplier == string.Empty) ? "NA" : model.TechSupplier;//model.TechSupplier;
                    techProgressModel.TECH_RATE_PER_UNIT = model.RatePerunit;
                    dbContext.EXEC_TECH_PROGRESS_DETAILS.Add(techProgressModel);
                    dbContext.Entry<EXEC_TECH_PROGRESS_DETAILS>(techProgressModel).State = System.Data.Entity.EntityState.Modified;
                }
                //Added by Pradip Patil[08/05/2017] ends

                dbContext.SaveChanges();
                message = "Technology Progress Details Updated Successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditExecTechnologyProgressDetailsDAL()");
                message = "Error occurred while processing the request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// deletes the CDWorks details
        /// </summary>
        /// <param name="proposalCode">indicates the road proposal code</param>
        /// <param name="cdWorksCode">id representing cdworks details</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with the response message</returns>
        public bool DeleteExecTechnologyProgressDetailsDAL(int techMonhtlyCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                EXEC_TECH_MONTHLY_STATUS exec_tech_monthly_status = dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x => x.TECH_MONTHLY_CODE == techMonhtlyCode).FirstOrDefault();
                dbContext.EXEC_TECH_MONTHLY_STATUS.Remove(exec_tech_monthly_status);
                //Added by Pradip Patil [08/02/2017] Starts
                EXEC_TECH_PROGRESS_DETAILS exec_tech_progress_status = dbContext.EXEC_TECH_PROGRESS_DETAILS.Where(x => x.TECH_MONTHLY_CODE == techMonhtlyCode).FirstOrDefault();
                if (exec_tech_progress_status != null)
                    dbContext.EXEC_TECH_PROGRESS_DETAILS.Remove(exec_tech_progress_status);
                //Added by Pradip Patil [08/02/2017] Ends
                dbContext.SaveChanges();
                message = "Technology Progress Details deleted successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteExecTechnologyProgressDetailsDAL()");
                message = "Technology Progress Details can not be deleted.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #endregion

        #region File Details

        /// <summary>
        /// Add Image Files
        /// </summary>
        /// <param name="lst_execution_files">list of files along with file details</param>
        /// <returns></returns>
        public string AddFileUploadDetailsDAL(List<EXEC_FILES> lst_execution_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;
                foreach (EXEC_FILES fileModel in lst_execution_files)
                {
                    if (dbContext.EXEC_FILES.Count() == 0)
                    {
                        MaxID = 0;
                    }
                    else
                    {
                        if (dbContext.EXEC_FILES.Where(s => s.IMS_PR_ROAD_CODE == fileModel.IMS_PR_ROAD_CODE).Any())
                        {
                            MaxID = (from c in dbContext.EXEC_FILES.Where(s => s.IMS_PR_ROAD_CODE == fileModel.IMS_PR_ROAD_CODE) select (Int32?)c.EXEC_FILE_ID ?? 0).Max();
                        }
                        else
                        {
                            MaxID = 0;
                        }
                    }
                    ++MaxID;
                    //fileModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    //fileModel.USERID = PMGSYSession.Current.UserId; 
                    fileModel.EXEC_FILE_ID = Convert.ToInt32(MaxID);
                    dbContext.EXEC_FILES.Add(fileModel);
                }
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException)
            {
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (OptimisticConcurrencyException)
            {
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (Exception)
            {
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// For Listing the Images
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="IMS_PR_ROAD_CODE">id of proposal</param>
        /// <returns></returns>
        public Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<EXEC_FILES> listExecutionFiles = dbContext.EXEC_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.EXEC_FILE_TYPE == 0).ToList();
                IQueryable<EXEC_FILES> query = listExecutionFiles.AsQueryable<EXEC_FILES>();
                totalRecords = listExecutionFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                //string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["EXECUTION_PRGRESS_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                //string PhysicalPath = ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD"];
                string PhysicalPath = ConfigurationManager.AppSettings["EXECUTION_PRGRESS_FILE_UPLOAD"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.EXEC_FILE_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {   
                                   // @"file/://"  + Path.Combine(PhysicalPath, fileDetails.IMS_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    Path.Combine(VirtualDirectoryUrl, fileDetails.EXEC_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    //fileDetails.CHAINAGE.ToString(),
                                    fileDetails.EXEC_FILE_DESC,
                                    dbContext.MASTER_EXECUTION_ITEM.Where(m=>m.MAST_HEAD_CODE == fileDetails.EXEC_STAGE).Select(m=>m.MAST_HEAD_DESC).FirstOrDefault(),
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                    "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('" + fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.EXEC_FILE_NAME + "'); return false;>Delete</a>",                                    
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        /// <summary>
        /// update image Details
        /// </summary>
        /// <param name="execution_files">model data containing the updated file details</param>
        /// <returns></returns>
        public string UpdateImageDetailsDAL(EXEC_FILES execution_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                EXEC_FILES db_execution_files = dbContext.EXEC_FILES.Where(
                    a => a.EXEC_FILE_ID == execution_files.EXEC_FILE_ID &&
                    a.IMS_PR_ROAD_CODE == execution_files.IMS_PR_ROAD_CODE
                    ).FirstOrDefault();

                db_execution_files.EXEC_FILE_DESC = execution_files.EXEC_FILE_DESC;

                dbContext.Entry(db_execution_files).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException)
            {
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (OptimisticConcurrencyException)
            {
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (Exception)
            {
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete Image Files
        /// </summary>
        /// <param name="execution_files">file along with details</param>
        /// <returns></returns>
        public string DeleteFileDetailsDAL(EXEC_FILES execution_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                EXEC_FILES obj_execution_files = dbContext.EXEC_FILES.Where(
                    a => a.IMS_PR_ROAD_CODE == execution_files.IMS_PR_ROAD_CODE &&
                    a.EXEC_FILE_ID == execution_files.EXEC_FILE_ID
                     &&
                    a.EXEC_FILE_NAME == execution_files.EXEC_FILE_NAME).FirstOrDefault();

                dbContext.EXEC_FILES.Remove(obj_execution_files);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch
            {
                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// list of video files
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="IMS_PR_ROAD_CODE">id of proposal</param>
        /// <returns></returns>
        public Array GetVideoFilesListDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<EXEC_FILES> listExecutionFiles = dbContext.EXEC_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.EXEC_FILE_TYPE == 1).ToList();
                IQueryable<EXEC_FILES> query = listExecutionFiles.AsQueryable<EXEC_FILES>();
                totalRecords = listExecutionFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                //string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["EXECUTION_PRGRESS_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                //string PhysicalPath = ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD"];
                string PhysicalPath = ConfigurationManager.AppSettings["EXECUTION_PRGRESS_FILE_UPLOAD"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.EXEC_FILE_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {   
                                   // @"file/://"  + Path.Combine(PhysicalPath, fileDetails.IMS_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    //Path.Combine(VirtualDirectoryUrl, fileDetails.EXEC_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    //fileDetails.EXEC_FILE_NAME.ToString(),
                                    //"<a href='#' title='Click here to Download a Video' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    URLEncrypt.EncryptParameters1(new string[]{fileDetails.EXEC_FILE_NAME.ToString().Trim()}),
                                    //fileDetails.CHAINAGE.ToString(),
                                    fileDetails.EXEC_FILE_DESC,
                                    //"<a href='#' title='Click here to Download a Video' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                    "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('" + fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.EXEC_FILE_NAME + "'); return false;>Delete</a>",                                    
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Executing Officer

        /// <summary>
        /// for getting the details of proposal
        /// </summary>
        /// <param name="proposalCode">id of proposal</param>
        /// <returns></returns>
        public ExecutingOfficerViewModel GetExecutingOfficerRoadDetails(int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                ExecutingOfficerViewModel executingOfficerViewModel = new ExecutingOfficerViewModel();

                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);

                if (master != null)
                {
                    executingOfficerViewModel.DistrictName = PMGSYSession.Current.DistrictName;
                    executingOfficerViewModel.BlockName = (dbContext.MASTER_BLOCK.Where(m => m.MAST_BLOCK_CODE == master.MAST_BLOCK_CODE).Select(m => m.MAST_BLOCK_NAME).FirstOrDefault());
                    executingOfficerViewModel.Package = master.IMS_PACKAGE_ID.ToString();
                    executingOfficerViewModel.RoadName = master.IMS_ROAD_NAME;
                    executingOfficerViewModel.Sanction_Cost = Convert.ToDouble(master.IMS_SANCTIONED_BS_AMT + master.IMS_SANCTIONED_BW_AMT + master.IMS_SANCTIONED_CD_AMT + master.IMS_SANCTIONED_OW_AMT + master.IMS_SANCTIONED_PAV_AMT + master.IMS_SANCTIONED_PW_AMT + master.IMS_SANCTIONED_RS_AMT);
                    executingOfficerViewModel.Sanction_length = master.IMS_PAV_LENGTH;
                    executingOfficerViewModel.Year = (master.IMS_YEAR) + "-" + ((master.IMS_YEAR) + 1);
                }
                return executingOfficerViewModel;

            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// populates the Executing officer details list
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalCode">id of proposal</param>
        /// <returns></returns>
        public Array GetExecutingOfficerListDAL(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                List<EXEC_OFFICER_DETAILS> executingOfficerList = dbContext.EXEC_OFFICER_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).ToList<EXEC_OFFICER_DETAILS>();

                totalRecords = executingOfficerList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_MONTH":
                                executingOfficerList = executingOfficerList.OrderBy(m => m.EXEC_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "EXEC_YEAR":
                                executingOfficerList = executingOfficerList.OrderBy(m => m.EXEC_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_DESIG_CODE":
                                executingOfficerList = executingOfficerList.OrderBy(m => m.MAST_DESIG_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_OFFICER_CODE":
                                executingOfficerList = executingOfficerList.OrderBy(m => m.MAST_OFFICER_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                executingOfficerList = executingOfficerList.OrderBy(m => m.EXEC_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_MONTH":
                                executingOfficerList = executingOfficerList.OrderByDescending(m => m.EXEC_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "EXEC_YEAR":
                                executingOfficerList = executingOfficerList.OrderByDescending(m => m.EXEC_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "MAST_DESIG_CODE":
                                executingOfficerList = executingOfficerList.OrderByDescending(m => m.MAST_DESIG_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "MAST_OFFICER_CODE":
                                executingOfficerList = executingOfficerList.OrderByDescending(m => m.MAST_OFFICER_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList().ToList();
                                break;
                            default:
                                executingOfficerList = executingOfficerList.OrderByDescending(m => m.EXEC_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    executingOfficerList = executingOfficerList.OrderBy(m => m.EXEC_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }


                return executingOfficerList.Select(listDetails => new
                {
                    id = listDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        dbContext.MASTER_MONTH.Where(m=>m.MAST_MONTH_CODE==listDetails.EXEC_MONTH).Select(s=>s.MAST_MONTH_FULL_NAME).FirstOrDefault(),
                        listDetails.EXEC_YEAR.ToString(),
                        listDetails.MASTER_DESIGNATION.MAST_DESIG_NAME,
                        listDetails.ADMIN_NODAL_OFFICERS.ADMIN_NO_FNAME+" "+listDetails.ADMIN_NODAL_OFFICERS.ADMIN_NO_MNAME+" "+listDetails.ADMIN_NODAL_OFFICERS.ADMIN_NO_LNAME,
                        "<a href='#' title='Click here to edit Executing Officer Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditExecutingOfficerDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+listDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"OfficerCode="+listDetails.EXEC_OFFICER_ID.ToString().Trim()}) +"'); return false;'>Edit</a>",
                        "<a href='#' title='Click here to delete  Executing Officer Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteExecutingOfficerDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+listDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"OfficerCode="+listDetails.EXEC_OFFICER_ID.ToString().Trim()}) +"'); return false;'>Delete</a>",
                    }
                }).ToArray();

            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// populates the Technology Progress details list
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalCode">id of proposal</param>
        /// <returns></returns>
        public Array GetTechnologyProgressListDAL(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions comm = new CommonFunctions();
            try
            {
                var technologyProgressList = (from item in dbContext.EXEC_TECH_MONTHLY_STATUS
                                              join propTech in dbContext.IMS_PROPOSAL_TECH on new { item.IMS_PR_ROAD_CODE, item.MAST_TECH_CODE } equals new { propTech.IMS_PR_ROAD_CODE, propTech.MAST_TECH_CODE }
                                              where item.IMS_PR_ROAD_CODE == proposalCode
                                              select new
                                              {
                                                  item.TECH_MONTHLY_CODE,
                                                  item.IMS_PR_ROAD_CODE,
                                                  item.MAST_TECH_CODE,
                                                  item.EXEC_PROG_YEAR,
                                                  item.IMS_SANCTIONED_PROJECTS.IMS_PAV_LENGTH,
                                                  item.MASTER_TECHNOLOGY.MAST_TECH_NAME,
                                                  item.EXEC_PROG_MONTH,
                                                  item.EXEC_PROGRESS_DATE,
                                                  item.EXEC_COMPLETED,
                                                  item.EXEC_ISCOMPLETED,
                                              }).Distinct().ToList();

                totalRecords = technologyProgressList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_PROG_MONTH":
                                technologyProgressList = technologyProgressList.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "EXEC_PROG_YEAR":
                                technologyProgressList = technologyProgressList.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_PAV_LENGTH":
                                technologyProgressList = technologyProgressList.OrderBy(m => m.IMS_PAV_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "EXEC_PROGRESS_DATE":
                                technologyProgressList = technologyProgressList.OrderBy(m => m.EXEC_PROGRESS_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                technologyProgressList = technologyProgressList.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_TECH_CODE":
                                technologyProgressList = technologyProgressList.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "EXEC_PROG_YEAR":
                                technologyProgressList = technologyProgressList.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_PAV_LENGTH":
                                technologyProgressList = technologyProgressList.OrderByDescending(m => m.IMS_PAV_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "EXEC_PROGRESS_DATE":
                                technologyProgressList = technologyProgressList.OrderByDescending(m => m.EXEC_PROGRESS_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList().ToList();
                                break;
                            default:
                                technologyProgressList = technologyProgressList.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    technologyProgressList = technologyProgressList.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = technologyProgressList.Select(m => new
                {
                    m.TECH_MONTHLY_CODE,
                    m.IMS_PR_ROAD_CODE,
                    m.MAST_TECH_CODE,
                    m.EXEC_PROG_YEAR,
                    m.EXEC_PROG_MONTH,
                    m.IMS_PAV_LENGTH,
                    m.MAST_TECH_NAME,
                    m.EXEC_PROGRESS_DATE,
                    m.EXEC_COMPLETED,
                    m.EXEC_ISCOMPLETED,
                }).ToArray();

                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        //m.IMS_PR_ROAD_CODE.ToString(),
                        comm.getMonthText((short)m.EXEC_PROG_MONTH),
                        m.EXEC_PROG_YEAR.ToString(),
                        m.IMS_PAV_LENGTH.ToString(),
                        m.MAST_TECH_NAME,
                        m.EXEC_ISCOMPLETED.ToString() == "C" ? "Completed" : "In Progress",
                        m.EXEC_COMPLETED.ToString(),
                        comm.GetDateTimeToString(m.EXEC_PROGRESS_DATE.Value),
                    }
                }).ToArray();
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// populates the Executing officer dropdown list
        /// </summary>
        /// <param name="imsPrRoadCode_DesignationCode">string containing proposalCode and designation code</param>
        /// <returns></returns>
        public List<SelectListItem> PopulateExecutingOfficer(string imsPrRoadCode_DesignationCode)
        {
            try
            {
                if (imsPrRoadCode_DesignationCode != String.Empty)
                {
                    string[] arr = imsPrRoadCode_DesignationCode.Split(',');
                    string imsPrRoadCode = arr[0];
                    string designationCode = arr[1];

                    if (designationCode != String.Empty && designationCode != "0")
                    {
                        int desigCode = Convert.ToInt32(designationCode);
                        int PrRoadCode = Convert.ToInt32(imsPrRoadCode);
                        dbContext = new PMGSYEntities();

                        //get agrement start date 

                        int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == PrRoadCode).OrderByDescending(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                        System.DateTime agreementStartDate = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(s => s.TEND_AGREEMENT_START_DATE).FirstOrDefault();
                        System.DateTime agreementEndDate = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(m => m.TEND_AGREEMENT_END_DATE).FirstOrDefault();

                        //
                        List<SelectListItem> lstExecutingOfficers = new List<SelectListItem>();

                        var dataExecutingOfficers =
                                (from master in dbContext.ADMIN_NODAL_OFFICERS
                                 where master.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode &&
                                       master.ADMIN_NO_DESIGNATION == desigCode &&
                                       master.ADMIN_ACTIVE_STATUS == "Y"
                                 select master).OrderBy(s => s.ADMIN_NO_FNAME);

                        foreach (var item in dataExecutingOfficers)
                        {
                            if (item.ADMIN_ACTIVE_START_DATE != null)
                            {
                                if (!(item.ADMIN_ACTIVE_START_DATE >= agreementEndDate))
                                {
                                    if (item.ADMIN_NO_LNAME != null && item.ADMIN_NO_MNAME != null)
                                    {
                                        lstExecutingOfficers.Add(new SelectListItem { Value = item.ADMIN_NO_OFFICER_CODE.ToString().Trim(), Text = item.ADMIN_NO_FNAME.ToString().Trim() + " " + item.ADMIN_NO_MNAME.ToString().Trim() + " " + item.ADMIN_NO_LNAME.ToString().Trim() });
                                    }
                                    else
                                    {
                                        lstExecutingOfficers.Add(new SelectListItem { Value = item.ADMIN_NO_OFFICER_CODE.ToString().Trim(), Text = item.ADMIN_NO_FNAME.ToString().Trim() });
                                    }
                                }
                            }
                        }
                        return lstExecutingOfficers;
                    }
                    else
                    {
                        List<SelectListItem> lstExecutingOfficers = new List<SelectListItem>();
                        lstExecutingOfficers.Add(new SelectListItem { Value = "0", Text = "Select Executing Officer" });
                        return lstExecutingOfficers;
                    }
                }
                else
                {
                    List<SelectListItem> lstExecutingOfficers = new List<SelectListItem>();
                    lstExecutingOfficers.Add(new SelectListItem { Value = "0", Text = "Select Executing Officer" });
                    return lstExecutingOfficers;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// populates the designation dropdown
        /// </summary>
        /// <param name="isPopulateFirstItem">flag to know whether to populate first item</param>
        /// <returns></returns>
        public List<SelectListItem> PopulateDesignation(bool isPopulateFirstItem = true)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //List<SelectListItem> lstDesignation = new SelectList(dbContext.MASTER_DESIGNATION.Where(m => m.MAST_DESIG_TYPE == "NO" && m.MAST_DESIG_CODE == 170 || m.MAST_DESIG_CODE == 85 || m.MAST_DESIG_CODE == 23).OrderBy(s => s.MAST_DESIG_NAME), "MAST_DESIG_CODE", "MAST_DESIG_NAME").ToList();
                List<SelectListItem> lstDesignation = new SelectList(dbContext.ADMIN_NODAL_OFFICERS.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode && m.ADMIN_ACTIVE_STATUS == "Y").Select(z => new { z.MASTER_DESIGNATION.MAST_DESIG_CODE, z.MASTER_DESIGNATION.MAST_DESIG_NAME }).OrderBy(s => s.MAST_DESIG_NAME), "MAST_DESIG_CODE", "MAST_DESIG_NAME").ToList();

                lstDesignation.Insert(0, (new SelectListItem { Text = "Select Designation", Value = "0", Selected = true }));

                return lstDesignation;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// saves the Executing officer details
        /// </summary>
        /// <param name="executingOfficerViewModel">model data containing the officer details</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool AddExecutingOfficerDetails(ExecutingOfficerViewModel executingOfficerViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //validation
                //get agrement start date 
                if (dbContext.EXEC_OFFICER_DETAILS.Any(m => m.EXEC_OFFICER_ID == executingOfficerViewModel.EXEC_OFFICER_ID && m.EXEC_MONTH == executingOfficerViewModel.EXEC_MONTH && m.EXEC_YEAR == executingOfficerViewModel.EXEC_YEAR && m.MAST_OFFICER_CODE == m.MAST_OFFICER_CODE && m.IMS_PR_ROAD_CODE == executingOfficerViewModel.IMS_PR_ROAD_CODE))
                {
                    message = "Executing officer details for this month and year is already exists.";
                    return false;
                }

                if (dbContext.EXEC_OFFICER_DETAILS.Any(m => m.EXEC_MONTH == executingOfficerViewModel.EXEC_MONTH && m.EXEC_YEAR == executingOfficerViewModel.EXEC_YEAR && m.IMS_PR_ROAD_CODE == executingOfficerViewModel.IMS_PR_ROAD_CODE))
                {
                    message = "Executing officer details for this month and year is already exists.";
                    return false;
                }

                //int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == executingOfficerViewModel.IMS_PR_ROAD_CODE).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                //DateTime agreementStartDate = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(m => m.TEND_DATE_OF_AGREEMENT).FirstOrDefault();
                //int agreementMonth = agreementStartDate.Month;
                //int agreementYear = agreementStartDate.Year;

                //if ((executingOfficerViewModel.EXEC_MONTH < agreementMonth) || (executingOfficerViewModel.EXEC_YEAR < agreementYear))
                //{
                //    message = "Please select Month and Year Greater than or equal to Agreement Date(" + agreementStartDate.ToString("dd/MM/yyyy") + ")";
                //    return false;
                //}
                //data copy view model to actual model
                EXEC_OFFICER_DETAILS executingOfficerDetailsModel = new EXEC_OFFICER_DETAILS();

                executingOfficerDetailsModel.IMS_PR_ROAD_CODE = executingOfficerViewModel.IMS_PR_ROAD_CODE;
                executingOfficerDetailsModel.EXEC_OFFICER_ID = GetMaxExecutingOfficerCode(executingOfficerViewModel.IMS_PR_ROAD_CODE);
                executingOfficerDetailsModel.EXEC_MONTH = executingOfficerViewModel.EXEC_MONTH;
                executingOfficerDetailsModel.EXEC_YEAR = executingOfficerViewModel.EXEC_YEAR;
                executingOfficerDetailsModel.MAST_OFFICER_CODE = executingOfficerViewModel.MAST_OFFICER_CODE;
                executingOfficerDetailsModel.MAST_DESIG_CODE = executingOfficerViewModel.MAST_DESIG_CODE;
                //executingOfficerDetailsModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                //executingOfficerDetailsModel.USERID = PMGSYSession.Current.UserId; 
                dbContext = new PMGSYEntities();
                dbContext.EXEC_OFFICER_DETAILS.Add(executingOfficerDetailsModel);
                dbContext.SaveChanges();
                message = "Executing Officer details saved successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the officer details
        /// </summary>
        /// <param name="executingOfficerViewModel">updated details of Executing officer</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool EditExecutingOfficerDetails(ExecutingOfficerViewModel executingOfficerViewModel, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();

                EXEC_OFFICER_DETAILS executingOfficerDetailsModel = dbContext.EXEC_OFFICER_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == executingOfficerViewModel.IMS_PR_ROAD_CODE && m.EXEC_OFFICER_ID == executingOfficerViewModel.EXEC_OFFICER_ID).FirstOrDefault();
                if (executingOfficerDetailsModel == null)
                {
                    message = "An Error Occured While processing your request.";
                    return false;
                }

                if (dbContext.EXEC_OFFICER_DETAILS.Any(m => m.EXEC_MONTH == executingOfficerViewModel.EXEC_MONTH && m.EXEC_YEAR == executingOfficerViewModel.EXEC_YEAR && m.MAST_OFFICER_CODE == m.MAST_OFFICER_CODE && m.IMS_PR_ROAD_CODE == executingOfficerViewModel.IMS_PR_ROAD_CODE && m.EXEC_OFFICER_ID != executingOfficerViewModel.EXEC_OFFICER_ID))
                {
                    message = "Executing officer details for this month and year is already exists.";
                    return false;
                }

                if (dbContext.EXEC_OFFICER_DETAILS.Any(m => m.EXEC_MONTH == executingOfficerViewModel.EXEC_MONTH && m.EXEC_YEAR == executingOfficerViewModel.EXEC_YEAR && m.IMS_PR_ROAD_CODE == executingOfficerViewModel.IMS_PR_ROAD_CODE && m.EXEC_OFFICER_ID != executingOfficerViewModel.EXEC_OFFICER_ID))
                {
                    message = "Executing officer details for this month and year is already exists.";
                    return false;
                }


                //get agrement start date 
                //int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == executingOfficerViewModel.IMS_PR_ROAD_CODE).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                //DateTime agreementStartDate = dbContext.TEND_AGREEMENT_MASTER.Where(m => m.TEND_AGREEMENT_CODE == agreementCode).Select(m => m.TEND_DATE_OF_AGREEMENT).FirstOrDefault();
                //int agreementMonth = agreementStartDate.Month;
                //int agreementYear = agreementStartDate.Year;

                //if ((executingOfficerViewModel.EXEC_MONTH < agreementMonth) || (executingOfficerViewModel.EXEC_YEAR < agreementYear))
                //{
                //    message = "Please select Month and Year Greater than or equal to Agreement Start Date(" + agreementStartDate.ToString("dd/MM/yyyy") + ")";
                //    return false;
                //}
                //copy view model data into Actual Model
                executingOfficerDetailsModel.EXEC_OFFICER_ID = executingOfficerViewModel.EXEC_OFFICER_ID;
                executingOfficerDetailsModel.IMS_PR_ROAD_CODE = executingOfficerViewModel.IMS_PR_ROAD_CODE;
                executingOfficerDetailsModel.EXEC_MONTH = executingOfficerViewModel.EXEC_MONTH;
                executingOfficerDetailsModel.EXEC_YEAR = executingOfficerViewModel.EXEC_YEAR;
                executingOfficerDetailsModel.MAST_OFFICER_CODE = executingOfficerViewModel.MAST_OFFICER_CODE;
                executingOfficerDetailsModel.MAST_DESIG_CODE = executingOfficerViewModel.MAST_DESIG_CODE;

                dbContext.Entry(executingOfficerDetailsModel).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                message = "Executing Officer details updated successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// deletes the Executing officer details
        /// </summary>
        /// <param name="proposalCode">id of proposal</param>
        /// <param name="ExecutingOfficerCode">id of executing officer</param>
        /// <param name="message">response message</param>
        /// <returns></returns>
        public bool DeleteExecutingOfficerDetails(int proposalCode, int ExecutingOfficerCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                EXEC_OFFICER_DETAILS executingOfficerDetailsModel = dbContext.EXEC_OFFICER_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_OFFICER_ID == ExecutingOfficerCode).FirstOrDefault();

                if (executingOfficerDetailsModel == null)
                {
                    message = "An Error Occurred While Your Processing Request.";
                    return false;
                }
                dbContext.EXEC_OFFICER_DETAILS.Remove(executingOfficerDetailsModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException)
            {
                message = "Executing Officer details can not be deleted.";
                return false;
            }
            catch (Exception)
            {
                message = "An Error Occurred While Your Processing Request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// finds the maximum id of available details
        /// </summary>
        /// <param name="imsPrRoadCode">id of proposal</param>
        /// <returns></returns>
        public int GetMaxExecutingOfficerCode(int imsPrRoadCode)
        {
            int? maxCode = null;
            try
            {
                dbContext = new PMGSYEntities();

                if (!dbContext.EXEC_OFFICER_DETAILS.Any())
                {
                    maxCode = 1;
                }
                else
                {

                    maxCode = dbContext.EXEC_OFFICER_DETAILS.Max(m => m.EXEC_OFFICER_ID);
                    maxCode = maxCode + 1;
                }
                return (int)maxCode;
            }
            catch
            {
                return (int)maxCode;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the existing executing officer details
        /// </summary>
        /// <param name="proposalCode">id of proposal</param>
        /// <param name="executingOfficerCode">id of executing officer</param>
        /// <returns></returns>
        public ExecutingOfficerViewModel GetExecutingOfficerDetails(int proposalCode, int executingOfficerCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                ExecutingOfficerViewModel executingOfficerViewModel = new ExecutingOfficerViewModel();

                EXEC_OFFICER_DETAILS execitingOfficerModel = dbContext.EXEC_OFFICER_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_OFFICER_ID == executingOfficerCode).FirstOrDefault();

                if (execitingOfficerModel == null)
                {
                    return null;
                }
                else
                {
                    executingOfficerViewModel.EXEC_MONTH = execitingOfficerModel.EXEC_MONTH;
                    executingOfficerViewModel.EXEC_YEAR = execitingOfficerModel.EXEC_YEAR;
                    executingOfficerViewModel.EXEC_OFFICER_ID = execitingOfficerModel.EXEC_OFFICER_ID;
                    executingOfficerViewModel.MAST_OFFICER_CODE = execitingOfficerModel.MAST_OFFICER_CODE;
                    executingOfficerViewModel.IMS_PR_ROAD_CODE = execitingOfficerModel.IMS_PR_ROAD_CODE;
                    executingOfficerViewModel.MAST_DESIG_CODE = execitingOfficerModel.MAST_DESIG_CODE;
                    executingOfficerViewModel.ExecutingOfficerId = execitingOfficerModel.MAST_OFFICER_CODE;
                }

                int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                TEND_AGREEMENT_MASTER masterAgreement = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                executingOfficerViewModel.AgreementYear = masterAgreement.TEND_DATE_OF_AGREEMENT.Year;
                executingOfficerViewModel.AgreementMonth = masterAgreement.TEND_DATE_OF_AGREEMENT.Month;
                executingOfficerViewModel.AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);
                return executingOfficerViewModel;

                return executingOfficerViewModel;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// for getting the agreement date 
        /// </summary>
        /// <param name="proposalCode">id of proposal</param>
        /// <returns></returns>
        public ExecutingOfficerViewModel GetAgreementDetails(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            ExecutingOfficerViewModel model = new ExecutingOfficerViewModel();
            try
            {
                int agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                TEND_AGREEMENT_MASTER masterAgreement = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                model.AgreementYear = masterAgreement.TEND_DATE_OF_AGREEMENT.Year;
                model.AgreementMonth = masterAgreement.TEND_DATE_OF_AGREEMENT.Month;
                model.AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);
                return model;
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region PROPOSAL_RELATED_DETAILS

        public Array GetRoadProposalExecutionList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int yearCode = 0;
            int monthCode = 0;
            if ((dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
            {
                yearCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                monthCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
            }
            try
            {
                var lstRoadDetails = (from item in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                      where item.IMS_PR_ROAD_CODE == proposalCode
                                      select new
                                      {
                                          item.EXEC_BASE_COURSE,
                                          item.EXEC_CD_WORKS,
                                          item.EXEC_COMPLETED,
                                          item.EXEC_EARTHWORK_SUBGRADE,
                                          item.EXEC_ISCOMPLETED,
                                          item.EXEC_LSB_WORKS,
                                          item.EXEC_MISCELANEOUS,
                                          item.EXEC_PREPARATORY_WORK,
                                          item.EXEC_PROG_MONTH,
                                          item.EXEC_PROG_YEAR,
                                          item.EXEC_SIGNS_STONES,
                                          item.EXEC_SUBBASE_PREPRATION,
                                          item.EXEC_SURFACE_COURSE,
                                          item.IMS_PR_ROAD_CODE,
                                      });


                totalRecords = lstRoadDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                        }
                        //lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstRoadDetails.Select(physicalDetails => new
                {
                    physicalDetails.EXEC_BASE_COURSE,
                    physicalDetails.EXEC_CD_WORKS,
                    physicalDetails.EXEC_COMPLETED,
                    physicalDetails.EXEC_EARTHWORK_SUBGRADE,
                    physicalDetails.EXEC_ISCOMPLETED,
                    physicalDetails.EXEC_LSB_WORKS,
                    physicalDetails.EXEC_MISCELANEOUS,
                    physicalDetails.EXEC_PREPARATORY_WORK,
                    physicalDetails.EXEC_PROG_MONTH,
                    physicalDetails.EXEC_PROG_YEAR,
                    physicalDetails.EXEC_SIGNS_STONES,
                    physicalDetails.EXEC_SUBBASE_PREPRATION,
                    physicalDetails.EXEC_SURFACE_COURSE,
                    physicalDetails.IMS_PR_ROAD_CODE,
                }).ToArray();

                return gridData.Select(physicalDetails => new
                {
                    id = physicalDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        physicalDetails.EXEC_PROG_MONTH == 1?"January":(physicalDetails.EXEC_PROG_MONTH == 2?"February":(physicalDetails.EXEC_PROG_MONTH == 3?"March":(physicalDetails.EXEC_PROG_MONTH == 4?"April":(physicalDetails.EXEC_PROG_MONTH == 5?"May":(physicalDetails.EXEC_PROG_MONTH == 6?"June":(physicalDetails.EXEC_PROG_MONTH == 7?"July":physicalDetails.EXEC_PROG_MONTH == 8?"August":(physicalDetails.EXEC_PROG_MONTH == 9?"September":(physicalDetails.EXEC_PROG_MONTH == 10?"October":(physicalDetails.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        physicalDetails.EXEC_PROG_YEAR.ToString(),
                        physicalDetails.EXEC_ISCOMPLETED=="P"?"In Progress":(physicalDetails.EXEC_ISCOMPLETED == "C"?"Completed":physicalDetails.EXEC_ISCOMPLETED == "F"?"Pending(Forest Clearance)":physicalDetails.EXEC_ISCOMPLETED == "A"?"Pending(Land Acquisition)":"Pending Legal Cases"),
                        physicalDetails.EXEC_PREPARATORY_WORK==null?"-":physicalDetails.EXEC_PREPARATORY_WORK.ToString(),
                        physicalDetails.EXEC_EARTHWORK_SUBGRADE==null?"-":physicalDetails.EXEC_EARTHWORK_SUBGRADE.ToString(),
                        physicalDetails.EXEC_SUBBASE_PREPRATION == null?"-":physicalDetails.EXEC_SUBBASE_PREPRATION.ToString(),
                        physicalDetails.EXEC_BASE_COURSE == null?"-":physicalDetails.EXEC_BASE_COURSE.ToString(),
                        physicalDetails.EXEC_SURFACE_COURSE == null?"-":physicalDetails.EXEC_SURFACE_COURSE.ToString(),
                        physicalDetails.EXEC_SIGNS_STONES == null?"-":physicalDetails.EXEC_SIGNS_STONES.ToString(),
                        physicalDetails.EXEC_CD_WORKS == null?"-":physicalDetails.EXEC_CD_WORKS.ToString(),
                        physicalDetails.EXEC_LSB_WORKS == null?"-":physicalDetails.EXEC_LSB_WORKS.ToString(),
                        physicalDetails.EXEC_MISCELANEOUS == null?"-":physicalDetails.EXEC_MISCELANEOUS.ToString(),
                        physicalDetails.EXEC_COMPLETED == null?"-":physicalDetails.EXEC_COMPLETED.ToString(),
                        //(physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();

            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetLSBProposalExecutionList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            int yearCode = 0;
            int monthCode = 0;
            try
            {

                if ((dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
                }
                var lsbDetails = (from item in dbContext.EXEC_LSB_MONTHLY_STATUS
                                  where item.IMS_PR_ROAD_CODE == proposalCode
                                  select new
                                  {
                                      item.EXEC_APP_CD_WORKS,
                                      item.EXEC_APP_COMPLETED,
                                      item.EXEC_APP_ROAD_WORK,
                                      item.EXEC_BEARINGS,
                                      item.EXEC_BOTTOM_PLUGGING,
                                      item.EXEC_BRIDGE_COMPLETED,
                                      item.EXEC_DECK_SLAB,
                                      item.EXEC_FLOOR_PROTECTION,
                                      item.EXEC_ISCOMPLETED,
                                      item.EXEC_PIER_CAP,
                                      item.EXEC_PIER_SHAFT,
                                      item.EXEC_POSTS_RAILING,
                                      item.EXEC_PROG_MONTH,
                                      item.EXEC_PROG_YEAR,
                                      item.EXEC_RAFT,
                                      item.EXEC_SINKING,
                                      item.EXEC_TOP_PLUGGING,
                                      item.EXEC_WEARING_COAT,
                                      item.EXEC_WELL_CAP,
                                      item.IMS_PR_ROAD_CODE
                                  });

                totalRecords = lsbDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_APP_CD_WORKS":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_COMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_ROAD_WORK":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_ROAD_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BEARINGS":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BEARINGS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BOTTOM_PLUGGING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BOTTOM_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BRIDGE_COMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BRIDGE_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_DECK_SLAB":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_DECK_SLAB).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FLOOR_PROTECTION":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_FLOOR_PROTECTION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_CAP":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PIER_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_SHAFT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PIER_SHAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_POSTS_RAILING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_POSTS_RAILING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RAFT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_RAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SINKING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_SINKING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_TOP_PLUGGING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_TOP_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WEARING_COAT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_WEARING_COAT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WELL_CAP":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_WELL_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                        //lsbDetails = lsbDetails.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_APP_CD_WORKS":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_COMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_ROAD_WORK":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_ROAD_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BEARINGS":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BEARINGS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BOTTOM_PLUGGING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BOTTOM_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BRIDGE_COMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BRIDGE_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_DECK_SLAB":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_DECK_SLAB).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FLOOR_PROTECTION":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_FLOOR_PROTECTION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_CAP":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PIER_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_SHAFT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PIER_SHAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_POSTS_RAILING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_POSTS_RAILING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RAFT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_RAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SINKING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_SINKING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_TOP_PLUGGING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_TOP_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WEARING_COAT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_WEARING_COAT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WELL_CAP":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_WELL_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //lsbDetails = lsbDetails.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lsbDetails.Select(lsbList => new
                {
                    lsbList.EXEC_APP_CD_WORKS,
                    lsbList.EXEC_APP_COMPLETED,
                    lsbList.EXEC_APP_ROAD_WORK,
                    lsbList.EXEC_BEARINGS,
                    lsbList.EXEC_BOTTOM_PLUGGING,
                    lsbList.EXEC_BRIDGE_COMPLETED,
                    lsbList.EXEC_DECK_SLAB,
                    lsbList.EXEC_FLOOR_PROTECTION,
                    lsbList.EXEC_ISCOMPLETED,
                    lsbList.EXEC_PIER_CAP,
                    lsbList.EXEC_PIER_SHAFT,
                    lsbList.EXEC_POSTS_RAILING,
                    lsbList.EXEC_PROG_MONTH,
                    lsbList.EXEC_PROG_YEAR,
                    lsbList.EXEC_RAFT,
                    lsbList.EXEC_SINKING,
                    lsbList.EXEC_TOP_PLUGGING,
                    lsbList.EXEC_WEARING_COAT,
                    lsbList.EXEC_WELL_CAP,
                    lsbList.IMS_PR_ROAD_CODE
                }).ToArray();

                return gridData.Select(lsbList => new
                {
                    id = lsbList.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        lsbList.EXEC_PROG_MONTH == 1?"January":(lsbList.EXEC_PROG_MONTH == 2?"February":(lsbList.EXEC_PROG_MONTH == 3?"March":(lsbList.EXEC_PROG_MONTH == 4?"April":(lsbList.EXEC_PROG_MONTH == 5?"May":(lsbList.EXEC_PROG_MONTH == 6?"June":(lsbList.EXEC_PROG_MONTH == 7?"July":lsbList.EXEC_PROG_MONTH == 8?"August":(lsbList.EXEC_PROG_MONTH == 9?"September":(lsbList.EXEC_PROG_MONTH == 10?"October":(lsbList.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        lsbList.EXEC_PROG_YEAR.ToString(),
                        lsbList.EXEC_ISCOMPLETED.ToString() == "P"?"In Progress":"Completed",
                        lsbList.EXEC_RAFT.ToString(),
                        lsbList.EXEC_FLOOR_PROTECTION.ToString(),
                        lsbList.EXEC_SINKING.ToString(),
                        lsbList.EXEC_BOTTOM_PLUGGING.ToString(),
                        lsbList.EXEC_TOP_PLUGGING.ToString(),
                        lsbList.EXEC_WELL_CAP.ToString(),
                        lsbList.EXEC_PIER_SHAFT.ToString(),
                        lsbList.EXEC_PIER_CAP.ToString(),
                        lsbList.EXEC_BEARINGS.ToString(),
                        lsbList.EXEC_DECK_SLAB.ToString(),
                        lsbList.EXEC_WEARING_COAT.ToString(),
                        lsbList.EXEC_POSTS_RAILING.ToString(),
                        lsbList.EXEC_APP_ROAD_WORK.ToString(),
                        lsbList.EXEC_APP_CD_WORKS.ToString(),
                        lsbList.EXEC_BRIDGE_COMPLETED.ToString(),
                        lsbList.EXEC_APP_COMPLETED.ToString(),
                        //(lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Physical LSB Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Physical LSB Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();

            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetProposalFinancialList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                int? monthCode = 0;
                int? yearCode = 0;
                if ((dbContext.EXEC_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => (Int32?)y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => (Int32?)s.EXEC_PROG_MONTH));
                }

                var lstFinancialProgress = (from item in dbContext.EXEC_PROGRESS
                                            where item.IMS_PR_ROAD_CODE == proposalCode
                                            select new
                                            {
                                                item.EXEC_FINAL_PAYMENT_DATE,
                                                item.EXEC_FINAL_PAYMENT_FLAG,
                                                item.EXEC_PAYMENT_LASTMONTH,
                                                item.EXEC_PAYMENT_THISMONTH,
                                                item.EXEC_PROG_MONTH,
                                                item.EXEC_PROG_YEAR,
                                                item.EXEC_VALUEOFWORK_LASTMONTH,
                                                item.EXEC_VALUEOFWORK_THISMONTH,
                                                item.IMS_PR_ROAD_CODE
                                            });

                totalRecords = lstFinancialProgress.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_FINAL_PAYMENT_DATE":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_FINAL_PAYMENT_DATE).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FINAL_PAYMENT_FLAG":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_FINAL_PAYMENT_FLAG).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PAYMENT_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PAYMENT_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PROG_MONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROGRAM_YEAR":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_VALUEOFWORK_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_VALUEOFWORK_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_FINAL_PAYMENT_DATE":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_FINAL_PAYMENT_DATE).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FINAL_PAYMENT_FLAG":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_FINAL_PAYMENT_FLAG).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PAYMENT_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PAYMENT_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_MONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROGRAM_YEAR":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_VALUEOFWORK_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_VALUEOFWORK_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstFinancialProgress.Select(progressDetails => new
                {
                    progressDetails.EXEC_FINAL_PAYMENT_DATE,
                    progressDetails.EXEC_FINAL_PAYMENT_FLAG,
                    progressDetails.EXEC_PAYMENT_LASTMONTH,
                    progressDetails.EXEC_PAYMENT_THISMONTH,
                    progressDetails.EXEC_PROG_MONTH,
                    progressDetails.EXEC_PROG_YEAR,
                    progressDetails.EXEC_VALUEOFWORK_LASTMONTH,
                    progressDetails.EXEC_VALUEOFWORK_THISMONTH,
                    progressDetails.IMS_PR_ROAD_CODE
                }).ToArray();

                return gridData.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        m.EXEC_PROG_YEAR.ToString(),
                        m.EXEC_PROG_MONTH == 1?"January":(m.EXEC_PROG_MONTH == 2?"February":(m.EXEC_PROG_MONTH == 3?"March":(m.EXEC_PROG_MONTH == 4?"April":(m.EXEC_PROG_MONTH == 5?"May":(m.EXEC_PROG_MONTH == 6?"June":(m.EXEC_PROG_MONTH == 7?"July":m.EXEC_PROG_MONTH == 8?"August":(m.EXEC_PROG_MONTH == 9?"September":(m.EXEC_PROG_MONTH == 10?"October":(m.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        m.EXEC_VALUEOFWORK_LASTMONTH.ToString(),
                        m.EXEC_VALUEOFWORK_THISMONTH.ToString(),
                        (m.EXEC_VALUEOFWORK_LASTMONTH + m.EXEC_VALUEOFWORK_THISMONTH).ToString(),
                        m.EXEC_PAYMENT_LASTMONTH.ToString(),
                        m.EXEC_PAYMENT_THISMONTH.ToString(),
                        (m.EXEC_PAYMENT_LASTMONTH + m.EXEC_PAYMENT_THISMONTH).ToString(),
                        m.EXEC_FINAL_PAYMENT_FLAG=="Y"?"Yes":"No",
                        m.EXEC_FINAL_PAYMENT_DATE==null?"-":Convert.ToDateTime(m.EXEC_FINAL_PAYMENT_DATE).ToString("dd/MM/yyyy"),
                        //(m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Financial Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditFinancialProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Financial Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFinancialProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region PHYSICAL_PROGRESS_FOR_ITNO

        /// <summary>
        /// return the grid data of execution details
        /// </summary>
        /// <param name="yearCode"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="packageCode"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetExecutionListForITNO(int districtCode, int yearCode, int blockCode, string packageCode, string proposalCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstDPIUs = dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_AGENCY_CODE == (dbContext.ADMIN_DEPARTMENT.Where(a => a.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode && m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(a => m.MAST_AGENCY_CODE).FirstOrDefault()) && m.MAST_STATE_CODE == PMGSYSession.Current.StateCode && m.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.ADMIN_ND_CODE).ToList();

                var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                    join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                    join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                    where
                                    master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                    item.IMS_SANCTIONED == "Y" &&
                                    master.TEND_AGREEMENT_TYPE == "C" &&
                                    (yearCode <= 0 ? 1 : item.IMS_YEAR) == (yearCode <= 0 ? 1 : yearCode) &&
                                    (blockCode <= 0 ? 1 : item.MAST_BLOCK_CODE) == (blockCode <= 0 ? 1 : blockCode) &&
                                    (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                    (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                    (districtCode <= 0 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode <= 0 ? 1 : districtCode) &&
                                    item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                    && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                    && lstDPIUs.Contains(item.MAST_DPIU_CODE)
                                    select new
                                    {
                                        district.MAST_DISTRICT_NAME,
                                        block.MAST_BLOCK_NAME,
                                        item.IMS_PACKAGE_ID,
                                        item.IMS_BATCH,
                                        item.IMS_PR_ROAD_CODE,
                                        IMS_ROAD_NAME = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_ROAD_NAME : item.IMS_BRIDGE_NAME,
                                        year.MAST_YEAR_TEXT,
                                        item.IMS_LOCK_STATUS,
                                        item.IMS_NO_OF_CDWORKS,
                                        item.IMS_NO_OF_BRIDGEWRKS,
                                        item.IMS_PROPOSAL_TYPE,
                                        ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                        ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                        //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5)
                                        ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                        MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5)
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_NO_OF_CDWORKS,
                    executionDetails.IMS_NO_OF_BRIDGEWRKS,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_LOCK_STATUS,
                    executionDetails.ROAD_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.IMS_BATCH,
                    executionDetails.MAST_YEAR_TEXT
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.MAST_DISTRICT_NAME == null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString(),
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        (m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        "<a href='#' title='Click here to Delete Financial Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddFinancialDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Delete Financial Details</a>",
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of details of Road Physical Progress 
        /// </summary>
        /// <param name="page">indicates number of pages of list</param>
        /// <param name="rows">indicates no. of rows of each page of list</param>
        /// <param name="sidx">indicates the sort index(on which column sorting is applied)</param>
        /// <param name="sord">indicates sort order(either asc or desc)</param>
        /// <param name="totalRecords">indicates total records</param>
        /// <returns></returns>
        public Array GetRoadPhysicalProgressListForITNO(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int yearCode = 0;
            int monthCode = 0;
            if ((dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
            {
                yearCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                monthCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
            }
            try
            {
                var lstRoadDetails = (from item in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                      where item.IMS_PR_ROAD_CODE == proposalCode
                                      select new
                                      {
                                          item.EXEC_BASE_COURSE,
                                          item.EXEC_CD_WORKS,
                                          item.EXEC_COMPLETED,
                                          item.EXEC_EARTHWORK_SUBGRADE,
                                          item.EXEC_ISCOMPLETED,
                                          item.EXEC_LSB_WORKS,
                                          item.EXEC_MISCELANEOUS,
                                          item.EXEC_PREPARATORY_WORK,
                                          item.EXEC_PROG_MONTH,
                                          item.EXEC_PROG_YEAR,
                                          item.EXEC_SIGNS_STONES,
                                          item.EXEC_SUBBASE_PREPRATION,
                                          item.EXEC_SURFACE_COURSE,
                                          item.IMS_PR_ROAD_CODE,
                                      });


                totalRecords = lstRoadDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                        }
                    }
                }
                else
                {
                    lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstRoadDetails.Select(physicalDetails => new
                {
                    physicalDetails.EXEC_BASE_COURSE,
                    physicalDetails.EXEC_CD_WORKS,
                    physicalDetails.EXEC_COMPLETED,
                    physicalDetails.EXEC_EARTHWORK_SUBGRADE,
                    physicalDetails.EXEC_ISCOMPLETED,
                    physicalDetails.EXEC_LSB_WORKS,
                    physicalDetails.EXEC_MISCELANEOUS,
                    physicalDetails.EXEC_PREPARATORY_WORK,
                    physicalDetails.EXEC_PROG_MONTH,
                    physicalDetails.EXEC_PROG_YEAR,
                    physicalDetails.EXEC_SIGNS_STONES,
                    physicalDetails.EXEC_SUBBASE_PREPRATION,
                    physicalDetails.EXEC_SURFACE_COURSE,
                    physicalDetails.IMS_PR_ROAD_CODE,
                }).ToArray();

                return gridData.Select(physicalDetails => new
                {
                    id = physicalDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        physicalDetails.EXEC_PROG_YEAR.ToString(),
                        physicalDetails.EXEC_PROG_MONTH.ToString(),
                        physicalDetails.EXEC_PROG_MONTH == 1?"January":(physicalDetails.EXEC_PROG_MONTH == 2?"February":(physicalDetails.EXEC_PROG_MONTH == 3?"March":(physicalDetails.EXEC_PROG_MONTH == 4?"April":(physicalDetails.EXEC_PROG_MONTH == 5?"May":(physicalDetails.EXEC_PROG_MONTH == 6?"June":(physicalDetails.EXEC_PROG_MONTH == 7?"July":physicalDetails.EXEC_PROG_MONTH == 8?"August":(physicalDetails.EXEC_PROG_MONTH == 9?"September":(physicalDetails.EXEC_PROG_MONTH == 10?"October":(physicalDetails.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        physicalDetails.EXEC_PROG_YEAR.ToString(),
                        physicalDetails.EXEC_ISCOMPLETED=="P"?"In Progress":(physicalDetails.EXEC_ISCOMPLETED == "C"?"Completed":physicalDetails.EXEC_ISCOMPLETED == "F"?"Pending(Forest Clearance)":physicalDetails.EXEC_ISCOMPLETED == "A"?"Pending(Land Acquisition)":"Pending Legal Cases"),
                        physicalDetails.EXEC_PREPARATORY_WORK==null?"-":physicalDetails.EXEC_PREPARATORY_WORK.ToString(),
                        physicalDetails.EXEC_EARTHWORK_SUBGRADE==null?"-":physicalDetails.EXEC_EARTHWORK_SUBGRADE.ToString(),
                        physicalDetails.EXEC_SUBBASE_PREPRATION == null?"-":physicalDetails.EXEC_SUBBASE_PREPRATION.ToString(),
                        physicalDetails.EXEC_BASE_COURSE == null?"-":physicalDetails.EXEC_BASE_COURSE.ToString(),
                        physicalDetails.EXEC_SURFACE_COURSE == null?"-":physicalDetails.EXEC_SURFACE_COURSE.ToString(),
                        physicalDetails.EXEC_SIGNS_STONES == null?"-":physicalDetails.EXEC_SIGNS_STONES.ToString(),
                        physicalDetails.EXEC_CD_WORKS == null?"-":physicalDetails.EXEC_CD_WORKS.ToString(),
                        physicalDetails.EXEC_LSB_WORKS == null?"-":physicalDetails.EXEC_LSB_WORKS.ToString(),
                        physicalDetails.EXEC_MISCELANEOUS == null?"-":physicalDetails.EXEC_MISCELANEOUS.ToString(),
                        physicalDetails.EXEC_COMPLETED == null?"-":physicalDetails.EXEC_COMPLETED.ToString(),
                        (physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadProgressDetails('" + physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;'>Edit Progress</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveRoadProgressDetails('" +  physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"');></a><a href='#' style='float:right' id='btnCancel' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelRoadProgressDetails('" +  physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>",
                        (physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();

            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns physical details list of bridges
        /// </summary>
        /// <param name="page">indicates the no. of pages</param>
        /// <param name="rows">indicates no. of rows</param>
        /// <param name="sidx">indicates the sort index </param>
        /// <param name="sord">indicates the sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalCode">id of list details</param>
        /// <returns></returns>
        public Array GetLSBPhysicalProgressListForITNO(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            int yearCode = 0;
            int monthCode = 0;
            try
            {

                if ((dbContext.EXEC_LSB_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_LSB_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
                }
                var lsbDetails = (from item in dbContext.EXEC_LSB_MONTHLY_STATUS
                                  where item.IMS_PR_ROAD_CODE == proposalCode
                                  select new
                                  {
                                      item.EXEC_APP_CD_WORKS,
                                      item.EXEC_APP_COMPLETED,
                                      item.EXEC_APP_ROAD_WORK,
                                      item.EXEC_BEARINGS,
                                      item.EXEC_BOTTOM_PLUGGING,
                                      item.EXEC_BRIDGE_COMPLETED,
                                      item.EXEC_DECK_SLAB,
                                      item.EXEC_FLOOR_PROTECTION,
                                      item.EXEC_ISCOMPLETED,
                                      item.EXEC_PIER_CAP,
                                      item.EXEC_PIER_SHAFT,
                                      item.EXEC_POSTS_RAILING,
                                      item.EXEC_PROG_MONTH,
                                      item.EXEC_PROG_YEAR,
                                      item.EXEC_RAFT,
                                      item.EXEC_SINKING,
                                      item.EXEC_TOP_PLUGGING,
                                      item.EXEC_WEARING_COAT,
                                      item.EXEC_WELL_CAP,
                                      item.IMS_PR_ROAD_CODE
                                  });

                totalRecords = lsbDetails.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_APP_CD_WORKS":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_COMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_ROAD_WORK":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_APP_ROAD_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BEARINGS":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BEARINGS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BOTTOM_PLUGGING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BOTTOM_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BRIDGE_COMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_BRIDGE_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_DECK_SLAB":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_DECK_SLAB).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FLOOR_PROTECTION":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_FLOOR_PROTECTION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_CAP":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PIER_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_SHAFT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PIER_SHAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_POSTS_RAILING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_POSTS_RAILING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RAFT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_RAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SINKING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_SINKING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_TOP_PLUGGING":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_TOP_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WEARING_COAT":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_WEARING_COAT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WELL_CAP":
                                lsbDetails = lsbDetails.OrderBy(m => m.EXEC_WELL_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }

                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_APP_CD_WORKS":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_COMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_APP_ROAD_WORK":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_APP_ROAD_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BEARINGS":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BEARINGS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BOTTOM_PLUGGING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BOTTOM_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_BRIDGE_COMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_BRIDGE_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_DECK_SLAB":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_DECK_SLAB).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FLOOR_PROTECTION":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_FLOOR_PROTECTION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_CAP":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PIER_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PIER_SHAFT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PIER_SHAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_POSTS_RAILING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_POSTS_RAILING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_RAFT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_RAFT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SINKING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_SINKING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_TOP_PLUGGING":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_TOP_PLUGGING).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WEARING_COAT":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_WEARING_COAT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_WELL_CAP":
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_WELL_CAP).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lsbDetails = lsbDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lsbDetails.Select(lsbList => new
                {
                    lsbList.EXEC_APP_CD_WORKS,
                    lsbList.EXEC_APP_COMPLETED,
                    lsbList.EXEC_APP_ROAD_WORK,
                    lsbList.EXEC_BEARINGS,
                    lsbList.EXEC_BOTTOM_PLUGGING,
                    lsbList.EXEC_BRIDGE_COMPLETED,
                    lsbList.EXEC_DECK_SLAB,
                    lsbList.EXEC_FLOOR_PROTECTION,
                    lsbList.EXEC_ISCOMPLETED,
                    lsbList.EXEC_PIER_CAP,
                    lsbList.EXEC_PIER_SHAFT,
                    lsbList.EXEC_POSTS_RAILING,
                    lsbList.EXEC_PROG_MONTH,
                    lsbList.EXEC_PROG_YEAR,
                    lsbList.EXEC_RAFT,
                    lsbList.EXEC_SINKING,
                    lsbList.EXEC_TOP_PLUGGING,
                    lsbList.EXEC_WEARING_COAT,
                    lsbList.EXEC_WELL_CAP,
                    lsbList.IMS_PR_ROAD_CODE
                }).ToArray();

                return gridData.Select(lsbList => new
                {
                    id = lsbList.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        lsbList.EXEC_PROG_MONTH == 1?"January":(lsbList.EXEC_PROG_MONTH == 2?"February":(lsbList.EXEC_PROG_MONTH == 3?"March":(lsbList.EXEC_PROG_MONTH == 4?"April":(lsbList.EXEC_PROG_MONTH == 5?"May":(lsbList.EXEC_PROG_MONTH == 6?"June":(lsbList.EXEC_PROG_MONTH == 7?"July":lsbList.EXEC_PROG_MONTH == 8?"August":(lsbList.EXEC_PROG_MONTH == 9?"September":(lsbList.EXEC_PROG_MONTH == 10?"October":(lsbList.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        lsbList.EXEC_PROG_YEAR.ToString(),
                        lsbList.EXEC_ISCOMPLETED.ToString() == "P"?"In Progress":"Completed",
                        lsbList.EXEC_RAFT.ToString(),
                        lsbList.EXEC_FLOOR_PROTECTION.ToString(),
                        lsbList.EXEC_SINKING.ToString(),
                        lsbList.EXEC_BOTTOM_PLUGGING.ToString(),
                        lsbList.EXEC_TOP_PLUGGING.ToString(),
                        lsbList.EXEC_WELL_CAP.ToString(),
                        lsbList.EXEC_PIER_SHAFT.ToString(),
                        lsbList.EXEC_PIER_CAP.ToString(),
                        lsbList.EXEC_BEARINGS.ToString(),
                        lsbList.EXEC_DECK_SLAB.ToString(),
                        lsbList.EXEC_WEARING_COAT.ToString(),
                        lsbList.EXEC_POSTS_RAILING.ToString(),
                        lsbList.EXEC_APP_ROAD_WORK.ToString(),
                        lsbList.EXEC_APP_CD_WORKS.ToString(),
                        lsbList.EXEC_BRIDGE_COMPLETED.ToString(),
                        lsbList.EXEC_APP_COMPLETED.ToString(),
                        (lsbList.EXEC_PROG_MONTH==monthCode && lsbList.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Physical LSB Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteLSBPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+lsbList.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+lsbList.EXEC_PROG_MONTH.ToString().Trim(),"Year="+lsbList.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the progress list of financial details
        /// </summary>
        /// <param name="page">no. of pages in list</param>
        /// <param name="rows">no. of rows per page</param>
        /// <param name="sidx">sort column index</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="proposalCode">list of particular id</param>
        /// <returns></returns>
        public Array GetFinancialProgressListForITNO(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                int? monthCode = 0;
                int? yearCode = 0;
                if ((dbContext.EXEC_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => (Int32?)y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => (Int32?)s.EXEC_PROG_MONTH));
                }

                var lstFinancialProgress = (from item in dbContext.EXEC_PROGRESS
                                            where item.IMS_PR_ROAD_CODE == proposalCode
                                            select new
                                            {
                                                item.EXEC_FINAL_PAYMENT_DATE,
                                                item.EXEC_FINAL_PAYMENT_FLAG,
                                                item.EXEC_PAYMENT_LASTMONTH,
                                                item.EXEC_PAYMENT_THISMONTH,
                                                item.EXEC_PROG_MONTH,
                                                item.EXEC_PROG_YEAR,
                                                item.EXEC_VALUEOFWORK_LASTMONTH,
                                                item.EXEC_VALUEOFWORK_THISMONTH,
                                                item.IMS_PR_ROAD_CODE
                                            });

                totalRecords = lstFinancialProgress.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_FINAL_PAYMENT_DATE":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_FINAL_PAYMENT_DATE).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FINAL_PAYMENT_FLAG":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_FINAL_PAYMENT_FLAG).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PAYMENT_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PAYMENT_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PROG_MONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROGRAM_YEAR":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_VALUEOFWORK_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderBy(m => m.EXEC_VALUEOFWORK_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_FINAL_PAYMENT_DATE":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_FINAL_PAYMENT_DATE).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_FINAL_PAYMENT_FLAG":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_FINAL_PAYMENT_FLAG).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PAYMENT_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PAYMENT_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PAYMENT_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_MONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROGRAM_YEAR":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_LASTMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_VALUEOFWORK_LASTMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_VALUEOFWORK_THISMONTH":
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_VALUEOFWORK_THISMONTH).ThenBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstFinancialProgress = lstFinancialProgress.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstFinancialProgress.Select(progressDetails => new
                {
                    progressDetails.EXEC_FINAL_PAYMENT_DATE,
                    progressDetails.EXEC_FINAL_PAYMENT_FLAG,
                    progressDetails.EXEC_PAYMENT_LASTMONTH,
                    progressDetails.EXEC_PAYMENT_THISMONTH,
                    progressDetails.EXEC_PROG_MONTH,
                    progressDetails.EXEC_PROG_YEAR,
                    progressDetails.EXEC_VALUEOFWORK_LASTMONTH,
                    progressDetails.EXEC_VALUEOFWORK_THISMONTH,
                    progressDetails.IMS_PR_ROAD_CODE
                }).ToArray();

                return gridData.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        m.EXEC_PROG_YEAR.ToString(),
                        m.EXEC_PROG_MONTH == 1?"January":(m.EXEC_PROG_MONTH == 2?"February":(m.EXEC_PROG_MONTH == 3?"March":(m.EXEC_PROG_MONTH == 4?"April":(m.EXEC_PROG_MONTH == 5?"May":(m.EXEC_PROG_MONTH == 6?"June":(m.EXEC_PROG_MONTH == 7?"July":m.EXEC_PROG_MONTH == 8?"August":(m.EXEC_PROG_MONTH == 9?"September":(m.EXEC_PROG_MONTH == 10?"October":(m.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        m.EXEC_VALUEOFWORK_LASTMONTH.ToString(),
                        m.EXEC_VALUEOFWORK_THISMONTH.ToString(),
                        (m.EXEC_VALUEOFWORK_LASTMONTH + m.EXEC_VALUEOFWORK_THISMONTH).ToString(),
                        m.EXEC_PAYMENT_LASTMONTH.ToString(),
                        m.EXEC_PAYMENT_THISMONTH.ToString(),
                        (m.EXEC_PAYMENT_LASTMONTH + m.EXEC_PAYMENT_THISMONTH).ToString(),
                        m.EXEC_FINAL_PAYMENT_FLAG=="Y"?"Yes":"No",
                        m.EXEC_FINAL_PAYMENT_DATE==null?"-":Convert.ToDateTime(m.EXEC_FINAL_PAYMENT_DATE).ToString("dd/MM/yyyy"),
                        (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Financial Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFinancialProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Add Remarks</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();
            }
            catch
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<int> GetNBCCPIUs()
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    var nbccPIUs = dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_STATE_CODE == 5 && m.MAST_AGENCY_CODE == 14 && m.MAST_ND_TYPE == "D").Select(m => m.ADMIN_ND_CODE).ToList();
                    return nbccPIUs;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }


        #endregion

        #region Habitation Details

        /// <summary>
        /// populates the availabe list of habitations to be mapped 
        /// </summary>
        /// <param name="roadCode">core network code</param>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no of rows</param>
        /// <param name="sidx">sort column</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">no. of totalRecords</param>
        /// <returns>list of availabel Habitation list</returns>
        public Array GetHabitationListToMap(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            totalRecords = 0;
            try
            {
                PLAN_ROAD masterRoad = dbContext.PLAN_ROAD.Find(roadCode);

                var lstHabitations = (from item in dbContext.IMS_BENEFITED_HABS
                                      where
                                      item.IMS_PR_ROAD_CODE == roadCode
                                      select new
                                      {
                                          item.MAST_HAB_CODE,
                                      });

                var mappedHabitations = (from item in dbContext.EXEC_HABITATIONS_CONNECTED
                                         where
                                         item.IMS_PR_ROAD_CODE == roadCode
                                         select item.MAST_HAB_CODE).Distinct().ToList();

                var listHab = (from item in lstHabitations
                               where !mappedHabitations.Contains(item.MAST_HAB_CODE)
                               select item.MAST_HAB_CODE).Distinct().ToList();


                //dynamic mappingList = null;

                var mappingList = (from item in dbContext.IMS_BENEFITED_HABS
                                   join habs in dbContext.MASTER_HABITATIONS on item.MAST_HAB_CODE equals habs.MAST_HAB_CODE
                                   join village in dbContext.MASTER_VILLAGE on habs.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                                   join habDetails in dbContext.MASTER_HABITATIONS_DETAILS on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                                   where item.IMS_PR_ROAD_CODE == roadCode
                                   && listHab.Contains(item.MAST_HAB_CODE)
                                   select new
                                   {
                                       item.MAST_HAB_CODE,
                                       habs.MAST_HAB_NAME,
                                       village.MAST_VILLAGE_NAME,
                                       habDetails.MAST_HAB_TOT_POP
                                   }).Distinct().ToList();

                totalRecords = mappingList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        mappingList = mappingList.OrderBy(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        mappingList = mappingList.OrderByDescending(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    mappingList = mappingList.OrderBy(x => x.MAST_HAB_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = mappingList.Select(habDetails => new
                {
                    habDetails.MAST_HAB_CODE,
                    habDetails.MAST_HAB_NAME,
                    habDetails.MAST_VILLAGE_NAME,
                    habDetails.MAST_HAB_TOT_POP
                }).ToArray();

                return result.Select(habDetails => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "HabCode =" + habDetails.MAST_HAB_CODE.ToString().Trim() }),
                    cell = new[] {
                        
                        //habDetails.MAST_HAB_CODE.ToString(),    
                        habDetails.MAST_HAB_NAME.ToString(),
                        habDetails.MAST_VILLAGE_NAME.ToString(),
                        habDetails.MAST_HAB_TOT_POP.ToString()
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the list of habitations for populating the grid data
        /// </summary>
        /// <param name="roadCode"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetHabitationList(int roadCode, string flag, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            var lastDateOfCurrentMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));

            int currMonth = DateTime.Now.Month;
            int currYear = DateTime.Now.Year;

            //Avinash For Physical road progress April Month Relaxation..
            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];    //10
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];   //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);

            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstHabitations = (from item in dbContext.EXEC_HABITATIONS_CONNECTED
                                      join habs in dbContext.MASTER_HABITATIONS on item.MAST_HAB_CODE equals habs.MAST_HAB_CODE
                                      join village in dbContext.MASTER_VILLAGE on habs.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                                      join habDetails in dbContext.MASTER_HABITATIONS_DETAILS on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                                      where (item.IMS_PR_ROAD_CODE == roadCode) && (item.EXEC_PROGRESS_DATE <= lastDateOfCurrentMonth)
                                      && (habDetails.MAST_YEAR == (PMGSYSession.Current.PMGSYScheme == 1 ? 2001 : 2011))
                                      select new
                                      {
                                          item.MAST_HAB_CODE,
                                          habs.MAST_HAB_NAME,
                                          village.MAST_VILLAGE_NAME,
                                          habDetails.MAST_HAB_TOT_POP,
                                          item.EXEC_HAB_CONNECTED_ORDER,
                                          item.MAST_CLUSTER_CODE,
                                          item.EXEC_PROGRESS_DATE
                                      }).Distinct().ToList();
                //.GroupBy(m => m.MAST_HAB_CODE).Where(g => g.Count() == 1 || g.Count() > 1)
                //.Select(g => g.FirstOrDefault());
                totalRecords = lstHabitations.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        lstHabitations = lstHabitations.OrderBy(x => x.EXEC_HAB_CONNECTED_ORDER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        lstHabitations = lstHabitations.OrderByDescending(x => x.EXEC_HAB_CONNECTED_ORDER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    lstHabitations = lstHabitations.OrderBy(x => x.EXEC_HAB_CONNECTED_ORDER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = lstHabitations.Select(habDetails => new
                {
                    habDetails.MAST_HAB_NAME,
                    habDetails.MAST_HAB_CODE,
                    habDetails.MAST_VILLAGE_NAME,
                    habDetails.MAST_HAB_TOT_POP,
                    habDetails.MAST_CLUSTER_CODE,
                    habDetails.EXEC_PROGRESS_DATE
                }).ToArray();

                //short roleCode = dbContext.UM_User_Master.Where(m => m.UserID == PMGSYSession.Current.UserId).Select(m => m.DefaultRoleID).FirstOrDefault();
                return result.Select(habDetails => new
                {
                    cell = new[]
                {
                    habDetails.MAST_HAB_NAME == null ? string.Empty:habDetails.MAST_HAB_NAME.ToString(),
                    habDetails.MAST_VILLAGE_NAME == null ? string.Empty:habDetails.MAST_VILLAGE_NAME.ToString(),
                    habDetails.MAST_HAB_TOT_POP == null ? "0": habDetails.MAST_HAB_TOT_POP.ToString(),
                    habDetails.EXEC_PROGRESS_DATE.ToString("dd/MM/yyyy"),
                    habDetails.MAST_CLUSTER_CODE == null ? "Cluster Not Allocated" : "Cluster : " + dbContext.MASTER_CLUSTER.Where(m=>m.MAST_CLUSTER_CODE == habDetails.MAST_CLUSTER_CODE).Select(m=>m.MAST_CLUSTER_NAME).FirstOrDefault() ,
                    //(habDetails.EXEC_PROGRESS_DATE.Month == currMonth && habDetails.EXEC_PROGRESS_DATE.Year == currYear) ? "<a href='#'title='Click here to delete habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='deleteHabitaion(\"" +   URLEncrypt.EncryptParameters1(new string [] { "HabCode="+habDetails.MAST_HAB_CODE.ToString() }) +"\"); return false;'>Delete</a>" : "-",
                    
                    ///((habDetails.EXEC_PROGRESS_DATE.Month == currMonth || habDetails.EXEC_PROGRESS_DATE.Month == currMonth - 1) && habDetails.EXEC_PROGRESS_DATE.Year == currYear) ? "<a href='#'title='Click here to delete habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='deleteHabitaion(\"" +   URLEncrypt.EncryptParameters1(new string [] { "HabCode="+habDetails.MAST_HAB_CODE.ToString() }) +"\"); return false;'>Delete</a>" : "-",
                    
                    //(
                    //    (DateTime.Now.Day <= 5) 
                    //        ? ((habDetails.EXEC_PROGRESS_DATE.Month == currMonth || currMonth == 1 ? (habDetails.EXEC_PROGRESS_DATE.Month == 12) : (habDetails.EXEC_PROGRESS_DATE.Month == currMonth - 1)) && 
                    //        ( currMonth == 1 ? (habDetails.EXEC_PROGRESS_DATE.Year == currYear - 1) : habDetails.EXEC_PROGRESS_DATE.Year == currYear)) 
                    //        : (habDetails.EXEC_PROGRESS_DATE.Month == currMonth && habDetails.EXEC_PROGRESS_DATE.Year == currYear)
                    //) 
                    //    ? "<a href='#'title='Click here to delete habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='deleteHabitaion(\"" +   URLEncrypt.EncryptParameters1(new string [] { "HabCode="+habDetails.MAST_HAB_CODE.ToString() }) +"\"); return false;'>Delete</a>" 
                    //    : "-",

                    currMonth==AprilMonthValue
                   ?
                    
                    (
                        (DateTime.Now.Day <= AprilMonthDayValue) 
                              ? ((habDetails.EXEC_PROGRESS_DATE.Month == currMonth || currMonth == 1 ? (habDetails.EXEC_PROGRESS_DATE.Month == 12) : (habDetails.EXEC_PROGRESS_DATE.Month == currMonth - 1)) && 
                               ( currMonth == 1 ? (habDetails.EXEC_PROGRESS_DATE.Year == currYear - 1) : habDetails.EXEC_PROGRESS_DATE.Year == currYear)) 
                              : (habDetails.EXEC_PROGRESS_DATE.Month == currMonth && habDetails.EXEC_PROGRESS_DATE.Year == currYear)
                    ) 
                        ? "<a href='#'title='Click here to delete habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='deleteHabitaion(\"" +   URLEncrypt.EncryptParameters1(new string [] { "HabCode="+habDetails.MAST_HAB_CODE.ToString() }) +"\"); return false;'>Delete</a>" 
                        : "-"    

                        :
                        (
                             (DateTime.Now.Day <= 5) 
                                     ? ((habDetails.EXEC_PROGRESS_DATE.Month == currMonth || currMonth == 1 ? (habDetails.EXEC_PROGRESS_DATE.Month == 12) : (habDetails.EXEC_PROGRESS_DATE.Month == currMonth - 1)) && 
                                      ( currMonth == 1 ? (habDetails.EXEC_PROGRESS_DATE.Year == currYear - 1) : habDetails.EXEC_PROGRESS_DATE.Year == currYear)) 
                                     : (habDetails.EXEC_PROGRESS_DATE.Month == currMonth && habDetails.EXEC_PROGRESS_DATE.Year == currYear)
                        ) 
                        ? "<a href='#'title='Click here to delete habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='deleteHabitaion(\"" +   URLEncrypt.EncryptParameters1(new string [] { "HabCode="+habDetails.MAST_HAB_CODE.ToString() }) +"\"); return false;'>Delete</a>" 
                        : "-"  
                }

                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public List<SelectListItem> PopulateClustersDAL(int PLAN_CN_ROAD_CODE, int IMS_PR_ROAD_CODE)
        {
            List<SelectListItem> HabList = new List<SelectListItem>();
            SelectListItem item = new SelectListItem();
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Find(Convert.ToInt32(IMS_PR_ROAD_CODE));

                var list = dbContext.IMS_GET_CLUSTERS_FOR_PROPOSALS(ims_sanctioned_projects.MAST_BLOCK_CODE, PLAN_CN_ROAD_CODE, PMGSYSession.Current.PMGSYScheme);

                var query = dbContext.EXEC_HABITATIONS_CONNECTED.Where(x => x.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(x => x.MAST_CLUSTER_CODE).ToList();

                var clusters = (from itm in list
                                where (!query.Contains(itm.MAST_CLUSTER_CODE))
                                select new
                                {
                                    itm.MAST_CLUSTER_CODE,
                                    itm.MAST_CLUSTER_NAME
                                }).ToList();

                HabList = new SelectList(clusters.ToList(), "MAST_CLUSTER_CODE", "MAST_CLUSTER_NAME").ToList();
                return HabList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// maps the habitations to the current road
        /// </summary>
        /// <param name="encryptedHabCodes">encrypted habitation codes</param>
        /// <param name="roadName">core network code</param>
        /// <returns></returns>
        public bool MapHabitationToRoad(string encryptedHabCodes, string roadName, string MappingDate)
        {

            PMGSYEntities dbContext = new PMGSYEntities();
            // Changes START here 
            string AprilMonthDay = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH_DAY"];    //10
            int AprilMonthDayValue = Convert.ToInt16(AprilMonthDay);

            string AprilMonth = ConfigurationManager.AppSettings["PHYSICAL_ROAD_PROGRESS_APRIL_MONTH"];   //4
            int AprilMonthValue = Convert.ToInt16(AprilMonth);
            int allowedMonth = (DateTime.Now.Month == AprilMonthValue && DateTime.Now.Day <= AprilMonthDayValue) ? (DateTime.Now.Month - 1) : DateTime.Now.Month;
            int allowedYear = DateTime.Now.Year;
            // Changes Ended here by saurabh
            try
            {
                // Changes START here 
                DateTime FinanDate = DateTime.Now; // change
                int FinancialYear = FinanDate.Month >= 4 ? FinanDate.Year : FinanDate.Year - 1; // change
                DateTime Conditional_Date_Value = new DateTime(FinancialYear , 3, 31, 00, 00, 00);  // change
                int CondFinanYear = FinancialYear;
                //DateTime TestDate = new DateTime(2023, 4, 6, 00, 00, 00);  // change commentable
                //MappingDate = TestDate.ToString();  // change commentable
                Nullable<DateTime> ProgressDate = new DateTime();
                if (MappingDate != null)
                {
                    ProgressDate = Convert.ToDateTime(MappingDate);
                }

                Nullable<DateTime> Entry_Date = new DateTime();
                if (ProgressDate != null)
                {
                    Entry_Date = (ProgressDate.Value.Day <= AprilMonthDayValue && ProgressDate.Value.Month == AprilMonthValue)
                            ? Conditional_Date_Value : ProgressDate;
                }
                else
                {
                    Entry_Date = DateTime.Now;
                }
               
                // Changes Ended here by saurabh

                int exec_hab_connected_order = 0;
                String[] habCodes = null;
                int roadCode = Convert.ToInt32(roadName);
                int habCode = 0;

                habCodes = encryptedHabCodes.Split(',');
                if (habCodes.Count() == 0)
                {
                    return false;
                }
                int i = 0;

                exec_hab_connected_order = dbContext.EXEC_HABITATIONS_CONNECTED.Where(x => x.IMS_PR_ROAD_CODE == roadCode).Any() ? dbContext.EXEC_HABITATIONS_CONNECTED.Where(x => x.IMS_PR_ROAD_CODE == roadCode).Select(x => x.EXEC_HAB_CONNECTED_ORDER).Max() : 0;

                foreach (String item in habCodes)
                {
                    //encryptedParameters = null;
                    //encryptedParameters = item.Split('/');
                    //decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    //habCode = Convert.ToInt32(decryptedParameters["HabCode"].ToString());
                    i++;
                    exec_hab_connected_order = (exec_hab_connected_order > 0) ? (exec_hab_connected_order + 1) : i;

                    habCode = Convert.ToInt32(item);

                    EXEC_HABITATIONS_CONNECTED exec_habitations_connected = new EXEC_HABITATIONS_CONNECTED();

                    exec_habitations_connected.IMS_PR_ROAD_CODE = roadCode;
                    // exec_habitations_connected.EXEC_PROGRESS_DATE = Convert.ToDateTime(MappingDate);
                    exec_habitations_connected.EXEC_PROGRESS_DATE = Convert.ToDateTime(Entry_Date);   // Changes  here by saurabh
                    exec_habitations_connected.MAST_HAB_CODE = habCode;
                    exec_habitations_connected.EXEC_HAB_CONNECTED_ORDER = exec_hab_connected_order;
                    exec_habitations_connected.REGISTERD_USER = 0;

                    dbContext.EXEC_HABITATIONS_CONNECTED.Add(exec_habitations_connected);
                    dbContext.SaveChanges();
                }
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                return false;
            }
            catch (UpdateException ex)
            {
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Get Habitations for Mapping
        /// Populate only those Habitations which are not mapped
        /// </summary>
        /// <param name="selectedState"></param>
        /// <param name="month"></param>
        /// <param name="year"></param>
        /// <returns></returns>
        public List<SelectListItem> GetHabitationsForMappingDAL(int roadCode)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                List<SelectListItem> lstHabitation = new List<SelectListItem>();
                List<int> filterList = new List<int>();

                var lstHabitations = (from item in dbContext.IMS_BENEFITED_HABS
                                      where
                                      item.IMS_PR_ROAD_CODE == roadCode && item.HAB_INCLUDED == "Y"
                                      select new
                                      {
                                          item.MAST_HAB_CODE,
                                      });

                var mappedHabitations = (from item in dbContext.EXEC_HABITATIONS_CONNECTED
                                         where
                                         item.IMS_PR_ROAD_CODE == roadCode
                                         select item.MAST_HAB_CODE).Distinct().ToList();

                var query = (from item in lstHabitations
                             join hab in dbContext.MASTER_HABITATIONS on item.MAST_HAB_CODE equals hab.MAST_HAB_CODE
                             where !mappedHabitations.Contains(item.MAST_HAB_CODE)
                             select new
                             {
                                 Value = item.MAST_HAB_CODE,
                                 Text = hab.MAST_HAB_NAME
                             }).Distinct().OrderBy(x => x.Value).ToList();

                SelectListItem selectItem;
                lstHabitation = new List<SelectListItem>();
                foreach (var data in query)
                {
                    selectItem = new SelectListItem();
                    selectItem.Text = data.Text;
                    selectItem.Value = data.Value.ToString();
                    lstHabitation.Add(selectItem);
                }
                ////}
                return lstHabitation;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of habitations for populating the grid data
        /// </summary>
        /// <param name="roadCode"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetMappedHabitationList(int roadCode, string flag, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                List<HabitationList> lstHabitations = null;

                ///For Road Progress = Completed if EXEC_HABITATIONS_CONNECTED is 
                bool isCompleted = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a => a.IMS_PR_ROAD_CODE == a.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any();

                lstHabitations = (from item in dbContext.EXEC_HABITATIONS_CONNECTED//lstHabs
                                  join habs in dbContext.MASTER_HABITATIONS on item.MAST_HAB_CODE equals habs.MAST_HAB_CODE
                                  join village in dbContext.MASTER_VILLAGE on habs.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                                  join habDetails in dbContext.MASTER_HABITATIONS_DETAILS on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                                  where item.IMS_PR_ROAD_CODE == roadCode
                                  select new HabitationList
                                  {
                                      MAST_HAB_CODE = item.MAST_HAB_CODE,
                                      MAST_HAB_NAME = habs.MAST_HAB_NAME,
                                      MAST_VILLAGE_NAME = village.MAST_VILLAGE_NAME,
                                      MAST_HAB_TOT_POP = habDetails.MAST_HAB_TOT_POP
                                  }).Distinct().ToList();

                if (isCompleted && lstHabitations.Count == 0)
                {
                    lstHabitations = (from item in dbContext.IMS_BENEFITED_HABS//lstHabs
                                      join habs in dbContext.MASTER_HABITATIONS on item.MAST_HAB_CODE equals habs.MAST_HAB_CODE
                                      join village in dbContext.MASTER_VILLAGE on habs.MAST_VILLAGE_CODE equals village.MAST_VILLAGE_CODE
                                      join habDetails in dbContext.MASTER_HABITATIONS_DETAILS on item.MAST_HAB_CODE equals habDetails.MAST_HAB_CODE
                                      where item.IMS_PR_ROAD_CODE == roadCode
                                      select new HabitationList
                                      {
                                          MAST_HAB_CODE = item.MAST_HAB_CODE,
                                          MAST_HAB_NAME = habs.MAST_HAB_NAME,
                                          MAST_VILLAGE_NAME = village.MAST_VILLAGE_NAME,
                                          MAST_HAB_TOT_POP = habDetails.MAST_HAB_TOT_POP
                                      }).Distinct().ToList();
                }

                #region Code to set Timeout to 0
                //var objectContextAdapter = dbContext as IObjectContextAdapter;
                //if (objectContextAdapter != null)
                //    objectContextAdapter.ObjectContext.CommandTimeout = 0;
                #endregion

                totalRecords = lstHabitations.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        lstHabitations = lstHabitations.OrderBy(x => x.MAST_HAB_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        lstHabitations = lstHabitations.OrderByDescending(x => x.MAST_HAB_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    lstHabitations = lstHabitations.OrderBy(x => x.MAST_HAB_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = lstHabitations.Select(habDetails => new
                {
                    habDetails.MAST_HAB_NAME,
                    habDetails.MAST_HAB_CODE,
                    habDetails.MAST_VILLAGE_NAME,
                    habDetails.MAST_HAB_TOT_POP,
                }).ToArray();

                //short roleCode = dbContext.UM_User_Master.Where(m => m.UserID == PMGSYSession.Current.UserId).Select(m => m.DefaultRoleID).FirstOrDefault();
                return result.Select(habDetails => new
                {
                    cell = new[]
                {
                    habDetails.MAST_HAB_NAME == null ? string.Empty:habDetails.MAST_HAB_NAME.ToString(),
                    habDetails.MAST_VILLAGE_NAME == null ? string.Empty:habDetails.MAST_VILLAGE_NAME.ToString(),
                    habDetails.MAST_HAB_TOT_POP == null ? "0": habDetails.MAST_HAB_TOT_POP.ToString(),
                }

                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// maps the habitations to the current road
        /// </summary>
        /// <param name="encryptedHabCodes">encrypted habitation codes</param>
        /// <param name="roadName">core network code</param>
        /// <returns></returns>
        public bool MapClusterToRoad(int roadCode, int clusterCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                int exec_hab_connected_order = 0;
                //String[] habCodes = null;
                int habCode = 0;

                //habCodes = encryptedHabCodes.Split(',');
                //if (habCodes.Count() == 0)
                //{
                //    return false;
                //}

                int i = 0;
                var habitations = dbContext.MASTER_CLUSTER_HABITATIONS.Where(x => x.MAST_CLUSTER_CODE == clusterCode).Select(x => x.MAST_HAB_CODE).ToList();
                exec_hab_connected_order = dbContext.EXEC_HABITATIONS_CONNECTED.Where(x => x.IMS_PR_ROAD_CODE == roadCode).Any() ? dbContext.EXEC_HABITATIONS_CONNECTED.Where(x => x.IMS_PR_ROAD_CODE == roadCode).Select(x => x.EXEC_HAB_CONNECTED_ORDER).Max() : 0;

                if (habitations.Count > 0)
                {
                    using (TransactionScope ts = new TransactionScope())
                    {
                        foreach (var item in habitations)
                        {
                            //System.Threading.Thread.Sleep(100);
                            //encryptedParameters = null;
                            //encryptedParameters = item.Split('/');
                            //decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                            //habCode = Convert.ToInt32(decryptedParameters["HabCode"].ToString());
                            i++;
                            exec_hab_connected_order = (exec_hab_connected_order > 0) ? (exec_hab_connected_order + 1) : i;

                            habCode = Convert.ToInt32(item);

                            if (!dbContext.EXEC_HABITATIONS_CONNECTED.Where(x => x.IMS_PR_ROAD_CODE == roadCode && x.MAST_HAB_CODE == habCode).Any())
                            {
                                EXEC_HABITATIONS_CONNECTED exec_habitations_connected = new EXEC_HABITATIONS_CONNECTED();

                                exec_habitations_connected.IMS_PR_ROAD_CODE = roadCode;
                                exec_habitations_connected.MAST_CLUSTER_CODE = clusterCode;
                                exec_habitations_connected.EXEC_PROGRESS_DATE = DateTime.Now;
                                exec_habitations_connected.MAST_HAB_CODE = habCode;
                                exec_habitations_connected.EXEC_HAB_CONNECTED_ORDER = exec_hab_connected_order;
                                exec_habitations_connected.REGISTERD_USER = 0;

                                dbContext.EXEC_HABITATIONS_CONNECTED.Add(exec_habitations_connected);
                                dbContext.SaveChanges();
                            }
                        }
                        ts.Complete();
                    }
                }
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                return false;
            }
            catch (UpdateException ex)
            {
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteHabitaion(int HabCode, out SelectListItem deleted)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope scope = new TransactionScope())
                {

                    EXEC_HABITATIONS_CONNECTED habconected = dbContext.EXEC_HABITATIONS_CONNECTED.Where(s => s.MAST_HAB_CODE == HabCode).FirstOrDefault();

                    EXEC_HABITATIONS_CONNECTED habDeleted = dbContext.EXEC_HABITATIONS_CONNECTED.Remove(habconected);
                    string habcodestring = habDeleted.MAST_HAB_CODE.ToString();
                    //GetHabitationsForMappingDAL(habDeleted.IMS_PR_ROAD_CODE).Where(s => s.Value == habcodestring).FirstOrDefault();
                    var deletedHab = dbContext.MASTER_HABITATIONS.Where(s => s.MAST_HAB_CODE == habDeleted.MAST_HAB_CODE).SingleOrDefault();

                    deleted = new SelectListItem { Value = habcodestring, Text = deletedHab.MAST_HAB_NAME };
                    dbContext.SaveChanges();
                    scope.Complete();

                    if (habDeleted == null)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }

            }
            catch (Exception ex)
            {
                deleted = null;
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }




        #endregion Habitation Details Ends

        #region Road Safety
        /// <summary>
        /// save the Road Safety details
        /// </summary>
        /// <param name="cdWorksModel">model containing the data</param>
        /// <param name="message">response message</param>
        /// <returns>status of operation along with response message</returns>
        /// 
        public bool AddRoadSafetyDetails(RoadSafetyViewModel model, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                int agreementCode = 0;

                if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == model.prRoadCode && m.TEND_AGREEMENT_STATUS == "P"))
                {
                    agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == model.prRoadCode && m.TEND_AGREEMENT_STATUS == "P").OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                }
                else
                {
                    agreementCode = dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == model.prRoadCode).OrderBy(m => m.TEND_AGREEMENT_ID).Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault();
                }

                TEND_AGREEMENT_MASTER masterAgreement = dbContext.TEND_AGREEMENT_MASTER.Find(agreementCode);
                var AgreementDate = new CommonFunctions().GetDateTimeToString(masterAgreement.TEND_DATE_OF_AGREEMENT);
                //masterAgreement.TEND_DATE_OF_AGREEMENT
                if (Convert.ToDateTime(model.auditDate) > DateTime.Today || Convert.ToDateTime(model.auditDate) < new DateTime(2000, 1, 1))
                {
                    message = "Audit Date must be between Agreement Date and current date";
                    return false;
                }

                EXEC_SAFETY_INSP exec_safety_insp = new EXEC_SAFETY_INSP();
                exec_safety_insp.ROAD_SAFETY_CODE = dbContext.EXEC_SAFETY_INSP.Any() == false ? 1 : (dbContext.EXEC_SAFETY_INSP.Max(s => s.ROAD_SAFETY_CODE) + 1);
                exec_safety_insp.IMS_PR_ROAD_CODE = model.prRoadCode;
                exec_safety_insp.SAFETY_STAGE = model.stageCode;
                exec_safety_insp.CONDUCTED_BY = model.isTSC == true && model.isPIC == false && model.isPIURRNMU == false ? 1
                                               : model.isTSC == false && model.isPIC == true && model.isPIURRNMU == false ? 2
                                               : model.isTSC == false && model.isPIC == false && model.isPIURRNMU == true ? 3
                                               : model.isTSC == true && model.isPIC == true && model.isPIURRNMU == false ? 4
                                               : model.isTSC == false && model.isPIC == true && model.isPIURRNMU == true ? 5
                                               : model.isTSC == true && model.isPIC == false && model.isPIURRNMU == true ? 6
                                               : 7;

                exec_safety_insp.CONDUCTED_DATE = DateTime.Parse(model.auditDate);
                exec_safety_insp.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                exec_safety_insp.USERID = PMGSYSession.Current.UserId;
                dbContext.EXEC_SAFETY_INSP.Add(exec_safety_insp);
                dbContext.SaveChanges();
                message = "Road Safety Details Added Successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddRoadSafetyDetails()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public Array GetRoadSafetyListDAL(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                List<EXEC_SAFETY_INSP> insplst = dbContext.EXEC_SAFETY_INSP.Where(i => i.IMS_PR_ROAD_CODE == roadCode).ToList();
                var result = insplst.Select(item => new
                {
                    Stage = item.SAFETY_STAGE,
                    RoadSafety = item.CONDUCTED_BY,
                    CondctedDate = item.CONDUCTED_DATE
                }).ToArray();
                totalRecords = insplst.Count;
                //short roleCode = dbContext.UM_User_Master.Where(m => m.UserID == PMGSYSession.Current.UserId).Select(m => m.DefaultRoleID).FirstOrDefault();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "ConductedDate":
                                result = result.OrderBy(s => s.CondctedDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToArray();
                                break;
                            default:
                                result = result.OrderBy(s => s.CondctedDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToArray();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "ConductedDate":
                                result = result.OrderByDescending(s => s.CondctedDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToArray();
                                break;
                            default:
                                result = result.OrderByDescending(s => s.CondctedDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToArray();
                                break;
                        }
                    }
                }
                return result.Select(item => new
                {
                    cell = new[]
                    {
                        item.Stage == "D" ? "Design Stage" : item.Stage == "P" ? "During Construction Stage" : item.Stage == "C" ? "Completion Stage" : "-",
                        item.RoadSafety==1?"TSC"
                                   :item.RoadSafety==2?"PIC"
                                   :item.RoadSafety==3?"PIU/RRNMU"
                                   :item.RoadSafety==4?"TSC <br/> PIC"
                                   :item.RoadSafety==5?"PIC <br/>PIU/RRNMU"
                                   :item.RoadSafety==6?"TSC <br/>PIU/RRNMU"
                                   :item.RoadSafety==7?"TSC <br/>PIC <br/>PIU/RRNMU"
                                   :"-",
                        item.CondctedDate.ToString("dd/MM/yyyy")
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetMappedHabitationListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion Road Safety Ends

        #region Exec Tech File Upload
        /// <summary>
        /// For Listing the Images
        /// </summary>
        /// <param name="page">no. of pages</param>
        /// <param name="rows">no. of rows</param>
        /// <param name="sidx">sort column name</param>
        /// <param name="sord">sort order</param>
        /// <param name="totalRecords">total no. of records</param>
        /// <param name="IMS_PR_ROAD_CODE">id of proposal</param>
        /// <returns></returns>
        public Array GetExecTechFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<EXEC_TECH_FILES> listExecutionFiles = dbContext.EXEC_TECH_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE /*&& p.EXEC_FILE_TYPE == 0*/).ToList();
                IQueryable<EXEC_TECH_FILES> query = listExecutionFiles.AsQueryable<EXEC_TECH_FILES>();
                totalRecords = listExecutionFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                //string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                string VirtualDirectoryUrl = Path.Combine(ConfigurationManager.AppSettings["EXEC_TECH_PRORESS_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");
                //string PhysicalPath = ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD"];
                string PhysicalPath = ConfigurationManager.AppSettings["EXEC_TECH_PROGRESS_FILE_UPLOAD"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.EXEC_FILE_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {   
                                   // @"file/://"  + Path.Combine(PhysicalPath, fileDetails.IMS_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    Path.Combine(VirtualDirectoryUrl, fileDetails.EXEC_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    //fileDetails.CHAINAGE.ToString(),
                                    fileDetails.EXEC_FILE_DESC,
                                    dbContext.MASTER_EXECUTION_ITEM.Where(m=>m.MAST_HEAD_CODE == fileDetails.EXEC_STAGE).Select(m=>m.MAST_HEAD_DESC).FirstOrDefault(),
                                    fileDetails.REMARKS,
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadExecTechImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                    "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('" + fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.EXEC_FILE_NAME + "'); return false;>Delete</a>",                                    
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.EXEC_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.EXEC_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetExecTechFilesListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string AddExecTechFileUploadDetailsDAL(List<EXEC_TECH_FILES> lst_execution_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;
                foreach (EXEC_TECH_FILES fileModel in lst_execution_files)
                {
                    if (dbContext.EXEC_TECH_FILES.Count() == 0)
                    {
                        MaxID = 0;
                    }
                    else
                    {
                        if (dbContext.EXEC_TECH_FILES.Where(s => s.IMS_PR_ROAD_CODE == fileModel.IMS_PR_ROAD_CODE).Any())
                        {
                            MaxID = (from c in dbContext.EXEC_TECH_FILES.Where(s => s.IMS_PR_ROAD_CODE == fileModel.IMS_PR_ROAD_CODE) select (Int32?)c.EXEC_FILE_ID ?? 0).Max();
                        }
                        else
                        {
                            MaxID = 0;
                        }
                    }
                    ++MaxID;
                    //fileModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    //fileModel.USERID = PMGSYSession.Current.UserId; 
                    fileModel.EXEC_FILE_ID = Convert.ToInt32(MaxID);
                    dbContext.EXEC_TECH_FILES.Add(fileModel);
                }
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                ErrorLog.LogError(ex, "AddExecTechFileUploadDetailsDAL().DbUpdateException");
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "AddExecTechFileUploadDetailsDAL().OptimisticConcurrencyException");
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddExecTechFileUploadDetailsDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// update image Details
        /// </summary>
        /// <param name="execution_files">model data containing the updated file details</param>
        /// <returns></returns>
        public string UpdateExecTechImageDetailsDAL(EXEC_TECH_FILES execution_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                EXEC_TECH_FILES db_execution_files = dbContext.EXEC_TECH_FILES.Where(
                    a => a.EXEC_FILE_ID == execution_files.EXEC_FILE_ID &&
                    a.IMS_PR_ROAD_CODE == execution_files.IMS_PR_ROAD_CODE
                    ).FirstOrDefault();

                db_execution_files.EXEC_FILE_DESC = execution_files.EXEC_FILE_DESC;
                db_execution_files.REMARKS = execution_files.REMARKS;

                dbContext.Entry(db_execution_files).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                ErrorLog.LogError(ex, "UpdateImageDetailsDAL().DbUpdateException");
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "UpdateImageDetailsDAL().OptimisticConcurrencyException");
                return ("An Error Occurred While Your Processing Request.");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateImageDetailsDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete Image Files
        /// </summary>
        /// <param name="execution_files">file along with details</param>
        /// <returns></returns>
        public string DeleteExecTechFileDetailsDAL(EXEC_TECH_FILES execution_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                EXEC_TECH_FILES obj_execution_files = dbContext.EXEC_TECH_FILES.Where(
                    a => a.IMS_PR_ROAD_CODE == execution_files.IMS_PR_ROAD_CODE &&
                    a.EXEC_FILE_ID == execution_files.EXEC_FILE_ID
                     &&
                    a.EXEC_FILE_NAME == execution_files.EXEC_FILE_NAME).FirstOrDefault();

                dbContext.EXEC_TECH_FILES.Remove(obj_execution_files);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteExecTechFileDetailsDAL()");
                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion

        #region Execution Progress MRD

        /// <summary>
        /// save the Physical Road details
        /// </summary>
        /// <param name="progressModel">model containing the physical road details</param>
        /// <param name="message">returns the status of save operation</param>
        /// <returns></returns>
        public bool AddPhysicalProgressDetailsMRDDAL(ExecutionRoadStatusViewModelMRD progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            //List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = null;
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    if (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE && m.EXEC_PROG_YEAR == progressModel.EXEC_PROG_YEAR && m.EXEC_PROG_MONTH == progressModel.EXEC_PROG_MONTH))
                    {
                        message = "Physical Road Progress Details Already Exist.";
                        return false;
                    }
                    else
                    {
                        EXEC_ROADS_MONTHLY_STATUS masterRoadProgress = new EXEC_ROADS_MONTHLY_STATUS();
                        masterRoadProgress.EXEC_BASE_COURSE = progressModel.EXEC_BASE_COURSE;
                        masterRoadProgress.EXEC_CD_WORKS = progressModel.EXEC_CD_WORKS;
                        masterRoadProgress.EXEC_COMPLETED = progressModel.EXEC_COMPLETED;
                        masterRoadProgress.EXEC_EARTHWORK_SUBGRADE = progressModel.EXEC_EARTHWORK_SUBGRADE;
                        masterRoadProgress.EXEC_ISCOMPLETED = progressModel.EXEC_ISCOMPLETED;
                        masterRoadProgress.EXEC_LSB_WORKS = progressModel.EXEC_LSB_WORKS;
                        masterRoadProgress.EXEC_MISCELANEOUS = progressModel.EXEC_MISCELANEOUS;
                        masterRoadProgress.EXEC_PREPARATORY_WORK = progressModel.EXEC_PREPARATORY_WORK;
                        masterRoadProgress.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                        masterRoadProgress.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;
                        masterRoadProgress.EXEC_SIGNS_STONES = progressModel.EXEC_SIGNS_STONES;
                        masterRoadProgress.EXEC_SUBBASE_PREPRATION = progressModel.EXEC_SUBBASE_PREPRATION;
                        masterRoadProgress.EXEC_SURFACE_COURSE = progressModel.EXEC_SURFACE_COURSE;
                        masterRoadProgress.IMS_PR_ROAD_CODE = progressModel.IMS_PR_ROAD_CODE;
                        if (progressModel.EXEC_ISCOMPLETED == "C")
                        {
                            masterRoadProgress.EXEC_COMPLETION_DATE = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                        }
                        else
                        {
                            masterRoadProgress.EXEC_COMPLETION_DATE = null;
                        }
                        masterRoadProgress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        masterRoadProgress.USERID = PMGSYSession.Current.UserId;
                        dbContext.EXEC_ROADS_MONTHLY_STATUS.Add(masterRoadProgress);
                        dbContext.SaveChanges();

                        if (masterRoadProgress.EXEC_ISCOMPLETED == "C")
                        {
                            IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                            if (imsMaster != null)
                            {
                                //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                                //{
                                //    imsMaster.IMS_ISCOMPLETED = "C";
                                //}
                                ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                                imsMaster.IMS_ISCOMPLETED = "C";
                                imsMaster.IMS_ENTRY_DATE_PHYSICAL = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate); ;
                                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                imsMaster.USERID = PMGSYSession.Current.UserId;
                                dbContext.SaveChanges();
                            }
                            if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                            {
                                List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                                 join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                                 where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                                 details.TEND_AGREEMENT_STATUS == "P" &&
                                                                                 master.TEND_AGREEMENT_TYPE == "C"
                                                                                 select details).ToList<TEND_AGREEMENT_DETAIL>();

                                lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m => { m.TEND_AGREEMENT_STATUS = "C"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; m.USERID = PMGSYSession.Current.UserId; });
                                dbContext.SaveChanges();

                                foreach (var item in lstAggrementCodes)
                                {
                                    if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "P";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "W";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).All(m => m.TEND_AGREEMENT_STATUS == "C"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                        tendMaster.TEND_AGREEMENT_STATUS = "C";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }

                                    //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                                }
                            }
                        }
                        else if (masterRoadProgress.EXEC_ISCOMPLETED == "P")
                        {
                            IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                            if (imsMaster != null)
                            {
                                //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                                //{
                                //    imsMaster.IMS_ISCOMPLETED = "P";
                                //}
                                ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                                imsMaster.IMS_ISCOMPLETED = "P";
                                imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                imsMaster.USERID = PMGSYSession.Current.UserId;
                                dbContext.SaveChanges();
                            }

                            if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                            {
                                List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                                 join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                                 where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                                 (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") &&
                                                                                 master.TEND_AGREEMENT_TYPE == "C"
                                                                                 select details).ToList<TEND_AGREEMENT_DETAIL>();

                                lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m => { m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; m.USERID = PMGSYSession.Current.UserId; });
                                dbContext.SaveChanges();

                                foreach (var item in lstAggrementCodes)
                                {
                                    if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "P";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                        tendMaster.TEND_AGREEMENT_STATUS = "W";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).All(m => m.TEND_AGREEMENT_STATUS == "C"))
                                    {
                                        TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                        tendMaster.TEND_AGREEMENT_STATUS = "C";
                                        tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                        tendMaster.USERID = PMGSYSession.Current.UserId;
                                        dbContext.SaveChanges();
                                        continue;
                                    }
                                    //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                                }
                            }
                        }
                        else
                        {
                            IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                            if (imsMaster != null)
                            {
                                //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                                //{
                                //    imsMaster.IMS_ISCOMPLETED = masterRoadProgress.EXEC_ISCOMPLETED;
                                //}
                                ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                                imsMaster.IMS_ISCOMPLETED = masterRoadProgress.EXEC_ISCOMPLETED;
                                imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                imsMaster.USERID = PMGSYSession.Current.UserId;
                                dbContext.SaveChanges();
                            }
                        }
                        ts.Complete();
                        //foreach (var item in lstAggrementCodes)
                        //{
                        //    objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                        //}

                        message = "Physical Road Progress details added successfully";
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "AddPhysicalProgressDetails().DAL");
                    message = ex.Message;
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// return the grid data of execution details
        /// </summary>
        /// <param name="yearCode"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="packageCode"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetExecutionListMRDDAL(int yearCode, int districtCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            int adminNdCode = 0;
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);
            bool flag = false;
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                //adminNdCode = 

                var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                    join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                    join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                    where
                                    master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                    item.IMS_SANCTIONED == "Y" &&
                                    master.TEND_AGREEMENT_TYPE == "C" &&
                                    (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                    (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                    (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                    (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                        //(item.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode) &&
                                    item.MAST_DISTRICT_CODE == districtCode &&
                                    item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                    && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                    && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)

                                    select new
                                    {
                                        block.MAST_BLOCK_NAME,
                                        item.IMS_PACKAGE_ID,
                                        item.IMS_BATCH,
                                        item.IMS_PR_ROAD_CODE,
                                        item.IMS_ROAD_NAME,
                                        item.IMS_BRIDGE_NAME,
                                        year.MAST_YEAR_TEXT,
                                        item.IMS_LOCK_STATUS,
                                        item.IMS_NO_OF_CDWORKS,
                                        item.IMS_NO_OF_BRIDGEWRKS,
                                        item.IMS_PROPOSAL_TYPE,
                                        ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                        //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P"?(item.IMS_SANCTIONED_PAV_AMT+item.IMS_SANCTIONED_CD_AMT+item.IMS_SANCTIONED_PW_AMT+
                                        //            item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                        //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                        ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                    : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                        //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                        ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                        MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                        EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                        EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_NO_OF_CDWORKS,
                    executionDetails.IMS_NO_OF_BRIDGEWRKS,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_LOCK_STATUS,
                    executionDetails.ROAD_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_BRIDGE_NAME,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.EXEC_ISCOMPLETED,
                    flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                        ///Add/Edit InProgress Roads
                        //!(PMGSYSession.Current.RoleCode == 25) ? "-" 
                        //  : (m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                        //                                : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")),

                        !(PMGSYSession.Current.RoleCode == 25) ? "-" 
                          : (m.IMS_PROPOSAL_TYPE == "P" ? ("<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                                                        : ("<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")),

                                                   ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Road Safety Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        
                        "<a href='#' title='Click here to view Execution Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>View Execution Details</a>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetExecutionListMRDDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of details of Road Physical Progress 
        /// </summary>
        /// <param name="page">indicates number of pages of list</param>
        /// <param name="rows">indicates no. of rows of each page of list</param>
        /// <param name="sidx">indicates the sort index(on which column sorting is applied)</param>
        /// <param name="sord">indicates sort order(either asc or desc)</param>
        /// <param name="totalRecords">indicates total records</param>
        /// <returns></returns>
        public Array GetRoadPhysicalProgressListMRDDAL(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int currMonth = DateTime.Now.Month;
            int currYear = DateTime.Now.Year;

            int yearCode = 0;
            int monthCode = 0;
            if ((dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
            {
                yearCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Max(y => y.EXEC_PROG_YEAR));
                monthCode = (dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode).Max(s => s.EXEC_PROG_MONTH));
            }
            try
            {
                var lstRoadDetails = (from item in dbContext.EXEC_ROADS_MONTHLY_STATUS
                                      where item.IMS_PR_ROAD_CODE == proposalCode
                                      select new
                                      {
                                          item.EXEC_BASE_COURSE,
                                          item.EXEC_CD_WORKS,
                                          item.EXEC_COMPLETED,
                                          item.EXEC_EARTHWORK_SUBGRADE,
                                          item.EXEC_ISCOMPLETED,
                                          item.EXEC_LSB_WORKS,
                                          item.EXEC_MISCELANEOUS,
                                          item.EXEC_PREPARATORY_WORK,
                                          item.EXEC_PROG_MONTH,
                                          item.EXEC_PROG_YEAR,
                                          item.EXEC_SIGNS_STONES,
                                          item.EXEC_SUBBASE_PREPRATION,
                                          item.EXEC_SURFACE_COURSE,
                                          item.IMS_PR_ROAD_CODE,
                                          item.EXEC_COMPLETION_DATE,
                                      });


                totalRecords = lstRoadDetails.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderBy(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "EXEC_BASE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_BASE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_CD_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_CD_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_COMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_COMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_EARTHWORK_SUBGRADE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_EARTHWORK_SUBGRADE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_ISCOMPLETED":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_ISCOMPLETED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_LSB_WORKS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_LSB_WORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_MISCELANEOUS":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_MISCELANEOUS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PREPARATORY_WORK":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PREPARATORY_WORK).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_MONTH":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_PROG_YEAR":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SIGNS_STONES":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SIGNS_STONES).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SUBBASE_PREPRATION":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SUBBASE_PREPRATION).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "EXEC_SURFACE_COURSE":
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_SURFACE_COURSE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;

                        }
                        //lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    lstRoadDetails = lstRoadDetails.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var gridData = lstRoadDetails.Select(physicalDetails => new
                {
                    physicalDetails.EXEC_BASE_COURSE,
                    physicalDetails.EXEC_CD_WORKS,
                    physicalDetails.EXEC_COMPLETED,
                    physicalDetails.EXEC_EARTHWORK_SUBGRADE,
                    physicalDetails.EXEC_ISCOMPLETED,
                    physicalDetails.EXEC_LSB_WORKS,
                    physicalDetails.EXEC_MISCELANEOUS,
                    physicalDetails.EXEC_PREPARATORY_WORK,
                    physicalDetails.EXEC_PROG_MONTH,
                    physicalDetails.EXEC_PROG_YEAR,
                    physicalDetails.EXEC_SIGNS_STONES,
                    physicalDetails.EXEC_SUBBASE_PREPRATION,
                    physicalDetails.EXEC_SURFACE_COURSE,
                    physicalDetails.IMS_PR_ROAD_CODE,
                    physicalDetails.EXEC_COMPLETION_DATE,
                }).ToArray();

                return gridData.Select(physicalDetails => new
                {
                    id = physicalDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[]
                    {
                        physicalDetails.EXEC_PROG_MONTH == 1?"January":(physicalDetails.EXEC_PROG_MONTH == 2?"February":(physicalDetails.EXEC_PROG_MONTH == 3?"March":(physicalDetails.EXEC_PROG_MONTH == 4?"April":(physicalDetails.EXEC_PROG_MONTH == 5?"May":(physicalDetails.EXEC_PROG_MONTH == 6?"June":(physicalDetails.EXEC_PROG_MONTH == 7?"July":physicalDetails.EXEC_PROG_MONTH == 8?"August":(physicalDetails.EXEC_PROG_MONTH == 9?"September":(physicalDetails.EXEC_PROG_MONTH == 10?"October":(physicalDetails.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        physicalDetails.EXEC_PROG_YEAR.ToString(),
                        physicalDetails.EXEC_ISCOMPLETED=="P"?"In Progress":(physicalDetails.EXEC_ISCOMPLETED == "C"?"Completed (" + physicalDetails.EXEC_COMPLETION_DATE.Value.ToString("dd/MM/yyyy") + ")" :physicalDetails.EXEC_ISCOMPLETED == "F"?"Pending(Forest Clearance)":physicalDetails.EXEC_ISCOMPLETED == "A"?"Pending(Land Acquisition)":"Pending Legal Cases"),
                        physicalDetails.EXEC_PREPARATORY_WORK==null?"-":physicalDetails.EXEC_PREPARATORY_WORK.ToString(),
                        physicalDetails.EXEC_EARTHWORK_SUBGRADE==null?"-":physicalDetails.EXEC_EARTHWORK_SUBGRADE.ToString(),
                        physicalDetails.EXEC_SUBBASE_PREPRATION == null?"-":physicalDetails.EXEC_SUBBASE_PREPRATION.ToString(),
                        physicalDetails.EXEC_BASE_COURSE == null?"-":physicalDetails.EXEC_BASE_COURSE.ToString(),
                        physicalDetails.EXEC_SURFACE_COURSE == null?"-":physicalDetails.EXEC_SURFACE_COURSE.ToString(),
                        physicalDetails.EXEC_SIGNS_STONES == null?"-":physicalDetails.EXEC_SIGNS_STONES.ToString(),
                        physicalDetails.EXEC_CD_WORKS == null?"-":physicalDetails.EXEC_CD_WORKS.ToString(),
                        physicalDetails.EXEC_LSB_WORKS == null?"-":physicalDetails.EXEC_LSB_WORKS.ToString(),
                        physicalDetails.EXEC_MISCELANEOUS == null?"-":physicalDetails.EXEC_MISCELANEOUS.ToString(),
                        physicalDetails.EXEC_COMPLETED == null?"-":physicalDetails.EXEC_COMPLETED.ToString(),
                        //(physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==yearCode)?"<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 05APR2017 to restrict Physical progress entry for current financial year
                        //(physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear)?"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        //(physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear)?"<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changed by SAMMED A. PATIL on 04MAY2017 to allow editing of latest record                        
                        //( (DateTime.Now.Day <= 5) ? ((physicalDetails.EXEC_PROG_MONTH== (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") ) ? "<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        "<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>",
                        ( /*(DateTime.Now.Day <= 5)*/(DateTime.Now.Day <= 10)  ? ((physicalDetails.EXEC_PROG_MONTH== (currMonth - 1) || physicalDetails.EXEC_PROG_MONTH==currMonth) && physicalDetails.EXEC_PROG_MONTH==monthCode && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") : (physicalDetails.EXEC_PROG_MONTH==currMonth && physicalDetails.EXEC_PROG_YEAR==currYear && physicalDetails.EXEC_ISCOMPLETED != "C") ) ? "<a href='#' title='Click here to delete Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteRoadPhysicalProgress('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+physicalDetails.IMS_PR_ROAD_CODE.ToString().Trim(),"Month="+physicalDetails.EXEC_PROG_MONTH.ToString().Trim(),"Year="+physicalDetails.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetRoadPhysicalProgressListMRDDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the Physical road details
        /// </summary>
        /// <param name="progressModel">model containing the updated data</param>
        /// <param name="message">returns the result message</param>
        /// <returns></returns>
        public bool EditPhysicalRoadDetailsMRDDAL(ExecutionRoadStatusViewModelMRD progressModel, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            Dictionary<string, string> decryptedParameters = null;
            string[] encryptedParameters = null;

            //List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = null;
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    encryptedParameters = progressModel.EncryptedPhysicalRoadCode.Split('/');
                    if (!(encryptedParameters.Length == 3))
                    {
                        return false;
                    }

                    decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    int IMS_PR_ROAD_CODE = Convert.ToInt32(decryptedParameters["RoadCode"]);
                    EXEC_ROADS_MONTHLY_STATUS roadMaster = dbContext.EXEC_ROADS_MONTHLY_STATUS.Find(IMS_PR_ROAD_CODE, progressModel.EXEC_PROG_YEAR, progressModel.EXEC_PROG_MONTH);
                    if (roadMaster == null)
                    {
                        message = "Physical progress details not exist for this month and year.";
                        return false;
                    }
                    roadMaster.EXEC_BASE_COURSE = progressModel.EXEC_BASE_COURSE;
                    roadMaster.EXEC_CD_WORKS = progressModel.EXEC_CD_WORKS;
                    roadMaster.EXEC_COMPLETED = progressModel.EXEC_COMPLETED;
                    roadMaster.EXEC_EARTHWORK_SUBGRADE = progressModel.EXEC_EARTHWORK_SUBGRADE;
                    roadMaster.EXEC_ISCOMPLETED = progressModel.EXEC_ISCOMPLETED;
                    roadMaster.EXEC_LSB_WORKS = progressModel.EXEC_LSB_WORKS;
                    roadMaster.EXEC_MISCELANEOUS = progressModel.EXEC_MISCELANEOUS;
                    roadMaster.EXEC_PREPARATORY_WORK = progressModel.EXEC_PREPARATORY_WORK;
                    roadMaster.EXEC_PROG_MONTH = progressModel.EXEC_PROG_MONTH;
                    roadMaster.EXEC_PROG_YEAR = progressModel.EXEC_PROG_YEAR;
                    roadMaster.EXEC_SIGNS_STONES = progressModel.EXEC_SIGNS_STONES;
                    roadMaster.EXEC_SUBBASE_PREPRATION = progressModel.EXEC_SUBBASE_PREPRATION;
                    roadMaster.EXEC_SURFACE_COURSE = progressModel.EXEC_SURFACE_COURSE;
                    if (progressModel.EXEC_ISCOMPLETED == "C")
                    {
                        roadMaster.EXEC_COMPLETION_DATE = objCommon.GetStringToDateTime(progressModel.ExecutionCompleteDate);
                    }
                    else
                    {
                        roadMaster.EXEC_COMPLETION_DATE = null;
                    }
                    roadMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    roadMaster.USERID = PMGSYSession.Current.UserId;
                    dbContext.Entry(roadMaster).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();


                    if (roadMaster.EXEC_ISCOMPLETED == "C")
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                            //{
                            //    imsMaster.IMS_ISCOMPLETED = "C";
                            //}
                            ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                            imsMaster.IMS_ISCOMPLETED = "C";
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }
                        if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                        {
                            List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                             join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                             where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                             details.TEND_AGREEMENT_STATUS == "P" &&
                                                                             master.TEND_AGREEMENT_TYPE == "C"
                                                                             select details).ToList<TEND_AGREEMENT_DETAIL>();

                            lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                            {
                                m.TEND_AGREEMENT_STATUS = "C";
                                m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                m.USERID = PMGSYSession.Current.UserId;
                            });
                            dbContext.SaveChanges();

                            foreach (var item in lstAggrementCodes)
                            {
                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "P";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "W";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).All(m => m.TEND_AGREEMENT_STATUS == "C"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                    tendMaster.TEND_AGREEMENT_STATUS = "C";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.Entry(tendMaster).State = System.Data.Entity.EntityState.Modified;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                            }

                        }
                    }
                    else if (roadMaster.EXEC_ISCOMPLETED == "P")
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L" || imsMaster.IMS_ISCOMPLETED == "C")
                            //{
                            //    imsMaster.IMS_ISCOMPLETED = "P";
                            //}
                            ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                            imsMaster.IMS_ISCOMPLETED = "P";
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = null;//DateTime.Now;
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }

                        if (dbContext.TEND_AGREEMENT_DETAIL.Any(m => m.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE))
                        {
                            List<TEND_AGREEMENT_DETAIL> lstAggrementCodes = (from master in dbContext.TEND_AGREEMENT_MASTER
                                                                             join details in dbContext.TEND_AGREEMENT_DETAIL on master.TEND_AGREEMENT_CODE equals details.TEND_AGREEMENT_CODE
                                                                             where details.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE &&
                                                                             (details.TEND_AGREEMENT_STATUS == "P" || details.TEND_AGREEMENT_STATUS == "C") &&
                                                                             master.TEND_AGREEMENT_TYPE == "C"
                                                                             select details).ToList<TEND_AGREEMENT_DETAIL>();

                            lstAggrementCodes.Where(ac => ac.IMS_PR_ROAD_CODE == progressModel.IMS_PR_ROAD_CODE).ToList().ForEach(m =>
                            {
                                m.TEND_AGREEMENT_STATUS = "P"; m.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                m.USERID = PMGSYSession.Current.UserId;
                            });
                            dbContext.SaveChanges();

                            foreach (var item in lstAggrementCodes)
                            {
                                if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "P"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "P";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "W" || m.TEND_AGREEMENT_STATUS == "M"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);
                                    tendMaster.TEND_AGREEMENT_STATUS = "W";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                else if (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.TEND_AGREEMENT_CODE == item.TEND_AGREEMENT_CODE).Any(m => m.TEND_AGREEMENT_STATUS == "C"))
                                {
                                    TEND_AGREEMENT_MASTER tendMaster = dbContext.TEND_AGREEMENT_MASTER.Find(item.TEND_AGREEMENT_CODE);//.Select(m => m.TEND_AGREEMENT_CODE).FirstOrDefault());
                                    tendMaster.TEND_AGREEMENT_STATUS = "C";
                                    tendMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    tendMaster.USERID = PMGSYSession.Current.UserId;
                                    dbContext.SaveChanges();
                                    continue;
                                }
                                //objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);

                            }

                        }
                    }
                    else
                    {
                        IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(progressModel.IMS_PR_ROAD_CODE);
                        if (imsMaster != null)
                        {
                            //if (imsMaster.IMS_ISCOMPLETED == "G" || imsMaster.IMS_ISCOMPLETED == "P" || imsMaster.IMS_ISCOMPLETED == "A" || imsMaster.IMS_ISCOMPLETED == "F" || imsMaster.IMS_ISCOMPLETED == "L")
                            //{
                            //    imsMaster.IMS_ISCOMPLETED = roadMaster.EXEC_ISCOMPLETED;
                            //}
                            ///Commented by SAMMED A. PATIL on 13OCT2017 for sqcWestBengal issue 
                            imsMaster.IMS_ISCOMPLETED = roadMaster.EXEC_ISCOMPLETED;
                            imsMaster.IMS_ENTRY_DATE_PHYSICAL = DateTime.Now;
                            imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            imsMaster.USERID = PMGSYSession.Current.UserId;
                            dbContext.SaveChanges();
                        }
                    }
                    ts.Complete();
                    //foreach (var item in lstAggrementCodes)
                    //{
                    //    objCommon.UpdateAgreementStatus(item.TEND_AGREEMENT_CODE);
                    //}
                    message = "Physical road details updated successfully.";
                    return true;
                }
                catch (Exception ex)
                {
                    ErrorLog.LogError(ex, "EditPhysicalRoadDetailsMRDDAL()");
                    message = "Error occurred while processing your request.";
                    return false;
                }
                finally
                {
                    if (dbContext != null)
                    {
                        dbContext.Dispose();
                    }
                }
            }
        }
        #endregion

        #region Execution Change Work Status
        /// <summary>
        /// returns the list of Road 
        /// </summary>

        public Array GetRoadList(int yearCode, int districtCode, int blockCode, int batchCode, int streamCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            int adminNdCode = 0;
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);
            bool flag = false;
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                //adminNdCode = 

                var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                    join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                    join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE

                                    where
                                    master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                    item.IMS_SANCTIONED == "Y" &&
                                    (item.IMS_ISCOMPLETED == "C" || item.IMS_ISCOMPLETED == "X") &&
                                    master.TEND_AGREEMENT_TYPE == "C" &&
                                    (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                    (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                    (batchCode <= 0 ? 1 : item.IMS_BATCH) == (batchCode <= 0 ? 1 : batchCode) &&
                                    (streamCode <= 0 ? 1 : item.IMS_COLLABORATION) == (streamCode <= 0 ? 1 : streamCode) &&
                                    (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                    (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                        //(item.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode) &&
                                    item.MAST_DISTRICT_CODE == districtCode &&
                                    item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                    && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                    && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)

                                    select new
                                    {
                                        block.MAST_BLOCK_NAME,
                                        item.IMS_PACKAGE_ID,
                                        item.IMS_BATCH,
                                        item.IMS_PR_ROAD_CODE,
                                        item.IMS_ROAD_NAME,
                                        item.IMS_BRIDGE_NAME,
                                        year.MAST_YEAR_TEXT,
                                        item.IMS_LOCK_STATUS,
                                        item.IMS_NO_OF_CDWORKS,
                                        item.IMS_NO_OF_BRIDGEWRKS,
                                        item.IMS_PROPOSAL_TYPE,
                                        ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                        //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P"?(item.IMS_SANCTIONED_PAV_AMT+item.IMS_SANCTIONED_CD_AMT+item.IMS_SANCTIONED_PW_AMT+
                                        //            item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                        //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                        ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                    : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                        //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                        ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                        MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                        EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                        EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                        item.IMS_ISCOMPLETED,
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_NO_OF_CDWORKS,
                    executionDetails.IMS_NO_OF_BRIDGEWRKS,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_LOCK_STATUS,
                    executionDetails.ROAD_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_BRIDGE_NAME,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.EXEC_ISCOMPLETED,
                    flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                    executionDetails.IMS_ISCOMPLETED,
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH ==null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                       ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                        ///Add/Edit InProgress Roads
                        //!(PMGSYSession.Current.RoleCode == 25) ? "-" 
                        //  : (m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                        //                                : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")),

                        ((m.IMS_ISCOMPLETED == "C") || (m.IMS_ISCOMPLETED == "X")) ? ("<a href='#' title='Click here to change the work status' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddAdditionalRoadDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Change Work Status </a>") : ("-"),

                        //!(PMGSYSession.Current.RoleCode == 25) ? "-" 
                        //  : (m.IMS_PROPOSAL_TYPE == "P" ? ("<a href='#' title='Click here to add Additional Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddAdditionalRoadDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Additional Road Details</a>")
                        //                                : ("<a href='#' title='Click here to add Additional Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddAdditionalRoadDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Additional Road Details</a>")),

                                                   ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Road Safety Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        
                        //"<a href='#' title='Click here to view Execution Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>View Execution Details</a>"
                      
                      
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetRoadList()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        public AdditionalRoadDetailsViewModel GetCompleteRoadDetails(int road_code)
        {

            dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == road_code).FirstOrDefault();
                //EXEC_ROADS_MONTHLY_STATUS exec_road_monthly_status = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == road_code).FirstOrDefault();
                List<EXEC_ROADS_MONTHLY_STATUS> exec_road_monthly_status = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == road_code).ToList();
                List<EXEC_LSB_MONTHLY_STATUS> exec_lsb_monthly_status = dbContext.EXEC_LSB_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == road_code).ToList();

                AdditionalRoadDetailsViewModel lsExecution = new AdditionalRoadDetailsViewModel();
                lsExecution.IMS_YEAR = ims_sanctioned_projects.IMS_YEAR;
                lsExecution.IMS_BATCH = ims_sanctioned_projects.IMS_BATCH;
                lsExecution.IMS_PACKAGE_ID = ims_sanctioned_projects.IMS_PACKAGE_ID;
                lsExecution.IMS_ROAD_NAME = ims_sanctioned_projects.IMS_ROAD_NAME;
                lsExecution.IMS_PAV_LENGTH = ims_sanctioned_projects.IMS_PAV_LENGTH;
                lsExecution.IMS_SANCTIONED_BS_AMT = ims_sanctioned_projects.IMS_SANCTIONED_BS_AMT;
                lsExecution.IMS_SANCTIONED_RS_AMT = ims_sanctioned_projects.IMS_SANCTIONED_RS_AMT;
                lsExecution.IMS_SANCTIONED_PAV_AMT = ims_sanctioned_projects.IMS_SANCTIONED_PAV_AMT;
                lsExecution.IMS_SANCTIONED_CD_AMT = ims_sanctioned_projects.IMS_SANCTIONED_CD_AMT;
                lsExecution.IMS_SANCTIONED_OW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_OW_AMT;
                lsExecution.IMS_SANCTIONED_HS_AMT = ims_sanctioned_projects.IMS_SANCTIONED_HS_AMT;
                lsExecution.IMS_SANCTIONED_FC_AMT = ims_sanctioned_projects.IMS_SANCTIONED_FC_AMT;
                lsExecution.IMS_SANCTIONED_BW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_BW_AMT;

                if (ims_sanctioned_projects.IMS_PROPOSAL_TYPE == "P")
                {
                    foreach (EXEC_ROADS_MONTHLY_STATUS obj in exec_road_monthly_status)
                    {
                        if (obj.IMS_PR_ROAD_CODE == road_code && obj.EXEC_ISCOMPLETED == "C")
                        {
                            lsExecution.WORK_COMPLETION_DATE = obj.EXEC_COMPLETION_DATE;
                        }
                    }

                }
                else if (ims_sanctioned_projects.IMS_PROPOSAL_TYPE == "L")
                {
                    foreach (EXEC_LSB_MONTHLY_STATUS obj in exec_lsb_monthly_status)
                    {
                        if (obj.IMS_PR_ROAD_CODE == road_code && obj.EXEC_ISCOMPLETED == "C")
                        {
                            lsExecution.WORK_COMPLETION_DATE = obj.EXEC_COMPLETION_DATE;
                        }
                    }

                }
                return lsExecution;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetCompleteRoadDetails().DAL");
                return null;

            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }

            }

        }

        /// <summary>
        /// Add Additional Road details
        /// </summary>
        /// <param name="executionAdditionalRoadDetails"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddAdditionalRoadDetailsDAL(ExecutionAdditionalRoadDetails executionAdditionalRoadDetails, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {

                EXEC_WORK_PROGRESS_CHANGE_REQUEST exec_work_progress_change_request = new EXEC_WORK_PROGRESS_CHANGE_REQUEST();

                exec_work_progress_change_request.EXEC_PROG_ID = dbContext.EXEC_WORK_PROGRESS_CHANGE_REQUEST.Any() ? (dbContext.EXEC_WORK_PROGRESS_CHANGE_REQUEST.Max(x => x.EXEC_PROG_ID) + 1) : 1;
                exec_work_progress_change_request.IMS_PR_ROAD_CODE = executionAdditionalRoadDetails.IMS_PR_ROAD_CODE;
                exec_work_progress_change_request.WORK_COMPLETION_DATE = executionAdditionalRoadDetails.WORK_COMPLETION_DATE;
                exec_work_progress_change_request.EXEC_FILE_TYPE = executionAdditionalRoadDetails.FILE_TYPE;
                exec_work_progress_change_request.EXEC_FILE_NAME = executionAdditionalRoadDetails.FILE_NAME;
                exec_work_progress_change_request.EXEC_APPROVED_DATE = executionAdditionalRoadDetails.EXEC_APPROVED_DATE;
                exec_work_progress_change_request.USERID = PMGSYSession.Current.UserId;
                exec_work_progress_change_request.IPADDR = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext = new PMGSYEntities();
                dbContext.EXEC_WORK_PROGRESS_CHANGE_REQUEST.Add(exec_work_progress_change_request);
                dbContext.SaveChanges();

                return true;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddAdditionalRoadDetailsDAL(DbUpdateException ex)");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddAdditionalRoadDetailsDAL(OptimisticConcurrencyException ex)");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddAdditionalRoadDetailsDAL()");
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        //Edit EXEC_ROAD_MONTHLY_STATUS , IMS_SANCTIONED_PROJECT AND EXEC_LSB_MONTHLY_STATUS

        public bool EditAdditionalRoadDetailsDAL(int road_code)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == road_code).FirstOrDefault();
                List<EXEC_ROADS_MONTHLY_STATUS> exec_road_monthly_status = dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == road_code).ToList();
                List<EXEC_LSB_MONTHLY_STATUS> exec_lsb_monthly_status = dbContext.EXEC_LSB_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == road_code).ToList();

                if (ims_sanctioned_projects.IMS_PROPOSAL_TYPE == "P")
                {
                    foreach (EXEC_ROADS_MONTHLY_STATUS obj in exec_road_monthly_status)
                    {
                        if (obj.IMS_PR_ROAD_CODE == road_code && obj.EXEC_ISCOMPLETED == "C")
                        {
                            obj.EXEC_ISCOMPLETED = "P";
                            obj.EXEC_COMPLETION_DATE = null;
                            ims_sanctioned_projects.IMS_ISCOMPLETED = "P";
                            dbContext.Entry(obj).State = System.Data.Entity.EntityState.Modified;
                        }
                    }

                }
                else if (ims_sanctioned_projects.IMS_PROPOSAL_TYPE == "L")
                {
                    foreach (EXEC_LSB_MONTHLY_STATUS obj in exec_lsb_monthly_status)
                    {
                        if (obj.IMS_PR_ROAD_CODE == road_code && obj.EXEC_ISCOMPLETED == "C")
                        {
                            obj.EXEC_ISCOMPLETED = "P";
                            obj.EXEC_COMPLETION_DATE = null;
                            ims_sanctioned_projects.IMS_ISCOMPLETED = "P";
                            dbContext.Entry(obj).State = System.Data.Entity.EntityState.Modified;
                        }
                    }
                }
                dbContext.Entry(ims_sanctioned_projects).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditAdditionalRoadDetailsDAL().DAL");
                return false;

            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }

            }

        }
        //Get Additional Execution Road Details

        //public Array GetAdditionalRoadListDAL(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        //{
        //    PMGSYEntities dbContext = new PMGSYEntities();
        //    try
        //    {
        //        var lstExecution = (from road in dbContext.EXEC_WORK_PROGRESS_CHANGE_REQUEST
        //                            where
        //                            road.IMS_PR_ROAD_CODE == roadCode

        //                            select new
        //                            {
        //                                road.IMS_PR_ROAD_CODE,
        //                                road.EXEC_FILE_NAME
        //                            }).Distinct();
        //        totalRecords = lstExecution.Count();



        //        var result = lstExecution.Select(executionDetails => new
        //        {
        //            executionDetails.IMS_PR_ROAD_CODE,
        //            executionDetails.EXEC_FILE_NAME

        //        }).ToArray();

        //        return result.Select(m => new
        //        {
        //            id = URLEncrypt.EncryptParameters1(new string[] { "IMS_PR_ROAD_CODE=" + m.IMS_PR_ROAD_CODE.ToString().Trim() }),
        //            cell = new[] 
        //            {                      
        //                m.EXEC_FILE_NAME.ToString(),
        //                String.IsNullOrEmpty(m.EXEC_FILE_NAME) ? "" : "<a href='#' title='Click here to Download file' class='btn btn-sm' onclick='DownloadFile(\""+ URLEncrypt.EncryptParameters1(new string[]{ m.EXEC_FILE_NAME.ToString().Trim() }) + "\"); return false;'>"+"Download"+"</a></center>",
        //            }
        //        }).ToArray();
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.LogError(ex, "GetAdditionalRoadListDAL()");
        //        totalRecords = 0;
        //        return null;
        //    }
        //    finally
        //    {
        //        dbContext.Dispose();
        //    }
        //}
        #endregion

        #region Location Details Added by Rohit J.

        // Added By Rohit 
        public Array GetTrackingForExecutionDAL(FormCollection formCollection, out long totalRecords)
        {
            //Avinash
            List<EXEC_LOCATION_DETAILS> itemList = null;
            EXEC_LOCATION_DETAILS ModelExeLoc = null;
            try
            {
                int rodeCode = Convert.ToInt32(formCollection["roadCode"]);
                using (var dbContext = new PMGSYEntities())
                {
                    //var itemList = dbContext.EXEC_LOCATION_DETAILS.Select(x => new
                    //{
                    //    IMS_PR_ROAD_CODE = x.IMS_PR_ROAD_CODE,
                    //    EXEC_LOC_FLAG = x.EXEC_LOC_FLAG,
                    //    EXEC_LOC_LAT = x.EXEC_LOC_LAT,
                    //    EXEC_LOC_LONG = x.EXEC_LOC_LONG
                    //}).Where(x => x.IMS_PR_ROAD_CODE == rodeCode).ToList();

                    itemList = new List<EXEC_LOCATION_DETAILS>();

                    //Avinash to Replace S:Start Point   E:End Point   M:Mid Point   C:CD Work
                    var exelist = dbContext.EXEC_LOCATION_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == rodeCode).ToList();
                    foreach (var item in exelist)
                    {

                        ModelExeLoc = new EXEC_LOCATION_DETAILS();
                        ModelExeLoc.IMS_PR_ROAD_CODE = item.IMS_PR_ROAD_CODE;

                        if (item.EXEC_LOC_FLAG == "S")
                        {
                            ModelExeLoc.EXEC_LOC_FLAG = "Start Point";
                        }
                        else if (item.EXEC_LOC_FLAG == "C")
                        {
                            ModelExeLoc.EXEC_LOC_FLAG = "CD Work";
                        }

                        else if (item.EXEC_LOC_FLAG == "M")
                        {
                            ModelExeLoc.EXEC_LOC_FLAG = "Mid Point";
                        }
                        else if (item.EXEC_LOC_FLAG == "E")
                        {
                            ModelExeLoc.EXEC_LOC_FLAG = "End Point";
                        }

                        ModelExeLoc.EXEC_LOC_LAT = item.EXEC_LOC_LAT;
                        ModelExeLoc.EXEC_LOC_LONG = item.EXEC_LOC_LONG;
                        itemList.Add(ModelExeLoc);
                    }

                    if (!string.IsNullOrEmpty(formCollection["search[value]"]))
                    {
                        itemList = itemList.Where(c => c.EXEC_LOC_FLAG.ToLower().Equals(formCollection["search[value]"].ToLower())).ToList();
                    }

                    // Sorting Logic
                    var sortColumnIndex = Convert.ToInt32(formCollection["order[0][column]"]);

                    var sortDirection = formCollection["order[0][dir]"];
                    if (!string.IsNullOrEmpty(sortDirection))
                    {
                        if (sortDirection.Equals("asc"))
                            itemList = itemList.OrderBy(s => s.IMS_PR_ROAD_CODE).ToList();
                        else
                            itemList = itemList.OrderByDescending(s => s.IMS_PR_ROAD_CODE).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderBy(s => s.IMS_PR_ROAD_CODE).ToList();
                    }

                    totalRecords = itemList.Count();
                    return itemList.ToArray();

                }// Using Ends Here
            }
            catch (Exception)
            {
                totalRecords = 0;
                return null;
            }
        }



        public ProposalDetailsForLocationTracking GetProposalDetailsForLocationDAL(int proposalCode)
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    IMS_SANCTIONED_PROJECTS sanctionMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    ProposalDetailsForLocationTracking propDetails = new ProposalDetailsForLocationTracking();
                    propDetails.ProposalType = sanctionMaster.IMS_PROPOSAL_TYPE;
                    propDetails.Block = null;
                    propDetails.Batch = sanctionMaster.IMS_BATCH == 1 ? "Phase I" : sanctionMaster.IMS_BATCH == 2 ? "Phase II" : "Cost Effective Technology";
                    propDetails.FinancialYear = (sanctionMaster.IMS_YEAR + "-" + (sanctionMaster.IMS_YEAR + 1));

                    propDetails.Package = sanctionMaster.IMS_PACKAGE_ID;
                    propDetails.ProposalName = sanctionMaster.IMS_ROAD_NAME;
                    propDetails.ProposalCode = sanctionMaster.IMS_PR_ROAD_CODE;

                    propDetails.ImagesUploaded = dbContext.EXEC_FILES.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Count();


                    if (propDetails.ProposalType == "P")
                    {
                        propDetails.Length = sanctionMaster.IMS_CC_LENGTH + sanctionMaster.IMS_BT_LENGTH;
                    }
                    else if (propDetails.ProposalType == "L")
                    {
                        propDetails.Length = sanctionMaster.IMS_BRIDGE_LENGTH;
                    }
                    else
                    {
                        propDetails.Length = null;

                    }

                    return propDetails;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Building Proposal
        ///Building Progress Layout
        public Array GetExecBuildingProposalListDAL(int yearCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);
            bool flag = false;
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                    join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                    join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                    join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                    join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                    join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                    where
                                    master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                    item.IMS_SANCTIONED == "Y" &&
                                    master.TEND_AGREEMENT_TYPE == "C" &&
                                    (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                    (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                    (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                    (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                    (item.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode) &&
                                    item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                    && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                    && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)

                                    select new
                                    {
                                        state.MAST_STATE_NAME,
                                        district.MAST_DISTRICT_NAME,
                                        block.MAST_BLOCK_NAME,
                                        item.IMS_PACKAGE_ID,
                                        item.IMS_BATCH,
                                        item.IMS_PR_ROAD_CODE,
                                        item.IMS_ROAD_NAME,
                                        item.IMS_BRIDGE_NAME,
                                        year.MAST_YEAR_TEXT,
                                        item.IMS_LOCK_STATUS,
                                        item.IMS_NO_OF_CDWORKS,
                                        item.IMS_NO_OF_BRIDGEWRKS,
                                        item.IMS_PROPOSAL_TYPE,
                                        ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,

                                        ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1
                                                    ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                    : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),

                                        //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                        ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                        MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                        EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                        EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.MAST_STATE_NAME,
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_NO_OF_CDWORKS,
                    executionDetails.IMS_NO_OF_BRIDGEWRKS,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_LOCK_STATUS,
                    executionDetails.ROAD_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_BRIDGE_NAME,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.EXEC_ISCOMPLETED,
                    flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.MAST_STATE_NAME.Trim(),
                        m.MAST_DISTRICT_NAME.Trim(),
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) +(m.IMS_BRIDGE_NAME == null?string.Empty
                                                        : " ( " + m.IMS_BRIDGE_NAME.ToString() + " )") ,
                        m.ROAD_COST.ToString(),
                        //Earthwork
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //Foundation
                        (dbContext.EXEC_BUILDING_PROGRESS.Where(z=>z.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && z.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Earthwork Excavation and PCC" && z.ITEM_PROGRESS == "Y").Any()) ? URLEncrypt.EncryptParameters1(new string[]                                   {"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) : "-",
                        //Superstructure
                        (dbContext.EXEC_BUILDING_PROGRESS.Where(z=>z.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && z.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" 
                            && z.MASTER_BUILDING_EXECUTION_ITEMS.ITEM_SUB_COMPONENT.Trim() == "At Plinth level" && z.ITEM_PROGRESS == "Y").Any() 
                         && dbContext.EXEC_BUILDING_PROGRESS.Where(z=>z.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && z.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Earthwork Excavation and PCC" && z.ITEM_PROGRESS == "Y").Any()) 
                            ? URLEncrypt.EncryptParameters1(new string[] {"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) : "-",

                        /* m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                                                   : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                        ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 

                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Road Safety Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        
                        "<a href='#' title='Click here to view Execution Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>View Execution Details</a>",

                        //Added By Avinash on 03_08_2018 to View Captured LocationDetails on Google Map
                        (dbContext.IMS_SANCTIONED_PROJECTS.Join(dbContext.EXEC_LOCATION_DETAILS,
                                                                sancProject=> sancProject.IMS_PR_ROAD_CODE,
                                                                locDetails=>locDetails.IMS_PR_ROAD_CODE,
                                                                (sancProject,locDetails)=>    new  {locDetails.IMS_PR_ROAD_CODE}).Where(c=>c.IMS_PR_ROAD_CODE== m.IMS_PR_ROAD_CODE).Any() )
                         ? "<a href='#' title='Click here to view Location Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewLocation('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                            :"-"
                         */
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetExecBuildingProposalListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        ///Excavation Layout
        public bool AddEarthworkExcavationDetailsDAL(EarthWorkExcavationViewModel model, ref string message)
        {
            Dictionary<string, string> decryptedParameters = null;
            string[] param = null;

            try
            {
                dbContext = new PMGSYEntities();

                param = model.EncrProposalCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                int imsPrRoadCode = 0;

                if (decryptedParameters.Count() > 0)
                {
                    imsPrRoadCode = Convert.ToInt32(decryptedParameters["ProposalCode"]);
                }

                //Check for Month and Year
                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Earthwork Excavation and PCC"
                    //&& ((((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)) || ((model.Year * 12) + model.Month) <= ((model.Year * 12) + DateTime.Now.Month) ) ))
                    && ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)))
                {
                    message = "Record already exists please select Month and Year greater than pevious.";
                    //message = "Please select Month and Year greater than pevious month and year upto current month.";
                    return false;
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Earthwork Excavation and PCC"
                    && ((model.Year * 12) + model.Month) > ((model.Year * 12) + DateTime.Now.Month))
                    || ((model.Year * 12) + model.Month) > ((DateTime.Now.Year * 12) + DateTime.Now.Month))
                {
                    message = "Please select Month and Year upto current month and year.";
                    return false;
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Earthwork Excavation and PCC" && x.ITEM_PROGRESS.Trim() == "Y") && model.EarthWorkExcavationPCC != "Y")
                {
                    message = "Please select Item progress as Yes.";
                    return false;
                }

                EXEC_BUILDING_PROGRESS exec_building_progress = new EXEC_BUILDING_PROGRESS();
                exec_building_progress.EXEC_PROG_CODE = dbContext.EXEC_BUILDING_PROGRESS.Any() ? (dbContext.EXEC_BUILDING_PROGRESS.Max(x => x.EXEC_PROG_CODE) + 1) : 1;
                exec_building_progress.IMS_PR_ROAD_CODE = imsPrRoadCode;
                exec_building_progress.EXEC_PROG_MONTH = model.Month;
                exec_building_progress.EXEC_PROG_YEAR = model.Year;

                exec_building_progress.ITEM_CODE = 13;
                exec_building_progress.ITEM_PROGRESS = model.EarthWorkExcavationPCC;

                //exec_building_progress.GROUND_PROGRESS = null;
                //exec_building_progress.FIRST_PROGRESS = null;
                //exec_building_progress.SECOND_PROGRESS = null;
                //exec_building_progress.THIRD_PROGRESS = null;
                //exec_building_progress.COVERED_PARKING = null;
                //exec_building_progress.APPROACH_ROAD = null;

                exec_building_progress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                exec_building_progress.USERID = PMGSYSession.Current.UserId;

                dbContext.EXEC_BUILDING_PROGRESS.Add(exec_building_progress);
                dbContext.SaveChanges();
                message = "Earthwork Excavation PCC details saved successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "AddEarthworkExcavationDetailsDAL.OptimisticConcurrencyException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException ex)
            {
                ErrorLog.LogError(ex, "AddEarthworkExcavationDetailsDAL.UpdateException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddEarthworkExcavationDetailsDAL()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool EditEarthworkExcavationDetailsDAL(EarthWorkExcavationViewModel model, ref string message)
        {
            Dictionary<string, string> decryptedParameters = null;
            string[] param = null;
            int progressCode = 0, imsPrRoadCode = 0;
            try
            {
                dbContext = new PMGSYEntities();

                param = model.EncrProgressCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                if (decryptedParameters.Count() > 0)
                {
                    progressCode = Convert.ToInt32(decryptedParameters["ProgressCode"]);
                }

                param = model.EncrProposalCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                if (decryptedParameters.Count() > 0)
                {
                    imsPrRoadCode = Convert.ToInt32(decryptedParameters["ProposalCode"]);
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Earthwork Excavation and PCC" && x.ITEM_PROGRESS.Trim() == "Y" && x.EXEC_PROG_CODE < progressCode) && model.EarthWorkExcavationPCC != "Y")
                {
                    message = "Please select Item progress as Yes.";
                    return false;
                }

                EXEC_BUILDING_PROGRESS exec_building_progress = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.EXEC_PROG_CODE == progressCode).FirstOrDefault();
                //exec_building_progress.IMS_PR_ROAD_CODE = imsPrRoadCode;
                if (exec_building_progress != null)
                {
                    //exec_building_progress.EXEC_PROG_MONTH = model.Month;
                    //exec_building_progress.EXEC_PROG_YEAR = model.Year;
                    exec_building_progress.ITEM_PROGRESS = model.EarthWorkExcavationPCC;

                    //exec_building_progress.GROUND_PROGRESS = "";
                    //exec_building_progress.FIRST_PROGRESS = "";
                    //exec_building_progress.SECOND_PROGRESS = "";
                    //exec_building_progress.THIRD_PROGRESS = "";
                    //exec_building_progress.COVERED_PARKING = "";
                    //exec_building_progress.APPROACH_ROAD = "";

                    exec_building_progress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    exec_building_progress.USERID = PMGSYSession.Current.UserId;

                    dbContext.Entry(exec_building_progress).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "Earthwork Excavation PCC details updated successfully.";
                }
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "EditEarthworkExcavationDetailsDAL.OptimisticConcurrencyException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException ex)
            {
                ErrorLog.LogError(ex, "EditEarthworkExcavationDetailsDAL.UpdateException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditEarthworkExcavationDetailsDAL()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteEarthworkExcavationDetailsDAL(int progressCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {

                EXEC_BUILDING_PROGRESS exec_building_progress = dbContext.EXEC_BUILDING_PROGRESS.Find(progressCode);

                if (dbContext.EXEC_BUILDING_PROGRESS.Where(z => z.IMS_PR_ROAD_CODE == exec_building_progress.IMS_PR_ROAD_CODE && z.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation").Any())
                {
                    message = "Earthwork Excavation PCC details can not be deleted as Foundation details are entered for the road.";
                    return false;
                }
                if (dbContext.EXEC_BUILDING_PROGRESS.Where(z => z.IMS_PR_ROAD_CODE == exec_building_progress.IMS_PR_ROAD_CODE && z.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure").Any())
                {
                    message = "Earthwork Excavation PCC details can not be deleted as Superstructure details are entered for the road.";
                    return false;
                }

                dbContext.EXEC_BUILDING_PROGRESS.Remove(exec_building_progress);
                dbContext.SaveChanges();
                message = "Earthwork Excavation PCC details deleted successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteEarthworkExcavationDetailsDAL()");
                message = "Earthwork Excavation PCC details can not be deleted.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetEarthworkExcavationDetailsListDAL(int proposalCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int yearCode = 0;
            int monthCode = 0;

            try
            {
                if ((dbContext.EXEC_BUILDING_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.ITEM_CODE == 13).Max(y => y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode && m.ITEM_CODE == 13).Max(s => s.EXEC_PROG_MONTH));
                }

                var lstExecution = (from item in dbContext.EXEC_BUILDING_PROGRESS
                                    where item.IMS_PR_ROAD_CODE == proposalCode
                                        //&& item.ITEM_CODE == 13
                                          && item.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Earthwork Excavation and PCC"
                                    select new
                                    {
                                        item.EXEC_PROG_CODE,
                                        item.IMS_PR_ROAD_CODE,
                                        item.EXEC_PROG_MONTH,
                                        item.EXEC_PROG_YEAR,
                                        item.ITEM_CODE,
                                        ITEM_PROGRESS = item.ITEM_PROGRESS == "Y" ? "Yes" : item.ITEM_PROGRESS == "N" ? "No" : "Not Applicable",
                                        item.GROUND_PROGRESS,
                                        item.FIRST_PROGRESS,
                                        item.SECOND_PROGRESS,
                                        item.THIRD_PROGRESS,
                                        item.COVERED_PARKING,
                                        item.APPROACH_ROAD,
                                        //ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        //switch (sidx)
                        //{
                        //    case "MAST_BLOCK_NAME":
                        //        lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    case "IMS_PACKAGE_ID":
                        //        lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    case "IMS_ROAD_NAME":
                        //        lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    default:
                        //        lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //}
                        lstExecution = lstExecution.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        //switch (sidx)
                        //{
                        //case "MAST_BLOCK_NAME":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //case "IMS_PACKAGE_ID":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //case "IMS_ROAD_NAME":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //default:
                        //    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        lstExecution = lstExecution.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //}
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.EXEC_PROG_CODE,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.EXEC_PROG_MONTH,
                    executionDetails.EXEC_PROG_YEAR,
                    executionDetails.ITEM_CODE,
                    executionDetails.ITEM_PROGRESS,
                    executionDetails.GROUND_PROGRESS,
                    executionDetails.FIRST_PROGRESS,
                    executionDetails.SECOND_PROGRESS,
                    executionDetails.THIRD_PROGRESS,
                    executionDetails.COVERED_PARKING,
                    executionDetails.APPROACH_ROAD,

                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.EXEC_PROG_MONTH == 1?"January":(m.EXEC_PROG_MONTH == 2?"February":(m.EXEC_PROG_MONTH == 3?"March":(m.EXEC_PROG_MONTH == 4?"April":(m.EXEC_PROG_MONTH == 5?"May":(m.EXEC_PROG_MONTH == 6?"June":(m.EXEC_PROG_MONTH ==                                                           7?"July":m.EXEC_PROG_MONTH == 8?"August":(m.EXEC_PROG_MONTH == 9?"September":(m.EXEC_PROG_MONTH == 10?"October":(m.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        m.EXEC_PROG_YEAR.ToString(),
                        m.ITEM_CODE.ToString(),
                        m.ITEM_PROGRESS,// == "Y" ? "Yes" : m.ITEM_PROGRESS == "N" ? "No" : "Not Applicable",
                        m.GROUND_PROGRESS,
                        m.FIRST_PROGRESS,
                        m.SECOND_PROGRESS,
                        m.THIRD_PROGRESS,
                        m.COVERED_PARKING,
                        m.APPROACH_ROAD,

                       // URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),

                       //"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditExcavationProgress('" + URLEncrypt.EncryptParameters1(new string[]                                                                    {"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim() }) +"'); return false;'>Edit</a>",
                        //"<a href='#' title='Click here to edit Physical Road Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteExcavationProgress('" + URLEncrypt.EncryptParameters1(new string[]                                                                    {"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim() }) +"'); return false;'>Delete</a>",
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),

                       (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)
                                ? "<a href='#' title='Click here to edit Earthwork Excavation PCC Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditExcavationProgress('" +                                                                                                            URLEncrypt.EncryptParameters1(new string[]{"ProgressCode="+m.EXEC_PROG_CODE.ToString().Trim(),"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),                                                                   "Year="+m.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Edit</a>"
                                : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)
                                ? "<a href='#' title='Click here to delete Earthwork Excavation PCC Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteExcavationProgress('" +                                                                                                URLEncrypt.EncryptParameters1(new string[]{"ProgressCode="+m.EXEC_PROG_CODE.ToString().Trim(),"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),                                                                   "Year="+m.EXEC_PROG_YEAR.ToString().Trim()}) +"'); return false;'>Delete</a>"
                                : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetEarthworkExcavationDetailsListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public EarthWorkExcavationViewModel GetEarthworkExcavationProgressDetailsDAL(int progressCode)
        {
            EarthWorkExcavationViewModel model = new EarthWorkExcavationViewModel();
            dbContext = new PMGSYEntities();
            try
            {
                var query = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.EXEC_PROG_CODE == progressCode).FirstOrDefault();

                if (query != null)
                {
                    model.Year = query.EXEC_PROG_YEAR;
                    model.Month = query.EXEC_PROG_MONTH;
                    model.EarthWorkExcavationPCC = string.IsNullOrEmpty(query.ITEM_PROGRESS) ? query.ITEM_PROGRESS : query.ITEM_PROGRESS.Trim();
                }

                return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetEarthworkExcavationProgressDetails()");
                return null;
            }
        }

        ///Foundation Layout
        public Array GetFoundationDetailsListDAL(int proposalCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int yearCode = 0;
            int monthCode = 0;

            try
            {
                if ((dbContext.EXEC_BUILDING_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    //yearCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && (m.ITEM_CODE == 14 || m.ITEM_CODE == 15)).Max(y => y.EXEC_PROG_YEAR));
                    //monthCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode && (m.ITEM_CODE == 14 || m.ITEM_CODE == 15)).Max(s => s.EXEC_PROG_MONTH));
                    yearCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation").Max(y => y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode && m.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation").Max(s => s.EXEC_PROG_MONTH));
                }

                var lstExecution = (from item in dbContext.EXEC_BUILDING_PROGRESS
                                    where item.IMS_PR_ROAD_CODE == proposalCode
                                        //&& (item.ITEM_CODE == 14 || item.ITEM_CODE == 15)
                                          && item.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation"
                                    select new
                                    {
                                        item.EXEC_PROG_CODE,
                                        item.IMS_PR_ROAD_CODE,
                                        item.EXEC_PROG_MONTH,
                                        item.EXEC_PROG_YEAR,
                                        ITEM_CODE = item.MASTER_BUILDING_EXECUTION_ITEMS.ITEM_SUB_COMPONENT,
                                        ITEM_PROGRESS = item.ITEM_PROGRESS == "Y" ? "Yes" : item.ITEM_PROGRESS == "N" ? "No" : "Not Applicable",
                                        item.GROUND_PROGRESS,
                                        item.FIRST_PROGRESS,
                                        item.SECOND_PROGRESS,
                                        item.THIRD_PROGRESS,
                                        item.COVERED_PARKING,
                                        item.APPROACH_ROAD,
                                        //ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        //switch (sidx)
                        //{
                        //    case "MAST_BLOCK_NAME":
                        //        lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    case "IMS_PACKAGE_ID":
                        //        lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    case "IMS_ROAD_NAME":
                        //        lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    default:
                        //        lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //}
                        lstExecution = lstExecution.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        //switch (sidx)
                        //{
                        //case "MAST_BLOCK_NAME":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //case "IMS_PACKAGE_ID":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //case "IMS_ROAD_NAME":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //default:
                        //    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        lstExecution = lstExecution.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //}
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.EXEC_PROG_CODE,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.EXEC_PROG_MONTH,
                    executionDetails.EXEC_PROG_YEAR,
                    executionDetails.ITEM_CODE,
                    executionDetails.ITEM_PROGRESS,
                    executionDetails.GROUND_PROGRESS,
                    executionDetails.FIRST_PROGRESS,
                    executionDetails.SECOND_PROGRESS,
                    executionDetails.THIRD_PROGRESS,
                    executionDetails.COVERED_PARKING,
                    executionDetails.APPROACH_ROAD,

                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.EXEC_PROG_MONTH == 1?"January":(m.EXEC_PROG_MONTH == 2?"February":(m.EXEC_PROG_MONTH == 3?"March":(m.EXEC_PROG_MONTH == 4?"April":(m.EXEC_PROG_MONTH == 5?"May":(m.EXEC_PROG_MONTH == 6?"June":(m.EXEC_PROG_MONTH ==                                                           7?"July":m.EXEC_PROG_MONTH == 8?"August":(m.EXEC_PROG_MONTH == 9?"September":(m.EXEC_PROG_MONTH == 10?"October":(m.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        m.EXEC_PROG_YEAR.ToString(),
                        m.ITEM_CODE.Trim(),
                        m.ITEM_PROGRESS,
                        m.GROUND_PROGRESS,
                        m.FIRST_PROGRESS,
                        m.SECOND_PROGRESS,
                        m.THIRD_PROGRESS,
                        m.COVERED_PARKING,
                        m.APPROACH_ROAD,

                       (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)
                                ? "<a href='#' title='Click here to edit Foundation Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditFoundationProgress('" +                                                                                                            URLEncrypt.EncryptParameters1(new string[]{"ProgressCode="+m.EXEC_PROG_CODE.ToString().Trim(),"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString                                   ().Trim()}) +"'); return false;'>Edit</a>"
                                : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)
                                ? "<a href='#' title='Click here to delete Foundation Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFoundationProgress('" +                                                                                                           URLEncrypt.EncryptParameters1(new string[]{"ProgressCode="+m.EXEC_PROG_CODE.ToString().Trim(),"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString                                    ().Trim()}) +"'); return false;'>Delete</a>"
                                : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetFoundationDetailsListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddFoundationDetailsDAL(FoundationViewModel model, ref string message)
        {
            Dictionary<string, string> decryptedParameters = null;
            string[] param = null;
            int imsPrRoadCode = 0;
            try
            {
                dbContext = new PMGSYEntities();

                param = model.EncrProposalCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                if (decryptedParameters.Count() > 0)
                {
                    imsPrRoadCode = Convert.ToInt32(decryptedParameters["ProposalCode"]);
                }
                //Check for Road Code
                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode))
                {
                    var query = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode).OrderBy(z => z.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Select(v => new { v.EXEC_PROG_MONTH, v.EXEC_PROG_YEAR }).FirstOrDefault();

                    if (((query.EXEC_PROG_YEAR * 12) + query.EXEC_PROG_MONTH) > ((model.Year * 12) + model.Month))
                    {
                        message = "Please select month and Year " + new System.Globalization.DateTimeFormatInfo().GetMonthName(query.EXEC_PROG_MONTH).Trim() + ", " + query.EXEC_PROG_YEAR + " and onwards";
                        return false;
                    }
                }

                //Check for Month and Year
                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode //&& x.ITEM_CODE == model.SubComponent //&& (x.ITEM_CODE == 14 || x.ITEM_CODE == 15) 
                    && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)))
                {
                    message = "Record already exists please select Month and Year greater than pevious.";
                    return false;
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode //&& x.ITEM_CODE == model.SubComponent 
                    && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && ((model.Year * 12) + model.Month) > ((model.Year * 12) + DateTime.Now.Month))
                     || (((model.Year * 12) + model.Month) > ((DateTime.Now.Year * 12) + DateTime.Now.Month))
                    )
                {
                    message = "Please select Month and Year upto current month and year.";
                    return false;
                }
                //First entry should be Below Plinth
                if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && x.ITEM_CODE == 14) && model.SubComponent == 15
                    || !dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && x.ITEM_CODE == 14 && x.ITEM_PROGRESS == "Y") && model.SubComponent == 15
                    )
                {
                    message = "Details can be entered after Below Plinth level progress entry.";
                    return false;
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && x.ITEM_CODE == 15) && model.SubComponent != 15)
                {
                    message = "Please select item as At Plinth level.";
                    return false;
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && x.ITEM_PROGRESS.Trim() == "Y"
                    && x.ITEM_CODE == model.SubComponent) && model.Foundation != "Y")
                {
                    message = "Please select Item progress as Yes.";
                    return false;
                }

                EXEC_BUILDING_PROGRESS exec_building_progress = new EXEC_BUILDING_PROGRESS();
                exec_building_progress.EXEC_PROG_CODE = dbContext.EXEC_BUILDING_PROGRESS.Any() ? (dbContext.EXEC_BUILDING_PROGRESS.Max(x => x.EXEC_PROG_CODE) + 1) : 1;
                exec_building_progress.IMS_PR_ROAD_CODE = imsPrRoadCode;
                exec_building_progress.EXEC_PROG_MONTH = model.Month;
                exec_building_progress.EXEC_PROG_YEAR = model.Year;

                exec_building_progress.ITEM_CODE = model.SubComponent;
                exec_building_progress.ITEM_PROGRESS = model.Foundation;

                //exec_building_progress.GROUND_PROGRESS = null;
                //exec_building_progress.FIRST_PROGRESS = null;
                //exec_building_progress.SECOND_PROGRESS = null;
                //exec_building_progress.THIRD_PROGRESS = null;
                //exec_building_progress.COVERED_PARKING = null;
                //exec_building_progress.APPROACH_ROAD = null;

                exec_building_progress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                exec_building_progress.USERID = PMGSYSession.Current.UserId;

                dbContext.EXEC_BUILDING_PROGRESS.Add(exec_building_progress);
                dbContext.SaveChanges();
                message = "Foundation details saved successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "AddFoundationDetailsDAL.OptimisticConcurrencyException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException ex)
            {
                ErrorLog.LogError(ex, "AddFoundationDetailsDAL.UpdateException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddFoundationDetailsDAL()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public FoundationViewModel GetFoundationProgressDetailsDAL(int progressCode)
        {
            FoundationViewModel model = new FoundationViewModel();
            dbContext = new PMGSYEntities();
            try
            {
                var query = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.EXEC_PROG_CODE == progressCode).FirstOrDefault();

                if (query != null)
                {
                    model.Year = query.EXEC_PROG_YEAR;
                    model.Month = query.EXEC_PROG_MONTH;
                    model.SubComponent = query.ITEM_CODE;
                    model.Foundation = string.IsNullOrEmpty(query.ITEM_PROGRESS) ? query.ITEM_PROGRESS : query.ITEM_PROGRESS.Trim();
                }

                return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetFoundationProgressDetailsDAL()");
                return null;
            }
        }

        public bool EditFoundationDetailsDAL(FoundationViewModel model, ref string message)
        {
            Dictionary<string, string> decryptedParameters = null;
            string[] param = null;
            int progressCode = 0, imsPrRoadCode = 0;
            try
            {
                dbContext = new PMGSYEntities();

                param = model.EncrProgressCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                if (decryptedParameters.Count() > 0)
                {
                    progressCode = Convert.ToInt32(decryptedParameters["ProgressCode"]);
                }

                param = model.EncrProposalCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                if (decryptedParameters.Count() > 0)
                {
                    imsPrRoadCode = Convert.ToInt32(decryptedParameters["ProposalCode"]);
                }

                if (
                    (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && x.ITEM_CODE == 14) && model.SubComponent == 15)
                    || (dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.EXEC_PROG_CODE == progressCode).Select(z => z.ITEM_CODE).FirstOrDefault() == 14 && model.SubComponent == 15)
                    )
                {
                    message = "Details can be entered after Below Plinth level progress entry.";
                    return false;
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && x.ITEM_CODE == 15 && x.EXEC_PROG_CODE < progressCode) && model.SubComponent != 15)
                {
                    message = "Please select item as At Plinth level.";
                    return false;
                }

                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Foundation" && x.ITEM_PROGRESS.Trim() == "Y" && x.EXEC_PROG_CODE < progressCode
                    && x.ITEM_CODE == model.SubComponent) && model.Foundation != "Y")
                {
                    message = "Please select Item progress as Yes.";
                    return false;
                }

                EXEC_BUILDING_PROGRESS exec_building_progress = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.EXEC_PROG_CODE == progressCode).FirstOrDefault();
                //exec_building_progress.IMS_PR_ROAD_CODE = imsPrRoadCode;
                if (exec_building_progress != null)
                {
                    exec_building_progress.ITEM_CODE = model.SubComponent;
                    exec_building_progress.ITEM_PROGRESS = model.Foundation;

                    exec_building_progress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    exec_building_progress.USERID = PMGSYSession.Current.UserId;

                    dbContext.Entry(exec_building_progress).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "Foundation details updated successfully.";
                }
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "EditFoundationDetailsDAL.OptimisticConcurrencyException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException ex)
            {
                ErrorLog.LogError(ex, "EditFoundationDetailsDAL.UpdateException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditFoundationDetailsDAL()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteFoundationDetailsDAL(int progressCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                EXEC_BUILDING_PROGRESS exec_building_progress = dbContext.EXEC_BUILDING_PROGRESS.Find(progressCode);

                if (dbContext.EXEC_BUILDING_PROGRESS.Where(z => z.IMS_PR_ROAD_CODE == exec_building_progress.IMS_PR_ROAD_CODE && z.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure").Any())
                {
                    message = "Earthwork Excavation PCC details can not be deleted as Superstructure details are entered for the road.";
                    return false;
                }

                dbContext.EXEC_BUILDING_PROGRESS.Remove(exec_building_progress);
                dbContext.SaveChanges();
                message = "Foundation details deleted successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "");
                message = "Error occured while deleting Foundation details.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        ///Superstructure Layout
        public Array GetSuperstructureDetailsListDAL(int proposalCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();

            int yearCode = 0;
            int monthCode = 0;

            try
            {
                if ((dbContext.EXEC_BUILDING_PROGRESS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode)))
                {
                    yearCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure").Max(y => y.EXEC_PROG_YEAR));
                    monthCode = (dbContext.EXEC_BUILDING_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.EXEC_PROG_YEAR == yearCode && m.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure").Max(s => s.EXEC_PROG_MONTH));
                }

                var lstExecution = (from item in dbContext.EXEC_BUILDING_PROGRESS
                                    where item.IMS_PR_ROAD_CODE == proposalCode
                                        //&& (item.ITEM_CODE >= 1 && item.ITEM_CODE <= 12)
                                          && item.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                                    select new
                                    {
                                        item.EXEC_PROG_CODE,
                                        item.IMS_PR_ROAD_CODE,
                                        item.EXEC_PROG_MONTH,
                                        item.EXEC_PROG_YEAR,
                                        ITEM_CODE = item.MASTER_BUILDING_EXECUTION_ITEMS.ITEM_SUB_COMPONENT,
                                        ITEM_PROGRESS = item.ITEM_PROGRESS == "Y" ? "Yes" : item.ITEM_PROGRESS == "N" ? "No" : "Not Applicable",
                                        //floor = item.GROUND_PROGRESS != null ? "Ground Floor" : item.FIRST_PROGRESS != null ? "First Floor" : item.SECOND_PROGRESS != null ? "Second Floor" : item.THIRD_PROGRESS != null ? "Third Floor"
                                        //        : item.COVERED_PARKING != null ? "Covered Parking" : "Approach Road",
                                        GROUND_PROGRESS = item.ITEM_CODE == 12 ? "-" : (item.GROUND_PROGRESS == "Y" ? "Yes" : item.GROUND_PROGRESS == "N" ? "No" : "Not Applicable"),
                                        FIRST_PROGRESS = item.ITEM_CODE == 12 ? "-" : (item.FIRST_PROGRESS == "Y" ? "Yes" : item.FIRST_PROGRESS == "N" ? "No" : "Not Applicable"),
                                        SECOND_PROGRESS = item.ITEM_CODE == 12 ? "-" : (item.SECOND_PROGRESS == "Y" ? "Yes" : item.SECOND_PROGRESS == "N" ? "No" : "Not Applicable"),
                                        THIRD_PROGRESS = item.ITEM_CODE == 12 ? "-" : (item.THIRD_PROGRESS == "Y" ? "Yes" : item.THIRD_PROGRESS == "N" ? "No" : "Not Applicable"),

                                        COVERED_PARKING = item.ITEM_CODE == 12 ? (item.COVERED_PARKING == "Y" ? "Yes" : item.COVERED_PARKING == "N" ? "No" : "Not Applicable") : "-",
                                        APPROACH_ROAD = item.ITEM_CODE == 12 ? (item.APPROACH_ROAD == "Y" ? "Yes" : item.APPROACH_ROAD == "N" ? "No" : "Not Applicable") : "-",
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        //switch (sidx)
                        //{
                        //    case "MAST_BLOCK_NAME":
                        //        lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    case "IMS_PACKAGE_ID":
                        //        lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    case "IMS_ROAD_NAME":
                        //        lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //    default:
                        //        lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //        break;
                        //}
                        lstExecution = lstExecution.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        //switch (sidx)
                        //{
                        //case "MAST_BLOCK_NAME":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //case "IMS_PACKAGE_ID":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //case "IMS_ROAD_NAME":
                        //    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        //default:
                        //    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //    break;
                        lstExecution = lstExecution.OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                        //}
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderBy(m => m.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.EXEC_PROG_CODE,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.EXEC_PROG_MONTH,
                    executionDetails.EXEC_PROG_YEAR,
                    executionDetails.ITEM_CODE,
                    executionDetails.ITEM_PROGRESS,
                    executionDetails.GROUND_PROGRESS,
                    executionDetails.FIRST_PROGRESS,
                    executionDetails.SECOND_PROGRESS,
                    executionDetails.THIRD_PROGRESS,
                    executionDetails.COVERED_PARKING,
                    executionDetails.APPROACH_ROAD,

                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.EXEC_PROG_MONTH == 1?"January":(m.EXEC_PROG_MONTH == 2?"February":(m.EXEC_PROG_MONTH == 3?"March":(m.EXEC_PROG_MONTH == 4?"April":(m.EXEC_PROG_MONTH == 5?"May":(m.EXEC_PROG_MONTH == 6?"June":(m.EXEC_PROG_MONTH ==                                                           7?"July":m.EXEC_PROG_MONTH == 8?"August":(m.EXEC_PROG_MONTH == 9?"September":(m.EXEC_PROG_MONTH == 10?"October":(m.EXEC_PROG_MONTH == 11?"November":"December"))))))))),
                        m.EXEC_PROG_YEAR.ToString(),
                        m.ITEM_CODE.Trim(),
                        m.ITEM_PROGRESS,
                        m.GROUND_PROGRESS,
                        m.FIRST_PROGRESS,
                        m.SECOND_PROGRESS,
                        m.THIRD_PROGRESS,
                        m.COVERED_PARKING,
                        m.APPROACH_ROAD,

                       (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)
                                ? "<a href='#' title='Click here to edit Superstructure Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditSuperstructureProgress('" +                                                                                                            URLEncrypt.EncryptParameters1(new string[]{"ProgressCode="+m.EXEC_PROG_CODE.ToString().Trim(),"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString                                   ().Trim()}) +"'); return false;'>Edit</a>"
                                : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        (m.EXEC_PROG_MONTH==monthCode && m.EXEC_PROG_YEAR==yearCode)
                                ? "<a href='#' title='Click here to delete Superstructure Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteSuperstructureProgress('" +                                                                                                           URLEncrypt.EncryptParameters1(new string[]{"ProgressCode="+m.EXEC_PROG_CODE.ToString().Trim(),"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString(),"Month="+m.EXEC_PROG_MONTH.ToString().Trim(),"Year="+m.EXEC_PROG_YEAR.ToString                                    ().Trim()}) +"'); return false;'>Delete</a>"
                                : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetSuperstructureDetailsListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddSuperstructureDetailsDAL(SuperstructureViewModel model, ref string message)
        {
            Dictionary<string, string> decryptedParameters = null;
            string[] param = null;
            CommonFunctions comm = new CommonFunctions();
            try
            {
                dbContext = new PMGSYEntities();

                param = model.EncrProposalCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                int imsPrRoadCode = 0;

                if (decryptedParameters.Count() > 0)
                {
                    imsPrRoadCode = Convert.ToInt32(decryptedParameters["ProposalCode"]);
                }
                #region Validations
                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode))
                {
                    var query = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode).OrderBy(z => z.EXEC_PROG_YEAR).ThenBy(c => c.EXEC_PROG_MONTH).Select(v => new { v.EXEC_PROG_MONTH, v.EXEC_PROG_YEAR }).FirstOrDefault();

                    if (((query.EXEC_PROG_YEAR * 12) + query.EXEC_PROG_MONTH) > ((model.Year * 12) + model.Month))
                    {
                        message = "Please select month and Year " + new System.Globalization.DateTimeFormatInfo().GetMonthName(query.EXEC_PROG_MONTH).Trim() + ", " + query.EXEC_PROG_YEAR + " and onwards";
                        return false;
                    }
                }

                //Check for Previous Month and Year
                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                    && ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)))
                {
                    message = "Record already exists please select Month and Year greater than pevious.";
                    return false;
                }

                //Check for Month and Year > current month
                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                    && ((model.Year * 12) + model.Month) > ((model.Year * 12) + DateTime.Now.Month))
                    || ((model.Year * 12) + model.Month) > ((DateTime.Now.Year * 12) + DateTime.Now.Month))
                {
                    message = "Please select Month and Year upto current month and year.";
                    return false;
                }

                ///Check for Item Progress other than Court yard
                if (model.SubComponent != 12)
                {
                    //Additional Validation for first entry for technology
                    if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure") && model.groundFloor == "N")
                    {
                        message = "Please select Ground Floor progress as Yes.";
                        return false;
                    }

                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        && x.GROUND_PROGRESS.Trim() == "Y") && model.groundFloor != "Y")
                    {
                        message = "Please select Ground Floor progress as Yes.";
                        return false;
                    }

                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        && x.FIRST_PROGRESS.Trim() == "Y") && model.firstFloor != "Y")
                    {
                        message = "Please select First Floor progress as Yes.";
                        return false;
                    }

                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        && x.SECOND_PROGRESS.Trim() == "Y") && model.secondFloor != "Y")
                    {
                        message = "Please select Second Floor progress as Yes.";
                        return false;
                    }

                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        && x.THIRD_PROGRESS.Trim() == "Y") && model.thirdFloor != "Y")
                    {
                        message = "Please select Third Floor progress as Yes.";
                        return false;
                    }
                }
                else
                {
                    ///Check for Item Progress for Court yard
                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        && x.COVERED_PARKING.Trim() == "Y") && model.coveredParking != "Y")
                    {
                        message = "Please select Covered Parking progress as Yes.";
                        return false;
                    }
                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        && x.APPROACH_ROAD.Trim() == "Y") && model.approachRoad != "Y")
                    {
                        message = "Please select Approach Road progress as Yes.";
                        return false;
                    }
                }
                #endregion
                #region Additional Validations
                if (/*model.firstFloor.Trim() == "Y" &&*/ (model.SubComponent > 4))
                {
                    if (model.thirdFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.THIRD_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for Third Floor";
                            return false;
                        }
                    }
                    else if (model.secondFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.SECOND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for Second Floor";
                            return false;
                        }
                    }
                    else if (model.firstFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.FIRST_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for First Floor";
                            return false;
                        }
                    }
                    else if (model.groundFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.GROUND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for Ground Floor";
                            return false;
                        }
                    }
                    else
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4))
                        {
                            message = "Details not saved as Plastering progress not entered";
                            return false;
                        }
                    }
                }
                if (/*model.firstFloor.Trim() == "Y" &&*/ (model.SubComponent > 1 && model.SubComponent <= 4))
                {
                    if (model.groundFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.GROUND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for Ground Floor";
                            return false;
                        }
                        //retsrict previous month entry
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.GROUND_PROGRESS == "Y" && ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)))
                        {
                            message = "Please select month greater than " + comm.getMonthText((short)model.Month) + ", " + model.Year + " for Ground Floor progress";
                            return false;
                        }
                    }
                    if (model.firstFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.FIRST_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for First Floor";
                            return false;
                        }
                        //retsrict previous month entry
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.GROUND_PROGRESS == "Y" && ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)))
                        {
                            message = "Please select month greater than " + comm.getMonthText((short)model.Month) + ", " + model.Year + " for Ground Floor progress";
                            return false;
                        }
                    }
                    if (model.secondFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.SECOND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for Second Floor";
                            return false;
                        }
                        //retsrict previous month entry
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.GROUND_PROGRESS == "Y" && ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)))
                        {
                            message = "Please select month greater than " + comm.getMonthText((short)model.Month) + ", " + model.Year + " for Ground Floor progress";
                            return false;
                        }
                    }
                    if (model.thirdFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.THIRD_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for Third Floor";
                            return false;
                        }
                        //retsrict previous month entry
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.GROUND_PROGRESS == "Y" && ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month)))
                        {
                            message = "Please select month greater than " + comm.getMonthText((short)model.Month) + ", " + model.Year + " for Ground Floor progress";
                            return false;
                        }
                    }
                    else
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered");
                            return false;
                        }
                    }
                }
                #endregion

                EXEC_BUILDING_PROGRESS exec_building_progress = new EXEC_BUILDING_PROGRESS();
                exec_building_progress.EXEC_PROG_CODE = dbContext.EXEC_BUILDING_PROGRESS.Any() ? (dbContext.EXEC_BUILDING_PROGRESS.Max(x => x.EXEC_PROG_CODE) + 1) : 1;
                exec_building_progress.IMS_PR_ROAD_CODE = imsPrRoadCode;
                exec_building_progress.EXEC_PROG_MONTH = model.Month;
                exec_building_progress.EXEC_PROG_YEAR = model.Year;

                exec_building_progress.ITEM_CODE = model.SubComponent;
                exec_building_progress.ITEM_PROGRESS = null;//model.Superstructure;

                exec_building_progress.GROUND_PROGRESS = model.SubComponent == 12 ? null : model.groundFloor;
                exec_building_progress.FIRST_PROGRESS = model.SubComponent == 12 ? null : model.firstFloor;
                exec_building_progress.SECOND_PROGRESS = model.SubComponent == 12 ? null : model.secondFloor;
                exec_building_progress.THIRD_PROGRESS = model.SubComponent == 12 ? null : model.thirdFloor;

                exec_building_progress.COVERED_PARKING = model.SubComponent == 12 ? model.coveredParking : null;
                exec_building_progress.APPROACH_ROAD = model.SubComponent == 12 ? model.approachRoad : null;

                exec_building_progress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                exec_building_progress.USERID = PMGSYSession.Current.UserId;

                dbContext.EXEC_BUILDING_PROGRESS.Add(exec_building_progress);
                dbContext.SaveChanges();
                message = "Superstructure details saved successfully.";
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "AddSuperstructureDetailsDAL.OptimisticConcurrencyException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException ex)
            {
                ErrorLog.LogError(ex, "AddSuperstructureDetailsDAL.UpdateException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddSuperstructureDetailsDAL()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public SuperstructureViewModel GetSuperstructureProgressDetailsDAL(int progressCode)
        {
            SuperstructureViewModel model = new SuperstructureViewModel();
            dbContext = new PMGSYEntities();
            try
            {
                var query = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.EXEC_PROG_CODE == progressCode).FirstOrDefault();

                if (query != null)
                {
                    model.Year = query.EXEC_PROG_YEAR;
                    model.Month = query.EXEC_PROG_MONTH;
                    model.SubComponent = query.ITEM_CODE;

                    model.groundFloor = string.IsNullOrEmpty(query.GROUND_PROGRESS) ? query.GROUND_PROGRESS : query.GROUND_PROGRESS.Trim();

                    model.firstFloor = string.IsNullOrEmpty(query.FIRST_PROGRESS) ? query.FIRST_PROGRESS : query.FIRST_PROGRESS.Trim();
                    model.secondFloor = string.IsNullOrEmpty(query.SECOND_PROGRESS) ? query.SECOND_PROGRESS : query.SECOND_PROGRESS.Trim();
                    model.thirdFloor = string.IsNullOrEmpty(query.THIRD_PROGRESS) ? query.THIRD_PROGRESS : query.THIRD_PROGRESS.Trim();
                    model.coveredParking = string.IsNullOrEmpty(query.COVERED_PARKING) ? query.COVERED_PARKING : query.COVERED_PARKING.Trim();
                    model.approachRoad = string.IsNullOrEmpty(query.APPROACH_ROAD) ? query.APPROACH_ROAD : query.APPROACH_ROAD.Trim();
                }

                return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetSuperstructureProgressDetailsDAL()");
                return null;
            }
        }

        public bool EditSuperstructureDetailsDAL(SuperstructureViewModel model, ref string message)
        {
            Dictionary<string, string> decryptedParameters = null;
            string[] param = null;
            int progressCode = 0, imsPrRoadCode = 0;
            try
            {
                dbContext = new PMGSYEntities();

                param = model.EncrProgressCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                if (decryptedParameters.Count() > 0)
                {
                    progressCode = Convert.ToInt32(decryptedParameters["ProgressCode"]);
                }

                param = model.EncrProposalCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { param[0], param[1], param[2] });
                if (decryptedParameters.Count() > 0)
                {
                    imsPrRoadCode = Convert.ToInt32(decryptedParameters["ProposalCode"]);
                }
                #region Validations
                //Check for Previous Month and Year
                if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                    //&& ((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) >= ((model.Year * 12) + model.Month))
                    && x.EXEC_PROG_CODE != progressCode && x.EXEC_PROG_YEAR == model.Year && x.EXEC_PROG_MONTH == model.Month)
                    )
                {
                    message = "Record already exists for selected Month and Year and subcomponent.";
                    return false;
                }

                //Check for Month and Year > current month
                //if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                //    && ((model.Year * 12) + model.Month) > ((model.Year * 12) + DateTime.Now.Month)))
                //{
                //    message = "Please select Month and Year upto current month and year.";
                //    return false;
                //}

                ///Check for Item Progress
                if (model.SubComponent != 12)
                {
                    //Additional Validation for first entry for technology
                    if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure") && model.groundFloor == "N")
                    {
                        message = "Please select Ground Floor progress as Yes.";
                        return false;
                    }
                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        //&& x.EXEC_PROG_CODE < progressCode
                        && x.EXEC_PROG_CODE != progressCode && (((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) < ((model.Year * 12) + model.Month))
                        && x.GROUND_PROGRESS.Trim() == "Y") && model.groundFloor != "Y")
                    {
                        message = "Please select Ground Floor progress as Yes.";
                        return false;
                    }

                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        //&& x.EXEC_PROG_CODE < progressCode
                        && x.EXEC_PROG_CODE != progressCode && (((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) < ((model.Year * 12) + model.Month))
                        && x.FIRST_PROGRESS.Trim() == "Y") && model.firstFloor != "Y")
                    {
                        message = "Please select First Floor progress as Yes.";
                        return false;
                    }

                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        //&& x.EXEC_PROG_CODE < progressCode
                        && x.EXEC_PROG_CODE != progressCode && (((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) < ((model.Year * 12) + model.Month))
                        && x.SECOND_PROGRESS.Trim() == "Y") && model.secondFloor != "Y")
                    {
                        message = "Please select Second Floor progress as Yes.";
                        return false;
                    }

                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        //&& x.EXEC_PROG_CODE < progressCode
                        && x.EXEC_PROG_CODE != progressCode && (((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) < ((model.Year * 12) + model.Month))
                        && x.THIRD_PROGRESS.Trim() == "Y") && model.thirdFloor != "Y")
                    {
                        message = "Please select Third Floor progress as Yes.";
                        return false;
                    }
                }
                else
                {
                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        //&& x.EXEC_PROG_CODE < progressCode
                        && x.EXEC_PROG_CODE != progressCode && (((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) < ((model.Year * 12) + model.Month))
                        && x.COVERED_PARKING.Trim() == "Y") && model.coveredParking != "Y")
                    {
                        message = "Please select Covered Parking progress as Yes.";
                        return false;
                    }
                    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.ITEM_CODE == model.SubComponent && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure"
                        //&& x.EXEC_PROG_CODE < progressCode
                        && x.EXEC_PROG_CODE != progressCode && (((x.EXEC_PROG_YEAR * 12) + x.EXEC_PROG_MONTH) < ((model.Year * 12) + model.Month))
                        && x.APPROACH_ROAD.Trim() == "Y") && model.approachRoad != "Y")
                    {
                        message = "Please select Approach Road progress as Yes.";
                        return false;
                    }
                }
                #endregion

                #region Additional Validations
                if (/*model.firstFloor.Trim() == "Y" &&*/ (model.SubComponent > 4))
                {
                    if (model.thirdFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.THIRD_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for Third Floor";
                            return false;
                        }
                    }
                    else if (model.secondFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.SECOND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for Second Floor";
                            return false;
                        }
                    }
                    else if (model.firstFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.FIRST_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for First Floor";
                            return false;
                        }
                    }
                    else if (model.groundFloor.Trim() == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4 && x.GROUND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as Plastering progress not entered for Ground Floor";
                            return false;
                        }
                    }
                    else
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == 4))
                        {
                            message = "Details not saved as Plastering progress not entered";
                            return false;
                        }
                    }
                }
                if (/*model.firstFloor.Trim() == "Y" &&*/ (model.SubComponent >= 1 && model.SubComponent <= 4))
                {
                    if (model.thirdFloor == "N")
                    {
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent + 1)
                            && x.THIRD_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 1 ? "Beam & Slab Casting progress is entered." : model.SubComponent == 2 ? "Brick Work progress is entered." : model.SubComponent == 3 ? "Plastering progress is entered"
                                 : "Flooring")
                                + " for Third Floor";
                            return false;
                        }
                    }
                    if (model.secondFloor == "N")
                    {
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent + 1)
                            && x.SECOND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 1 ? "Beam & Slab Casting progress is entered." : model.SubComponent == 2 ? "Brick Work progress is entered." : model.SubComponent == 3 ? "Plastering progress is entered"
                                 : "Flooring")
                                + " for Second Floor";
                            return false;
                        }
                    }
                    if (model.firstFloor == "N")
                    {
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent + 1)
                            && x.FIRST_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 1 ? "Beam & Slab Casting progress is entered." : model.SubComponent == 2 ? "Brick Work progress is entered." : model.SubComponent == 3 ? "Plastering progress is entered"
                                 : "Flooring")
                                + " for First Floor";
                            return false;
                        }
                    }
                    if (model.groundFloor == "N")
                    {
                        if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent + 1)
                            && x.GROUND_PROGRESS == "Y"))
                        {
                            message = "Details not updated as " +
                                (model.SubComponent == 1 ? "Beam & Slab Casting progress is entered." : model.SubComponent == 2 ? "Brick Work progress is entered." : model.SubComponent == 3 ? "Plastering progress is entered"
                                 : "Flooring")
                                + " for Ground Floor";
                            return false;
                        }
                    }
                    //else
                    //{
                    //    if (dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent + 1)))
                    //    {
                    //        message = "Details not saved as " +
                    //            (model.SubComponent == 1 ? "Beam & Slab Casting progress is entered." : model.SubComponent == 2 ? "Brick Work progress is entered." : model.SubComponent == 3 ? "Plastering progress is entered"
                    //             : "Flooring");
                    //        return false;
                    //    }
                    //}

                    if (model.thirdFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.THIRD_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for Third Floor";
                            return false;
                        }
                    }
                    if (model.secondFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.SECOND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for Second Floor";
                            return false;
                        }
                    }
                    if (model.firstFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.FIRST_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for First Floor";
                            return false;
                        }
                    }
                    if (model.groundFloor == "Y")
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)
                            && x.GROUND_PROGRESS == "Y"))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered")
                                + " for Ground Floor";
                            return false;
                        }
                    }
                    else
                    {
                        if (!dbContext.EXEC_BUILDING_PROGRESS.Any(x => x.IMS_PR_ROAD_CODE == imsPrRoadCode && x.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && x.ITEM_CODE == (model.SubComponent - 1)))
                        {
                            message = "Details not saved as " +
                                (model.SubComponent == 2 ? "Columns Casting progress not entered." : model.SubComponent == 3 ? "Beam & Slab Casting progress not entered." : model.SubComponent == 4 ? "Brick Work progress not entered."
                                : "Plastering progress not entered");
                            return false;
                        }
                    }
                }
                #endregion

                EXEC_BUILDING_PROGRESS exec_building_progress = dbContext.EXEC_BUILDING_PROGRESS.Where(x => x.EXEC_PROG_CODE == progressCode).FirstOrDefault();
                //exec_building_progress.IMS_PR_ROAD_CODE = imsPrRoadCode;
                if (exec_building_progress != null)
                {
                    exec_building_progress.ITEM_CODE = model.SubComponent;

                    exec_building_progress.GROUND_PROGRESS = model.SubComponent == 12 ? null : model.groundFloor;
                    exec_building_progress.FIRST_PROGRESS = model.SubComponent == 12 ? null : model.firstFloor;
                    exec_building_progress.SECOND_PROGRESS = model.SubComponent == 12 ? null : model.secondFloor;
                    exec_building_progress.THIRD_PROGRESS = model.SubComponent == 12 ? null : model.thirdFloor;

                    exec_building_progress.COVERED_PARKING = model.SubComponent == 12 ? model.coveredParking : null;
                    exec_building_progress.APPROACH_ROAD = model.SubComponent == 12 ? model.approachRoad : null;

                    exec_building_progress.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    exec_building_progress.USERID = PMGSYSession.Current.UserId;

                    dbContext.Entry(exec_building_progress).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "Superstructure details updated successfully.";
                }
                return true;
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "EditSuperstructureDetailsDAL.OptimisticConcurrencyException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (UpdateException ex)
            {
                ErrorLog.LogError(ex, "EditSuperstructureDetailsDAL.UpdateException()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditSuperstructureDetailsDAL()");
                message = "An Error Occured While proccessing your request";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteSuperstructureDetailsDAL(int progressCode, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                EXEC_BUILDING_PROGRESS exec_building_progress = dbContext.EXEC_BUILDING_PROGRESS.Find(progressCode);

                if (dbContext.EXEC_BUILDING_PROGRESS.Where(z => z.IMS_PR_ROAD_CODE == exec_building_progress.IMS_PR_ROAD_CODE && z.MASTER_BUILDING_EXECUTION_ITEMS.EXECUTION_ITEM.Trim() == "Superstructure" && z.ITEM_CODE > exec_building_progress.ITEM_CODE && ((z.EXEC_PROG_YEAR * 12) + z.EXEC_PROG_MONTH) > ((exec_building_progress.EXEC_PROG_YEAR * 12) + exec_building_progress.EXEC_PROG_MONTH)).Any())
                {
                    message = "Superstructure details can not be deleted as details are entered for the road.";
                    return false;
                }

                dbContext.EXEC_BUILDING_PROGRESS.Remove(exec_building_progress);
                dbContext.SaveChanges();
                message = "Superstructure details deleted successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "");
                message = "Error occured while deleting Superstructure details.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region Road Safety ATR

        #region Auditor's Submitted List
        public Array RSADALListSubmitted(int districtCode, int yearCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);
            bool flag = false;
            PMGSYEntities dbContext = new PMGSYEntities();



            string RoleName = PMGSYSession.Current.RoleName;
            int AdminNdCode = 0;
            if (RoleName.Equals("SQC") || RoleName.Equals("RSAuditor") || RoleName.Equals("RSAAuditorDistrict"))
            {
                AdminNdCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_DISTRICT_CODE == districtCode).Select(m => m.ADMIN_ND_CODE).FirstOrDefault();
            }
            else
            {
                AdminNdCode = PMGSYSession.Current.AdminNdCode;
            }

            try
            {
                if (RoleName.Equals("RSAuditor") || RoleName.Equals("RSAAuditorDistrict"))
                {

                    var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS

                                      //  join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                       // join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                        join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                        join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                        join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                        join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                        join rsaInspection in dbContext.EXEC_RSA_INSPECTION on item.IMS_PR_ROAD_CODE equals rsaInspection.IMS_PR_ROAD_CODE

                                        where
                                      //  master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                        item.IMS_SANCTIONED == "Y" &&
                                      //  master.TEND_AGREEMENT_TYPE == "C" &&
                                        (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                        (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                        (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                        (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                        item.MAST_DISTRICT_CODE == ((districtCode == -1 || districtCode == 0) ? item.MAST_DISTRICT_CODE : districtCode) && 
                                        //  (item.MAST_DPIU_CODE == AdminNdCode) &&
                                        item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                        && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                        && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)
                                        && rsaInspection.EXEC_RSA_AUDIT_SUB == "Y"

                                        select new
                                        {
                                            state.MAST_STATE_NAME,
                                            district.MAST_DISTRICT_NAME,
                                            block.MAST_BLOCK_NAME,
                                            item.IMS_PACKAGE_ID,
                                            item.IMS_BATCH,
                                            item.IMS_PR_ROAD_CODE,
                                            item.IMS_ROAD_NAME,
                                            item.IMS_BRIDGE_NAME,
                                            year.MAST_YEAR_TEXT,
                                            item.IMS_LOCK_STATUS,
                                            item.IMS_NO_OF_CDWORKS,
                                            item.IMS_NO_OF_BRIDGEWRKS,
                                            item.IMS_PROPOSAL_TYPE,
                                            ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P"?(item.IMS_SANCTIONED_PAV_AMT+item.IMS_SANCTIONED_CD_AMT+item.IMS_SANCTIONED_PW_AMT+
                                            //            item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                            ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                        : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                            //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                            ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                            MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                            EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                            EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                        }).Distinct();

                    totalRecords = lstExecution.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord.ToString() == "asc")
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }

                    var result = lstExecution.Select(executionDetails => new
                    {
                        executionDetails.MAST_STATE_NAME,
                        executionDetails.MAST_DISTRICT_NAME,
                        executionDetails.MAST_BLOCK_NAME,
                        executionDetails.IMS_ROAD_NAME,
                        executionDetails.IMS_PACKAGE_ID,
                        executionDetails.IMS_PR_ROAD_CODE,
                        executionDetails.IMS_NO_OF_CDWORKS,
                        executionDetails.IMS_NO_OF_BRIDGEWRKS,
                        executionDetails.IMS_PROPOSAL_TYPE,
                        executionDetails.IMS_LOCK_STATUS,
                        executionDetails.ROAD_COST,
                        executionDetails.ROAD_LENGTH,
                        executionDetails.MAINTENANCE_COST,
                        executionDetails.IMS_BATCH,
                        executionDetails.IMS_BRIDGE_NAME,
                        executionDetails.MAST_YEAR_TEXT,
                        executionDetails.EXEC_ISCOMPLETED,
                        flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                    }).ToArray();

                    return result.Select(m => new
                    {
                        id = m.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] 
                    {
                        m.MAST_STATE_NAME==null?string.Empty:m.MAST_STATE_NAME.ToString(),
                        m.MAST_DISTRICT_NAME==null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",
                        //m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>")
                        //                           : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>"),

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                                                   : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                                                   ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Inspection Date' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        


                        // RSA ATR Starts
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details</a>", // ATR By Auditor Details

                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsByPIU('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By PIU</a>", // Add ATR By PIU Details
                    
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsBySQC('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By SQC</a>", // Add ATR By SQC Details
                         // RSA ATR Ends
         


                        (dbContext.IMS_SANCTIONED_PROJECTS.Join(dbContext.EXEC_LOCATION_DETAILS,
                                                                sancProject=> sancProject.IMS_PR_ROAD_CODE,
                                                                locDetails=>locDetails.IMS_PR_ROAD_CODE,
                                                                (sancProject,locDetails)=>    new  {locDetails.IMS_PR_ROAD_CODE}).Where(c=>c.IMS_PR_ROAD_CODE== m.IMS_PR_ROAD_CODE).Any() )
                         ? "<a href='#' title='Click here to view Location Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewLocation('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                            :"-"
                    }
                    }).ToArray();
                }
                else
                {
                    var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                  //      join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                   //     join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                        join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                        join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                        join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                        join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                        join rsaInspection in dbContext.EXEC_RSA_INSPECTION on item.IMS_PR_ROAD_CODE equals rsaInspection.IMS_PR_ROAD_CODE

                                        where
                                   //     master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                        item.IMS_SANCTIONED == "Y" &&
                                   //     master.TEND_AGREEMENT_TYPE == "C" &&
                                        (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                        (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                        (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                        (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                        item.MAST_DISTRICT_CODE == ((districtCode == -1 || districtCode == 0) ? item.MAST_DISTRICT_CODE : districtCode) && 
                                        //   (item.MAST_DPIU_CODE == AdminNdCode) &&
                                        item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                        && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                        && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)

                                        select new
                                        {
                                            state.MAST_STATE_NAME,
                                            district.MAST_DISTRICT_NAME,
                                            block.MAST_BLOCK_NAME,
                                            item.IMS_PACKAGE_ID,
                                            item.IMS_BATCH,
                                            item.IMS_PR_ROAD_CODE,
                                            item.IMS_ROAD_NAME,
                                            item.IMS_BRIDGE_NAME,
                                            year.MAST_YEAR_TEXT,
                                            item.IMS_LOCK_STATUS,
                                            item.IMS_NO_OF_CDWORKS,
                                            item.IMS_NO_OF_BRIDGEWRKS,
                                            item.IMS_PROPOSAL_TYPE,
                                            ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P"?(item.IMS_SANCTIONED_PAV_AMT+item.IMS_SANCTIONED_CD_AMT+item.IMS_SANCTIONED_PW_AMT+
                                            //            item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                            ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                        : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                            //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                            ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                            MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                            EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                            EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                        }).Distinct();

                    totalRecords = lstExecution.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord.ToString() == "asc")
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }

                    var result = lstExecution.Select(executionDetails => new
                    {
                        executionDetails.MAST_STATE_NAME,
                        executionDetails.MAST_DISTRICT_NAME,
                        executionDetails.MAST_BLOCK_NAME,
                        executionDetails.IMS_ROAD_NAME,
                        executionDetails.IMS_PACKAGE_ID,
                        executionDetails.IMS_PR_ROAD_CODE,
                        executionDetails.IMS_NO_OF_CDWORKS,
                        executionDetails.IMS_NO_OF_BRIDGEWRKS,
                        executionDetails.IMS_PROPOSAL_TYPE,
                        executionDetails.IMS_LOCK_STATUS,
                        executionDetails.ROAD_COST,
                        executionDetails.ROAD_LENGTH,
                        executionDetails.MAINTENANCE_COST,
                        executionDetails.IMS_BATCH,
                        executionDetails.IMS_BRIDGE_NAME,
                        executionDetails.MAST_YEAR_TEXT,
                        executionDetails.EXEC_ISCOMPLETED,
                        flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                    }).ToArray();

                    return result.Select(m => new
                    {
                        id = m.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] 
                    {   m.MAST_STATE_NAME==null?string.Empty:m.MAST_STATE_NAME.ToString(),
                        m.MAST_DISTRICT_NAME==null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",
                        //m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>")
                        //                           : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>"),

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                                                   : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                                                   ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Inspection Date' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        


                        // RSA ATR Starts
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details</a>", // ATR By Auditor Details

                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsByPIU('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By PIU</a>", // Add ATR By PIU Details
                    
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsBySQC('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By SQC</a>", // Add ATR By SQC Details
                         // RSA ATR Ends
         


                        (dbContext.IMS_SANCTIONED_PROJECTS.Join(dbContext.EXEC_LOCATION_DETAILS,
                                                                sancProject=> sancProject.IMS_PR_ROAD_CODE,
                                                                locDetails=>locDetails.IMS_PR_ROAD_CODE,
                                                                (sancProject,locDetails)=>    new  {locDetails.IMS_PR_ROAD_CODE}).Where(c=>c.IMS_PR_ROAD_CODE== m.IMS_PR_ROAD_CODE).Any() )
                         ? "<a href='#' title='Click here to view Location Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewLocation('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                            :"-"
                    }
                    }).ToArray();
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "RSADALListSubmitted().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region Road List
        public Array RSADALList(int districtCode, int yearCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            DateTime stDate = new DateTime(2016, 04, 01);
            DateTime endDate = new DateTime(2017, 03, 31);
            bool flag = false;
            
            int currentStateCode = Convert.ToInt16(PMGSYSession.Current.StateCode);

            PMGSYEntities dbContext = new PMGSYEntities();

            string RoleName = PMGSYSession.Current.RoleName;
            int AdminNdCode = 0;
            if (RoleName.Equals("SQC") || RoleName.Equals("RSAuditor") || RoleName.Equals("RSAAuditorDistrict"))
            {
                AdminNdCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_DISTRICT_CODE == districtCode).Select(m => m.ADMIN_ND_CODE).FirstOrDefault();
            }
            else
            {
                AdminNdCode = PMGSYSession.Current.AdminNdCode;
            }

            try
            {
                if (RoleName.Equals("RSAuditor") || RoleName.Equals("RSAAuditorDistrict"))
                {

                    var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                      
                                        join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                        join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                        join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                        join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                             

                                        where
                             
                                        //item.IMS_SANCTIONED == "Y" &&
                                        (item.IMS_ISCOMPLETED != "E" && item.IMS_ISCOMPLETED != "H") &&
                                        (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                        (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                        (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                        (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&

                                        item.MAST_DISTRICT_CODE == ((districtCode == -1 || districtCode == 0) ? item.MAST_DISTRICT_CODE : districtCode) && 
                                       // (item.MAST_DPIU_CODE == AdminNdCode) &&

                                        item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme 
                                        && item.IMS_DPR_STATUS == "N" 
                                        && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)

                                        select new
                                        {
                                            state.MAST_STATE_NAME,
                                            district.MAST_DISTRICT_NAME,
                                            block.MAST_BLOCK_NAME,
                                            item.IMS_PACKAGE_ID,
                                            item.IMS_BATCH,
                                            item.IMS_PR_ROAD_CODE,
                                            item.IMS_ROAD_NAME,
                                            item.IMS_BRIDGE_NAME,
                                            year.MAST_YEAR_TEXT,
                                            item.IMS_LOCK_STATUS,
                                            item.IMS_NO_OF_CDWORKS,
                                            item.IMS_NO_OF_BRIDGEWRKS,
                                            item.IMS_PROPOSAL_TYPE,
                                            ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                          
                                            ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                        : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                           
                                            MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                            EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                            EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                        }).Distinct();
                                        
                    totalRecords = lstExecution.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord.ToString() == "asc")
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }

                    var result = lstExecution.Select(executionDetails => new
                    {
                        executionDetails.MAST_STATE_NAME,
                        executionDetails.MAST_DISTRICT_NAME,
                        executionDetails.MAST_BLOCK_NAME,
                        executionDetails.IMS_ROAD_NAME,
                        executionDetails.IMS_PACKAGE_ID,
                        executionDetails.IMS_PR_ROAD_CODE,
                        executionDetails.IMS_NO_OF_CDWORKS,
                        executionDetails.IMS_NO_OF_BRIDGEWRKS,
                        executionDetails.IMS_PROPOSAL_TYPE,
                        executionDetails.IMS_LOCK_STATUS,
                        executionDetails.ROAD_COST,
                        executionDetails.ROAD_LENGTH,
                        executionDetails.MAINTENANCE_COST,
                        executionDetails.IMS_BATCH,
                        executionDetails.IMS_BRIDGE_NAME,
                        executionDetails.MAST_YEAR_TEXT,
                        executionDetails.EXEC_ISCOMPLETED,
                        flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                    }).ToArray();

                    return result.Select(m => new
                    {
                        id = m.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] 
                    {
                        m.MAST_STATE_NAME==null?string.Empty:m.MAST_STATE_NAME.ToString(),
                        m.MAST_DISTRICT_NAME==null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",
                        //m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>")
                        //                           : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>"),

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                                                   : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                                                   ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Inspection Date' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        


                        // RSA ATR Starts
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details</a>", // ATR By Auditor Details

                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsByPIU('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By PIU</a>", // Add ATR By PIU Details
                    
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsBySQC('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By SQC</a>", // Add ATR By SQC Details
                         // RSA ATR Ends
         


                        (dbContext.IMS_SANCTIONED_PROJECTS.Join(dbContext.EXEC_LOCATION_DETAILS,
                                                                sancProject=> sancProject.IMS_PR_ROAD_CODE,
                                                                locDetails=>locDetails.IMS_PR_ROAD_CODE,
                                                                (sancProject,locDetails)=>    new  {locDetails.IMS_PR_ROAD_CODE}).Where(c=>c.IMS_PR_ROAD_CODE== m.IMS_PR_ROAD_CODE).Any() )
                         ? "<a href='#' title='Click here to view Location Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewLocation('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                            :"-"
                    }
                    }).ToArray();
                }
                else if (RoleName.Equals("PIU"))
                {


                    var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                     //   join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                     //   join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                        join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                        join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                        join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                        join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                        join rsaInspection in dbContext.EXEC_RSA_INSPECTION on item.IMS_PR_ROAD_CODE equals rsaInspection.IMS_PR_ROAD_CODE

                                        where
                                      //  master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                        //item.IMS_SANCTIONED == "Y" &&
                                       // master.TEND_AGREEMENT_TYPE == "C" &&
                                         (item.IMS_ISCOMPLETED != "E" && item.IMS_ISCOMPLETED != "H") &&
                                        (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                        (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                        (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                        (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                        item.MAST_DISTRICT_CODE == ((districtCode == -1 || districtCode == 0) ? item.MAST_DISTRICT_CODE : districtCode) && 
                                        //(item.MAST_DPIU_CODE == AdminNdCode) &&
                                        item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                        && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                        && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)
                                        && rsaInspection.EXEC_RSA_AUDIT_SUB == "Y" // Get Records Only Finalized by Auditor
                                        select new
                                        {
                                            //added for current state list
                                            state.MAST_STATE_CODE,
                                            state.MAST_STATE_NAME,
                                            district.MAST_DISTRICT_NAME,
                                            block.MAST_BLOCK_NAME,
                                            item.IMS_PACKAGE_ID,
                                            item.IMS_BATCH,
                                            item.IMS_PR_ROAD_CODE,
                                            item.IMS_ROAD_NAME,
                                            item.IMS_BRIDGE_NAME,
                                            year.MAST_YEAR_TEXT,
                                            item.IMS_LOCK_STATUS,
                                            item.IMS_NO_OF_CDWORKS,
                                            item.IMS_NO_OF_BRIDGEWRKS,
                                            item.IMS_PROPOSAL_TYPE,
                                            ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P"?(item.IMS_SANCTIONED_PAV_AMT+item.IMS_SANCTIONED_CD_AMT+item.IMS_SANCTIONED_PW_AMT+
                                            //            item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                            ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                        : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                            //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                            ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                            MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                            EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                            EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                        }).Distinct();

                    // Added  on 24-11-2022 for resolve show list of current state only
                    lstExecution = lstExecution.Where(s => s.MAST_STATE_CODE == currentStateCode);

                    totalRecords = lstExecution.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord.ToString() == "asc")
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }

                    var result = lstExecution.Select(executionDetails => new
                    {
                        executionDetails.MAST_STATE_NAME,
                        executionDetails.MAST_DISTRICT_NAME,
                        executionDetails.MAST_BLOCK_NAME,
                        executionDetails.IMS_ROAD_NAME,
                        executionDetails.IMS_PACKAGE_ID,
                        executionDetails.IMS_PR_ROAD_CODE,
                        executionDetails.IMS_NO_OF_CDWORKS,
                        executionDetails.IMS_NO_OF_BRIDGEWRKS,
                        executionDetails.IMS_PROPOSAL_TYPE,
                        executionDetails.IMS_LOCK_STATUS,
                        executionDetails.ROAD_COST,
                        executionDetails.ROAD_LENGTH,
                        executionDetails.MAINTENANCE_COST,
                        executionDetails.IMS_BATCH,
                        executionDetails.IMS_BRIDGE_NAME,
                        executionDetails.MAST_YEAR_TEXT,
                        executionDetails.EXEC_ISCOMPLETED,
                        flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                    }).ToArray();

                    return result.Select(m => new
                    {
                        id = m.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] 
                    {
                        m.MAST_STATE_NAME==null?string.Empty:m.MAST_STATE_NAME.ToString(),
                        m.MAST_DISTRICT_NAME==null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",
                        //m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>")
                        //                           : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>"),

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                                                   : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                                                   ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Inspection Date' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        


                        // RSA ATR Starts
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details</a>", // ATR By Auditor Details

                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsByPIU('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By PIU</a>", // Add ATR By PIU Details
                    
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsBySQC('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By SQC</a>", // Add ATR By SQC Details
                         // RSA ATR Ends
         


                        (dbContext.IMS_SANCTIONED_PROJECTS.Join(dbContext.EXEC_LOCATION_DETAILS,
                                                                sancProject=> sancProject.IMS_PR_ROAD_CODE,
                                                                locDetails=>locDetails.IMS_PR_ROAD_CODE,
                                                                (sancProject,locDetails)=>    new  {locDetails.IMS_PR_ROAD_CODE}).Where(c=>c.IMS_PR_ROAD_CODE== m.IMS_PR_ROAD_CODE).Any() )
                         ? "<a href='#' title='Click here to view Location Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewLocation('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                            :"-"
                    }
                    }).ToArray();
                }
                else
                { // SQC Records 

                    var lstExecution = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                   //     join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                    //   join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                        join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                        join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                        join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                        join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                        join rsaInspection in dbContext.EXEC_RSA_INSPECTION on item.IMS_PR_ROAD_CODE equals rsaInspection.IMS_PR_ROAD_CODE

                                        where
                                 //       master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                        //item.IMS_SANCTIONED == "Y" &&
                                  //      master.TEND_AGREEMENT_TYPE == "C" &&
                                         (item.IMS_ISCOMPLETED != "E" && item.IMS_ISCOMPLETED != "H") &&
                                        (yearCode == -1 ? 1 : item.IMS_YEAR) == (yearCode == -1 ? 1 : yearCode) &&
                                        (blockCode == -1 ? 1 : item.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode) &&
                                        (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                        (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                        item.MAST_DISTRICT_CODE == ((districtCode == -1 || districtCode == 0) ? item.MAST_DISTRICT_CODE : districtCode) && 
                                        //(item.MAST_DPIU_CODE == AdminNdCode) &&
                                        item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                        && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                        && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)
                                        && rsaInspection.EXEC_RSA_PIU_SUB == "Y" // Get Records Only Finalized By PIU
                                        select new
                                        {
                                            state.MAST_STATE_NAME,
                                            district.MAST_DISTRICT_NAME,
                                            block.MAST_BLOCK_NAME,
                                            item.IMS_PACKAGE_ID,
                                            item.IMS_BATCH,
                                            item.IMS_PR_ROAD_CODE,
                                            item.IMS_ROAD_NAME,
                                            item.IMS_BRIDGE_NAME,
                                            year.MAST_YEAR_TEXT,
                                            item.IMS_LOCK_STATUS,
                                            item.IMS_NO_OF_CDWORKS,
                                            item.IMS_NO_OF_BRIDGEWRKS,
                                            item.IMS_PROPOSAL_TYPE,
                                            ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P"?(item.IMS_SANCTIONED_PAV_AMT+item.IMS_SANCTIONED_CD_AMT+item.IMS_SANCTIONED_PW_AMT+
                                            //            item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                            //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                                            ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ? ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                        : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                            //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                            ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                            MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                            EXEC_ISCOMPLETED = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_ISCOMPLETED).FirstOrDefault(),
                                            EXEC_COMPLETION_DATE = item.EXEC_ROADS_MONTHLY_STATUS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).OrderByDescending(x => x.EXEC_PROG_YEAR).ThenByDescending(x => x.EXEC_PROG_MONTH).Select(x => x.EXEC_COMPLETION_DATE).FirstOrDefault(),
                                        }).Distinct();

                    totalRecords = lstExecution.Count();

                    if (sidx.Trim() != string.Empty)
                    {
                        if (sord.ToString() == "asc")
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                        else
                        {
                            switch (sidx)
                            {
                                case "MAST_BLOCK_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_PACKAGE_ID":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                case "IMS_ROAD_NAME":
                                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                                default:
                                    lstExecution = lstExecution.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                    break;
                            }
                        }
                    }
                    else
                    {
                        lstExecution = lstExecution.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }

                    var result = lstExecution.Select(executionDetails => new
                    {
                        executionDetails.MAST_STATE_NAME,
                        executionDetails.MAST_DISTRICT_NAME,
                        executionDetails.MAST_BLOCK_NAME,
                        executionDetails.IMS_ROAD_NAME,
                        executionDetails.IMS_PACKAGE_ID,
                        executionDetails.IMS_PR_ROAD_CODE,
                        executionDetails.IMS_NO_OF_CDWORKS,
                        executionDetails.IMS_NO_OF_BRIDGEWRKS,
                        executionDetails.IMS_PROPOSAL_TYPE,
                        executionDetails.IMS_LOCK_STATUS,
                        executionDetails.ROAD_COST,
                        executionDetails.ROAD_LENGTH,
                        executionDetails.MAINTENANCE_COST,
                        executionDetails.IMS_BATCH,
                        executionDetails.IMS_BRIDGE_NAME,
                        executionDetails.MAST_YEAR_TEXT,
                        executionDetails.EXEC_ISCOMPLETED,
                        flag = executionDetails.EXEC_COMPLETION_DATE.HasValue ? (executionDetails.EXEC_COMPLETION_DATE.Value >= stDate && executionDetails.EXEC_COMPLETION_DATE.Value <= endDate) : false,
                    }).ToArray();

                    return result.Select(m => new
                    {
                        id = m.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] 
                    {
                        m.MAST_STATE_NAME==null?string.Empty:m.MAST_STATE_NAME.ToString(),
                        m.MAST_DISTRICT_NAME==null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) : (m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString()) + " ( " + (m.IMS_BRIDGE_NAME == null?string.Empty:m.IMS_BRIDGE_NAME.ToString()) + " )" ,
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),

                        ///Added by SAMMED PATIL for addtional column for Convergence of Technology restrict entry if work is completed in 2016 financial year
                        (m.EXEC_ISCOMPLETED == "C" && m.flag == true) ? "-" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>",
                        //m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>")
                        //                           : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") == true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Technology Convergence Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyConvergenceDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Convergence of Technology</a>"),

                        (dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C") : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))
                        )?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":m.IMS_NO_OF_CDWORKS==0?"<span>-</span>":"<a href='#' title='Click here to add CDWorks Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddCDWorksDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>"+m.IMS_NO_OF_CDWORKS.ToString()+"</a>",
                        
                        //dbContext.MANE_IMS_CONTRACT.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        //dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")==true?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(m.IMS_PROPOSAL_TYPE=="P"?"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>":"<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),
                        m.IMS_PROPOSAL_TYPE == "P" ? (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to add Physical Road Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>")
                                                   : (dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C")== true ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to add Physical LSB Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddPhysicalLSBDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Physical Details</a>"),

                                                   ///Added by SAMMED A PATIL on 03MAR2017 as per new requirement for Habitation Details Progress 
                        m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C").Any()
                            ? "-"
                            : "<a href='#' title='Click here to add Habitation Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddHabitationDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add Habitation Details</a>"
                        : "-",
                                                   //Change by SAMMED A PATIL on 28 OCT 2016 as per new requirement for Technology Progress 
                        dbContext.IMS_PROPOSAL_TECH.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE).Any() 
                        // (dbContext.EXEC_TECH_MONTHLY_STATUS.Where(x=>x.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE /*&& x.EXEC_ISCOMPLETED == "C"*/).Any() ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : 
                        ? "<a href='#' title='Click here to add Technology Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                        : "-",

                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim(),"Operation="+"P"}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //(dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        //URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}), //change done on 27 May 2014 
                        URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        (dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(a => a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))||(dbContext.EXEC_LSB_MONTHLY_STATUS.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE && a.EXEC_ISCOMPLETED == "C"))?string.Empty:URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}),
                        
                        ///Added by SAMMED PATIL for addtional column for Road Safety
                        "<a href='#' title='Click here to add Inspection Date' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRoadSafety('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Road Safety</a>",
                        


                        // RSA ATR Starts
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=ViewExecutionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details</a>", // ATR By Auditor Details

                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsByPIU('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By PIU</a>", // Add ATR By PIU Details
                    
                        "<a href='#' title='Click here to add Audit Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsBySQC('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Audit Details By SQC</a>", // Add ATR By SQC Details
                         // RSA ATR Ends
         


                        (dbContext.IMS_SANCTIONED_PROJECTS.Join(dbContext.EXEC_LOCATION_DETAILS,
                                                                sancProject=> sancProject.IMS_PR_ROAD_CODE,
                                                                locDetails=>locDetails.IMS_PR_ROAD_CODE,
                                                                (sancProject,locDetails)=>    new  {locDetails.IMS_PR_ROAD_CODE}).Where(c=>c.IMS_PR_ROAD_CODE== m.IMS_PR_ROAD_CODE).Any() )
                         ? "<a href='#' title='Click here to view Location Details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewLocation('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'></a>"
                            :"-"
                    }
                    }).ToArray();


                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "RSADALList().ExecutionDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion Road List

        #region List

        public Array GetInspectionDetailsDALList(int page, int rows, string sidx, string sord, out long totalRecords, int RASCode)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                List<USP_GET_RSA_ATR_LIST_Result> cdWorksList = new List<USP_GET_RSA_ATR_LIST_Result>();
                cdWorksList = dbContext.USP_GET_RSA_ATR_LIST(RASCode).ToList<USP_GET_RSA_ATR_LIST_Result>();
                totalRecords = cdWorksList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        cdWorksList = cdWorksList.OrderBy(x => x.EXEC_RSA_ACTION_TAKEN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        cdWorksList = cdWorksList.OrderByDescending(x => x.EXEC_RSA_ACTION_TAKEN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    cdWorksList = cdWorksList.OrderBy(x => x.EXEC_RSA_ACTION_TAKEN).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var gridData = cdWorksList.Select(listDetails => new
                {
                    listDetails.EXEC_RSA_START_CHAINAGE,
                    listDetails.EXEC_RSA_END_CHAINAGE,
                    listDetails.EXEC_RSA_SAFETY_ISSUE,
                    listDetails.EXEC_RSA_RECOMMENDATION,
                    listDetails.IMS_ROAD_STATUS,
                    listDetails.EXEC_RSA_ID,
                    listDetails.EXEC_RSA_GRADE,



                    listDetails.EXEC_RSA_REC_ACCP,
                    listDetails.EXEC_RSA_ACTION_TAKEN,
                    listDetails.EXEC_ATR_DATE,

                    listDetails.EXEC_ATR_ACCEPT_SQC,
                    listDetails.EXEC_ATR_ACCEPT_SQC_DATE,
                    listDetails.EXEC_RSA_GRADE_REVISED,
                    listDetails.EXEC_ATR_STATUS,
                    listDetails.EXEC_RSA_ATR_ID,

                    listDetails.AUDITOR_FINALIZED,
                    listDetails.AUDITOR_FINALIZED_DATE,
                    listDetails.PIU_FINALIZED,
                    listDetails.PIU_FINALIZED_DATE,
                    listDetails.SQC_FINALIZED,
                    listDetails.SQC_FINALIZED_DATE


                }).ToArray();

                return gridData.Select(listDetails => new
                {
                    id = listDetails.EXEC_RSA_ID.ToString(),
                    cell = new[]
                    {
                        // Auditor
                        listDetails.EXEC_RSA_START_CHAINAGE.ToString(),
                        listDetails.EXEC_RSA_END_CHAINAGE.ToString(),
                        listDetails.EXEC_RSA_SAFETY_ISSUE.ToString(),
                        listDetails.EXEC_RSA_RECOMMENDATION.ToString(),
                        listDetails.IMS_ROAD_STATUS.Equals("E")?"Essential":(  listDetails.IMS_ROAD_STATUS.Equals("H")?"Highly Desirable":"Desirable"),
                        listDetails.EXEC_RSA_GRADE.Equals("S")?"Medium":(  listDetails.EXEC_RSA_GRADE.Equals("U")?"Very High":"High"),
                        "<a href='#' title='Click here to View / Upload Image' class='ui-icon ui-icon-image ui-align-center' onClick=UploadPhotoByAuditor('" +URLEncrypt.EncryptParameters1(new string[] { "RSAId=" + listDetails.EXEC_RSA_ID.ToString().Trim() })+"'); return false;'>Upload Photo Auditor</a>",
                        listDetails.AUDITOR_FINALIZED=="Y"?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":"<a href='#' title='Click here to Delete Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteDetailsByAuditor('" +URLEncrypt.EncryptParameters1(new string[] { "RSAId=" + listDetails.EXEC_RSA_ID.ToString().Trim() })+"'); return false;'>Delete</a>",

                        // PIU
                         listDetails.PIU_FINALIZED=="Y"?"Forwarded To SQC": "<a href='#' title='Click here to add ATR' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsByPIUJavaScript('" +URLEncrypt.EncryptParameters1(new string[] { "RSAId=" + listDetails.EXEC_RSA_ID.ToString().Trim() }) +"'); return false;'>Add Details</a>",
                         listDetails.EXEC_RSA_REC_ACCP==null?"-":(listDetails.EXEC_RSA_REC_ACCP.Equals("Y")?"Yes":"No"),
                         listDetails.EXEC_RSA_ACTION_TAKEN==null?"-":(listDetails.EXEC_RSA_ACTION_TAKEN.ToString().Trim()),
                         listDetails.EXEC_ATR_DATE==null?"-":(listDetails.EXEC_ATR_DATE.ToString().Substring(0, 10)),
                         (listDetails.EXEC_RSA_ATR_ID==null || listDetails.EXEC_RSA_ATR_ID==0)?"-":("<a href='#' title='Click here to View / Upload File' class='ui-icon ui-icon-image ui-align-center' onClick=UploadPhotoByPIU('" +URLEncrypt.EncryptParameters1(new string[] { "ATRId=" + listDetails.EXEC_RSA_ATR_ID.ToString().Trim() }) +"'); return false;'>Upload Photo PIU</a>"),


                         // SQC
                          ((listDetails.EXEC_RSA_ATR_ID==null || listDetails.EXEC_RSA_ATR_ID==0)?"-": "<a href='#' title='Click here to View ATR File Uploaded By PIU' class='ui-icon ui-icon-image ui-align-center' onClick=ViewPdfUploadedByPIU('" +URLEncrypt.EncryptParameters1(new string[] { "ATRId=" + listDetails.EXEC_RSA_ATR_ID.ToString().Trim() }) +"'); return false;'>View</a>"),


                         listDetails.SQC_FINALIZED=="Y"?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":((listDetails.EXEC_RSA_ATR_ID==null || listDetails.EXEC_RSA_ATR_ID==0)?"-": "<a href='#' title='Click here to add ATR' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddDetailsBySQCJavaScript('" +URLEncrypt.EncryptParameters1(new string[] { "ATRId=" + listDetails.EXEC_RSA_ATR_ID.ToString().Trim() }) +"'); return false;'>Add Details</a>"),
                         listDetails.EXEC_ATR_ACCEPT_SQC==null?"-":(listDetails.EXEC_ATR_ACCEPT_SQC.Equals("Y")?"Yes":"No"),
                         listDetails.EXEC_ATR_ACCEPT_SQC_DATE==null?"-":(listDetails.EXEC_ATR_ACCEPT_SQC_DATE.ToString().Substring(0, 10)),
                         listDetails.EXEC_RSA_GRADE_REVISED==null?"-":( listDetails.EXEC_RSA_GRADE_REVISED.Equals("S")?"Satisfactory":(  listDetails.EXEC_RSA_GRADE_REVISED.Equals("U")?"Unsatisfactory":"Required Improvement")),
                        listDetails.SQC_FINALIZED=="Y"?"<span class='ui-icon ui-icon-locked ui-align-center'></span>":(listDetails.EXEC_RSA_ATR_ID==null || listDetails.EXEC_RSA_ATR_ID==0)?"-":((listDetails.EXEC_ATR_STATUS==null)?  "<a href='#' title='Click here to finalize details' class='ui-icon ui-icon-unlocked ui-align-center' onClick=FinalizeBySQC('" +URLEncrypt.EncryptParameters1(new string[] { "ATRId=" + listDetails.EXEC_RSA_ATR_ID.ToString().Trim() }) +"'); return false;'>Finalize</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>")
                        

                       // "<a href='#' title='Click here to delete Inspection Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteInspectionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"RSACode="+listDetails.EXEC_RSA_ID.ToString().Trim()}) +"'); return false;'>Add Remarks</a>",
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetInspectionDetailsDALList().ExecutionDAL");
                throw;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region Auditor's Save Methods
        public bool AddRSADAL(RSAInspectionDetails model, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                int EXEC_RSA_CODE = 0;

                if (dbContext.EXEC_RSA_INSPECTION.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE).Any())
                {
                    message = "Road Details and its Inspection Date is already added .";
                    return false;
                }

                if (dbContext.EXEC_RSA_INSPECTION.Any())
                {
                    EXEC_RSA_CODE = dbContext.EXEC_RSA_INSPECTION.Select(m => m.EXEC_RSA_CODE).Max();
                }
                else
                {
                    EXEC_RSA_CODE = 0;
                }

                ++EXEC_RSA_CODE;

                EXEC_RSA_INSPECTION masterInspection = new EXEC_RSA_INSPECTION();
                masterInspection.EXEC_RSA_CODE = EXEC_RSA_CODE;
                masterInspection.IMS_PR_ROAD_CODE = model.IMS_PR_ROAD_CODE;
                masterInspection.IMS_ROAD_STATUS = model.stageCode;
                masterInspection.EXEC_RSA_INSP_DATE = DateTime.Parse(model.auditDate);

                masterInspection.EXEC_RSA_AUDIT_SUB = "N";
                masterInspection.EXEC_RSA_AUDIT_SUB_DATE = null;
                masterInspection.EXEC_RSA_PIU_SUB = "N";
                masterInspection.EXEC_RSA_PIU_SUB_DATE = null;
                masterInspection.EXEC_FILE_NAME = "NA";

                masterInspection.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                masterInspection.USERID = PMGSYSession.Current.UserId;

                dbContext.EXEC_RSA_INSPECTION.Add(masterInspection);
                dbContext.SaveChanges();
                message = "Road Safety Inspection Details Added Successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddRSADAL().ExecutionDAL");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public bool AddRSADetailsDAL(RSAInspectionDetails model, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                int EXEC_RSA_ID = 0;

                //if (dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == model.prRoadCode).Any())
                //{
                //    message = "Road Details and its Inspection Date is already added .";
                //    return false;
                //}

                if (dbContext.EXEC_RSA_INSPECTION_DETAILS.Any())
                {
                    EXEC_RSA_ID = dbContext.EXEC_RSA_INSPECTION_DETAILS.Select(m => m.EXEC_RSA_ID).Max();
                }
                else
                {
                    EXEC_RSA_ID = 0;
                }

                ++EXEC_RSA_ID;

                decimal TotalSegmentEntered = Convert.ToDecimal(dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => m.EXEC_RSA_CODE == model.EXEC_RSA_CODE).Sum(m => m.EXEC_SEGMENT_LENGTH));

                decimal RemainingSegmentLength = model.Sanction_length - TotalSegmentEntered;

                decimal CurrentSegment = model.EndChainage - model.StartChainage;

                //if (TotalSegmentEntered >= model.Sanction_length)
                //{
                //    message = "Remaining Chainage Segment Length is " + RemainingSegmentLength + " Kms." + " Total Maximun Chainage Segment Length allowed is " + model.Sanction_length + " Kms";
                //    return false;
                //}
                //else if (CurrentSegment > RemainingSegmentLength)
                //{
                //    message = "Remaining Chainage Segment Length is " + RemainingSegmentLength + " Kms." + " Total Maximun Chainage Segment Length allowed is " + model.Sanction_length + " Kms";
                //    return false;
                //}

                EXEC_RSA_INSPECTION_DETAILS masterInspectionDetails = new EXEC_RSA_INSPECTION_DETAILS();

                masterInspectionDetails.EXEC_RSA_ID = EXEC_RSA_ID;
                masterInspectionDetails.EXEC_RSA_CODE = model.EXEC_RSA_CODE;
                masterInspectionDetails.EXEC_RSA_START_CHAINAGE = model.StartChainage;
                masterInspectionDetails.EXEC_RSA_END_CHAINAGE = model.EndChainage;
                masterInspectionDetails.EXEC_SEGMENT_LENGTH = model.EndChainage - model.StartChainage;
                masterInspectionDetails.EXEC_RSA_SAFETY_ISSUE = model.Safety_Issue.Trim();
                masterInspectionDetails.EXEC_RSA_FILE_NAME = "NA";
                masterInspectionDetails.EXEC_RSA_RECOMMENDATION = model.RSA_Recommendation.Trim();
                masterInspectionDetails.ISSUE_CODE = model.IssueCode;

                masterInspectionDetails.EXEC_RSA_GRADE = model.GradeCode;
                masterInspectionDetails.EXEC_RSA_FREQUENCY = model.LikelihoodCode;

                if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("U") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("H"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "E";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("U") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("M"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "E";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("U") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("L"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "H";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("R") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("H"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "E";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("R") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("M"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "H";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("R") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("L"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "D";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("S") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("H"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "H";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("S") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("M"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "D";
                }
                else if (masterInspectionDetails.EXEC_RSA_GRADE.Equals("S") && masterInspectionDetails.EXEC_RSA_FREQUENCY.Equals("L"))
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "D";
                }
                else
                {
                    masterInspectionDetails.EXEC_RSA_PRIORITY = "E";
                }


                //  masterInspectionDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                //  masterInspectionDetails.USERID = PMGSYSession.Current.UserId;

                dbContext.EXEC_RSA_INSPECTION_DETAILS.Add(masterInspectionDetails);
                dbContext.SaveChanges();
                message = "Inspection Details Added Successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddRSADetailsDAL().ExecutionDAL");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        #endregion Auditor's Save Methods

        #region PIU Add

        public bool AddATRByPIUDAL(RSAInspectionDetails model, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            int RSACode = dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => m.EXEC_RSA_ID == model.RSAId).Select(m => m.EXEC_RSA_CODE).FirstOrDefault();

            try
            {
                int RSA_ATR_ID = 0;

                if (dbContext.EXEC_RSA_INSPECTION_ATR.Where(m => m.EXEC_RSA_ID == model.RSAId).Any())
                {
                    //message = "RSA Inspection ATR already added by PIU.";
                    //return false;

                    EXEC_RSA_INSPECTION_ATR masterInspection1 = new EXEC_RSA_INSPECTION_ATR();

                    masterInspection1 = dbContext.EXEC_RSA_INSPECTION_ATR.Where(m => m.EXEC_RSA_ID == model.RSAId).FirstOrDefault();
                    masterInspection1.EXEC_RSA_REC_ACCP = model.AccpetCode;
                    masterInspection1.EXEC_RSA_ACTION_TAKEN = model.ATR_By_PIU;
                    masterInspection1.EXEC_ATR_DATE = System.DateTime.Now; //DateTime.Parse(model.ATRUploadDate);
                    masterInspection1.EXEC_RSA_CODE = RSACode;
                    dbContext.Entry(masterInspection1).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "ATR Details are updated Successfully By PIU.";
                    return true;
                }


                if (dbContext.EXEC_RSA_INSPECTION_ATR.Any())
                {
                    RSA_ATR_ID = dbContext.EXEC_RSA_INSPECTION_ATR.Select(m => m.EXEC_RSA_ATR_ID).Max();
                }
                else
                {
                    RSA_ATR_ID = 0;
                }

                ++RSA_ATR_ID;

                EXEC_RSA_INSPECTION_ATR masterInspection = new EXEC_RSA_INSPECTION_ATR();

                masterInspection.EXEC_RSA_ATR_ID = RSA_ATR_ID;
                masterInspection.EXEC_RSA_ID = model.RSAId;
                masterInspection.EXEC_RSA_CODE = RSACode;
                masterInspection.EXEC_RSA_REC_ACCP = model.AccpetCode;
                masterInspection.EXEC_RSA_ACTION_TAKEN = model.ATR_By_PIU.Trim();
                masterInspection.EXEC_ATR_DATE = System.DateTime.Now;//DateTime.Parse(model.ATRUploadDate);
                masterInspection.EXEC_RSA_ATR_FILE_NAME = "NA";

                // here all SQC Related Fileds are allowed to save null by default
                masterInspection.IS_FINALIZED = "N";
                masterInspection.FINALIZED_DATE = null;

                masterInspection.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                masterInspection.USERID = PMGSYSession.Current.UserId;

                dbContext.EXEC_RSA_INSPECTION_ATR.Add(masterInspection);
                dbContext.SaveChanges();
                message = "ATR Details Added Successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddATRByPIUDAL().ExecutionDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        #endregion

        #region SQC Add
        public bool AddATRBySQCDAL(RSAInspectionDetails model, ref string message)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.EXEC_RSA_INSPECTION_ATR.Where(m => m.EXEC_RSA_ATR_ID == model.ATRId).Any())
                {
                    EXEC_RSA_INSPECTION_ATR masterInspection = new EXEC_RSA_INSPECTION_ATR();
                    masterInspection = dbContext.EXEC_RSA_INSPECTION_ATR.Where(m => m.EXEC_RSA_ATR_ID == model.ATRId).FirstOrDefault();

                    if (masterInspection != null)
                    {

                        masterInspection.EXEC_ATR_ACCEPT_SQC = model.AccpetCode;
                        masterInspection.EXEC_ATR_ACCEPT_SQC_DATE = System.DateTime.Now; //DateTime.Parse(model.ATRUploadDate);
                        masterInspection.EXEC_RSA_GRADE_REVISED = model.GradeCode;

                        masterInspection.IS_FINALIZED = "N";
                        masterInspection.FINALIZED_DATE = null;
                        masterInspection.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        masterInspection.USERID = PMGSYSession.Current.UserId;


                        dbContext.Entry(masterInspection).State = System.Data.Entity.EntityState.Modified;
                        dbContext.SaveChanges();
                        message = "ATR Details updated Successfully.";
                        return true;
                    }
                    else
                    {
                        message = "Error occured.";
                        return false;
                    }

                }
                else
                {
                    message = "PIU has not updated ATR details against this Issue";
                    return false;

                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddATRBySQCDAL().ExecutionDAL");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        #endregion

        public Array GetFilesListDALByAuditor(int page, int rows, string sidx, string sord, out int totalRecords, int RoadCode)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                CommonFunctions objCommonFunction = new CommonFunctions();
                List<EXEC_RSA_INSPECTION_DETAILS> listQMFiles = dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(p => p.EXEC_RSA_ID == RoadCode).ToList();

                IQueryable<EXEC_RSA_INSPECTION_DETAILS> query = listQMFiles.AsQueryable<EXEC_RSA_INSPECTION_DETAILS>();
                totalRecords = listQMFiles.Count();


                string VirtualDirectoryUrl = string.Empty;
                string PhysicalPath = string.Empty;
                string VirtualDirectoryUrl_OMMAS4 = string.Empty;

                VirtualDirectoryUrl = System.IO.Path.Combine(System.Configuration.ConfigurationManager.AppSettings["RSA_INSPECTION_DETAILS_FILE_UPLOAD_VIRTUAL_DIR_PATH"], "thumbnails");

                PhysicalPath = System.Configuration.ConfigurationManager.AppSettings["RSA_INSPECTION_DETAILS_FILE_UPLOAD"];


                //For self Reference
                File.Exists(System.IO.Path.Combine(PhysicalPath, HttpUtility.UrlEncode("1983635_1.jpg")).ToString().Replace(@"\\", @"//").Replace(@"\", @"/"));

                return query.Select(fileDetails => new
                {
                    id = fileDetails.EXEC_RSA_ID,
                    cell = new[] {   
                                    // Added for look into OMMAS4 also
                                    (Path.Combine(VirtualDirectoryUrl, HttpUtility.UrlEncode(fileDetails.EXEC_RSA_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") ),
                                    
                                    fileDetails.EXEC_RSA_START_CHAINAGE.ToString(),
                                    fileDetails.EXEC_RSA_END_CHAINAGE.ToString(),
                                    fileDetails.EXEC_RSA_SAFETY_ISSUE.Trim().ToString(),
                                    fileDetails.EXEC_RSA_RECOMMENDATION.Trim().ToString(),
                                    fileDetails.EXEC_RSA_GRADE=="S"?"Satisfactory":( fileDetails.EXEC_RSA_GRADE=="R"?"Required Improvement":"Unsatisfactory"),
                                    (fileDetails.EXEC_RSA_FILE_DESC==null ||fileDetails.EXEC_RSA_FILE_DESC==string.Empty)?"-":(fileDetails.EXEC_RSA_FILE_DESC.ToString().Trim()),
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_RSA_FILE_NAME + "$" + fileDetails.EXEC_RSA_ID.ToString().Trim() }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to Delete an Image' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_RSA_FILE_NAME + "$" + fileDetails.EXEC_RSA_ID.ToString().Trim() }) +"\"); return false;'>Delete</a>" 
                                              
                                                             
                                 
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetInspectionDetailsDALList().GetFilesListDALByAuditor");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string AddFileUploadDetailsBALByAuditorDAL(int IMS_PR_ROAD_CODE, string FileName, string desc)
        {

            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            PMGSY.Models.EXEC_RSA_INSPECTION_DETAILS qualityQMInspectionFile = dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => m.EXEC_RSA_ID == IMS_PR_ROAD_CODE).FirstOrDefault(); //new PMGSY.Models.EXEC_RSA_INSPECTION_DETAILS();
            try
            {
                if (qualityQMInspectionFile != null)
                {
                    qualityQMInspectionFile.EXEC_RSA_FILE_NAME = FileName;
                    qualityQMInspectionFile.EXEC_RSA_FILE_DESC = desc;
                    dbContext.Entry(qualityQMInspectionFile).State = System.Data.Entity.EntityState.Modified;

                    dbContext.SaveChanges();
                    return string.Empty;
                }
                else
                {
                    return ("Error Occurred While Processing Request.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddFileUploadDetailsBALByAuditorDAL().ExecutionDAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string DeleteFileDetailsByAuditorDAL(int RSAId)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                EXEC_RSA_INSPECTION_DETAILS db_qm_inspection_files = dbContext.EXEC_RSA_INSPECTION_DETAILS.Find(RSAId);

                if (db_qm_inspection_files != null)
                {
                    db_qm_inspection_files.EXEC_RSA_FILE_NAME = "NA";
                    dbContext.Entry(db_qm_inspection_files).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                }
                else
                {
                    return ("Error Occurred While Processing Your Request.");

                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteFileDetailsByAuditorDAL().ExecutionDAL");
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array GetFilesListDALByPIU(int page, int rows, string sidx, string sord, out int totalRecords, int RoadCode)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                CommonFunctions objCommonFunction = new CommonFunctions();
                List<EXEC_RSA_INSPECTION_ATR> listQMFiles = dbContext.EXEC_RSA_INSPECTION_ATR.Where(p => p.EXEC_RSA_ATR_ID == RoadCode).ToList();

                IQueryable<EXEC_RSA_INSPECTION_ATR> query = listQMFiles.AsQueryable<EXEC_RSA_INSPECTION_ATR>();
                totalRecords = listQMFiles.Count();


                string VirtualDirectoryUrl = string.Empty;
                string PhysicalPath = string.Empty;
                string VirtualDirectoryUrl_OMMAS4 = string.Empty;

                VirtualDirectoryUrl = System.IO.Path.Combine(System.Configuration.ConfigurationManager.AppSettings["RSA_INSPECTION_DETAILS_FILE_UPLOAD_VIRTUAL_DIR_PATH_PIU"], "thumbnails");

                PhysicalPath = System.Configuration.ConfigurationManager.AppSettings["RSA_INSPECTION_DETAILS_FILE_UPLOAD_PIU"];


                //For self Reference
                File.Exists(System.IO.Path.Combine(PhysicalPath, HttpUtility.UrlEncode("1983635_1.jpg")).ToString().Replace(@"\\", @"//").Replace(@"\", @"/"));

                return query.Select(fileDetails => new
                {
                    id = fileDetails.EXEC_RSA_ID,
                    cell = new[] {   
                                    // Added for look into OMMAS4 also
                                    (Path.Combine(VirtualDirectoryUrl, HttpUtility.UrlEncode(fileDetails.EXEC_RSA_ATR_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") ),
                                     fileDetails.EXEC_RSA_REC_ACCP=="Y"?"Yes":"No",
                                     fileDetails.EXEC_RSA_ACTION_TAKEN.Trim().ToString(),
                                     fileDetails.EXEC_RSA_ATR_FILE_DESC==null?"-":fileDetails.EXEC_RSA_ATR_FILE_DESC.Trim().ToString(),

                                    "<a href='#' title='Click here to Download this File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_RSA_ATR_FILE_NAME + "$" + fileDetails.EXEC_RSA_ATR_ID.ToString().Trim() }) +"\"); return false;'>Download</a>" ,
                      
                                    "<a href='#' title='Click here to Delete this File' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_RSA_ATR_FILE_NAME + "$" + fileDetails.EXEC_RSA_ATR_ID.ToString().Trim() }) +"\"); return false;'>Delete</a>" 
                                              
                                                             
                                 
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteFileDetailsByAuditorDAL().ExecutionDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string AddFileUploadDetailsBALByPIUDAL(int IMS_PR_ROAD_CODE, string FileName, string desc)
        {

            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            PMGSY.Models.EXEC_RSA_INSPECTION_ATR qualityQMInspectionFile = dbContext.EXEC_RSA_INSPECTION_ATR.Where(m => m.EXEC_RSA_ATR_ID == IMS_PR_ROAD_CODE).FirstOrDefault(); //new PMGSY.Models.EXEC_RSA_INSPECTION_DETAILS();
            try
            {
                if (qualityQMInspectionFile != null)
                {
                    qualityQMInspectionFile.EXEC_RSA_ATR_FILE_NAME = FileName;
                    qualityQMInspectionFile.EXEC_RSA_ATR_FILE_DESC = desc;
                    dbContext.Entry(qualityQMInspectionFile).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                }
                else
                {
                    return ("Error Occurred While Processing Request.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddFileUploadDetailsBALByPIUDAL().ExecutionDAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string DeleteFileDetailsByPIUDAL(int RSAId)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                EXEC_RSA_INSPECTION_ATR db_qm_inspection_files = dbContext.EXEC_RSA_INSPECTION_ATR.Find(RSAId);

                if (db_qm_inspection_files != null)
                {
                    db_qm_inspection_files.EXEC_RSA_ATR_FILE_NAME = "NA";
                    dbContext.Entry(db_qm_inspection_files).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    return string.Empty;
                }
                else
                {
                    return ("Error Occurred While Processing Your Request.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteFileDetailsByPIUDAL().ExecutionDAL");
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #region Finalize By SQC

        public string FinalizeRSAATRDAL(int ATRId)
        {
            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            try
            {
                PMGSY.Models.EXEC_RSA_INSPECTION_ATR atrModel = dbContext.EXEC_RSA_INSPECTION_ATR.Find(ATRId);


                if (atrModel != null)
                {
                    if (atrModel.EXEC_ATR_ACCEPT_SQC != null)
                    {
                        atrModel.IS_FINALIZED = "Y";
                        atrModel.FINALIZED_DATE = System.DateTime.Now;

                        dbContext.Entry(atrModel).State = System.Data.Entity.EntityState.Modified;

                        dbContext.SaveChanges();
                        return string.Empty;
                    }
                    else
                    {
                        return "SQC has not entered ATR Details.";
                    }

                }
                else
                {
                    return "PIU and SQC has not entered ATR Details.";
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "FinalizeRSAATRDAL().ExecutionDAL");
                return "Error occurred while processing your request.";
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string FinalizeDetailsByAuditorDAL(int ProposalCode)
        {
            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            EXEC_RSA_INSPECTION inspMaster = dbContext.EXEC_RSA_INSPECTION.Where(m => m.IMS_PR_ROAD_CODE == ProposalCode).FirstOrDefault();

            int RSA_Code = dbContext.EXEC_RSA_INSPECTION.Where(m => m.IMS_PR_ROAD_CODE == ProposalCode).Select(m => m.EXEC_RSA_CODE).FirstOrDefault();
            try
            {
                if (inspMaster.EXEC_RSA_AUDIT_SUB.Equals("Y"))
                {
                    return "Audit is Already Finalized  and forwarded to PIU.";
                }
                else
                {
                    if (dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => m.EXEC_RSA_CODE == RSA_Code).Any())
                    {
                        if (dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => (m.EXEC_RSA_FILE_NAME.Equals("NA") || m.EXEC_RSA_FILE_NAME == null) && m.EXEC_RSA_CODE == RSA_Code).Any())
                        {
                            return "Upload images against the chainage detail(s).";
                        }
                        else
                        {
                            if (inspMaster.EXEC_FILE_NAME.Equals("NA"))
                            {
                                return "Upload PDF File against this Work. (Click on Upload / View PDF File button.)";
                            }
                            else
                            {
                                inspMaster.EXEC_RSA_AUDIT_SUB = "Y";
                                inspMaster.EXEC_RSA_AUDIT_SUB_DATE = System.DateTime.Now;
                                dbContext.Entry(inspMaster).State = System.Data.Entity.EntityState.Modified;
                                dbContext.SaveChanges();
                                return string.Empty;
                            }
                        }
                    }
                    else
                    {
                        return "Please enter at least one Chainage, Upload its Image File, Upload PDF File and then finalize the Audit.";
                    }

                }


            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "FinalizeDetailsByAuditorDAL().ExecutionDAL");
                return "Error occurred while processing your request.";
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        // FinalizeDetailsByPIUDAL
        public string FinalizeDetailsByPIUDAL(int ProposalCode)
        {
            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            EXEC_RSA_INSPECTION inspMaster = dbContext.EXEC_RSA_INSPECTION.Where(m => m.IMS_PR_ROAD_CODE == ProposalCode).FirstOrDefault();
            int RSA_Code = dbContext.EXEC_RSA_INSPECTION.Where(m => m.IMS_PR_ROAD_CODE == ProposalCode).Select(m => m.EXEC_RSA_CODE).FirstOrDefault();

            try
            {
                if (inspMaster != null)
                {
                    if (inspMaster.EXEC_RSA_PIU_SUB.Equals("Y"))
                    {
                        return "PIU has already Finalized this ATR and forwarded to SQC.";
                    }
                    else
                    {
                        var RSAIdList_1 = dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => m.EXEC_RSA_CODE == RSA_Code).Select(m => m.EXEC_RSA_ID).OrderBy(x => x).ToList(); // Main List
                        var RSAIdList_2 = dbContext.EXEC_RSA_INSPECTION_ATR.Where(m => m.EXEC_RSA_CODE == RSA_Code).Select(m => m.EXEC_RSA_ID).OrderBy(x => x).ToList(); // Sub List

                        if (RSAIdList_2.SequenceEqual(RSAIdList_1))
                        {
                            if (dbContext.EXEC_RSA_INSPECTION_ATR.Where(m => (m.EXEC_RSA_ATR_FILE_NAME.Equals("NA") || m.EXEC_RSA_ATR_FILE_NAME == null) && m.EXEC_RSA_CODE == RSA_Code).Any())
                            {
                                return "Upload Files against all the Chainage Details and then finalize ATR.";
                            }
                            else
                            {
                                inspMaster.EXEC_RSA_PIU_SUB = "Y";
                                inspMaster.EXEC_RSA_PIU_SUB_DATE = System.DateTime.Now;
                                dbContext.Entry(inspMaster).State = System.Data.Entity.EntityState.Modified;
                                dbContext.SaveChanges();
                                return string.Empty;
                            }

                        }
                        else
                        {
                            return "Please enter ATR against all Chainage Details, Upload its File and then finalize the ATR.";
                        }
                    }
                }
                else
                {

                    return "Error occurred while processing your request.";

                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "FinalizeDetailsByPIUDAL().ExecutionDAL");
                return "Error occurred while processing your request.";
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion Finalize By SQC


        // DeleteByAuditorDAL
        public string DeleteByAuditorDAL(int RSACode)
        {
            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            EXEC_RSA_INSPECTION_DETAILS inspMaster = dbContext.EXEC_RSA_INSPECTION_DETAILS.Where(m => m.EXEC_RSA_ID == RSACode).FirstOrDefault();

            try
            {
                if (inspMaster == null)
                {
                    return "An Error Occurred While Your Processing Request.";
                }

                dbContext.EXEC_RSA_INSPECTION_DETAILS.Remove(inspMaster);
                dbContext.SaveChanges();
                return string.Empty;

            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException)
            {
                return "Details can not be deleted because other details for this Chainage are entered.";

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteByAuditorDAL().ExecutionDAL");
                return "An Error Occurred While Your Processing Request.";

            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        public string AddPADFByAuditorDAL(int IMS_PR_ROAD_CODE, string FileName, string desc)
        {

            PMGSY.Models.PMGSYEntities dbContext = new PMGSY.Models.PMGSYEntities();
            PMGSY.Models.EXEC_RSA_INSPECTION qualityQMInspectionFile = dbContext.EXEC_RSA_INSPECTION.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).FirstOrDefault(); //new PMGSY.Models.EXEC_RSA_INSPECTION_DETAILS();
            try
            {
                if (qualityQMInspectionFile != null)
                {
                    qualityQMInspectionFile.EXEC_FILE_NAME = FileName;
                    qualityQMInspectionFile.EXEC_FILE_DESC = desc;
                    dbContext.Entry(qualityQMInspectionFile).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();
                    return string.Empty;
                }
                else
                {
                    return ("Error Occurred While Processing Request.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddPADFByAuditorDAL().ExecutionDAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public string DeletePDFDetailsByAuditorDAL(int RSAId)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                EXEC_RSA_INSPECTION db_qm_inspection_files = dbContext.EXEC_RSA_INSPECTION.Find(RSAId);

                if (db_qm_inspection_files != null)
                {
                    db_qm_inspection_files.EXEC_FILE_NAME = "NA";
                    db_qm_inspection_files.EXEC_FILE_DESC = null;
                    dbContext.Entry(db_qm_inspection_files).State = System.Data.Entity.EntityState.Modified;
                    dbContext.SaveChanges();

                    return string.Empty;
                }
                else
                {
                    return ("Error Occurred While Processing Your Request.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeletePDFDetailsByAuditorDAL().ExecutionDAL");
                return ("Error Occurred While Processing Your Request.");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public Array GetPDFsListDALByAuditor(int page, int rows, string sidx, string sord, out int totalRecords, int RoadCode)
        {
            try
            {
                PMGSYEntities dbContext = new PMGSYEntities();
                CommonFunctions objCommonFunction = new CommonFunctions();
                List<EXEC_RSA_INSPECTION> listQMFiles = dbContext.EXEC_RSA_INSPECTION.Where(p => p.IMS_PR_ROAD_CODE == RoadCode).ToList();

                IQueryable<EXEC_RSA_INSPECTION> query = listQMFiles.AsQueryable<EXEC_RSA_INSPECTION>();
                totalRecords = listQMFiles.Count();


                string VirtualDirectoryUrl = string.Empty;
                string PhysicalPath = string.Empty;
                string VirtualDirectoryUrl_OMMAS4 = string.Empty;

                VirtualDirectoryUrl = System.IO.Path.Combine(System.Configuration.ConfigurationManager.AppSettings["RSA_INSPECTION_MASTER_PDF_UPLOAD_VIRTUAL_DIR_PATH_BY_AUDITOR"], "thumbnails");

                PhysicalPath = System.Configuration.ConfigurationManager.AppSettings["RSA_INSPECTION_MASTER_PDF_UPLOAD_BY_AUDITOR"];


                //For self Reference
                File.Exists(System.IO.Path.Combine(PhysicalPath, HttpUtility.UrlEncode("1983635_1.jpg")).ToString().Replace(@"\\", @"//").Replace(@"\", @"/"));

                return query.Select(fileDetails => new
                {
                    id = fileDetails.EXEC_RSA_CODE,
                    cell = new[] {   
                                    // Added for look into OMMAS4 also
                                    (Path.Combine(VirtualDirectoryUrl, HttpUtility.UrlEncode(fileDetails.EXEC_FILE_NAME.ToString())).ToString().Replace(@"\\",@"//").Replace(@"\",@"/") ),
                                    // fileDetails.EXEC_RSA_REC_ACCP=="Y"?"Yes":"No",
                                  //   fileDetails.EXEC_RSA_ACTION_TAKEN.Trim().ToString(),
                                     fileDetails.EXEC_FILE_DESC==null?"-":fileDetails.EXEC_FILE_DESC.Trim().ToString(),

                                    "<a href='#' title='Click here to Download this File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_FILE_NAME + "$" + fileDetails.EXEC_RSA_CODE.ToString().Trim() }) +"\"); return false;'>Download</a>" ,
                      
                                    "<a href='#' title='Click here to Delete this File' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.EXEC_FILE_NAME + "$" + fileDetails.EXEC_RSA_CODE.ToString().Trim() }) +"\"); return false;'>Delete</a>" 
                                              
                                                             
                                 
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetPDFsListDALByAuditor().ExecutionDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion
    }

    public class HabitationList
    {
        public int MAST_HAB_CODE { get; set; }
        public string MAST_HAB_NAME { get; set; }
        public string MAST_VILLAGE_NAME { get; set; }
        public int MAST_HAB_TOT_POP { get; set; }
    }


    public interface IExecutionDAL
    {

        #region Work Program DAL Declaration

        Array GetProposalsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, ProposalFilterViewModel proposalFilterViewModel);
        bool AddWorkProgramDetails(WorkProgramViewModel workProgramViewModel, ref string message);
        bool EditWorkProgramDetails(WorkProgramViewModel workProgramViewModel, ref string message);
        bool DeleteWorkProgramDetails(int imsPrRoadCode, int headCode, ref string message);
        WorkProgramViewModel GetWorkProgramDetails(int imsPrRoadCode, int headCode);
        WorkProgramViewModel GetWorkProgramInformation(int IMS_PR_ROAD_CODE);
        Array GetWorkProgramList(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE);
        List<SelectListItem> PopulateHeadItemForRoad(int IMS_PR_ROAD_CODE);
        List<SelectListItem> PopulateHeadItemForLSB(int IMS_PR_ROAD_CODE);

        #endregion Work Program DAL Declaration

        #region Payment Schedule Declaration

        bool AddPaymentScheduleDetails(PaymentScheduleViewModel paymentScheduleViewModel, ref string message);
        bool EditPaymentScheduleDetails(PaymentScheduleViewModel paymentScheduleViewModel, ref string message);
        bool DeletePaymentScheduleDetails(int imsPrRoadCode, int month, int year, ref string message);
        PaymentScheduleViewModel GetPaymentScheduleDetails(int imsPrRoadCode, int month, int year);
        PaymentScheduleViewModel getInformation(int imsPrRoadCode);
        Array GetPaymentScheduleList(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE);
        List<SelectListItem> GetYears(int imsPrRoadCode);

        #endregion Payment Schedule Declaration

        #region EXECUTION_PROGRESS

        Array GetExecutionList(int yearCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords);

        Array GetRoadPhysicalProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        ExecutionRoadStatusViewModel GetPhysicalRoadDetails(int proposalCode, int monthCode, int yearCode);

        bool AddPhysicalProgressDetails(ExecutionRoadStatusViewModel progressModel, ref string message);

        bool EditPhysicalRoadDetails(ExecutionRoadStatusViewModel progressModel, ref string message);

        bool AddLSBPhysicalProgressDetails(ExecutionLSBStatusViewModel progressModel, ref string message);

        bool EditLSBPhysicalRoadDetails(ExecutionLSBStatusViewModel progressModel, ref string message);

        Array GetLSBPhysicalProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        Array GetFinancialProgressList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode, string progressType);

        ExecutionProgressViewModel GetFinancialDetails(int proposalCode, int yearCode, int monthCode);

        bool AddFinancialProgress(ExecutionProgressViewModel progressModel, ref string message);

        bool EditFinancialProgress(ExecutionProgressViewModel progressModel, ref string message);

        bool AddCDWorksDetails(ExecutionCDWorksViewModel cdWorksModel, ref string message);

        bool EditCDWorksDetails(ExecutionCDWorksViewModel cdWorksModel, ref string message);

        ExecutionCDWorksViewModel GetCdWorksDetails(int proposalCode, int cdWorksCode);

        bool DeletePhysicalRoadDetails(int proposalCode, int yearCode, int monthCode, ref string message);

        bool DeletePhysicalLSBDetails(int proposalCode, int yearCode, int monthCode, ref string message);

        bool DeleteFinancialRoadDetails(int proposalCode, int yearCode, int monthCode, ref string message);

        bool AddProgressRemarks(ProposalRemarksViewModel model, ref string message);

        Array GetRemarksList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        bool DeleteRemark(int proposalCode, ref string message);

        bool EditRemark(ProposalRemarksViewModel model, ref string message);

        bool CheckSanctionValue(int proposalCode, decimal valueOfWork, decimal valueOfPayment, string operation);

        bool CheckCDWorksCount(int proposalCode, string operation);

        bool CheckPhysicalRoadDetails(int proposalCode);

        bool CheckPhysicalLSBDetails(int proposalCode);

        bool CheckFinancialDetails(int proposalCode, string progressType);

        bool CheckProposalType(int proposalCode);

        Array GetRoadAgreementDetailsList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        Array GetTechnologyProgressDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode);

        Array GetExecTechnologyProgressDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode, int technologyCode, int layerCode);
        string AddExecTechnologyProgressDetailsDAL(TechnologyDetailsViewModel model);
        bool EditExecTechnologyProgressDetailsDAL(TechnologyDetailsViewModel model, ref string message);
        bool DeleteExecTechnologyProgressDetailsDAL(int techMonhtlyCode, ref string message);

        #endregion

        #region Upload File Details
        string AddFileUploadDetailsDAL(List<EXEC_FILES> lst_execution_files);
        Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE);
        string UpdateImageDetailsDAL(EXEC_FILES execution_files);
        string DeleteFileDetailsDAL(EXEC_FILES execution_files);
        Array GetVideoFilesListDAL(int page, int rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE);
        // ExecutionLSBStatusViewModel GetPhysicalLSBDetails(int proposalCode, int yearCode, int monthCode);
        #endregion

        #region Executiong Officer
        Array GetExecutingOfficerListDAL(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);
        ExecutingOfficerViewModel GetExecutingOfficerRoadDetails(int proposalCode);
        bool AddExecutingOfficerDetails(ExecutingOfficerViewModel executingOfficerViewModel, ref string message);
        ExecutingOfficerViewModel GetExecutingOfficerDetails(int proposalCode, int executingOfficerCode);
        bool EditExecutingOfficerDetails(ExecutingOfficerViewModel executingOfficerViewModel, ref string message);
        bool DeleteExecutingOfficerDetails(int proposalCode, int ExecutingOfficerCode, ref string message);
        List<SelectListItem> PopulateExecutingOfficer(string imsPrRoadCode_DesignationCode);
        #endregion

        Array GetTechnologyProgressListDAL(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        #region PROPOSAL_RELATED_DETAILS

        Array GetRoadProposalExecutionList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        Array GetLSBProposalExecutionList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        Array GetProposalFinancialList(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);

        #endregion

        #region PHYSICAL_PROGRESS_FOR_ITNO

        Array GetExecutionListForITNO(int districtCode, int yearCode, int blockCode, string packageCode, string proposalCode, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetRoadPhysicalProgressListForITNO(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);
        Array GetLSBPhysicalProgressListForITNO(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);
        Array GetFinancialProgressListForITNO(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);
        #endregion

        bool UpdateRoadProgressDetailsITNO(ProposalFilterForITNOViewModel progressModel, ref string message);

        #region Habitation Details
        Array GetHabitationListToMap(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetHabitationList(int roadCode, string flag, int page, int rows, string sidx, string sord, out long totalRecords);
        bool MapHabitationToRoad(string encryptedHabCodes, string roadName, string MappingDate);
        Array GetMappedHabitationList(int roadCode, string flag, int page, int rows, string sidx, string sord, out long totalRecords);
        bool MapClusterToRoad(int roadCode, int clusterCode);
        bool DeleteHabitaion(int HabCode, out SelectListItem deleted);
        #endregion Habitation Details Ends

        #region Road Safety
        bool AddRoadSafetyDetails(RoadSafetyViewModel model, ref string message);
        Array GetRoadSafetyListDAL(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);

        #endregion

        #region Exec Tech File Upload
        Array GetExecTechFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE);
        string AddExecTechFileUploadDetailsDAL(List<EXEC_TECH_FILES> lst_execution_files);
        string DeleteExecTechFileDetailsDAL(EXEC_TECH_FILES execution_files);
        #endregion

        #region Execution Progress MRD
        bool AddPhysicalProgressDetailsMRDDAL(ExecutionRoadStatusViewModelMRD progressModel, ref string message);
        Array GetExecutionListMRDDAL(int yearCode, int districtCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetRoadPhysicalProgressListMRDDAL(int page, int rows, string sidx, string sord, out long totalRecords, int proposalCode);
        bool EditPhysicalRoadDetailsMRDDAL(ExecutionRoadStatusViewModelMRD progressModel, ref string message);
        #endregion

        #region Execution Change Work Status
        Array GetRoadList(int yearCode, int districtCode, int blockCode, int batchCode, int streamCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords);
        AdditionalRoadDetailsViewModel GetCompleteRoadDetails(int IMS_PR_ROAD_CODE);
        //Array GetAdditionalRoadListDAL(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);
        bool EditAdditionalRoadDetailsDAL(int road_code);
        #endregion

        #region Road Safety ATR
        Array RSADALListSubmitted(int districtCode, int yearCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords);

        Array RSADALList(int districtCode, int yearCode, int blockCode, string packageCode, string proposalCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords);

        bool AddRSADAL(RSAInspectionDetails model, ref string message);

        bool AddRSADetailsDAL(RSAInspectionDetails model, ref string message);

        bool AddATRByPIUDAL(RSAInspectionDetails model, ref string message);

        bool AddATRBySQCDAL(RSAInspectionDetails model, ref string message);

        Array GetFilesListDALByAuditor(int page, int rows, string sidx, string sord, out int totalRecords, int obsId);

        string AddFileUploadDetailsBALByAuditorDAL(int IMS_PR_ROAD_CODE, string FileName, string desc);

        string DeleteFileDetailsByAuditorDAL(int RSAId);

        Array GetFilesListDALByPIU(int page, int rows, string sidx, string sord, out int totalRecords, int obsId);

        string AddFileUploadDetailsBALByPIUDAL(int IMS_PR_ROAD_CODE, string FileName, string desc);

        string DeleteFileDetailsByPIUDAL(int RSAId);

        string FinalizeRSAATRDAL(int ATRId);

        string FinalizeDetailsByAuditorDAL(int ProposalCode);

        // DeleteByAuditorDAL
        string DeleteByAuditorDAL(int RSACode);

        // FinalizeDetailsByPIUDAL

        string FinalizeDetailsByPIUDAL(int ProposalCode);


        string AddPADFByAuditorDAL(int IMS_PR_ROAD_CODE, string FileName, string desc);


        string DeletePDFDetailsByAuditorDAL(int RSAId);



        Array GetPDFsListDALByAuditor(int page, int rows, string sidx, string sord, out int totalRecords, int obsId);
        #endregion
    }
}