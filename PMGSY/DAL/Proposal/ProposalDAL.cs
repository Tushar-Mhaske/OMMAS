#region File Header
/*
        * Project Id    :
        * Project Name  :   OMMAS II
        * Name          :   ProposalDAL.cs     
        * Description   :   Data Methods for Creating , Editing, Deleting Road Proposal and Related Screens of Road Proposals Habitation Details
                            Traffic Intensity , CBR Index and File Upload                            
        * Author        :   Shivkumar Deshmukh        
        * Creation Date :   04/April/2013
        * Modified By   :   Shyam Yadav
 **/
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PMGSY.Models;
using PMGSY.Common;
using System.Data.Entity.Validation;
using System.Web.Mvc;
using System.Text;
using System.Data.Entity.Infrastructure;
using System.Data.SqlClient;
using System.Data;
using PMGSY.Models.Proposal;
using System.Configuration;
using System.IO;
using System.Web.Script.Serialization;
using PMGSY.Controllers;
using System.Transactions;
using PMGSY.Extensions;
using PMGSY.Models.Common;
using Microsoft.SqlServer.Server;
using System.Data.Entity.Core.Objects;
using System.Xml.Linq;
using System.Net;
using System.Collections;
using System.Data.Entity.Core;
using System.Data.Entity;

namespace PMGSY.DAL.Proposal
{
    public class ProposalDAL : IProposalDAL
    {
        Models.PMGSYEntities dbContext;

        public List<SelectListItem> PopulateLinkThroughListPMGSY3DAL(int blockCode, int batch)
        {
            dbContext = new PMGSYEntities();
            List<SelectListItem> lstFundingAgency = new List<SelectListItem>();
            SelectListItem item = null;
            int districtCode = 0;
            try
            {
                //bool flag = dbContext.MASTER_BLOCK.Where(x => x.MAST_BLOCK_CODE == blockCode && x.MAST_IAP_BLOCK == "Y").Any();
                lstFundingAgency.Insert(0, new SelectListItem { Text = "Select TR/MRL Number", Value = "-1" });
                //var query = (from c in dbContext.PLAN_ROAD
                //             where c.MAST_PMGSY_SCHEME == 4 && c.PLAN_LOCK_STATUS == "Y" && c.MAST_BLOCK_CODE == blockCode
                //             //&& (c.MASTER_EXISTING_ROADS.MAST_ROAD_CAT_CODE != 1 && c.MASTER_EXISTING_ROADS.MAST_ROAD_CAT_CODE != 2) ///Road should not be NH OR SH
                //             select new
                //             {
                //                 Text = c.PLAN_RD_NAME,
                //                 Value = c.PLAN_CN_ROAD_CODE,
                //             }).OrderBy(c => c.Value).ToList();

                districtCode = dbContext.MASTER_BLOCK.Where(z => z.MAST_BLOCK_CODE == blockCode).Select(x => x.MAST_DISTRICT_CODE).FirstOrDefault();

                // Added by Srishti on 03-07-2023
                if (PMGSYSession.Current.PMGSYScheme == 5)
                {
                    var query = dbContext.PLAN_ROAD.Where(x => x.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                    && x.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                    && x.MAST_DISTRICT_CODE == PMGSYSession.Current.DistrictCode
                    && x.PLAN_LOCK_STATUS == "Y"
                    && (blockCode == -1 ? 1 : x.MAST_BLOCK_CODE) == (blockCode == -1 ? 1 : blockCode)).ToList();

                    foreach (var data in query)
                    {
                        item = new SelectListItem();
                        item.Text = data.PLAN_CN_ROAD_NUMBER + "-" + data.PLAN_RD_NAME.Trim();
                        item.Value = data.PLAN_CN_ROAD_CODE.ToString().Trim();
                        lstFundingAgency.Add(item);
                    }
                }
                else
                {
                    var query = dbContext.USP_GET_TR_MRL_PMGSY3_PROPOSAL(districtCode, blockCode, batch).ToList();

                    foreach (var data in query)
                    {
                        item = new SelectListItem();
                        item.Text = data.PLAN_RD_NAME.Trim() + "(CUPL Rank: " + data.CUPL_RANK.ToString() + ")";
                        item.Value = data.PLAN_CN_ROAD_CODE.ToString().Trim();
                        lstFundingAgency.Add(item);
                    }
                }
                return lstFundingAgency;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ProposalDAL.PopulateLinkThroughListPMGSY3DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// populate funding agency according to block
        /// </summary>
        /// <param name="districtCode"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateLinkThroughListRCPLWE(int blockCode)
        {
            dbContext = new PMGSYEntities();
            List<SelectListItem> lstFundingAgency = new List<SelectListItem>();
            SelectListItem item = null;
            try
            {
                //bool flag = dbContext.MASTER_BLOCK.Where(x => x.MAST_BLOCK_CODE == blockCode && x.MAST_IAP_BLOCK == "Y").Any();
                lstFundingAgency.Insert(0, new SelectListItem { Text = "Select Core Network Link/Through Route Number", Value = "" });
                var query = (from c in dbContext.PLAN_ROAD
                             where c.MAST_PMGSY_SCHEME == 3 && c.PLAN_LOCK_STATUS == "Y" && c.MAST_BLOCK_CODE == blockCode
                                    && (c.MASTER_EXISTING_ROADS.MAST_ROAD_CAT_CODE != 1 && c.MASTER_EXISTING_ROADS.MAST_ROAD_CAT_CODE != 2) ///Road should not be NH OR SH
                             select new
                             {
                                 Text = c.PLAN_RD_NAME,
                                 Value = c.PLAN_CN_ROAD_CODE,
                             }).OrderBy(c => c.Value).ToList();
                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text;
                    item.Value = data.Value.ToString();
                    lstFundingAgency.Add(item);
                }
                return lstFundingAgency;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "PopulateLinkThroughListRCPLWE().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// populate funding agency according to block
        /// </summary>
        /// <param name="districtCode"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateFundingAgency(int blockCode)
        {
            dbContext = new PMGSYEntities();
            List<SelectListItem> lstFundingAgency = new List<SelectListItem>();
            SelectListItem item = null;
            try
            {
                bool flag = dbContext.MASTER_BLOCK.Where(x => x.MAST_BLOCK_CODE == blockCode && x.MAST_IAP_BLOCK == "Y").Any();

                lstFundingAgency.Insert(0, new SelectListItem { Text = "Select Funding Agency", Value = "-1" });
                var query = (from c in dbContext.MASTER_FUNDING_AGENCY
                             where c.MAST_FUNDING_AGENCY_CODE == ((PMGSYSession.Current.PMGSYScheme == 3) ? 5 : c.MAST_FUNDING_AGENCY_CODE)///Changes for RCPLWE
                             select new
                             {
                                 Text = c.MAST_FUNDING_AGENCY_NAME,
                                 Value = c.MAST_FUNDING_AGENCY_CODE
                             }).OrderBy(c => c.Value).ToList();
                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text;
                    item.Value = data.Value.ToString();
                    lstFundingAgency.Add(item);
                }

                if (!flag && lstFundingAgency.Count > 5)
                {
                    lstFundingAgency.RemoveAt(5);
                }
                return lstFundingAgency;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "PopulateFundingAgency().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public int getCNRoadCode(int prRoadCode)
        {
            int cnRoadCode = 0;
            try
            {
                dbContext = new PMGSYEntities();
                var code = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == prRoadCode).Select(x => x.PLAN_CN_ROAD_CODE).FirstOrDefault();
                cnRoadCode = Convert.ToInt32(code);
                return cnRoadCode;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "getCNRoadCode().DAL");
                return 0;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool checkIsPaymentDAL(int prRoadCode)
        {
            bool status = false;
            try
            {
                dbContext = new Models.PMGSYEntities();
                if (dbContext.ACC_BILL_DETAILS.Where(x => x.IMS_PR_ROAD_CODE == prRoadCode).Any())
                {
                    status = true;
                }
                return status;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "checkIsPaymentDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool checkMLProposal(int roadCode)
        {
            bool flag = false;
            string route = string.Empty;
            try
            {
                int cnCode = 0;
                dbContext = new Models.PMGSYEntities();
                var code = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == roadCode).Select(x => x.PLAN_CN_ROAD_CODE).FirstOrDefault();
                cnCode = Convert.ToInt32(code);
                if (cnCode > 0)
                {
                    route = dbContext.PLAN_ROAD.Where(x => x.PLAN_CN_ROAD_CODE == cnCode).Select(x => x.PLAN_RD_ROUTE).FirstOrDefault();
                    flag = route.Trim() == "N" ? true : false;
                }
                return flag;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "checkMLProposal().DAL");
                return false;
            }
            finally
            {

            }
        }

        #region Road Proposal Data Entry

        /// <summary>
        /// Lists the Road Proposal
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="MAST_STATE_CODE"></param>
        /// <param name="MAST_DISTRICT_CODE"></param>
        /// <param name="IMS_YEAR"></param>
        /// <param name="MAST_BLOCK_CODE"></param>
        /// <param name="IMS_BATCH"></param>
        /// <param name="IMS_STREAMS"></param>
        /// <param name="ProposalType"></param>
        /// <param name="MAST_DPIU_CODE"></param>
        /// <returns></returns>
        public Array GetProposalsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int MAST_BLOCK_CODE, int IMS_BATCH, int IMS_STREAMS, String ProposalType, int MAST_DPIU_CODE, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, string Filters, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                List<pr_get_proposals_Result> itemList = new List<pr_get_proposals_Result>();

                #region SearchFiter
                //JavaScriptSerializer js = null;
                //SearchJson test = new SearchJson();
                //string PackageNumberSearch = string.Empty;
                //string RoadNameSearch = string.Empty;

                //if (Filters != null)
                //{
                //    js = new JavaScriptSerializer();
                //    test = js.Deserialize<SearchJson>(Filters);

                //    foreach (rules item in test.rules)
                //    {
                //        switch (item.field)
                //        {
                //            case "PackageNumber": PackageNumberSearch = item.data;
                //                break;
                //            case "RoadName": RoadNameSearch = item.data;
                //                break;

                //            default:
                //                break;
                //        }
                //    }
                //}
                #endregion

                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);

                // Added By to unlock Proposal Technology Details
                bool is_TechnologyUnlock = false;
                DateTime serverTime = DateTime.Now; // gives you current Time in server timeZone
                DateTime utcTime = serverTime.ToUniversalTime(); // convert it to Utc using timezone setting of server computer
                TimeZoneInfo tzi = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
                DateTime localTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, tzi);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "N";
                                MRDStatus = "N";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "S";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }


                short roleCode = dbContext.UM_User_Master.Where(m => m.UserID == PMGSYSession.Current.UserId).Select(m => m.DefaultRoleID).FirstOrDefault();

                //int ndCode = roleCode == 54 ? dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_DISTRICT_CODE == PMGSYSession.Current.DistrictCode).Select(x => x.ADMIN_ND_CODE).FirstOrDefault() : 0;
                //roleCode = roleCode == 54 ? (short)22 : roleCode;

                //var listProposals = dbContext.USP_GET_PROPOSAL_LIST(4, MAST_STATE_CODE, (PMGSYSession.Current.DistrictCode < 0 ? 0 : PMGSYSession.Current.DistrictCode), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR < 0 ? 0 : IMS_YEAR), (IMS_BATCH < 0 ? 0 : IMS_BATCH), (IMS_STREAMS < 0 ? 0 : IMS_STREAMS), 0, PMGSYSession.Current.AdminNdCode, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), (PMGSYSession.Current.PMGSYScheme == 3 ? (byte)1 : PMGSYSession.Current.PMGSYScheme), roleCode).ToList();///Changed for RCPLWE

                var listProposals = dbContext.USP_GET_PROPOSAL_LIST(4, MAST_STATE_CODE, (PMGSYSession.Current.DistrictCode < 0 ? 0 : PMGSYSession.Current.DistrictCode), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR < 0 ? 0 : IMS_YEAR), (IMS_BATCH < 0 ? 0 : IMS_BATCH), (IMS_STREAMS < 0 ? 0 : IMS_STREAMS), 0, PMGSYSession.Current.AdminNdCode, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, roleCode).ToList();
                IQueryable<USP_GET_PROPOSAL_LIST_Result> query = listProposals.AsQueryable<USP_GET_PROPOSAL_LIST_Result>();
                totalRecords = listProposals.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = listProposals.Sum(m => m.TOTAL_COST).HasValue ? listProposals.Sum(m => m.TOTAL_COST).Value : 0; ;//listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = listProposals.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = listProposals.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = listProposals.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = listProposals.Sum(m => m.POP999);
                colTotal.TOT_HABS = listProposals.Sum(m => m.TOTAL_HABS).HasValue ? listProposals.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = listProposals.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = listProposals.Sum(m => m.MAINT_AMT).HasValue ? listProposals.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = listProposals.Sum(m => m.ROAD_LENGTH).HasValue ? listProposals.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = listProposals.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = listProposals.Sum(m => m.ROAD_STATE).HasValue ? listProposals.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = listProposals.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = listProposals.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = listProposals.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = listProposals.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                // Added By to unlock Proposal Technology Details
                foreach (var propDetails in query)
                {
                    //is_TechnologyUnlock
                    var trnsNo = (from x in dbContext.IMS_UNLOCK_DETAILS
                                  where x.IMS_UNLOCK_TABLE.Equals("PT")
                                          && x.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                          && x.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                                          && (x.MAST_DISTRICT_CODE == null) ? true : x.MAST_DISTRICT_CODE == PMGSYSession.Current.DistrictCode
                                          && ((x.MAST_BLOCK_CODE == null) ? true : x.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE)
                                          && ((x.IMS_PR_ROAD_CODE == null) ? true : x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE)
                                          && ((x.IMS_YEAR == null) ? true : (x.IMS_YEAR.ToString().Equals(propDetails.IMS_YEAR.Substring(0, 4))))
                                          && ((x.IMS_BATCH == null) ? true : x.IMS_BATCH == propDetails.IMS_BATCH)
                                          && (x.IMS_UNLOCK_START_DATE <= localTime)
                                          && (x.IMS_UNLOCK_END_DATE >= localTime)
                                  select new
                                  {
                                      x.IMS_TRANSACTION_NO
                                  }).ToList();//Any();

                }

                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    //(propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT + propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                     //In Case of Mord Unlock Status IMS_LOCK_STATUS is Passed to EditHabitationsDetails Function
                                     //commented by Vikram
                                    //( propDetails.IMS_LOCK_STATUS == "M" ) 
                                    //    ? ( propDetails.IMS_ISBENEFITTED_HABS == "Y") 
                                    //        ? "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>"  
                                    //        : "<strong>NA</strong>" 
                                    //    :  ( propDetails.IMS_ISBENEFITTED_HABS == "Y") 
                                    //        ? ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N"  && (propDetails.IMS_ISCOMPLETED != "E" || propDetails.IMS_ISCOMPLETED !="H") ) 
                                    //            ? ((dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any())  
                                    //                ? "<a href='#' class='ui-icon ui-icon-note ui-align-center' onclick='EditHabitationsDetails(\"" 
                                    //                : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\"" ) +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "$" + propDetails.IMS_LOCK_STATUS })   + "\"); return false;'></a>" 
                                    //            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" 
                                    //        : "<strong>NA</strong>",                                    

                                    #region Habitation column old code commented for Proposals of year < 2014 condition
                                    //change done by Vikram as suggested by Dev sir - if the proposal is from 2014 or above then following conditions are applied 
                                    /*(dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(m=>m.IMS_YEAR).FirstOrDefault()) >= 2014 ? (( propDetails.IMS_LOCK_STATUS == "M" ) 
                                        ? ( propDetails.IMS_ISBENEFITTED_HABS == "Y") 
                                            ? "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>"  
                                            : "<strong>NA</strong>" 
                                        :  ( propDetails.IMS_ISBENEFITTED_HABS == "Y") 
                                            ? ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N"  && (propDetails.IMS_ISCOMPLETED != "E" || propDetails.IMS_ISCOMPLETED !="H") ) 
                                                ? ((dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any())  
                                                    ? "<a href='#' class='ui-icon ui-icon-note ui-align-center' onclick='EditHabitationsDetails(\"" 
                                                    : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\"" ) +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim()  + "$" + propDetails.IMS_LOCK_STATUS })   + "\"); return false;'></a>" 
                                                : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" 
                                            : "<strong>NA</strong>") : 
                                            // else allow proposal to map habitations at any level of proposal
                                            ( propDetails.IMS_ISBENEFITTED_HABS == "Y") 
                                            ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>"  
                                            : "<strong>NA</strong>" , */                                   
                                    #endregion
                                    
                                    #region Old Code Before Changes for Dropped and Sanctioned Proposals on 9APR2019
                                    /*(dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(m=>m.IMS_YEAR).FirstOrDefault()) < 2014 
                                    ? ( propDetails.IMS_ISBENEFITTED_HABS == "Y") 
                                            ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>"  
                                            : "<strong>NA</strong>"
                                            :
                                    (   (propDetails.IMS_ISBENEFITTED_HABS == "Y")
                                        ? ((propDetails.IMS_LOCK_STATUS == "M") || propDetails.IMS_LOCK_STATUS == "H")
                                                    //|| (dbContext.IMS_UNLOCK_DETAILS.Any(m=>m.IMS_UNLOCK_TABLE == "PH" && m.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE))
                                                    //|| (dbContext.IMS_UNLOCK_DETAILS.Any(m=>m.IMS_UNLOCK_TABLE == "PH" && SqlFunctions.StringConvert((double)m.IMS_YEAR.Value).Contains(propDetails.IMS_YEAR.Substring(0,4))))
                                                    //|| (dbContext.IMS_UNLOCK_DETAILS.Any(m=>m.IMS_UNLOCK_TABLE == "PH" && m.IMS_BATCH == propDetails.IMS_BATCH)) 
                                                  //)
                                                   ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"                                                        + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>" 
                                                   : (propDetails.IMS_LOCK_STATUS.ToUpper() == "N"  && (propDetails.IMS_ISCOMPLETED != "E" || propDetails.IMS_ISCOMPLETED !="H") ) 
                                                ? ((dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any())  
                                                    ? "<a href='#' class='ui-icon ui-icon-note ui-align-center' onclick='EditHabitationsDetails(\"" 
                                                    : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\"" ) +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +                                                          "$" + propDetails.IMS_LOCK_STATUS })   + "\"); return false;'></a>" 
                                                   //: // else allow proposal to map habitations at any level of proposal
                                                   //     (propDetails.IMS_ISBENEFITTED_HABS == "Y") 
                                                   //     ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim()                                                             + "$" + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>"  
                                                   //     //: "<strong>NA</strong>"
                                                    : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                        : "<strong>NA</strong>"),*/
                                    #endregion

                                    (   (propDetails.IMS_ISBENEFITTED_HABS.Trim() != "Y")
                                        ? "<strong>NA</strong>"
                                        : ( (propDetails.IMS_SANCTIONED == "Y") || (propDetails.IMS_SANCTIONED == "D"))
                                                   ? "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                   : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"                                                        + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>" 
                                        ),

                                    ( propDetails.IMS_LOCK_STATUS == "M" ) 
                                        ? propDetails.IMS_TRAFFIC_TYPE != null 
                                            ? "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center'  onclick='EditTrafficDetails(\"" +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>Traffic Intensity</a>" 
                                            : "<strong>NA</strong>" 
                                        : ( propDetails.IMS_TRAFFIC_TYPE != null )  
                                            ? (propDetails.IMS_LOCK_STATUS.ToUpper() == "N") 
                                                ?   ((dbContext.IMS_TRAFFIC_INTENSITY.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any()) 
                                                    ? "<a href='#' class='ui-icon ui-icon-note ui-align-center'  onclick='EditTrafficDetails(\"" 
                                                    : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center'  onclick='EditTrafficDetails(\"")+  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>Traffic Intensity</a>" 
                                                : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>" 
                                            : "<strong>NA</strong>",
                                    
                                    
                                            
                                    ( propDetails.IMS_LOCK_STATUS == "M" ) 
                                        ? "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center'  onclick='EditCBRDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>CBR Details</a>"  
                                        : ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N") 
                                            ? ((dbContext.IMS_CBR_VALUE.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any()) 
                                                ?  "<a href='#' class='ui-icon ui-icon-note ui-align-center'  onclick='EditCBRDetails(\"" 
                                                : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center'  onclick='EditCBRDetails(\"" )+ URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>CBR Details</a>" 
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                   //( propDetails.IMS_LOCK_STATUS == "M" ) 
                                   //     ?  "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" 
                                   //     : ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N") 
                                   //         ? ((dbContext.IMS_PROPOSAL_FILES.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any()) 
                                   //             ? "<a href='#' class='ui-icon ui-icon-note ui-align-center'  onclick='UploadFile(\"" 
                                   //             : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" )+ propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" 
                                   //         : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                    ( propDetails.IMS_LOCK_STATUS == "M" || propDetails.IMS_LOCK_STATUS_CPROFORMA == "M"  )  //Added to unlock C-Proforma PDF
                                    ?  "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>"
                                    : ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N")
                                        ? ((dbContext.IMS_PROPOSAL_FILES.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any())
                                            ? "<a href='#' class='ui-icon ui-icon-note ui-align-center'  onclick='UploadFile(\""
                                            : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" )+ propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>"
                                        : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                   ///Changes by SAMMED A. PATIL on 27JULY2017 to lock CBR Details and File Upload if CoreNetwork is locked uncommented above lines
                                   //"<a href='#' class='ui-icon ui-icon-plusthick ui-align-center'  onclick='EditCBRDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>CBR Details</a>"  ,
                                   //"<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" ,
                                   
                                   // new change done by Vikram on 17-09-2013
                                            //commented by Vikram as technology details should be added by PIU before finalization and will be available to mord after mord sanctioning
                                            //(propDetails.IMS_ISCOMPLETED != "E" && propDetails.IMS_ISCOMPLETED != "H")?"<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddTechnologyDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() +  "\"); return false;'>Add Technology Details</a>":"<span>-</span.",
                                            //((PMGSYSession.Current.RoleCode == 22 && (propDetails.IMS_ISCOMPLETED == "E" || propDetails.IMS_ISCOMPLETED == "H")) || (PMGSYSession.Current.RoleCode == 25 && propDetails.IMS_SANCTIONED == "Y"))?"<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddTechnologyDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() +  "\"); return false;'>Add Technology Details</a>":"<span>-</span.",
                                            // end of change
                                    
                                    //((IMS_YEAR >= 2015 && IMS_PROPOSAL_STATUS == "SY")
                                    ///Changed by SAMMED A. PATIL on 02JUNE2017 to disable Technology entry for Locked records
                                    //((IMS_YEAR >= 2015 && IMS_PROPOSAL_STATUS == "SY") || (!((propDetails.IMS_ISCOMPLETED == "E" || propDetails.IMS_ISCOMPLETED == "H") && propDetails.IMS_LOCK_STATUS.ToUpper() == "N" )) )
                                    
                                    //================================== Commented on 04-01-2022 
                                    //Changes for unlocked Proposals
                                    ///New Condition added by SAMMED A. PATIL on 04 OCTOBER 2017 to enable technology additiion if unlocked by MRD
                                    //propDetails.IMS_LOCK_STATUS.ToUpper() == "M" 
                                    //    ? "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddTechnologyDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) +  "\"); return false;'>Add Technology Details</a>"
                                    //    : ((IMS_YEAR >= 2015 && IMS_PROPOSAL_STATUS == "SY") || (!(propDetails.IMS_LOCK_STATUS.ToUpper() == "N" || propDetails.IMS_LOCK_STATUS.ToUpper() == "M")) ) ? "<a href='#' title='Locked' class='ui-icon ui-icon-locked ui-align-center' </a>" : "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddTechnologyDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) +  "\"); return false;'>Add Technology Details</a>",

                                   //==================================== Added By to unlock Proposal Technology Details
                                   // new conditions added on 04-01-2022
                                   (propDetails.IMS_LOCK_STATUS_TECH.ToUpper() == "M" || propDetails.IMS_LOCK_STATUS.ToUpper() =="M" ||  propDetails.IMS_LOCK_STATUS.ToUpper() =="N")
                                     ? "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddTechnologyDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) +  "\"); return false;'>Add Technology Details</a>"
                                      : "<a href='#' title='Locked' class='ui-icon ui-icon-locked ui-align-center' </a>" ,

                               //View Details
                                        "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"  + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>",                                    
                              //Edit Proposal
                                    ( propDetails.IMS_LOCK_STATUS == "M" ) 
                                        ? 
                                            ((PMGSYSession.Current.PMGSYScheme == 4) 
                                            ? "<a href='#' title='Click here to edit the proposal' class='ui-icon ui-icon-unlocked ui-align-center' onClick='EditDetails(\"" + URLEncrypt.EncryptParameters(new string[]                                                                                              { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>"
                                            : "<a href='#' title='Click here to Edit Unlocked Proposal' class='ui-icon ui-icon-unlocked ui-align-center' onClick='EditUnlockedProposal(\"" + URLEncrypt.EncryptParameters(new string[]                                                                              { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>" )
                                        :  ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N") 
                                            ? "<a href='#' title='Click here to edit the proposal' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>" 
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    
                                    
                                   ( (propDetails.IMS_ISCOMPLETED == "E" || propDetails.IMS_ISCOMPLETED == "H") && propDetails.IMS_LOCK_STATUS.ToUpper() == "N" ) 
                                        ? "<a href='#' title='Click here to delete the proposal' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteDetails(\""+ URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Show Details</a>" 
                                        : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",
                                    
                                    propDetails.IMS_ISCOMPLETED ,

                                    //added by abhinav pathak to upload pdf docs
                                    
                                    //dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && ( x.IMS_ISCOMPLETED  == "E" || x.IMS_ISCOMPLETED  == "H")).Any() ?//if 1
                                    dbContext.IMS_SANCTION_FOREST_CLEARANCE.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any() ?
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='GetPDFUploadView(\"" + URLEncrypt.EncryptParameters(new string[] { "IMS_PR_ROAD_CODE =" + propDetails.IMS_PR_ROAD_CODE.ToString()})  +","
                                    + "yes" + 
                                    "\"); return false;'>View Uploaded File</a>" //if 2
                                        : 
                                        "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='GetPDFUploadView(\"" + URLEncrypt.EncryptParameters(new string[] { "IMS_PR_ROAD_CODE =" + propDetails.IMS_PR_ROAD_CODE.ToString()})  +"\");                                         return false;'>Upload File</a>" //else 2
                                        //: "Proposal not finalized."//else1

                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetProposalsDAL().DAL");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Get listing of Proposals for SRRDA
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="MAST_STATE_CODE"></param>
        /// <param name="MAST_DISTRICT_CODE"></param>
        /// <param name="IMS_YEAR"></param>
        /// <param name="MAST_BLOCK_CODE"></param>
        /// <param name="IMS_BATCH"></param>
        /// <param name="IMS_STREAMS"></param>
        /// <param name="ProposalType"></param>
        /// <param name="MAST_DPIU_CODE"></param>
        /// <param name="Filters"></param>
        /// <returns></returns>
        public Array GetProposalsForSRRDADAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                //List<pr_get_proposals_for_srrda_Result> itemList = new List<pr_get_proposals_for_srrda_Result>();
                List<USP_GET_PROPOSAL_LIST_Result> itemList = new List<USP_GET_PROPOSAL_LIST_Result>();
                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "N";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "Y";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }

                //itemList = dbContext.pr_get_proposals_for_srrda(MAST_STATE_CODE, MAST_DISTRICT_CODE, PMGSYSession.Current.AdminNdCode, IMS_YEAR, IMS_BATCH, IMS_STREAMS, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), STAStatus, PTAStatus, MRDStatus, Status, PMGSYSession.Current.PMGSYScheme).ToList<pr_get_proposals_for_srrda_Result>();

                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();
                ///Changes for RCPLWE
                itemList = dbContext.USP_GET_PROPOSAL_LIST(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                totalRecords = itemList.Count();


                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        itemList = itemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //    }
                //    else
                //    {
                //        itemList = itemList.OrderByDescending(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //    }
                //}
                //else
                //{
                //    itemList = itemList.OrderBy(x => x.STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                //}



                //itemList = itemList.OrderByDescending(x => x.STATE_NAME).ToList();

                //return itemList.Select(propDetails => new
                //{
                //    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                //    cell = new[] {     
                //                    propDetails.DISTRICT_NAME.Trim(),
                //                    propDetails.BLOCK_NAME.Trim(),
                //                    propDetails.IMS_PACKAGE_ID,                                    
                //                    //propDetails.IMS_ROAD_FROM + " " + propDetails.IMS_ROAD_TO,                                  
                //                    propDetails.IMS_ROAD_NAME,  //Added By Abhishek kamble 21-May-2014                                
                //                    propDetails.IMS_PAV_LENGTH.ToString(),

                //                    (propDetails.IMS_SANCTIONED_PAV_AMT + propDetails.IMS_SANCTIONED_CD_AMT + propDetails.IMS_SANCTIONED_PW_AMT + propDetails.IMS_SANCTIONED_OW_AMT + propDetails.IMS_SANCTIONED_RS_AMT + 
                //                    propDetails.IMS_SANCTIONED_MAN_AMT1 + propDetails.IMS_SANCTIONED_MAN_AMT2 + propDetails.IMS_SANCTIONED_MAN_AMT3 + propDetails.IMS_SANCTIONED_MAN_AMT4 + propDetails.IMS_SANCTIONED_MAN_AMT5).ToString(),

                //                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"  + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>"
                //   }
                //}).ToArray();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = itemList.Sum(m => m.TOTAL_COST).HasValue ? itemList.Sum(m => m.TOTAL_COST).Value : 0; ;//itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = itemList.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = itemList.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = itemList.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = itemList.Sum(m => m.POP999);
                colTotal.TOT_HABS = itemList.Sum(m => m.TOTAL_HABS).HasValue ? itemList.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = itemList.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = itemList.Sum(m => m.MAINT_AMT).HasValue ? itemList.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = itemList.Sum(m => m.ROAD_LENGTH).HasValue ? itemList.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = itemList.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = itemList.Sum(m => m.ROAD_STATE).HasValue ? itemList.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = itemList.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = itemList.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = itemList.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = itemList.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }



                itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).ToList();

                return itemList.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {     
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    //(propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT + propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    //propDetails.STA_SANCTIONED_BY.ToString(),
                                    //propDetails.STA_SANCTIONED_DATE.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    //propDetails.PTA_SANCTIONED_BY.ToString(),
                                    //propDetails.PTA_SANCTIONED_DATE.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"  + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>",
                                    "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" 
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetProposalsForSRRDADAL().DAL");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string getRoadRoute(int cnRoadCode)
        {
            bool flag = false;
            try
            {
                dbContext = new PMGSYEntities();

                var query = dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == cnRoadCode).Select(m => m.PLAN_RD_ROUTE).FirstOrDefault();

                return query;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "getRoadRoute().DAL");
                return "";
            }
            finally
            {

            }
        }

        /// <summary>
        /// Save the Road Proposal
        /// </summary>
        /// <param name="objProposal"></param>
        /// <returns></returns>
        public string SaveRoadProposalDAL(IMS_SANCTIONED_PROJECTS objProposal)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                Int32? MaxID;

                if (!dbContext.IMS_SANCTIONED_PROJECTS.Any())
                {
                    MaxID = 0;
                }
                else
                {
                    MaxID = (from c in dbContext.IMS_SANCTIONED_PROJECTS select (Int32?)c.IMS_PR_ROAD_CODE ?? 0).Max();
                }

                objProposal.IMS_PR_ROAD_CODE = Convert.ToInt32(MaxID) + 1;
                objProposal.USERID = PMGSYSession.Current.UserId;
                objProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                objProposal.IMS_UPGRADE_CONNECT = PMGSYSession.Current.PMGSYScheme == 2 ? "U" : objProposal.IMS_UPGRADE_CONNECT;

                dbContext.IMS_SANCTIONED_PROJECTS.Add(objProposal);

                dbContext.SaveChanges();

                // For Stage 2 Propsoals Copy the Habitation Details of Stage 1 to Stage 2
                if (objProposal.IMS_STAGE_PHASE == "S2")
                {
                    try
                    {
                        CopyHabitationDetails(Convert.ToInt32(objProposal.IMS_STAGED_ROAD_ID), objProposal.IMS_PR_ROAD_CODE);
                    }
                    catch (Exception ex)
                    {
                        //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                        ErrorLog.LogError(ex, "SaveRoadProposalDAL().StagePhase.S2");
                        return "Proposal Saved Successfully, But Habitation Details are not Mapped.";
                    }
                }

                return string.Empty;
            }
            catch (DbEntityValidationException e)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(e, HttpContext.Current);
                ErrorLog.LogError(e, "SaveRoadProposalDAL(DbEntityValidationException ex).DAL");
                ModelStateDictionary modelstate = new ModelStateDictionary();

                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        modelstate.AddModelError(ve.ErrorMessage, ve.ErrorMessage);
                    }
                }
                return new CommonFunctions().FormatErrorMessage(modelstate);
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveRoadProposalDAL(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveRoadProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveRoadProposalDAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// Check it out later not Ised 
        public string UpdateProposalDAL(IMS_SANCTIONED_PROJECTS ims_sanctioned_projects)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                ims_sanctioned_projects.USERID = PMGSYSession.Current.UserId;
                ims_sanctioned_projects.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_sanctioned_projects).State = System.Data.Entity.EntityState.Modified;;
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateProposalDAL(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateProposalDAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update The Road Proposal
        /// </summary>
        /// <param name="ims_sanctioned_projects"></param>
        /// <returns></returns>
        public string UpdateRoadProposalDAL(Models.Proposal.ProposalViewModel ims_sanctioned_projects)
        {
            try
            {
                dbContext = new PMGSYEntities();

                decimal? totalCnLength = 0;

                if (PMGSYSession.Current.PMGSYScheme == 1)
                {
                    totalCnLength = (from c in dbContext.PLAN_ROAD
                                     where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                     select c.PLAN_RD_LENGTH).First();
                }
                else if (PMGSYSession.Current.PMGSYScheme == 2 || PMGSYSession.Current.PMGSYScheme == 3 || PMGSYSession.Current.PMGSYScheme == 4)///Changes for RCPLWE and PMGSY3
                {
                    // For scheme 3 - RCPLWE Road can be combination of roads so,
                    // For scheme 2 - Candidate Road can be combination of roads so,
                    // Length is considered as Total Length i.e. PLAN_RD_TOTAL_LEN
                    totalCnLength = (from c in dbContext.PLAN_ROAD
                                     where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                     select c.PLAN_RD_TOTAL_LEN).First();
                }

                decimal? ProposedLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                           where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                           && c.IMS_PROPOSAL_TYPE == "P"
                                           && c.IMS_SANCTIONED != "D"
                                           && ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                           select (decimal?)c.IMS_PAV_LENGTH).Sum();

                decimal? remainingLength = Convert.ToDecimal(totalCnLength) - Convert.ToDecimal(ProposedLength);

                if (ims_sanctioned_projects.IMS_PAV_LENGTH > (totalCnLength + (totalCnLength * Convert.ToDecimal(0.5))))
                {
                    //return "Proposed Length can not be more than 20% of Core-Network Length.";
                    return "variation in Proposed Length can be upto 50 % CN Length";
                }


                IMS_SANCTIONED_PROJECTS objProposal = new IMS_SANCTIONED_PROJECTS();

                string StateShortCode = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == PMGSY.Extensions.PMGSYSession.Current.StateCode).Select(c => c.MAST_STATE_SHORT_CODE).First();


                objProposal = dbContext.IMS_SANCTIONED_PROJECTS.Find(ims_sanctioned_projects.IMS_PR_ROAD_CODE);

                #region Assign Properties
                //objProposal.MAST_STATE_CODE = PMGSYSession.Current.StateCode;
                //objProposal.MAST_DISTRICT_CODE = PMGSYSession.Current.DistrictCode;
                //objProposal.MAST_DPIU_CODE = PMGSYSession.Current.NDCode;

                objProposal.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                objProposal.IMS_PR_ROAD_CODE = ims_sanctioned_projects.IMS_PR_ROAD_CODE;

                objProposal.IMS_UPGRADE_CONNECT = ims_sanctioned_projects.IMS_UPGRADE_CONNECT;

                // Upgradation Proposal
                if (ims_sanctioned_projects.IMS_UPGRADE_CONNECT.ToUpper() == "U")
                {
                    objProposal.MAST_EXISTING_SURFACE_CODE = ims_sanctioned_projects.MAST_EXISTING_SURFACE_CODE;

                    if (ims_sanctioned_projects.IMS_ISBENEFITTED_HABS != null)
                    {
                        // is Habitations Benefited
                        if (ims_sanctioned_projects.IMS_ISBENEFITTED_HABS.ToUpper() == "N")
                        {
                            objProposal.IMS_ISBENEFITTED_HABS = ims_sanctioned_projects.IMS_ISBENEFITTED_HABS;
                            objProposal.IMS_HABS_REASON = ims_sanctioned_projects.IMS_HABS_REASON;
                        }
                        else
                        {
                            objProposal.IMS_ISBENEFITTED_HABS = ims_sanctioned_projects.IMS_ISBENEFITTED_HABS;
                        }
                    }
                }
                // New Package or Exising Package
                //if (ims_sanctioned_projects.IMS_EXISTING_PACKAGE.ToUpper() == "N")
                //{
                //    objProposal.IMS_PACKAGE_ID =    StateShortCode + ims_sanctioned_projects.IMS_PACKAGE_ID;
                //}
                //else
                //{
                //    objProposal.IMS_PACKAGE_ID =  ims_sanctioned_projects.EXISTING_IMS_PACKAGE_ID;
                //}

                // New Package or Exising Package
                if (ims_sanctioned_projects.IMS_EXISTING_PACKAGE.ToUpper() == "N")
                {
                    objProposal.IMS_PACKAGE_ID = ims_sanctioned_projects.PACKAGE_PREFIX + ims_sanctioned_projects.IMS_PACKAGE_ID;
                }
                else
                {
                    objProposal.IMS_PACKAGE_ID = ims_sanctioned_projects.EXISTING_IMS_PACKAGE_ID;
                }

                // Staged Proposal or Complete Proposal
                if (ims_sanctioned_projects.IMS_IS_STAGED.ToUpper() == "S")
                {
                    objProposal.IMS_IS_STAGED = "S";
                    //Stage I Proposal
                    if (ims_sanctioned_projects.IMS_STAGE_PHASE == "1")
                    {
                        objProposal.IMS_STAGE_PHASE = "S1";
                    }
                    if (ims_sanctioned_projects.IMS_STAGE_PHASE == "2")
                    {
                        objProposal.IMS_STAGE_PHASE = "S2";

                        //IMS_YEAR_Staged
                        var data = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                    where
                                        c.IMS_PACKAGE_ID == ims_sanctioned_projects.Stage_2_Package_ID
                                        &&
                                        c.IMS_YEAR == ims_sanctioned_projects.Stage_2_Year
                                        &&
                                        c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                    select new
                                    {
                                        Package_ID = ims_sanctioned_projects.Stage_2_Package_ID,
                                        Year = ims_sanctioned_projects.Stage_2_Year,
                                        Road_ID = c.IMS_PR_ROAD_CODE
                                    }).ToList();
                        // Self Referencing Columns
                        foreach (var RowData in data)
                        {
                            objProposal.IMS_STAGED_YEAR = RowData.Year;
                            objProposal.IMS_STAGED_PACKAGE_ID = RowData.Package_ID.ToString();
                            objProposal.IMS_STAGED_ROAD_ID = RowData.Road_ID;
                        }

                        //validation for checking the total length of stage 2 proposals should not exceed the stage 1 proposal

                        //if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE))
                        if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE))
                        {
                            //decimal sumOfPavLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH) == null ? 0 : dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH);

                            decimal sumOfPavLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != ims_sanctioned_projects.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH) == null ? 0 : dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != ims_sanctioned_projects.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH);

                            sumOfPavLength += ims_sanctioned_projects.IMS_PAV_LENGTH.Value;

                            if (sumOfPavLength > (dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == objProposal.IMS_STAGED_ROAD_ID.Value).Select(m => m.IMS_PAV_LENGTH).FirstOrDefault()))
                            {
                                //return "Sum of Pavement Length of Stage 2 Proposals is exceeding the Pavement Length of Stage 1 Proposal.";
                                var stage2Roads = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2").Select(x => new { imsYear = x.IMS_YEAR, imsPackage = x.IMS_PACKAGE_ID, blockName = x.MASTER_BLOCK.MAST_BLOCK_NAME }).ToList();

                                string stage2Year = string.Join(",", stage2Roads[0].imsYear);
                                string stage2Package = string.Join(",", stage2Roads[0].imsPackage);
                                string stage2Block = string.Join(",", stage2Roads[0].blockName);

                                return "Sum of Pavement Length of Stage 2 Proposals is exceeding the Pavement Length of Stage 1 Proposal.<br/> Package=[" + stage2Package + "]     Year=[" + stage2Year + "]     Block=[" + stage2Block + "]";
                            }

                        }


                        CopyHabitationDetails(objProposal.IMS_STAGED_ROAD_ID.Value, objProposal.IMS_PR_ROAD_CODE);
                    }
                }
                else // Complete Proposal
                {
                    objProposal.IMS_IS_STAGED = "C";
                }


                objProposal.IMS_YEAR = ims_sanctioned_projects.IMS_YEAR;
                objProposal.IMS_BATCH = ims_sanctioned_projects.IMS_BATCH;
                objProposal.MAST_BLOCK_CODE = ims_sanctioned_projects.MAST_BLOCK_CODE;

                //FUNDING AGENCY
                objProposal.IMS_COLLABORATION = ims_sanctioned_projects.IMS_COLLABORATION;
                //STREAM
                if (ims_sanctioned_projects.isPaymentDone == false)
                {
                    objProposal.IMS_STREAMS = ims_sanctioned_projects.IMS_STREAMS;
                }
                // Link/Through Route Name
                objProposal.PLAN_CN_ROAD_CODE = ims_sanctioned_projects.PLAN_CN_ROAD_CODE != null ? Convert.ToInt32(ims_sanctioned_projects.PLAN_CN_ROAD_CODE) : 0;

                objProposal.IMS_ROAD_FROM = ims_sanctioned_projects.IMS_ROAD_FROM;
                objProposal.IMS_ROAD_TO = ims_sanctioned_projects.IMS_ROAD_TO;
                //objProposal.IMS_ROAD_NAME = ims_sanctioned_projects.IMS_ROAD_FROM + " " + ims_sanctioned_projects.IMS_ROAD_TO;
                objProposal.IMS_ROAD_NAME = dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_CN_ROAD_NUMBER).FirstOrDefault() + "-" + dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_RD_NAME).FirstOrDefault();

                objProposal.IMS_PARTIAL_LEN = ims_sanctioned_projects.IMS_PARTIAL_LEN;
                objProposal.IMS_PAV_LENGTH = ims_sanctioned_projects.IMS_PAV_LENGTH != null ? Convert.ToDecimal(ims_sanctioned_projects.IMS_PAV_LENGTH) : 0;
                objProposal.IMS_CC_LENGTH = ims_sanctioned_projects.IMS_CC_LENGTH;
                objProposal.IMS_BT_LENGTH = ims_sanctioned_projects.IMS_BT_LENGTH;

                objProposal.IMS_NO_OF_CDWORKS = ims_sanctioned_projects.IMS_NO_OF_CDWORKS == null ? 0 : Convert.ToInt32(ims_sanctioned_projects.IMS_NO_OF_CDWORKS);
                objProposal.IMS_ZP_RESO_OBTAINED = ims_sanctioned_projects.IMS_ZP_RESO_OBTAINED;

                // All Costs Estimated
                objProposal.IMS_PAV_EST_COST = ims_sanctioned_projects.IMS_SANCTIONED_PAV_AMT;
                objProposal.IMS_CD_WORKS_EST_COST = ims_sanctioned_projects.IMS_SANCTIONED_CD_AMT;
                objProposal.IMS_PROTECTION_WORKS = ims_sanctioned_projects.IMS_SANCTIONED_PW_AMT;
                objProposal.IMS_OTHER_WORK_COST = ims_sanctioned_projects.IMS_SANCTIONED_OW_AMT;
                objProposal.IMS_STATE_SHARE = Convert.ToDecimal(ims_sanctioned_projects.IMS_STATE_SHARE);

                //PMGSY Scheme-II
                objProposal.IMS_IS_HIGHER_SPECIFICATION = ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION;
                if (ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION != null && ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION.Equals("Y"))
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = ims_sanctioned_projects.IMS_HIGHER_SPECIFICATION_COST;
                }
                else
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = null;
                }
                objProposal.IMS_FURNITURE_COST = ims_sanctioned_projects.IMS_FURNITURE_COST;
                objProposal.IMS_SHARE_PERCENT = ims_sanctioned_projects.IMS_SHARE_PERCENT;

                objProposal.IMS_MAINTENANCE_YEAR1 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT1;
                objProposal.IMS_MAINTENANCE_YEAR2 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT2;
                objProposal.IMS_MAINTENANCE_YEAR3 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT3;
                objProposal.IMS_MAINTENANCE_YEAR4 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT4;
                objProposal.IMS_MAINTENANCE_YEAR5 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT5;

                //PMGSY Scheme-II
                objProposal.IMS_RENEWAL_COST = ims_sanctioned_projects.IMS_RENEWAL_COST;

                // All Costs Sanctioned
                objProposal.IMS_SANCTIONED_PAV_AMT = ims_sanctioned_projects.IMS_SANCTIONED_PAV_AMT;
                objProposal.IMS_SANCTIONED_CD_AMT = ims_sanctioned_projects.IMS_SANCTIONED_CD_AMT;
                objProposal.IMS_SANCTIONED_PW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_PW_AMT;
                objProposal.IMS_SANCTIONED_OW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_OW_AMT;
                objProposal.IMS_SANCTIONED_RS_AMT = Convert.ToDecimal(ims_sanctioned_projects.IMS_STATE_SHARE);


                //PMGSY Scheme-II
                if (ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION != null && ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION.Equals("Y"))
                {
                    objProposal.IMS_SANCTIONED_HS_AMT = ims_sanctioned_projects.IMS_HIGHER_SPECIFICATION_COST;
                }
                else
                {
                    objProposal.IMS_SANCTIONED_HS_AMT = null;
                }
                objProposal.IMS_SANCTIONED_FC_AMT = ims_sanctioned_projects.IMS_FURNITURE_COST;

                objProposal.IMS_SANCTIONED_MAN_AMT1 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT1;
                objProposal.IMS_SANCTIONED_MAN_AMT2 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT2;
                objProposal.IMS_SANCTIONED_MAN_AMT3 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT3;
                objProposal.IMS_SANCTIONED_MAN_AMT4 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT4;
                objProposal.IMS_SANCTIONED_MAN_AMT5 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT5;

                //PMGSY Scheme-II
                objProposal.IMS_SANCTIONED_RENEWAL_AMT = ims_sanctioned_projects.IMS_RENEWAL_COST;

                objProposal.MAST_MP_CONST_CODE = ims_sanctioned_projects.MAST_MP_CONST_CODE > 0 ? ims_sanctioned_projects.MAST_MP_CONST_CODE : null;
                objProposal.MAST_MLA_CONST_CODE = ims_sanctioned_projects.MAST_MLA_CONST_CODE > 0 ? ims_sanctioned_projects.MAST_MLA_CONST_CODE : null;


                objProposal.IMS_CARRIAGED_WIDTH = ims_sanctioned_projects.IMS_CARRIAGED_WIDTH;

                // Traffic Catagory
                objProposal.IMS_TRAFFIC_TYPE = ims_sanctioned_projects.IMS_TRAFFIC_TYPE == 0 ? null : ims_sanctioned_projects.IMS_TRAFFIC_TYPE;

                objProposal.IMS_PROPOSED_SURFACE = ims_sanctioned_projects.IMS_PROPOSED_SURFACE;


                objProposal.MAST_EXISTING_SURFACE_CODE = ims_sanctioned_projects.MAST_EXISTING_SURFACE_CODE;
                objProposal.IMS_REMARKS = ims_sanctioned_projects.IMS_REMARKS;

                // For Stage II Proposal Set this Flag to "H" because if Stage II Proposal is Edited then there is no way to Finalize the Habitation
                if (ims_sanctioned_projects.IMS_IS_STAGED.ToUpper() == "S" && ims_sanctioned_projects.IMS_STAGE_PHASE == "2")
                {
                    objProposal.IMS_ISCOMPLETED = "H";
                }
                else
                {
                    //Flags set on Edit before DPIU Finaliation as wel as reset after Mord Reconsider
                    objProposal.IMS_ISCOMPLETED = "E";
                }

                /// STA Flags
                objProposal.STA_SANCTIONED = "N";
                objProposal.STA_SANCTIONED_BY = null;
                objProposal.STA_SANCTIONED_DATE = null;
                objProposal.IMS_STA_REMARKS = string.Empty;

                ///MoRD Flags
                objProposal.IMS_SANCTIONED = "N";
                objProposal.IMS_SANCTIONED_BY = null;
                objProposal.IMS_SANCTIONED_DATE = null;
                objProposal.IMS_PROG_REMARKS = string.Empty;

                objProposal.IMS_SHIFT_STATUS = "N";
                objProposal.PTA_SANCTIONED = "N";
                #endregion

                #region FUND_SHARING_RATIO_PMGSY_SCHEME_1

                objProposal.IMS_STATE_SHARE_2015 = ims_sanctioned_projects.IMS_STATE_SHARE_2015;
                objProposal.IMS_MORD_SHARE_2015 = ims_sanctioned_projects.IMS_MORD_SHARE_2015;
                objProposal.IMS_SHARE_PERCENT_2015 = ims_sanctioned_projects.IMS_SHARE_PERCENT_2015;

                #endregion

                objProposal.USERID = PMGSYSession.Current.UserId;
                objProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(objProposal).State = System.Data.Entity.EntityState.Modified;

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateRoadProposalDAL(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateRoadProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateRoadProposalDAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete the Road Proposal
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public string DeleteRoadProposalDAL(int IMS_PR_ROAD_CODE)
        {
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    dbContext = new PMGSYEntities();

                    var adapter = (IObjectContextAdapter)dbContext;
                    var objectContext = adapter.ObjectContext;
                    objectContext.CommandTimeout = 0;

                    IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);
                    ims_sanctioned_projects.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_projects.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_projects).State = EntityState.Modified;
                    dbContext.SaveChanges();

                    ///Changed by SAMMED A. PATIL on 22JUNE2017 to delete record from IMS_UNLOCK_DETAILS and IMS_PROPOSAL_TRACKING if record is not sanctioned
                    if (ims_sanctioned_projects.IMS_SANCTIONED == "N")
                    {
                        if (dbContext.IMS_UNLOCK_DETAILS.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE))
                        {
                            List<IMS_UNLOCK_DETAILS> lstUnlockDetails = dbContext.IMS_UNLOCK_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();
                            foreach (var item in lstUnlockDetails)
                            {
                                dbContext.IMS_UNLOCK_DETAILS.Remove(item);
                                dbContext.SaveChanges();
                            }
                        }

                        if (dbContext.IMS_PROPOSAL_TRACKING.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE))
                        {
                            List<IMS_PROPOSAL_TRACKING> lstTrackingDetails = dbContext.IMS_PROPOSAL_TRACKING.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();
                            foreach (var item in lstTrackingDetails)
                            {
                                dbContext.IMS_PROPOSAL_TRACKING.Remove(item);
                                dbContext.SaveChanges();
                            }
                        }
                    }

                    dbContext.IMS_SANCTIONED_PROJECTS.Remove(ims_sanctioned_projects);
                    dbContext.SaveChanges();
                    ts.Complete();
                    return string.Empty;
                }
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteRoadProposalDAL(DbUpdateException ex).DAL");
                return ("An Update Error Occurred While Processing Your Request.");
                //return ex.Message.ToString();
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteRoadProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteRoadProposalDAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Method to Finalize Proposal at DPIU Level
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public string DPIUFinalizeProposalDAL(int IMS_PR_ROAD_CODE)
        {
            try
            {

                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_sanctioned_project = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);
                if (ims_sanctioned_project.IMS_ISCOMPLETED == "H" || ims_sanctioned_project.IMS_ISCOMPLETED == "E")
                {
                    ims_sanctioned_project.IMS_ISCOMPLETED = "D";
                }
                /// Check if Proposal is Reconsidered and Directly Finalized without changing any of its Details
                if (ims_sanctioned_project.IMS_SANCTIONED == "R")
                {
                    /// STA Flags
                    ims_sanctioned_project.STA_SANCTIONED = "N";
                    ims_sanctioned_project.STA_SANCTIONED_BY = null;
                    ims_sanctioned_project.STA_SANCTIONED_DATE = null;
                    ims_sanctioned_project.IMS_STA_REMARKS = string.Empty;

                    /// MoRD Flags
                    ims_sanctioned_project.IMS_SANCTIONED = "N";
                    ims_sanctioned_project.IMS_PROG_REMARKS = null;
                    ims_sanctioned_project.IMS_SANCTIONED_BY = string.Empty;
                    ims_sanctioned_project.IMS_SANCTIONED_DATE = null;
                }

                ims_sanctioned_project.IMS_LOCK_STATUS = "Y";
                ims_sanctioned_project.USERID = PMGSYSession.Current.UserId;
                ims_sanctioned_project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_sanctioned_project).State = System.Data.Entity.EntityState.Modified;

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DPIUFinalizeProposalDAL().DAL");
                return "An Error Occurred While Processing Your Request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Get the Core Network Road Remaining Length
        /// </summary>
        /// <param name="PLAN_CN_ROAD_CODE"></param>
        /// <param name="isStageTwoProposal"></param>
        /// <returns></returns>
        public string GetRoadDetailsDAL(int PLAN_CN_ROAD_CODE, bool isStageTwoProposal, int IMS_PR_ROAD_CODE, int IMS_STAGED_ROAD_ID)
        {
            try
            {
                dbContext = new PMGSYEntities();
                decimal? totalCnLength = 0.0M;
                if (!isStageTwoProposal)
                {
                    if (IMS_PR_ROAD_CODE != 0)
                    {
                        IMS_SANCTIONED_PROJECTS ims_sanctioned_project = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);

                        if (PLAN_CN_ROAD_CODE == ims_sanctioned_project.PLAN_CN_ROAD_CODE)
                        {
                            return Convert.ToString(ims_sanctioned_project.IMS_PAV_LENGTH);
                        }
                        else
                        {
                            if (PMGSYSession.Current.PMGSYScheme == 1)
                            {
                                /// Incase of Editing the Proposal 
                                totalCnLength = (from c in dbContext.PLAN_ROAD
                                                 where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                                 select c.PLAN_RD_LENGTH).First();
                            }
                            else if (PMGSYSession.Current.PMGSYScheme == 2 || PMGSYSession.Current.PMGSYScheme == 3 || PMGSYSession.Current.PMGSYScheme == 4 || PMGSYSession.Current.PMGSYScheme == 5)///Changes for RCPLWE and PMGSY3
                            {
                                // For scheme 3 - RCPLWE Road can be combination of roads so,
                                // For scheme 2 - Candidate Road can be combination of roads so,
                                // Length is considered as Total Length i.e. PLAN_RD_TOTAL_LEN
                                totalCnLength = (from c in dbContext.PLAN_ROAD
                                                 where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                                 select c.PLAN_RD_TOTAL_LEN).First();
                            }

                            decimal? ProposedLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                       where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                                       && c.IMS_PROPOSAL_TYPE == "P"
                                                       && c.IMS_SANCTIONED != "D"
                                                       && ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                                       select (decimal?)c.IMS_PAV_LENGTH).Sum();

                            return (Convert.ToDecimal(totalCnLength) - Convert.ToDecimal(ProposedLength)).ToString();

                        }
                    }
                    else
                    {
                        if (PMGSYSession.Current.PMGSYScheme == 1)
                        {
                            totalCnLength = (from c in dbContext.PLAN_ROAD
                                             where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                             select c.PLAN_RD_LENGTH).First();
                        }
                        else if (PMGSYSession.Current.PMGSYScheme == 2 || PMGSYSession.Current.PMGSYScheme == 3 || PMGSYSession.Current.PMGSYScheme == 4 || PMGSYSession.Current.PMGSYScheme == 5)///Changes for RCPLWE and PMGSY3
                        {
                            // For scheme 3 - Candidate Road can be combination of roads so,
                            // For scheme 2 - Candidate Road can be combination of roads so,
                            // Length is considered as Total Length i.e. PLAN_RD_TOTAL_LEN
                            totalCnLength = (from c in dbContext.PLAN_ROAD
                                             where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                             select c.PLAN_RD_TOTAL_LEN).First();
                        }

                        decimal? ProposedLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                   where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                                   && c.IMS_PROPOSAL_TYPE == "P"
                                                   && c.IMS_SANCTIONED != "D"
                                                   && ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                                   select (decimal?)c.IMS_PAV_LENGTH).Sum();

                        return (Convert.ToDecimal(totalCnLength) - Convert.ToDecimal(ProposedLength)).ToString();
                    }
                }
                else
                {

                    //decimal CNLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                    //                    where c.IMS_PR_ROAD_CODE == ((from d in dbContext.IMS_SANCTIONED_PROJECTS
                    //                                                    where d.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                    //                                                    && d.IMS_PROPOSAL_TYPE == "P"
                    //                                                    select d.IMS_PR_ROAD_CODE).FirstOrDefault())
                    //                    select c.IMS_PAV_LENGTH).First();
                    //return CNLength.ToString();

                    decimal Stage1Length = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                            where c.IMS_PR_ROAD_CODE == IMS_STAGED_ROAD_ID
                                            select c.IMS_PAV_LENGTH).First();

                    return Stage1Length.ToString();

                }
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetRoadDetailsDAL().DAL");
                // Error Code -999 for Handling Exception
                return "-999";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Get the Road Details while updating Road Proposal
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <param name="PLAN_CN_ROAD_CODE"></param>
        /// <returns></returns>
        public string GetRoadDetailsForUpdateDAL(int IMS_PR_ROAD_CODE, int PLAN_CN_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                decimal? totalCnLength = 0.0M;
                if (PMGSYSession.Current.PMGSYScheme == 1)
                {
                    totalCnLength = (from c in dbContext.PLAN_ROAD
                                     where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                     select c.PLAN_RD_LENGTH).First();
                }
                else if (PMGSYSession.Current.PMGSYScheme == 2 || PMGSYSession.Current.PMGSYScheme == 3 || PMGSYSession.Current.PMGSYScheme == 4 || PMGSYSession.Current.PMGSYScheme == 5)///Changes for RCPLWE, PMGSY3
                {
                    // For scheme 2  - Candidate Road can be combination of roads so, 
                    // For scheme 3 and RCPLWE Road can be combination of roads so
                    // Length is considered as Total Length i.e. PLAN_RD_TOTAL_LEN
                    totalCnLength = (from c in dbContext.PLAN_ROAD
                                     where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                                     select c.PLAN_RD_TOTAL_LEN).First();
                }

                decimal? ProposedLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                           where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE &&
                                           c.IMS_PR_ROAD_CODE != IMS_PR_ROAD_CODE &&
                                           ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                           select (decimal?)c.IMS_PAV_LENGTH).Sum();


                return (Convert.ToDecimal(totalCnLength) - Convert.ToDecimal(ProposedLength)).ToString();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetRoadDetailsForUpdateDAL().DAL");
                // Error Code -999 for Handling Exception
                return "-999";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Get the Length of Stage II Proposal
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <param name="PLAN_CN_ROAD_CODE"></param>
        /// <returns></returns>
        public string GetRoadDetailsForStageTwoProposalDAL(int IMS_STAGED_ROAD_ID, int PLAN_CN_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();

                //decimal? totalCnLength = (from c in dbContext.PLAN_ROAD
                //                          where c.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                //                          select c.PLAN_RD_LENGTH).First();

                decimal? totalCnLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                          where c.IMS_PR_ROAD_CODE == IMS_STAGED_ROAD_ID
                                          select c.IMS_PAV_LENGTH).First();

                return (Convert.ToDecimal(totalCnLength)).ToString();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetRoadDetailsForStageTwoProposalDAL().DAL");
                // Error Code -999 for Handling Exception
                return "-999";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns whether the proposal is financially complete or not
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public bool IsProposalFinanciallyClosed(int proposalCode)
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    CommonFunctions objCommon = new CommonFunctions();

                    DateTime dateToCheck = objCommon.GetStringToDateTime("20/11/2015");

                    if (dbContext.ACC_BILL_DETAILS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.FINAL_PAYMENT == true && m.ACC_BILL_MASTER.BILL_DATE < dateToCheck))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "IsProposalFinanciallyClosed().DAL");
                return false;
            }
        }

        #endregion

        #region STA Road Proposal

        /// <summary>
        /// STA Finalize the Road Proposal
        /// </summary>
        /// <param name="staSanctionViewModel"></param>
        /// <param name="ProposalStatus"></param>
        /// <returns></returns>
        public string STAFinalizeProposalDAL(StaSanctionViewModel staSanctionViewModel, string ProposalStatus)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_Sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Find(staSanctionViewModel.IMS_PR_ROAD_CODE);

                //var districts = dbContext.TECH_AGENCY_SCRUTINY_RESTRICTED.Where(x => x.USERID == PMGSYSession.Current.UserId && System.DateTime.Now >= x.START_DATE && (x.END_DATE.HasValue ? (System.DateTime.Now <= x.END_DATE) : ('%'=='%'))).Select(x => x.MAST_DISTRICT_CODE).ToList();
                var districts = dbContext.TECH_AGENCY_SCRUTINY_RESTRICTED.Where(x => x.USERID == PMGSYSession.Current.UserId && EntityFunctions.TruncateTime(System.DateTime.Now) >= x.START_DATE && (x.END_DATE == null || x.END_DATE.Value >= EntityFunctions.TruncateTime(System.DateTime.Now))).Select(x => x.MAST_DISTRICT_CODE).ToList();
                if (districts != null)
                {
                    if (/*PMGSYSession.Current.UserId == 5455 &&*/ ims_Sanctioned_Project.IMS_PROPOSAL_TYPE == "P" && districts.Contains(ims_Sanctioned_Project.MAST_DISTRICT_CODE))
                    {
                        return "The District is allocated only for scrutiny of Bridge Proposal.";
                    }
                }

                ims_Sanctioned_Project.STA_SANCTIONED = ProposalStatus;
                ims_Sanctioned_Project.STA_SANCTIONED_BY = PMGSY.Extensions.PMGSYSession.Current.UserName;

                if (ims_Sanctioned_Project.IMS_ISCOMPLETED == "D")
                {
                    ims_Sanctioned_Project.IMS_ISCOMPLETED = "S";                   // S is for STA Sanctioned
                }

                if (ProposalStatus == "Y")
                {
                    ims_Sanctioned_Project.STA_SANCTIONED_DATE = Convert.ToDateTime(staSanctionViewModel.STA_SANCTIONED_DATE);
                    ims_Sanctioned_Project.IMS_STA_REMARKS = staSanctionViewModel.MS_STA_REMARKS.Trim();
                }
                else if (ProposalStatus == "U")
                {
                    ims_Sanctioned_Project.STA_SANCTIONED_DATE = Convert.ToDateTime(staSanctionViewModel.STA_UNSCRUTINY_DATE);
                    ims_Sanctioned_Project.IMS_STA_REMARKS = staSanctionViewModel.MS_STA_UnScrutinised_REMARKS.Trim();
                }
                ims_Sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                ims_Sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_Sanctioned_Project).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "STAFinalizeProposalDAL(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "STAFinalizeProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "STAFinalizeProposalDAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /*Commented By Hrishikesh 26-07-2023 For Vibrant Village Mapp Scheme
        /// <summary>
        /// Enlist the Road Proposals for STA and PTA Login
        /// Conditional population of records based on STA/PTA role code
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="MAST_STATE_CODE"></param>
        /// <param name="IMS_YEAR"></param>
        /// <param name="MAST_DISTRICT_ID"></param>
        /// <param name="IMS_BATCH"></param>
        /// <param name="IMS_STREAMS"></param>
        /// <param name="IMS_PROPOSAL_TYPE"></param>
        /// <param name="IMS_PROPOSAL_STATUS"></param>
        /// <returns></returns>
        public Array GetSTAProposalsDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MAST_STATE_CODE, int IMS_YEAR, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                List<IMS_SANCTIONED_PROJECTS> listProposals;


                //------- block of code added by shyam to ensure that only proposals under mapped districts should be populated.
                Int32 taCode = dbContext.ADMIN_TECHNICAL_AGENCY.Where(a => a.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(a => a.ADMIN_TA_CODE).FirstOrDefault();

                var taMappedDistricts = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_CODE == taCode && x.MAST_IS_ACTIVE == "Y" && x.MAST_IS_FINALIZED == "Y").Select(p => p.MAST_DISTRICT_CODE).ToList();
                ///Changes for RCPLWE STA Scheme Mapping
                var taMappedScheme = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_CODE == taCode && x.MAST_IS_ACTIVE == "Y" && x.MAST_IS_FINALIZED == "Y").Select(p => p.MAST_SCHEME).ToList();
                //-----------------------------------------------------

                if (IMS_PROPOSAL_STATUS == "Y")     //scrutinized Proposals
                {
                    listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                              c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                              (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                                              // populate proposals of mapped districts only for particular STA &
                                                                               // in case of common districts for STAs, if already scrutinized proposals then it should be available to STA who scrutinized those proposals.
                                                                              taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                                              c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&

                                                                              c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                              c.IMS_PROPOSAL_TYPE == "P" &&

                                                                              //c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" && //commneted by Vikram as suggested by Dev Sir

                                                                              c.STA_SANCTIONED == "Y" &&

                                                                              (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                              (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                              (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                               //(IMS_STREAMS > 0 ? c.IMS_STREAMS : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                              (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                                           select c)
                                     .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                      join a in dbContext.ADMIN_TECHNICAL_AGENCY
                                                                                                                      on c.PTA_SANCTIONED_BY equals a.ADMIN_TA_CODE
                                                                                                                      where
                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                                                                                                                         a.ADMIN_USER_ID == PMGSYSession.Current.UserId &&
                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                         c.PTA_SANCTIONED == "Y" &&

                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                                                                                      select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                }
                else if (IMS_PROPOSAL_STATUS == "U")    //Un-scrutinized Proposals
                {
                    listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                               c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                               (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                                               // populate proposals of mapped districts only for particular STA
                                                                               taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                                               c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                               c.IMS_PROPOSAL_TYPE == "P" &&

                                                                               //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&  //commneted by Vikram as suggested by Dev Sir
                                                                               c.STA_SANCTIONED == "U" &&

                                                                               (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                               (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                               (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                               (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                           select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                                                                     where
                                                                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                                                                         c.PTA_SANCTIONED == "U" &&

                                                                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                                                                                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                }
                else if (IMS_PROPOSAL_STATUS == "N")    //Pending Proposals
                {
                    listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                               c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                               (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                                               // populate proposals of mapped districts only for particular STA
                                                                               taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                                               c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                               c.IMS_PROPOSAL_TYPE == "P" &&

                                                                               (c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                                                               c.STA_SANCTIONED == "N" &&

                                                                               (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&

                                                                               (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                               (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                               (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                           select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                                                                     where
                                                                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                                                                         c.PTA_SANCTIONED == "N" &&

                                                                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                                                                                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                }
                else // for all
                {
                    //listProposals = (PMGSYSession.Current.RoleCode==3?(from c in dbContext.IMS_SANCTIONED_PROJECTS
                    //                 where
                    //                     c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                    //                     // populate proposals of mapped districts only for particular STA
                    //                     taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                    //                     c.MAST_STATE_CODE == MAST_STATE_CODE &&
                    //                     c.IMS_PROPOSAL_TYPE == "P" &&

                    //                     c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" &&

                    //                     (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                    //                     (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                    //                     (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                    //                     (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                    //                                                   select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                    //                                                                                                                                             where
                    //                                                                                                                                                 c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                    //                                                                                                                                                 c.MAST_STATE_CODE == MAST_STATE_CODE &&
                    //                                                                                                                                                 c.IMS_PROPOSAL_TYPE == "P" &&

                    //                                                                                                                                                 c.STA_SANCTIONED == "Y" &&

                    //                                                                                                                                                 (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                    //                                                                                                                                                 (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                    //                                                                                                                                                 (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                    //                                                                                                                                                 (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                    //                                                                                                                                             select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                    //Cnange by on 2 July 2014

                    if (PMGSYSession.Current.RoleCode == 3) //STA
                    {

                        var list1Scrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                where
                                                   c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                   (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                   // populate proposals of mapped districts only for particular STA &
                                                    // in case of common districts for STAs, if already scrutinized proposals then it should be available to STA who scrutinized those proposals.
                                                   taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                   c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&

                                                   c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                   c.IMS_PROPOSAL_TYPE == "P" &&

                                                   //c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" && //commneted by Vikram as suggested by Dev Sir

                                                   c.STA_SANCTIONED == "Y" &&

                                                   (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                   (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                   (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                    //(IMS_STREAMS > 0 ? c.IMS_STREAMS : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                   (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                select c)
                                     .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();

                        var list2Unscrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                  where
                                                      c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                      (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                      // populate proposals of mapped districts only for particular STA
                                                      taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                      c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&
                                                      c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                      c.IMS_PROPOSAL_TYPE == "P" &&

                                                      //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") && //commneted by Vikram as suggested by Dev Sir
                                                      c.STA_SANCTIONED == "U" &&

                                                      (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                      (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                      (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                      (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                  select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();

                        var list3Pending = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                            where
                                                c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                // populate proposals of mapped districts only for particular STA
                                                taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                c.IMS_PROPOSAL_TYPE == "P" &&

                                                (c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                                c.STA_SANCTIONED == "N" &&

                                                (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&

                                                (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                            select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                        listProposals = (list1Scrutinized.Union(list2Unscrutinized)).Union(list3Pending).ToList<IMS_SANCTIONED_PROJECTS>();
                    }
                    else
                    {

                        var list1OtherScrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                     join a in dbContext.ADMIN_TECHNICAL_AGENCY
                                                         on c.PTA_SANCTIONED_BY equals a.ADMIN_TA_CODE
                                                     where
                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                                                         a.ADMIN_USER_ID == PMGSYSession.Current.UserId &&
                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                         c.STA_SANCTIONED == "Y" &&
                                                         c.PTA_SANCTIONED == "Y" &&

                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                        var list2OtherUnscritinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                       where
                                                       c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                                                       c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                       c.IMS_PROPOSAL_TYPE == "P" &&

                                                       c.STA_SANCTIONED == "Y" &&
                                                       c.PTA_SANCTIONED == "U" &&

                                                       (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                       (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                       (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                       (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                       select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();

                        var list3OtherPending = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                 where
                                                     c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                     c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                     c.IMS_PROPOSAL_TYPE == "P" &&

                                                     c.STA_SANCTIONED == "Y" &&
                                                     c.PTA_SANCTIONED == "N" &&

                                                     (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                     (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                     (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                     (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                 select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();


                        listProposals = (list1OtherScrutinized.Union(list2OtherUnscritinized)).Union(list3OtherPending).ToList<IMS_SANCTIONED_PROJECTS>();

                    }

                }

                IQueryable<IMS_SANCTIONED_PROJECTS> query = listProposals.AsQueryable<IMS_SANCTIONED_PROJECTS>();
                totalRecords = listProposals.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                if (PMGSYSession.Current.RoleCode == 3)
                {
                    return query.Select(propDetails => new
                    {
                        id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] {                                                             
                                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID,
                                    //propDetails.PLAN_ROAD == null ? "NA" :  propDetails.PLAN_ROAD.PLAN_RD_NAME,
                                    //propDetails.IMS_ROAD_FROM + " " + propDetails.IMS_ROAD_TO,
                                    propDetails.IMS_ROAD_NAME,
                                    propDetails.IMS_PAV_LENGTH.ToString() ,
                                    propDetails.IMS_PAV_EST_COST.ToString(),
                                    propDetails.STA_SANCTIONED == "Y" ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS +"\"); return false;'>Show Details</a>"
                   }
                    }).ToArray();
                }
                else
                {
                    return query.Select(propDetails => new
                    {
                        id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] {                                                             
                                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID,
                                    //propDetails.PLAN_ROAD == null ? "NA" :  propDetails.PLAN_ROAD.PLAN_RD_NAME,
                                    //propDetails.IMS_ROAD_FROM + " " + propDetails.IMS_ROAD_TO,
                                    propDetails.IMS_ROAD_NAME,

                                    propDetails.IMS_PAV_LENGTH.ToString() ,
                                    propDetails.IMS_PAV_EST_COST.ToString(),
                                    "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" ,
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS +"\"); return false;'>Show Details</a>",
                                    
                   }
                    }).ToArray();
                }

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetSTAProposalsDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
*/
        
        //Changed By Hrishikesh For Vibrant Village Mapp Scheme --26-07-2023-- original Method is Commented Above 
        /// <summary>
        /// Enlist the Road Proposals for STA and PTA Login
        /// Conditional population of records based on STA/PTA role code
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="MAST_STATE_CODE"></param>
        /// <param name="IMS_YEAR"></param>
        /// <param name="MAST_DISTRICT_ID"></param>
        /// <param name="IMS_BATCH"></param>
        /// <param name="IMS_STREAMS"></param>
        /// <param name="IMS_PROPOSAL_TYPE"></param>
        /// <param name="IMS_PROPOSAL_STATUS"></param>
        /// <returns></returns>
        public Array GetSTAProposalsDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MAST_STATE_CODE, int IMS_YEAR, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                List<IMS_SANCTIONED_PROJECTS> listProposals;


                //------- block of code added by shyam to ensure that only proposals under mapped districts should be populated.
                Int32 taCode = dbContext.ADMIN_TECHNICAL_AGENCY.Where(a => a.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(a => a.ADMIN_TA_CODE).FirstOrDefault();

                var taMappedDistricts = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_CODE == taCode && x.MAST_IS_ACTIVE == "Y" && x.MAST_IS_FINALIZED == "Y").Select(p => p.MAST_DISTRICT_CODE).ToList();
                ///Changes for RCPLWE STA Scheme Mapping
                //var taMappedScheme = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_CODE == taCode && x.MAST_IS_ACTIVE == "Y" && x.MAST_IS_FINALIZED == "Y").Select(p => p.MAST_SCHEME).ToList();
                var taMappedScheme = dbContext.ADMIN_TA_STATE.Where(x => x.ADMIN_TA_CODE == taCode && x.MAST_IS_ACTIVE == "Y" && x.MAST_IS_FINALIZED == "Y").Select(p => p.STR_MAST_SCHEME).ToList();
                //-----------------------------------------------------

                if (IMS_PROPOSAL_STATUS == "Y")     //scrutinized Proposals
                {
                    /*listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                              c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                              (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                                              // populate proposals of mapped districts only for particular STA &
                                                                              // in case of common districts for STAs, if already scrutinized proposals then it should be available to STA who scrutinized those proposals.
                                                                              taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                                              c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&

                                                                              c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                              c.IMS_PROPOSAL_TYPE == "P" &&

                                                                              //c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" && //commneted by Vikram as suggested by Dev Sir

                                                                              c.STA_SANCTIONED == "Y" &&

                                                                              (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                              (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                              (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                              //(IMS_STREAMS > 0 ? c.IMS_STREAMS : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                              (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                                           select c)
                                     .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                      join a in dbContext.ADMIN_TECHNICAL_AGENCY
                                                                                                                      on c.PTA_SANCTIONED_BY equals a.ADMIN_TA_CODE
                                                                                                                      where
                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                                                                                                                         a.ADMIN_USER_ID == PMGSYSession.Current.UserId &&
                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                         c.PTA_SANCTIONED == "Y" &&

                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                                                                                      select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
*/
                    listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                              c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                              (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains("3") || taMappedScheme.Contains("1,2,3") || taMappedScheme.Contains("2,3") || taMappedScheme.Contains("1,3")) : (1 == 1)) &&

                                                                              // populate proposals of mapped districts only for particular STA &
                                                                              // in case of common districts for STAs, if already scrutinized proposals then it should be available to STA who scrutinized those proposals.
                                                                              taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                                              c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&

                                                                              c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                              c.IMS_PROPOSAL_TYPE == "P" &&

                                                                              //c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" && //commneted by Vikram as suggested by Dev Sir

                                                                              c.STA_SANCTIONED == "Y" &&

                                                                              (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                              (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                              (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                              //(IMS_STREAMS > 0 ? c.IMS_STREAMS : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                              (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                                           select c)
                                     .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                      join a in dbContext.ADMIN_TECHNICAL_AGENCY
                                                                                                                      on c.PTA_SANCTIONED_BY equals a.ADMIN_TA_CODE
                                                                                                                      where
                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                                                                                                                         a.ADMIN_USER_ID == PMGSYSession.Current.UserId &&
                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                         c.PTA_SANCTIONED == "Y" &&

                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                                                                                      select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());

                }
                else if (IMS_PROPOSAL_STATUS == "U")    //Un-scrutinized Proposals
                {
                    /*listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                               c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                               (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                                               // populate proposals of mapped districts only for particular STA
                                                                               taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                                               c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                               c.IMS_PROPOSAL_TYPE == "P" &&

                                                                               //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&  //commneted by Vikram as suggested by Dev Sir
                                                                               c.STA_SANCTIONED == "U" &&

                                                                               (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                               (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                               (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                               (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                           select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                                                                     where
                                                                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                                                                         c.PTA_SANCTIONED == "U" &&

                                                                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                                                                                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                */

                    listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                               c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                               //(PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&
                                                                               (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains("3") || taMappedScheme.Contains("1,2,3") || taMappedScheme.Contains("2,3") || taMappedScheme.Contains("1,3")) : (1 == 1)) &&

                                                                               // populate proposals of mapped districts only for particular STA
                                                                               taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                                               c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                               c.IMS_PROPOSAL_TYPE == "P" &&

                                                                               //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&  //commneted by Vikram as suggested by Dev Sir
                                                                               c.STA_SANCTIONED == "U" &&

                                                                               (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                               (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                               (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                               (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                           select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                                                                     where
                                                                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                                                                         c.PTA_SANCTIONED == "U" &&

                                                                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                                                                                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());

                }
                else if (IMS_PROPOSAL_STATUS == "N")    //Pending Proposals
                {
                    /*listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                               c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                               (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                                               // populate proposals of mapped districts only for particular STA
                                                                               taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                                               c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                               c.IMS_PROPOSAL_TYPE == "P" &&

                                                                               (c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                                                               c.STA_SANCTIONED == "N" &&

                                                                               (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&

                                                                               (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                               (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                               (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                           select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                                                                     where
                                                                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                                                                         c.PTA_SANCTIONED == "N" &&

                                                                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                                                                                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                */
                    listProposals = (PMGSYSession.Current.RoleCode == 3 ? (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                           where
                                                                               c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                               //(PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&
                                                                               (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains("3") || taMappedScheme.Contains("1,2,3") || taMappedScheme.Contains("2,3") || taMappedScheme.Contains("1,3")) : (1 == 1)) &&


                                                                               // populate proposals of mapped districts only for particular STA
                                                                               taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                                               c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                               c.IMS_PROPOSAL_TYPE == "P" &&

                                                                               (c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                                                               c.STA_SANCTIONED == "N" &&

                                                                               (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&

                                                                               (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                               (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                               (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                           select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                                                                                                                                     where
                                                                                                                                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                                                                                                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                                                                                                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                                                                                                                                         c.STA_SANCTIONED == "Y" &&
                                                                                                                                                                         c.PTA_SANCTIONED == "N" &&

                                                                                                                                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                                                                                                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                                                                                                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                                                                                                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                                                                                                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                }
                else // for all
                {
                    //listProposals = (PMGSYSession.Current.RoleCode==3?(from c in dbContext.IMS_SANCTIONED_PROJECTS
                    //                 where
                    //                     c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                    //                     // populate proposals of mapped districts only for particular STA
                    //                     taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                    //                     c.MAST_STATE_CODE == MAST_STATE_CODE &&
                    //                     c.IMS_PROPOSAL_TYPE == "P" &&

                    //                     c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" &&

                    //                     (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                    //                     (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                    //                     (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                    //                     (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                    //                                                   select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>() : (from c in dbContext.IMS_SANCTIONED_PROJECTS
                    //                                                                                                                                             where
                    //                                                                                                                                                 c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                    //                                                                                                                                                 c.MAST_STATE_CODE == MAST_STATE_CODE &&
                    //                                                                                                                                                 c.IMS_PROPOSAL_TYPE == "P" &&

                    //                                                                                                                                                 c.STA_SANCTIONED == "Y" &&

                    //                                                                                                                                                 (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                    //                                                                                                                                                 (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                    //                                                                                                                                                 (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                    //                                                                                                                                                 (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                    //                                                                                                                                             select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>());
                    //Cnange by on 2 July 2014

                    if (PMGSYSession.Current.RoleCode == 3) //STA
                    {

                        /*var list1Scrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                where
                                                   c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                   (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                   // populate proposals of mapped districts only for particular STA &
                                                   // in case of common districts for STAs, if already scrutinized proposals then it should be available to STA who scrutinized those proposals.
                                                   taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                   c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&

                                                   c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                   c.IMS_PROPOSAL_TYPE == "P" &&

                                                   //c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" && //commneted by Vikram as suggested by Dev Sir

                                                   c.STA_SANCTIONED == "Y" &&

                                                   (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                   (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                   (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                   //(IMS_STREAMS > 0 ? c.IMS_STREAMS : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                   (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                select c)
                                     .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
*/
                        var list1Scrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                where
                                                   c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                   //(PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&
                                                   (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains("3") || taMappedScheme.Contains("1,2,3") || taMappedScheme.Contains("2,3") || taMappedScheme.Contains("1,3")) : (1 == 1)) &&

                                                   // populate proposals of mapped districts only for particular STA &
                                                   // in case of common districts for STAs, if already scrutinized proposals then it should be available to STA who scrutinized those proposals.
                                                   taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                   c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&

                                                   c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                   c.IMS_PROPOSAL_TYPE == "P" &&

                                                   //c.IMS_ISCOMPLETED != "E" && c.IMS_ISCOMPLETED != "H" && //commneted by Vikram as suggested by Dev Sir

                                                   c.STA_SANCTIONED == "Y" &&

                                                   (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                   (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                   (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                   //(IMS_STREAMS > 0 ? c.IMS_STREAMS : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                   (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                select c)
                                     .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();



                        /*var list2Unscrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                  where
                                                      c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                      (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                      // populate proposals of mapped districts only for particular STA
                                                      taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                      c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&
                                                      c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                      c.IMS_PROPOSAL_TYPE == "P" &&

                                                      //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") && //commneted by Vikram as suggested by Dev Sir
                                                      c.STA_SANCTIONED == "U" &&

                                                      (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                      (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                      (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                      (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                  select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
*/
                        var list2Unscrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                  where
                                                      c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                      //(PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&
                                                      (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains("3") || taMappedScheme.Contains("1,2,3") || taMappedScheme.Contains("2,3") || taMappedScheme.Contains("1,3")) : (1 == 1)) &&

                                                      // populate proposals of mapped districts only for particular STA
                                                      taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&
                                                      c.STA_SANCTIONED_BY == PMGSYSession.Current.UserName &&
                                                      c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                      c.IMS_PROPOSAL_TYPE == "P" &&

                                                      //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") && //commneted by Vikram as suggested by Dev Sir
                                                      c.STA_SANCTIONED == "U" &&

                                                      (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                      (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                      (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                      (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                  select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();

                        /*var list3Pending = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                            where
                                                c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&

                                                // populate proposals of mapped districts only for particular STA
                                                taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                c.IMS_PROPOSAL_TYPE == "P" &&

                                                (c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                                c.STA_SANCTIONED == "N" &&

                                                (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&

                                                (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                            select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                        listProposals = (list1Scrutinized.Union(list2Unscrutinized)).Union(list3Pending).ToList<IMS_SANCTIONED_PROJECTS>();
*/
                        var list3Pending = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                            where
                                                c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                //(PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains(3) || taMappedScheme.Contains(7) || taMappedScheme.Contains(5) || taMappedScheme.Contains(6)) : (1 == 1)) &&
                                                (PMGSYSession.Current.PMGSYScheme == 3 ? (taMappedScheme.Contains("3") || taMappedScheme.Contains("1,2,3") || taMappedScheme.Contains("2,3") || taMappedScheme.Contains("1,3")) : (1 == 1)) &&

                                                // populate proposals of mapped districts only for particular STA
                                                taMappedDistricts.Contains(c.MAST_DISTRICT_CODE) &&

                                                c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                c.IMS_PROPOSAL_TYPE == "P" &&

                                                (c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                                c.STA_SANCTIONED == "N" &&

                                                (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&

                                                (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                            select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                        listProposals = (list1Scrutinized.Union(list2Unscrutinized)).Union(list3Pending).ToList<IMS_SANCTIONED_PROJECTS>();

                    }
                    else
                    {

                        var list1OtherScrutinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                     join a in dbContext.ADMIN_TECHNICAL_AGENCY
                                                         on c.PTA_SANCTIONED_BY equals a.ADMIN_TA_CODE
                                                     where
                                                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                                                         a.ADMIN_USER_ID == PMGSYSession.Current.UserId &&
                                                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                         c.IMS_PROPOSAL_TYPE == "P" &&

                                                         c.STA_SANCTIONED == "Y" &&
                                                         c.PTA_SANCTIONED == "Y" &&

                                                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                        var list2OtherUnscritinized = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                       where
                                                       c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                                                       c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                       c.IMS_PROPOSAL_TYPE == "P" &&

                                                       c.STA_SANCTIONED == "Y" &&
                                                       c.PTA_SANCTIONED == "U" &&

                                                       (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                       (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                       (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                       (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                       select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();

                        var list3OtherPending = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                                 where
                                                     c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013

                                                     c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                                     c.IMS_PROPOSAL_TYPE == "P" &&

                                                     c.STA_SANCTIONED == "Y" &&
                                                     c.PTA_SANCTIONED == "N" &&

                                                     (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                                     (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                                     (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                                     (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                                                 select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();


                        listProposals = (list1OtherScrutinized.Union(list2OtherUnscritinized)).Union(list3OtherPending).ToList<IMS_SANCTIONED_PROJECTS>();

                    }

                }

                IQueryable<IMS_SANCTIONED_PROJECTS> query = listProposals.AsQueryable<IMS_SANCTIONED_PROJECTS>();
                totalRecords = listProposals.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                if (PMGSYSession.Current.RoleCode == 3)
                {
                    return query.Select(propDetails => new
                    {
                        id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] {
                                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID,
                                    //propDetails.PLAN_ROAD == null ? "NA" :  propDetails.PLAN_ROAD.PLAN_RD_NAME,
                                    //propDetails.IMS_ROAD_FROM + " " + propDetails.IMS_ROAD_TO,
                                    propDetails.IMS_ROAD_NAME,
                                    propDetails.IMS_PAV_LENGTH.ToString() ,
                                    propDetails.IMS_PAV_EST_COST.ToString(),
                                    propDetails.STA_SANCTIONED == "Y" ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" : "<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS +"\"); return false;'>Show Details</a>"
                   }
                    }).ToArray();
                }
                else
                {
                    return query.Select(propDetails => new
                    {
                        id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                        cell = new[] {
                                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID,
                                    //propDetails.PLAN_ROAD == null ? "NA" :  propDetails.PLAN_ROAD.PLAN_RD_NAME,
                                    //propDetails.IMS_ROAD_FROM + " " + propDetails.IMS_ROAD_TO,
                                    propDetails.IMS_ROAD_NAME,

                                    propDetails.IMS_PAV_LENGTH.ToString() ,
                                    propDetails.IMS_PAV_EST_COST.ToString(),
                                    "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" ,
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS +"\"); return false;'>Show Details</a>",

                   }
                    }).ToArray();
                }

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetSTAProposalsDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region PTA

        /// <summary>
        /// PTA Finalize the Road Proposal
        /// </summary>
        /// <param name="ptaSanctionViewModel"></param>
        /// <param name="ProposalStatus"></param>
        /// <returns></returns>
        public string PTAFinalizeProposalDAL(PtaSanctionViewModel ptaSanctionViewModel, string ProposalStatus)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_Sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Find(ptaSanctionViewModel.IMS_PR_ROAD_CODE);

                ims_Sanctioned_Project.PTA_SANCTIONED = ProposalStatus;
                ims_Sanctioned_Project.PTA_SANCTIONED_BY = dbContext.ADMIN_TECHNICAL_AGENCY.Where(b => b.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(a => a.ADMIN_TA_CODE).FirstOrDefault();

                if (ProposalStatus == "Y")
                {
                    ims_Sanctioned_Project.PTA_SANCTIONED_DATE = Convert.ToDateTime(ptaSanctionViewModel.PTA_SANCTIONED_DATE);
                    ims_Sanctioned_Project.IMS_PTA_REMARKS = ptaSanctionViewModel.MS_PTA_REMARKS.Trim();
                }
                else if (ProposalStatus == "U")
                {
                    ims_Sanctioned_Project.PTA_SANCTIONED_DATE = Convert.ToDateTime(ptaSanctionViewModel.PTA_UNSCRUTINY_DATE);
                    ims_Sanctioned_Project.IMS_PTA_REMARKS = ptaSanctionViewModel.MS_PTA_UnScrutinised_REMARKS.Trim();
                }

                ims_Sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                ims_Sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_Sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "PTAFinalizeProposalDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "PTAFinalizeProposalDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "PTAFinalizeProposalDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion

        #region Mord Road Proposal

        public string UpdateMordSanctionDetailsDAL(MordSanctionViewModel mordSanctionViewModel)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_Sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Find(mordSanctionViewModel.IMS_PR_ROAD_CODE);

                if (mordSanctionViewModel.IMS_SANCTIONED == "Y")
                {
                    ims_Sanctioned_Project.IMS_SANCTIONED_CD_AMT = mordSanctionViewModel.IMS_SANCTIONED_CD_AMT;
                    ims_Sanctioned_Project.IMS_SANCTIONED_PAV_AMT = mordSanctionViewModel.IMS_SANCTIONED_PAV_AMT;
                    ims_Sanctioned_Project.IMS_SANCTIONED_PW_AMT = mordSanctionViewModel.IMS_SANCTIONED_PW_AMT;
                    ims_Sanctioned_Project.IMS_SANCTIONED_OW_AMT = mordSanctionViewModel.IMS_SANCTIONED_OW_AMT;
                    ims_Sanctioned_Project.IMS_SANCTIONED_RS_AMT = mordSanctionViewModel.IMS_SANCTIONED_RS_AMT;

                    //PMGSY Scheme 2
                    ims_Sanctioned_Project.IMS_SANCTIONED_FC_AMT = mordSanctionViewModel.IMS_SANCTIONED_FC_AMT;
                    ims_Sanctioned_Project.IMS_SANCTIONED_HS_AMT = mordSanctionViewModel.IMS_SANCTIONED_HS_AMT;

                    ims_Sanctioned_Project.IMS_SANCTIONED_MAN_AMT1 = mordSanctionViewModel.IMS_SANCTIONED_MAN_AMT1;
                    ims_Sanctioned_Project.IMS_SANCTIONED_MAN_AMT2 = mordSanctionViewModel.IMS_SANCTIONED_MAN_AMT2;
                    ims_Sanctioned_Project.IMS_SANCTIONED_MAN_AMT3 = mordSanctionViewModel.IMS_SANCTIONED_MAN_AMT3;
                    ims_Sanctioned_Project.IMS_SANCTIONED_MAN_AMT4 = mordSanctionViewModel.IMS_SANCTIONED_MAN_AMT4;
                    ims_Sanctioned_Project.IMS_SANCTIONED_MAN_AMT5 = mordSanctionViewModel.IMS_SANCTIONED_MAN_AMT5;

                    //PMGSY Scheme 2
                    ims_Sanctioned_Project.IMS_SANCTIONED_RENEWAL_AMT = mordSanctionViewModel.IMS_SANCTIONED_RENEWAL_AMT;
                }

                ims_Sanctioned_Project.IMS_PROG_REMARKS = mordSanctionViewModel.IMS_PROG_REMARKS;
                ims_Sanctioned_Project.IMS_SANCTIONED_BY = mordSanctionViewModel.IMS_SANCTIONED_BY;
                if (ims_Sanctioned_Project.IMS_ISCOMPLETED == "S" || ims_Sanctioned_Project.IMS_ISCOMPLETED == "P")
                {
                    ims_Sanctioned_Project.IMS_ISCOMPLETED = "M";
                }
                ims_Sanctioned_Project.IMS_SANCTIONED = mordSanctionViewModel.IMS_SANCTIONED;

                if (Convert.ToDateTime(mordSanctionViewModel.IMS_SANCTIONED_DATE).Year > 1)
                {
                    ims_Sanctioned_Project.IMS_SANCTIONED_DATE = Convert.ToDateTime(mordSanctionViewModel.IMS_SANCTIONED_DATE);
                }
                else
                {
                    ims_Sanctioned_Project.IMS_SANCTIONED_DATE = DateTime.Now;
                }
                // For Reconsider Action, take a reason
                if (ims_Sanctioned_Project.IMS_SANCTIONED == "R")
                {
                    // Unlock the Proposal
                    ims_Sanctioned_Project.IMS_LOCK_STATUS = "N";
                    ims_Sanctioned_Project.IMS_REASON = mordSanctionViewModel.IMS_REASON;
                }
                // For Drop take a Action
                else if (ims_Sanctioned_Project.IMS_SANCTIONED == "D")
                {
                    ims_Sanctioned_Project.IMS_LOCK_STATUS = "Y";
                    ims_Sanctioned_Project.IMS_REASON = mordSanctionViewModel.IMS_REASON;
                }
                else
                {
                    ims_Sanctioned_Project.IMS_LOCK_STATUS = "Y";
                    ims_Sanctioned_Project.IMS_REASON = null;
                }
                ims_Sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                ims_Sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_Sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateMordSanctionDetailsDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateMordSanctionDetailsDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateMordSanctionDetailsDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetMordProposalsDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_YEAR, int MAST_STATE_CODE, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS, int IMS_AGENCY, string IMS_UPGRADE_CONNECT, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                #region
                //List<IMS_SANCTIONED_PROJECTS> listProposals;

                //// MORD Sanctioned Details
                //if (IMS_PROPOSAL_STATUS == "Y")
                //{
                //    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                //                     where
                //                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                //                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                //                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                //                         c.IMS_PROPOSAL_TYPE == "P" &&
                //                         //c.IMS_ISCOMPLETED == "M" &&
                //                         c.STA_SANCTIONED == "Y" &&
                //                         c.IMS_SANCTIONED == "Y" &&
                //                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                //                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                //                         //(IMS_STREAMS > 0 ? c.IMS_STREAMS : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                //                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)
                //                     select c)
                //                        .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                //}
                //else if (IMS_PROPOSAL_STATUS == "U")
                //{
                //    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                //                     where
                //                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                //                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                //                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                //                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                //                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                //                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1) &&
                //                         c.IMS_PROPOSAL_TYPE == "P" &&
                //                         c.STA_SANCTIONED == "Y" &&
                //                         c.IMS_SANCTIONED == "U" 
                //                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                //}
                //else if (IMS_PROPOSAL_STATUS == "N")
                //{
                //    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                //                     where
                //                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                //                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                //                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                //                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                //                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                //                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1) &&
                //                         c.IMS_PROPOSAL_TYPE == "P" &&
                //                         c.STA_SANCTIONED == "Y" &&
                //                         c.IMS_SANCTIONED == "N"
                //                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                //}
                //else if (IMS_PROPOSAL_STATUS == "A")
                //{
                //    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                //                     where
                //                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                //                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                //                         c.IMS_PROPOSAL_TYPE == "P" &&
                //                         c.STA_SANCTIONED == "Y" &&
                //                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                //                         (IMS_PROPOSAL_STATUS != "A" ? c.STA_SANCTIONED : "1") == (IMS_PROPOSAL_STATUS != "A" ? IMS_PROPOSAL_STATUS : "1") &&
                //                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                //                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                //                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                //                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                //}
                //else if (IMS_PROPOSAL_STATUS == "S")
                //{
                //    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                //                     where
                //                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                //                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                //                         c.IMS_PROPOSAL_TYPE == "P" &&
                //                         c.STA_SANCTIONED == "N" &&
                //                         c.IMS_SANCTIONED == "N" &&
                //                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                //                         //(IMS_PROPOSAL_STATUS != "A" ? c.STA_SANCTIONED : "1") == (IMS_PROPOSAL_STATUS != "A" ? IMS_PROPOSAL_STATUS : "1") &&
                //                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                //                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                //                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                //                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                //}
                //else
                //{
                //    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                //                     where
                //                         c.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&  //added by shyam on 23 Oct 2013
                //                         c.MAST_STATE_CODE == MAST_STATE_CODE &&
                //                         (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                //                         (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                //                         (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                //                         (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1) &&
                //                         c.IMS_PROPOSAL_TYPE == "P" &&                                         
                //                         c.STA_SANCTIONED == "Y" &&
                //                         (c.IMS_SANCTIONED == IMS_PROPOSAL_STATUS)
                //                     select c).OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                //}


                //IQueryable<IMS_SANCTIONED_PROJECTS> query = listProposals.AsQueryable<IMS_SANCTIONED_PROJECTS>();
                //totalRecords = listProposals.Count();

                //if (sidx.Trim() != string.Empty)
                //{
                //    if (sord.ToString() == "asc")
                //    {
                //        query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //    }
                //    else
                //    {
                //        query = query.OrderByDescending(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //    }
                //}
                //else
                //{
                //    query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                //}
                //return query.Select(propDetails => new
                //{
                //    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                //    cell = new[] {         
                //                    propDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME.Trim(),                            
                //                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.Trim(),
                //                    propDetails.IMS_PACKAGE_ID,                                    
                //                    propDetails.IMS_ROAD_FROM + " " + propDetails.IMS_ROAD_TO,
                //                    (propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                //                    propDetails.IMS_PAV_LENGTH.ToString() ,
                //                    propDetails.IMS_SANCTIONED_PAV_AMT + propDetails.IMS_SANCTIONED_CD_AMT + propDetails.IMS_SANCTIONED_PW_AMT + propDetails.IMS_SANCTIONED_OW_AMT +propDetails.IMS_SANCTIONED_RS_AMT + "",
                //                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>"
                //   }
                //}).ToArray();
                #endregion
                string MRDStatus = string.Empty;
                string STAStatus = string.Empty;
                string PIUStatus = string.Empty;

                switch (IMS_PROPOSAL_STATUS)
                {
                    case "N":
                        MRDStatus = "N";
                        STAStatus = "Y";
                        break;
                    case "Y":
                        MRDStatus = "Y";
                        STAStatus = "%";
                        break;
                    case "U":
                        MRDStatus = "U";
                        STAStatus = "%";
                        break;
                    case "R":
                        MRDStatus = "R";
                        STAStatus = "%";
                        break;
                    case "D":
                        MRDStatus = "D";
                        STAStatus = "%";
                        break;
                    case "S":
                        MRDStatus = "N";
                        STAStatus = "N";
                        PIUStatus = "D";
                        break;
                    case "A":
                        MRDStatus = "%";
                        STAStatus = "%";
                        break;
                    default:
                        MRDStatus = "%";
                        STAStatus = "%";
                        break;
                }
                //if (IMS_PROPOSAL_STATUS == "A")
                //{
                //    IMS_PROPOSAL_STATUS = "%";
                //}
                if (PMGSYSession.Current.RoleCode == 36 || PMGSYSession.Current.RoleCode == 47)
                {
                    var queryAgency = (from ma in dbContext.MASTER_AGENCY
                                       join md in dbContext.ADMIN_DEPARTMENT on ma.MAST_AGENCY_CODE equals md.MAST_AGENCY_CODE
                                       where md.MAST_STATE_CODE == PMGSYSession.Current.StateCode &&
                                       md.MAST_ND_TYPE == "S" &&
                                       md.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode
                                       select new
                                       {
                                           ma.MAST_AGENCY_CODE
                                       }).FirstOrDefault();
                    IMS_AGENCY = queryAgency == null ? 0 : queryAgency.MAST_AGENCY_CODE;
                }
                var listProposals = dbContext.USP_GET_PROPOSAL_LIST(1, MAST_STATE_CODE, (MAST_DISTRICT_ID < 0 ? 0 : MAST_DISTRICT_ID), 0, (IMS_YEAR < 0 ? 0 : IMS_YEAR), (IMS_BATCH < 0 ? 0 : IMS_BATCH), (IMS_STREAMS < 0 ? 0 : IMS_STREAMS), IMS_AGENCY, 0, 0, "%", "%", (PIUStatus == string.Empty ? "%" : PIUStatus), "%", STAStatus, MRDStatus, "P", ((IMS_UPGRADE_CONNECT == "0" || IMS_UPGRADE_CONNECT == null) ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList();
                IQueryable<USP_GET_PROPOSAL_LIST_Result> query = listProposals.AsQueryable<USP_GET_PROPOSAL_LIST_Result>();
                totalRecords = listProposals.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = listProposals.Sum(m => m.TOTAL_COST).HasValue ? listProposals.Sum(m => m.TOTAL_COST).Value : 0;//listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = listProposals.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = listProposals.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = listProposals.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = listProposals.Sum(m => m.POP999);
                colTotal.TOT_HABS = listProposals.Sum(m => m.TOTAL_HABS).HasValue ? listProposals.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = listProposals.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = listProposals.Sum(m => m.MAINT_AMT).HasValue ? listProposals.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = listProposals.Sum(m => m.ROAD_LENGTH).HasValue ? listProposals.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = listProposals.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = listProposals.Sum(m => m.ROAD_STATE).HasValue ? listProposals.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = listProposals.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = listProposals.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = listProposals.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = listProposals.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    //(propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT + propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    //propDetails.STA_SANCTIONED_BY.ToString(),
                                    //propDetails.STA_SANCTIONED_DATE.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    //propDetails.PTA_SANCTIONED_BY.ToString(),
                                    //propDetails.PTA_SANCTIONED_DATE.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>",
                               
                                    // Not Sanctioned and Not Dropped Proposals can be deleted By MORD. New Requirement Mail Date 04-13-2020 12:46 PM
                                    (propDetails.IMS_SANCTIONED!="Y" && propDetails.IMS_SANCTIONED!="D")? "<a href='#' title='Click here to delete Proposal Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteNonSanctionedAndNonDroppedProposalDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+propDetails.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Delete Proposal</a>":"-"
                   
                    
                    }
                }).ToArray();


            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMordProposalsDAL()");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public MordSanctionViewModel GetBulkMordDetailDAL(string IMS_PR_ROAD_CODES)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<int> lstRoadCodes = IMS_PR_ROAD_CODES.Split(',').Select(x => int.Parse(x)).ToArray().ToList<int>();
                MordSanctionViewModel ObjMordSanctionViewModel = new MordSanctionViewModel();
                ObjMordSanctionViewModel.IS_SANCTIONABLE = true;
                ObjMordSanctionViewModel.IS_EXECUTION_STARTED = "N";
                return ObjMordSanctionViewModel;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetBulkMordDetailDAL()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// Bulk Sanction
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODES"></param>
        /// <returns></returns>
        public string BulkMordDetailDAL(MordSanctionViewModel mordSanctionViewModel)
        {
            int recordCount = 0;

            try
            {
                dbContext = new PMGSYEntities();
                List<int> lstRoadCodes = mordSanctionViewModel.IMS_PR_ROAD_CODES.Split(',').Select(x => int.Parse(x)).ToArray().ToList<int>();

                //List<IMS_SANCTIONED_PROJECTS> obj_ims_sanctioned_project = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                //                                                            where lstRoadCodes.Contains(c.IMS_PR_ROAD_CODE)
                //                                                            select c).ToList<IMS_SANCTIONED_PROJECTS>();
                //foreach (IMS_SANCTIONED_PROJECTS Proposals in obj_ims_sanctioned_project)
                //{
                //    Proposals.IMS_SANCTIONED = mordSanctionViewModel.IMS_SANCTIONED;
                //    Proposals.IMS_SANCTIONED_BY = mordSanctionViewModel.IMS_SANCTIONED_BY;
                //    Proposals.IMS_PROG_REMARKS = mordSanctionViewModel.IMS_PROG_REMARKS;
                //    Proposals.IMS_SANCTIONED_DATE = Convert.ToDateTime(mordSanctionViewModel.IMS_SANCTIONED_DATE);
                //    if (Proposals.IMS_ISCOMPLETED == "S" || Proposals.IMS_ISCOMPLETED == "P")
                //    {
                //        Proposals.IMS_ISCOMPLETED = "M";
                //    }
                //    Proposals.USERID = PMGSYSession.Current.UserId;
                //    Proposals.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                //    dbContext.Entry(Proposals).State = System.Data.Entity.EntityState.Modified;;
                //}

                //code for updating the Proposals in bulk using Table Valued Parameters

                IEnumerable<SqlDataRecord> sqlDataRecords = new List<SqlDataRecord>();
                SqlDataRecord record = new SqlDataRecord(new SqlMetaData[] { new SqlMetaData("IMS_PR_ROAD_CODE", SqlDbType.Int) });
                List<SqlDataRecord> recordList = new List<SqlDataRecord>();

                DataTable ProposalTable = new DataTable();
                ProposalTable.Columns.Add("IMS_PR_ROAD_CODE", typeof(int));

                foreach (var item in lstRoadCodes)
                {
                    int i = 0;
                    record.SetInt32(i, Convert.ToInt32(item));
                    ProposalTable.Rows.Add(new object[] { Convert.ToInt32(item) });
                    i++;
                    recordList.Add(record);
                }

                sqlDataRecords = recordList;

                SqlConnection storeConnection = new SqlConnection(dbContext.Database.Connection.ConnectionString);

                using (SqlCommand command = storeConnection.CreateCommand())
                {
                    command.Connection = storeConnection;
                    storeConnection.Open();

                    command.CommandText = "omms.USP_INSERT_MRD_BULK_SANCTION_DETAILS";
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.Add(new SqlParameter("@ImsSanctioned", SqlDbType.Char)).Value = mordSanctionViewModel.IMS_SANCTIONED;
                    command.Parameters.Add(new SqlParameter("@ImsSanctionedBy", SqlDbType.VarChar)).Value = mordSanctionViewModel.IMS_SANCTIONED_BY;
                    command.Parameters.Add(new SqlParameter("@Remarks", SqlDbType.VarChar)).Value = mordSanctionViewModel.IMS_PROG_REMARKS;
                    command.Parameters.Add(new SqlParameter("@SanctionDate", SqlDbType.DateTime)).Value = Convert.ToDateTime(mordSanctionViewModel.IMS_SANCTIONED_DATE);
                    command.Parameters.Add(new SqlParameter("@IsCompleted", SqlDbType.Char)).Value = "M";
                    command.Parameters.Add(new SqlParameter("@UserId", SqlDbType.Int)).Value = PMGSYSession.Current.UserId;
                    command.Parameters.Add(new SqlParameter("@IpAdd", SqlDbType.VarChar)).Value = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    command.Parameters.AddWithValue("@Proposals", ProposalTable).SqlDbType = SqlDbType.Structured;

                    recordCount = (int)command.ExecuteScalar();

                }

                if (recordCount != 0)
                {
                    dbContext.SaveChanges();
                    return string.Empty;
                }
                else
                {
                    return "Error occurred while processing your request.";
                }

                //end of code

            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "BulkMordDetailDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "BulkMordDetailDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "BulkMordDetailDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Habitataion and Cluster
        /// <summary>
        /// List the Habitations
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetHabitationListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                var habitations = (
                                    from c in dbContext.MASTER_HABITATIONS
                                    join d in dbContext.IMS_BENEFITED_HABS
                                    on c.MAST_HAB_CODE equals d.MAST_HAB_CODE
                                    join e in dbContext.MASTER_HABITATIONS_DETAILS
                                    on c.MAST_HAB_CODE equals e.MAST_HAB_CODE
                                    join f in dbContext.MASTER_BLOCK
                                    on c.MASTER_VILLAGE.MAST_BLOCK_CODE equals f.MAST_BLOCK_CODE
                                    where
                                    d.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE
                                     &&
                                    // commented by Vikram as the condition for population year was wrong
                                    //e.MAST_YEAR == (
                                    //        dbContext.MASTER_HABITATIONS_DETAILS.Where(p => p.MAST_HAB_CODE == c.MAST_HAB_CODE).Select(p => p.MAST_YEAR).Max()
                                    //)
                                    e.MAST_YEAR == ((PMGSYSession.Current.PMGSYScheme == 1 || PMGSYSession.Current.PMGSYScheme == 3) ? 2001 : 2011)///Changes for RCPLWE
                                    //&& (dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == d.IMS_PR_ROAD_CODE).Select(m => m.MAST_PMGSY_SCHEME).FirstOrDefault()) == PMGSYSession.Current.PMGSYScheme 
                                    select new
                                    {
                                        c.MAST_HAB_CODE,
                                        f.MAST_BLOCK_NAME,
                                        c.MAST_HAB_NAME,
                                        e.MAST_HAB_SCST_POP,
                                        e.MAST_HAB_TOT_POP,
                                        d.MAST_CLUSTER_CODE,
                                        f.MAST_BLOCK_CODE,
                                        c.MASTER_VILLAGE.MAST_VILLAGE_NAME,
                                        Hab_Direct = PMGSYSession.Current.PMGSYScheme == 4 ? (dbContext.PLAN_ROAD_HABITATION_PMGSY3.Where(z => z.PLAN_CN_ROAD_CODE == d.IMS_SANCTIONED_PROJECTS.PLAN_CN_ROAD_CODE).Select(x => x.MAST_HAB_CODE_DIRECT).FirstOrDefault()) : "-",
                                        Hab_Verified = PMGSYSession.Current.PMGSYScheme == 4 ? (dbContext.PLAN_ROAD_HABITATION_PMGSY3.Where(z => z.PLAN_CN_ROAD_CODE == d.IMS_SANCTIONED_PROJECTS.PLAN_CN_ROAD_CODE).Select(x => x.MAST_HAB_CODE_VERIFIED).FirstOrDefault()) : "-"
                                    }).OrderBy(x => x.MAST_CLUSTER_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));

                totalRecords = habitations.Count();

                var proposalDetails = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);

                short roleCode = dbContext.UM_User_Master.Where(m => m.UserID == PMGSYSession.Current.UserId).Select(m => m.DefaultRoleID).FirstOrDefault();

                var Result = habitations.Select(a => new
                {
                    a.MAST_HAB_CODE,
                    a.MAST_BLOCK_NAME,
                    a.MAST_HAB_NAME,
                    a.MAST_HAB_SCST_POP,
                    a.MAST_HAB_TOT_POP,
                    a.MAST_CLUSTER_CODE,
                    a.MAST_BLOCK_CODE,
                    a.MAST_VILLAGE_NAME,
                    //Hab_Direct = a.Hab_Direct == "Y" ? "Yes" : a.Hab_Direct == "N" ? "No" : a.Hab_Direct.Trim(),
                    //Hab_Verified = a.Hab_Verified == "Y" ? "Yes" : a.Hab_Verified == "N" ? "No" : a.Hab_Verified.Trim()
                }).ToArray();

                StringBuilder html = new StringBuilder();
                html.Append("<select style='width:140px'><option value=0>Select Cluster</option><option value=-1>Remove Cluster </option> ");

                for (int i = 1; i <= 5; ++i)
                {
                    html.Append("<option value=" + i + ">Cluster " + i);
                }

                return Result.Select(habDetails => new
                {
                    id = habDetails.MAST_HAB_CODE,
                    cell = new[] {
                        habDetails.MAST_HAB_CODE.ToString(),
                        habDetails.MAST_BLOCK_NAME,
                        habDetails.MAST_VILLAGE_NAME,
                        habDetails.MAST_HAB_NAME,
                        habDetails.MAST_HAB_SCST_POP.ToString(),
                        habDetails.MAST_HAB_TOT_POP.ToString(),
                        // commented by Vikram 
                        //"<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>",
                        // new code added by Vikram as suggested by Dev sir - if the proposal is not finalized by PIU and if it is unlocked then only provide delete else hide the link
                        //(dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_ISCOMPLETED == "E").FirstOrDefault() || (dbContext.UDF_IMS_UNLOCK_STATUS(PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, habDetails.MAST_BLOCK_CODE, 0, 0, IMS_PR_ROAD_CODE, "PR",PMGSYSession.Current.PMGSYScheme).Select(c => c.UNLOCK_COUNT).FirstOrDefault() > 0)) ?"<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",
                        
                        //(dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_ISCOMPLETED == "M").FirstOrDefault() || dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_ISCOMPLETED == "E").FirstOrDefault() || (dbContext.UDF_IMS_UNLOCK_STATUS(PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, habDetails.MAST_BLOCK_CODE, 0, 0, IMS_PR_ROAD_CODE,proposalDetails.IMS_BATCH,proposalDetails.IMS_YEAR, "PR",PMGSYSession.Current.PMGSYScheme,(short)PMGSYSession.Current.RoleCode).Select(c => c.UNLOCK_COUNT).FirstOrDefault() > 0)) ?(habDetails.MAST_CLUSTER_CODE == null? "<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>":"<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitationWithCluster(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + " ," + habDetails.MAST_CLUSTER_CODE  + "); return false;'>Delete</a>"):"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changes by SAMMED A. PATIL on 13SEP2017
                        //(dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_SANCTIONED == "D").FirstOrDefault() && PMGSYSession.Current.RoleCode == 25) ? "<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>" :
                        //(dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_ISCOMPLETED == "M").FirstOrDefault() || dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_ISCOMPLETED == "E").FirstOrDefault() || (dbContext.UDF_IMS_UNLOCK_STATUS(PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, habDetails.MAST_BLOCK_CODE, 0, 0, IMS_PR_ROAD_CODE,proposalDetails.IMS_BATCH,proposalDetails.IMS_YEAR, "PR",PMGSYSession.Current.PMGSYScheme,roleCode).Select(c => c.UNLOCK_COUNT).FirstOrDefault() > 0)) ?(habDetails.MAST_CLUSTER_CODE == null? "<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>":"<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitationWithCluster(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + " ," + habDetails.MAST_CLUSTER_CODE  + "); return false;'>Delete</a>"):"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                        ///Changes by SAMMED A. PATIL on 23OCT2017 to allow deletion of habitations for MRD login
                        #region Old Code Before Changes for Dropped and Sanctioned Proposals on 9APR2019
                        /*(dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_SANCTIONED == "D").FirstOrDefault() && PMGSYSession.Current.RoleCode == 25) 
                            ? "<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + ");                                        return false;'>Delete</a>" 
                            :
                                (PMGSYSession.Current.RoleCode == 25) 
                                 ? (habDetails.MAST_CLUSTER_CODE == null ? "<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()                                           + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>" : "<a href='#' title='Click here to delete the Mapped Habitation Cluster' class='ui-icon ui-icon-trash ui-align-center'                                                                onClick='DeleteHabitationWithCluster(" + IMS_PR_ROAD_CODE.ToString().Trim() + " ," + habDetails.MAST_HAB_CODE   + " ," + habDetails.MAST_CLUSTER_CODE  + "); return false;'>Delete Cluster</a>")
                                 : (dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_ISCOMPLETED == "M").FirstOrDefault() 
                                    || dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_ISCOMPLETED == "E").FirstOrDefault() 
                                    || (dbContext.UDF_IMS_UNLOCK_STATUS(PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, habDetails.MAST_BLOCK_CODE, 0, 0,                                                                                                                        IMS_PR_ROAD_CODE,proposalDetails.IMS_BATCH,proposalDetails.IMS_YEAR, "PR",PMGSYSession.Current.PMGSYScheme,roleCode).Select(c => c.UNLOCK_COUNT).FirstOrDefault() > 0)
                                    || (dbContext.UDF_IMS_UNLOCK_STATUS(PMGSYSession.Current.StateCode, PMGSYSession.Current.DistrictCode, habDetails.MAST_BLOCK_CODE, 0, 0,                                                                                                                           IMS_PR_ROAD_CODE,proposalDetails.IMS_BATCH,proposalDetails.IMS_YEAR, "PH",PMGSYSession.Current.PMGSYScheme,roleCode).Select(c => c.UNLOCK_COUNT).FirstOrDefault() > 0)
                                    ) 
                                    ?(habDetails.MAST_CLUSTER_CODE == null ? "<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>":"<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitationWithCluster(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + " ," + habDetails.MAST_CLUSTER_CODE  + "); return false;'>Delete</a>")
                                    :"<span class='ui-icon ui-icon-locked ui-align-center'></span>",*/
                        #endregion
                        //habDetails.Hab_Direct,
                        //habDetails.Hab_Verified,
                                 (proposalDetails.IMS_SANCTIONED.Trim() == "Y" || proposalDetails.IMS_SANCTIONED.Trim() == "D" || proposalDetails.IMS_ISCOMPLETED == "H")
                                    ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>"
                                    : (habDetails.MAST_CLUSTER_CODE == null ? "<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteHabitation(" + IMS_PR_ROAD_CODE.ToString().Trim()                                           + " ," + habDetails.MAST_HAB_CODE   + "); return false;'>Delete</a>":"<a href='#' title='Click here to delete the Mapped Habitation' class='ui-icon ui-icon-trash ui-align-center'                                                                              onClick='DeleteHabitationWithCluster(" + IMS_PR_ROAD_CODE.ToString().Trim()   + " ," + habDetails.MAST_HAB_CODE   + " ," + habDetails.MAST_CLUSTER_CODE  + "); return false;'>Delete</a>"),
                        "",
                        //habDetails.MAST_CLUSTER_CODE == null ? "Cluster Not Allocated" : "Cluster"+ habDetails.MAST_CLUSTER_CODE.ToString(),                        
                        habDetails.MAST_CLUSTER_CODE == null ? "Cluster Not Allocated" : "Cluster : " + dbContext.MASTER_CLUSTER.Where(m=>m.MAST_CLUSTER_CODE == habDetails.MAST_CLUSTER_CODE).Select(m=>m.MAST_CLUSTER_NAME).FirstOrDefault() ,
                        html.ToString(),
                        //habDetails.MAST_CLUSTER_CODE == null ? "0" : habDetails.MAST_CLUSTER_CODE.ToString() 
                        habDetails.MAST_CLUSTER_CODE == null ? "0" : dbContext.MASTER_CLUSTER.Where(m=>m.MAST_CLUSTER_CODE == habDetails.MAST_CLUSTER_CODE).Select(m=>m.MAST_CLUSTER_NAME).FirstOrDefault(),
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetHabitationListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public int CreateClusterDAL(string[] clusterArray, int IMS_PR_ROAD_CODE)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                Int32? MaxID;
                MaxID = (from c in dbContext.IMS_BENEFITED_HABS where c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE select (Int32?)c.MAST_CLUSTER_CODE ?? 0).Max();
                if (MaxID == 0)
                {
                    MaxID = 1;
                }
                else
                {
                    ++MaxID;
                }

                foreach (string strCode in clusterArray)
                {
                    int habCode = Convert.ToInt32(strCode);
                    IMS_BENEFITED_HABS ims_benefitted_hab = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && c.MAST_HAB_CODE == habCode) select c).FirstOrDefault();
                    ims_benefitted_hab.MAST_CLUSTER_CODE = MaxID;
                    ims_benefitted_hab.USERID = PMGSYSession.Current.UserId;
                    ims_benefitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_benefitted_hab).State = System.Data.Entity.EntityState.Modified;;
                }

                IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).First();

                if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                {
                    ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                }
                ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();

                return 1;
            }
            catch (DbEntityValidationException e)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(e, HttpContext.Current);
                ErrorLog.LogError(e, "CreateClusterDAL(DbEntityValidationException e)");
                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        //ModelState.AddModelError("", eve.ValidationErrors.ToString());
                    }
                }
                return -1;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "CreateClusterDAL()");
                return -1;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string UpdateClusterDAL(int[] HabitationArray, int[] ClusterArray, int IMS_PR_ROAD_CODE)
        {
            dbContext = new Models.PMGSYEntities();
            int ClusterCode = 0;
            int HabitationCode = 0;
            try
            {
                for (int i = 0; i < ClusterArray.Length; ++i)
                {
                    ClusterCode = ClusterArray[i];
                    HabitationCode = HabitationArray[i];

                    if (ClusterArray[i] == 0)
                        continue;
                    // Remove the Cluster
                    if (ClusterArray[i] == -1)
                    {
                        IMS_BENEFITED_HABS habitation = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && c.MAST_HAB_CODE == HabitationCode) select c).FirstOrDefault();
                        habitation.MAST_CLUSTER_CODE = null;
                    }
                    // Update the Cluster
                    if (ClusterArray[i] > 0)
                    {
                        IMS_BENEFITED_HABS habitation = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && c.MAST_HAB_CODE == HabitationCode) select c).FirstOrDefault();

                        ///if Population of a Habitation is Greator than 250 Do not Allow it to be in Cluster
                        if (dbContext.MASTER_HABITATIONS_DETAILS.Where(a => a.MAST_HAB_CODE == habitation.MAST_HAB_CODE).Select(a => a.MAST_HAB_TOT_POP).First() > 250)
                        {
                            return "Population of a Habitaion is Greator than 250,\nCluster can not be Created.";
                        }

                        habitation.MAST_CLUSTER_CODE = ClusterCode;
                    }

                }
                IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).First();

                if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                {
                    ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                }
                ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;

                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateClusterDAL()");
                return "There is an Error occured while Processing Your Request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public int UnMapHabitationDAL(int IMS_PR_ROAD_CODE, int IMS_HAB_CODE)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                if (dbContext.EXEC_HABITATIONS_CONNECTED.Where(x => x.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && x.MAST_HAB_CODE == IMS_HAB_CODE).Any())
                {
                    return 0;
                }

                using (TransactionScope ts = new TransactionScope())
                {
                    //if the proposal is staged proposal then delete the entries of habitations from stage 2 proposal also
                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == IMS_PR_ROAD_CODE && m.IMS_STAGE_PHASE == "S2"))
                    {
                        int STAGE2_PROPOSAL_CODE = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == IMS_PR_ROAD_CODE).Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();
                        IMS_BENEFITED_HABS ims_benifited_hab_stage2 = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == STAGE2_PROPOSAL_CODE && c.MAST_HAB_CODE == IMS_HAB_CODE) select c).FirstOrDefault();
                        if (ims_benifited_hab_stage2 != null)
                        {
                            ims_benifited_hab_stage2.USERID = PMGSYSession.Current.UserId;
                            ims_benifited_hab_stage2.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(ims_benifited_hab_stage2).State = EntityState.Modified;
                            dbContext.SaveChanges();
                            dbContext.IMS_BENEFITED_HABS.Remove(ims_benifited_hab_stage2);
                        }

                    }

                    //if the proposal is staged2 proposal then delete the entries of habitations from stage 1 proposal also
                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && m.IMS_STAGED_ROAD_ID != null && m.IMS_STAGE_PHASE == "S2"))
                    {
                        int STAGE1_PROPOSAL_CODE = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && m.IMS_STAGED_ROAD_ID != null && m.IMS_STAGE_PHASE == "S2").Select(m => m.IMS_STAGED_ROAD_ID).FirstOrDefault().Value;
                        IMS_BENEFITED_HABS ims_benifited_hab_stage1 = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == STAGE1_PROPOSAL_CODE && c.MAST_HAB_CODE == IMS_HAB_CODE) select c).FirstOrDefault();
                        if (ims_benifited_hab_stage1 != null)
                        {
                            ims_benifited_hab_stage1.USERID = PMGSYSession.Current.UserId;
                            ims_benifited_hab_stage1.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(ims_benifited_hab_stage1).State = EntityState.Modified;
                            dbContext.SaveChanges();
                            dbContext.IMS_BENEFITED_HABS.Remove(ims_benifited_hab_stage1);
                        }

                    }

                    IMS_BENEFITED_HABS ims_benifited_hab = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && c.MAST_HAB_CODE == IMS_HAB_CODE) select c).FirstOrDefault();
                    if (ims_benifited_hab != null)
                    {
                        ims_benifited_hab.USERID = PMGSYSession.Current.UserId;
                        ims_benifited_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(ims_benifited_hab).State = EntityState.Modified;
                        dbContext.SaveChanges();
                        dbContext.IMS_BENEFITED_HABS.Remove(ims_benifited_hab);
                    }

                    IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).First();

                    if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                    {
                        ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                    }
                    ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;



                    dbContext.SaveChanges();
                    ts.Complete();
                    return 1;
                }
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UnMapHabitationDAL()");
                return -1;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public int UnMapHabitationClusterDAL(int IMS_PR_ROAD_CODE, int IMS_HAB_CODE, int MAST_CLUSTER_CODE)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    //if the proposal is staged proposal then delete the entries of habitations from stage 2 proposal also
                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == IMS_PR_ROAD_CODE && m.IMS_STAGE_PHASE == "S2"))
                    {
                        int STAGE2_PROPOSAL_CODE = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == IMS_PR_ROAD_CODE).Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();
                        IMS_BENEFITED_HABS ims_benifited_hab_stage2 = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == STAGE2_PROPOSAL_CODE && c.MAST_HAB_CODE == IMS_HAB_CODE) select c).FirstOrDefault();
                        if (ims_benifited_hab_stage2 != null)
                        {
                            ims_benifited_hab_stage2.USERID = PMGSYSession.Current.UserId;
                            ims_benifited_hab_stage2.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(ims_benifited_hab_stage2).State = EntityState.Modified;
                            dbContext.SaveChanges();
                            dbContext.IMS_BENEFITED_HABS.Remove(ims_benifited_hab_stage2);
                        }

                    }

                    //if the proposal is staged2 proposal then delete the entries of habitations from stage 1 proposal also
                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && m.IMS_STAGED_ROAD_ID != null && m.IMS_STAGE_PHASE == "S2"))
                    {
                        int STAGE1_PROPOSAL_CODE = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && m.IMS_STAGED_ROAD_ID != null && m.IMS_STAGE_PHASE == "S2").Select(m => m.IMS_STAGED_ROAD_ID).FirstOrDefault().Value;
                        IMS_BENEFITED_HABS ims_benifited_hab_stage1 = (from c in dbContext.IMS_BENEFITED_HABS.Where(c => c.IMS_PR_ROAD_CODE == STAGE1_PROPOSAL_CODE && c.MAST_HAB_CODE == IMS_HAB_CODE) select c).FirstOrDefault();
                        if (ims_benifited_hab_stage1 != null)
                        {
                            ims_benifited_hab_stage1.USERID = PMGSYSession.Current.UserId;
                            ims_benifited_hab_stage1.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(ims_benifited_hab_stage1).State = EntityState.Modified;
                            dbContext.SaveChanges();
                            dbContext.IMS_BENEFITED_HABS.Remove(ims_benifited_hab_stage1);
                        }

                    }

                    var benefitedHabs = dbContext.IMS_BENEFITED_HABS.Where(m => m.MAST_CLUSTER_CODE == MAST_CLUSTER_CODE && m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();

                    foreach (var item in benefitedHabs)
                    {
                        IMS_BENEFITED_HABS ims_benifited_hab = item;
                        if (ims_benifited_hab != null)
                        {
                            ims_benifited_hab.USERID = PMGSYSession.Current.UserId;
                            ims_benifited_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(ims_benifited_hab).State = EntityState.Modified;
                            dbContext.SaveChanges();
                            dbContext.IMS_BENEFITED_HABS.Remove(ims_benifited_hab);
                        }
                    }

                    IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).First();

                    if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                    {
                        ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                    }
                    ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;



                    dbContext.SaveChanges();
                    ts.Complete();
                    return 1;
                }
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UnMapHabitationClusterDAL()");
                return -1;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Map the Habitation Details to Road Proposal
        /// </summary>
        /// <param name="habModel"></param>
        /// <returns></returns>
        public string AddHabitationDetailsDAL(HabitationViewModel habModel)
        {
            dbContext = new PMGSYEntities();
            try
            {
                //For Scheme 1, Cluster and population related validations are required
                int[] IMS_HAB_CODES_ARRAY = habModel.HAB_CODES_LIST.Split(',').Select(n => int.Parse(n)).ToList().ToArray();

                if (PMGSYSession.Current.PMGSYScheme == 1)
                {
                    foreach (int habitation_code in IMS_HAB_CODES_ARRAY)
                    {
                        IMS_BENEFITED_HABS ims_benifitted_hab = new IMS_BENEFITED_HABS();
                        ims_benifitted_hab.IMS_PR_ROAD_CODE = habModel.IMS_PR_ROAD_CODE;
                        ims_benifitted_hab.MAST_HAB_CODE = habitation_code;
                        ims_benifitted_hab.HAB_INCLUDED = "Y";

                        // if population of habitation is less than 250 add it to cluster 1
                        if (dbContext.MASTER_HABITATIONS_DETAILS.Where(a => a.MAST_HAB_CODE == ims_benifitted_hab.MAST_HAB_CODE).Select(a => a.MAST_HAB_TOT_POP).First() < 250)
                        {
                            //commented by Vikram as new facility of cluster is provided so while mapping habitation no cluster code will be entered.
                            //ims_benifitted_hab.MAST_CLUSTER_CODE = 1;
                        }

                        ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                        ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.IMS_BENEFITED_HABS.Add(ims_benifitted_hab);
                    }

                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == habModel.IMS_PR_ROAD_CODE))
                    {
                        int Stage2Road = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == habModel.IMS_PR_ROAD_CODE).Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();
                        string proposalType = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == habModel.IMS_PR_ROAD_CODE).Select(m => m.IMS_PROPOSAL_TYPE).FirstOrDefault();
                        if (proposalType == "P")  /// Changed by SAMMED A. PATIL on 20JAN2017 as per directions from Sriniwas Sir (Reason: To restrict habitation mapping against bridge proposals)
                        {
                            foreach (int habitation_code in IMS_HAB_CODES_ARRAY)
                            {
                                IMS_BENEFITED_HABS ims_benifitted_hab = new IMS_BENEFITED_HABS();
                                ims_benifitted_hab.IMS_PR_ROAD_CODE = Stage2Road;
                                ims_benifitted_hab.MAST_HAB_CODE = habitation_code;
                                //ims_benifitted_hab.HAB_INCLUDED = "Y";
                                ims_benifitted_hab.HAB_INCLUDED = "N";

                                // if population of habitation is less than 250 add it to cluster 1
                                if (dbContext.MASTER_HABITATIONS_DETAILS.Where(a => a.MAST_HAB_CODE == ims_benifitted_hab.MAST_HAB_CODE).Select(a => a.MAST_HAB_TOT_POP).First() < 250)
                                {
                                    ims_benifitted_hab.MAST_CLUSTER_CODE = 1;
                                }

                                ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                                ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                dbContext.IMS_BENEFITED_HABS.Add(ims_benifitted_hab);
                            }
                        }
                    }


                    IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE).First();

                    if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                    {
                        ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                    }
                    ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;


                    dbContext.SaveChanges();
                    return string.Empty;
                }
                else //For Scheme 2, Cluster and population related validations are not required
                {
                    IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE).First();
                    var candidateRoadDetails = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.PLAN_CN_ROAD_CODE == ims_sanctioned_Project.PLAN_CN_ROAD_CODE).ToList();

                    using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                    {
                        sw.WriteLine("Date :" + DateTime.Now.ToString());
                        sw.WriteLine(" Loggeed entries in AddHabitationDetailsDAL()");
                      
                            sw.WriteLine("habModel.IMS_PR_ROAD_CODE : " + habModel.IMS_PR_ROAD_CODE);
                            sw.WriteLine("ims_sanctioned_Project.PLAN_CN_ROAD_CODE" + ims_sanctioned_Project.PLAN_CN_ROAD_CODE);
                           
                            //sw.WriteLine("MAST_VILLAGE_NAME ::" + item.MAST_VILLAGE_NAME);
                            //sw.WriteLine("MAST_HAB_TOT_POP ::" + item.MAST_HAB_TOT_POP);
                    
                        sw.WriteLine("---------------------------------------------------------------------------------------");
                        sw.Close();
                    }



                    foreach (var candidateRoad in candidateRoadDetails)
                    {
                        foreach (int habitation_code in IMS_HAB_CODES_ARRAY)
                        {
                            if (dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == candidateRoad.IMS_PR_ROAD_CODE && m.MAST_HAB_CODE == habitation_code).Any())
                            {
                               string HabitationName= dbContext.MASTER_HABITATIONS.Where(m=>m.MAST_HAB_CODE==habitation_code).Select(m=>m.MAST_HAB_NAME).First();
                               string RoadName= dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE==candidateRoad.IMS_PR_ROAD_CODE).Select(m=>m.IMS_ROAD_NAME).First();
                               string candidateRoadName = dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == candidateRoad.PLAN_CN_ROAD_CODE).Select(m=>m.PLAN_RD_NAME).First();

                               return HabitationName + " ( " + habitation_code + " ) " + "is already mapped with same TR/MRL Road ( " + candidateRoadName + " ) in Proposal ( " + RoadName + " ). Please reselect Habitations.";


                                // return "You can't map habitation. Its already mapped with same candidate road in another proposal.";
                            }
                        }
                    }

                    foreach (int habitation_code in IMS_HAB_CODES_ARRAY)
                    {
                        IMS_BENEFITED_HABS ims_benifitted_hab = new IMS_BENEFITED_HABS();
                        ims_benifitted_hab.IMS_PR_ROAD_CODE = habModel.IMS_PR_ROAD_CODE;
                        ims_benifitted_hab.MAST_HAB_CODE = habitation_code;
                        ims_benifitted_hab.HAB_INCLUDED = "Y";

                        ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                        ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.IMS_BENEFITED_HABS.Add(ims_benifitted_hab);
                    }

                    if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                    {
                        ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                    }
                    ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;

                    dbContext.SaveChanges();
                    return string.Empty;
                }
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddHabitationDetailsDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request..." + ex.Message);
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddHabitationDetailsDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request...." + ex.Message);
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddHabitationDetailsDAL()");
                return ("Error Occurred While Processing Request....." + ex.Message);
            }

            finally
            {
                dbContext.Dispose();
            }
        }

        public string FinalizeHabitationDAL(HabitationViewModel habitationViewModel)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_sanctioned_project = new IMS_SANCTIONED_PROJECTS();

                ims_sanctioned_project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == habitationViewModel.IMS_PR_ROAD_CODE).FirstOrDefault();

                /// In case of Unlocking Proposal Dont Set IMS_ISCOMPLETED Flag to H and Check if it is Stage I Proposal update the Habitations to Stage II Proposals
                //if()ims_sanctioned_project.IMS_SANCTIONED == "Y" && ims_sanctioned_project.IMS_LOCK_STATUS == "N"
                if (habitationViewModel.IMS_LOCK_STATUS == "M")
                {
                    /// Dont Update any flag 
                    if (ims_sanctioned_project.IMS_ISCOMPLETED == "E")
                    {
                        ims_sanctioned_project.IMS_ISCOMPLETED = "H";
                    }
                }
                else
                {
                    if (ims_sanctioned_project.IMS_ISCOMPLETED == "E")
                    {
                        ims_sanctioned_project.IMS_ISCOMPLETED = "H";
                    }
                }
                ims_sanctioned_project.USERID = PMGSYSession.Current.UserId;
                ims_sanctioned_project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_sanctioned_project).State = System.Data.Entity.EntityState.Modified;;
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "FinalizeHabitationDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "FinalizeHabitationDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "FinalizeHabitationDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// This Function Copies the Habitation Details of Stage 1 Proposal to Stage 2 Proposal 
        /// Hab_Included is Set to N
        /// Called  : This Function is called when Stage 2 Proposal is Successfully Saved
        /// </summary>
        /// <param name="STAGE_1_IMS_PR_ROAD_CODE"></param>
        /// <param name="STAGE_2_IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public string CopyHabitationDetails(int STAGE_1_IMS_PR_ROAD_CODE, int STAGE_2_IMS_PR_ROAD_CODE)
        {
            var db = new PMGSYEntities();
            try
            {
                List<IMS_BENEFITED_HABS> habList = db.IMS_BENEFITED_HABS.Where(a => a.IMS_PR_ROAD_CODE == STAGE_1_IMS_PR_ROAD_CODE).ToList<IMS_BENEFITED_HABS>();
                // Delete the Previous habitation Details   
                if (db.IMS_BENEFITED_HABS.Where(a => a.IMS_PR_ROAD_CODE == STAGE_2_IMS_PR_ROAD_CODE).Any())
                {
                    List<IMS_BENEFITED_HABS> ims_habs = db.IMS_BENEFITED_HABS.Where(a => a.IMS_PR_ROAD_CODE == STAGE_2_IMS_PR_ROAD_CODE).ToList<IMS_BENEFITED_HABS>();
                    foreach (IMS_BENEFITED_HABS ims_benifitted_hab in ims_habs)
                    {
                        ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                        ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        db.Entry(ims_benifitted_hab).State = EntityState.Modified;
                        db.SaveChanges();

                        db.IMS_BENEFITED_HABS.Remove(ims_benifitted_hab);
                    }
                    db.SaveChanges();
                }
                foreach (IMS_BENEFITED_HABS habObj in habList)
                {
                    IMS_BENEFITED_HABS ims_benifitted_hab = new IMS_BENEFITED_HABS();
                    ims_benifitted_hab.IMS_PR_ROAD_CODE = STAGE_2_IMS_PR_ROAD_CODE;
                    ims_benifitted_hab.MAST_HAB_CODE = habObj.MAST_HAB_CODE;
                    ims_benifitted_hab.MAST_CLUSTER_CODE = habObj.MAST_CLUSTER_CODE;
                    ims_benifitted_hab.HAB_INCLUDED = "N";
                    ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                    ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    db.IMS_BENEFITED_HABS.Add(ims_benifitted_hab);
                }
                IMS_SANCTIONED_PROJECTS ims_Sanctioned_Project = db.IMS_SANCTIONED_PROJECTS.Find(STAGE_2_IMS_PR_ROAD_CODE);
                if (ims_Sanctioned_Project.IMS_ISCOMPLETED == "E")
                {
                    ims_Sanctioned_Project.IMS_ISCOMPLETED = "H";
                }
                ims_Sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                ims_Sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                db.Entry(ims_Sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;
                db.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "CopyHabitationDetails()");
                return "Error Occured while Adding Habitation Details";
            }
            finally
            {
                db.Dispose();
            }
        }

        /// <summary>
        /// Map the Habitation Details to Road Proposal
        /// </summary>
        /// <param name="habModel"></param>
        /// <returns></returns>
        public string AddHabitationClusterDetailDAL(HabitationClusterViewModel habModel)
        {
            dbContext = new PMGSYEntities();
            try
            {
                //For Scheme 1, Cluster and population related validations are required
                int[] IMS_CLUSTER_CODES_ARRAY = habModel.CLUSTER_CODES_LIST.Split(',').Select(n => int.Parse(n)).ToList().ToArray();

                if (PMGSYSession.Current.PMGSYScheme == 1)
                {
                    foreach (int cluster_code in IMS_CLUSTER_CODES_ARRAY)
                    {
                        var lstHabitations = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_CLUSTER_CODE == cluster_code).Select(m => m.MAST_HAB_CODE).ToList();
                        foreach (var item in lstHabitations)
                        {
                            if (dbContext.IMS_BENEFITED_HABS.Any(m => m.MAST_HAB_CODE == item && m.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE))
                            {
                                IMS_BENEFITED_HABS habMaster = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE && m.MAST_HAB_CODE == item).FirstOrDefault();
                                habMaster.MAST_CLUSTER_CODE = cluster_code;
                                habMaster.HAB_INCLUDED = "Y";
                                dbContext.Entry(habMaster).State = EntityState.Modified;
                                dbContext.SaveChanges();
                            }
                            else
                            {
                                IMS_BENEFITED_HABS ims_benifitted_hab = new IMS_BENEFITED_HABS();
                                ims_benifitted_hab.IMS_PR_ROAD_CODE = habModel.IMS_PR_ROAD_CODE;
                                ims_benifitted_hab.MAST_HAB_CODE = item;
                                ims_benifitted_hab.HAB_INCLUDED = "Y";
                                ims_benifitted_hab.MAST_CLUSTER_CODE = cluster_code;
                                ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                                ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                dbContext.IMS_BENEFITED_HABS.Add(ims_benifitted_hab);
                            }
                        }
                    }

                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == habModel.IMS_PR_ROAD_CODE))
                    {
                        int Stage2Road = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == habModel.IMS_PR_ROAD_CODE).Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();
                        string proposalType = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == habModel.IMS_PR_ROAD_CODE).Select(m => m.IMS_PROPOSAL_TYPE).FirstOrDefault();
                        if (proposalType == "P") /// Changed by SAMMED A. PATIL on 20JAN2017 as per directions from Sriniwas Sir (Reason: To restrict habitation mapping against bridge proposals)
                        {
                            foreach (int cluster_code in IMS_CLUSTER_CODES_ARRAY)
                            {
                                var lstHabitations = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_CLUSTER_CODE == cluster_code).Select(m => m.MAST_HAB_CODE).ToList();
                                foreach (var item in lstHabitations)
                                {
                                    IMS_BENEFITED_HABS ims_benifitted_hab = new IMS_BENEFITED_HABS();
                                    /// Changed by SAMMED A. PATIL on 20JAN2017 as per directions from Sriniwas Sir
                                    ims_benifitted_hab.IMS_PR_ROAD_CODE = Stage2Road;//habModel.IMS_PR_ROAD_CODE; 
                                    ims_benifitted_hab.MAST_HAB_CODE = item;
                                    ims_benifitted_hab.HAB_INCLUDED = "Y";
                                    ims_benifitted_hab.MAST_CLUSTER_CODE = cluster_code;
                                    ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                                    ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                    dbContext.IMS_BENEFITED_HABS.Add(ims_benifitted_hab);
                                }
                            }
                        }
                    }

                    IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE).First();

                    if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                    {
                        ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                    }
                    ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;


                    dbContext.SaveChanges();
                    return string.Empty;
                }
                else //For Scheme 2, Cluster and population related validations are not required
                {
                    IMS_SANCTIONED_PROJECTS ims_sanctioned_Project = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE).First();
                    var candidateRoadDetails = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.PLAN_CN_ROAD_CODE == ims_sanctioned_Project.PLAN_CN_ROAD_CODE).ToList();

                    foreach (var candidateRoad in candidateRoadDetails)
                    {
                        foreach (int cluster_code in IMS_CLUSTER_CODES_ARRAY)
                        {
                            var lstHabitations = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_CLUSTER_CODE == cluster_code).Select(m => m.MAST_HAB_CODE).ToList();
                            foreach (var item in lstHabitations)
                            {
                                if (dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == candidateRoad.IMS_PR_ROAD_CODE && m.MAST_HAB_CODE == item && m.MAST_CLUSTER_CODE == cluster_code).Any())
                                {

                                }
                                else if (dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE != candidateRoad.IMS_PR_ROAD_CODE && m.MAST_HAB_CODE == item).Any())
                                {
                                    return "You can't map habitation. Its already mapped with same candidate road in another proposal.";
                                }
                            }
                        }
                    }

                    foreach (int cluster_code in IMS_CLUSTER_CODES_ARRAY)
                    {
                        var lstHabitations = dbContext.MASTER_CLUSTER_HABITATIONS.Where(m => m.MAST_CLUSTER_CODE == cluster_code).Select(m => m.MAST_HAB_CODE).ToList();
                        foreach (var item in lstHabitations)
                        {
                            if (dbContext.IMS_BENEFITED_HABS.Any(m => m.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE && m.MAST_HAB_CODE == item))
                            {
                                IMS_BENEFITED_HABS benHab = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == habModel.IMS_PR_ROAD_CODE && m.MAST_HAB_CODE == item).FirstOrDefault();
                                benHab.MAST_CLUSTER_CODE = cluster_code;
                                benHab.HAB_INCLUDED = "Y";
                                dbContext.Entry(benHab).State = EntityState.Modified;
                                dbContext.SaveChanges();
                            }
                            else
                            {
                                IMS_BENEFITED_HABS ims_benifitted_hab = new IMS_BENEFITED_HABS();
                                ims_benifitted_hab.IMS_PR_ROAD_CODE = habModel.IMS_PR_ROAD_CODE;
                                ims_benifitted_hab.MAST_HAB_CODE = item;
                                ims_benifitted_hab.HAB_INCLUDED = "Y";
                                ims_benifitted_hab.MAST_CLUSTER_CODE = cluster_code;
                                ims_benifitted_hab.USERID = PMGSYSession.Current.UserId;
                                ims_benifitted_hab.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                dbContext.IMS_BENEFITED_HABS.Add(ims_benifitted_hab);
                            }
                        }
                    }

                    if (ims_sanctioned_Project.IMS_ISCOMPLETED == "H")
                    {
                        ims_sanctioned_Project.IMS_ISCOMPLETED = "E";
                    }
                    ims_sanctioned_Project.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_Project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_Project).State = System.Data.Entity.EntityState.Modified;;

                    dbContext.SaveChanges();
                    return string.Empty;
                }
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddHabitationClusterDetailDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddHabitationClusterDetailDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddHabitationClusterDetailDAL()");
                return ("Error Occurred While Processing Request.");
            }

            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Traffic Intensity

        /// <summary>
        ///  Populate the List of Traffic Intensity List 
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetTrafficListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                List<IMS_TRAFFIC_INTENSITY> listTrafficIntensity = (from c in dbContext.IMS_TRAFFIC_INTENSITY
                                                                    where
                                                                    c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE
                                                                    select c
                                                             ).OrderBy(c => c.IMS_TI_YEAR).ToList<IMS_TRAFFIC_INTENSITY>();

                IQueryable<IMS_TRAFFIC_INTENSITY> query = listTrafficIntensity.AsQueryable<IMS_TRAFFIC_INTENSITY>();
                totalRecords = listTrafficIntensity.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_TI_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_TI_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_TI_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }


                return query.Select(trafficDetails => new
                {
                    ID = trafficDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {         
                                    trafficDetails.IMS_TI_YEAR.ToString() + " - " +  (trafficDetails.IMS_TI_YEAR + 1),
                                    trafficDetails.IMS_TOTAL_TI.ToString(),
                                    trafficDetails.IMS_COMM_TI.ToString (),
                                    "<a href='#' title='Click here to edit the Traffic Intensity Details' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditTrafficI(" + IMS_PR_ROAD_CODE.ToString().Trim()  + "," + trafficDetails.IMS_TI_YEAR   + "); return false;'>Edit</a>",
                                    "<a href='#' title='Click here to delete the Traffic Intensity Details' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteTrafficI(" + trafficDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "," + trafficDetails.IMS_TI_YEAR  +"); return false;'>Delete</a>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetTrafficListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Saves the Data of Traffic Intensity
        /// </summary>
        /// <param name="ims_traffic_intensity"></param>
        /// <returns></returns>
        public int SaveTrafficIntesityDAL(IMS_TRAFFIC_INTENSITY ims_traffic_intensity)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ims_traffic_intensity.USERID = PMGSYSession.Current.UserId;
                ims_traffic_intensity.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.IMS_TRAFFIC_INTENSITY.Add(ims_traffic_intensity);
                return dbContext.SaveChanges();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveTrafficIntesityDAL()");
                return -1;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update the Traffic Intensity Details
        /// </summary>
        /// <param name="ims_traffic_intensity"></param>
        /// <returns></returns>
        public int UpdateTrafficIntesityDAL(IMS_TRAFFIC_INTENSITY ims_traffic_intensity)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_TRAFFIC_INTENSITY obj_ims_traffic_intensity = (from c in dbContext.IMS_TRAFFIC_INTENSITY where c.IMS_PR_ROAD_CODE == ims_traffic_intensity.IMS_PR_ROAD_CODE && c.IMS_TI_YEAR == ims_traffic_intensity.IMS_TI_YEAR select c).FirstOrDefault();

                obj_ims_traffic_intensity.IMS_COMM_TI = ims_traffic_intensity.IMS_COMM_TI;
                obj_ims_traffic_intensity.IMS_TI_YEAR = ims_traffic_intensity.IMS_TI_YEAR;
                obj_ims_traffic_intensity.IMS_TOTAL_TI = ims_traffic_intensity.IMS_TOTAL_TI;
                obj_ims_traffic_intensity.USERID = PMGSYSession.Current.UserId;
                obj_ims_traffic_intensity.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(obj_ims_traffic_intensity).State = System.Data.Entity.EntityState.Modified;;

                return dbContext.SaveChanges();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateTrafficIntesityDAL()");
                return -1;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Delete the Traffic Intensity Details
        /// </summary>
        /// <param name="ims_traffic_intensity"></param>
        /// <returns></returns>
        public int DeleteTrafficIntensityDetailsDAL(IMS_TRAFFIC_INTENSITY ims_traffic_intensity)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_TRAFFIC_INTENSITY obj_ims_traffic_intensity = (from c in dbContext.IMS_TRAFFIC_INTENSITY where c.IMS_PR_ROAD_CODE == ims_traffic_intensity.IMS_PR_ROAD_CODE && c.IMS_TI_YEAR == ims_traffic_intensity.IMS_TI_YEAR select c).FirstOrDefault();
                obj_ims_traffic_intensity.USERID = PMGSYSession.Current.UserId;
                obj_ims_traffic_intensity.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(obj_ims_traffic_intensity).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.IMS_TRAFFIC_INTENSITY.Remove(obj_ims_traffic_intensity);

                return dbContext.SaveChanges();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteTrafficIntensityDetailsDAL()");
                return -1;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region CBR Details

        /// <summary>
        /// Delete the CBR Details
        /// </summary>
        /// <param name="ims_cbr_value"></param>
        /// <returns></returns>
        public string DeleteCBRValueDAL(IMS_CBR_VALUE ims_cbr_value)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_CBR_VALUE cbr_model = (from c in dbContext.IMS_CBR_VALUE where c.IMS_PR_ROAD_CODE == ims_cbr_value.IMS_PR_ROAD_CODE && c.IMS_SEGMENT_NO == ims_cbr_value.IMS_SEGMENT_NO select c).FirstOrDefault();
                cbr_model.USERID = PMGSYSession.Current.UserId;
                cbr_model.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(cbr_model).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.IMS_CBR_VALUE.Remove(cbr_model);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteCBRValueDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteCBRValueDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteCBRValueDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Update the CBR Details
        /// </summary>
        /// <param name="ims_cbr_value"></param>
        /// <returns></returns>
        public string UpdateCBRVAlueDAL(IMS_CBR_VALUE ims_cbr_value)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_CBR_VALUE cbr_model = (from c in dbContext.IMS_CBR_VALUE where c.IMS_PR_ROAD_CODE == ims_cbr_value.IMS_PR_ROAD_CODE && c.IMS_SEGMENT_NO == ims_cbr_value.IMS_SEGMENT_NO select c).FirstOrDefault();

                cbr_model.IMS_STR_CHAIN = ims_cbr_value.IMS_STR_CHAIN;
                cbr_model.IMS_END_CHAIN = ims_cbr_value.IMS_END_CHAIN;
                cbr_model.IMS_CBR_VALUE1 = ims_cbr_value.IMS_CBR_VALUE1;
                cbr_model.USERID = PMGSYSession.Current.UserId;
                cbr_model.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(cbr_model).State = System.Data.Entity.EntityState.Modified;;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateCBRVAlueDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateCBRVAlueDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateCBRVAlueDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        ///  Save the CBR Value
        /// </summary>
        /// <param name="ims_cbr_value"></param>
        /// <returns></returns>
        public string SaveCBRValueDAL(IMS_CBR_VALUE ims_cbr_value)
        {
            try
            {
                dbContext = new PMGSYEntities();
                ims_cbr_value.USERID = PMGSYSession.Current.UserId;
                ims_cbr_value.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.IMS_CBR_VALUE.Add(ims_cbr_value);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveCBRValueDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveCBRValueDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveCBRValueDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Save the CBR Value and Get the Remaining Length
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetCBRListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                List<IMS_CBR_VALUE> listCBR = (from c in dbContext.IMS_CBR_VALUE
                                               where
                                               c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE
                                               select c
                                                             ).OrderBy(c => c.IMS_SEGMENT_NO).ToList<IMS_CBR_VALUE>();

                IQueryable<IMS_CBR_VALUE> query = listCBR.AsQueryable<IMS_CBR_VALUE>();
                totalRecords = listCBR.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                Int32 MaxID = 0;
                if (dbContext.IMS_CBR_VALUE.Where(c => c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Any())
                {
                    MaxID = (from c in dbContext.IMS_CBR_VALUE where c.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE select c.IMS_SEGMENT_NO).Max();
                }


                return query.Select(CBRDetails => new
                {
                    cell = new[] {         
                                    CBRDetails.IMS_SEGMENT_NO.ToString(),
                                    CBRDetails.IMS_STR_CHAIN.ToString(),
                                    CBRDetails.IMS_END_CHAIN.ToString(),
                                    (CBRDetails.IMS_END_CHAIN - CBRDetails.IMS_STR_CHAIN).ToString(),
                                    CBRDetails.IMS_CBR_VALUE1.ToString(),
                                    (CBRDetails.IMS_SEGMENT_NO == MaxID) ? "<a href='#' title='Click here to edit the CBR Details' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditCBR(" + IMS_PR_ROAD_CODE.ToString().Trim()  + "," + CBRDetails.IMS_SEGMENT_NO +"); return false;'>Edit</a>" : "<a href='#' onclick='return false;' class='ui-icon ui-icon-locked ui-align-center' />",
                                    (CBRDetails.IMS_SEGMENT_NO == MaxID) ? "<a href='#' title='Click here to delete the CBR Details' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteCBR(" + CBRDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "," + CBRDetails.IMS_SEGMENT_NO +"); return false;'>Delete</a>" : "<a href='#' onclick='return false;' class='ui-icon ui-icon-locked ui-align-center' />"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetCBRListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region File Details

        /// <summary>
        /// Add File Upload Details
        /// </summary>
        /// <param name="lst_ims_proposal_files"></param>
        /// <returns></returns>
        public string AddFileUploadDetailsDAL(List<IMS_PROPOSAL_FILES> lst_ims_proposal_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                Int32? MaxID;
                foreach (IMS_PROPOSAL_FILES fileModel in lst_ims_proposal_files)
                {
                    if (dbContext.IMS_PROPOSAL_FILES.Count() == 0)
                    {
                        MaxID = 0;
                    }
                    else
                    {
                        MaxID = (from c in dbContext.IMS_PROPOSAL_FILES select (Int32?)c.IMS_FILE_ID ?? 0).Max();
                    }
                    ++MaxID;
                    fileModel.IMS_FILE_ID = Convert.ToInt32(MaxID);
                    fileModel.USERID = PMGSYSession.Current.UserId;
                    fileModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.IMS_PROPOSAL_FILES.Add(fileModel);
                }
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddFileUploadDetailsDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddFileUploadDetailsDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddFileUploadDetailsDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        ///  Lists the Files
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<IMS_PROPOSAL_FILES> listProposalFiles = dbContext.IMS_PROPOSAL_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.ISPF_TYPE == "I").ToList();
                IQueryable<IMS_PROPOSAL_FILES> query = listProposalFiles.AsQueryable<IMS_PROPOSAL_FILES>();
                totalRecords = listProposalFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                //Commented By Srishti
                //string VirtualDirectoryUrl = Path.Combine(PMGSYSession.Current.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_PMGSYI"] : PMGSYSession.Current.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_RCPLWE"] : PMGSYSession.Current.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_PMGSYII"] : PMGSYSession.Current.PMGSYScheme == 5 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_VV"] : ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_PMGSYIII"], "thumbnails");
                string VirtualDirectoryUrl = Path.Combine(PMGSYSession.Current.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_PMGSYI"] : PMGSYSession.Current.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_RCPLWE"] : PMGSYSession.Current.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_PMGSYII"] : PMGSYSession.Current.PMGSYScheme == 5 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_VV"] : ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_VIRTUAL_DIR_PATH_PMGSYIII"]);
                string PhysicalPath = PMGSYSession.Current.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_PMGSYI"] : PMGSYSession.Current.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_RCPLWE"] : PMGSYSession.Current.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_PMGSYII"] : ConfigurationManager.AppSettings["PROPOSAL_FILE_UPLOAD_PMGSYIII"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.IMS_FILE_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {   
                                   // @"file/://"  + Path.Combine(PhysicalPath, fileDetails.IMS_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    Path.Combine(VirtualDirectoryUrl, fileDetails.IMS_FILE_NAME.ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/"),
                                    fileDetails.CHAINAGE.ToString(),
                                    fileDetails.ISPF_FILE_REMARK,
                                    "<a href='#' title='Click here to Download an Image' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadImage(\"" + URLEncrypt.EncryptParameters(new string[] { fileDetails.IMS_FILE_NAME  }) +"\"); return false;'>Download</a>" ,
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditImageDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                    dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.IMS_SANCTIONED).FirstOrDefault() == "Y" ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteFileDetails('" + fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.IMS_FILE_NAME + "'); return false;>Delete</a>",
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveFileDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveFileDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetFilesListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        /// <summary>
        /// Get the JI PDF Files List
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetJIFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<IMS_PROPOSAL_FILES> listProposalFiles = dbContext.IMS_PROPOSAL_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.ISPF_TYPE == "J" /*&& p.ISPF_UPLOAD_BY == "D"*/).ToList();
                IQueryable<IMS_PROPOSAL_FILES> query = listProposalFiles.AsQueryable<IMS_PROPOSAL_FILES>();
                totalRecords = listProposalFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = ConfigurationManager.AppSettings["PROPOSAL_JI_FILE_UPLOAD_VIRTUAL_DIR_PATH"];
                string PhysicalPath = PMGSYSession.Current.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["PROPOSAL_JI_FILE_UPLOAD_PMGSYI"] : PMGSYSession.Current.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["PROPOSAL_JI_FILE_UPLOAD_RCPLWE"] : PMGSYSession.Current.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["PROPOSAL_JI_FILE_UPLOAD_PMGSYII"] : ConfigurationManager.AppSettings["PROPOSAL_JI_FILE_UPLOAD_PMGSYIII"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.IMS_FILE_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {                                       
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.IMS_FILE_NAME  }),                                                                                                      
                                    fileDetails.ISPF_FILE_REMARK,
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditJIDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                    "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteJIFileDetails('" + fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.IMS_FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>",
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SaveJIDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSaveJIDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetJIFilesListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Get the PDF Files List
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //List<IMS_PROPOSAL_FILES> listProposalFiles = PMGSYSession.Current.PMGSYScheme == 3 ? dbContext.IMS_PROPOSAL_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.ISPF_TYPE == "P" && p.ISPF_UPLOAD_BY == "D").ToList() : dbContext.IMS_PROPOSAL_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.ISPF_TYPE == "C" && p.ISPF_UPLOAD_BY == "D").ToList();
                List<IMS_PROPOSAL_FILES> listProposalFiles = dbContext.IMS_PROPOSAL_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.ISPF_TYPE == "C" && p.ISPF_UPLOAD_BY == "D").ToList();
                IQueryable<IMS_PROPOSAL_FILES> query = listProposalFiles.AsQueryable<IMS_PROPOSAL_FILES>();
                totalRecords = listProposalFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_VIRTUAL_DIR_PATH"];
                string PhysicalPath = PMGSYSession.Current.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_PMGSYI"] : PMGSYSession.Current.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_RCPLWE"] : PMGSYSession.Current.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_PMGSYII"] : ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_PMGSYIII"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.IMS_FILE_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {                                       
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.IMS_FILE_NAME  }),                                                                                                      
                                    fileDetails.ISPF_FILE_REMARK,
                                    // Changes done on 11-02-2022 by Srishti Tyagi
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditPDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                     dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(m=>m.STA_SANCTIONED).FirstOrDefault() == "Y" ? "<span class='ui-icon ui-icon-locked ui-align-center'></span>" : "<a href='#' title='Click here to delete the File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.IMS_FILE_NAME + "'); return false;>Delete</a>",                                                                       
                                    // Changes end
                                   // "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.IMS_FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>",
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetPDFFilesListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        /// <summary>
        /// Get the PDF Files List for STA and SRRDA
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public Array GetSTASRRDAPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                List<IMS_PROPOSAL_FILES> listProposalFiles = dbContext.IMS_PROPOSAL_FILES.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && p.ISPF_TYPE == (PMGSYSession.Current.RoleCode == 22 ? "C" : "P") && p.ISPF_UPLOAD_BY == (PMGSYSession.Current.RoleCode == 2 ? "S" : (PMGSYSession.Current.RoleCode == 15 ? "P" : "T"))).ToList();
                IQueryable<IMS_PROPOSAL_FILES> query = listProposalFiles.AsQueryable<IMS_PROPOSAL_FILES>();
                totalRecords = listProposalFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_VIRTUAL_DIR_PATH"];
                string PhysicalPath = PMGSYSession.Current.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_PMGSYI"] : PMGSYSession.Current.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_RCPLWE"] : PMGSYSession.Current.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_PMGSYII"] : ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_PMGSYIII"];

                //string imageUrl = Path.Combine(VirtualDirectoryUrl, query.Select(c => c.IMS_FILE_NAME).First().ToString()).ToString().Replace(@"\\",@"//").Replace(@"\",@"/");

                return query.Select(fileDetails => new
                {
                    id = fileDetails.IMS_FILE_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {                                       
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.IMS_FILE_NAME  }),                                                                                                      
                                    fileDetails.ISPF_FILE_REMARK,
                                    "<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditPDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",
                                    "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "','" + fileDetails.IMS_FILE_NAME.Replace(' ','_') +"'); return false;'>Delete</a>",
                                    "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.IMS_FILE_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.IMS_FILE_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetSTASRRDAPDFFilesListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        /// <summary>
        ///  Update the Image File Details
        /// </summary>
        /// <param name="ims_proposal_files"></param>
        /// <returns></returns>
        public string UpdateImageDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_PROPOSAL_FILES db_ims_proposal_files = dbContext.IMS_PROPOSAL_FILES.Where(
                    a => a.IMS_FILE_ID == ims_proposal_files.IMS_FILE_ID &&
                    a.IMS_PR_ROAD_CODE == ims_proposal_files.IMS_PR_ROAD_CODE &&
                    a.ISPF_TYPE == ims_proposal_files.ISPF_TYPE
                    ).FirstOrDefault();

                db_ims_proposal_files.CHAINAGE = ims_proposal_files.CHAINAGE;
                db_ims_proposal_files.ISPF_FILE_REMARK = ims_proposal_files.ISPF_FILE_REMARK;
                db_ims_proposal_files.USERID = PMGSYSession.Current.UserId;
                db_ims_proposal_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(db_ims_proposal_files).State = System.Data.Entity.EntityState.Modified;;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateImageDetailsDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateImageDetailsDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateImageDetailsDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        ///  Update the PDF File Details
        /// </summary>
        /// <param name="ims_proposal_files"></param>
        /// <returns></returns>
        public string UpdatePDFDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_PROPOSAL_FILES db_ims_proposal_files = dbContext.IMS_PROPOSAL_FILES.Where(
                    a => a.IMS_FILE_ID == ims_proposal_files.IMS_FILE_ID &&
                    a.IMS_PR_ROAD_CODE == ims_proposal_files.IMS_PR_ROAD_CODE &&
                    a.ISPF_TYPE == ims_proposal_files.ISPF_TYPE
                    ).FirstOrDefault();

                db_ims_proposal_files.ISPF_FILE_REMARK = ims_proposal_files.ISPF_FILE_REMARK;
                db_ims_proposal_files.USERID = PMGSYSession.Current.UserId;
                db_ims_proposal_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(db_ims_proposal_files).State = System.Data.Entity.EntityState.Modified;;
                dbContext.SaveChanges();

                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdatePDFDetailsDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdatePDFDetailsDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdatePDFDetailsDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        ///  Delete File and File Details
        /// </summary>
        /// <param name="ims_proposal_files"></param>
        /// <returns></returns>
        public string DeleteFileDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_PROPOSAL_FILES obj_ims_propopsal_files = dbContext.IMS_PROPOSAL_FILES.Where(
                    a => a.IMS_PR_ROAD_CODE == ims_proposal_files.IMS_PR_ROAD_CODE &&
                    a.IMS_FILE_ID == ims_proposal_files.IMS_FILE_ID &&
                    a.ISPF_TYPE == ims_proposal_files.ISPF_TYPE &&
                    a.IMS_FILE_NAME == ims_proposal_files.IMS_FILE_NAME).FirstOrDefault();

                obj_ims_propopsal_files.USERID = PMGSYSession.Current.UserId;
                obj_ims_propopsal_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(obj_ims_propopsal_files).State = EntityState.Modified;
                dbContext.SaveChanges();

                dbContext.IMS_PROPOSAL_FILES.Remove(obj_ims_propopsal_files);
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                {
                    sw.WriteLine("IMS_PR_ROAD_CODE :" + ims_proposal_files.IMS_PR_ROAD_CODE);
                    sw.WriteLine("IMS_FILE_ID :" + ims_proposal_files.IMS_FILE_ID);
                    sw.WriteLine("ISPF_TYPE :" + ims_proposal_files.ISPF_TYPE);
                    sw.WriteLine("IMS_FILE_NAME :" + ims_proposal_files.IMS_FILE_NAME);
                    sw.WriteLine("======================================================================");
                    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    sw.WriteLine("Method : " + "DeleteFileDetailsDAL()");
                    if (ex != null)
                        sw.WriteLine("Exception : " + ex.ToString());
                    if (ex.InnerException != null)
                        sw.WriteLine("innerException : " + ex.InnerException.ToString());
                    if (ex.InnerException.InnerException != null)
                        sw.WriteLine("ex.InnerException.InnerException : " + ex.InnerException.InnerException.ToString());
                    sw.WriteLine("---------------------------------------------------------------------------------------");
                    sw.Close();
                }

                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        ///// <summary>
        /////  Update the PDF File Details
        ///// </summary>
        ///// <param name="ims_proposal_files"></param>
        ///// <returns></returns>
        //public string UpdateJIDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files)
        //{
        //    try
        //    {
        //        dbContext = new PMGSYEntities();
        //        IMS_PROPOSAL_FILES db_ims_proposal_files = dbContext.IMS_PROPOSAL_FILES.Where(
        //            a => a.IMS_FILE_ID == ims_proposal_files.IMS_FILE_ID &&
        //            a.IMS_PR_ROAD_CODE == ims_proposal_files.IMS_PR_ROAD_CODE &&
        //            a.ISPF_TYPE == ims_proposal_files.ISPF_TYPE
        //            ).FirstOrDefault();

        //        db_ims_proposal_files.ISPF_FILE_REMARK = ims_proposal_files.ISPF_FILE_REMARK;
        //        db_ims_proposal_files.USERID = PMGSYSession.Current.UserId;
        //        db_ims_proposal_files.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
        //        dbContext.Entry(db_ims_proposal_files).State = System.Data.Entity.EntityState.Modified;;
        //        dbContext.SaveChanges();

        //        return string.Empty;
        //    }
        //    catch (DbUpdateException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return ("An Error Occurred While Processing Your Request.");
        //    }
        //    catch (OptimisticConcurrencyException ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return ("An Error Occurred While Processing Your Request.");
        //    }
        //    catch (Exception ex)
        //    {
        //        Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
        //        return ("Error Occurred While Processing Request.");
        //    }
        //    finally
        //    {
        //        dbContext.Dispose();
        //    }
        //}
        #endregion

        #region UnLockProposal

        /// <summary>
        /// Update unlocked Proposal
        /// </summary>
        /// <param name="proposalViewModel"></param>
        /// <returns></returns>
        public string UpdateUnlockedProposedDAL(UnlockProposalViewModel proposalViewModel)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS objProposal = new IMS_SANCTIONED_PROJECTS();
                objProposal = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalViewModel.IMS_PR_ROAD_CODE);

                if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_IS_STAGED == "S" && m.IMS_STAGE_PHASE == "S2" && m.IMS_STAGED_ROAD_ID == proposalViewModel.IMS_PR_ROAD_CODE))
                {
                    var stage2Details = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_IS_STAGED == "S" && m.IMS_STAGE_PHASE == "S2" && m.IMS_STAGED_ROAD_ID == proposalViewModel.IMS_PR_ROAD_CODE).FirstOrDefault();
                    if (stage2Details.IMS_PAV_LENGTH < proposalViewModel.IMS_PAV_LENGTH)
                    {
                        return "Proposal length should not exceed the stage 2 road length present on this proposal.";
                    }
                }

                if (proposalViewModel.IMS_STAGE_PHASE == "2")
                {
                    objProposal.IMS_STAGE_PHASE = "S2";

                    //IMS_YEAR_Staged
                    var data = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                where
                                    c.IMS_PACKAGE_ID == proposalViewModel.Stage_2_Package_ID
                                    &&
                                    c.IMS_YEAR == proposalViewModel.Stage_2_Year
                                    &&
                                    c.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE
                                select new
                                {
                                    Package_ID = proposalViewModel.Stage_2_Package_ID,
                                    Year = proposalViewModel.Stage_2_Year,
                                    Road_ID = c.IMS_PR_ROAD_CODE
                                }).ToList();
                    // Self Referencing Columns
                    foreach (var RowData in data)
                    {
                        objProposal.IMS_STAGED_YEAR = RowData.Year;
                        objProposal.IMS_STAGED_PACKAGE_ID = RowData.Package_ID.ToString();
                        objProposal.IMS_STAGED_ROAD_ID = RowData.Road_ID;
                    }

                    //validation for checking the total length of stage 2 proposals should not exceed the stage 1 proposal

                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2"))
                    {
                        decimal sumOfPavLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2").Sum(m => m.IMS_PAV_LENGTH) == null ? 0 : dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2").Sum(m => m.IMS_PAV_LENGTH);

                        sumOfPavLength += proposalViewModel.IMS_PAV_LENGTH.Value;

                        if (sumOfPavLength > (dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == objProposal.IMS_STAGED_ROAD_ID.Value).Select(m => m.IMS_PAV_LENGTH).FirstOrDefault()))
                        {
                            return "Sum of Pavement Length of Stage 2 Proposals is exceeding the Pavement Length of Stage 1 Proposal.";
                        }

                    }

                    //validation for checking whether the Proposal length is exceeding the core network lenth.

                    decimal? totalCnLength = 0;

                    if (PMGSYSession.Current.PMGSYScheme == 1)
                    {
                        totalCnLength = (from c in dbContext.PLAN_ROAD
                                         where c.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE
                                         select c.PLAN_RD_LENGTH).First();
                    }
                    else if (PMGSYSession.Current.PMGSYScheme == 2 || PMGSYSession.Current.PMGSYScheme == 3)///Changes for RCPLWE
                    {
                        // For scheme 2 - Candidate Road can be combination of roads so,
                        // Length is considered as Total Length i.e. PLAN_RD_TOTAL_LEN
                        totalCnLength = (from c in dbContext.PLAN_ROAD
                                         where c.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE
                                         select c.PLAN_RD_TOTAL_LEN).First();
                    }

                    decimal? ProposedLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                               where c.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE
                                               && c.IMS_PROPOSAL_TYPE == "P"
                                               && c.IMS_SANCTIONED != "D"
                                               && ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                               select (decimal?)c.IMS_PAV_LENGTH).Sum();

                    decimal? remainingLength = Convert.ToDecimal(totalCnLength) - Convert.ToDecimal(ProposedLength);

                    if (proposalViewModel.IMS_PAV_LENGTH > (totalCnLength + (totalCnLength * Convert.ToDecimal(0.5))))
                    {
                        return "variation in Proposed Length can be upto 50 % CN Length";
                    }
                }

                #region
                //validation for checking whether the Proposal length is exceeding the core network lenth.

                decimal? totCnLength = 0;

                if (PMGSYSession.Current.PMGSYScheme == 1)
                {
                    totCnLength = (from c in dbContext.PLAN_ROAD
                                   where c.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE
                                   select c.PLAN_RD_LENGTH).First();
                }
                else if (PMGSYSession.Current.PMGSYScheme == 2 || PMGSYSession.Current.PMGSYScheme == 3 || PMGSYSession.Current.PMGSYScheme == 4)///Changes for RCPLWE, PMGSY3
                {
                    // For scheme 3 - RCPLWE Road can be combination of roads so,
                    // For scheme 2 - Candidate Road can be combination of roads so,
                    // Length is considered as Total Length i.e. PLAN_RD_TOTAL_LEN
                    totCnLength = (from c in dbContext.PLAN_ROAD
                                   where c.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE
                                   select c.PLAN_RD_TOTAL_LEN).First();
                }

                decimal? PropLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                       where c.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE
                                       && c.IMS_PROPOSAL_TYPE == "P"
                                       && c.IMS_SANCTIONED != "D"
                                       && ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                       select (decimal?)c.IMS_PAV_LENGTH).Sum();

                decimal? remainLength = Convert.ToDecimal(totCnLength) - Convert.ToDecimal(PropLength);

                if (proposalViewModel.IMS_PAV_LENGTH > (totCnLength + (totCnLength * Convert.ToDecimal(0.5))))
                {
                    return "variation in Proposed Length can be upto 50 % CN Length";
                }
                #endregion

                objProposal.IMS_CARRIAGED_WIDTH = proposalViewModel.IMS_CARRIAGED_WIDTH;

                //objProposal.IMS_BATCH = proposalViewModel.IMS_BATCH;
                //FUNDING AGENCY
                objProposal.IMS_COLLABORATION = proposalViewModel.IMS_COLLABORATION;
                //STREAM
                if (proposalViewModel.isPaymentDone == false)
                {
                    objProposal.IMS_STREAMS = proposalViewModel.IMS_STREAMS;
                }
                objProposal.IMS_ROAD_FROM = proposalViewModel.IMS_ROAD_FROM;
                objProposal.IMS_ROAD_TO = proposalViewModel.IMS_ROAD_TO;
                objProposal.IMS_UPGRADE_CONNECT = proposalViewModel.IMS_UPGRADE_CONNECT;
                if (proposalViewModel.IMS_UPGRADE_CONNECT == "N")
                {
                    objProposal.MAST_EXISTING_SURFACE_CODE = null;
                    /*Changed by SAMMED PATIL on 03/03/2016*/
                    //objProposal.IMS_IS_STAGED = "C";    
                    //objProposal.IMS_STAGE_PHASE = null;
                }
                else
                {
                    objProposal.MAST_EXISTING_SURFACE_CODE = proposalViewModel.MAST_EXISTING_SURFACE_CODE;
                    /*Changed by SAMMED PATIL on 03/03/2016*/
                    //objProposal.IMS_IS_STAGED = "C";  
                    //objProposal.IMS_STAGE_PHASE = null;
                }
                //objProposal.IMS_ROAD_NAME = proposalViewModel.IMS_ROAD_FROM + " " + proposalViewModel.IMS_ROAD_TO;

                objProposal.IMS_IS_STAGED = proposalViewModel.IMS_IS_STAGED;
                objProposal.IMS_STAGE_PHASE = proposalViewModel.hdn_IMS_STAGE_PHASE;
                objProposal.IMS_PARTIAL_LEN = proposalViewModel.IMS_PARTIAL_LEN;

                if (proposalViewModel.hdn_IMS_STAGE_PHASE == "S2")
                {
                    objProposal.IMS_STAGED_PACKAGE_ID = proposalViewModel.Stage_2_Package_ID;
                    objProposal.IMS_STAGED_YEAR = proposalViewModel.Stage_2_Year;

                    //CopyHabitationsonConvertingStage1toStage2DAL(objProposal.IMS_STAGED_ROAD_ID.Value, objProposal.IMS_PR_ROAD_CODE);
                }
                else
                {
                    objProposal.IMS_STAGED_PACKAGE_ID = null;
                    objProposal.IMS_STAGED_YEAR = null;
                    objProposal.IMS_STAGED_ROAD_ID = null;
                }
                // All Costs Sanctioned
                objProposal.IMS_SANCTIONED_PAV_AMT = proposalViewModel.IMS_SANCTIONED_PAV_AMT;
                objProposal.IMS_SANCTIONED_CD_AMT = proposalViewModel.IMS_SANCTIONED_CD_AMT;
                objProposal.IMS_SANCTIONED_PW_AMT = proposalViewModel.IMS_SANCTIONED_PW_AMT;
                objProposal.IMS_SANCTIONED_OW_AMT = proposalViewModel.IMS_SANCTIONED_OW_AMT;
                objProposal.IMS_SANCTIONED_RS_AMT = Convert.ToDecimal(proposalViewModel.IMS_SANCTIONED_RS_AMT);
                objProposal.IMS_SHARE_PERCENT = proposalViewModel.IMS_SHARE_PERCENT;
                objProposal.IMS_CC_LENGTH = proposalViewModel.IMS_CC_LENGTH;
                objProposal.IMS_BT_LENGTH = proposalViewModel.IMS_BT_LENGTH;
                objProposal.IMS_PAV_LENGTH = proposalViewModel.IMS_PAV_LENGTH.HasValue ? proposalViewModel.IMS_PAV_LENGTH.Value : 0;
                objProposal.IMS_SANCTIONED_MAN_AMT1 = proposalViewModel.IMS_SANCTIONED_MAN_AMT1;
                objProposal.IMS_SANCTIONED_MAN_AMT2 = proposalViewModel.IMS_SANCTIONED_MAN_AMT2;
                objProposal.IMS_SANCTIONED_MAN_AMT3 = proposalViewModel.IMS_SANCTIONED_MAN_AMT3;
                objProposal.IMS_SANCTIONED_MAN_AMT4 = proposalViewModel.IMS_SANCTIONED_MAN_AMT4;
                objProposal.IMS_SANCTIONED_MAN_AMT5 = proposalViewModel.IMS_SANCTIONED_MAN_AMT5;

                if (PMGSYSession.Current.PMGSYScheme == 3)
                {
                    objProposal.IMS_SANCTIONED_RENEWAL_AMT = (proposalViewModel.IMS_RENEWAL_COST == null ? 0 : proposalViewModel.IMS_RENEWAL_COST.Value);
                }

                if (PMGSYSession.Current.PMGSYScheme == 2)
                {
                    objProposal.IMS_SANCTIONED_RENEWAL_AMT = (proposalViewModel.IMS_RENEWAL_COST == null ? 0 : proposalViewModel.IMS_RENEWAL_COST.Value);
                    objProposal.IMS_FURNITURE_COST = proposalViewModel.IMS_FURNITURE_COST;
                }
                objProposal.IMS_SANCTIONED_FC_AMT = proposalViewModel.IMS_FURNITURE_COST;
                objProposal.MAST_MP_CONST_CODE = proposalViewModel.MAST_MP_CONST_CODE > 0 ? proposalViewModel.MAST_MP_CONST_CODE : null;
                objProposal.MAST_MLA_CONST_CODE = proposalViewModel.MAST_MLA_CONST_CODE > 0 ? proposalViewModel.MAST_MLA_CONST_CODE : null;
                objProposal.IMS_TRAFFIC_TYPE = proposalViewModel.IMS_TRAFFIC_TYPE > 0 ? proposalViewModel.IMS_TRAFFIC_TYPE : null;
                objProposal.IMS_PROPOSED_SURFACE = proposalViewModel.IMS_PROPOSED_SURFACE;
                objProposal.IMS_NO_OF_CDWORKS = proposalViewModel.IMS_NO_OF_CDWORKS.HasValue ? proposalViewModel.IMS_NO_OF_CDWORKS.Value : objProposal.IMS_NO_OF_CDWORKS;

                //PMGSY Scheme-II
                objProposal.IMS_IS_HIGHER_SPECIFICATION = proposalViewModel.IMS_IS_HIGHER_SPECIFICATION;
                if (proposalViewModel.IMS_IS_HIGHER_SPECIFICATION != null && proposalViewModel.IMS_IS_HIGHER_SPECIFICATION.Equals("Y"))
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = proposalViewModel.IMS_HIGHER_SPECIFICATION_COST;
                    objProposal.IMS_SANCTIONED_HS_AMT = proposalViewModel.IMS_HIGHER_SPECIFICATION_COST;
                }
                else
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = null;
                    objProposal.IMS_SANCTIONED_HS_AMT = null;
                }


                //new change done by Vikram on 31 July 2014 for enabling the provision of core network mapping when proposals are unlocked.

                //objProposal.IMS_STAGED_PACKAGE_ID = proposalViewModel.Stage_2_Package_ID;
                //objProposal.IMS_STAGED_ROAD_ID = proposalViewModel.IMS_STAGED_ROAD_ID;
                //objProposal.IMS_STAGED_YEAR = proposalViewModel.Stage_2_Year;
                //objProposal.IMS_ROAD_FROM = proposalViewModel.IMS_ROAD_FROM;
                //objProposal.IMS_ROAD_TO = proposalViewModel.IMS_ROAD_TO;
                //objProposal.PLAN_CN_ROAD_CODE = proposalViewModel.PLAN_CN_ROAD_CODE;
                //objProposal.IMS_ROAD_NAME = dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_CN_ROAD_NUMBER).FirstOrDefault() + "-" + dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == proposalViewModel.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_RD_NAME).FirstOrDefault();
                //objProposal.IMS_PARTIAL_LEN = proposalViewModel.IMS_PARTIAL_LEN;
                //objProposal.IMS_CC_LENGTH = proposalViewModel.IMS_CC_LENGTH;
                //objProposal.IMS_BT_LENGTH = proposalViewModel.IMS_BT_LENGTH;
                //objProposal.IMS_PAV_LENGTH = proposalViewModel.IMS_PAV_LENGTH.Value;

                //end of change

                //  Additional Change done by shyam
                //  Copy Habitations 
                if (dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == proposalViewModel.IMS_PR_ROAD_CODE).Select(a => a.IMS_STAGE_PHASE).First() == "S1")
                {
                    /// Check if Stage II Proposal is present for this Stage I Proposal
                    if (dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_STAGED_ROAD_ID == proposalViewModel.IMS_PR_ROAD_CODE).Any())
                    {
                        var stage2Roads = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_STAGED_ROAD_ID == proposalViewModel.IMS_PR_ROAD_CODE).Select(a => a.IMS_PR_ROAD_CODE).ToList();

                        foreach (var item in stage2Roads)
                        {
                            CopyHabitationDetails(proposalViewModel.IMS_PR_ROAD_CODE, item);
                            IMS_SANCTIONED_PROJECTS stage2Proposal = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == proposalViewModel.IMS_PR_ROAD_CODE).FirstOrDefault();
                            stage2Proposal.PLAN_CN_ROAD_CODE = proposalViewModel.PLAN_CN_ROAD_CODE;
                            stage2Proposal.USERID = PMGSYSession.Current.UserId;
                            stage2Proposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(stage2Proposal).State = System.Data.Entity.EntityState.Modified;;
                            dbContext.SaveChanges();
                        }
                    }
                }

                #region FUND_SHARING_RATIO_PMGSY_SCHEME_1

                objProposal.IMS_STATE_SHARE_2015 = proposalViewModel.IMS_STATE_SHARE_2015;
                objProposal.IMS_MORD_SHARE_2015 = proposalViewModel.IMS_MORD_SHARE_2015;
                objProposal.IMS_SHARE_PERCENT_2015 = proposalViewModel.IMS_SHARE_PERCENT_2015;

                #endregion

                objProposal.USERID = PMGSYSession.Current.UserId;
                objProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(objProposal).State = System.Data.Entity.EntityState.Modified;
                dbContext.SaveChanges();
                return string.Empty;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateUnlockedProposedDAL(DbUpdateException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateUnlockedProposedDAL(OptimisticConcurrencyException ex)");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateUnlockedProposedDAL()");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string CopyHabitationsonConvertingStage1toStage2DAL(int stage1RoadCode, int stage2RoadCode)
        {
            try
            {
                var benefitedHabsStage2 = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == stage2RoadCode).Select(x => x.MAST_HAB_CODE).ToList();
                if (benefitedHabsStage2 != null)
                {
                    foreach (var item in benefitedHabsStage2)
                    {
                        IMS_BENEFITED_HABS benHabs = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == item).FirstOrDefault();
                        dbContext.IMS_BENEFITED_HABS.Remove(benHabs);
                        dbContext.SaveChanges();
                    }
                }

                var benefitedHabs = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == stage1RoadCode).ToList();
                foreach (var item in benefitedHabs)
                {
                    IMS_BENEFITED_HABS benHabMaster = new IMS_BENEFITED_HABS();
                    benHabMaster.IMS_PR_ROAD_CODE = stage2RoadCode;
                    benHabMaster.MAST_HAB_CODE = item.MAST_HAB_CODE;
                    benHabMaster.MAST_CLUSTER_CODE = null;
                    benHabMaster.HAB_INCLUDED = "N";
                    benHabMaster.USERID = PMGSYSession.Current.UserId;
                    benHabMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.IMS_BENEFITED_HABS.Add(benHabMaster);
                    dbContext.SaveChanges();
                }
                return string.Empty;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "CopyHabitationsonConvertingStage1toStage2DAL");
                return string.Empty;
            }
        }

        /// <summary>
        /// DPIU Finalize the Unlocked Proposal, 
        /// Function is not in Use. 
        /// Because Lock & Finalize Proposal functionality is Removed
        /// On Click of Update, all Changes will be finalized
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        /// 
        public string DPIUFinalizeUnlockedProposalDAL(int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_sanctioned_project = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);
                /// Only Lock the Propsoal                
                ims_sanctioned_project.IMS_LOCK_STATUS = "Y";
                ims_sanctioned_project.USERID = PMGSYSession.Current.UserId;
                ims_sanctioned_project.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(ims_sanctioned_project).State = System.Data.Entity.EntityState.Modified;;

                // Unlock By M - Mord Unlock
                //if (dbContext.IMS_LOCK_DETAILS.Where(a => a.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && a.IMS_UNLOCK_BY == "M").Any())
                //{
                //    IMS_LOCK_DETAILS ims_lock_details = dbContext.IMS_LOCK_DETAILS.Where(a => a.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE
                //                                        && a.IMS_TRANSACTION_NO == (dbContext.IMS_LOCK_DETAILS.Where(b => b.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE && a.IMS_UNLOCK_BY == "M").Max(b => b.IMS_TRANSACTION_NO))
                //                                        ).First();
                //    ims_lock_details.IMS_DATA_FINALIZED = "Y";
                //    // M - Manual Unlock
                //    ims_lock_details.IMS_UNLOCK_BY = "M";
                //    dbContext.Entry(ims_lock_details).State = System.Data.Entity.EntityState.Modified;;
                //}
                //dbContext.SaveChanges();
                /// Check if it is Stage I Proposal                 

                if (dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).Select(a => a.IMS_STAGE_PHASE).First() == "S1")
                {
                    /// Check if Stage II Proposal is there for this Stage I Proposal
                    if (dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_STAGED_ROAD_ID == IMS_PR_ROAD_CODE).Any())
                    {
                        var stage2Roads = dbContext.IMS_SANCTIONED_PROJECTS.Where(a => a.IMS_STAGED_ROAD_ID == IMS_PR_ROAD_CODE).Select(a => a.IMS_PR_ROAD_CODE).ToList();

                        foreach (var item in stage2Roads)
                        {
                            CopyHabitationDetails(IMS_PR_ROAD_CODE, item);
                        }
                    }
                }
                return string.Empty;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DPIUFinalizeUnlockedProposalDAL()");
                return "An Error Occurred While Processing Your Request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region REVISION

        /// <summary>
        /// returns the model with revision details
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public RevisedCostLengthViewModel GetOldRevisedCostLengthDAL(int proposalCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                RevisedCostLengthViewModel proposalModel = new RevisedCostLengthViewModel();
                IMS_SANCTIONED_PROJECTS sancMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                proposalModel.IMS_OLD_PAV_COST = sancMaster.IMS_SANCTIONED_PAV_AMT;
                proposalModel.IMS_NEW_PAV_COST = sancMaster.IMS_SANCTIONED_PAV_AMT;
                proposalModel.IMS_NEW_CD_COST = sancMaster.IMS_SANCTIONED_CD_AMT;
                proposalModel.IMS_OLD_CD_COST = sancMaster.IMS_SANCTIONED_CD_AMT;
                proposalModel.IMS_NEW_PW_COST = sancMaster.IMS_SANCTIONED_PW_AMT;
                proposalModel.IMS_OLD_PW_COST = sancMaster.IMS_SANCTIONED_PW_AMT;
                proposalModel.IMS_OLD_OW_COST = sancMaster.IMS_SANCTIONED_OW_AMT;
                proposalModel.IMS_NEW_OW_COST = sancMaster.IMS_SANCTIONED_OW_AMT;
                proposalModel.IMS_NEW_RS_COST = sancMaster.IMS_SANCTIONED_RS_AMT;
                proposalModel.IMS_OLD_RS_COST = sancMaster.IMS_SANCTIONED_RS_AMT;
                proposalModel.IMS_NEW_MAINT1 = sancMaster.IMS_SANCTIONED_MAN_AMT1;
                proposalModel.IMS_NEW_MAINT2 = sancMaster.IMS_SANCTIONED_MAN_AMT2;
                proposalModel.IMS_NEW_MAINT3 = sancMaster.IMS_SANCTIONED_MAN_AMT3;
                proposalModel.IMS_NEW_MAINT4 = sancMaster.IMS_SANCTIONED_MAN_AMT4;
                proposalModel.IMS_NEW_MAINT5 = sancMaster.IMS_SANCTIONED_MAN_AMT5;
                proposalModel.IMS_OLD_MAINT1 = sancMaster.IMS_SANCTIONED_MAN_AMT1;
                proposalModel.IMS_OLD_MAINT2 = sancMaster.IMS_SANCTIONED_MAN_AMT2;
                proposalModel.IMS_OLD_MAINT3 = sancMaster.IMS_SANCTIONED_MAN_AMT3;
                proposalModel.IMS_OLD_MAINT4 = sancMaster.IMS_SANCTIONED_MAN_AMT4;
                proposalModel.IMS_OLD_MAINT5 = sancMaster.IMS_SANCTIONED_MAN_AMT5;
                proposalModel.Operation = "A";
                proposalModel.ProposalType = sancMaster.IMS_PROPOSAL_TYPE;
                proposalModel.IMS_PR_ROAD_CODE = sancMaster.IMS_PR_ROAD_CODE;
                proposalModel.UpgradeConnect = sancMaster.IMS_UPGRADE_CONNECT;
                proposalModel.SharePercent = sancMaster.IMS_SHARE_PERCENT;
                if (sancMaster.IMS_PROPOSAL_TYPE == "L")
                {
                    proposalModel.IMS_NEW_BW_COST = sancMaster.IMS_SANCTIONED_BW_AMT;
                    proposalModel.IMS_OLD_BW_COST = sancMaster.IMS_SANCTIONED_BW_AMT;
                    proposalModel.IMS_NEW_BS_COST = sancMaster.IMS_SANCTIONED_BS_AMT;
                    proposalModel.IMS_OLD_BS_COST = sancMaster.IMS_SANCTIONED_BS_AMT;
                    proposalModel.IMS_NEW_LENGTH = sancMaster.IMS_BRIDGE_LENGTH.Value;
                    proposalModel.IMS_OLD_LENGTH = sancMaster.IMS_BRIDGE_LENGTH.Value;
                }
                else
                {
                    proposalModel.IMS_NEW_LENGTH = sancMaster.IMS_PAV_LENGTH;
                    proposalModel.IMS_OLD_LENGTH = sancMaster.IMS_PAV_LENGTH;
                }

                if (PMGSYSession.Current.PMGSYScheme == 2)
                {
                    proposalModel.IMS_OLD_FC_COST = (Decimal)(sancMaster.IMS_SANCTIONED_FC_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_FC_AMT);
                    proposalModel.IMS_OLD_HS_COST = (Decimal)(sancMaster.IMS_SANCTIONED_HS_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_HS_AMT);
                    proposalModel.IMS_NEW_FC_COST = (Decimal)(sancMaster.IMS_SANCTIONED_FC_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_FC_AMT);
                    proposalModel.IMS_NEW_HS_COST = (Decimal)(sancMaster.IMS_SANCTIONED_HS_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_HS_AMT);
                    proposalModel.IMS_NEW_MAINT6 = (Decimal)(sancMaster.IMS_SANCTIONED_RENEWAL_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_RENEWAL_AMT);
                    proposalModel.IMS_OLD_MAINT6 = (Decimal)(sancMaster.IMS_SANCTIONED_RENEWAL_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_RENEWAL_AMT);
                    if (sancMaster.IMS_SHARE_PERCENT == 1)
                    {
                        proposalModel.Scheme2OldStateShare = (sancMaster.IMS_SANCTIONED_PAV_AMT + sancMaster.IMS_SANCTIONED_OW_AMT + sancMaster.IMS_SANCTIONED_PW_AMT + sancMaster.IMS_SANCTIONED_CD_AMT + (sancMaster.IMS_SANCTIONED_FC_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_FC_AMT.Value)) * Convert.ToDecimal(0.10);
                        proposalModel.Scheme2OldMoRDShare = (sancMaster.IMS_SANCTIONED_PAV_AMT + sancMaster.IMS_SANCTIONED_OW_AMT + sancMaster.IMS_SANCTIONED_PW_AMT + sancMaster.IMS_SANCTIONED_CD_AMT + (sancMaster.IMS_SANCTIONED_FC_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_FC_AMT.Value)) * Convert.ToDecimal(0.90);
                    }
                    else if (sancMaster.IMS_SHARE_PERCENT == 2)
                    {
                        proposalModel.Scheme2OldStateShare = (sancMaster.IMS_SANCTIONED_PAV_AMT + sancMaster.IMS_SANCTIONED_OW_AMT + sancMaster.IMS_SANCTIONED_PW_AMT + sancMaster.IMS_SANCTIONED_CD_AMT + (sancMaster.IMS_SANCTIONED_FC_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_FC_AMT.Value)) * Convert.ToDecimal(0.25);
                        proposalModel.Scheme2OldMoRDShare = (sancMaster.IMS_SANCTIONED_PAV_AMT + sancMaster.IMS_SANCTIONED_OW_AMT + sancMaster.IMS_SANCTIONED_PW_AMT + sancMaster.IMS_SANCTIONED_CD_AMT + (sancMaster.IMS_SANCTIONED_FC_AMT == null ? 0 : sancMaster.IMS_SANCTIONED_FC_AMT.Value)) * Convert.ToDecimal(0.75);
                    }
                }

                return proposalModel;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetOldRevisedCostLengthDAL()");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// populates the list of Revision details of road
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public Array GetRevisedCostLengthListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstRevisedDetails = dbContext.IMS_PROPOSAL_REVISION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.IMS_REVISION_CODE).ToList();

                totalRecords = lstRevisedDetails.Count();

                int maxRevisionCode = dbContext.IMS_PROPOSAL_REVISION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.IMS_REVISION_CODE).Select(m => m.IMS_REVISION_CODE).FirstOrDefault();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "O_CDWORKS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_CD_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_OTHER_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_OW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_PAV_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_PAV_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_PW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_PW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_RS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_RS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_CDWORKS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_CD_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_OTHER_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_OW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_PAV_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_PAV_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_PW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_PW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_RS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_RS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_REVISION_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "O_CDWORKS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_CD_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_OTHER_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_OW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_PAV_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_PAV_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_PW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_PW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "O_RS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_RS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_CDWORKS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_CD_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_OTHER_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_OW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_PAV_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_PAV_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_PW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_PW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "N_RS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_RS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_REVISION_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_REVISION_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = lstRevisedDetails.Select(m => new
                {
                    m.IMS_NEW_BS_COST,
                    m.IMS_NEW_BW_COST,
                    m.IMS_NEW_CD_COST,
                    m.IMS_NEW_LENGTH,
                    m.IMS_NEW_MAINT1,
                    m.IMS_NEW_MAINT2,
                    m.IMS_NEW_MAINT3,
                    m.IMS_NEW_MAINT4,
                    m.IMS_NEW_MAINT5,
                    m.IMS_NEW_OW_COST,
                    m.IMS_NEW_PAV_COST,
                    m.IMS_NEW_PW_COST,
                    m.IMS_NEW_RS_COST,
                    m.IMS_OLD_BS_COST,
                    m.IMS_OLD_BW_COST,
                    m.IMS_OLD_CD_COST,
                    m.IMS_OLD_LENGTH,
                    m.IMS_OLD_MAINT1,
                    m.IMS_OLD_MAINT2,
                    m.IMS_OLD_MAINT3,
                    m.IMS_OLD_MAINT4,
                    m.IMS_OLD_MAINT5,
                    m.IMS_OLD_OW_COST,
                    m.IMS_OLD_PAV_COST,
                    m.IMS_OLD_PW_COST,
                    m.IMS_OLD_RS_COST,
                    m.IMS_PR_ROAD_CODE,
                    m.IMS_REVISION_CODE,
                    m.IMS_REVISION_DATE,
                    m.IMS_REVISION_STATUS
                }).ToArray();

                return result.Select(m => new
                {
                    //id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.IMS_OLD_CD_COST == null?string.Empty:m.IMS_OLD_CD_COST.ToString(),
                        m.IMS_NEW_CD_COST == null?string.Empty:m.IMS_NEW_CD_COST.ToString(),
                        m.IMS_OLD_OW_COST == null?string.Empty:m.IMS_OLD_OW_COST.ToString(),
                        m.IMS_NEW_OW_COST == null?string.Empty:m.IMS_NEW_OW_COST.ToString(),
                        m.IMS_OLD_PAV_COST == null?string.Empty:m.IMS_OLD_PAV_COST.ToString(),
                        m.IMS_NEW_PAV_COST == null?string.Empty:m.IMS_NEW_PAV_COST.ToString(),
                        m.IMS_OLD_PW_COST == null?string.Empty:m.IMS_OLD_PW_COST.ToString(),
                        m.IMS_NEW_PW_COST == null?string.Empty:m.IMS_NEW_PW_COST.ToString(),
                        m.IMS_OLD_RS_COST == null?string.Empty:m.IMS_OLD_RS_COST.ToString(),
                        m.IMS_NEW_RS_COST == null?string.Empty:m.IMS_NEW_RS_COST.ToString(),
                        m.IMS_OLD_MAINT1 == null?string.Empty:m.IMS_OLD_MAINT1.ToString(),
                        m.IMS_NEW_MAINT1 == null?string.Empty:m.IMS_NEW_MAINT1.ToString(),
                        m.IMS_OLD_MAINT2 == null?string.Empty:m.IMS_OLD_MAINT2.ToString(),
                        m.IMS_NEW_MAINT2 == null?string.Empty:m.IMS_NEW_MAINT2.ToString(),
                        m.IMS_OLD_MAINT3 == null?string.Empty:m.IMS_OLD_MAINT3.ToString(),
                        m.IMS_NEW_MAINT3 == null?string.Empty:m.IMS_NEW_MAINT3.ToString(),
                        m.IMS_OLD_MAINT4 == null?string.Empty:m.IMS_OLD_MAINT4.ToString(),
                        m.IMS_NEW_MAINT4 == null?string.Empty:m.IMS_NEW_MAINT4.ToString(),
                        m.IMS_OLD_MAINT5 == null?string.Empty:m.IMS_OLD_MAINT5.ToString(),
                        m.IMS_NEW_MAINT5 == null?string.Empty:m.IMS_NEW_MAINT5.ToString(),
                        m.IMS_OLD_LENGTH == null?string.Empty:m.IMS_OLD_LENGTH.ToString(),
                        m.IMS_NEW_LENGTH == null?string.Empty:m.IMS_NEW_LENGTH.ToString(),
                        //m.IMS_OLD_BS_COST == null?string.Empty:m.IMS_OLD_BS_COST.ToString(),
                        //m.IMS_OLD_BW_COST == null?string.Empty:m.IMS_OLD_BW_COST.ToString(),
                        //m.IMS_NEW_BS_COST == null?string.Empty:m.IMS_NEW_BS_COST.ToString(),
                        //m.IMS_NEW_BW_COST == null?string.Empty:m.IMS_NEW_BW_COST.ToString(),
                        m.IMS_REVISION_CODE == maxRevisionCode?"<a href='#' title='Click here to edit Revision Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRevisionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim() ,"RevisionCode = "+m.IMS_REVISION_CODE.ToString()}) +"'); return false;'>View Execution Details</a>":"<span>-</span>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetRevisedCostLengthListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// populates the list of revision details of lsb
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public Array GetRevisionBridgeListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstRevisedDetails = dbContext.IMS_PROPOSAL_REVISION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.IMS_REVISION_CODE).ToList();

                totalRecords = lstRevisedDetails.Count();

                int maxRevisionCode = dbContext.IMS_PROPOSAL_REVISION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.IMS_REVISION_CODE).Select(m => m.IMS_REVISION_CODE).FirstOrDefault();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_OLD_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_BS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_BS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_BW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_NEW_BW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_BS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_BS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_BW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderBy(m => m.IMS_OLD_BW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_REVISION_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "IMS_OLD_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT1":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT2":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT2).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT3":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT3).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT4":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT4).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_MAINT5":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_MAINT5).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_LENGTH":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_BS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_BS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_NEW_BW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_NEW_BW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_BS_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_BS_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            case "IMS_OLD_BW_COST":
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_OLD_BW_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_REVISION_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstRevisedDetails = lstRevisedDetails.OrderByDescending(m => m.IMS_REVISION_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                var result = lstRevisedDetails.Select(m => new
                {
                    m.IMS_NEW_BS_COST,
                    m.IMS_NEW_BW_COST,
                    m.IMS_NEW_LENGTH,
                    m.IMS_NEW_MAINT1,
                    m.IMS_NEW_MAINT2,
                    m.IMS_NEW_MAINT3,
                    m.IMS_NEW_MAINT4,
                    m.IMS_NEW_MAINT5,

                    m.IMS_OLD_BS_COST,
                    m.IMS_OLD_BW_COST,
                    m.IMS_OLD_LENGTH,
                    m.IMS_OLD_MAINT1,
                    m.IMS_OLD_MAINT2,
                    m.IMS_OLD_MAINT3,
                    m.IMS_OLD_MAINT4,
                    m.IMS_OLD_MAINT5,
                    m.IMS_PR_ROAD_CODE,
                    m.IMS_REVISION_CODE,
                    m.IMS_REVISION_DATE,
                    m.IMS_REVISION_STATUS
                }).ToArray();

                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        
                        m.IMS_OLD_BS_COST == null?string.Empty:m.IMS_OLD_BS_COST.ToString(),
                        m.IMS_NEW_BS_COST == null?string.Empty:m.IMS_NEW_BS_COST.ToString(),
                        m.IMS_OLD_BW_COST == null?string.Empty:m.IMS_OLD_BW_COST.ToString(),
                        m.IMS_NEW_BW_COST == null?string.Empty:m.IMS_NEW_BW_COST.ToString(),
                        m.IMS_OLD_LENGTH == null?string.Empty:m.IMS_OLD_LENGTH.ToString(),
                        m.IMS_NEW_LENGTH == null?string.Empty:m.IMS_NEW_LENGTH.ToString(),
                        m.IMS_REVISION_CODE == maxRevisionCode?"<a href='#' title='Click here to edit Revision Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditRevisionDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim() ,"RevisionCode = "+m.IMS_REVISION_CODE.ToString()}) +"'); return false;'>View Execution Details</a>":"<span>-</span>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetRevisionBridgeListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// saves the revision details
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddRevisedCostLengthDAL(RevisedCostLengthViewModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    IMS_PROPOSAL_REVISION revisionMaster = new IMS_PROPOSAL_REVISION();
                    if (dbContext.IMS_PROPOSAL_REVISION.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE))
                    {
                        revisionMaster.IMS_REVISION_CODE = dbContext.IMS_PROPOSAL_REVISION.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE).Max(m => m.IMS_REVISION_CODE) + 1;
                    }
                    else
                    {
                        revisionMaster.IMS_REVISION_CODE = (Int32)1;
                    }
                    revisionMaster.IMS_NEW_BS_COST = model.IMS_NEW_BS_COST;
                    revisionMaster.IMS_NEW_BW_COST = model.IMS_NEW_BW_COST;
                    revisionMaster.IMS_NEW_CD_COST = model.IMS_NEW_CD_COST;
                    revisionMaster.IMS_NEW_LENGTH = model.IMS_NEW_LENGTH;
                    revisionMaster.IMS_NEW_MAINT1 = model.IMS_NEW_MAINT1;
                    revisionMaster.IMS_NEW_MAINT2 = model.IMS_NEW_MAINT2;
                    revisionMaster.IMS_NEW_MAINT3 = model.IMS_NEW_MAINT3;
                    revisionMaster.IMS_NEW_MAINT4 = model.IMS_NEW_MAINT4;
                    revisionMaster.IMS_NEW_MAINT5 = model.IMS_NEW_MAINT5;
                    revisionMaster.IMS_NEW_OW_COST = model.IMS_NEW_OW_COST;
                    revisionMaster.IMS_NEW_PAV_COST = model.IMS_NEW_PAV_COST;
                    revisionMaster.IMS_NEW_PW_COST = model.IMS_NEW_PW_COST;
                    revisionMaster.IMS_NEW_RS_COST = model.IMS_NEW_RS_COST;
                    revisionMaster.IMS_OLD_BS_COST = model.IMS_OLD_BS_COST;
                    revisionMaster.IMS_OLD_BW_COST = model.IMS_OLD_BW_COST;
                    revisionMaster.IMS_OLD_CD_COST = model.IMS_OLD_CD_COST;
                    revisionMaster.IMS_OLD_LENGTH = model.IMS_OLD_LENGTH;
                    revisionMaster.IMS_OLD_MAINT1 = model.IMS_OLD_MAINT1;
                    revisionMaster.IMS_OLD_MAINT2 = model.IMS_OLD_MAINT2;
                    revisionMaster.IMS_OLD_MAINT3 = model.IMS_OLD_MAINT3;
                    revisionMaster.IMS_OLD_MAINT4 = model.IMS_OLD_MAINT4;
                    revisionMaster.IMS_OLD_MAINT5 = model.IMS_OLD_MAINT5;
                    revisionMaster.IMS_OLD_OW_COST = model.IMS_OLD_OW_COST;
                    revisionMaster.IMS_OLD_PAV_COST = model.IMS_OLD_PAV_COST;
                    revisionMaster.IMS_OLD_PW_COST = model.IMS_OLD_PW_COST;
                    revisionMaster.IMS_OLD_RS_COST = model.IMS_OLD_RS_COST;
                    revisionMaster.IMS_PR_ROAD_CODE = model.IMS_PR_ROAD_CODE;
                    revisionMaster.IMS_REVISION_DATE = System.DateTime.Now;
                    revisionMaster.IMS_REVISION_STATUS = "Y";
                    if (PMGSYSession.Current.PMGSYScheme == 2)
                    {
                        revisionMaster.IMS_OLD_FC_COST = model.IMS_OLD_FC_COST;
                        revisionMaster.IMS_OLD_HS_COST = model.IMS_OLD_HS_COST;
                        revisionMaster.IMS_OLD_MAINT6 = model.IMS_OLD_MAINT6;
                        revisionMaster.IMS_NEW_FC_COST = model.IMS_NEW_FC_COST;
                        revisionMaster.IMS_NEW_HS_COST = model.IMS_NEW_HS_COST;
                        revisionMaster.IMS_NEW_MAINT6 = model.IMS_NEW_MAINT6;
                    }
                    //revisionMaster.USERID = PMGSYSession.Current.UserId;
                    //revisionMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.IMS_PROPOSAL_REVISION.Add(revisionMaster);
                    dbContext.SaveChanges();

                    IMS_SANCTIONED_PROJECTS sancMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.IMS_PR_ROAD_CODE);
                    if (sancMaster.IMS_PROPOSAL_TYPE == "P")
                    {
                        sancMaster.IMS_SANCTIONED_PAV_AMT = model.IMS_NEW_PAV_COST;
                        sancMaster.IMS_SANCTIONED_MAN_AMT1 = model.IMS_NEW_MAINT1;
                        sancMaster.IMS_SANCTIONED_MAN_AMT2 = model.IMS_NEW_MAINT2;
                        sancMaster.IMS_SANCTIONED_MAN_AMT3 = model.IMS_NEW_MAINT3;
                        sancMaster.IMS_SANCTIONED_MAN_AMT4 = model.IMS_NEW_MAINT4;
                        sancMaster.IMS_SANCTIONED_MAN_AMT5 = model.IMS_NEW_MAINT5;
                        sancMaster.IMS_SANCTIONED_OW_AMT = model.IMS_NEW_OW_COST;
                        sancMaster.IMS_SANCTIONED_PW_AMT = model.IMS_NEW_PW_COST;
                        if (PMGSYSession.Current.PMGSYScheme == 1)
                        {
                            sancMaster.IMS_SANCTIONED_RS_AMT = model.IMS_NEW_RS_COST;
                        }
                        else if (PMGSYSession.Current.PMGSYScheme == 2)
                        {
                            if (sancMaster.IMS_SHARE_PERCENT == 1)
                            {
                                sancMaster.IMS_SANCTIONED_RS_AMT = (model.IMS_NEW_PAV_COST + model.IMS_NEW_PW_COST + model.IMS_NEW_OW_COST + model.IMS_NEW_CD_COST + model.IMS_NEW_FC_COST) * Convert.ToDecimal(0.10);
                            }
                            else if (sancMaster.IMS_SHARE_PERCENT == 2)
                            {
                                sancMaster.IMS_SANCTIONED_RS_AMT = (model.IMS_NEW_PAV_COST + model.IMS_NEW_PW_COST + model.IMS_NEW_OW_COST + model.IMS_NEW_CD_COST + model.IMS_NEW_FC_COST) * Convert.ToDecimal(0.25);
                            }
                        }
                        sancMaster.IMS_SANCTIONED_CD_AMT = model.IMS_NEW_CD_COST;
                        sancMaster.IMS_PAV_LENGTH = model.IMS_NEW_LENGTH;
                        if (PMGSYSession.Current.PMGSYScheme == 2)
                        {
                            sancMaster.IMS_SANCTIONED_FC_AMT = model.IMS_NEW_FC_COST;
                            sancMaster.IMS_SANCTIONED_HS_AMT = model.IMS_NEW_HS_COST;
                            sancMaster.IMS_SANCTIONED_RENEWAL_AMT = model.IMS_NEW_MAINT6;
                        }
                        sancMaster.USERID = PMGSYSession.Current.UserId;
                        sancMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(sancMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    else
                    {
                        sancMaster.IMS_BRIDGE_LENGTH = model.IMS_NEW_LENGTH;
                        sancMaster.IMS_SANCTIONED_BS_AMT = model.IMS_NEW_BS_COST;
                        sancMaster.IMS_SANCTIONED_BW_AMT = model.IMS_NEW_BW_COST;
                        sancMaster.USERID = PMGSYSession.Current.UserId;
                        sancMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(sancMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    ts.Complete();
                }
                message = "Revised Cost and length details added successfully";
                return true;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddRevisedCostLengthDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the revision details
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditRevisionDetailsDAL(RevisedCostLengthViewModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    IMS_PROPOSAL_REVISION revisionMaster = dbContext.IMS_PROPOSAL_REVISION.Find(model.IMS_PR_ROAD_CODE, model.IMS_REVISION_CODE);

                    revisionMaster.IMS_NEW_BS_COST = model.IMS_NEW_BS_COST;
                    revisionMaster.IMS_NEW_BW_COST = model.IMS_NEW_BW_COST;
                    revisionMaster.IMS_NEW_CD_COST = model.IMS_NEW_CD_COST;
                    revisionMaster.IMS_NEW_LENGTH = model.IMS_NEW_LENGTH;
                    revisionMaster.IMS_NEW_MAINT1 = model.IMS_NEW_MAINT1;
                    revisionMaster.IMS_NEW_MAINT2 = model.IMS_NEW_MAINT2;
                    revisionMaster.IMS_NEW_MAINT3 = model.IMS_NEW_MAINT3;
                    revisionMaster.IMS_NEW_MAINT4 = model.IMS_NEW_MAINT4;
                    revisionMaster.IMS_NEW_MAINT5 = model.IMS_NEW_MAINT5;
                    revisionMaster.IMS_NEW_OW_COST = model.IMS_NEW_OW_COST;
                    revisionMaster.IMS_NEW_PAV_COST = model.IMS_NEW_PAV_COST;
                    revisionMaster.IMS_NEW_PW_COST = model.IMS_NEW_PW_COST;
                    revisionMaster.IMS_NEW_RS_COST = model.IMS_NEW_RS_COST;
                    revisionMaster.IMS_OLD_BS_COST = model.IMS_OLD_BS_COST;
                    revisionMaster.IMS_OLD_BW_COST = model.IMS_OLD_BW_COST;
                    revisionMaster.IMS_OLD_CD_COST = model.IMS_OLD_CD_COST;
                    revisionMaster.IMS_OLD_LENGTH = model.IMS_OLD_LENGTH;
                    revisionMaster.IMS_OLD_MAINT1 = model.IMS_OLD_MAINT1;
                    revisionMaster.IMS_OLD_MAINT2 = model.IMS_OLD_MAINT2;
                    revisionMaster.IMS_OLD_MAINT3 = model.IMS_OLD_MAINT3;
                    revisionMaster.IMS_OLD_MAINT4 = model.IMS_OLD_MAINT4;
                    revisionMaster.IMS_OLD_MAINT5 = model.IMS_OLD_MAINT5;
                    revisionMaster.IMS_OLD_OW_COST = model.IMS_OLD_OW_COST;
                    revisionMaster.IMS_OLD_PAV_COST = model.IMS_OLD_PAV_COST;
                    revisionMaster.IMS_OLD_PW_COST = model.IMS_OLD_PW_COST;
                    revisionMaster.IMS_OLD_RS_COST = model.IMS_OLD_RS_COST;


                    if (PMGSYSession.Current.PMGSYScheme == 2)
                    {
                        revisionMaster.IMS_OLD_FC_COST = model.IMS_OLD_FC_COST;
                        revisionMaster.IMS_OLD_HS_COST = model.IMS_OLD_HS_COST;
                        revisionMaster.IMS_OLD_MAINT6 = model.IMS_OLD_MAINT6;
                        revisionMaster.IMS_NEW_FC_COST = model.IMS_NEW_FC_COST;
                        revisionMaster.IMS_NEW_HS_COST = model.IMS_NEW_HS_COST;
                        revisionMaster.IMS_NEW_MAINT6 = model.IMS_NEW_MAINT6;
                    }
                    revisionMaster.IMS_REVISION_DATE = System.DateTime.Now;
                    revisionMaster.IMS_REVISION_STATUS = "Y";
                    dbContext.Entry(revisionMaster).State = EntityState.Modified;
                    dbContext.SaveChanges();

                    IMS_SANCTIONED_PROJECTS sancMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.IMS_PR_ROAD_CODE);
                    if (sancMaster.IMS_PROPOSAL_TYPE == "P")
                    {
                        sancMaster.IMS_SANCTIONED_PAV_AMT = model.IMS_NEW_PAV_COST;
                        sancMaster.IMS_SANCTIONED_MAN_AMT1 = model.IMS_NEW_MAINT1;
                        sancMaster.IMS_SANCTIONED_MAN_AMT2 = model.IMS_NEW_MAINT2;
                        sancMaster.IMS_SANCTIONED_MAN_AMT3 = model.IMS_NEW_MAINT3;
                        sancMaster.IMS_SANCTIONED_MAN_AMT4 = model.IMS_NEW_MAINT4;
                        sancMaster.IMS_SANCTIONED_MAN_AMT5 = model.IMS_NEW_MAINT5;
                        sancMaster.IMS_SANCTIONED_OW_AMT = model.IMS_NEW_OW_COST;
                        sancMaster.IMS_SANCTIONED_PW_AMT = model.IMS_NEW_PW_COST;
                        if (PMGSYSession.Current.PMGSYScheme == 1)
                        {
                            sancMaster.IMS_SANCTIONED_RS_AMT = model.IMS_NEW_RS_COST;
                        }
                        else if (PMGSYSession.Current.PMGSYScheme == 2)
                        {
                            if (sancMaster.IMS_SHARE_PERCENT == 1)
                            {
                                sancMaster.IMS_SANCTIONED_RS_AMT = (model.IMS_NEW_PAV_COST + model.IMS_NEW_PW_COST + model.IMS_NEW_OW_COST + model.IMS_NEW_CD_COST + model.IMS_NEW_FC_COST) * Convert.ToDecimal(0.10);
                            }
                            else if (sancMaster.IMS_SHARE_PERCENT == 2)
                            {
                                sancMaster.IMS_SANCTIONED_RS_AMT = (model.IMS_NEW_PAV_COST + model.IMS_NEW_PW_COST + model.IMS_NEW_OW_COST + model.IMS_NEW_CD_COST + model.IMS_NEW_FC_COST) * Convert.ToDecimal(0.25);
                            }
                        }

                        sancMaster.IMS_SANCTIONED_CD_AMT = model.IMS_NEW_CD_COST;
                        if (PMGSYSession.Current.PMGSYScheme == 2)
                        {
                            sancMaster.IMS_SANCTIONED_FC_AMT = model.IMS_NEW_FC_COST;
                            sancMaster.IMS_SANCTIONED_HS_AMT = model.IMS_NEW_HS_COST;
                            sancMaster.IMS_SANCTIONED_RENEWAL_AMT = model.IMS_NEW_MAINT6;
                        }
                        sancMaster.IMS_PAV_LENGTH = model.IMS_NEW_LENGTH;
                        sancMaster.USERID = PMGSYSession.Current.UserId;
                        sancMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(sancMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    else
                    {
                        sancMaster.IMS_BRIDGE_LENGTH = model.IMS_NEW_LENGTH;
                        sancMaster.IMS_SANCTIONED_BS_AMT = model.IMS_NEW_BS_COST;
                        sancMaster.IMS_SANCTIONED_BW_AMT = model.IMS_NEW_BW_COST;
                        sancMaster.USERID = PMGSYSession.Current.UserId;
                        sancMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(sancMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    ts.Complete();
                }
                message = "Revised Cost and length details updated successfully";
                return true;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditRevisionDetailsDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns model for updating the revision details
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <param name="revisionCode"></param>
        /// <returns></returns>
        public RevisedCostLengthViewModel GetRevisionDetailsDAL(int proposalCode, int revisionCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                RevisedCostLengthViewModel model = new RevisedCostLengthViewModel();
                string proposalType = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_PROPOSAL_TYPE).FirstOrDefault();
                Int16? sharePercent = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_SHARE_PERCENT).FirstOrDefault();
                IMS_PROPOSAL_REVISION revisionMaster = dbContext.IMS_PROPOSAL_REVISION.Find(proposalCode, revisionCode);
                model.IMS_NEW_BS_COST = revisionMaster.IMS_NEW_BS_COST;
                model.IMS_NEW_BW_COST = revisionMaster.IMS_NEW_BW_COST;
                model.IMS_NEW_CD_COST = revisionMaster.IMS_NEW_CD_COST;
                model.IMS_NEW_LENGTH = revisionMaster.IMS_NEW_LENGTH;
                model.IMS_NEW_MAINT1 = revisionMaster.IMS_NEW_MAINT1;
                model.IMS_NEW_MAINT2 = revisionMaster.IMS_NEW_MAINT2;
                model.IMS_NEW_MAINT3 = revisionMaster.IMS_NEW_MAINT3;
                model.IMS_NEW_MAINT4 = revisionMaster.IMS_NEW_MAINT4;
                model.IMS_NEW_MAINT5 = revisionMaster.IMS_NEW_MAINT5;
                model.IMS_NEW_OW_COST = revisionMaster.IMS_NEW_OW_COST;
                model.IMS_NEW_PAV_COST = revisionMaster.IMS_NEW_PAV_COST;
                model.IMS_NEW_PW_COST = revisionMaster.IMS_NEW_PW_COST;
                model.IMS_NEW_RS_COST = revisionMaster.IMS_NEW_RS_COST;
                model.IMS_OLD_BS_COST = revisionMaster.IMS_OLD_BS_COST;
                model.IMS_OLD_BW_COST = revisionMaster.IMS_OLD_BW_COST;
                model.IMS_OLD_CD_COST = revisionMaster.IMS_OLD_CD_COST;
                model.IMS_OLD_LENGTH = revisionMaster.IMS_OLD_LENGTH;
                model.IMS_OLD_MAINT1 = revisionMaster.IMS_OLD_MAINT1;
                model.IMS_OLD_MAINT2 = revisionMaster.IMS_OLD_MAINT2;
                model.IMS_OLD_MAINT3 = revisionMaster.IMS_OLD_MAINT3;
                model.IMS_OLD_MAINT4 = revisionMaster.IMS_OLD_MAINT4;
                model.IMS_OLD_MAINT5 = revisionMaster.IMS_OLD_MAINT5;
                model.IMS_OLD_OW_COST = revisionMaster.IMS_OLD_OW_COST;
                model.IMS_OLD_PAV_COST = revisionMaster.IMS_OLD_PAV_COST;
                model.IMS_OLD_PW_COST = revisionMaster.IMS_OLD_PAV_COST;
                model.IMS_OLD_RS_COST = revisionMaster.IMS_OLD_RS_COST;
                model.IMS_PR_ROAD_CODE = revisionMaster.IMS_PR_ROAD_CODE;
                model.IMS_REVISION_CODE = revisionMaster.IMS_REVISION_CODE;
                model.IMS_REVISION_DATE = new CommonFunctions().GetDateTimeToString(revisionMaster.IMS_REVISION_DATE);
                model.IMS_REVISION_STATUS = revisionMaster.IMS_REVISION_STATUS;
                model.Operation = "E";
                model.ProposalType = proposalType;
                model.SharePercent = sharePercent;
                if (PMGSYSession.Current.PMGSYScheme == 2)
                {
                    model.IMS_NEW_MAINT6 = (Decimal)revisionMaster.IMS_NEW_MAINT6;
                    model.IMS_OLD_MAINT6 = (Decimal)revisionMaster.IMS_OLD_MAINT6;
                    model.IMS_NEW_FC_COST = (Decimal)revisionMaster.IMS_NEW_FC_COST;
                    model.IMS_NEW_HS_COST = (Decimal)revisionMaster.IMS_NEW_HS_COST;
                    model.IMS_OLD_FC_COST = (Decimal)revisionMaster.IMS_OLD_FC_COST;
                    model.IMS_OLD_HS_COST = (Decimal)revisionMaster.IMS_OLD_HS_COST;
                    if (sharePercent == 1)
                    {
                        model.Scheme2OldStateShare = (revisionMaster.IMS_OLD_PAV_COST + revisionMaster.IMS_OLD_OW_COST + revisionMaster.IMS_OLD_PW_COST + revisionMaster.IMS_OLD_CD_COST + (revisionMaster.IMS_OLD_FC_COST == null ? 0 : revisionMaster.IMS_OLD_FC_COST.Value)) * Convert.ToDecimal(0.10);
                        model.Scheme2OldMoRDShare = (revisionMaster.IMS_OLD_PAV_COST + revisionMaster.IMS_OLD_OW_COST + revisionMaster.IMS_OLD_PW_COST + revisionMaster.IMS_OLD_CD_COST + (revisionMaster.IMS_OLD_FC_COST == null ? 0 : revisionMaster.IMS_OLD_FC_COST.Value)) * Convert.ToDecimal(0.90);
                    }
                    else if (sharePercent == 2)
                    {
                        model.Scheme2OldStateShare = (revisionMaster.IMS_OLD_PAV_COST + revisionMaster.IMS_OLD_OW_COST + revisionMaster.IMS_OLD_PW_COST + revisionMaster.IMS_OLD_CD_COST + (revisionMaster.IMS_OLD_FC_COST == null ? 0 : revisionMaster.IMS_OLD_FC_COST.Value)) * Convert.ToDecimal(0.25);
                        model.Scheme2OldMoRDShare = (revisionMaster.IMS_OLD_PAV_COST + revisionMaster.IMS_OLD_OW_COST + revisionMaster.IMS_OLD_PW_COST + revisionMaster.IMS_OLD_CD_COST + (revisionMaster.IMS_OLD_FC_COST == null ? 0 : revisionMaster.IMS_OLD_FC_COST.Value)) * Convert.ToDecimal(0.75);
                    }
                }


                return model;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetRevisionDetailsDAL()");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the proposal type 
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public string GetProposalType(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.IMS_PROPOSAL_TYPE).FirstOrDefault();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalType()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region TECHNOLOGY

        public List<SelectListItem> PopulateRoadExecutionItemsTechnologywise(int techCode)
        {
            List<SelectListItem> lstItems = new List<SelectListItem>();
            SelectListItem item;
            try
            {
                dbContext = new PMGSYEntities();
                //List<SelectListItem> lstItems = new SelectList(dbContext.MASTER_EXECUTION_ITEM.Where(x => x.MAST_HEAD_TYPE == "R"), "MAST_HEAD_CODE", "MAST_HEAD_DESC").ToList();
                var query = (from exec in dbContext.MASTER_EXECUTION_ITEM
                             join map in dbContext.MAST_TECH_LAYER_MAPPING on exec.MAST_HEAD_CODE equals map.MAST_HEAD_CODE
                             where exec.MAST_HEAD_TYPE == "R" && map.MAST_TECH_CODE == techCode
                             select new
                             {
                                 Text = exec.MAST_HEAD_DESC,
                                 Value = exec.MAST_HEAD_CODE,
                             }).OrderBy(c => c.Value).ToList();
                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text;
                    item.Value = data.Value.ToString();
                    //item.Selected = data.Selected;
                    lstItems.Add(item);
                }

                lstItems.Insert(0, (new SelectListItem { Text = "Select Item", Value = "0" }));
                return lstItems;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulateRoadExecutionItemsTechnologywise()");
                throw ex;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// saves the Technology details
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddTechnologyDetailsDAL(TechnologyDetailsViewModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS sancMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.IMS_PR_ROAD_CODE);
                decimal pavmentLength = sancMaster.IMS_PAV_LENGTH;
                decimal totalPavementLengthEntered = 0;
                //if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE))
                //{
                //    var lstSegments = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE).ToList();
                //    foreach (var item in lstSegments)
                //    {
                //        totalPavementLengthEntered = totalPavementLengthEntered + (item.IMS_END_CHAINAGE - item.IMS_START_CHAINAGE);
                //    }
                //}

                totalPavementLengthEntered = totalPavementLengthEntered + (model.IMS_END_CHAINAGE - model.IMS_START_CHAINAGE);
                if (totalPavementLengthEntered > pavmentLength)
                {
                    message = "Total chainage entered is greater than total pavement length of road.";
                    return false;
                }

                if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE && m.IMS_START_CHAINAGE == model.IMS_START_CHAINAGE && m.IMS_END_CHAINAGE == model.IMS_END_CHAINAGE && m.MAST_TECH_CODE == model.MAST_TECH_CODE && m.MAST_LAYER_CODE == model.MAST_LAYER_CODE))
                {
                    message = "Technology details already entered.";
                    return false;
                }

                IMS_PROPOSAL_TECH techMaster = new IMS_PROPOSAL_TECH();
                if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE))
                {
                    techMaster.IMS_SEGMENT_NO = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE).Max(m => m.IMS_SEGMENT_NO) + 1;
                }
                else
                {
                    techMaster.IMS_SEGMENT_NO = 1;
                }
                techMaster.IMS_CONVERGENCE_TECHNOLOGY = model.convergence;
                techMaster.IMS_END_CHAINAGE = model.IMS_END_CHAINAGE;
                techMaster.IMS_PR_ROAD_CODE = model.IMS_PR_ROAD_CODE;
                techMaster.IMS_START_CHAINAGE = model.IMS_START_CHAINAGE;
                techMaster.MAST_LAYER_CODE = model.MAST_LAYER_CODE;
                techMaster.MAST_TECH_CODE = model.MAST_TECH_CODE;
                techMaster.IMS_TECH_COST = model.IMS_TECH_COST;
                techMaster.IMS_LAYER_COST = model.IMS_LAYER_COST;

                // Added on 01-06-2023 for FDR changes
                // add only if technology selected as FDR Cement Stabilization 
                techMaster.IS_ADDITIVE_USED = model.MAST_TECH_CODE == 64 ? model.Is_Additive_Used : null;
                techMaster.IS_CRACK_RELIEF_LAYER_PROVIDED = model.MAST_TECH_CODE == 64 ? model.Is_CrackReliefLayerProvided : null;

                techMaster.USERID = PMGSYSession.Current.UserId;
                techMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.IMS_PROPOSAL_TECH.Add(techMaster);
                dbContext.SaveChanges();
                message = "Technology details added successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddTechnologyDetailsDAL()");
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the technology details
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool EditTechnologyDetailsDAL(TechnologyDetailsViewModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            Dictionary<string, string> decryptedParameters = null;
            String[] urlParams = null;
            try
            {
                IMS_SANCTIONED_PROJECTS sancMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.IMS_PR_ROAD_CODE);
                decimal pavmentLength = sancMaster.IMS_PAV_LENGTH;
                decimal totalPavementLengthEntered = 0;
                urlParams = model.EncryptedProposalSegmentCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { urlParams[0], urlParams[1], urlParams[2] });
                //if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE))
                //{
                //    var lstSegments = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE).ToList();
                //    foreach (var item in lstSegments)
                //    {
                //        totalPavementLengthEntered = totalPavementLengthEntered + (item.IMS_END_CHAINAGE - item.IMS_START_CHAINAGE);
                //    }
                //}

                int segmentNo = Convert.ToInt32(decryptedParameters["SegmentCode"]);
                IMS_PROPOSAL_TECH master = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE && m.IMS_SEGMENT_NO == segmentNo).FirstOrDefault();
                //totalPavementLengthEntered = totalPavementLengthEntered - (master.IMS_END_CHAINAGE - master.IMS_START_CHAINAGE);
                // the above line commented ON 11-07-2023
                totalPavementLengthEntered = totalPavementLengthEntered + (model.IMS_END_CHAINAGE - model.IMS_START_CHAINAGE);
                if (totalPavementLengthEntered > pavmentLength)
                {
                    message = "Total chainage entered is greater than total pavement length of road.";
                    return false;
                }

                IMS_PROPOSAL_TECH techMaster = new IMS_PROPOSAL_TECH();
                techMaster = dbContext.IMS_PROPOSAL_TECH.Find(Convert.ToInt32(decryptedParameters["ProposalCode"]), Convert.ToInt32(decryptedParameters["SegmentCode"]));
                techMaster.IMS_END_CHAINAGE = model.IMS_END_CHAINAGE;
                techMaster.IMS_START_CHAINAGE = model.IMS_START_CHAINAGE;
                techMaster.MAST_LAYER_CODE = model.MAST_LAYER_CODE;
                techMaster.MAST_TECH_CODE = model.MAST_TECH_CODE;
                techMaster.IMS_TECH_COST = model.IMS_TECH_COST;
                techMaster.IMS_LAYER_COST = model.IMS_LAYER_COST;

                // Added on 01-06-2023 for FDR changes
                // add only if technology selected as FDR Cement Stabilization 
                techMaster.IS_ADDITIVE_USED = model.MAST_TECH_CODE == 64 ? model.Is_Additive_Used : null;
                techMaster.IS_CRACK_RELIEF_LAYER_PROVIDED = model.MAST_TECH_CODE == 64 ? model.Is_CrackReliefLayerProvided : null;

                techMaster.USERID = PMGSYSession.Current.UserId;
                techMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(techMaster).State = EntityState.Modified;
                dbContext.SaveChanges();
                message = "Technology details updated successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "EditTechnologyDetailsDAL()");
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// deletes the technology details
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <param name="segmentCode"></param>
        /// <returns></returns>
        public bool DeleteTechnologyDetails(int proposalCode, int segmentCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_PROPOSAL_TECH techMaster = dbContext.IMS_PROPOSAL_TECH.Find(proposalCode, segmentCode);
                techMaster.USERID = PMGSYSession.Current.UserId;
                techMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.IMS_PROPOSAL_TECH.Remove(techMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteTechnologyDetailsDAL()");
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the technology details for updation
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <param name="segmentCode"></param>
        /// <returns></returns>
        public TechnologyDetailsViewModel GetTechnologyDetails(int proposalCode, int segmentCode)
        {
            dbContext = new PMGSYEntities();
            TechnologyDetailsViewModel model = new TechnologyDetailsViewModel();
            try
            {
                IMS_PROPOSAL_TECH techMaster = dbContext.IMS_PROPOSAL_TECH.Find(proposalCode, segmentCode);
                model.EncryptedProposalSegmentCode = URLEncrypt.EncryptParameters1(new string[] { "ProposalCode=" + techMaster.IMS_PR_ROAD_CODE.ToString().Trim(), "SegmentCode=" + techMaster.IMS_SEGMENT_NO.ToString().Trim() });
                model.IMS_END_CHAINAGE = techMaster.IMS_END_CHAINAGE;
                model.IMS_START_CHAINAGE = techMaster.IMS_START_CHAINAGE;
                model.MAST_LAYER_CODE = techMaster.MAST_LAYER_CODE;
                model.MAST_TECH_CODE = techMaster.MAST_TECH_CODE;
                model.IMS_PR_ROAD_CODE = techMaster.IMS_PR_ROAD_CODE;
                model.IMS_TECH_COST = techMaster.IMS_TECH_COST;
                model.IMS_LAYER_COST = techMaster.IMS_LAYER_COST;
                model.Is_CrackReliefLayerProvided = techMaster.IS_CRACK_RELIEF_LAYER_PROVIDED.ToString().Trim();
                model.Is_Additive_Used = techMaster.IS_ADDITIVE_USED.ToString().Trim();
                model.Operation = "E";
                return model;
            }
            catch (Exception ex)
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of technology details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public Array GetTechnologyDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                //var lstTechnologyDetails = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.IMS_SEGMENT_NO).ToList();
                int maxTechCode = 0;
                var lstTechnologyDetails = (from item in dbContext.IMS_PROPOSAL_TECH
                                            where item.IMS_PR_ROAD_CODE == proposalCode
                                            select new
                                            {
                                                item.IMS_PR_ROAD_CODE,
                                                item.IMS_END_CHAINAGE,
                                                item.IMS_SEGMENT_NO,
                                                item.IMS_START_CHAINAGE,
                                                item.MASTER_EXECUTION_ITEM.MAST_HEAD_DESC,
                                                item.MASTER_TECHNOLOGY.MAST_TECH_NAME,
                                                item.IMS_TECH_COST,
                                                item.IMS_LAYER_COST,
                                                item.MASTER_TECHNOLOGY.MAST_TECH_TYPE
                                            }).OrderByDescending(m => m.IMS_SEGMENT_NO).Distinct();

                totalRecords = lstTechnologyDetails.Count();

                if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    maxTechCode = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.IMS_SEGMENT_NO).ThenByDescending(m => m.MAST_TECH_CODE).ThenByDescending(m => m.MAST_LAYER_CODE).Select(m => m.IMS_SEGMENT_NO).FirstOrDefault();
                }

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_SEGMENT_NO":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "O_CDWORKS_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_START_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_END_CHAINAGE":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_END_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_HEAD_DESC":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_TECH_NAME":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_TECH_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_TECH_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_LAYER_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_LAYER_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "IMS_SEGMENT_NO":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "O_CDWORKS_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_START_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_END_CHAINAGE":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_END_CHAINAGE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_HEAD_DESC":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.MAST_HEAD_DESC).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_TECH_NAME":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.MAST_TECH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_TECH_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_TECH_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_LAYER_COST":
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_LAYER_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstTechnologyDetails = lstTechnologyDetails.OrderByDescending(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstTechnologyDetails = lstTechnologyDetails.OrderBy(m => m.IMS_SEGMENT_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstTechnologyDetails.Select(m => new
                {
                    m.IMS_PR_ROAD_CODE,
                    m.IMS_SEGMENT_NO,
                    m.IMS_END_CHAINAGE,
                    m.IMS_START_CHAINAGE,
                    m.MAST_HEAD_DESC,
                    m.MAST_TECH_NAME,
                    m.IMS_TECH_COST,
                    m.IMS_LAYER_COST,
                    m.MAST_TECH_TYPE
                }).ToArray();

                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        m.IMS_SEGMENT_NO == null?string.Empty:m.IMS_SEGMENT_NO.ToString(),
                        m.IMS_START_CHAINAGE == null?string.Empty:m.IMS_START_CHAINAGE.ToString(),
                        m.IMS_END_CHAINAGE == null?string.Empty:m.IMS_END_CHAINAGE.ToString(),
                        m.IMS_TECH_COST==null?string.Empty:m.IMS_TECH_COST.ToString(),
                        m.IMS_LAYER_COST==null?string.Empty:m.IMS_LAYER_COST.ToString(),
                        m.MAST_HEAD_DESC == null?string.Empty:m.MAST_HEAD_DESC.ToString(),
                        m.MAST_TECH_NAME == null?string.Empty:m.MAST_TECH_NAME.ToString(),
                        m.MAST_TECH_TYPE == "A" ? "IRC Accredited" : "IRC Non Accredited",
                        /*m.IMS_SEGMENT_NO == maxTechCode?*/"<a href='#' title='Click here to edit Technology Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim() ,"SegmentCode = "+m.IMS_SEGMENT_NO.ToString()}) +"'); return false;'>Edit Technology Details</a>"/*:"<span>-</span>"*/,
                        /*m.IMS_SEGMENT_NO == maxTechCode?*/"<a href='#' title='Click here to delete Technology Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteTechnologyDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim() ,"SegmentCode = "+m.IMS_SEGMENT_NO.ToString()}) +"'); return false;'>Delete Technology Details</a>"/*:"<span>-</span>"*/
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetTechnologyDetailsListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the start chainage associated with the latest technology details
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public decimal? GetTechnologyStartChainage(int proposalCode, int techCode, int layerCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.IMS_PROPOSAL_TECH.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    IMS_PROPOSAL_TECH techMaster = dbContext.IMS_PROPOSAL_TECH.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.MAST_TECH_CODE == techCode && m.MAST_LAYER_CODE == layerCode).OrderByDescending(m => m.IMS_SEGMENT_NO).FirstOrDefault();
                    return techMaster.IMS_END_CHAINAGE;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetTechnologyStartChainage()");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Test Result Details

        /// <summary>
        /// Populate Samples 
        /// </summary>
        /// <returns></returns>
        public List<SelectListItem> PopulateSamples()
        {
            List<SelectListItem> lstSamples = new List<SelectListItem>();

            lstSamples.Add(new SelectListItem { Value = "0", Text = "Select Sample" });
            lstSamples.Add(new SelectListItem { Value = "1", Text = "Sample 1" });
            lstSamples.Add(new SelectListItem { Value = "2", Text = "Sample 2" });
            lstSamples.Add(new SelectListItem { Value = "3", Text = "Sample 3" });
            lstSamples.Add(new SelectListItem { Value = "4", Text = "Sample 4" });
            lstSamples.Add(new SelectListItem { Value = "5", Text = "Sample 5" });

            return lstSamples;
        }


        /// <summary>
        /// populate Test Names
        /// </summary>
        /// <returns></returns>
        public List<SelectListItem> PopulateTestNames()
        {
            try
            {
                List<SelectListItem> lstTestNames = null;
                dbContext = new PMGSYEntities();
                lstTestNames = new SelectList(dbContext.MASTER_TEST, "MAST_TEST_CODE", "MAST_TEST_NAME").ToList();
                lstTestNames.Insert(0, new SelectListItem { Value = "0", Text = "Select Test Name" });
                return lstTestNames;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "PopulateTestNames()");
                return null;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        ///   Returns Details related to Test Result such as Chainage,Value,Sample,Test Names.
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array TestResultDetails(int IMS_PR_ROAD_CODE, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {

                dbContext = new PMGSYEntities();

                var lstTestResultList = dbContext.IMS_TEST_RESULT.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();

                totalRecords = lstTestResultList.Count();


                if (sidx.Trim() != string.Empty)
                {

                    if (sord.ToString() == "asc")
                    {

                        switch (sidx)
                        {
                            case "IMS_TEST_CODE":
                                lstTestResultList = lstTestResultList.OrderBy(o => o.IMS_TEST_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_CHAINAGE":
                                lstTestResultList = lstTestResultList.OrderBy(o => o.IMS_SAMPLE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_SAMPLE_ID":
                                lstTestResultList = lstTestResultList.OrderBy(o => o.IMS_SAMPLE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_TEST_RESULT":
                                lstTestResultList = lstTestResultList.OrderBy(o => o.IMS_TEST_RESULT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstTestResultList = lstTestResultList.OrderBy(o => o.IMS_TEST_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }
                    else
                    {

                        switch (sidx)
                        {
                            case "IMS_TEST_CODE":
                                lstTestResultList = lstTestResultList.OrderByDescending(o => o.IMS_TEST_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_CHAINAGE":
                                lstTestResultList = lstTestResultList.OrderByDescending(o => o.IMS_SAMPLE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_SAMPLE_ID":
                                lstTestResultList = lstTestResultList.OrderByDescending(o => o.IMS_SAMPLE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            case "IMS_TEST_RESULT":
                                lstTestResultList = lstTestResultList.OrderByDescending(o => o.IMS_TEST_RESULT1).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                lstTestResultList = lstTestResultList.OrderByDescending(o => o.IMS_TEST_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }

                    }

                }
                else
                {
                    lstTestResultList = lstTestResultList.OrderByDescending(o => o.IMS_TEST_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }


                List<SelectListItem> lstSampels = PopulateSamples();



                return lstTestResultList.Select(testResult => new
                {

                    id = testResult.IMS_RESULT_CODE,

                    cell = new[]{                
                    lstSampels.Where(m => m.Value == testResult.IMS_SAMPLE_ID.ToString()).Select(s => s.Text).FirstOrDefault(),    
                    //testResult.IMS_SAMPLE_ID.ToString(),
                    testResult.IMS_CHAINAGE.ToString(),
                    testResult.MASTER_TEST.MAST_TEST_NAME,
                    testResult.IMS_TEST_RESULT1.ToString(),                    
                    URLEncrypt.EncryptParameters1(new string[]{"IMS_RESULT_CODE="+ testResult.IMS_RESULT_CODE.ToString().Trim(),"IMS_PR_ROAD_CODE="+testResult.IMS_PR_ROAD_CODE.ToString().Trim()}),
                    URLEncrypt.EncryptParameters1(new string[]{"IMS_RESULT_CODE="+testResult.IMS_RESULT_CODE.ToString().Trim(),"IMS_PR_ROAD_CODE="+testResult.IMS_PR_ROAD_CODE.ToString().Trim()})
                }

                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "TestResultDetails().DAL");
                totalRecords = 0;
                return null;

            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }

            }


        }

        /// <summary>
        /// Returns Test Result Sample Details such as chainage,value,sample.
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array TestResultSampleDetails(int IMS_PR_ROAD_CODE, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();

                var lstTestResultList = dbContext.IMS_TEST_RESULT.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();

                totalRecords = lstTestResultList.Count();

                List<SelectListItem> lstSampels = PopulateSamples();


                if (sidx.Trim() != string.Empty)
                {
                    lstTestResultList = lstTestResultList.OrderBy(o => o.IMS_TEST_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                return lstTestResultList.Select(testResult => new
                {
                    id = testResult.IMS_RESULT_CODE,
                    cell = new[]{                
                    
                    testResult.MASTER_TEST.MAST_TEST_NAME,

                    lstSampels.Where(m => m.Value == testResult.IMS_SAMPLE_ID.ToString()).Select(s => s.Text).FirstOrDefault(),    
                    
                    testResult.IMS_CHAINAGE.ToString(),
                    
                    testResult.IMS_TEST_RESULT1.ToString(),                    
                }

                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "TestResultSampleDetails().DAL");
                totalRecords = 0;
                return null;

            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }

            }


        }


        /// <summary>
        /// Add Test result details
        /// </summary>
        /// <param name="testResultViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddTestResultDetails(TestResultViewModel testResultViewModel, ref string message)
        {
            try
            {


                IMS_TEST_RESULT testResultModel = new IMS_TEST_RESULT();

                testResultModel.IMS_RESULT_CODE = getMaxResultCode();
                testResultModel.IMS_PR_ROAD_CODE = testResultViewModel.hidden_ims_pr_road_code;
                testResultModel.IMS_TEST_CODE = testResultViewModel.IMS_TEST_CODE;
                testResultModel.IMS_CHAINAGE = testResultViewModel.IMS_CHAINAGE;
                testResultModel.IMS_SAMPLE_ID = testResultViewModel.IMS_SAMPLE_ID;
                testResultModel.IMS_TEST_RESULT1 = testResultViewModel.IMS_TEST_RESULT1;
                testResultModel.USERID = PMGSYSession.Current.UserId;
                testResultModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext = new PMGSYEntities();
                dbContext.IMS_TEST_RESULT.Add(testResultModel);
                dbContext.SaveChanges();

                return true;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddTestResultDetails(DbUpdateException ex).DAL");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddTestResultDetails(OptimisticConcurrencyException ex).DAL");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddTestResultDetails().DAL");
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Calculate Max Test_Result_Code.
        /// </summary>
        /// <returns></returns>
        public int getMaxResultCode()
        {
            try
            {
                dbContext = new PMGSYEntities();

                int maxCode = 1;

                if (dbContext.IMS_TEST_RESULT.Any())
                {
                    maxCode = dbContext.IMS_TEST_RESULT.Max(s => s.IMS_RESULT_CODE) + 1;
                    return maxCode;
                }
                else
                {
                    return maxCode;
                }
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "getMaxResultCode().DAL");
                return 1;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        /// <summary>
        /// Get Test result Details.
        /// </summary>
        /// <param name="ResultCode"></param>
        /// <param name="ImsPrRoadCode"></param>
        /// <returns></returns>
        public TestResultViewModel EditTestResultDetails(int ResultCode, int ImsPrRoadCode)
        {

            try
            {
                dbContext = new PMGSYEntities();
                TestResultViewModel testResultViewModel = new TestResultViewModel();
                IMS_TEST_RESULT testResultModel = dbContext.IMS_TEST_RESULT.Where(m => m.IMS_RESULT_CODE == ResultCode && m.IMS_PR_ROAD_CODE == ImsPrRoadCode).FirstOrDefault();

                if (testResultModel != null)
                {
                    testResultViewModel.EncryptedResultCode = URLEncrypt.EncryptParameters1(new string[] { "IMS_RESULT_CODE=" + ResultCode.ToString().Trim(), "IMS_PR_ROAD_CODE=" + ImsPrRoadCode.ToString().Trim() });

                    testResultViewModel.IMS_TEST_CODE = testResultModel.IMS_TEST_CODE;
                    testResultViewModel.IMS_CHAINAGE = testResultModel.IMS_CHAINAGE;
                    testResultViewModel.IMS_SAMPLE_ID = testResultModel.IMS_SAMPLE_ID;
                    testResultViewModel.IMS_TEST_RESULT1 = testResultModel.IMS_TEST_RESULT1;
                }
                return testResultViewModel;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditTestResultDetails().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Update Test Result details.
        /// </summary>
        /// <param name="testResultViewModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool UpdateTestResultDetails(TestResultViewModel testResultViewModel, ref string message)
        {

            try
            {
                Dictionary<string, string> decryptedParameters = null;
                string[] encryptedParameter = null;
                dbContext = new PMGSYEntities();

                int IMS_RESULT_CODE = 0;
                int IMS_PR_ROAD_CODE = 0;

                encryptedParameter = testResultViewModel.EncryptedResultCode.Split('/');

                if (!(encryptedParameter.Length == 3))
                {
                    return false;
                }

                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameter[0], encryptedParameter[1], encryptedParameter[2] });
                IMS_RESULT_CODE = Convert.ToInt32(decryptedParameters["IMS_RESULT_CODE"].ToString());
                IMS_PR_ROAD_CODE = Convert.ToInt32(decryptedParameters["IMS_PR_ROAD_CODE"].ToString());


                IMS_TEST_RESULT testResultModel = dbContext.IMS_TEST_RESULT.Where(m => m.IMS_RESULT_CODE == IMS_RESULT_CODE && m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).FirstOrDefault();

                if (testResultModel == null)
                {
                    return false;
                }

                testResultModel.IMS_TEST_CODE = testResultViewModel.IMS_TEST_CODE;
                testResultModel.IMS_CHAINAGE = testResultViewModel.IMS_CHAINAGE;
                testResultModel.IMS_SAMPLE_ID = testResultViewModel.IMS_SAMPLE_ID;
                testResultModel.IMS_TEST_RESULT1 = testResultViewModel.IMS_TEST_RESULT1;
                testResultModel.USERID = PMGSYSession.Current.UserId;
                testResultModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(testResultModel).State = EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateTestResultDetails(DbUpdateException ex).DAL");
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateTestResultDetails(OptimisticConcurrencyException ex).DAL");
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateTestResultDetails().DAL");
                message = "An error ocuured while processing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Delete Test Result details.
        /// </summary>
        /// <param name="resultCode"></param>
        /// <param name="imsPrRoadCode"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool DeleteTestResultDetails(int resultCode, int imsPrRoadCode, ref string message)
        {

            try
            {
                dbContext = new PMGSYEntities();

                IMS_TEST_RESULT testResultModel = dbContext.IMS_TEST_RESULT.Where(m => m.IMS_RESULT_CODE == resultCode && m.IMS_PR_ROAD_CODE == imsPrRoadCode).FirstOrDefault();

                if (testResultModel == null)
                {
                    message = "An error occured while processing your request.";
                    return false;
                }

                testResultModel.USERID = PMGSYSession.Current.UserId;
                testResultModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(testResultModel).State = EntityState.Modified;
                dbContext.SaveChanges();


                dbContext.IMS_TEST_RESULT.Remove(testResultModel);
                dbContext.SaveChanges();
                return true;

            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteTestResultDetails(DbUpdateException ex).DAL");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteTestResultDetails().DAL");
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        //Login ITNO

        /// <summary>
        /// Get Road Proposal List.
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="MAST_STATE_CODE"></param>
        /// <param name="IMS_YEAR"></param>
        /// <param name="MAST_DISTRICT_ID"></param>
        /// <param name="IMS_BATCH"></param>
        /// <param name="IMS_STREAMS"></param>
        /// <returns></returns>
        public Array GetItnoProposalsDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MAST_STATE_CODE, int IMS_YEAR, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                List<IMS_SANCTIONED_PROJECTS> listProposals = new List<IMS_SANCTIONED_PROJECTS>();
                if (PMGSYSession.Current.RoleCode == 36 || PMGSYSession.Current.RoleCode == 47) //ITNO=36 or OAITNO=47
                {
                    var lstParantNd = (dbContext.ADMIN_DEPARTMENT.Where(a => a.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(a => a.ADMIN_ND_CODE).ToList());

                    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                     where
                                       (lstParantNd.Contains(c.MAST_DPIU_CODE)) &&
                                        c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                        c.IMS_PROPOSAL_TYPE == "P" &&
                                         //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                         //c.IMS_SANCTIONED == "N" &&
                                        (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                        (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                        (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                        (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                     select c)
                                        .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                }
                else if (PMGSYSession.Current.RoleCode == 2 || PMGSYSession.Current.RoleCode == 37) //SRRDA=2 or SRRDAOA=37
                {
                    var lstParantNd = (dbContext.ADMIN_DEPARTMENT.Where(a => a.MAST_PARENT_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(a => a.ADMIN_ND_CODE).ToList());

                    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                     where
                                       (lstParantNd.Contains(c.MAST_DPIU_CODE)) &&
                                        c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                        c.IMS_PROPOSAL_TYPE == "P" &&
                                         //(c.IMS_ISCOMPLETED == "D" || c.IMS_ISCOMPLETED == "S") &&
                                         //c.IMS_SANCTIONED == "N" &&
                                        (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                        (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                        (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                        (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                     select c)
                                        .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                }
                else if (PMGSYSession.Current.RoleCode == 22 || PMGSYSession.Current.RoleCode == 38)//PIU=22 && PIUOA=38
                {
                    listProposals = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                     where
                                        c.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode &&
                                        c.MAST_STATE_CODE == MAST_STATE_CODE &&
                                        c.IMS_PROPOSAL_TYPE == "P" &&
                                         //(c.IMS_ISCOMPLETED == "E" || c.IMS_ISCOMPLETED == "H") &&
                                         //c.IMS_SANCTIONED == "N" &&
                                        (IMS_YEAR > 0 ? c.IMS_YEAR : 1) == (IMS_YEAR > 0 ? IMS_YEAR : 1) &&
                                        (MAST_DISTRICT_ID > 0 ? c.MAST_DISTRICT_CODE : 1) == (MAST_DISTRICT_ID > 0 ? MAST_DISTRICT_ID : 1) &&
                                        (IMS_BATCH > 0 ? c.IMS_BATCH : 1) == (IMS_BATCH > 0 ? IMS_BATCH : 1) &&
                                        (IMS_STREAMS > 0 ? c.IMS_COLLABORATION : 1) == (IMS_STREAMS > 0 ? IMS_STREAMS : 1)

                                     select c)
                                        .OrderByDescending(c => c.IMS_PR_ROAD_CODE).ToList<IMS_SANCTIONED_PROJECTS>();
                }


                IQueryable<IMS_SANCTIONED_PROJECTS> query = listProposals.AsQueryable<IMS_SANCTIONED_PROJECTS>();
                totalRecords = listProposals.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MASTER_STATE.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {                                                             
                                    propDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME.Trim(),           
                                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID,
                                    //propDetails.PLAN_ROAD == null ? "NA" :  propDetails.PLAN_ROAD.PLAN_RD_NAME,
                                    propDetails.IMS_ROAD_FROM + " " + propDetails.IMS_ROAD_TO,

                                    propDetails.IMS_PAV_LENGTH.ToString() ,
                                    propDetails.IMS_PAV_EST_COST.ToString(),
                                    //"<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='AddTestResultDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS +"\"); return false;'>Add Test Result Details</a>"
                                    "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddTestResultDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim()+"\"); return false;'>Add Test Result Details</a>"
                   }
                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetItnoProposalsDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        ///  Get Road Details such as Road name, Road Length, Package.
        /// </summary>
        /// <param name="IMS_PR_ROAD_CODE"></param>
        /// <returns></returns>
        public IMS_SANCTIONED_PROJECTS GetRoadDetails(int IMS_PR_ROAD_CODE)
        {

            dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);

                return ims_sanctioned_projects;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetRoadDetails().DAL");
                return null;

            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }

            }

        }

        #endregion

        #region SANCTION_ORDER_GENERATION

        public List<SelectListItem> PopulateFinancialYearsByStateDAL(int stateCode, bool isAllSelected = false)
        {
            List<SelectListItem> lstYears = new List<SelectListItem>();
            SelectListItem item;

            try
            {
                dbContext = new PMGSYEntities();

                var query = (from ISP in dbContext.IMS_SANCTIONED_PROJECTS
                             where ISP.MAST_STATE_CODE == stateCode
                            
                            
                             select new
                             {
                                 Text = ISP.IMS_YEAR,
                                 Value = ISP.IMS_YEAR,

                             }).OrderByDescending(c => c.Text).ToList().Distinct();


                // Below is commented as per suggestion of Srinivasa sir to populate all  years 14 Jan 2021

                //var query = (from ISP in dbContext.IMS_SANCTIONED_PROJECTS
                //             where ISP.MAST_STATE_CODE == stateCode &&
                //             ISP.STA_SANCTIONED == "Y" &&
                //             ISP.IMS_SANCTIONED == "N" &&
                //             ISP.IMS_ISCOMPLETED == "S"
                //             select new
                //             {
                //                 Text = ISP.IMS_YEAR,
                //                 Value = ISP.IMS_YEAR,
                              
                //             }).OrderByDescending(c => c.Text).ToList().Distinct();

                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text + "-" + (data.Text + 1);
                    item.Value = data.Value.ToString();
                   
                    lstYears.Add(item);
                }

                if (isAllSelected == false)
                {
                    lstYears.Insert(0, (new SelectListItem { Text = "Select Year", Value = "-1", Selected = true }));
                }
                else if (isAllSelected == true)
                {
                    lstYears.Insert(0, (new SelectListItem { Text = "All Years", Value = "0", Selected = true }));
                }

                return lstYears;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulateFinancialYearsByStateDAL().DAL");
                return lstYears;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of proposals for generating the sanction order details according to the parameters
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="year"></param>
        /// <param name="stream"></param>
        /// <param name="batch"></param>
        /// <returns></returns>
        public Array GetProposalsForSanctionOrder(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int agency, int batch, int scheme, string proposalType, out bool IsSOGenerated)
        {
            dbContext = new PMGSYEntities();

            try
            {
                //var proposalList = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                //                    where
                //                    (item.MAST_STATE_CODE == stateCode) &&
                //                    (item.IMS_YEAR == year) &&
                //                    (item.IMS_COLLABORATION == stream) &&
                //                    (item.IMS_BATCH == batch) &&
                //                    (item.MAST_PMGSY_SCHEME == scheme) &&
                //                    ((proposalType == "0" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalType == "0" ? "%" : proposalType))
                //                    select new
                //                    {
                //                        item.IMS_PR_ROAD_CODE,
                //                        item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                //                        item.MASTER_BLOCK.MAST_BLOCK_NAME,
                //                        item.PLAN_ROAD.PLAN_CN_ROAD_NUMBER,
                //                        item.IMS_PROPOSAL_TYPE,
                //                        ROAD_TYPE = (item.IMS_PROPOSAL_TYPE == "P" ?"Road" :"LSB"),
                //                        ROAD_NAME = (item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_ROAD_NAME : item.IMS_BRIDGE_NAME),
                //                        item.IMS_UPGRADE_CONNECT,
                //                        ROAD_LENGTH = (item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH),
                //                        CARRIAGE_WIDTH = (item.IMS_CARRIAGED_WIDTH == null ? 0 : item.MASTER_CARRIAGE.MAST_CARRIAGE_WIDTH),
                //                        item.IMS_IS_STAGED,
                //                        item.IMS_NO_OF_CDWORKS,
                //                        MORD_COST = (item.MAST_PMGSY_SCHEME == 1 ? (item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_PW_AMT + item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_CD_AMT + item.IMS_SANCTIONED_BW_AMT) : (item.IMS_SHARE_PERCENT == 1 ? ((item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_PW_AMT + item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_CD_AMT + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT.Value) + item.IMS_SANCTIONED_BW_AMT) * (Decimal)0.9) : ((item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_PW_AMT + item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_CD_AMT + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + item.IMS_SANCTIONED_BW_AMT) * (Decimal)0.75))),
                //                        STATECOST = (item.IMS_SANCTIONED_RS_AMT + item.IMS_SANCTIONED_BS_AMT),
                //                        TOTAL_COST = (item.MAST_PMGSY_SCHEME == 1 ? (item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_PW_AMT + item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_CD_AMT + item.IMS_SANCTIONED_BW_AMT) : (item.IMS_SHARE_PERCENT == 1 ? ((item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_PW_AMT + item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_CD_AMT + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT.Value) + item.IMS_SANCTIONED_BW_AMT) * (Decimal)0.9) : ((item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_PW_AMT + item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_CD_AMT + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + item.IMS_SANCTIONED_BW_AMT) * (Decimal)0.75))),
                //                        MAINTENANCE_COST = (item.MAST_PMGSY_SCHEME == 1 ? (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5) : (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5 + (item.IMS_SANCTIONED_RENEWAL_AMT == null?0:item.IMS_SANCTIONED_RENEWAL_AMT)))
                //                    }).Distinct().ToList();

                //var proposalList = dbContext.USP_PROP_SANCTION_LIST(stateCode, 0, 0, year, batch, stream, proposalType, Convert.ToByte(scheme)).ToList();
                var proposalList = dbContext.USP_PROP_SANCTION_LIST_AGENCY(stateCode, 0, 0, year, batch, agency, stream, proposalType, Convert.ToByte(scheme)).ToList();


                totalRecords = proposalList.Count();

                if (dbContext.IMS_SANCTIONED_PROJECTS_PDF.Any(m => m.IMS_BATCH == batch && m.IMS_COLLABORATION == stream && m.IMS_YEAR == year && m.MAST_STATE_CODE == stateCode && m.MAST_PMGSY_SCHEME == scheme && m.MAST_AGENCY_CODE == agency))
                {
                    IsSOGenerated = true;
                }
                else
                {
                    IsSOGenerated = false;
                }


                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "PLAN_CN_ROAD_NUMBER":
                                proposalList = proposalList.OrderBy(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ROAD_NAME":
                                proposalList = proposalList.OrderBy(m => m.ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_UPGRADE_CONNECT":
                                proposalList = proposalList.OrderBy(m => m.IMS_UPGRADE_CONNECT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ROAD_LENGTH":
                                proposalList = proposalList.OrderBy(m => m.ROAD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "CARRIAGE_WIDTH":
                                proposalList = proposalList.OrderBy(m => m.MAST_CARRIAGE_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            //case "IMS_IS_STAGED":
                            //    proposalList = proposalList.OrderBy(m => m.IMS_IS_STAGED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                            //    break;
                            case "IMS_NO_OF_CDWORKS":
                                proposalList = proposalList.OrderBy(m => m.IMS_NO_OF_CDWORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MORD_COST":
                                proposalList = proposalList.OrderBy(m => m.ROAD_AMT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STATECOST":
                                proposalList = proposalList.OrderBy(m => m.ROAD_STATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            //case "TOTAL_COST":
                            //    proposalList = proposalList.OrderBy(m => m.TOTAL_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                            //    break;
                            case "MAINTENANCE_COST":
                                proposalList = proposalList.OrderBy(m => m.MAINT_AMT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                proposalList = proposalList.OrderBy(m => m.IMS_PROPOSAL_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "PLAN_CN_ROAD_NUMBER":
                                proposalList = proposalList.OrderByDescending(m => m.PLAN_CN_ROAD_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ROAD_NAME":
                                proposalList = proposalList.OrderByDescending(m => m.ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_UPGRADE_CONNECT":
                                proposalList = proposalList.OrderByDescending(m => m.IMS_UPGRADE_CONNECT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ROAD_LENGTH":
                                proposalList = proposalList.OrderByDescending(m => m.ROAD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "CARRIAGE_WIDTH":
                                proposalList = proposalList.OrderByDescending(m => m.MAST_CARRIAGE_WIDTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            //case "IMS_IS_STAGED":
                            //    proposalList = proposalList.OrderByDescending(m => m.IMS_IS_STAGED).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                            //    break;
                            case "IMS_NO_OF_CDWORKS":
                                proposalList = proposalList.OrderByDescending(m => m.IMS_NO_OF_CDWORKS).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "MORD_COST":
                                proposalList = proposalList.OrderByDescending(m => m.ROAD_AMT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "STATECOST":
                                proposalList = proposalList.OrderByDescending(m => m.ROAD_STATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            //case "TOTAL_COST":
                            //    proposalList = proposalList.OrderByDescending(m => m.TOTAL_COST).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                            //    break;
                            case "MAINTENANCE_COST":
                                proposalList = proposalList.OrderByDescending(m => m.MAINT_AMT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                proposalList = proposalList.OrderByDescending(m => m.IMS_PROPOSAL_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    proposalList = proposalList.OrderBy(m => m.IMS_PROPOSAL_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                var result = proposalList.Select(m => new
                {
                    // m.IMS_PR_ROAD_CODE,
                    m.MAST_BLOCK_NAME,
                    m.MAST_DISTRICT_NAME,
                    PLAN_CN_ROAD_NUMBER = m.PLAN_CN_ROAD_NUMBER == "O" ? "-" : m.PLAN_CN_ROAD_NUMBER,
                    m.IMS_PROPOSAL_TYPE,
                    m.ROAD_NAME,
                    m.IMS_UPGRADE_CONNECT,
                    m.ROAD_LENGTH,
                    m.MAST_CARRIAGE_WIDTH,
                    //m.IMS_IS_STAGED,
                    m.IMS_NO_OF_CDWORKS,
                    m.ROAD_AMT,
                    m.BRIDGE_AMT,
                    m.ROAD_STATE,
                    m.BRIDGE_STATE,
                    //m.TOTAL_COST,
                    m.MAINT_AMT,
                    m.POP1000,
                    m.POP250,
                    m.POP499,
                    m.POP999,
                    m.TOTAL_HABS,
                    m.PROPOSAL_TYPE,
                    m.PROPOSAL_STATUS,
                    m.STAGE_CONST,
                    m.HIGHER_SPECS,
                    m.RENEWAL_AMT,
                    m.TECH,
                    ///Changes by SAMMED A. PATIL on 20JULY2017
                    RD_LENGTH = m.IMS_PROPOSAL_TYPE == "P" ? m.ROAD_LENGTH : 0,
                    LSB_LENGTH = m.IMS_PROPOSAL_TYPE == "L" ? m.ROAD_LENGTH : 0,
                    m.IMS_RIDING_QUALITY_LENGTH
                }).ToArray();


                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_DISTRICT_NAME.ToString(),
                        m.PLAN_CN_ROAD_NUMBER == null?"0":m.PLAN_CN_ROAD_NUMBER.ToString(),
                        m.ROAD_NAME == null?"":m.ROAD_NAME.ToString(),
                        m.IMS_PROPOSAL_TYPE,
                        m.PROPOSAL_TYPE,
                        m.IMS_UPGRADE_CONNECT.ToString(),
                        m.ROAD_LENGTH == null?"0":m.ROAD_LENGTH.ToString(),
                        m.MAST_CARRIAGE_WIDTH.ToString(),
                        m.STAGE_CONST == null ? "-" : m.STAGE_CONST.ToString(),
                        m.IMS_NO_OF_CDWORKS == null?"0":m.IMS_NO_OF_CDWORKS.ToString(),
                        //(m.ROAD_AMT + m.BRIDGE_AMT).ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? m.ROAD_AMT.ToString() : m.BRIDGE_AMT.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.ROAD_STATE).ToString() : (m.BRIDGE_STATE).ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? (m.ROAD_AMT + m.ROAD_STATE).ToString() :(m.BRIDGE_AMT + m.BRIDGE_STATE).ToString(),
                        m.MAINT_AMT == null ? "0.000":Convert.ToDecimal(m.MAINT_AMT).ToString(),
                        ("(" +m.POP1000 + ","+m.POP999+","+m.POP499+","+m.POP250+","+m.TOTAL_HABS+")").ToString(),
                        m.POP1000.ToString(),
                        m.POP999.ToString(),
                        m.POP499.ToString(),
                        m.POP250.ToString(),
                        m.TOTAL_HABS.ToString(),
                        m.HIGHER_SPECS==null?"0":m.HIGHER_SPECS.ToString(),
                        m.RENEWAL_AMT==null?"0":m.RENEWAL_AMT.ToString(),
                        m.TECH == null ? "-" : m.TECH.Trim(),
                        ///Changes by SAMMED A. PATIL on 20JULY2017 
                        m.RD_LENGTH == null ? "0" : m.RD_LENGTH.ToString(),
                        m.LSB_LENGTH == null ? "0" : m.LSB_LENGTH.ToString(),
                        m.IMS_RIDING_QUALITY_LENGTH.ToString()
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalsForSanctionOrder().DAL");
                totalRecords = 0;
                IsSOGenerated = false;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// saves the sanction order details 
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddSanctionOrderDAL(SanctionOrderViewModel model, ref string message)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            SanctionOrderFilterModel sanModel = new SanctionOrderFilterModel();

            SqlConnection storeConnection = null;
            SqlCommand command = null;
            TransactionScope ts1 = null;
            try
            {
                //var proposalList = dbContext.USP_PROP_SANCTION_LIST(model.StateCode, 0, 0, model.YearCode, model.BatchCode, model.StreamCode, "%", Convert.ToByte(model.PMGSYScheme)).ToList();
                var proposalList = dbContext.USP_PROP_SANCTION_LIST_AGENCY(model.StateCode, 0, 0, model.YearCode, model.BatchCode, model.Agency, model.StreamCode, "%", Convert.ToByte(model.PMGSYScheme)).ToList();

                string connString = ConfigurationManager.ConnectionStrings["PMGSYConnection"].ConnectionString;
                //+ "MultipleActiveResultSets=True;App=EntityFramework";

                //SqlConnection storeConnection = new SqlConnection(dbContext.Database.Connection.ConnectionString);
                using (storeConnection = new SqlConnection(connString))
                {
                    storeConnection.Open();

                    using (TransactionScope ts = new TransactionScope())
                    {
                        IMS_SANCTIONED_PROJECTS_PDF sanctionDetails = new IMS_SANCTIONED_PROJECTS_PDF();
                        sanctionDetails.IMS_BATCH = model.BatchCode;
                        sanctionDetails.IMS_COLLABORATION = model.StreamCode;
                        sanctionDetails.IMS_GENERATION_DATE = DateTime.Now;
                        sanctionDetails.MAST_PMGSY_SCHEME = model.PMGSYScheme;
                        sanctionDetails.IMS_ORDER_DATE = objCommon.GetStringToDateTime(model.IMS_ORDER_DATE);
                        sanctionDetails.IMS_ORDER_NUMBER = model.IMS_ORDER_NUMBER;
                        sanctionDetails.MAST_STATE_CODE = model.StateCode;
                        sanctionDetails.IMS_PDF_NAME = (dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_SHORT_CODE).FirstOrDefault()) + "_" + (dbContext.MASTER_YEAR.Where(m => m.MAST_YEAR_CODE == model.YearCode).Select(m => m.MAST_YEAR_TEXT).FirstOrDefault()) + "_BATCH" + model.BatchCode + "_" + (dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault()) + "_SCHEME" + model.PMGSYScheme + ".pdf";
                        sanctionDetails.IMS_YEAR = model.YearCode;
                        sanctionDetails.MAST_AGENCY_CODE = model.Agency;
                        sanctionDetails.USERID = PMGSYSession.Current.UserId;
                        sanctionDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.IMS_SANCTIONED_PROJECTS_PDF.Add(sanctionDetails);

                        IMS_FREEZE_DETAILS freezeDetails = new IMS_FREEZE_DETAILS();
                        if (dbContext.IMS_FREEZE_DETAILS.Any(m => m.IMS_BATCH == model.BatchCode && m.IMS_YEAR == model.YearCode && m.MAST_PMGSY_SCHEME == model.PMGSYScheme && m.MAST_STATE_CODE == model.StateCode))
                        {
                            freezeDetails.IMS_TRANSACTION_NO = dbContext.IMS_FREEZE_DETAILS.Where(m => m.IMS_BATCH == model.BatchCode && m.IMS_YEAR == model.YearCode && m.MAST_PMGSY_SCHEME == model.PMGSYScheme && m.MAST_STATE_CODE == model.StateCode).Max(m => m.IMS_TRANSACTION_NO) + 1;
                        }
                        else
                        {
                            freezeDetails.IMS_TRANSACTION_NO = 1;
                        }
                        freezeDetails.IMS_BATCH = model.BatchCode;
                        freezeDetails.IMS_FREEZE_DATE = DateTime.Now;
                        freezeDetails.IMS_FREEZE_STATUS = "F";
                        freezeDetails.IMS_YEAR = model.YearCode;
                        freezeDetails.MAST_PMGSY_SCHEME = (Byte)model.PMGSYScheme;
                        freezeDetails.MAST_STATE_CODE = model.StateCode;
                        freezeDetails.USERID = PMGSYSession.Current.UserId;
                        freezeDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.IMS_FREEZE_DETAILS.Add(freezeDetails);
                        dbContext.SaveChanges();

                        sanModel.State = model.StateCode;
                        sanModel.Batch = model.BatchCode;
                        sanModel.Stream = model.StreamCode;
                        sanModel.PMGSYScheme = model.PMGSYScheme;
                        sanModel.Year = model.YearCode;
                        sanModel.SanctionOrderDate = objCommon.GetDateTimeToString(sanctionDetails.IMS_ORDER_DATE);
                        sanModel.SanctionOrderNo = sanctionDetails.IMS_ORDER_NUMBER;
                        sanModel.StateName = dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_NAME).FirstOrDefault();
                        sanModel.CollaborationName = dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault();
                        sanModel.BatchName = dbContext.MASTER_BATCH.Where(m => m.MAST_BATCH_CODE == model.BatchCode).Select(m => m.MAST_BATCH_NAME).FirstOrDefault();
                        #region
                        int recordCount = 0;
                        List<int> lstRoadCodes = proposalList.Select(x => x.IMS_PR_ROAD_CODE).ToArray().ToList<int>();

                        //code for updating the Proposals in bulk using Table Valued Parameters

                        IEnumerable<SqlDataRecord> sqlDataRecords = new List<SqlDataRecord>();
                        SqlDataRecord record = new SqlDataRecord(new SqlMetaData[] { new SqlMetaData("IMS_PR_ROAD_CODE", SqlDbType.Int) });
                        List<SqlDataRecord> recordList = new List<SqlDataRecord>();

                        DataTable ProposalTable = new DataTable();
                        ProposalTable.Columns.Add("IMS_PR_ROAD_CODE", typeof(int));
                        string RoadCodes = string.Empty;
                        int j = 0;
                        foreach (var item in lstRoadCodes)
                        {
                            int i = 0;
                            record.SetInt32(i, Convert.ToInt32(item));
                            ProposalTable.Rows.Add(new object[] { Convert.ToInt32(item) });
                            i++;
                            recordList.Add(record);

                            if (j == 0)
                            {
                                RoadCodes = Convert.ToString(item);
                            }
                            else
                            {
                                RoadCodes = RoadCodes + "," + Convert.ToString(item);
                            }
                            j++;
                        }

                        sqlDataRecords = recordList;


                        using (command = storeConnection.CreateCommand())
                        {
                            command.Connection = storeConnection;

                            //command.CommandText = "UPDATE omms.IMS_SANCTIONED_PROJECTS SET IMS_SANCTIONED=@ImsSanctioned, IMS_SANCTIONED_BY=@ImsSanctionedBy, IMS_SANCTIONED_DATE=@SanctionDate, IMS_ISCOMPLETED=@IsCompleted WHERE IMS_PR_ROAD_CODE in (" + RoadCodes + ")";
                            command.CommandText = "omms.USP_UPDATE_BULK_SANCTION_DETAILS";
                            command.CommandType = CommandType.StoredProcedure;
                            command.Parameters.Add(new SqlParameter("@ImsSanctioned", SqlDbType.Char)).Value = "Y";
                            command.Parameters.Add(new SqlParameter("@ImsSanctionedBy", SqlDbType.VarChar)).Value = PMGSYSession.Current.UserName;
                            command.Parameters.Add(new SqlParameter("@SanctionDate", SqlDbType.DateTime)).Value = objCommon.GetStringToDateTime(model.IMS_ORDER_DATE);
                            command.Parameters.Add(new SqlParameter("@IsCompleted", SqlDbType.Char)).Value = "M";
                            //command.Parameters.Add(new SqlParameter("@UserId", SqlDbType.Int)).Value = PMGSYSession.Current.UserId;
                            //command.Parameters.Add(new SqlParameter("@IpAdd", SqlDbType.VarChar)).Value = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            command.Parameters.AddWithValue("@Proposals", ProposalTable).SqlDbType = SqlDbType.Structured;

                            recordCount = (int)command.ExecuteScalar();

                            if (recordCount == 0)
                            {
                                throw new Exception("");
                                //return string.Empty;
                            }

                        }
                        #endregion
                        dbContext.SaveChanges();

                        GenerateSanctionOrderFile(sanModel, sanctionDetails);
                        ts.Complete();
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddSanctionOrderDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// checks whether the sanction order is generated for this combination or not
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool IsSanctionOrderGenerated(SanctionOrderViewModel model)
        {
            dbContext = new PMGSYEntities();

            try
            {
                if (dbContext.IMS_SANCTIONED_PROJECTS_PDF.Any(m => m.IMS_BATCH == model.BatchCode && m.IMS_COLLABORATION == model.StreamCode && m.IMS_YEAR == model.YearCode && m.MAST_STATE_CODE == model.StateCode && m.MAST_AGENCY_CODE == model.Agency))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "IsSanctionOrderGenerated().DAL");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of sanction order generated by the state.
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="year"></param>
        /// <param name="stream"></param>
        /// <param name="batch"></param>
        /// <param name="scheme"></param>
        /// <param name="proposalType"></param>
        /// <returns></returns>
        public Array GetSanctionOrderListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int agency, int batch, int scheme, string proposalType)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstSanctionOrders = dbContext.IMS_SANCTIONED_PROJECTS_PDF.Where(item => item.MAST_STATE_CODE == stateCode && item.IMS_YEAR == year && item.IMS_COLLABORATION == stream && item.IMS_BATCH == batch && item.MAST_PMGSY_SCHEME == scheme && item.MAST_AGENCY_CODE == agency).ToList();

                totalRecords = lstSanctionOrders.Count();

                var result = lstSanctionOrders.Select(m => new
                {
                    m.IMS_BATCH,
                    m.IMS_COLLABORATION,
                    m.IMS_GENERATION_DATE,
                    m.IMS_ORDER_DATE,
                    m.IMS_ORDER_NUMBER,
                    m.IMS_PDF_NAME,
                    m.IMS_YEAR,
                    m.MAST_PMGSY_SCHEME,
                    m.MAST_STATE_CODE,
                    m.MASTER_FUNDING_AGENCY.MAST_FUNDING_AGENCY_NAME,
                    m.MASTER_STATE.MAST_STATE_NAME,
                    m.MASTER_YEAR.MAST_YEAR_TEXT
                }).ToArray();


                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        
                        m.IMS_ORDER_NUMBER == null?"":m.IMS_ORDER_NUMBER.ToString(),
                        m.IMS_ORDER_DATE == null?"-":m.IMS_ORDER_DATE.ToString("dd/MM/yyyy"),
                        m.MAST_STATE_CODE == null?"-":m.MAST_STATE_NAME.ToString(),
                        m.IMS_BATCH == null?"-":"Batch "+m.IMS_BATCH.ToString(),
                        m.IMS_YEAR == null?"-":m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_COLLABORATION == null?"-":m.MAST_FUNDING_AGENCY_NAME.ToString(),
                        ///Changes for RCPLWE
                        m.MAST_PMGSY_SCHEME == null?"-":m.MAST_PMGSY_SCHEME == 3 ? "RCPLWE" :"PMGSY "+ (m.MAST_PMGSY_SCHEME == 4 ? "3" : m.MAST_PMGSY_SCHEME.ToString()),
                        "<a href='/Proposal/GetSanctionOrder?id="+m.MAST_STATE_CODE +"$"+m.IMS_BATCH+"$"+m.IMS_COLLABORATION+"$"+m.IMS_YEAR+"$"+m.MAST_PMGSY_SCHEME+"$"+m.IMS_PDF_NAME+"' title='Click here to view Sanction Order Details' class='ui-icon ui-icon-zoomin ui-align-center' target=_blank></a>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetSanctionOrderListDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Populate Agencies of specific states
        /// </summary>
        /// <param name="stateCode"></param>
        /// <param name="isAllSelected"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateAgencies(int stateCode, bool isAllSelected = false)
        {
            List<SelectListItem> lstAgencies = new List<SelectListItem>();
            SelectListItem item;

            try
            {
                dbContext = new PMGSYEntities();
                var query = (from ma in dbContext.MASTER_AGENCY
                             join md in dbContext.ADMIN_DEPARTMENT on ma.MAST_AGENCY_CODE equals md.MAST_AGENCY_CODE
                             where md.MAST_STATE_CODE == stateCode &&
                             md.MAST_ND_TYPE == "S"
                             select new
                             {
                                 Text = md.ADMIN_ND_NAME,//ma.MAST_AGENCY_NAME,
                                 Value = ma.MAST_AGENCY_CODE,
                                 Selected = (ma.MAST_AGENCY_TYPE == "G" ? true : false)
                             }).OrderBy(c => c.Text).ToList().Distinct();

                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text;
                    item.Value = data.Value.ToString();
                    item.Selected = data.Selected;
                    lstAgencies.Add(item);
                }

                if (isAllSelected == false)
                {
                    lstAgencies.Insert(0, (new SelectListItem { Text = "Select Agency", Value = "-1", Selected = true }));
                }
                else if (isAllSelected == true)
                {
                    lstAgencies.Insert(0, (new SelectListItem { Text = "All Agencies", Value = "0", Selected = true }));
                }

                return lstAgencies;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulateAgencies().DAL");
                return lstAgencies;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// generates the pdf file and store it to the server.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="sanctionModel"></param>
        public void GenerateSanctionOrderFile(SanctionOrderFilterModel model, IMS_SANCTIONED_PROJECTS_PDF sanctionModel)
        {
            dbContext = new PMGSYEntities();
            try
            {
                Microsoft.Reporting.WebForms.ReportViewer rview = new Microsoft.Reporting.WebForms.ReportViewer();
                rview.ServerReport.ReportServerUrl = new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.ReportServerUrl"]);
                System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter> paramList = new System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter>();
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("State", model.State.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("District", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Block", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Year", model.Year.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Batch", model.Batch.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Agency", model.Agency.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Collaboration", model.Stream.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Status", "%"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("PMGSY", model.PMGSYScheme.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("StateName", model.StateName));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("BatchName", model.BatchName));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("CollaborationName", model.CollaborationName));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("SanctionLetterNo", (model.SanctionOrderNo == null ? "-" : model.SanctionOrderNo)));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("SanctionDate", (model.SanctionOrderDate == null ? "-" : model.SanctionOrderDate)));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("UserId", PMGSY.Extensions.PMGSYSession.Current.UserId.ToString()));
                Microsoft.Reporting.WebForms.IReportServerCredentials irsc = new CustomReportCredentials(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Username"], System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Password"]);
                rview.ServerReport.ReportServerCredentials = irsc;
                rview.ServerReport.ReportPath = "/PMGSYCitizen/SanctionedProposalList";
                rview.ServerReport.SetParameters(paramList);
                string mimeType, encoding, extension, deviceInfo;
                string[] streamids;
                Microsoft.Reporting.WebForms.Warning[] warnings;
                string format = "PDF"; //Desired format goes here (PDF, Excel, or Image)
                deviceInfo = "<DeviceInfo>" + "<SimplePageHeaders>True</SimplePageHeaders>" + "</DeviceInfo>";
                byte[] bytes = rview.ServerReport.Render(format, deviceInfo, out mimeType, out encoding, out extension, out streamids, out warnings);
                var fileName = (dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.State).Select(m => m.MAST_STATE_SHORT_CODE).FirstOrDefault()) + "_" + (model.Year + "-" + (model.Year + 1)) + "_BATCH" + model.Batch + "_" + (model.CollaborationName) + "_SCHEME" + model.PMGSYScheme;
                string filePath = model.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["SANCTION_ORDER_PDF_PMGSYI"].ToString() + fileName + ".pdf" : model.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["SANCTION_ORDER_PDF_PMGSYII"].ToString() + fileName + ".pdf" : model.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["SANCTION_ORDER_PDF_RCPLWE"].ToString() + fileName + ".pdf" : ConfigurationManager.AppSettings["SANCTION_ORDER_PDF_PMGSYIII"].ToString() + fileName + ".pdf";
                System.IO.File.WriteAllBytes(filePath, bytes);
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GenerateSanctionOrderFile().DAL");
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        /// <summary>
        /// populates the packages according to the block
        /// </summary>
        /// <param name="blockCode"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulatePackageBlockWise(int blockCode, int Year)
        {
            int district = 0;
            dbContext = new PMGSYEntities();
            List<SelectListItem> lstPackage = new List<SelectListItem>();
            try
            {
                //var pkgColl = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                //               where item.MAST_BLOCK_CODE == blockCode
                //               select new
                //               {
                //                   IMS_PACKAGE_TEXT = item.IMS_PACKAGE_ID,
                //                   IMS_PACKAGE_VALUE = item.IMS_PACKAGE_ID
                //               }).Distinct().ToList();

                district = dbContext.MASTER_BLOCK.Where(c => c.MAST_BLOCK_CODE == blockCode).Select(v => v.MAST_DISTRICT_CODE).FirstOrDefault();

                var pkg = (from sp in dbContext.IMS_SANCTIONED_PROJECTS
                           join agrdetails in dbContext.TEND_AGREEMENT_DETAIL on sp.IMS_PR_ROAD_CODE equals agrdetails.IMS_PR_ROAD_CODE
                           join agrmaster in dbContext.TEND_AGREEMENT_MASTER on agrdetails.TEND_AGREEMENT_CODE equals agrmaster.TEND_AGREEMENT_CODE
                           where agrmaster.MAST_DISTRICT_CODE == district
                           && agrmaster.TEND_AGREEMENT_TYPE == "C" && agrmaster.TEND_IS_AGREEMENT_FINALIZED == "Y"
                           select new
                            {
                                IMS_PACKAGE_TEXT = sp.IMS_PACKAGE_ID,
                                IMS_PACKAGE_VALUE = sp.IMS_PACKAGE_ID
                                //sp.IMS_PACKAGE_ID
                            }
                               ).Distinct().ToList();

                var pkg1 = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.MAST_DISTRICT_CODE == district && x.IMS_YEAR == Year).Select(c => new { IMS_PACKAGE_TEXT = c.IMS_PACKAGE_ID, IMS_PACKAGE_VALUE = c.IMS_PACKAGE_ID }).Distinct().ToList();

                var pkgColl = pkg1.Except(pkg).ToList();

                if (pkgColl == null || pkgColl.Count() == 0)
                {
                    lstPackage.Insert(0, (new SelectListItem { Text = "All Packages", Value = "0", Selected = true }));
                    return lstPackage;
                }
                else
                {
                    foreach (var item in pkgColl)
                    {
                        lstPackage.Insert(0, (new SelectListItem { Text = item.IMS_PACKAGE_TEXT.ToString(), Value = item.IMS_PACKAGE_VALUE.ToString() }));
                    }
                    lstPackage.Insert(0, (new SelectListItem { Text = "Select Package", Value = "0" }));
                }
                return lstPackage;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulatePackageBlockWise().DAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the sanction order details
        /// </summary>
        /// <returns></returns>
        public IMS_SANCTIONED_PROJECTS_PDF GetSanctionOrderMaster(SanctionOrderFilterModel model)
        {
            try
            {
                return dbContext.IMS_SANCTIONED_PROJECTS_PDF.Where(m => m.MAST_STATE_CODE == model.State && m.IMS_BATCH == model.Batch && m.IMS_COLLABORATION == model.Stream && m.IMS_YEAR == model.Year && m.MAST_PMGSY_SCHEME == model.PMGSYScheme && m.MAST_AGENCY_CODE == model.Agency).FirstOrDefault();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetSanctionOrderMaster().DAL");
                return null;
            }
        }

        #endregion

        #region REPACKAGING

        /// <summary>
        /// returns the list of proposal for repackaging
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="year"></param>
        /// <param name="batch"></param>
        /// <param name="block"></param>
        /// <param name="package"></param>
        /// <param name="collaboration"></param>
        /// <param name="proposalType"></param>
        /// <param name="upgradationType"></param>
        /// <returns></returns>
        public Array GetProposalsForRepackaging(int? page, int? rows, string sidx, string sord, out long totalRecords, int year, int batch, int block, string package, int collaboration, string proposalType, string upgradationType)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var lstPropsoals = dbContext.USP_GET_PROPOSALS_REPACKAGING(PMGSYSession.Current.DistrictCode, (block <= 0 ? 0 : block), (batch <= 0 ? 0 : batch), (year <= 0 ? 0 : year), package, (collaboration <= 0 ? 0 : collaboration), proposalType, upgradationType, PMGSYSession.Current.AdminNdCode, PMGSYSession.Current.PMGSYScheme).ToList();

                totalRecords = lstPropsoals.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstPropsoals = lstPropsoals.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ROAD_NAME":
                                lstPropsoals = lstPropsoals.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_YEAR":
                                lstPropsoals = lstPropsoals.OrderBy(m => m.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_BATCH":
                                lstPropsoals = lstPropsoals.OrderBy(m => m.IMS_BATCH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_PACKAGE_ID":
                                lstPropsoals = lstPropsoals.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstPropsoals = lstPropsoals.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_BLOCK_NAME":
                                lstPropsoals = lstPropsoals.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "ROAD_NAME":
                                lstPropsoals = lstPropsoals.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_YEAR":
                                lstPropsoals = lstPropsoals.OrderByDescending(m => m.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_BATCH":
                                lstPropsoals = lstPropsoals.OrderByDescending(m => m.IMS_BATCH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "IMS_PACKAGE_ID":
                                lstPropsoals = lstPropsoals.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstPropsoals = lstPropsoals.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstPropsoals = lstPropsoals.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }



                var result = lstPropsoals.Select(m => new
                {
                    m.IMS_PR_ROAD_CODE,
                    m.IMS_PACKAGE_ID,
                    m.IMS_ROAD_NAME,
                    m.MAST_BLOCK_NAME,
                    m.ROAD_LENGTH,
                    m.IMS_BATCH,
                    m.IMS_YEAR,
                }).ToArray();


                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        
                        m.MAST_BLOCK_NAME == null?"":m.MAST_BLOCK_NAME.ToString(),
                        m.IMS_BATCH == null?"-":"Batch "+m.IMS_BATCH.ToString(),
                        m.IMS_YEAR == null?"-":(m.IMS_YEAR + "-" + (m.IMS_YEAR + 1)).ToString(),
                        m.IMS_PACKAGE_ID == null?"-":m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_ROAD_NAME == null?"-":m.IMS_ROAD_NAME.ToString(),
                        m.ROAD_LENGTH == null?"-":m.ROAD_LENGTH.ToString(),
                        "<a href='#' title='Click here to add Repackaging Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddRepackagingDetails('" + URLEncrypt.EncryptParameters1(new string[]{"ProposalCode="+m.IMS_PR_ROAD_CODE.ToString().Trim() }) +"'); return false;'>Add Repackaging Details</a>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalsForRepackaging().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// updates the details of proposal after repackaging
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool AddRepackagingDetails(RepackagingDetailsViewModel model)
        {
            dbContext = new PMGSYEntities();
            Dictionary<string, string> decryptedParameters = null;
            try
            {
                string[] encryptedParameters = model.EncProposalCode.Split('/');
                decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                int proposalCode = Convert.ToInt32(decryptedParameters["ProposalCode"]);
                IMS_SANCTIONED_PROJECTS ims_master = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).FirstOrDefault();
                if (model.NewOldPackage == "Y")
                {
                    ims_master.IMS_PACKAGE_ID = model.ShortStateCode + model.NEW_PACKAGE_ID;
                }
                else
                {
                    ims_master.IMS_PACKAGE_ID = model.ExistingPackage;
                }
                ims_master.IMS_OLD_PACKAGE_ID = model.OLD_PACKAGE_ID;
                dbContext.Entry(ims_master).State = EntityState.Modified;
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddRepackagingDetails().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// get the details of proposal
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public RepackagingDetailsViewModel GetRepackagingDetails(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                TransactionParams objParam = new TransactionParams();
                CommonFunctions objCommon = new CommonFunctions();
                RepackagingDetailsViewModel model = new RepackagingDetailsViewModel();
                IMS_SANCTIONED_PROJECTS ims_master = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).FirstOrDefault();
                objParam.BlockCode = ims_master.MAST_BLOCK_CODE;
                model.OLD_PACKAGE_ID = ims_master.IMS_PACKAGE_ID;
                model.ShortStateCode = ims_master.MASTER_STATE.MAST_STATE_SHORT_CODE + (ims_master.MASTER_DISTRICT.MAST_DISTRICT_ID < 10 ? "0" + ims_master.MASTER_DISTRICT.MAST_DISTRICT_ID.ToString() : ims_master.MASTER_DISTRICT.MAST_DISTRICT_ID.ToString());

                model.lstYear = objCommon.PopulateAllYears(DateTime.Now.Year);
                SelectListItem itm = model.lstYear.Find(x => x.Value == "0");
                model.lstYear.Remove(itm);

                model.lstPackages = PopulatePackageBlockWise(objParam.BlockCode, DateTime.Now.Year);


                //model.lstPackages = new List<SelectListItem>();
                //model.lstPackages.Insert(0, new SelectListItem() { Text = "", Value = "" });
                return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetRepackagingDetails().DAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public List<SelectListItem> PopulatePackages(int proposalCode, int Year)
        {
            dbContext = new PMGSYEntities();
            int blockCode = 0;
            try
            {
                List<SelectListItem> PackageList = new List<SelectListItem>();

                //PackageList = new SelectList(lstPackages, "PACKAGE_CODE", "PACKAGE_NAME").ToList();
                //PackageList.Insert(0, new SelectListItem { Value = "0", Text = "All Packages" });

                blockCode = dbContext.IMS_SANCTIONED_PROJECTS.Where(c => c.IMS_PR_ROAD_CODE == proposalCode).Select(x => x.MAST_BLOCK_CODE).FirstOrDefault();

                PackageList = PopulatePackageBlockWise(blockCode, Year);
                return PackageList;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulatePackagesForRepackaging().DAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the list of packages for repackaging
        /// </summary>
        /// <param name="block"></param>
        /// <param name="year"></param>
        /// <param name="batch"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulatePackagesForRepackaging(int block, int year, int batch)
        {
            dbContext = new PMGSYEntities();
            try
            {
                List<SelectListItem> PackageList = new List<SelectListItem>();
                var lstPackages = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                   where
                                   (block == 0 ? 1 : item.MAST_BLOCK_CODE) == (block == 0 ? 1 : block) &&
                                   (year == 0 ? 1 : item.IMS_YEAR) == (year == 0 ? 1 : year) &&
                                   (batch == 0 ? 1 : item.IMS_BATCH) == (batch == 0 ? 1 : batch)
                                   select new
                                   {
                                       PACKAGE_CODE = item.IMS_PACKAGE_ID,
                                       PACKAGE_NAME = item.IMS_PACKAGE_ID
                                   }).Distinct().ToList();

                PackageList = new SelectList(lstPackages, "PACKAGE_CODE", "PACKAGE_NAME").ToList();
                PackageList.Insert(0, new SelectListItem { Value = "0", Text = "All Packages" });
                return PackageList;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulatePackagesForRepackaging().DAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion

        #region DPR_LIST

        /// <summary>
        /// list of DPR Proposals
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetDPRProposalListDAL(int stateCode, int districtCode, int blockCode, int year, int batch, int collaboStream, string proposalType, string proposalStatus, string packageId, string connectivity, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                //var lstDPRProposals = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_DPR_STATUS == "Y" && m.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode).ToList();
                var lstDPRProposals = (from m in dbContext.IMS_SANCTIONED_PROJECTS
                                       where
                                       (stateCode <= 0 ? 1 : m.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                                       (districtCode <= 0 ? 1 : m.MAST_DISTRICT_CODE) == (districtCode <= 0 ? 1 : districtCode) &&
                                       (blockCode <= 0 ? 1 : m.MAST_BLOCK_CODE) == (blockCode <= 0 ? 1 : blockCode) &&
                                       (year <= 0 ? 1 : m.IMS_YEAR) == (year <= 0 ? 1 : year) &&
                                       (batch <= 0 ? 1 : m.IMS_BATCH) == (batch <= 0 ? 1 : batch) &&
                                       (collaboStream <= 0 ? 1 : m.IMS_COLLABORATION) == (collaboStream <= 0 ? 1 : collaboStream) &&
                                       (proposalType == "%" ? "%" : m.IMS_PROPOSAL_TYPE) == (proposalType == "%" ? "%" : proposalType) &&
                                       (packageId == "0" ? "%" : m.IMS_PACKAGE_ID) == (packageId == "0" ? "%" : packageId) &&
                                       (connectivity == "0" ? "%" : m.IMS_UPGRADE_CONNECT) == (connectivity == "0" ? "%" : connectivity) &&
                                       m.IMS_DPR_STATUS == "Y" &&
                                       m.MAST_DPIU_CODE == ((PMGSYSession.Current.AdminNdCode == 0 || PMGSYSession.Current.RoleCode == 2) ? m.MAST_DPIU_CODE : PMGSYSession.Current.AdminNdCode)
                                       select new
                                       {
                                           m.IMS_PR_ROAD_CODE,
                                           m.IMS_PROPOSAL_TYPE,
                                           m.IMS_ROAD_NAME,
                                           m.IMS_BRIDGE_NAME,
                                           m.IMS_PAV_LENGTH,
                                           m.IMS_BRIDGE_LENGTH,
                                           m.IMS_BATCH,
                                           m.IMS_COLLABORATION,
                                           m.MASTER_BLOCK.MAST_BLOCK_NAME,
                                           m.IMS_PACKAGE_ID,
                                           m.IMS_UPGRADE_CONNECT,
                                           m.IMS_YEAR,
                                           m.IMS_LOCK_STATUS,
                                           m.IMS_SANCTIONED,
                                           ///Added by SAMMED A. PATIL on 08SEP2017 to display Total Cost
                                           m.IMS_SANCTIONED_PAV_AMT,
                                           m.IMS_SANCTIONED_PW_AMT,
                                           m.IMS_SANCTIONED_OW_AMT,
                                           m.IMS_SANCTIONED_CD_AMT,
                                           m.IMS_SANCTIONED_FC_AMT,
                                           m.IMS_SANCTIONED_HS_AMT,
                                           m.IMS_SANCTIONED_BW_AMT,
                                           m.IMS_SANCTIONED_BS_AMT,
                                           m.IMS_SANCTIONED_RS_AMT
                                       }).ToList();
                totalRecords = lstDPRProposals.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_ROAD_NAME":
                                lstDPRProposals = lstDPRProposals.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstDPRProposals = lstDPRProposals.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "IMS_ROAD_NAME":
                                lstDPRProposals = lstDPRProposals.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstDPRProposals = lstDPRProposals.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                else
                {
                    lstDPRProposals = lstDPRProposals.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                var result = lstDPRProposals.Select(m => new
                {

                    m.IMS_PR_ROAD_CODE,
                    m.IMS_PROPOSAL_TYPE,
                    m.IMS_ROAD_NAME,
                    m.IMS_BRIDGE_NAME,
                    m.IMS_PAV_LENGTH,
                    m.IMS_BRIDGE_LENGTH,
                    m.IMS_BATCH,
                    m.IMS_COLLABORATION,
                    m.MAST_BLOCK_NAME,
                    m.IMS_PACKAGE_ID,
                    m.IMS_UPGRADE_CONNECT,
                    m.IMS_YEAR,
                    m.IMS_LOCK_STATUS,
                    m.IMS_SANCTIONED,
                    ///Added by SAMMED A. PATIL on 08SEP2017 to display Total Cost
                    IMS_TOTAL_COST = Convert.ToString((PMGSYSession.Current.PMGSYScheme == 1 || PMGSYSession.Current.PMGSYScheme == 3)
                                     ? ((m.IMS_SANCTIONED_PAV_AMT == null ? 0 : m.IMS_SANCTIONED_PAV_AMT) + (m.IMS_SANCTIONED_PW_AMT == null ? 0 : m.IMS_SANCTIONED_PW_AMT) + (m.IMS_SANCTIONED_OW_AMT == null ? 0 : m.IMS_SANCTIONED_OW_AMT) + (m.IMS_SANCTIONED_CD_AMT == null ? 0 : m.IMS_SANCTIONED_CD_AMT) + (m.IMS_SANCTIONED_BW_AMT == null ? 0 : m.IMS_SANCTIONED_BW_AMT) + (m.IMS_SANCTIONED_BS_AMT == null ? 0 : m.IMS_SANCTIONED_BS_AMT) + (m.IMS_SANCTIONED_RS_AMT == null ? 0 : m.IMS_SANCTIONED_RS_AMT))
                                     : ((m.IMS_SANCTIONED_PAV_AMT == null ? 0 : m.IMS_SANCTIONED_PAV_AMT) + (m.IMS_SANCTIONED_PW_AMT == null ? 0 : m.IMS_SANCTIONED_PW_AMT) + (m.IMS_SANCTIONED_OW_AMT == null ? 0 : m.IMS_SANCTIONED_OW_AMT) + (m.IMS_SANCTIONED_CD_AMT == null ? 0 : m.IMS_SANCTIONED_CD_AMT) + (m.IMS_SANCTIONED_FC_AMT == null ? 0 : m.IMS_SANCTIONED_FC_AMT) + (m.IMS_SANCTIONED_HS_AMT == null ? 0 : m.IMS_SANCTIONED_HS_AMT) + (m.IMS_SANCTIONED_BW_AMT == null ? 0 : m.IMS_SANCTIONED_BW_AMT) + (m.IMS_SANCTIONED_BS_AMT == null ? 0 : m.IMS_SANCTIONED_BS_AMT)))
                }).ToArray();

                return result.Select(m => new
                {
                    cell = new[] 
                    {
                        
                        m.MAST_BLOCK_NAME == null?"":m.MAST_BLOCK_NAME.ToString(),
                        m.IMS_BATCH == null?"-":"Batch "+m.IMS_BATCH.ToString(),
                        m.IMS_YEAR == null?"-":(m.IMS_YEAR + "-" + (m.IMS_YEAR + 1)).ToString(),
                        m.IMS_PACKAGE_ID == null?"-":m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? m.IMS_ROAD_NAME.ToString() : m.IMS_BRIDGE_NAME.ToString(),
                        m.IMS_PROPOSAL_TYPE == "P" ? m.IMS_PAV_LENGTH.ToString() : m.IMS_BRIDGE_LENGTH.ToString(),
                        ///Added by SAMMED A. PATIL on 08SEP2017 to display Total Cost
                        m.IMS_TOTAL_COST,
                        "<a href='#' title='Click here to view proposal details' class='ui-icon ui-icon-zoomin ui-align-center' onClick=ViewDPRDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + m.IMS_LOCK_STATUS +"'); return false;'>View DPR Proposal Details</a>",
                       // ((dbContext.TEND_AGREEMENT_DETAIL.Any(a=>a.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || dbContext.ACC_BILL_DETAILS.Any(b=>b.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || dbContext.MANE_IMS_CONTRACT.Any(c=>c.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) || (m.IMS_PROPOSAL_TYPE == "P" ? dbContext.EXEC_ROADS_MONTHLY_STATUS.Any(er=>er.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE) : dbContext.EXEC_LSB_MONTHLY_STATUS.Any(el=>el.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)) || dbContext.EXEC_PROGRESS.Any(ep=>ep.IMS_PR_ROAD_CODE == m.IMS_PR_ROAD_CODE)) && m.IMS_SANCTIONED == "Y") ? "<span><center>-</center></span>" : "<a href='#' title='Click here to delete proposal details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteDPRDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Delete DPR Proposal Details</a>"
                       "<a href='#' title='Click here to delete proposal details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteDPRDetails('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Delete DPR Proposal Details</a>",
                       "<a href='#' title='Click here to edit DPR Proposal Year' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditDPRYear('" + m.IMS_PR_ROAD_CODE.ToString().Trim() + "'); return false;'>Update DPR Proposal Year</a>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetDPRProposalListDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Get Additional Cost Details.
        /// </summary>
        /// <param name="TransctionCode"></param>
        /// <param name="ImsPrRoadCode"></param>
        /// <returns></returns>
        public bool UpdateYearDPRDAL(int ImsPrRoadCode, int sanctionYear)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == ImsPrRoadCode).FirstOrDefault();

                if (ims_sanctioned_projects != null)
                {
                    ims_sanctioned_projects.IMS_YEAR = sanctionYear;
                    ims_sanctioned_projects.IMS_DPR_STATUS = "N";
                    ims_sanctioned_projects.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_projects.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_projects).State = EntityState.Modified;
                    dbContext.SaveChanges();
                }
                return true;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditAdditionalCostDetailsDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// deletes the DPR Proposals
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public bool DeleteDPRProposalDAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();

            var adapter = (IObjectContextAdapter)dbContext;
            var objectContext = adapter.ObjectContext;
            objectContext.CommandTimeout = 0;

            try
            {
                int count = dbContext.USP_DPR_DELETE_PROP(proposalCode);
                if (count >= 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteDPRProposalDAL().DAL");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region OLD_PROPOSAL_UPDATE

        /// <summary>
        /// list of proposal for updation of batch , year , stage construction at srrda
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="IMS_YEAR"></param>
        /// <param name="MAST_BLOCK_ID"></param>
        /// <param name="IMS_BATCH"></param>
        /// <param name="IMS_STREAMS"></param>
        /// <param name="IMS_PROPOSAL_TYPE"></param>
        /// <param name="adminCode"></param>
        /// <param name="IMS_PROPOSAL_STATUS"></param>
        /// <param name="IMS_UPGRADE_CONNECT"></param>
        /// <returns></returns>
        public Array GetProposalsForUpdateDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, int IMS_YEAR, int MAST_BLOCK_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, int adminCode, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT)
        {
            dbContext = new PMGSYEntities();
            try
            {
                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "N";
                                MRDStatus = "N";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "S";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }

                List<string> lstStateTypes = new List<string>();
                lstStateTypes.Add("N");
                lstStateTypes.Add("H");
                lstStateTypes.Add("X");
                lstStateTypes.Add("D");

                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();

                var listProposals = dbContext.USP_GET_PROPOSAL_LIST(2, stateCode, (districtCode <= 0 ? 0 : districtCode), (MAST_BLOCK_ID <= 0 ? 0 : MAST_BLOCK_ID), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, (IMS_PROPOSAL_TYPE == "A" ? "%" : IMS_PROPOSAL_TYPE), (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                IQueryable<USP_GET_PROPOSAL_LIST_Result> query = listProposals.AsQueryable<USP_GET_PROPOSAL_LIST_Result>();
                totalRecords = listProposals.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    (dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(m=>m.ADMIN_DEPARTMENT.ADMIN_ND_NAME).FirstOrDefault()),
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    (propDetails.IMS_LOCK_STATUS == "M" || propDetails.IMS_SANCTIONED == "N") ? "<a href='#' title='Click here to edit the proposal' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>" : "<span style='text-align:center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((((dbContext.MASTER_DISTRICT.Where(m=>m.MAST_DISTRICT_CODE == propDetails.MAST_DISTRICT_CODE).Select(m=>m.MAST_IAP_DISTRICT).FirstOrDefault() == "Y") || (dbContext.MASTER_BLOCK.Where(m=>m.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE).Select(m=>m.MAST_SCHEDULE5).FirstOrDefault() == "Y") || lstStateTypes.Contains(dbContext.MASTER_STATE.Where(m=>m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(m=>m.MAST_STATE_TYPE).FirstOrDefault())) && (propDetails.IMS_IS_STAGED != "S")) ? "<a href='#' title='Click here to change status the proposal' onClick='ChangeCompleteProposalToStaged(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Stage I</a>": "<span style='text-align:center'>-</span>"):"<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((propDetails.IMS_IS_STAGED == "S" && propDetails.STAGE_CONST == "Stage I") ? "<a href='#' title='Click here to change status to complete' onClick='ChangeStagedProposalToComplete(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Complete</a>": "<span style='text-align:center'>-</span>"): "<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((((dbContext.MASTER_DISTRICT.Where(m=>m.MAST_DISTRICT_CODE == propDetails.MAST_DISTRICT_CODE).Select(m=>m.MAST_IAP_DISTRICT).FirstOrDefault() == "Y") || (dbContext.MASTER_BLOCK.Where(m=>m.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE).Select(m=>m.MAST_SCHEDULE5).FirstOrDefault() == "Y") || lstStateTypes.Contains(dbContext.MASTER_STATE.Where(m=>m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(m=>m.MAST_STATE_TYPE).FirstOrDefault()))) && (propDetails.IMS_IS_STAGED == "S" && propDetails.STAGE_CONST == "Stage I") ? "<a href='#' title='Click here to change status to Stage2' onClick='ChangeStage1ProposalToStage2(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Stage 2</a>": "<span style='text-align:center'>-</span>") : "<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((((dbContext.MASTER_DISTRICT.Where(m=>m.MAST_DISTRICT_CODE == propDetails.MAST_DISTRICT_CODE).Select(m=>m.MAST_IAP_DISTRICT).FirstOrDefault() == "Y") || (dbContext.MASTER_BLOCK.Where(m=>m.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE).Select(m=>m.MAST_SCHEDULE5).FirstOrDefault() == "Y") || lstStateTypes.Contains(dbContext.MASTER_STATE.Where(m=>m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(m=>m.MAST_STATE_TYPE).FirstOrDefault()))) && (propDetails.IMS_IS_STAGED == "C") ? "<a href='#' title='Click here to change status to Stage 2' onClick='ChangeCompleteProposalToStage2(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Stage 2</a>": "<span style='text-align:center'>-</span>") : "<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    "<input type='checkbox' name='piuUpdation' class='piuupdate' role='checkbox' value='"+propDetails.IMS_PR_ROAD_CODE+"'>",
                                    "<input type='checkbox' name='blockUpdation' class='blockupdate' role='checkbox' value='"+propDetails.IMS_PR_ROAD_CODE+"'>"

                   }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalsForUpdateDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the list of proposals have no core network mapped.
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="IMS_YEAR"></param>
        /// <param name="MAST_BLOCK_ID"></param>
        /// <param name="IMS_BATCH"></param>
        /// <param name="IMS_STREAMS"></param>
        /// <param name="IMS_PROPOSAL_TYPE"></param>
        /// <param name="adminCode"></param>
        /// <param name="IMS_PROPOSAL_STATUS"></param>
        /// <param name="IMS_UPGRADE_CONNECT"></param>
        /// <returns></returns>
        public Array GetProposalsForCNMappingDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, int IMS_YEAR, int MAST_BLOCK_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, int adminCode, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                short roleCode = dbContext.UM_User_Master.Where(m => m.UserID == PMGSYSession.Current.UserId).Select(m => m.DefaultRoleID).FirstOrDefault();
                var query = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                             where
                              item.MAST_DPIU_CODE == PMGSYSession.Current.AdminNdCode
                                 //&& item.PLAN_CN_ROAD_CODE == null
                              && item.IMS_YEAR > 1950
                              && (IMS_UPGRADE_CONNECT == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT)
                              && (IMS_YEAR <= 0 ? 1 : item.IMS_YEAR) == (IMS_YEAR <= 0 ? 1 : IMS_YEAR)
                              && (MAST_BLOCK_ID <= 0 ? 1 : item.MAST_BLOCK_CODE) == (MAST_BLOCK_ID <= 0 ? 1 : MAST_BLOCK_ID)
                              && (IMS_BATCH <= 0 ? 1 : item.IMS_BATCH) == (IMS_BATCH <= 0 ? 1 : IMS_BATCH)
                              && (IMS_PROPOSAL_TYPE == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (IMS_PROPOSAL_TYPE == "A" ? "%" : IMS_PROPOSAL_TYPE)
                              && (IMS_STREAMS <= 0 ? 1 : item.IMS_COLLABORATION) == (IMS_STREAMS <= 0 ? 1 : IMS_STREAMS)
                             select new
                             {
                                 item.MASTER_BLOCK.MAST_BLOCK_NAME,
                                 item.IMS_BATCH,
                                 item.IMS_PACKAGE_ID,
                                 item.IMS_YEAR,
                                 item.IMS_PROPOSAL_TYPE,
                                 item.IMS_ROAD_NAME,
                                 item.IMS_BRIDGE_NAME,
                                 item.IMS_PAV_LENGTH,
                                 item.IMS_BRIDGE_LENGTH,
                                 item.IMS_UPGRADE_CONNECT,
                                 item.IMS_PR_ROAD_CODE,
                                 item.PLAN_CN_ROAD_CODE,
                                 item.IMS_SANCTIONED,
                                 //IMS_LOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(item.MAST_STATE_CODE, item.MAST_DISTRICT_CODE, item.MAST_BLOCK_CODE, 0, 0, item.IMS_PR_ROAD_CODE, item.IMS_BATCH, item.IMS_YEAR, "PR", PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "M" : (item.IMS_LOCK_STATUS))
                                 IMS_LOCK_STATUS = (dbContext.UDF_IMS_UNLOCK_STATUS(item.MAST_STATE_CODE, item.MAST_DISTRICT_CODE, item.MAST_BLOCK_CODE, 0, 0, item.IMS_PR_ROAD_CODE, item.IMS_BATCH, item.IMS_YEAR, "PR", PMGSYSession.Current.PMGSYScheme, roleCode).Select(m => m.UNLOCK_COUNT).FirstOrDefault() > 0 ? "M" : (item.IMS_LOCK_STATUS))
                             }).ToList();

                totalRecords = query.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }

                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    "Batch -" + propDetails.IMS_BATCH.ToString(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    (propDetails.IMS_YEAR + " - " + (propDetails.IMS_YEAR + 1)).ToString(),
                                    propDetails.IMS_PROPOSAL_TYPE == "P" ? propDetails.IMS_ROAD_NAME.ToString() : propDetails.IMS_BRIDGE_NAME.ToString(),
                                    propDetails.IMS_PROPOSAL_TYPE == "P" ? "Road" : "Bridge",
                                    propDetails.IMS_UPGRADE_CONNECT == "N" ? "New" : "Upgradation",
                                    propDetails.IMS_PROPOSAL_TYPE == "P" ? propDetails.IMS_PAV_LENGTH.ToString() : propDetails.IMS_BRIDGE_LENGTH.ToString(),
                                    //propDetails.IMS_LOCK_STATUS == "M" ? "<a href='#' title='Click here to map core network' class='ui-icon ui-icon-plusthick ui-align-center' onClick='MapCoreNetwork(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Map Details</a>":"<span class='ui-icon ui-icon-locked ui-align-center'></span>",

                                    ///Old Code Before Changes for Dropped and Sanctioned Proposals on 9APR2019
                                    //(propDetails.PLAN_CN_ROAD_CODE == null ? "<a href='#' title='Click here to map core network' class='ui-icon ui-icon-plusthick ui-align-center' onClick='MapCoreNetwork(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Map Details</a>" : "<center><span style='text-align:center'>-</span></center>"),
                                    
                                    ((propDetails.PLAN_CN_ROAD_CODE == null && (propDetails.IMS_SANCTIONED.Trim() != "D" && propDetails.IMS_SANCTIONED.Trim() != "Y")) ? "<a href='#' title='Click here to map core network' class='ui-icon ui-icon-plusthick ui-align-center' onClick='MapCoreNetwork(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Map Details</a>" : "<center><span style='text-align:center'>-</span></center>"),

                                    //(propDetails.IMS_LOCK_STATUS == "M" || propDetails.IMS_LOCK_STATUS == "Y") ? (propDetails.PLAN_CN_ROAD_CODE != null ? "<a href='#' title='Click here to change core network' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ChangeCoreNetwork(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Change Details</a>": "<center><span style='text-align:center'>-</span></center>"):  "<center><span style='text-align:center' class='ui-icon ui-icon-locked ui-align-center'>-</span></center>",
                                    
                                    ///Old Code Before Changes for Dropped and Sanctioned Proposals on 9APR2019
                                    //(propDetails.IMS_LOCK_STATUS == "M" || propDetails.IMS_LOCK_STATUS == "N") ? "<a href='#' title='Click here to change core network' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ChangeCoreNetwork(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Change Details</a>" : "<center><span style='text-align:center' class='ui-icon ui-icon-locked ui-align-center'>-</span></center>",

                                    (propDetails.IMS_SANCTIONED.Trim() == "D" || propDetails.IMS_SANCTIONED.Trim() == "Y")
                                    ? "<center><span style='text-align:center' class='ui-icon ui-icon-locked ui-align-center'>-</span></center>"
                                    : "<a href='#' title='Click here to change core network' class='ui-icon ui-icon-plusthick ui-align-center' onClick='ChangeCoreNetwork(\"" + URLEncrypt.EncryptParameters(new string[]                                                                           { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Change Details</a>",

                                    "<a href='#' title='Click here to change core network' class='ui-icon ui-icon-plusthick ui-align-center' onClick='UpdateBlockDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Change Details</a>"
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalsForCNMappingDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the details of batch and year
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool UpdateProposalDetailsDAL(ProposalUpdateViewModel model, out string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int proposalCode = 0;
                string[] encryptedParams = model.EncryptedProposalCode.Split('/');
                if (encryptedParams.Count() == 3)
                {
                    string[] decryptedParams = URLEncrypt.DecryptParameters(new string[] { encryptedParams[0], encryptedParams[1], encryptedParams[2] });
                    proposalCode = Convert.ToInt32(decryptedParams[0]);
                }

                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == proposalCode))
                {
                    if (imsMaster.IMS_YEAR != model.Year)
                    {

                        //commented by Vikram on 26 Sept 2014
                        //message = "Staged construction or LSB is present against this Proposal . so year can not be changed.";
                        //return false;

                        var proposals = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == proposalCode).ToList();
                        if (proposals.Count() > 0)
                        {
                            proposals.ForEach(m => m.IMS_STAGED_YEAR = model.Year);
                            dbContext.SaveChanges();
                        }
                    }
                }

                if (imsMaster != null)
                {
                    imsMaster.IMS_BATCH = model.Batch;
                    imsMaster.IMS_YEAR = model.Year;
                    imsMaster.USERID = PMGSYSession.Current.UserId;
                    imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(imsMaster).State = EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "Proposal details updated successfully.";
                    return true;
                }
                else
                {
                    message = "Error occurred while updating the details.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateProposalDetailsDAL().DAL");
                message = "Error occurred while updating the details.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// returns the old details of proposal
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public ProposalUpdateViewModel GetOldProposalDetailsDAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            ProposalUpdateViewModel model = new ProposalUpdateViewModel();
            try
            {
                if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    model.Batch = imsMaster.IMS_BATCH;
                    model.Year = imsMaster.IMS_YEAR;
                    model.lstBatchs = objCommon.PopulateUnFreezedBatch(PMGSYSession.Current.StateCode, model.Year, false);
                    if (!model.lstBatchs.Any(m => m.Value == model.Batch.ToString()))
                    {
                        model.lstBatchs.Add(new SelectListItem { Value = model.Batch.ToString(), Text = "Batch " + model.Batch });
                    }
                    model.lstYears = new SelectList(objCommon.PopulateFinancialYear(false, false).ToList(), "Value", "Text").ToList();
                    return model;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetOldProposalDetailsDAL().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// changes the status of complete proposals to staged construction 
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool ChangeCompleteProposalToStagedDAL(int proposalCode, out string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                imsMaster.IMS_IS_STAGED = "S";
                imsMaster.IMS_STAGE_PHASE = "S1";
                imsMaster.USERID = PMGSYSession.Current.UserId;
                imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(imsMaster).State = EntityState.Modified;
                dbContext.SaveChanges();
                message = "Proposal Updated Successfully.";
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ChangeCompleteProposalToStagedDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// changes the status of staged proposal to complete
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool ChangeStagedProposalToCompleteDAL(int proposalCode, out string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == proposalCode && m.IMS_IS_STAGED == "S" && m.IMS_STAGE_PHASE == "S2"))
                {
                    message = "Stage 2 construction is present on this road. so status can not be changed. ";
                    return false;
                }
                else
                {
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    imsMaster.IMS_IS_STAGED = "C";
                    imsMaster.IMS_STAGE_PHASE = null;
                    imsMaster.IMS_STAGED_PACKAGE_ID = null;
                    imsMaster.IMS_STAGED_ROAD_ID = null;
                    imsMaster.IMS_STAGED_YEAR = null;
                    imsMaster.USERID = PMGSYSession.Current.UserId;
                    imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(imsMaster).State = EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "Proposal Updated Successfully.";
                    return true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ChangeStagedProposalToCompleteDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// updates the proposal -- maps the core network with the proposal
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool MapCoreNetworkDetailsDAL(CoreNetworkMappingViewModel model)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.ProposalCode);
                    if (imsMaster != null)
                    {
                        imsMaster.PLAN_CN_ROAD_CODE = model.CnCode;
                        imsMaster.USERID = PMGSYSession.Current.UserId;
                        imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(imsMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }

                    List<int> lstProposalMappedHabitations = dbContext.IMS_BENEFITED_HABS.Where(item => item.IMS_PR_ROAD_CODE == imsMaster.IMS_PR_ROAD_CODE).Select(item => item.MAST_HAB_CODE).ToList<int>();
                    List<int> lstCnMappedHabitations = dbContext.PLAN_ROAD_HABITATION.Where(item => item.PLAN_CN_ROAD_CODE == model.CnCode).Select(item => item.MAST_HAB_CODE).ToList<int>();
                    var lstToRemove = lstProposalMappedHabitations.Except(lstCnMappedHabitations).ToList();
                    foreach (var item in lstToRemove)
                    {
                        IMS_BENEFITED_HABS imsHabs = dbContext.IMS_BENEFITED_HABS.Where(m => m.MAST_HAB_CODE == item && m.IMS_PR_ROAD_CODE == model.ProposalCode).FirstOrDefault();
                        dbContext.IMS_BENEFITED_HABS.Remove(imsHabs);
                        dbContext.SaveChanges();
                    }
                    ts.Complete();
                    return true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "MapCoreNetworkDetailsDAL().DAL");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the proposal details according to the proposal code
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public CoreNetworkMappingViewModel GetProposalDetails(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                CoreNetworkMappingViewModel model = new CoreNetworkMappingViewModel();
                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                model.ProposalCode = proposalCode;
                model.ProposalType = imsMaster.IMS_PROPOSAL_TYPE;
                model.UpgradeConnect = imsMaster.IMS_UPGRADE_CONNECT;
                model.Block = imsMaster.MAST_BLOCK_CODE;
                model.CnCode = imsMaster.PLAN_CN_ROAD_CODE.HasValue ? imsMaster.PLAN_CN_ROAD_CODE.Value : 0;
                return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalDetails().DAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// changes the status of Stage 1 proposal to stage 2 and map the stage1 proposals.
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool ChangeStage1ProposalToStage2DAL(Stage1ToStage2ViewModel model)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.ProposalCode);
                    if (imsMaster != null)
                    {
                        imsMaster.IMS_STAGED_YEAR = model.STAGE_YEAR;
                        imsMaster.IMS_STAGED_PACKAGE_ID = model.STAGE_PACKAGE;
                        imsMaster.IMS_STAGED_ROAD_ID = model.STAGE_PROPOSAL;
                        imsMaster.IMS_STAGE_PHASE = "S2";
                        imsMaster.USERID = PMGSYSession.Current.UserId;
                        imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(imsMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();

                        var benefitedHabs = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == model.STAGE_PROPOSAL).ToList();
                        foreach (var item in benefitedHabs)
                        {
                            IMS_BENEFITED_HABS benHabMaster = new IMS_BENEFITED_HABS();
                            benHabMaster.IMS_PR_ROAD_CODE = model.ProposalCode;
                            benHabMaster.MAST_HAB_CODE = item.MAST_HAB_CODE;
                            benHabMaster.MAST_CLUSTER_CODE = null;
                            benHabMaster.HAB_INCLUDED = "Y";
                            benHabMaster.USERID = PMGSYSession.Current.UserId;
                            benHabMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.IMS_BENEFITED_HABS.Add(benHabMaster);
                            dbContext.SaveChanges();
                        }

                        //CopyHabitationsonConvertingStage1toStage2DAL(model.STAGE_PROPOSAL, model.ProposalCode);

                        // code for updating the stage 2 proposals if the stage 1 proposal is changed.
                        var stage2Roads = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == model.ProposalCode && m.IMS_STAGE_PHASE == "S1").Select(m => m.IMS_PR_ROAD_CODE).ToList();

                        foreach (var item in stage2Roads)
                        {
                            IMS_SANCTIONED_PROJECTS stage2ProposalDetails = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == item).FirstOrDefault();
                            stage2ProposalDetails.IMS_STAGED_ROAD_ID = null;
                            stage2ProposalDetails.IMS_STAGED_YEAR = null;
                            stage2ProposalDetails.IMS_STAGED_PACKAGE_ID = null;
                            dbContext.Entry(stage2ProposalDetails).State = EntityState.Modified;
                            dbContext.SaveChanges();
                        }

                        ts.Complete();
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ChangeStage1ProposalToStage2DAL()");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// changes the status of Complete Proposals to Stage 2
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool ChangeCompleteProposalsToStage2DAL(Stage1ToStage2ViewModel model)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == model.ProposalCode).FirstOrDefault();
                    if (imsMaster != null)
                    {
                        imsMaster.IMS_IS_STAGED = "S";
                        imsMaster.IMS_STAGE_PHASE = "S2";
                        imsMaster.IMS_STAGED_PACKAGE_ID = model.STAGE_PACKAGE;
                        imsMaster.IMS_STAGED_ROAD_ID = model.STAGE_PROPOSAL;
                        imsMaster.IMS_STAGED_YEAR = model.STAGE_YEAR;
                        imsMaster.USERID = PMGSYSession.Current.UserId;
                        imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(imsMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();

                        var benefitedHabs = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == model.STAGE_PROPOSAL).ToList();
                        foreach (var item in benefitedHabs)
                        {
                            IMS_BENEFITED_HABS benHabMaster = new IMS_BENEFITED_HABS();
                            benHabMaster.IMS_PR_ROAD_CODE = model.ProposalCode;
                            benHabMaster.MAST_HAB_CODE = item.MAST_HAB_CODE;
                            benHabMaster.MAST_CLUSTER_CODE = null;
                            benHabMaster.HAB_INCLUDED = "Y";
                            benHabMaster.USERID = PMGSYSession.Current.UserId;
                            benHabMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.IMS_BENEFITED_HABS.Add(benHabMaster);
                            dbContext.SaveChanges();
                        }
                        ts.Complete();
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ChangeCompleteProposalsToStage2DAL()");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the details of proposal by proposal code
        /// </summary>
        /// <param name="proposalCode"></param>
        /// <returns></returns>
        public IMS_SANCTIONED_PROJECTS GetSanctionMaster(int proposalCode)
        {
            dbContext = new PMGSYEntities();

            try
            {
                return dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetSanctionMaster().DAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the PIU name of Proposal
        /// </summary>
        /// <param name="proposalCode">proposal id for getting PIU</param>
        /// <returns></returns>
        public string GetProposalPIUNameDAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                return dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).Select(m => m.ADMIN_DEPARTMENT.ADMIN_ND_NAME).FirstOrDefault();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalPIUNameDAL().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// updates the PIU details of Proposal
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        //public bool UpdateProposalPIUDetailsDAL(ProposalPIUUpdateViewModel model)
        //{
        //    dbContext = new PMGSYEntities();
        //    try
        //    {
        //        using (TransactionScope ts = new TransactionScope())
        //        {
        //            string[] proposalParams = model.ProposalArray.Split(',');
        //            int[] imsProposals = Array.ConvertAll(proposalParams, s => int.Parse(s));
        //            var sanctionDetails = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => imsProposals.Contains(m.IMS_PR_ROAD_CODE)).ToList();
        //            sanctionDetails.ForEach(m => m.MAST_DPIU_CODE = model.AdminNdCode);
        //            dbContext.SaveChanges();
        //            ts.Complete();
        //            return true;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.LogError(ex, "UpdateProposalPIUDetailsDAL().DAL");
        //        return false;
        //    }
        //    finally
        //    {
        //        if (dbContext != null)
        //        {
        //            dbContext.Dispose();
        //        }
        //    }
        //}

        public string UpdateProposalPIUDetailsDAL(ProposalPIUUpdateViewModel_New model)
        {
            dbContext = new PMGSYEntities();

            try
            {

                var Last_Modified_Record = dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Where(m => m.PACKAGE_NUMBER == model.PackageId).OrderByDescending(x => x.DATE_OF_UPDATION).FirstOrDefault();


                if (Last_Modified_Record != null)
                {
                    if (Last_Modified_Record.NEW_PIU_ID == model.AdminNdCode)
                    {
                        return "4";
                    }
                    else
                    {
                        return ChangeProposalPIUDetails(model);
                    }

                }
                else
                {
                    return ChangeProposalPIUDetails(model);
                }


            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateProposalPIUDetailsDAL().DAL");
                return "fail";
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public string ChangeProposalPIUDetails(ProposalPIUUpdateViewModel_New model)
        {
            dbContext = new PMGSYEntities();

            try
            {
                using (TransactionScope ts = new TransactionScope())
                {

                    string proposalParams = model.PackageId;
                    int District_Code = model.DistrictCode;  // change

                    List<IMS_SANCTIONED_PROJECTS> sanctionDetails = new List<IMS_SANCTIONED_PROJECTS>();
                    sanctionDetails = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PACKAGE_ID == proposalParams).ToList();

                    string flag = "0";
                    //string identity_flag="1";

                    ArrayList DistrictList = new ArrayList();   // change
                    ArrayList PMGSY_SCHEME = new ArrayList();
                    ArrayList MAST_DPIU_CODE = new ArrayList();
                    ArrayList IMS_Year = new ArrayList();

                    if (sanctionDetails.Count == 1)
                    {
                        IMS_PROPOSAL_CHANGE_PIU_LOG PIU_CHANGE_RECORD = new IMS_PROPOSAL_CHANGE_PIU_LOG();

                        //var Road_Code = sanctionDetails.Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();
                        //var record = dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Where(m => m.ROAD_CODE == Road_Code && m.PACKAGE_NUMBER == proposalParams).FirstOrDefault();

                        PIU_CHANGE_RECORD.PACKAGE_NUMBER = proposalParams;

                        //To get Road Code use sanctionDetails

                        PIU_CHANGE_RECORD.ROAD_CODE = sanctionDetails.Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();

                        //To get old DPIU code use sanctionDetails
                        PIU_CHANGE_RECORD.OLD_PIU_ID = sanctionDetails.Select(m => m.MAST_DPIU_CODE).FirstOrDefault();

                        //To assign new dpiu code use model.AdminNdCode
                        PIU_CHANGE_RECORD.NEW_PIU_ID = model.AdminNdCode;

                        //To get old srrda id use linque query
                        var old_ADMIN_ND_CODE = sanctionDetails.Select(m => m.MAST_DPIU_CODE).FirstOrDefault();

                        int DistrictCode = model.DistrictCode;
                        int StateCode = dbContext.MASTER_DISTRICT.Where(x => x.MAST_DISTRICT_CODE == DistrictCode).Select(x => x.MAST_STATE_CODE).FirstOrDefault();


                        PIU_CHANGE_RECORD.OLD_SRRDA_ID = dbContext.ADMIN_DEPARTMENT.First(m => m.MAST_STATE_CODE == StateCode && m.ADMIN_ND_CODE == old_ADMIN_ND_CODE && m.MAST_ND_TYPE == "D").MAST_PARENT_ND_CODE.Value;

                        PIU_CHANGE_RECORD.NEW_SRRDA_ID = dbContext.ADMIN_DEPARTMENT.First(m => m.MAST_STATE_CODE == StateCode && m.ADMIN_ND_CODE == model.AdminNdCode && m.MAST_ND_TYPE == "D").MAST_PARENT_ND_CODE.Value;

                        PIU_CHANGE_RECORD.ID = (dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Any() ? dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Max(m => m.ID) + 1 : 1);

                        PIU_CHANGE_RECORD.DATE_OF_UPDATION = System.DateTime.Now;

                        PIU_CHANGE_RECORD.PMGSY_SCHEME = sanctionDetails.Select(m => m.MAST_PMGSY_SCHEME).FirstOrDefault(); 


                        //if (PIU_CHANGE_RECORD.NEW_PIU_ID == Last_Modified_Record.NEW_PIU_ID)
                        //{
                        //    return "4";
                        //}
                        //else
                        //{
                        //    dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Add(PIU_CHANGE_RECORD);
                        //}

                        dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Add(PIU_CHANGE_RECORD);
                        sanctionDetails.ForEach(m => m.MAST_DPIU_CODE = model.AdminNdCode);

                        dbContext.SaveChanges();
                        ts.Complete();
                        return "success";
                        //return true;

                    }
                    else if (sanctionDetails.Count > 1)
                    {
                        ((IObjectContextAdapter)dbContext).ObjectContext.CommandTimeout = 180;

                        foreach (var item in sanctionDetails)
                        {
                            PMGSY_SCHEME.Add(item.MAST_PMGSY_SCHEME);
                            MAST_DPIU_CODE.Add(item.MAST_DPIU_CODE);
                            DistrictList.Add(item.MAST_DISTRICT_CODE);  // change
                            IMS_Year.Add(item.IMS_YEAR);

                            #region Modify records in IMS_PROPOSAL_CHANGE_PIU_LOG , IMS_SANCTIONED_PROJECTS Tables

                            IMS_PROPOSAL_CHANGE_PIU_LOG PIU_CHANGE_RECORD = new IMS_PROPOSAL_CHANGE_PIU_LOG();

                            PIU_CHANGE_RECORD.PACKAGE_NUMBER = proposalParams;

                            //To get Road Code use sanctionDetails
                            PIU_CHANGE_RECORD.ROAD_CODE = item.IMS_PR_ROAD_CODE;

                            //To get old DPIU code use sanctionDetails
                            PIU_CHANGE_RECORD.OLD_PIU_ID = item.MAST_DPIU_CODE;


                            //To assign new dpiu code use model.AdminNdCode
                            PIU_CHANGE_RECORD.NEW_PIU_ID = model.AdminNdCode;

                            //To get old srrda id use linque query
                            var old_ADMIN_ND_CODE = item.MAST_DPIU_CODE;

                            int DistrictCode = model.DistrictCode;
                            int StateCode = dbContext.MASTER_DISTRICT.Where(x => x.MAST_DISTRICT_CODE == DistrictCode).Select(x => x.MAST_STATE_CODE).FirstOrDefault();

                            PIU_CHANGE_RECORD.OLD_SRRDA_ID = dbContext.ADMIN_DEPARTMENT.First(m => m.MAST_STATE_CODE == StateCode && m.ADMIN_ND_CODE == old_ADMIN_ND_CODE && m.MAST_ND_TYPE == "D").MAST_PARENT_ND_CODE.Value;
                            PIU_CHANGE_RECORD.NEW_SRRDA_ID = dbContext.ADMIN_DEPARTMENT.First(m => m.MAST_STATE_CODE == StateCode && m.ADMIN_ND_CODE == model.AdminNdCode && m.MAST_ND_TYPE == "D").MAST_PARENT_ND_CODE.Value;
                            PIU_CHANGE_RECORD.ID = (dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Any() ? dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Max(m => m.ID) + 1 : 1);
                            PIU_CHANGE_RECORD.DATE_OF_UPDATION = System.DateTime.Now;
                            PIU_CHANGE_RECORD.PMGSY_SCHEME = item.MAST_PMGSY_SCHEME;

                            //dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Add(PIU_CHANGE_RECORD);

                            //if (PIU_CHANGE_RECORD.OLD_PIU_ID == PIU_CHANGE_RECORD.NEW_PIU_ID)
                            //{
                            //    identity_flag = "0";
                            //}
                            //else
                            //{
                            //    identity_flag = "1";
                            //    dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Add(PIU_CHANGE_RECORD);
                            //}
                            dbContext.IMS_PROPOSAL_CHANGE_PIU_LOG.Add(PIU_CHANGE_RECORD);
                            item.MAST_DPIU_CODE = model.AdminNdCode;
                            
                            dbContext.Entry(item).State = EntityState.Modified;
                            dbContext.SaveChanges();
                            #endregion
                        }
                        #region To Check Validations
                        if (flag == "0")
                        {
                            for (int i = 0; i < PMGSY_SCHEME.Count - 1; i++)
                            {
                                if (!string.Equals(PMGSY_SCHEME[i], PMGSY_SCHEME[i + 1]))
                                {
                                    flag = "1";
                                    break;
                                }

                            }
                        }

                        // change below for loop
                        if (flag == "0")
                        {
                            for (int i = 0; i < DistrictList.Count - 1; i++)
                            {
                                if (!string.Equals(DistrictList[i], DistrictList[i + 1]))
                                {
                                    flag = "5";
                                    break;
                                }
                            }
                        }

                        //if (flag == "0")
                        //{
                        //    for (int i = 0; i < MAST_DPIU_CODE.Count - 1; i++)
                        //    {
                        //        if (!string.Equals(MAST_DPIU_CODE[i], MAST_DPIU_CODE[i + 1]))
                        //        {
                        //            flag = "2";
                        //            break;
                        //        }

                        //    }
                        //}

                        if (flag == "0")
                        {
                            for (int i = 0; i < IMS_Year.Count - 1; i++)
                            {
                                if (!string.Equals(IMS_Year[i], IMS_Year[i + 1]))
                                {
                                    flag = "3";
                                    break;
                                }

                            }
                        }

                        #endregion

                        if (flag != "0")
                        {
                            return flag == "1" ? "1" : flag == "2" ? "2" : flag == "5" ? "5" : "3";   // change
                            // return flag == "1" ? "1" : flag == "2" ? "2" : "3";
                            //return false;
                        }
                        else
                        {
                            ts.Complete();
                            return "success";
                            //return true;
                        }


                    }
                    else
                    {
                        return "fail";
                        //return false;
                    }
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ChangeProposalPIUDetails().DAL");
                return "fail";
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// updates the Block details of Proposal
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool UpdateProposalDetailsBlockDAL(ProposalUpdateBlockViewModel model)
        {
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    string[] proposalParams = model.ProposalArray.Split(',');
                    int[] imsProposals = Array.ConvertAll(proposalParams, s => int.Parse(s));
                    var sanctionDetails = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => imsProposals.Contains(m.IMS_PR_ROAD_CODE)).ToList();
                    //sanctionDetails.ForEach(m => m.MAST_BLOCK_CODE = model.BlockCode);
                    foreach (var item in sanctionDetails)
                    {
                        //item.PLAN_CN_ROAD_CODE = null;
                        //item.MAST_BLOCK_CODE = model.BlockCode;
                        IMS_BENEFITED_HABS ims_benefited_habs = dbContext.IMS_BENEFITED_HABS.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).FirstOrDefault();
                        if (ims_benefited_habs != null)
                        {
                            dbContext.IMS_BENEFITED_HABS.Remove(ims_benefited_habs);
                            dbContext.SaveChanges();
                        }
                    }
                    sanctionDetails.ForEach(m => m.PLAN_CN_ROAD_CODE = null);
                    sanctionDetails.ForEach(m => m.MAST_BLOCK_CODE = model.BlockCode);
                    //IMS_BENEFITED_HABS ims_benefited_habs = dbContext.IMS_BENEFITED_HABS.Where(x => x.IMS_PR_ROAD_CODE == model.imsProposals[0]).FirstOrDefault();
                    //dbContext.IMS_BENEFITED_HABS.Remove(ims_benefited_habs);
                    dbContext.SaveChanges();
                    ts.Complete();
                    return true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateProposalDetailsBlockDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        /// <summary>
        /// returns the PIU of district
        /// </summary>
        /// <param name="districtCode"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulatePIUOfDistrict(int districtCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                List<SelectListItem> lstPIU = new SelectList(dbContext.ADMIN_DEPARTMENT.Where(m => m.MAST_DISTRICT_CODE == districtCode && m.MAST_ND_TYPE == "D").ToList(), "ADMIN_ND_CODE", "ADMIN_ND_NAME").ToList();
                lstPIU.Insert(0, new SelectListItem { Value = "0", Text = "Select PIU" });
                return lstPIU;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulatePIUOfDistrict().DAL");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// returns the Block of district
        /// </summary>
        /// <param name="districtCode"></param>
        /// <returns></returns>
        public List<SelectListItem> PopulateBlockOfDistrict(int districtCode, out string districtName)
        {
            dbContext = new PMGSYEntities();
            try
            {
                districtName = dbContext.MASTER_DISTRICT.Where(m => m.MAST_DISTRICT_CODE == districtCode).Select(x => x.MAST_DISTRICT_NAME).FirstOrDefault();
                List<SelectListItem> lstBlock = new SelectList(dbContext.MASTER_BLOCK.Where(m => m.MAST_DISTRICT_CODE == districtCode && m.MAST_BLOCK_ACTIVE == "Y").ToList(), "MAST_BLOCK_CODE", "MAST_BLOCK_NAME").ToList();
                lstBlock.Insert(0, new SelectListItem { Value = "0", Text = "Select Block" });
                return lstBlock;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulateBlockOfDistrict().DAL");
                districtName = string.Empty;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region CHANGING_CORE_NETWORK

        /// <summary>
        /// updating the core network details and deleting the habitations mapped to it
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool UpdateCoreNetworkDetailsDAL(CoreNetworkUpdateViewModel model)
        {
            dbContext = new PMGSYEntities();
            int ProposalCode = 0;
            try
            {
                if (!String.IsNullOrEmpty(model.EncryptedProposalCode))
                {
                    string[] parameters = model.EncryptedProposalCode.Split('/');
                    string[] codes = URLEncrypt.DecryptParameters(new string[] { parameters[0], parameters[1], parameters[2] });
                    ProposalCode = Convert.ToInt32(codes[0]);
                }

                using (TransactionScope ts = new TransactionScope())
                {
                    //updates the Core Network details
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(ProposalCode);
                    imsMaster.PLAN_CN_ROAD_CODE = model.CnCode;
                    imsMaster.IMS_ROAD_FROM = model.RoadFrom;
                    imsMaster.IMS_ROAD_TO = model.RoadTo;
                    imsMaster.USERID = PMGSYSession.Current.UserId;
                    imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(imsMaster).State = EntityState.Modified;
                    dbContext.SaveChanges();

                    //removing the habitations mapped
                    List<IMS_BENEFITED_HABS> lstHabs = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == ProposalCode).ToList();
                    foreach (var item in lstHabs)
                    {
                        item.USERID = PMGSYSession.Current.UserId;
                        item.IPADD = imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(item).State = EntityState.Modified;
                        dbContext.SaveChanges();

                        dbContext.IMS_BENEFITED_HABS.Remove(item);
                        dbContext.SaveChanges();
                    }

                    //if the road is stage 1 and any stage 2 road is present on this road then delete the stage 2 road habitations
                    if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == ProposalCode && m.IMS_PROPOSAL_TYPE == "P"))
                    {
                        int stage2ProposalCode = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ProposalCode && m.IMS_PROPOSAL_TYPE == "P").Select(m => m.IMS_PR_ROAD_CODE).FirstOrDefault();
                        var stage2Habitations = dbContext.IMS_BENEFITED_HABS.Where(m => m.IMS_PR_ROAD_CODE == stage2ProposalCode).ToList();
                        foreach (var item in stage2Habitations)
                        {
                            item.USERID = PMGSYSession.Current.UserId;
                            item.IPADD = imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.Entry(item).State = EntityState.Modified;
                            dbContext.SaveChanges();

                            dbContext.IMS_BENEFITED_HABS.Remove(item);
                            dbContext.SaveChanges();
                        }

                        //update the core network of stage 2 proposal also
                        IMS_SANCTIONED_PROJECTS stage2ProposalMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(stage2ProposalCode);
                        stage2ProposalMaster.PLAN_CN_ROAD_CODE = model.CnCode;
                        stage2ProposalMaster.USERID = PMGSYSession.Current.UserId;
                        stage2ProposalMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(stage2ProposalMaster).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    ts.Complete();
                    return true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateCoreNetworkDetailsDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// updates the block details along with clears the habitation details and core network details mapped to it
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool UpdateBlockDetailsDAL(ProposalBlockUpdateViewModel model)
        {
            try
            {
                using (dbContext = new PMGSYEntities())
                {
                    using (TransactionScope ts = new TransactionScope())
                    {

                        IMS_SANCTIONED_PROJECTS proposalDetails = dbContext.IMS_SANCTIONED_PROJECTS.Find(model.ProposalCode);

                        if (proposalDetails != null)
                        {
                            IMS_PROPOSAL_TRACKING propTrackDetails = new IMS_PROPOSAL_TRACKING();

                            propTrackDetails.IMS_PR_ROAD_CODE = model.ProposalCode;
                            propTrackDetails.IMS_SHIFT_DATE = DateTime.Now;
                            if (dbContext.IMS_PROPOSAL_TRACKING.Any(m => m.IMS_PR_ROAD_CODE == model.ProposalCode))
                            {
                                propTrackDetails.IMS_TRACK_CODE = dbContext.IMS_PROPOSAL_TRACKING.Where(m => m.IMS_PR_ROAD_CODE == model.ProposalCode).Select(m => m.IMS_TRACK_CODE).Max() + 1;
                            }
                            else
                            {
                                propTrackDetails.IMS_TRACK_CODE = 1;
                            }
                            propTrackDetails.MAST_STATE_CODE = PMGSYSession.Current.StateCode;
                            propTrackDetails.MAST_DISTRICT_CODE = proposalDetails.MAST_DISTRICT_CODE;
                            propTrackDetails.MAST_BLOCK_CODE = proposalDetails.MAST_BLOCK_CODE;
                            propTrackDetails.USERID = PMGSYSession.Current.UserId;
                            propTrackDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            dbContext.IMS_PROPOSAL_TRACKING.Add(propTrackDetails);
                            dbContext.SaveChanges();

                            //proposalDetails.IMS_OLD_BLOCK_CODE = proposalDetails.MAST_BLOCK_CODE;
                            proposalDetails.MAST_BLOCK_CODE = model.Block;
                            proposalDetails.USERID = PMGSYSession.Current.UserId;
                            proposalDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            proposalDetails.PLAN_CN_ROAD_CODE = null;
                            proposalDetails.MAST_DISTRICT_CODE = model.District;
                            proposalDetails.MAST_DPIU_CODE = model.PIU;
                            dbContext.Entry(proposalDetails).State = EntityState.Modified;
                            dbContext.SaveChanges();
                            ts.Complete();
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateBlockDetailsDAL().DAL");
                return false;
            }
        }

        #endregion

        #region Proposal Additional Cost
        /// <summary>
        /// return the grid data of proposal Additional Cost details
        /// </summary>
        /// <param name="yearCode"></param>
        /// <param name="stateCode"></param>
        /// <param name="districtCode"></param>
        /// <param name="packageCode"></param>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array GetProposalAdditionalCostListDAL(int stateCode, int districtCode, int blockCode, int yearCode, string packageCode, string proposalCode, int batchCode, int streamCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstParantNd = (dbContext.ADMIN_DEPARTMENT.Where(a => a.MAST_PARENT_ND_CODE == (PMGSYSession.Current.AdminNdCode == 0 ? a.MAST_PARENT_ND_CODE : PMGSYSession.Current.AdminNdCode)).Select(a => a.ADMIN_ND_CODE).ToList());

                //var lstProposal = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                //                   //commented by Vikram as suggested by Srinivas sir for the issue of Orissa SRRDA as they were not getting the Packages whose proposals were sanctioned only and no agreement were made on that.
                //                   //join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                //                   //join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                //                   //new condition added by Vikram as suggested by Srinivasa sir on 17 July 2015
                //                   join execution in dbContext.EXEC_ROADS_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals execution.IMS_PR_ROAD_CODE into exec
                //                   from e in exec.DefaultIfEmpty()
                //                   join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                //                   join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                //                   join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                //                   join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                //                   where
                //                       //master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                //                   item.IMS_SANCTIONED == "Y" &&
                //                       //master.TEND_AGREEMENT_TYPE == "C" &&
                //                   (stateCode <= 0 ? 1 : item.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                //                   (districtCode <= 0 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode <= 0 ? 1 : districtCode) &&
                //                   e.EXEC_ISCOMPLETED == null ? "" == "" : e.EXEC_ISCOMPLETED != "C" &&
                //                   (yearCode <= 0 ? 1 : item.IMS_YEAR) == (yearCode <= 0 ? 1 : yearCode) &&
                //                   (blockCode <= 0 ? 1 : item.MAST_BLOCK_CODE) == (blockCode <= 0 ? 1 : blockCode) &&
                //                   (batchCode <= 0 ? 1 : item.IMS_BATCH) == (batchCode <= 0 ? 1 : batchCode) &&
                //                   (streamCode <= 0 ? 1 : item.IMS_COLLABORATION) == (streamCode <= 0 ? 1 : streamCode) &&
                //                   (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                //                   (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                //                   (lstParantNd.Contains(item.MAST_DPIU_CODE)) &&
                //                   item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                //                   && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                //                   select new
                //                   {
                //                       state.MAST_STATE_NAME,
                //                       district.MAST_DISTRICT_NAME,
                //                       block.MAST_BLOCK_NAME,
                //                       item.IMS_PACKAGE_ID,
                //                       item.IMS_BATCH,
                //                       item.IMS_PR_ROAD_CODE,
                //                       item.IMS_ROAD_NAME,
                //                       year.MAST_YEAR_TEXT,
                //                       item.IMS_LOCK_STATUS,
                //                       item.IMS_NO_OF_CDWORKS,
                //                       item.IMS_NO_OF_BRIDGEWRKS,
                //                       item.IMS_PROPOSAL_TYPE,
                //                       ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                //                       //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? (item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_CD_AMT + item.IMS_SANCTIONED_PW_AMT +
                //                       //             item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),
                //                       ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,
                //                       MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5)
                //                   }).Distinct();


                var lstProposal = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                   //join execution in dbContext.EXEC_ROADS_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals execution.IMS_PR_ROAD_CODE
                                   //into exec from e in exec.DefaultIfEmpty()
                                   join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                   join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                   join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                   join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                   where
                                   item.IMS_SANCTIONED == "Y" &&
                                   (stateCode <= 0 ? 1 : item.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                                   (districtCode <= 0 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode <= 0 ? 1 : districtCode) &&
                                       //e.EXEC_ISCOMPLETED == null ? "" == "" : e.EXEC_ISCOMPLETED != "C" &&
                                       /*execution.EXEC_ISCOMPLETED != "C" &&*/
                                       ///Commented by SAMMED PATIL as per Srinivasa sir instructions on 15JUNE2016                                                                item.IMS_ISCOMPLETED == "X" This condition is added on 21 AUg 2020 as per Suggestion by Srinivasa Sir. 
                                   (item.IMS_ISCOMPLETED == "C" || item.IMS_ISCOMPLETED == "P" || item.IMS_ISCOMPLETED == "M" || item.IMS_ISCOMPLETED == "G" || item.IMS_ISCOMPLETED == "X") && //item.IMS_ISCOMPLETED != "X" &&
                                   (yearCode <= 0 ? 1 : item.IMS_YEAR) == (yearCode <= 0 ? 1 : yearCode) &&
                                   (blockCode <= 0 ? 1 : item.MAST_BLOCK_CODE) == (blockCode <= 0 ? 1 : blockCode) &&
                                   (batchCode <= 0 ? 1 : item.IMS_BATCH) == (batchCode <= 0 ? 1 : batchCode) &&
                                   (streamCode <= 0 ? 1 : item.IMS_COLLABORATION) == (streamCode <= 0 ? 1 : streamCode) &&
                                   (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                   (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                   (lstParantNd.Contains(item.MAST_DPIU_CODE)) &&
                                   item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                   && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                   && (upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType)
                             //      && !(dbContext.EXEC_ROADS_MONTHLY_STATUS.Where(z => z.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE && z.EXEC_ISCOMPLETED == "C").Any())
                                   select new
                                   {
                                       state.MAST_STATE_NAME,
                                       district.MAST_DISTRICT_NAME,
                                       block.MAST_BLOCK_NAME,
                                       item.IMS_PACKAGE_ID,
                                       item.IMS_BATCH,
                                       item.IMS_PR_ROAD_CODE,
                                       item.IMS_ROAD_NAME,
                                       year.MAST_YEAR_TEXT,
                                       item.IMS_LOCK_STATUS,
                                       item.IMS_NO_OF_CDWORKS,
                                       item.IMS_NO_OF_BRIDGEWRKS,
                                       item.IMS_PROPOSAL_TYPE,
                                       ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                       //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? (item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_CD_AMT + item.IMS_SANCTIONED_PW_AMT +
                                       //             item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),

                                       //ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_EST_COST : item.IMS_BRIDGE_WORKS_EST_COST,

                                       ///Change made by SAMMED PATIL on 29MAR2016 
                                       ROAD_COST = PMGSYSession.Current.PMGSYScheme == 1 ?
                                                      ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT) + (item.IMS_SANCTIONED_RS_AMT == null ? 0 : item.IMS_SANCTIONED_RS_AMT))
                                                    : ((item.IMS_SANCTIONED_PAV_AMT == null ? 0 : item.IMS_SANCTIONED_PAV_AMT) + (item.IMS_SANCTIONED_PW_AMT == null ? 0 : item.IMS_SANCTIONED_PW_AMT) + (item.IMS_SANCTIONED_OW_AMT == null ? 0 : item.IMS_SANCTIONED_OW_AMT) + (item.IMS_SANCTIONED_CD_AMT == null ? 0 : item.IMS_SANCTIONED_CD_AMT) + (item.IMS_SANCTIONED_FC_AMT == null ? 0 : item.IMS_SANCTIONED_FC_AMT) + (item.IMS_SANCTIONED_HS_AMT == null ? 0 : item.IMS_SANCTIONED_HS_AMT) + (item.IMS_SANCTIONED_BW_AMT == null ? 0 : item.IMS_SANCTIONED_BW_AMT) + (item.IMS_SANCTIONED_BS_AMT == null ? 0 : item.IMS_SANCTIONED_BS_AMT)),
                                       //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5)
                                       ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                       MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5)
                                   }).Distinct();

                totalRecords = lstProposal.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstProposal = lstProposal.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstProposal = lstProposal.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstProposal = lstProposal.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstProposal = lstProposal.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstProposal.Select(executionDetails => new
                {
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_NO_OF_CDWORKS,
                    executionDetails.IMS_NO_OF_BRIDGEWRKS,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_LOCK_STATUS,
                    executionDetails.ROAD_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.IMS_BATCH,
                    executionDetails.MAST_YEAR_TEXT,
                    executionDetails.MAST_STATE_NAME,
                    executionDetails.MAST_DISTRICT_NAME
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.MAST_STATE_NAME == null?string.Empty:m.MAST_STATE_NAME.ToString(),                         
                        m.MAST_DISTRICT_NAME == null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),                         
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.MAST_YEAR_TEXT == null?string.Empty:m.MAST_YEAR_TEXT.ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString(),
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),
                       // "<a href='#' title='Click here to add Additonal Cost Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddAdditionalCostDetail('" + URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add</a>",
                        "<a href='#' title='Click here to add Additonal Cost Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddAdditionalCostDetail('" + URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add</a>",
                                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalAdditionalCostListDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetAdditionalCostListDAL(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstExecution = (from cost in dbContext.IMS_PROPOSAL_COST_ADD
                                    where
                                    cost.IMS_PR_ROAD_CODE == roadCode

                                    select new
                                    {
                                        cost.IMS_PR_ROAD_CODE,
                                        cost.IMS_TRANSACTION_CODE,
                                        cost.IMS_STATE_AMOUNT,
                                        cost.IMS_MORD_AMOUNT,
                                        cost.IMS_RELEASE_DATE,
                                        cost.IMS_LETTER_NUMBER,
                                        cost.IMS_FILE_NAME
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_STATE_AMOUNT":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_MORD_AMOUNT":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_RELEASE_DATE":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_LETTER_NUMBER":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_FILE_NAME":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {

                            case "IMS_STATE_AMOUNT":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_STATE_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_MORD_AMOUNT":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_MORD_AMOUNT).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_RELEASE_DATE":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_LETTER_NUMBER":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_LETTER_NUMBER).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_FILE_NAME":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_FILE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_RELEASE_DATE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_TRANSACTION_CODE,
                    executionDetails.IMS_STATE_AMOUNT,
                    executionDetails.IMS_MORD_AMOUNT,
                    executionDetails.IMS_RELEASE_DATE,
                    executionDetails.IMS_LETTER_NUMBER,
                    executionDetails.IMS_FILE_NAME

                }).ToArray();

                return result.Select(m => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "IMS_PR_ROAD_CODE=" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }),
                    cell = new[] 
                    {                      
                        m.IMS_STATE_AMOUNT.ToString(),
                        m.IMS_MORD_AMOUNT.ToString(),
                        (m.IMS_STATE_AMOUNT+m.IMS_MORD_AMOUNT).ToString(),
                        m.IMS_RELEASE_DATE==null?"":ConvertDateToString(m.IMS_RELEASE_DATE),
                        m.IMS_LETTER_NUMBER,
                        String.IsNullOrEmpty(m.IMS_FILE_NAME) ? "" : "<a href='#' onclick='DownloadFile(\""+ URLEncrypt.EncryptParameters1(new string[]{ m.IMS_FILE_NAME.ToString().Trim() }) + "\"); return false;'>"+m.IMS_FILE_NAME+"</a></center>",
                         "<center><a href='#' class='ui-icon ui-icon-pencil' onclick='EditCostProposal(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }) + "\"); return false;'>Edit</a></center>",
                         "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteCostProposal(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }) + "\"); return false;'>Delete</a></center>",
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetAdditionalCostListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        /// <summary>
        /// Add Additional Cost details
        /// </summary>
        /// <param name="proposalAdditionalCostModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddAdditionalCostDetailsDAL(ProposalAdditionalCostModel proposalAdditionalCostModel, ref string message)
        {
            try
            {


                IMS_PROPOSAL_COST_ADD imsProposalCostAddModel = new IMS_PROPOSAL_COST_ADD();
                if (proposalAdditionalCostModel.TOTAL_AMOUNT == 0)
                {
                    message = "Total Amount should be greater than 0";
                    return false;
                }
                imsProposalCostAddModel.IMS_TRANSACTION_CODE = getMaxAdditionalCostCode(proposalAdditionalCostModel.IMS_PR_ROAD_CODE);
                imsProposalCostAddModel.IMS_PR_ROAD_CODE = proposalAdditionalCostModel.IMS_PR_ROAD_CODE;
                imsProposalCostAddModel.IMS_STATE_AMOUNT = proposalAdditionalCostModel.IMS_STATE_AMOUNT;
                imsProposalCostAddModel.IMS_MORD_AMOUNT = proposalAdditionalCostModel.IMS_MORD_AMOUNT;
                imsProposalCostAddModel.IMS_RELEASE_DATE = (DateTime)ConvertStringToDate(proposalAdditionalCostModel.IMS_RELEASE_DATE);
                imsProposalCostAddModel.IMS_LETTER_NUMBER = proposalAdditionalCostModel.IMS_LETTER_NO;
                imsProposalCostAddModel.IMS_FILE_NAME = proposalAdditionalCostModel.IMS_FILE_NAME;
                imsProposalCostAddModel.USERID = PMGSYSession.Current.UserId;
                imsProposalCostAddModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext = new PMGSYEntities();
                dbContext.IMS_PROPOSAL_COST_ADD.Add(imsProposalCostAddModel);
                dbContext.SaveChanges();

                return true;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddAdditionalCostDetailsDAL(DbUpdateException ex)");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddAdditionalCostDetailsDAL(OptimisticConcurrencyException ex)");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddAdditionalCostDetailsDAL()");
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Calculate Max Test_Result_Code.
        /// </summary>
        /// <returns></returns>
        public int getMaxAdditionalCostCode(int roadCode)
        {
            try
            {
                dbContext = new PMGSYEntities();

                int maxCode = 1;

                if (dbContext.IMS_PROPOSAL_COST_ADD.Where(a => a.IMS_PR_ROAD_CODE == roadCode).Any())
                {
                    maxCode = dbContext.IMS_PROPOSAL_COST_ADD.Where(a => a.IMS_PR_ROAD_CODE == roadCode).Max(s => s.IMS_TRANSACTION_CODE) + 1;
                    return maxCode;
                }
                else
                {
                    return maxCode;
                }
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "getMaxAdditionalCostCode()");
                return 1;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        /// <summary>
        /// Get Additional Cost Details.
        /// </summary>
        /// <param name="TransctionCode"></param>
        /// <param name="ImsPrRoadCode"></param>
        /// <returns></returns>
        public ProposalAdditionalCostModel EditAdditionalCostDetailsDAL(int TransctionCode, int ImsPrRoadCode)
        {

            try
            {
                dbContext = new PMGSYEntities();
                ProposalAdditionalCostModel proposalAdditionalCostModel = new ProposalAdditionalCostModel();
                IMS_PROPOSAL_COST_ADD additionalCostModel = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_TRANSACTION_CODE == TransctionCode && m.IMS_PR_ROAD_CODE == ImsPrRoadCode).FirstOrDefault();

                if (additionalCostModel != null)
                {

                    proposalAdditionalCostModel.EncryptedTransactionRoadCode = URLEncrypt.EncryptParameters1(new string[] { "IMS_PR_ROAD_CODE=" + ImsPrRoadCode.ToString().Trim(), "TransactionCode =" + TransctionCode.ToString().Replace("/", "") });
                    proposalAdditionalCostModel.EncryptedRoadCode = URLEncrypt.EncryptParameters1(new string[] { "IMS_PR_ROAD_CODE=" + ImsPrRoadCode.ToString().Trim() });
                    proposalAdditionalCostModel.IMS_STATE_AMOUNT = additionalCostModel.IMS_STATE_AMOUNT;
                    proposalAdditionalCostModel.IMS_MORD_AMOUNT = additionalCostModel.IMS_MORD_AMOUNT;
                    proposalAdditionalCostModel.IMS_RELEASE_DATE = ConvertDateToString(additionalCostModel.IMS_RELEASE_DATE);
                    proposalAdditionalCostModel.TOTAL_AMOUNT = additionalCostModel.IMS_STATE_AMOUNT + additionalCostModel.IMS_MORD_AMOUNT;
                    proposalAdditionalCostModel.IMS_LETTER_NO = additionalCostModel.IMS_LETTER_NUMBER;
                    proposalAdditionalCostModel.IMS_FILE_NAME = additionalCostModel.IMS_FILE_NAME;
                }
                return proposalAdditionalCostModel;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditAdditionalCostDetailsDAL()");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Update Test Result details.
        /// </summary>
        /// <param name="proposalAdditionalCostModel"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool UpdateAdditionalCostDetailsDAL(ProposalAdditionalCostModel proposalAdditionalCostModel, ref string message)
        {

            try
            {
                Dictionary<string, string> decryptedParameters = null;
                string[] encryptedParameter = null;
                dbContext = new PMGSYEntities();
                using (TransactionScope ts = new TransactionScope())
                {
                    int IMS_TRANSACTION_CODE = 0;
                    int IMS_PR_ROAD_CODE = 0;

                    encryptedParameter = proposalAdditionalCostModel.EncryptedTransactionRoadCode.Split('/');

                    if (!(encryptedParameter.Length == 3))
                    {
                        return false;
                    }

                    decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameter[0], encryptedParameter[1], encryptedParameter[2] });
                    IMS_PR_ROAD_CODE = Convert.ToInt32(decryptedParameters["IMS_PR_ROAD_CODE"].ToString());
                    IMS_TRANSACTION_CODE = Convert.ToInt32(decryptedParameters["TransactionCode"].ToString());
                    if (proposalAdditionalCostModel.TOTAL_AMOUNT == 0)
                    {
                        message = "Total Amount should be greater than 0";
                        return false;
                    }

                    #region Check Sanction Amount and Exection Amount on
                    if (CheckSanctionValue(IMS_PR_ROAD_CODE, IMS_TRANSACTION_CODE, proposalAdditionalCostModel.IMS_STATE_AMOUNT, proposalAdditionalCostModel.IMS_MORD_AMOUNT, "E") == false)
                    {
                        message = "Expenditure is more than the amount being entered.";
                        return false;
                    }

                    #endregion
                    dbContext = new PMGSYEntities();
                    IMS_PROPOSAL_COST_ADD proposalCostOrignalModel = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_TRANSACTION_CODE == IMS_TRANSACTION_CODE && m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).FirstOrDefault();

                    if (proposalCostOrignalModel == null)
                    {
                        return false;
                    }
                    proposalCostOrignalModel.IMS_STATE_AMOUNT = proposalAdditionalCostModel.IMS_STATE_AMOUNT;
                    proposalCostOrignalModel.IMS_MORD_AMOUNT = proposalAdditionalCostModel.IMS_MORD_AMOUNT;
                    //proposalCostOrignalModel.IMS_FILE_NAME = proposalAdditionalCostModel.IMS_FILE_NAME;
                    proposalCostOrignalModel.IMS_LETTER_NUMBER = proposalAdditionalCostModel.IMS_LETTER_NO;
                    proposalCostOrignalModel.IMS_RELEASE_DATE = (DateTime)ConvertStringToDate(proposalAdditionalCostModel.IMS_RELEASE_DATE);
                    proposalCostOrignalModel.USERID = PMGSYSession.Current.UserId;
                    proposalCostOrignalModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(proposalCostOrignalModel).State = EntityState.Modified;
                    dbContext.SaveChanges();
                    ts.Complete();
                }
                return true;

            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateAdditionalCostDetailsDAL(DbUpdateException ex)");
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateAdditionalCostDetailsDAL(DbUpdateException ex)");
                message = "An error ocuured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateAdditionalCostDetailsDAL()");
                message = "An error ocuured while processing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Delete Additional Cost details.
        /// </summary>
        /// <param name="transactionCode"></param>
        /// <param name="imsPrRoadCode"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool DeleteAdditionalCostDetailsDAL(int transactionCode, int imsPrRoadCode, ref string message)
        {

            try
            {
                dbContext = new PMGSYEntities();
                using (TransactionScope ts = new TransactionScope())
                {
                    IMS_PROPOSAL_COST_ADD proposalAdditionalcostModel = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_TRANSACTION_CODE == transactionCode && m.IMS_PR_ROAD_CODE == imsPrRoadCode).FirstOrDefault();
                    if (proposalAdditionalcostModel == null)
                    {
                        message = "Record not exist for delete.";
                        return false;
                    }
                    #region Check Sanction Amount and Exection Amount on
                    if (CheckSanctionValue(imsPrRoadCode, transactionCode, proposalAdditionalcostModel.IMS_STATE_AMOUNT, proposalAdditionalcostModel.IMS_MORD_AMOUNT, "D") == false)
                    {
                        message = "Expenditure is more than the amount being entered.";
                        return false;
                    }
                    #endregion

                    string filePath = ConfigurationManager.AppSettings["ADDITIONAL_COST_PDF_UPLOAD"];

                    System.IO.File.Delete(Path.Combine(filePath, proposalAdditionalcostModel.IMS_FILE_NAME));

                    dbContext = new PMGSYEntities();
                    IMS_PROPOSAL_COST_ADD proposalAdditionalcostModelDel = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_TRANSACTION_CODE == transactionCode && m.IMS_PR_ROAD_CODE == imsPrRoadCode).FirstOrDefault();

                    proposalAdditionalcostModelDel.USERID = PMGSYSession.Current.UserId;
                    proposalAdditionalcostModelDel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(proposalAdditionalcostModelDel).State = EntityState.Modified;
                    dbContext.SaveChanges();
                    dbContext.IMS_PROPOSAL_COST_ADD.Remove(proposalAdditionalcostModelDel);
                    dbContext.SaveChanges();
                    ts.Complete();
                }
                return true;
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteAdditionalCostDetailsDAL(DbUpdateException ex)");
                message = "An error occured while processing your request.";
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteAdditionalCostDetailsDAL()");
                message = "An error occured while processing your request.";
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool CheckSanctionValue(int proposalCode, int transactionId, decimal stateEditAmount, decimal mordEditAmount, string operation)
        {
            dbContext = new PMGSYEntities();
            decimal? TotalPayment = 0;
            // decimal? TotalValue = 0;
            decimal totalCostToAdd = 0;
            try
            {
                IMS_SANCTIONED_PROJECTS master = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                TotalPayment = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_LASTMONTH).FirstOrDefault() + dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_PAYMENT_THISMONTH).FirstOrDefault();
                // TotalValue = dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_LASTMONTH).FirstOrDefault() + dbContext.EXEC_PROGRESS.Where(m => m.IMS_PR_ROAD_CODE == proposalCode).OrderByDescending(m => m.EXEC_PROG_YEAR).ThenByDescending(m => m.EXEC_PROG_MONTH).Select(m => m.EXEC_VALUEOFWORK_THISMONTH).FirstOrDefault();


                decimal? overallCost = (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "W").Sum(m => (Decimal?)m.TEND_VALUE_WORK_DONE) == null ? 0 : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS == "W").Sum(m => (Decimal?)m.TEND_VALUE_WORK_DONE)) + (dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT) == null ? 0 : dbContext.TEND_AGREEMENT_DETAIL.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.TEND_AGREEMENT_STATUS != "W").Sum(m => (Decimal?)m.TEND_AGREEMENT_AMOUNT));

                overallCost = overallCost.HasValue ? overallCost.Value : 0;

                //new change done for validating additional cost if done on proposal.
                if (dbContext.IMS_PROPOSAL_COST_ADD.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    decimal? stateCost = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE != transactionId).Sum(m => (Decimal?)m.IMS_STATE_AMOUNT) == null ? 0 : dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE != transactionId).Sum(m => m.IMS_STATE_AMOUNT);
                    decimal? mordCost = dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE != transactionId).Sum(m => (Decimal?)m.IMS_MORD_AMOUNT) == null ? 0 : dbContext.IMS_PROPOSAL_COST_ADD.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE != transactionId).Sum(m => m.IMS_MORD_AMOUNT);

                    totalCostToAdd = ((stateCost.HasValue ? stateCost.Value : 0) + (mordCost.HasValue ? mordCost.Value : 0));

                    if (operation == "E")
                    {
                        totalCostToAdd = totalCostToAdd + stateEditAmount + mordEditAmount;
                    }
                }

                if (TotalPayment == null)
                {
                    TotalPayment = 0;
                }

                if (TotalPayment <= ((overallCost + (overallCost / 10)) + totalCostToAdd))
                {
                    return true;
                }
                else
                {
                    return false;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "CheckSanctionValue().DAL");
                return false;
            }
            finally
            {
                // dbContext.Dispose(); //Not here to dispose 
            }
        }
        #endregion

        #region Common Function
        public DateTime? ConvertStringToDate(string dateToConvert)
        {

            if (dateToConvert != null)
            {
                DateTime MyDateTime;
                MyDateTime = new DateTime();
                MyDateTime = DateTime.ParseExact(dateToConvert, "dd/MM/yyyy", null);
                return MyDateTime;
            }
            else
            {
                return null;
            }
        }
        public string ConvertDateToString(DateTime? date)
        {
            try
            {
                return Convert.ToDateTime(date).ToString("dd/MM/yyyy");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ConvertDateToString().DAL");
                return null;
            }
        }
        #endregion

        #region MRD CLEARANCE LETTERS  Upload Sanction Order
        public Array ListMrdClearanceDAL(int stateCode, int year, int batch, int agencyCode, int collaboration, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                //var list = from filelist in dbContext.MRD_CLEARANCE_LETTERS
                //           join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                //           join agency in dbContext.MASTER_AGENCY on filelist.ADMIN_ND_CODE equals agency.MAST_AGENCY_CODE
                //           join batchs in dbContext.MASTER_BATCH on filelist.MAST_BATCH equals batchs.MAST_BATCH_CODE
                //           join fund in dbContext.MASTER_FUNDING_AGENCY on filelist.MAST_COLLABORATION equals fund.MAST_FUNDING_AGENCY_CODE
                //           where
                //           (stateCode <= 0 ? 1 : filelist.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                //           (agencyCode <= 0 ? 1 : filelist.ADMIN_ND_CODE) == (agencyCode <= 0 ? 1 : agencyCode) &&
                //           (year <= 0 ? 1 : filelist.MAST_YEAR) == (year <= 0 ? 1 : year) &&
                //           (batch <= 0 ? 1 : filelist.MAST_BATCH) == (batch <= 0 ? 1 : batch) &&
                //           (collaboration <= 0 ? 1 : filelist.MAST_COLLABORATION) == (collaboration <= 0 ? 1 : collaboration) &&
                //           filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                //           dbContext.MRD_CLEARANCE_LETTERS.Any(m => m.MRD_ORG_CLEARANCE_CODE == filelist.MRD_CLEARANCE_CODE && m.MRD_CLEARANCE_STATUS == "R") ? filelist.MRD_CLEARANCE_STATUS == "R" : filelist.MRD_CLEARANCE_STATUS == "O"
                //           select new
                //           {
                //               filelist.MRD_CLEARANCE_CODE,
                //               state.MAST_STATE_NAME,
                //               agency.MAST_AGENCY_NAME,
                //               agency.MAST_AGENCY_TYPE,
                //               batchs.MAST_BATCH_NAME,
                //               filelist.MAST_YEAR,
                //               fund.MAST_FUNDING_AGENCY_NAME,
                //               filelist.MRD_CLEARANCE_NUMBER,
                //               filelist.MRD_CLEARANCE_DATE,
                //               //filelist.MRD_REVISION_DATE,
                //               filelist.MRD_TOTAL_ROADS,
                //               filelist.MRD_TOTAL_LSB,
                //               filelist.MRD_ROAD_MORD_SHARE_AMT,
                //               filelist.MRD_ROAD_STATE_SHARE_AMT,
                //               filelist.MRD_ROAD_TOTAL_AMT,
                //               filelist.MRD_LSB_MORD_SHARE_AMT,
                //               filelist.MRD_LSB_STATE_SHARE_AMT,
                //               filelist.MRD_LSB_TOTAL_AMT,
                //               filelist.MRD_TOTAL_MORD_SHARE_AMT,
                //               filelist.MRD_TOTAL_STATE_SHARE_AMT,
                //               filelist.MRD_TOTAL_SANCTIONED_AMT,
                //               filelist.MRD_TOTAL_ROAD_LENGTH,
                //               filelist.MRD_TOTAL_LSB_LENGTH,
                //               filelist.MRD_HAB_1000,
                //               filelist.MRD_HAB_500,
                //               filelist.MRD_HAB_250_ELIGIBLE,
                //               filelist.MRD_HAB_100_ELIGIBLE,
                //               filelist.MRD_CLEARANCE_PDF_FILE,
                //               filelist.MRD_ORG_CLEARANCE_CODE,
                //               filelist.MRD_CLEARANCE_STATUS,
                //               //filelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                //               filelist.MRD_ROAD_PDF_FILE,
                //               //filelist.MRD_ROAD_REVISED_PDF_FILE,
                //               filelist.MRD_ROAD_EXCEL_FILE,
                //               // filelist.MRD_ROAD_REVISED_EXCEL_FILE
                //           };

                var lstOriginalList = from filelist in dbContext.MRD_CLEARANCE_LETTERS
                                      join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                      join agency in dbContext.MASTER_AGENCY on filelist.ADMIN_ND_CODE equals agency.MAST_AGENCY_CODE
                                      join batchs in dbContext.MASTER_BATCH on filelist.MAST_BATCH equals batchs.MAST_BATCH_CODE
                                      join fund in dbContext.MASTER_FUNDING_AGENCY on filelist.MAST_COLLABORATION equals fund.MAST_FUNDING_AGENCY_CODE
                                      where
                                      (stateCode <= 0 ? 1 : filelist.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                                      (agencyCode <= 0 ? 1 : filelist.ADMIN_ND_CODE) == (agencyCode <= 0 ? 1 : agencyCode) &&
                                      (year <= 0 ? 1 : filelist.MAST_YEAR) == (year <= 0 ? 1 : year) &&
                                      (batch <= 0 ? 1 : filelist.MAST_BATCH) == (batch <= 0 ? 1 : batch) &&
                                      (collaboration <= 0 ? 1 : filelist.MAST_COLLABORATION) == (collaboration <= 0 ? 1 : collaboration) &&
                                      filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                                      filelist.MRD_CLEARANCE_STATUS == "O" &&
                                      !(dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_STATUS == "R").Select(m => m.MRD_ORG_CLEARANCE_CODE).Contains(filelist.MRD_CLEARANCE_CODE))
                                      select new
                                      {
                                          filelist.MRD_CLEARANCE_CODE,
                                          state.MAST_STATE_NAME,
                                          agency.MAST_AGENCY_NAME,
                                          agency.MAST_AGENCY_TYPE,
                                          batchs.MAST_BATCH_NAME,
                                          filelist.MAST_YEAR,
                                          fund.MAST_FUNDING_AGENCY_NAME,
                                          filelist.MRD_CLEARANCE_NUMBER,
                                          filelist.MRD_CLEARANCE_DATE,
                                          //filelist.MRD_REVISION_DATE,
                                          filelist.MRD_TOTAL_ROADS,
                                          filelist.MRD_TOTAL_LSB,
                                          filelist.MRD_ROAD_MORD_SHARE_AMT,
                                          filelist.MRD_ROAD_STATE_SHARE_AMT,
                                          filelist.MRD_ROAD_TOTAL_AMT,
                                          filelist.MRD_LSB_MORD_SHARE_AMT,
                                          filelist.MRD_LSB_STATE_SHARE_AMT,
                                          filelist.MRD_LSB_TOTAL_AMT,
                                          filelist.MRD_TOTAL_MORD_SHARE_AMT,
                                          filelist.MRD_TOTAL_STATE_SHARE_AMT,
                                          filelist.MRD_TOTAL_SANCTIONED_AMT,
                                          filelist.MRD_TOTAL_ROAD_LENGTH,
                                          filelist.MRD_TOTAL_LSB_LENGTH,
                                          filelist.MRD_HAB_1000,
                                          filelist.MRD_HAB_500,
                                          filelist.MRD_HAB_250_ELIGIBLE,
                                          filelist.MRD_HAB_100_ELIGIBLE,
                                          filelist.MRD_CLEARANCE_PDF_FILE,
                                          filelist.MRD_ORG_CLEARANCE_CODE,
                                          filelist.MRD_CLEARANCE_STATUS,
                                          filelist.MRD_ROAD_PDF_FILE,
                                          filelist.MRD_ROAD_EXCEL_FILE,
                                      };

                var lstRevisionList = from filelist in dbContext.MRD_CLEARANCE_LETTERS
                                      join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                      join agency in dbContext.MASTER_AGENCY on filelist.ADMIN_ND_CODE equals agency.MAST_AGENCY_CODE
                                      join batchs in dbContext.MASTER_BATCH on filelist.MAST_BATCH equals batchs.MAST_BATCH_CODE
                                      join fund in dbContext.MASTER_FUNDING_AGENCY on filelist.MAST_COLLABORATION equals fund.MAST_FUNDING_AGENCY_CODE
                                      where
                                      (stateCode <= 0 ? 1 : filelist.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                                      (agencyCode <= 0 ? 1 : filelist.ADMIN_ND_CODE) == (agencyCode <= 0 ? 1 : agencyCode) &&
                                      (year <= 0 ? 1 : filelist.MAST_YEAR) == (year <= 0 ? 1 : year) &&
                                      (batch <= 0 ? 1 : filelist.MAST_BATCH) == (batch <= 0 ? 1 : batch) &&
                                      (collaboration <= 0 ? 1 : filelist.MAST_COLLABORATION) == (collaboration <= 0 ? 1 : collaboration) &&
                                      filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                                          //filelist.MRD_CLEARANCE_STATUS == "R" &&
                                      (from item in dbContext.MRD_CLEARANCE_LETTERS where item.MRD_CLEARANCE_STATUS == "R" group item by item.MRD_ORG_CLEARANCE_CODE into revisionDetails let MRD_CLEARANCE_CODE = revisionDetails.Max(a => a.MRD_CLEARANCE_CODE) select MRD_CLEARANCE_CODE).Contains(filelist.MRD_CLEARANCE_CODE)
                                      select new
                                      {
                                          filelist.MRD_CLEARANCE_CODE,
                                          state.MAST_STATE_NAME,
                                          agency.MAST_AGENCY_NAME,
                                          agency.MAST_AGENCY_TYPE,
                                          batchs.MAST_BATCH_NAME,
                                          filelist.MAST_YEAR,
                                          fund.MAST_FUNDING_AGENCY_NAME,
                                          filelist.MRD_CLEARANCE_NUMBER,
                                          filelist.MRD_CLEARANCE_DATE,
                                          //filelist.MRD_REVISION_DATE,
                                          filelist.MRD_TOTAL_ROADS,
                                          filelist.MRD_TOTAL_LSB,
                                          filelist.MRD_ROAD_MORD_SHARE_AMT,
                                          filelist.MRD_ROAD_STATE_SHARE_AMT,
                                          filelist.MRD_ROAD_TOTAL_AMT,
                                          filelist.MRD_LSB_MORD_SHARE_AMT,
                                          filelist.MRD_LSB_STATE_SHARE_AMT,
                                          filelist.MRD_LSB_TOTAL_AMT,
                                          filelist.MRD_TOTAL_MORD_SHARE_AMT,
                                          filelist.MRD_TOTAL_STATE_SHARE_AMT,
                                          filelist.MRD_TOTAL_SANCTIONED_AMT,
                                          filelist.MRD_TOTAL_ROAD_LENGTH,
                                          filelist.MRD_TOTAL_LSB_LENGTH,
                                          filelist.MRD_HAB_1000,
                                          filelist.MRD_HAB_500,
                                          filelist.MRD_HAB_250_ELIGIBLE,
                                          filelist.MRD_HAB_100_ELIGIBLE,
                                          filelist.MRD_CLEARANCE_PDF_FILE,
                                          filelist.MRD_ORG_CLEARANCE_CODE,
                                          filelist.MRD_CLEARANCE_STATUS,
                                          filelist.MRD_ROAD_PDF_FILE,
                                          filelist.MRD_ROAD_EXCEL_FILE,
                                      };

                var list = lstOriginalList.Union(lstRevisionList);
                totalRecords = list.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MRD_CLEARANCE_DATE).ThenBy(x => x.MAST_YEAR).ThenBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderBy(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderBy(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MRD_CLEARANCE_DATE).ThenBy(x => x.MAST_YEAR).ThenBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).ThenByDescending(x => x.MRD_CLEARANCE_DATE).ThenByDescending(x => x.MAST_YEAR).ThenByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderByDescending(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderByDescending(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).ThenByDescending(x => x.MRD_CLEARANCE_DATE).ThenByDescending(x => x.MAST_YEAR).ThenByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(claerancelist => new
                {

                    claerancelist.MRD_CLEARANCE_CODE,
                    claerancelist.MAST_STATE_NAME,
                    claerancelist.MAST_AGENCY_NAME,
                    claerancelist.MAST_AGENCY_TYPE,
                    claerancelist.MAST_BATCH_NAME,
                    claerancelist.MAST_YEAR,
                    claerancelist.MAST_FUNDING_AGENCY_NAME,
                    claerancelist.MRD_CLEARANCE_NUMBER,
                    claerancelist.MRD_CLEARANCE_DATE,
                    //claerancelist.MRD_REVISION_DATE,
                    claerancelist.MRD_TOTAL_ROADS,
                    claerancelist.MRD_TOTAL_LSB,
                    claerancelist.MRD_ROAD_MORD_SHARE_AMT,
                    claerancelist.MRD_ROAD_STATE_SHARE_AMT,
                    claerancelist.MRD_ROAD_TOTAL_AMT,
                    claerancelist.MRD_LSB_MORD_SHARE_AMT,
                    claerancelist.MRD_LSB_STATE_SHARE_AMT,
                    claerancelist.MRD_LSB_TOTAL_AMT,
                    claerancelist.MRD_TOTAL_MORD_SHARE_AMT,
                    claerancelist.MRD_TOTAL_STATE_SHARE_AMT,
                    claerancelist.MRD_TOTAL_SANCTIONED_AMT,
                    claerancelist.MRD_TOTAL_ROAD_LENGTH,
                    claerancelist.MRD_TOTAL_LSB_LENGTH,
                    claerancelist.MRD_HAB_1000,
                    claerancelist.MRD_HAB_500,
                    claerancelist.MRD_HAB_250_ELIGIBLE,
                    claerancelist.MRD_HAB_100_ELIGIBLE,
                    claerancelist.MRD_CLEARANCE_PDF_FILE,
                    //claerancelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_PDF_FILE,
                    //claerancelist.MRD_ROAD_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_EXCEL_FILE,
                    //claerancelist.MRD_ROAD_REVISED_EXCEL_FILE,
                    claerancelist.MRD_ORG_CLEARANCE_CODE,
                    claerancelist.MRD_CLEARANCE_STATUS

                }).ToArray();


                return result.Select(clearanceDetails => new
                {
                    id = clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{
                    
                    clearanceDetails.MAST_STATE_NAME == null?string.Empty:clearanceDetails.MAST_STATE_NAME.ToString(),
                    (clearanceDetails.MAST_YEAR+"-"+ (clearanceDetails.MAST_YEAR+1)).ToString(),
                    clearanceDetails.MAST_BATCH_NAME == null?string.Empty:clearanceDetails.MAST_BATCH_NAME.ToString(),
                    clearanceDetails.MAST_AGENCY_NAME==null?string.Empty:clearanceDetails.MAST_AGENCY_NAME.ToString(),
                    clearanceDetails.MAST_FUNDING_AGENCY_NAME == null?string.Empty:clearanceDetails.MAST_FUNDING_AGENCY_NAME.ToString(),
                    clearanceDetails.MRD_CLEARANCE_NUMBER.ToString(),
                    clearanceDetails.MRD_CLEARANCE_DATE==null?"":ConvertDateToString(clearanceDetails.MRD_CLEARANCE_DATE),
                    dbContext.MRD_CLEARANCE_LETTERS.Where(a=>a.MRD_ORG_CLEARANCE_CODE==clearanceDetails.MRD_CLEARANCE_CODE && a.MRD_CLEARANCE_STATUS=="R").OrderByDescending(a=>a.MRD_CLEARANCE_CODE).Select(a=>a.MRD_CLEARANCE_NUMBER).FirstOrDefault()??"NA",
                     dbContext.MRD_CLEARANCE_LETTERS.Where(a=>a.MRD_ORG_CLEARANCE_CODE==clearanceDetails.MRD_CLEARANCE_CODE).Count()==0?"NA": ConvertDateToString(dbContext.MRD_CLEARANCE_LETTERS.Where(a=>a.MRD_ORG_CLEARANCE_CODE==clearanceDetails.MRD_CLEARANCE_CODE && a.MRD_CLEARANCE_STATUS=="R").OrderByDescending(a=>a.MRD_CLEARANCE_CODE).Select(a=>a.MRD_CLEARANCE_DATE).FirstOrDefault()),
                    clearanceDetails.MRD_TOTAL_ROADS.ToString(),
                    clearanceDetails.MRD_TOTAL_ROAD_LENGTH.ToString(),
                    clearanceDetails.MRD_TOTAL_LSB.ToString(),
                    clearanceDetails.MRD_TOTAL_LSB_LENGTH.ToString(),
                    clearanceDetails.MRD_ROAD_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_ROAD_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_ROAD_TOTAL_AMT.ToString(),
                    clearanceDetails.MRD_LSB_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_LSB_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_LSB_TOTAL_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_SANCTIONED_AMT.ToString(),             
                    clearanceDetails.MRD_HAB_1000.ToString(),
                    clearanceDetails.MRD_HAB_500.ToString(),
                    clearanceDetails.MRD_HAB_250_ELIGIBLE.ToString(),
                    clearanceDetails.MRD_HAB_100_ELIGIBLE.ToString(),
                    clearanceDetails.MRD_CLEARANCE_STATUS == "R" ? "Revised" : "Original",
                    clearanceDetails.MRD_CLEARANCE_STATUS == "R" ? 
                    "<a href='#' title='Click here to Download File List' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadListViewClearancePDFFile(\"" + URLEncrypt.EncryptParameters(new string[]{ "ClearanceCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=O"}) +"\"); return false;'>Download</a>" 
                    :"<a href='#' title='Click here to Download File List' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadListViewClearancePDFFile(\"" + URLEncrypt.EncryptParameters(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Status=O"}) +"\"); return false;'>Download</a>" ,
                    clearanceDetails.MRD_CLEARANCE_STATUS == "R" ? 
                    "<center><a href='#' class='ui-icon ui-icon-plusthick'  title='Add Clearance Revision Detail' onclick='AddClearanceRevisionDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim()}) + "\"); return false;'>Add</a></center>" :
                    "<center><a href='#' class='ui-icon ui-icon-plusthick'  title='Add Clearance Revision Detail' onclick='AddClearanceRevisionDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim()}) + "\"); return false;'>Add</a></center>",                   
                   clearanceDetails.MRD_CLEARANCE_STATUS == "R" ? 
                   "<center><a href='#' class='ui-icon ui-icon-pencil' onclick='EditClearanceRevisionDetailPartial(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>Edit</a></center>" 
                   : (dbContext.MRD_CLEARANCE_LETTERS.Where(a=>a.MRD_ORG_CLEARANCE_CODE==clearanceDetails.MRD_CLEARANCE_CODE).Count()==0?
                   "<center><a href='#' class='ui-icon ui-icon-pencil' title='Edit Clearance Revision Detail' onclick='EditClearanceDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim()}) + "\"); return false;'>Edit</a></center>"
                   :("<center><table><tr><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>")),
                    clearanceDetails.MRD_CLEARANCE_STATUS == "R" ?  
                    "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteClearancRevisioneDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>Delete</a></center>" 
                    : dbContext.MRD_CLEARANCE_LETTERS.Where(a=>a.MRD_ORG_CLEARANCE_CODE==clearanceDetails.MRD_CLEARANCE_CODE).Count()==0?
                   "<center><a href='#' class='ui-icon ui-icon-trash' title='Delete Clearance Detail' onclick='DeleteClearanceDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type=C","Status=O"}) + "\"); return false;'>Delete</a></center>"        
                   :("<center><table><tr><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>"),
                    clearanceDetails.MRD_CLEARANCE_STATUS == "R" ? "<center><a href='#' class='ui-icon ui-icon-zoomin' title='View Clearance Detail' onclick='ViewClearanceDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Type=C","Status=O"}) + "\"); return false;'>View</a></center>" : "<center><a href='#' class='ui-icon ui-icon-zoomin' title='View Clearance Detail' onclick='ViewClearanceDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type=C","Status=O"}) + "\"); return false;'>View</a></center>"        
                 
                     
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ListMrdClearanceDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public Array ListMrdClearanceFileDAL(int cleranceCode, string clearanceStatus, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                var list = from filelist in dbContext.MRD_CLEARANCE_LETTERS
                           join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join agency in dbContext.MASTER_AGENCY on filelist.ADMIN_ND_CODE equals agency.MAST_AGENCY_CODE
                           join batchs in dbContext.MASTER_BATCH on filelist.MAST_BATCH equals batchs.MAST_BATCH_CODE
                           join fund in dbContext.MASTER_FUNDING_AGENCY on filelist.MAST_COLLABORATION equals fund.MAST_FUNDING_AGENCY_CODE
                           where
                           filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                           filelist.MRD_CLEARANCE_CODE == cleranceCode &&
                           filelist.MRD_CLEARANCE_STATUS == clearanceStatus
                           select new
                           {
                               filelist.MRD_CLEARANCE_CODE,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               agency.MAST_AGENCY_TYPE,
                               batchs.MAST_BATCH_NAME,
                               filelist.MAST_YEAR,
                               fund.MAST_FUNDING_AGENCY_NAME,
                               filelist.MRD_CLEARANCE_NUMBER,
                               filelist.MRD_CLEARANCE_DATE,
                               // filelist.MRD_REVISION_DATE,
                               filelist.MRD_TOTAL_ROADS,
                               filelist.MRD_TOTAL_LSB,
                               filelist.MRD_ROAD_MORD_SHARE_AMT,
                               filelist.MRD_ROAD_STATE_SHARE_AMT,
                               filelist.MRD_ROAD_TOTAL_AMT,
                               filelist.MRD_LSB_MORD_SHARE_AMT,
                               filelist.MRD_LSB_STATE_SHARE_AMT,
                               filelist.MRD_LSB_TOTAL_AMT,
                               filelist.MRD_TOTAL_MORD_SHARE_AMT,
                               filelist.MRD_TOTAL_STATE_SHARE_AMT,
                               filelist.MRD_TOTAL_SANCTIONED_AMT,
                               filelist.MRD_TOTAL_ROAD_LENGTH,
                               filelist.MRD_TOTAL_LSB_LENGTH,
                               filelist.MRD_HAB_1000,
                               filelist.MRD_HAB_250_ELIGIBLE,
                               filelist.MRD_HAB_100_ELIGIBLE,
                               filelist.MRD_CLEARANCE_PDF_FILE,
                               // filelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                               filelist.MRD_ROAD_PDF_FILE,
                               //filelist.MRD_ROAD_REVISED_PDF_FILE,
                               filelist.MRD_ROAD_EXCEL_FILE,
                               // filelist.MRD_ROAD_REVISED_EXCEL_FILE,
                               filelist.MRD_CLEARANCE_STATUS,
                               filelist.MRD_ORG_CLEARANCE_CODE

                           };

                totalRecords = list.Count();
                int MaxCleranceCode = 0;
                if (list.Select(a => a.MRD_CLEARANCE_STATUS).FirstOrDefault().ToString() == "O")
                {
                    MaxCleranceCode = dbContext.MRD_CLEARANCE_LETTERS.Where(a => a.MRD_ORG_CLEARANCE_CODE == list.Select(b => b.MRD_CLEARANCE_CODE).FirstOrDefault()).Count();
                }
                else if (list.Select(a => a.MRD_CLEARANCE_STATUS).FirstOrDefault().ToString() == "R")
                {
                    MaxCleranceCode = dbContext.MRD_CLEARANCE_LETTERS.Where(a => a.MRD_ORG_CLEARANCE_CODE == list.Select(b => b.MRD_ORG_CLEARANCE_CODE).FirstOrDefault()).Max(a => a.MRD_CLEARANCE_CODE);
                }

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderBy(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderBy(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        //list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderByDescending(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderByDescending(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        list = list.OrderByDescending(x => x.MAST_STATE_NAME).ThenBy(x => x.MRD_CLEARANCE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).ThenBy(x => x.MRD_CLEARANCE_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(claerancelist => new
                {

                    claerancelist.MRD_CLEARANCE_CODE,
                    claerancelist.MAST_STATE_NAME,
                    claerancelist.MAST_AGENCY_NAME,
                    claerancelist.MAST_AGENCY_TYPE,
                    claerancelist.MAST_BATCH_NAME,
                    claerancelist.MAST_YEAR,
                    claerancelist.MAST_FUNDING_AGENCY_NAME,
                    claerancelist.MRD_CLEARANCE_NUMBER,
                    claerancelist.MRD_CLEARANCE_DATE,
                    //  claerancelist.MRD_REVISION_DATE,
                    claerancelist.MRD_TOTAL_ROADS,
                    claerancelist.MRD_TOTAL_LSB,
                    claerancelist.MRD_ROAD_MORD_SHARE_AMT,
                    claerancelist.MRD_ROAD_STATE_SHARE_AMT,
                    claerancelist.MRD_ROAD_TOTAL_AMT,
                    claerancelist.MRD_LSB_MORD_SHARE_AMT,
                    claerancelist.MRD_LSB_STATE_SHARE_AMT,
                    claerancelist.MRD_LSB_TOTAL_AMT,
                    claerancelist.MRD_TOTAL_MORD_SHARE_AMT,
                    claerancelist.MRD_TOTAL_STATE_SHARE_AMT,
                    claerancelist.MRD_TOTAL_SANCTIONED_AMT,
                    claerancelist.MRD_TOTAL_ROAD_LENGTH,
                    claerancelist.MRD_TOTAL_LSB_LENGTH,
                    claerancelist.MRD_HAB_1000,
                    claerancelist.MRD_HAB_250_ELIGIBLE,
                    claerancelist.MRD_HAB_100_ELIGIBLE,
                    claerancelist.MRD_CLEARANCE_PDF_FILE,
                    // claerancelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_PDF_FILE,
                    // claerancelist.MRD_ROAD_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_EXCEL_FILE,
                    //claerancelist.MRD_ROAD_REVISED_EXCEL_FILE,
                    claerancelist.MRD_CLEARANCE_STATUS

                }).ToArray();


                return result.Select(clearanceDetails => new
                {
                    id = clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{                   
                
                    clearanceDetails.MRD_CLEARANCE_STATUS=="O"?                   
                    (clearanceDetails.MRD_CLEARANCE_PDF_FILE==null||clearanceDetails.MRD_CLEARANCE_PDF_FILE==string.Empty)? "NA" :
                     MaxCleranceCode==0?
                    "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Clerance Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CP", "File =" + clearanceDetails.MRD_CLEARANCE_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Clerance Pdf File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CP", "File =" + clearanceDetails.MRD_CLEARANCE_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>"
                    :"<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Clerance Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CP", "File =" + clearanceDetails.MRD_CLEARANCE_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>"
                    :(clearanceDetails.MRD_CLEARANCE_PDF_FILE==null||clearanceDetails.MRD_CLEARANCE_PDF_FILE==string.Empty)? "NA" :
                    MaxCleranceCode==clearanceDetails.MRD_CLEARANCE_CODE?
                     "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Revised Clerance  Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CPR", "File =" + clearanceDetails.MRD_CLEARANCE_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Revised Clerance  Pdf File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CPR", "File =" + clearanceDetails.MRD_CLEARANCE_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>"
                    : "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Clerance  Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CPR", "File =" + clearanceDetails.MRD_CLEARANCE_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>",
                     
                     clearanceDetails.MRD_CLEARANCE_STATUS=="O"?
                     (clearanceDetails.MRD_ROAD_PDF_FILE==null||clearanceDetails.MRD_ROAD_PDF_FILE==string.Empty)? "NA" :
                      MaxCleranceCode==0?
                    "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Road List Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RP", "File =" + clearanceDetails.MRD_ROAD_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Road Pdf File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RP", "File =" + clearanceDetails.MRD_ROAD_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>" 
                    :"<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Road List Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RP", "File =" + clearanceDetails.MRD_ROAD_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>"                    
                    :(clearanceDetails.MRD_ROAD_PDF_FILE==null||clearanceDetails.MRD_ROAD_PDF_FILE==string.Empty)? "NA" :
                     MaxCleranceCode==clearanceDetails.MRD_CLEARANCE_CODE?
                     "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Revised Road List  Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RPR", "File =" + clearanceDetails.MRD_ROAD_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Revised Road List  Pdf File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RPR", "File =" + clearanceDetails.MRD_ROAD_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>"
                     : "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Revised Road List  Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RPR", "File =" + clearanceDetails.MRD_ROAD_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>",
                                           
                    clearanceDetails.MRD_CLEARANCE_STATUS=="O"?
                    (clearanceDetails.MRD_ROAD_EXCEL_FILE==null ||clearanceDetails.MRD_ROAD_EXCEL_FILE==string.Empty)? "NA" :
                    MaxCleranceCode==0?
                    "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Road List Excel File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RE", "File =" + clearanceDetails.MRD_ROAD_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Road List Excel File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RE", "File =" + clearanceDetails.MRD_ROAD_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>" 
                    :"<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Road List Excel File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RE", "File =" + clearanceDetails.MRD_ROAD_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>" 
                     :(clearanceDetails.MRD_ROAD_EXCEL_FILE==null ||clearanceDetails.MRD_ROAD_EXCEL_FILE==string.Empty)? "NA" :
                     MaxCleranceCode==clearanceDetails.MRD_CLEARANCE_CODE?
                    "<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Revised Road List Excel File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RER", "File =" + clearanceDetails.MRD_ROAD_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Revised Road List  Excel File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RER", "File =" + clearanceDetails.MRD_ROAD_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>"
                    :"<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Revised Road List Excel File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RER", "File =" + clearanceDetails.MRD_ROAD_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>" ,
                
                    //(clearanceDetails.MRD_CLEARANCE_REVISED_PDF_FILE==null ||clearanceDetails.MRD_CLEARANCE_REVISED_PDF_FILE==string.Empty)? "NA" :                   
                    //"<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Clerance Revised Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CPR", "File =" + clearanceDetails.MRD_CLEARANCE_REVISED_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Clerance Revised Pdf File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = CPR", "File =" + clearanceDetails.MRD_CLEARANCE_REVISED_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>" ,
                    //(clearanceDetails.MRD_ROAD_REVISED_PDF_FILE==null ||clearanceDetails.MRD_ROAD_REVISED_PDF_FILE==string.Empty)? "NA" :
                    //"<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Road Revised Pdf File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RPR", "File =" + clearanceDetails.MRD_ROAD_REVISED_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Revised Road Pdf File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RPR", "File =" + clearanceDetails.MRD_ROAD_REVISED_PDF_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>" ,
                    //(clearanceDetails.MRD_ROAD_REVISED_EXCEL_FILE==null ||clearanceDetails.MRD_ROAD_REVISED_EXCEL_FILE==string.Empty)? "NA" :
                    //"<center><table><tr><td style='border:none'><a href='#' title='Click here to Download an Road Revised Excel File' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RER", "File =" + clearanceDetails.MRD_ROAD_REVISED_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Download</a> </td><td style='border:none'><a href='#' title='Click here to Delete Revised Road Excel File' class='ui-icon ui-icon-trash' onClick=DeleteFile(\"" + URLEncrypt.EncryptParameters(new string[] {"ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"Type = RER", "File =" + clearanceDetails.MRD_ROAD_REVISED_EXCEL_FILE.ToString().Replace("/", "")}) +"\"); return false;'>Delete</a> </td></tr></table></center>" ,
            
                         
         
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ListMrdClearanceFileDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }


        public bool AddMrdClearanceDAL(MrdClearenceViewModel mrdClearanceViewModel, ref string message)
        {
            int recordCount = 0;
            try
            {
                dbContext = new PMGSYEntities();
                recordCount = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MAST_STATE_CODE == mrdClearanceViewModel.Mast_State_Code && m.ADMIN_ND_CODE == mrdClearanceViewModel.Mast_Agency && m.MAST_YEAR == mrdClearanceViewModel.PhaseYear && m.MAST_BATCH == mrdClearanceViewModel.Batch && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme && m.MAST_COLLABORATION == mrdClearanceViewModel.IMS_COLLABORATION && m.MRD_CLEARANCE_STATUS == "O" && m.MRD_UPGRADE_CONNECT == mrdClearanceViewModel.UPGRADE_CONNECT).Count();
                if (recordCount > 0)
                {
                    message = "Clearance details already exist.";
                    return false;
                }
                MRD_CLEARANCE_LETTERS MrdClearanceModel = new MRD_CLEARANCE_LETTERS();
                MrdClearanceModel = CloneModelToObjectMrdClearance(new MRD_CLEARANCE_LETTERS(), mrdClearanceViewModel);
                dbContext = new PMGSYEntities();
                MrdClearanceModel.MRD_CLEARANCE_CODE = dbContext.MRD_CLEARANCE_LETTERS.Max(cp => (Int32?)cp.MRD_CLEARANCE_CODE) == null ? 1 : (Int32)dbContext.MRD_CLEARANCE_LETTERS.Max(cp => (Int32?)cp.MRD_CLEARANCE_CODE) + 1;
                dbContext.MRD_CLEARANCE_LETTERS.Add(MrdClearanceModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddMrdClearanceDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteMrdClearanceDAL(int clearanceCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MRD_CLEARANCE_LETTERS clearanceModel = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_CODE == clearanceCode).FirstOrDefault();
                //Added by abhishek kamble 27-nov-2013
                clearanceModel.USERID = PMGSYSession.Current.UserId;
                clearanceModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(clearanceModel).State = EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.MRD_CLEARANCE_LETTERS.Remove(clearanceModel);
                dbContext.SaveChanges();
                message = "Clearance details deleted successfully.";
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteMrdClearanceDAL(DbUpdateException ex).DAL");
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteMrdClearanceDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditMrdClearanceDAL(MrdClearenceViewModel mrdClearanceViewModel, ref string message)
        {
            try
            {

                int recordCount = 0;

                int clearanceCode = 0;
                dbContext = new PMGSYEntities();
                string[] encryptedParameters = mrdClearanceViewModel.EncryptedClearanceCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }

                Dictionary<string, string> decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                clearanceCode = Convert.ToInt32(decryptedParameters["ClearanceCode"].ToString());

                recordCount = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MAST_STATE_CODE == mrdClearanceViewModel.Mast_State_Code && m.ADMIN_ND_CODE == mrdClearanceViewModel.Mast_Agency && m.MAST_YEAR == mrdClearanceViewModel.PhaseYear && m.MAST_BATCH == mrdClearanceViewModel.Batch && m.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme && m.MAST_COLLABORATION == mrdClearanceViewModel.IMS_COLLABORATION && m.MRD_CLEARANCE_STATUS == "O" && m.MRD_CLEARANCE_CODE != clearanceCode).Count();
                MRD_CLEARANCE_LETTERS claeranceLetterModel = new MRD_CLEARANCE_LETTERS();
                if (recordCount > 0)
                {
                    message = "Clearance details already exist.";
                    return false;
                }
                claeranceLetterModel = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_CODE == clearanceCode).FirstOrDefault();
                claeranceLetterModel = CloneModelToObjectMrdClearance(claeranceLetterModel, mrdClearanceViewModel);
                dbContext = new PMGSYEntities();
                dbContext.Entry(claeranceLetterModel).State = EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditMrdClearanceDAL(OptimisticConcurrencyException ex).DAL");
                return false;
            }
            catch (UpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditMrdClearanceDAL(UpdateException ex).DAL");
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditMrdClearanceDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MrdClearenceViewModel GetMrdClearanceDetailsDAL(int clearanceCode)
        {
            try
            {
                CommonFunctions objComFucntion = new CommonFunctions();
                dbContext = new PMGSYEntities();
                MRD_CLEARANCE_LETTERS modelMrdClearance = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_CODE == clearanceCode).FirstOrDefault();
                MrdClearenceViewModel model = null;
                if (modelMrdClearance != null)
                {
                    model = new MrdClearenceViewModel()
                    {
                        EncryptedClearanceCode = URLEncrypt.EncryptParameters1(new string[] { "ClearanceCode=" + modelMrdClearance.MRD_CLEARANCE_CODE.ToString().Trim() }),
                        State_Name = modelMrdClearance.MASTER_STATE.MAST_STATE_NAME,
                        Agency_Name = dbContext.MASTER_AGENCY.Where(a => a.MAST_AGENCY_CODE == modelMrdClearance.ADMIN_ND_CODE).Select(a => a.MAST_AGENCY_NAME).FirstOrDefault(),
                        Year_Name = modelMrdClearance.MAST_YEAR.ToString(),
                        Batch_Name = modelMrdClearance.MASTER_BATCH.MAST_BATCH_NAME,
                        Collaboration_Name = modelMrdClearance.MASTER_FUNDING_AGENCY.MAST_FUNDING_AGENCY_NAME,
                        Mast_State_Code = modelMrdClearance.MAST_STATE_CODE,
                        Mast_Agency = modelMrdClearance.ADMIN_ND_CODE,
                        PhaseYear = modelMrdClearance.MAST_YEAR,
                        Batch = modelMrdClearance.MAST_BATCH,
                        IMS_COLLABORATION = modelMrdClearance.MAST_COLLABORATION,
                        MRD_CLEARANCE_NUMBER = modelMrdClearance.MRD_CLEARANCE_NUMBER,
                        MRD_CLEARANCE_DATE = objComFucntion.GetDateTimeToString(modelMrdClearance.MRD_CLEARANCE_DATE),
                        //MRD_REVISION_DATE = modelMrdClearance.MRD_REVISION_DATE == null ? string.Empty : objComFucntion.GetDateTimeToString(modelMrdClearance.MRD_REVISION_DATE.Value),
                        //MRD_REVISION_NUMBER = modelMrdClearance.MRD_REVISION_NUMBER == null ? string.Empty : modelMrdClearance.MRD_REVISION_NUMBER,
                        MRD_TOTAL_ROADS = modelMrdClearance.MRD_TOTAL_ROADS,
                        MRD_TOTAL_LSB = modelMrdClearance.MRD_TOTAL_LSB,
                        MRD_ROAD_MORD_SHARE_AMT = modelMrdClearance.MRD_ROAD_MORD_SHARE_AMT,
                        MRD_ROAD_STATE_SHARE_AMT = modelMrdClearance.MRD_ROAD_STATE_SHARE_AMT,
                        MRD_ROAD_TOTAL_AMT = modelMrdClearance.MRD_ROAD_TOTAL_AMT,
                        MRD_LSB_MORD_SHARE_AMT = modelMrdClearance.MRD_LSB_MORD_SHARE_AMT,
                        MRD_LSB_STATE_SHARE_AMT = modelMrdClearance.MRD_LSB_STATE_SHARE_AMT,
                        MRD_LSB_TOTAL_AMT = modelMrdClearance.MRD_LSB_TOTAL_AMT,
                        MRD_TOTAL_MORD_SHARE_AMT = modelMrdClearance.MRD_TOTAL_MORD_SHARE_AMT,
                        MRD_TOTAL_STATE_SHARE_AMT = modelMrdClearance.MRD_TOTAL_STATE_SHARE_AMT,
                        MRD_TOTAL_SANCTIONED_AMT = modelMrdClearance.MRD_TOTAL_SANCTIONED_AMT,
                        MRD_TOTAL_ROAD_LENGTH = modelMrdClearance.MRD_TOTAL_ROAD_LENGTH,
                        MRD_TOTAL_LSB_LENGTH = modelMrdClearance.MRD_TOTAL_LSB_LENGTH,
                        MRD_HAB_1000 = modelMrdClearance.MRD_HAB_1000,
                        MRD_HAB_500 = modelMrdClearance.MRD_HAB_500,
                        MRD_HAB_250_ELIGIBLE = modelMrdClearance.MRD_HAB_250_ELIGIBLE,
                        MRD_HAB_100_ELIGIBLE = modelMrdClearance.MRD_HAB_100_ELIGIBLE,
                        MRD_CLEARANCE_PDF_FILE = modelMrdClearance.MRD_CLEARANCE_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_CLEARANCE_PDF_FILE,
                        // MRD_CLEARANCE_REVISED_PDF_FILE = modelMrdClearance.MRD_CLEARANCE_REVISED_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_CLEARANCE_REVISED_PDF_FILE,
                        MRD_ROAD_PDF_FILE = modelMrdClearance.MRD_ROAD_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_PDF_FILE,
                        // MRD_ROAD_REVISED_PDF_FILE = modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE,
                        MRD_ROAD_EXCEL_FILE = modelMrdClearance.MRD_ROAD_EXCEL_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_EXCEL_FILE,
                        // MRD_ROAD_REVISED_EXCEL_FILE = modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE,
                        Mast_AgencyList = objComFucntion.PopulateAgenciesByStateAndDepartmentwise(modelMrdClearance.MAST_STATE_CODE, PMGSYSession.Current.AdminNdCode, false),
                        StateList = objComFucntion.PopulateStates(true),
                        BatchList = objComFucntion.PopulateBatch(false),
                        //PhaseYearList = new SelectList(objComFucntion.PopulateYears(true), "Value", "Text").ToList(),
                        PhaseYearList = new SelectList(objComFucntion.PopulateFinancialYear(true, false), "Value", "Text").ToList(),
                        COLLABORATIONS_List = objComFucntion.PopulateFundingAgency(false),
                        STAGE_COMPLETE = modelMrdClearance.MRD_STAGE_COMPLETE,
                        UPGRADE_CONNECT = modelMrdClearance.MRD_UPGRADE_CONNECT,
                        MRD_CLEARANCE_REMARKS = modelMrdClearance.MRD_CLEARANCE_REMARKS
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMrdClearanceDetailsDAL().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MRD_CLEARANCE_LETTERS CloneModelToObjectMrdClearance(MRD_CLEARANCE_LETTERS mrdClearanceModel, MrdClearenceViewModel modelMrdClearance)
        {
            CommonFunctions objComFucntion = new CommonFunctions();
            try
            {

                mrdClearanceModel.MAST_STATE_CODE = modelMrdClearance.Mast_State_Code;
                mrdClearanceModel.ADMIN_ND_CODE = modelMrdClearance.Mast_Agency;
                mrdClearanceModel.MAST_YEAR = modelMrdClearance.PhaseYear;
                mrdClearanceModel.MAST_BATCH = modelMrdClearance.Batch;
                mrdClearanceModel.MAST_COLLABORATION = modelMrdClearance.IMS_COLLABORATION;
                mrdClearanceModel.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                mrdClearanceModel.MRD_CLEARANCE_NUMBER = modelMrdClearance.MRD_CLEARANCE_NUMBER.ToString();
                mrdClearanceModel.MRD_CLEARANCE_DATE = objComFucntion.GetStringToDateTime(modelMrdClearance.MRD_CLEARANCE_DATE);
                //  mrdClearanceModel.MRD_REVISION_DATE = modelMrdClearance.MRD_REVISION_DATE ==""?null:ConvertStringToDate(modelMrdClearance.MRD_REVISION_DATE); 
                mrdClearanceModel.MRD_TOTAL_ROADS = modelMrdClearance.MRD_TOTAL_ROADS;
                mrdClearanceModel.MRD_TOTAL_LSB = modelMrdClearance.MRD_TOTAL_LSB;
                mrdClearanceModel.MRD_ROAD_MORD_SHARE_AMT = modelMrdClearance.MRD_ROAD_MORD_SHARE_AMT;
                mrdClearanceModel.MRD_ROAD_STATE_SHARE_AMT = modelMrdClearance.MRD_ROAD_STATE_SHARE_AMT;
                mrdClearanceModel.MRD_ROAD_TOTAL_AMT = modelMrdClearance.MRD_ROAD_TOTAL_AMT;
                mrdClearanceModel.MRD_LSB_MORD_SHARE_AMT = modelMrdClearance.MRD_LSB_MORD_SHARE_AMT;
                mrdClearanceModel.MRD_LSB_STATE_SHARE_AMT = modelMrdClearance.MRD_LSB_STATE_SHARE_AMT;
                mrdClearanceModel.MRD_LSB_TOTAL_AMT = modelMrdClearance.MRD_LSB_TOTAL_AMT;
                mrdClearanceModel.MRD_TOTAL_MORD_SHARE_AMT = modelMrdClearance.MRD_TOTAL_MORD_SHARE_AMT;
                mrdClearanceModel.MRD_TOTAL_STATE_SHARE_AMT = modelMrdClearance.MRD_TOTAL_STATE_SHARE_AMT;
                mrdClearanceModel.MRD_TOTAL_SANCTIONED_AMT = modelMrdClearance.MRD_TOTAL_SANCTIONED_AMT;
                mrdClearanceModel.MRD_TOTAL_ROAD_LENGTH = modelMrdClearance.MRD_TOTAL_ROAD_LENGTH;
                mrdClearanceModel.MRD_TOTAL_LSB_LENGTH = modelMrdClearance.MRD_TOTAL_LSB_LENGTH;
                mrdClearanceModel.MRD_HAB_1000 = modelMrdClearance.MRD_HAB_1000;
                mrdClearanceModel.MRD_HAB_500 = modelMrdClearance.MRD_HAB_500;
                mrdClearanceModel.MRD_HAB_250_ELIGIBLE = modelMrdClearance.MRD_HAB_250_ELIGIBLE;
                mrdClearanceModel.MRD_HAB_100_ELIGIBLE = modelMrdClearance.MRD_HAB_100_ELIGIBLE;
                mrdClearanceModel.MRD_CLEARANCE_PDF_FILE = modelMrdClearance.MRD_CLEARANCE_PDF_FILE == null ? null : modelMrdClearance.MRD_CLEARANCE_PDF_FILE;
                // mrdClearanceModel.MRD_CLEARANCE_REVISED_PDF_FILE = modelMrdClearance.MRD_CLEARANCE_REVISED_PDF_FILE;
                mrdClearanceModel.MRD_ROAD_PDF_FILE = modelMrdClearance.MRD_ROAD_PDF_FILE == null ? null : modelMrdClearance.MRD_ROAD_PDF_FILE;
                // mrdClearanceModel.MRD_ROAD_REVISED_PDF_FILE =modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE==null?null:modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE;
                mrdClearanceModel.MRD_ROAD_EXCEL_FILE = modelMrdClearance.MRD_ROAD_EXCEL_FILE == null ? null : modelMrdClearance.MRD_ROAD_EXCEL_FILE;
                // mrdClearanceModel.MRD_ROAD_REVISED_EXCEL_FILE = modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE == null ? null : modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE; ;
                mrdClearanceModel.MRD_ORG_CLEARANCE_CODE = null;
                mrdClearanceModel.MRD_CLEARANCE_STATUS = "O";
                mrdClearanceModel.MRD_UPGRADE_CONNECT = modelMrdClearance.UPGRADE_CONNECT;
                mrdClearanceModel.MRD_STAGE_COMPLETE = modelMrdClearance.STAGE_COMPLETE;
                mrdClearanceModel.MRD_CLEARANCE_REMARKS = modelMrdClearance.MRD_CLEARANCE_REMARKS;
                mrdClearanceModel.USERID = PMGSYSession.Current.UserId;
                mrdClearanceModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                return mrdClearanceModel;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "CloneModelToObjectMrdClearance().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListMrdClearanceRevisionDAL(int clearanceCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int maxCleranceRevsionCode = 0;
                var list = from filelist in dbContext.MRD_CLEARANCE_LETTERS
                           join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join agency in dbContext.MASTER_AGENCY on filelist.ADMIN_ND_CODE equals agency.MAST_AGENCY_CODE
                           join batchs in dbContext.MASTER_BATCH on filelist.MAST_BATCH equals batchs.MAST_BATCH_CODE
                           join fund in dbContext.MASTER_FUNDING_AGENCY on filelist.MAST_COLLABORATION equals fund.MAST_FUNDING_AGENCY_CODE
                           where
                               //(stateCode <= 0 ? 1 : filelist.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                               //(agencyCode <= 0 ? 1 : filelist.ADMIN_ND_CODE) == (agencyCode <= 0 ? 1 : agencyCode) &&
                               //(year <= 0 ? 1 : filelist.MAST_YEAR) == (year <= 0 ? 1 : year) &&
                               //(batch <= 0 ? 1 : filelist.MAST_BATCH) == (batch <= 0 ? 1 : batch) &&
                               //(collaboration <= 0 ? 1 : filelist.MAST_COLLABORATION) == (collaboration <= 0 ? 1 : collaboration) &&
                           filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                           filelist.MRD_CLEARANCE_STATUS == "R" &&
                           filelist.MRD_ORG_CLEARANCE_CODE == clearanceCode
                           select new
                           {
                               filelist.MRD_CLEARANCE_CODE,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               agency.MAST_AGENCY_TYPE,
                               batchs.MAST_BATCH_NAME,
                               filelist.MAST_YEAR,
                               fund.MAST_FUNDING_AGENCY_NAME,
                               filelist.MRD_CLEARANCE_NUMBER,
                               filelist.MRD_CLEARANCE_DATE,
                               //filelist.MRD_REVISION_DATE,
                               filelist.MRD_TOTAL_ROADS,
                               filelist.MRD_TOTAL_LSB,
                               filelist.MRD_ROAD_MORD_SHARE_AMT,
                               filelist.MRD_ROAD_STATE_SHARE_AMT,
                               filelist.MRD_ROAD_TOTAL_AMT,
                               filelist.MRD_LSB_MORD_SHARE_AMT,
                               filelist.MRD_LSB_STATE_SHARE_AMT,
                               filelist.MRD_LSB_TOTAL_AMT,
                               filelist.MRD_TOTAL_MORD_SHARE_AMT,
                               filelist.MRD_TOTAL_STATE_SHARE_AMT,
                               filelist.MRD_TOTAL_SANCTIONED_AMT,
                               filelist.MRD_TOTAL_ROAD_LENGTH,
                               filelist.MRD_TOTAL_LSB_LENGTH,
                               filelist.MRD_HAB_1000,
                               filelist.MRD_HAB_500,
                               filelist.MRD_HAB_250_ELIGIBLE,
                               filelist.MRD_HAB_100_ELIGIBLE,
                               filelist.MRD_CLEARANCE_PDF_FILE,
                               filelist.MRD_ORG_CLEARANCE_CODE,
                               filelist.MRD_CLEARANCE_STATUS,
                               //filelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                               filelist.MRD_ROAD_PDF_FILE,
                               //filelist.MRD_ROAD_REVISED_PDF_FILE,
                               filelist.MRD_ROAD_EXCEL_FILE,
                               // filelist.MRD_ROAD_REVISED_EXCEL_FILE
                           };

                totalRecords = list.Count();
                if (totalRecords > 0)
                {
                    maxCleranceRevsionCode = list.Max(a => a.MRD_CLEARANCE_CODE);
                }
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderBy(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderBy(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        list = list.OrderBy(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderByDescending(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderByDescending(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        list = list.OrderByDescending(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(claerancelist => new
                {

                    claerancelist.MRD_CLEARANCE_CODE,
                    claerancelist.MAST_STATE_NAME,
                    claerancelist.MAST_AGENCY_NAME,
                    claerancelist.MAST_AGENCY_TYPE,
                    claerancelist.MAST_BATCH_NAME,
                    claerancelist.MAST_YEAR,
                    claerancelist.MAST_FUNDING_AGENCY_NAME,
                    claerancelist.MRD_CLEARANCE_NUMBER,
                    claerancelist.MRD_CLEARANCE_DATE,
                    //claerancelist.MRD_REVISION_DATE,
                    claerancelist.MRD_TOTAL_ROADS,
                    claerancelist.MRD_TOTAL_LSB,
                    claerancelist.MRD_ROAD_MORD_SHARE_AMT,
                    claerancelist.MRD_ROAD_STATE_SHARE_AMT,
                    claerancelist.MRD_ROAD_TOTAL_AMT,
                    claerancelist.MRD_LSB_MORD_SHARE_AMT,
                    claerancelist.MRD_LSB_STATE_SHARE_AMT,
                    claerancelist.MRD_LSB_TOTAL_AMT,
                    claerancelist.MRD_TOTAL_MORD_SHARE_AMT,
                    claerancelist.MRD_TOTAL_STATE_SHARE_AMT,
                    claerancelist.MRD_TOTAL_SANCTIONED_AMT,
                    claerancelist.MRD_TOTAL_ROAD_LENGTH,
                    claerancelist.MRD_TOTAL_LSB_LENGTH,
                    claerancelist.MRD_HAB_1000,
                    claerancelist.MRD_HAB_500,
                    claerancelist.MRD_HAB_250_ELIGIBLE,
                    claerancelist.MRD_HAB_100_ELIGIBLE,
                    claerancelist.MRD_CLEARANCE_PDF_FILE,
                    //claerancelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_PDF_FILE,
                    //claerancelist.MRD_ROAD_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_EXCEL_FILE,
                    //claerancelist.MRD_ROAD_REVISED_EXCEL_FILE,
                    claerancelist.MRD_ORG_CLEARANCE_CODE,
                    claerancelist.MRD_CLEARANCE_STATUS

                }).ToArray();


                return result.Select(clearanceDetails => new
                {
                    id = URLEncrypt.EncryptParameters(new string[] { "ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(), "ClearanceRevisionCode=" + clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(), "Status=R" }),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{
                    
                    clearanceDetails.MAST_STATE_NAME == null?string.Empty:clearanceDetails.MAST_STATE_NAME.ToString(),
                    (clearanceDetails.MAST_YEAR+"-"+ (clearanceDetails.MAST_YEAR+1)).ToString(),
                    clearanceDetails.MAST_BATCH_NAME == null?string.Empty:clearanceDetails.MAST_BATCH_NAME.ToString(),
                    clearanceDetails.MAST_AGENCY_NAME==null?string.Empty:clearanceDetails.MAST_AGENCY_NAME.ToString(),
                    clearanceDetails.MAST_FUNDING_AGENCY_NAME == null?string.Empty:clearanceDetails.MAST_FUNDING_AGENCY_NAME.ToString(),
                    clearanceDetails.MRD_CLEARANCE_DATE==null?"":ConvertDateToString(clearanceDetails.MRD_CLEARANCE_DATE),
                    clearanceDetails.MRD_TOTAL_ROADS.ToString(),
                    clearanceDetails.MRD_TOTAL_LSB.ToString(),
                    clearanceDetails.MRD_ROAD_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_ROAD_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_ROAD_TOTAL_AMT.ToString(),
                    clearanceDetails.MRD_LSB_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_LSB_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_LSB_TOTAL_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_SANCTIONED_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_ROAD_LENGTH.ToString(),
                    clearanceDetails.MRD_TOTAL_LSB_LENGTH.ToString(),
                    clearanceDetails.MRD_HAB_1000.ToString(),
                    clearanceDetails.MRD_HAB_500.ToString(),
                    clearanceDetails.MRD_HAB_250_ELIGIBLE.ToString(),
                    clearanceDetails.MRD_HAB_100_ELIGIBLE.ToString(),
                    //checklistDetails.IMS_FILE_NAME == "NA" 
                    //                ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadECFile(\"" +  checklistDetails.MAST_FILE_ID.ToString().Trim() + "\"); return false;'>Upload</a>" 
                    //                : "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ViewECFile(\"" +  checklistDetails.MAST_FILE_ID.ToString().Trim() + "\"); return false;'>View</a>" ,
                    "<a href='#' title='Click here to Download File List' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadListViewClearanceRevisionPDFFile(\"" + URLEncrypt.EncryptParameters(new string[]{"ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) +"\"); return false;'>Download</a>" ,
                    
                     
                    clearanceDetails.MRD_CLEARANCE_CODE==maxCleranceRevsionCode?
                    "<center><a href='#' class='ui-icon ui-icon-pencil' onclick='EditClearanceRevisionDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>Edit</a></center>"
                    :("<center><table><tr><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>"),
                     clearanceDetails.MRD_CLEARANCE_CODE==maxCleranceRevsionCode?
                    "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteClearancRevisioneDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>Delete</a></center>"        
                    :("<center><table><tr><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>"),
                    "<center><a href='#' class='ui-icon ui-icon-zoomin' onclick='ViewClearanceRevisionDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>View</a></center>"        
                  
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ListMrdClearanceRevisionDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        public bool AddMrdClearanceRevisionDAL(MrdClearenceRevisionViewModel mrdClearanceRevisionViewModel, ref string message)
        {

            try
            {
                dbContext = new PMGSYEntities();
                MRD_CLEARANCE_LETTERS MrdClearanceModel = CloneModelToObjectMrdClearanceRevisionDetail(new MRD_CLEARANCE_LETTERS(), mrdClearanceRevisionViewModel); ;
                dbContext = new PMGSYEntities();
                MrdClearanceModel.MRD_CLEARANCE_CODE = dbContext.MRD_CLEARANCE_LETTERS.Max(cp => (Int32?)cp.MRD_CLEARANCE_CODE) == null ? 1 : (Int32)dbContext.MRD_CLEARANCE_LETTERS.Max(cp => (Int32?)cp.MRD_CLEARANCE_CODE) + 1;
                dbContext.MRD_CLEARANCE_LETTERS.Add(MrdClearanceModel);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "AddMrdClearanceRevisionDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool DeleteMrdClearanceRevisionDAL(int clearanceCode, ref string message)
        {
            try
            {
                dbContext = new PMGSYEntities();
                MRD_CLEARANCE_LETTERS clearanceModel = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_CODE == clearanceCode).FirstOrDefault();
                //Added by abhishek kamble 27-nov-2013
                clearanceModel.USERID = PMGSYSession.Current.UserId;
                clearanceModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                dbContext.Entry(clearanceModel).State = EntityState.Modified;
                dbContext.SaveChanges();
                dbContext.MRD_CLEARANCE_LETTERS.Remove(clearanceModel);
                dbContext.SaveChanges();
                message = "Clearance details deleted successfully.";
                return true;
            }
            catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteMrdClearanceRevisionDAL(DbUpdateException ex).DAL");
                message = "You can not delete this details.";
                return false;
            }

            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteMrdClearanceRevisionDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MrdClearenceRevisionViewModel GetMrdClearanceRevisionDetailsDAL(int clearanceCode, string action)
        {
            try
            {
                CommonFunctions objComFucntion = new CommonFunctions();
                dbContext = new PMGSYEntities();
                MRD_CLEARANCE_LETTERS modelMrdClearance = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_CODE == clearanceCode).FirstOrDefault();
                MrdClearenceRevisionViewModel model = null;
                if (modelMrdClearance != null)
                {
                    model = new MrdClearenceRevisionViewModel()
                    {
                        State_Name = modelMrdClearance.MASTER_STATE.MAST_STATE_NAME,
                        Agency_Name = dbContext.MASTER_AGENCY.Where(a => a.MAST_AGENCY_CODE == modelMrdClearance.ADMIN_ND_CODE).Select(a => a.MAST_AGENCY_NAME).FirstOrDefault(),
                        Year_Name = modelMrdClearance.MAST_YEAR.ToString(),
                        Batch_Name = modelMrdClearance.MASTER_BATCH.MAST_BATCH_NAME,
                        Collaboration_Name = modelMrdClearance.MASTER_FUNDING_AGENCY.MAST_FUNDING_AGENCY_NAME,
                        EncryptedClearanceCode = URLEncrypt.EncryptParameters1(new string[] { "ClearanceCode=" + modelMrdClearance.MRD_CLEARANCE_CODE.ToString().Trim() }),
                        EncryptedClearanceRevisionCode = action == "A" ? URLEncrypt.EncryptParameters1(new string[] { "ClearanceRevisionCode=" + modelMrdClearance.MRD_CLEARANCE_CODE.ToString().Trim() }) : URLEncrypt.EncryptParameters1(new string[] { "ClearanceRevisionCode=" + modelMrdClearance.MRD_ORG_CLEARANCE_CODE.ToString().Trim() }),
                        Mast_State_Code = modelMrdClearance.MAST_STATE_CODE,
                        Mast_Agency = modelMrdClearance.ADMIN_ND_CODE,
                        PhaseYear = modelMrdClearance.MAST_YEAR,
                        Batch = modelMrdClearance.MAST_BATCH,
                        IMS_COLLABORATION = modelMrdClearance.MAST_COLLABORATION,
                        MRD_CLEARANCE_NUMBER = modelMrdClearance.MRD_CLEARANCE_NUMBER,
                        MRD_CLEARANCE_DATE = objComFucntion.GetDateTimeToString(modelMrdClearance.MRD_CLEARANCE_DATE),
                        MRD_REVISION_DATE = modelMrdClearance.MRD_CLEARANCE_STATUS == "O" ? string.Empty : objComFucntion.GetDateTimeToString(modelMrdClearance.MRD_CLEARANCE_DATE),
                        MRD_REVISION_NUMBER = modelMrdClearance.MRD_CLEARANCE_STATUS == "O" ? string.Empty : modelMrdClearance.MRD_CLEARANCE_NUMBER,
                        MRD_TOTAL_ROADS = modelMrdClearance.MRD_TOTAL_ROADS,
                        MRD_TOTAL_LSB = modelMrdClearance.MRD_TOTAL_LSB,
                        MRD_ROAD_MORD_SHARE_AMT = modelMrdClearance.MRD_ROAD_MORD_SHARE_AMT,
                        MRD_ROAD_STATE_SHARE_AMT = modelMrdClearance.MRD_ROAD_STATE_SHARE_AMT,
                        MRD_ROAD_TOTAL_AMT = modelMrdClearance.MRD_ROAD_TOTAL_AMT,
                        MRD_LSB_MORD_SHARE_AMT = modelMrdClearance.MRD_LSB_MORD_SHARE_AMT,
                        MRD_LSB_STATE_SHARE_AMT = modelMrdClearance.MRD_LSB_STATE_SHARE_AMT,
                        MRD_LSB_TOTAL_AMT = modelMrdClearance.MRD_LSB_TOTAL_AMT,
                        MRD_TOTAL_MORD_SHARE_AMT = modelMrdClearance.MRD_TOTAL_MORD_SHARE_AMT,
                        MRD_TOTAL_STATE_SHARE_AMT = modelMrdClearance.MRD_TOTAL_STATE_SHARE_AMT,
                        MRD_TOTAL_SANCTIONED_AMT = modelMrdClearance.MRD_TOTAL_SANCTIONED_AMT,
                        MRD_TOTAL_ROAD_LENGTH = modelMrdClearance.MRD_TOTAL_ROAD_LENGTH,
                        MRD_TOTAL_LSB_LENGTH = modelMrdClearance.MRD_TOTAL_LSB_LENGTH,
                        MRD_HAB_1000 = modelMrdClearance.MRD_HAB_1000,
                        MRD_HAB_500 = modelMrdClearance.MRD_HAB_500,
                        MRD_HAB_250_ELIGIBLE = modelMrdClearance.MRD_HAB_250_ELIGIBLE,
                        MRD_HAB_100_ELIGIBLE = modelMrdClearance.MRD_HAB_100_ELIGIBLE,
                        MRD_CLEARANCE_REVISED_PDF_FILE = modelMrdClearance.MRD_CLEARANCE_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_CLEARANCE_PDF_FILE,
                        // MRD_CLEARANCE_REVISED_PDF_FILE = modelMrdClearance.MRD_CLEARANCE_REVISED_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_CLEARANCE_REVISED_PDF_FILE,
                        MRD_ROAD_REVISED_PDF_FILE = modelMrdClearance.MRD_ROAD_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_PDF_FILE,
                        // MRD_ROAD_REVISED_PDF_FILE = modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE,
                        MRD_ROAD_REVISED_EXCEL_FILE = modelMrdClearance.MRD_ROAD_EXCEL_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_EXCEL_FILE,
                        // MRD_ROAD_REVISED_EXCEL_FILE = modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE == null ? string.Empty : modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE,
                        Mast_AgencyList = objComFucntion.PopulateAgenciesByStateAndDepartmentwise(modelMrdClearance.MAST_STATE_CODE, PMGSYSession.Current.AdminNdCode, false),
                        StateList = objComFucntion.PopulateStates(true),
                        BatchList = objComFucntion.PopulateBatch(false),
                        //PhaseYearList = new SelectList(objComFucntion.PopulateYears(true), "Value", "Text").ToList(),
                        PhaseYearList = new SelectList(objComFucntion.PopulateFinancialYear(true, false), "Value", "Text").ToList(),
                        COLLABORATIONS_List = objComFucntion.PopulateFundingAgency(false),
                        MRD_ORG_CLEARANCE_CODE = modelMrdClearance.MRD_ORG_CLEARANCE_CODE,
                        UPGRADE_CONNECT = modelMrdClearance.MRD_UPGRADE_CONNECT,
                        STAGE_COMPLETE = modelMrdClearance.MRD_STAGE_COMPLETE,
                        MRD_CLEARANCE_REMARKS = modelMrdClearance.MRD_CLEARANCE_REMARKS
                    };
                }
                return model;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMrdClearanceRevisionDetailsDAL().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }


        public bool EditMrdClearanceRevsionDAL(MrdClearenceRevisionViewModel mrdClearanceRevsionViewModel, ref string message)
        {
            try
            {
                int clearanceCode = 0;
                dbContext = new PMGSYEntities();
                string[] encryptedParameters = mrdClearanceRevsionViewModel.EncryptedClearanceCode.Split('/');
                if (!(encryptedParameters.Length == 3))
                {
                    return false;
                }
                Dictionary<string, string> decryptedParameters = URLEncrypt.DecryptParameters1(new String[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                clearanceCode = Convert.ToInt32(decryptedParameters["ClearanceCode"].ToString());

                MRD_CLEARANCE_LETTERS fileUploadModel = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_CODE == clearanceCode).FirstOrDefault();
                fileUploadModel = CloneModelToObjectMrdClearanceRevisionDetail(fileUploadModel, mrdClearanceRevsionViewModel);
                dbContext = new PMGSYEntities();
                dbContext.Entry(fileUploadModel).State = EntityState.Modified;
                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMrdClearanceRevisionDetailsDAL(OptimisticConcurrencyException ex).DAL");
                return false;
            }
            catch (UpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMrdClearanceRevisionDetailsDAL(UpdateException ex).DAL");
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMrdClearanceRevisionDetailsDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool EditDeleteMrdClearanceFileDAL(int clearanceCode, string fileType, string fileName, ref string message)
        {
            try
            {

                string path = string.Empty;
                dbContext = new PMGSYEntities();
                MRD_CLEARANCE_LETTERS clearancFileModel = dbContext.MRD_CLEARANCE_LETTERS.Where(m => m.MRD_CLEARANCE_CODE == clearanceCode).FirstOrDefault();


                switch (fileType)
                {
                    case "CP":
                        clearancFileModel.MRD_CLEARANCE_PDF_FILE = null;
                        path = ConfigurationManager.AppSettings["Clearance_PDF_File_Upload"];
                        break;
                    case "RP":
                        clearancFileModel.MRD_ROAD_PDF_FILE = null;
                        path = ConfigurationManager.AppSettings["Clearance_Road_PDF_File_Upload"];
                        break;
                    case "RE":
                        clearancFileModel.MRD_ROAD_EXCEL_FILE = null;
                        path = ConfigurationManager.AppSettings["Clearance_Doc_File_Upload"];
                        break;
                    case "CPR":
                        clearancFileModel.MRD_CLEARANCE_PDF_FILE = null;
                        path = ConfigurationManager.AppSettings["Clearance_Revision_PDF_File_Upload"];
                        break;
                    case "RPR":
                        clearancFileModel.MRD_ROAD_PDF_FILE = null;
                        path = ConfigurationManager.AppSettings["Clearance_Road_Revision_PDF_File_Upload"];
                        break;
                    case "RER":
                        clearancFileModel.MRD_ROAD_EXCEL_FILE = null;
                        path = ConfigurationManager.AppSettings["Clearance_Revision_DOC_File_Upload"];
                        break;
                }
                if (System.IO.File.Exists(Path.Combine(path, fileName)))
                {
                    System.IO.File.Delete(Path.Combine(path, fileName));
                }
                dbContext.Entry(clearancFileModel).State = EntityState.Modified;

                dbContext.SaveChanges();
                return true;

            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditDeleteMrdClearanceFileDAL(OptimisticConcurrencyException ex).DAL");
                return false;
            }
            catch (UpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditDeleteMrdClearanceFileDAL(UpdateException ex).DAL");
                return false;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "EditDeleteMrdClearanceFileDAL().DAL");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public MRD_CLEARANCE_LETTERS CloneModelToObjectMrdClearanceRevisionDetail(MRD_CLEARANCE_LETTERS mrdClearanceModel, MrdClearenceRevisionViewModel modelMrdClearanceRevision)
        {
            CommonFunctions objComFucntion = new CommonFunctions();
            try
            {
                mrdClearanceModel.MAST_STATE_CODE = modelMrdClearanceRevision.Mast_State_Code;
                mrdClearanceModel.ADMIN_ND_CODE = modelMrdClearanceRevision.Mast_Agency;
                mrdClearanceModel.MAST_YEAR = modelMrdClearanceRevision.PhaseYear;
                mrdClearanceModel.MAST_BATCH = modelMrdClearanceRevision.Batch;
                mrdClearanceModel.MAST_COLLABORATION = modelMrdClearanceRevision.IMS_COLLABORATION;
                mrdClearanceModel.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                mrdClearanceModel.MRD_CLEARANCE_NUMBER = modelMrdClearanceRevision.MRD_REVISION_NUMBER.ToString();
                mrdClearanceModel.MRD_CLEARANCE_DATE = objComFucntion.GetStringToDateTime(modelMrdClearanceRevision.MRD_REVISION_DATE);
                //  mrdClearanceModel.MRD_REVISION_DATE = modelMrdClearance.MRD_REVISION_DATE ==""?null:ConvertStringToDate(modelMrdClearance.MRD_REVISION_DATE); 
                mrdClearanceModel.MRD_TOTAL_ROADS = modelMrdClearanceRevision.MRD_TOTAL_ROADS;
                mrdClearanceModel.MRD_TOTAL_LSB = modelMrdClearanceRevision.MRD_TOTAL_LSB;
                mrdClearanceModel.MRD_ROAD_MORD_SHARE_AMT = modelMrdClearanceRevision.MRD_ROAD_MORD_SHARE_AMT;
                mrdClearanceModel.MRD_ROAD_STATE_SHARE_AMT = modelMrdClearanceRevision.MRD_ROAD_STATE_SHARE_AMT;
                mrdClearanceModel.MRD_ROAD_TOTAL_AMT = modelMrdClearanceRevision.MRD_ROAD_TOTAL_AMT;
                mrdClearanceModel.MRD_LSB_MORD_SHARE_AMT = modelMrdClearanceRevision.MRD_LSB_MORD_SHARE_AMT;
                mrdClearanceModel.MRD_LSB_STATE_SHARE_AMT = modelMrdClearanceRevision.MRD_LSB_STATE_SHARE_AMT;
                mrdClearanceModel.MRD_LSB_TOTAL_AMT = modelMrdClearanceRevision.MRD_LSB_TOTAL_AMT;
                mrdClearanceModel.MRD_TOTAL_MORD_SHARE_AMT = modelMrdClearanceRevision.MRD_TOTAL_MORD_SHARE_AMT;
                mrdClearanceModel.MRD_TOTAL_STATE_SHARE_AMT = modelMrdClearanceRevision.MRD_TOTAL_STATE_SHARE_AMT;
                mrdClearanceModel.MRD_TOTAL_SANCTIONED_AMT = modelMrdClearanceRevision.MRD_TOTAL_SANCTIONED_AMT;
                mrdClearanceModel.MRD_TOTAL_ROAD_LENGTH = modelMrdClearanceRevision.MRD_TOTAL_ROAD_LENGTH;
                mrdClearanceModel.MRD_TOTAL_LSB_LENGTH = modelMrdClearanceRevision.MRD_TOTAL_LSB_LENGTH;
                mrdClearanceModel.MRD_HAB_1000 = modelMrdClearanceRevision.MRD_HAB_1000;
                mrdClearanceModel.MRD_HAB_500 = modelMrdClearanceRevision.MRD_HAB_500;
                mrdClearanceModel.MRD_HAB_250_ELIGIBLE = modelMrdClearanceRevision.MRD_HAB_250_ELIGIBLE;
                mrdClearanceModel.MRD_HAB_100_ELIGIBLE = modelMrdClearanceRevision.MRD_HAB_100_ELIGIBLE;
                mrdClearanceModel.MRD_CLEARANCE_PDF_FILE = modelMrdClearanceRevision.MRD_CLEARANCE_REVISED_PDF_FILE == null ? null : modelMrdClearanceRevision.MRD_CLEARANCE_REVISED_PDF_FILE;
                // mrdClearanceModel.MRD_CLEARANCE_REVISED_PDF_FILE = modelMrdClearance.MRD_CLEARANCE_REVISED_PDF_FILE;
                mrdClearanceModel.MRD_ROAD_PDF_FILE = modelMrdClearanceRevision.MRD_ROAD_REVISED_PDF_FILE == null ? null : modelMrdClearanceRevision.MRD_ROAD_REVISED_PDF_FILE;
                // mrdClearanceModel.MRD_ROAD_REVISED_PDF_FILE =modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE==null?null:modelMrdClearance.MRD_ROAD_REVISED_PDF_FILE;
                mrdClearanceModel.MRD_ROAD_EXCEL_FILE = modelMrdClearanceRevision.MRD_ROAD_REVISED_EXCEL_FILE == null ? null : modelMrdClearanceRevision.MRD_ROAD_REVISED_EXCEL_FILE;
                // mrdClearanceModel.MRD_ROAD_REVISED_EXCEL_FILE = modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE == null ? null : modelMrdClearance.MRD_ROAD_REVISED_EXCEL_FILE; ;
                mrdClearanceModel.MRD_ORG_CLEARANCE_CODE = modelMrdClearanceRevision.MRD_ORG_CLEARANCE_CODE;
                mrdClearanceModel.MRD_CLEARANCE_STATUS = "R";
                mrdClearanceModel.MRD_UPGRADE_CONNECT = modelMrdClearanceRevision.UPGRADE_CONNECT;
                mrdClearanceModel.MRD_CLEARANCE_REMARKS = modelMrdClearanceRevision.MRD_CLEARANCE_REMARKS;
                if (modelMrdClearanceRevision.UPGRADE_CONNECT == "N")
                {
                    mrdClearanceModel.MRD_STAGE_COMPLETE = modelMrdClearanceRevision.STAGE_COMPLETE;
                }
                else
                {
                    mrdClearanceModel.MRD_STAGE_COMPLETE = null;
                }
                mrdClearanceModel.USERID = PMGSYSession.Current.UserId;
                mrdClearanceModel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                return mrdClearanceModel;

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "CloneModelToObjectMrdClearanceRevisionDetail().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public Array ListOriginalMrdClearanceDAL(int clearanceCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            try
            {
                dbContext = new PMGSYEntities();
                int maxCleranceRevsionCode = 0;
                var list = from filelist in dbContext.MRD_CLEARANCE_LETTERS
                           join state in dbContext.MASTER_STATE on filelist.MAST_STATE_CODE equals state.MAST_STATE_CODE
                           join agency in dbContext.MASTER_AGENCY on filelist.ADMIN_ND_CODE equals agency.MAST_AGENCY_CODE
                           join batchs in dbContext.MASTER_BATCH on filelist.MAST_BATCH equals batchs.MAST_BATCH_CODE
                           join fund in dbContext.MASTER_FUNDING_AGENCY on filelist.MAST_COLLABORATION equals fund.MAST_FUNDING_AGENCY_CODE
                           where
                               //(stateCode <= 0 ? 1 : filelist.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                               //(agencyCode <= 0 ? 1 : filelist.ADMIN_ND_CODE) == (agencyCode <= 0 ? 1 : agencyCode) &&
                               //(year <= 0 ? 1 : filelist.MAST_YEAR) == (year <= 0 ? 1 : year) &&
                               //(batch <= 0 ? 1 : filelist.MAST_BATCH) == (batch <= 0 ? 1 : batch) &&
                               //(collaboration <= 0 ? 1 : filelist.MAST_COLLABORATION) == (collaboration <= 0 ? 1 : collaboration) &&
                           filelist.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme &&
                           filelist.MRD_CLEARANCE_STATUS == "O" &&
                           filelist.MRD_CLEARANCE_CODE == clearanceCode
                           select new
                           {
                               filelist.MRD_CLEARANCE_CODE,
                               state.MAST_STATE_NAME,
                               agency.MAST_AGENCY_NAME,
                               agency.MAST_AGENCY_TYPE,
                               batchs.MAST_BATCH_NAME,
                               filelist.MAST_YEAR,
                               fund.MAST_FUNDING_AGENCY_NAME,
                               filelist.MRD_CLEARANCE_NUMBER,
                               filelist.MRD_CLEARANCE_DATE,
                               //filelist.MRD_REVISION_DATE,
                               filelist.MRD_TOTAL_ROADS,
                               filelist.MRD_TOTAL_LSB,
                               filelist.MRD_ROAD_MORD_SHARE_AMT,
                               filelist.MRD_ROAD_STATE_SHARE_AMT,
                               filelist.MRD_ROAD_TOTAL_AMT,
                               filelist.MRD_LSB_MORD_SHARE_AMT,
                               filelist.MRD_LSB_STATE_SHARE_AMT,
                               filelist.MRD_LSB_TOTAL_AMT,
                               filelist.MRD_TOTAL_MORD_SHARE_AMT,
                               filelist.MRD_TOTAL_STATE_SHARE_AMT,
                               filelist.MRD_TOTAL_SANCTIONED_AMT,
                               filelist.MRD_TOTAL_ROAD_LENGTH,
                               filelist.MRD_TOTAL_LSB_LENGTH,
                               filelist.MRD_HAB_1000,
                               filelist.MRD_HAB_500,
                               filelist.MRD_HAB_250_ELIGIBLE,
                               filelist.MRD_HAB_100_ELIGIBLE,
                               filelist.MRD_CLEARANCE_PDF_FILE,
                               filelist.MRD_ORG_CLEARANCE_CODE,
                               filelist.MRD_CLEARANCE_STATUS,
                               //filelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                               filelist.MRD_ROAD_PDF_FILE,
                               //filelist.MRD_ROAD_REVISED_PDF_FILE,
                               filelist.MRD_ROAD_EXCEL_FILE,
                               // filelist.MRD_ROAD_REVISED_EXCEL_FILE
                           };

                totalRecords = list.Count();
                if (totalRecords > 0)
                {
                    maxCleranceRevsionCode = list.Max(a => a.MRD_CLEARANCE_CODE);
                }
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderBy(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderBy(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderBy(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderBy(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        list = list.OrderBy(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                list = list.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Year":
                                list = list.OrderByDescending(x => x.MAST_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Batch":
                                list = list.OrderByDescending(x => x.MAST_BATCH_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Agency":
                                list = list.OrderByDescending(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "Collaboration":
                                list = list.OrderByDescending(x => x.MAST_FUNDING_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                list = list.OrderByDescending(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                        list = list.OrderByDescending(x => x.MRD_CLEARANCE_CODE).ThenBy(a => a.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    list = list.OrderBy(x => x.MAST_STATE_NAME).ThenBy(x => x.MAST_AGENCY_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = list.Select(claerancelist => new
                {

                    claerancelist.MRD_CLEARANCE_CODE,
                    claerancelist.MAST_STATE_NAME,
                    claerancelist.MAST_AGENCY_NAME,
                    claerancelist.MAST_AGENCY_TYPE,
                    claerancelist.MAST_BATCH_NAME,
                    claerancelist.MAST_YEAR,
                    claerancelist.MAST_FUNDING_AGENCY_NAME,
                    claerancelist.MRD_CLEARANCE_NUMBER,
                    claerancelist.MRD_CLEARANCE_DATE,
                    //claerancelist.MRD_REVISION_DATE,
                    claerancelist.MRD_TOTAL_ROADS,
                    claerancelist.MRD_TOTAL_LSB,
                    claerancelist.MRD_ROAD_MORD_SHARE_AMT,
                    claerancelist.MRD_ROAD_STATE_SHARE_AMT,
                    claerancelist.MRD_ROAD_TOTAL_AMT,
                    claerancelist.MRD_LSB_MORD_SHARE_AMT,
                    claerancelist.MRD_LSB_STATE_SHARE_AMT,
                    claerancelist.MRD_LSB_TOTAL_AMT,
                    claerancelist.MRD_TOTAL_MORD_SHARE_AMT,
                    claerancelist.MRD_TOTAL_STATE_SHARE_AMT,
                    claerancelist.MRD_TOTAL_SANCTIONED_AMT,
                    claerancelist.MRD_TOTAL_ROAD_LENGTH,
                    claerancelist.MRD_TOTAL_LSB_LENGTH,
                    claerancelist.MRD_HAB_1000,
                    claerancelist.MRD_HAB_500,
                    claerancelist.MRD_HAB_250_ELIGIBLE,
                    claerancelist.MRD_HAB_100_ELIGIBLE,
                    claerancelist.MRD_CLEARANCE_PDF_FILE,
                    //claerancelist.MRD_CLEARANCE_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_PDF_FILE,
                    //claerancelist.MRD_ROAD_REVISED_PDF_FILE,
                    claerancelist.MRD_ROAD_EXCEL_FILE,
                    //claerancelist.MRD_ROAD_REVISED_EXCEL_FILE,
                    claerancelist.MRD_ORG_CLEARANCE_CODE,
                    claerancelist.MRD_CLEARANCE_STATUS

                }).ToArray();


                return result.Select(clearanceDetails => new
                {
                    id = URLEncrypt.EncryptParameters(new string[] { "ClearanceCode=" + clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(), "ClearanceRevisionCode=" + clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(), "Status=R" }),//URLEncrypt.EncryptParameters1(new string[] { "AdminCode =" + adminDetails.ADMIN_ND_CODE.ToString().Trim() }),

                    cell = new[]{
                    
                    clearanceDetails.MAST_STATE_NAME == null?string.Empty:clearanceDetails.MAST_STATE_NAME.ToString(),
                    (clearanceDetails.MAST_YEAR+"-"+ (clearanceDetails.MAST_YEAR+1)).ToString(),
                    clearanceDetails.MAST_BATCH_NAME == null?string.Empty:clearanceDetails.MAST_BATCH_NAME.ToString(),
                    clearanceDetails.MAST_AGENCY_NAME==null?string.Empty:clearanceDetails.MAST_AGENCY_NAME.ToString(),
                    clearanceDetails.MAST_FUNDING_AGENCY_NAME == null?string.Empty:clearanceDetails.MAST_FUNDING_AGENCY_NAME.ToString(),
                    clearanceDetails.MRD_CLEARANCE_DATE==null?"":ConvertDateToString(clearanceDetails.MRD_CLEARANCE_DATE),
                    clearanceDetails.MRD_TOTAL_ROADS.ToString(),
                    clearanceDetails.MRD_TOTAL_LSB.ToString(),
                    clearanceDetails.MRD_ROAD_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_ROAD_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_ROAD_TOTAL_AMT.ToString(),
                    clearanceDetails.MRD_LSB_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_LSB_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_LSB_TOTAL_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_MORD_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_STATE_SHARE_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_SANCTIONED_AMT.ToString(),
                    clearanceDetails.MRD_TOTAL_ROAD_LENGTH.ToString(),
                    clearanceDetails.MRD_TOTAL_LSB_LENGTH.ToString(),
                    clearanceDetails.MRD_HAB_1000.ToString(),
                    clearanceDetails.MRD_HAB_500.ToString(),
                    clearanceDetails.MRD_HAB_250_ELIGIBLE.ToString(),
                    clearanceDetails.MRD_HAB_100_ELIGIBLE.ToString(),
                    //checklistDetails.IMS_FILE_NAME == "NA" 
                    //                ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadECFile(\"" +  checklistDetails.MAST_FILE_ID.ToString().Trim() + "\"); return false;'>Upload</a>" 
                    //                : "<a href='#' class='ui-icon ui-icon-zoomin ui-align-center' onclick='ViewECFile(\"" +  checklistDetails.MAST_FILE_ID.ToString().Trim() + "\"); return false;'>View</a>" ,
                    "<a href='#' title='Click here to Download File List' class='ui-icon ui-icon-arrowthickstop-1-s ui-align-center' onClick=DownLoadListViewClearanceRevisionPDFFile(\"" + URLEncrypt.EncryptParameters(new string[]{"ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) +"\"); return false;'>Download</a>" ,
                    
                     
                    clearanceDetails.MRD_CLEARANCE_CODE==maxCleranceRevsionCode?
                    "<center><a href='#' class='ui-icon ui-icon-pencil' onclick='EditClearanceRevisionDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>Edit</a></center>"
                    :("<center><table><tr><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>"),
                     clearanceDetails.MRD_CLEARANCE_CODE==maxCleranceRevsionCode?
                    "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteClearancRevisioneDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>Delete</a></center>"        
                    :("<center><table><tr><td style='border:none'><a href='#' title='Locked' class='ui-icon ui-icon-locked  ui-align-center'>Locked</a></td></tr></table></center>"),
                    "<center><a href='#' class='ui-icon ui-icon-zoomin' onclick='ViewClearanceRevisionDetail(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "ClearanceCode="+clearanceDetails.MRD_CLEARANCE_CODE.ToString().Trim(),"ClearanceRevisionCode="+clearanceDetails.MRD_ORG_CLEARANCE_CODE.ToString().Trim(),"Status=R".ToString().Replace("/", "")}) + "\"); return false;'>View</a></center>"        
                  
                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ListOriginalMrdClearanceDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }

        #endregion


        #region Habitation Finalization
        public Array GetMordProposalsforHabFinalizationDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_YEAR, int MAST_STATE_CODE, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS, int IMS_AGENCY, string IMS_UPGRADE_CONNECT)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();



                var query = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_ISCOMPLETED == "H"
                    && (IMS_YEAR <= 0 ? 1 : m.IMS_YEAR) == (IMS_YEAR <= 0 ? 1 : IMS_YEAR)
                    && m.MAST_STATE_CODE == MAST_STATE_CODE
                    && m.MAST_DISTRICT_CODE == MAST_DISTRICT_ID
                    && (IMS_BATCH <= 0 ? 1 : m.IMS_BATCH) == (IMS_BATCH <= 0 ? 1 : IMS_BATCH)
                    && (IMS_STREAMS <= 0 ? 1 : m.IMS_STREAMS) == (IMS_STREAMS <= 0 ? 1 : IMS_STREAMS)
                    && m.IMS_PROPOSAL_TYPE == "P").ToList();

                totalRecords = query.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                }
                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MASTER_DISTRICT.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MASTER_BLOCK.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.IMS_ROAD_NAME.ToString(),
                                    propDetails.IMS_PAV_LENGTH.ToString() ,
                                    (propDetails.IMS_SANCTIONED_PAV_AMT + propDetails.IMS_SANCTIONED_OW_AMT + propDetails.IMS_SANCTIONED_PW_AMT + propDetails.IMS_SANCTIONED_CD_AMT + (propDetails.IMS_SANCTIONED_FC_AMT == null ? 0 : propDetails.IMS_SANCTIONED_FC_AMT.Value)).ToString(),
                                    propDetails.IMS_ISCOMPLETED == "H" ? "<a href='#'  class='ui-icon ui-icon-locked ui-align-center' onClick='DefinalizeHabitation(\"" + URLEncrypt.EncryptParameters1(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim()}) + "\"); return false;'>Show Details</a>" : "<span class='ui-icon ui-icon-unlocked ui-align-center'></span>"
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMordProposalsforHabFinalizationDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DefinalizeHabitationDAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();

            try
            {
                IMS_SANCTIONED_PROJECTS propDetails = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (propDetails != null)
                {
                    propDetails.IMS_ISCOMPLETED = "E";
                    propDetails.USERID = PMGSYSession.Current.UserId;
                    propDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(propDetails).State = EntityState.Modified;
                    dbContext.SaveChanges();
                    return true;

                }
                else
                {
                    return false;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DefinalizeHabitationDAL()");
                return false;
            }
            finally
            {

                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }

        }
        #endregion

        #region GEPNIC_INTEGRATION

        /// <summary>
        /// returns the proposal according to the search parameters
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <param name="State"></param>
        /// <param name="District"></param>
        /// <param name="Year"></param>
        /// <param name="Block"></param>
        /// <param name="ProposalType"></param>
        /// <param name="Package"></param>
        /// <returns></returns>
        public Array GetGepnicProposals(int page, int rows, string sidx, string sord, out int totalRecords, int State, int District, int Year, int Block, string ProposalType, string Package)
        {

            dbContext = new PMGSYEntities();

            try
            {
                var query = (from proposal in dbContext.IMS_SANCTIONED_PROJECTS
                             where
                             (District <= 0 ? 1 : proposal.MAST_DISTRICT_CODE) == (District <= 0 ? 1 : District) &&
                             proposal.IMS_YEAR == (Year == 0 ? proposal.IMS_YEAR : Year) &&
                             (Block <= 0 ? 1 : proposal.MAST_BLOCK_CODE) == (Block <= 0 ? 1 : Block) &&
                             (ProposalType == "A" ? "%" : proposal.IMS_PROPOSAL_TYPE) == (ProposalType == "A" ? "%" : ProposalType) &&
                             (Package == "0" ? "%" : proposal.IMS_PACKAGE_ID) == (Package == "0" ? "%" : Package) &&
                             proposal.MAST_STATE_CODE == State &&
                             proposal.IMS_SANCTIONED == "Y"
                             orderby proposal.IMS_PACKAGE_ID ascending




                             select new
                             {
                                 proposal.IMS_PR_ROAD_CODE,
                                 IMS_PROPOSAL_TYPE = proposal.IMS_PROPOSAL_TYPE == "P" ? "Road" : (proposal.IMS_PROPOSAL_TYPE == "L" ? "Bridge" : "Building"),
                                 proposal.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                 proposal.MASTER_BLOCK.MAST_BLOCK_NAME,
                                 IMS_YEAR = (proposal.IMS_YEAR),
                                 proposal.IMS_PACKAGE_ID,
                                 IMS_ROAD_NAME = proposal.IMS_PROPOSAL_TYPE == "P" ? proposal.IMS_ROAD_NAME : (proposal.IMS_PROPOSAL_TYPE == "L" ? proposal.IMS_BRIDGE_NAME : proposal.IMS_ROAD_NAME),
                                 IMS_ROAD_LENGTH = proposal.IMS_PROPOSAL_TYPE == "P" ? proposal.IMS_PAV_LENGTH : (proposal.IMS_PROPOSAL_TYPE == "L" ? proposal.IMS_BRIDGE_LENGTH : proposal.IMS_PAV_LENGTH),
                                 IMS_SANCTION_COST = proposal.IMS_PROPOSAL_TYPE == "P" ?
                                 (
                                 (PMGSYSession.Current.PMGSYScheme == 1 || PMGSYSession.Current.PMGSYScheme == 3) ?
                                                      ((proposal.IMS_SANCTIONED_PAV_AMT == null ? 0 : proposal.IMS_SANCTIONED_PAV_AMT) + (proposal.IMS_SANCTIONED_PW_AMT == null ? 0 : proposal.IMS_SANCTIONED_PW_AMT) + (proposal.IMS_SANCTIONED_OW_AMT == null ? 0 : proposal.IMS_SANCTIONED_OW_AMT) + (proposal.IMS_SANCTIONED_CD_AMT == null ? 0 : proposal.IMS_SANCTIONED_CD_AMT) + (proposal.IMS_SANCTIONED_BW_AMT == null ? 0 : proposal.IMS_SANCTIONED_BW_AMT) + (proposal.IMS_SANCTIONED_BS_AMT == null ? 0 : proposal.IMS_SANCTIONED_BS_AMT) + (proposal.IMS_SANCTIONED_RS_AMT == null ? 0 : proposal.IMS_SANCTIONED_RS_AMT))
                                                    : ((proposal.IMS_SANCTIONED_PAV_AMT == null ? 0 : proposal.IMS_SANCTIONED_PAV_AMT) + (proposal.IMS_SANCTIONED_PW_AMT == null ? 0 : proposal.IMS_SANCTIONED_PW_AMT) + (proposal.IMS_SANCTIONED_OW_AMT == null ? 0 : proposal.IMS_SANCTIONED_OW_AMT) + (proposal.IMS_SANCTIONED_CD_AMT == null ? 0 : proposal.IMS_SANCTIONED_CD_AMT) + (proposal.IMS_SANCTIONED_FC_AMT == null ? 0 : proposal.IMS_SANCTIONED_FC_AMT) + (proposal.IMS_SANCTIONED_HS_AMT == null ? 0 : proposal.IMS_SANCTIONED_HS_AMT) + (proposal.IMS_SANCTIONED_BW_AMT == null ? 0 : proposal.IMS_SANCTIONED_BW_AMT) + (proposal.IMS_SANCTIONED_BS_AMT == null ? 0 : proposal.IMS_SANCTIONED_BS_AMT) + (proposal.IMS_PUCCA_SIDE_DRAINS == null ? 0 : proposal.IMS_PUCCA_SIDE_DRAINS))

                                 //(proposal.IMS_SANCTIONED_PAV_AMT == null ? 0 : proposal.IMS_SANCTIONED_PAV_AMT) 
                                     //+ (proposal.IMS_SANCTIONED_CD_AMT == null ? 0 : proposal.IMS_SANCTIONED_CD_AMT) 
                                     //+ (proposal.IMS_SANCTIONED_PW_AMT == null ? 0 : proposal.IMS_SANCTIONED_PW_AMT)
                                     //+(proposal.IMS_SANCTIONED_OW_AMT == null ? 0 : proposal.IMS_SANCTIONED_OW_AMT) 
                                     //+ (proposal.IMS_SANCTIONED_RS_AMT == null ? 0 : proposal.IMS_SANCTIONED_RS_AMT)



                                  )

                                 : (proposal.IMS_PROPOSAL_TYPE == "L" ?
                                 ((proposal.IMS_SANCTIONED_BW_AMT == null ? 0 : proposal.IMS_SANCTIONED_BW_AMT)
                                 + (proposal.IMS_SANCTIONED_BS_AMT == null ? 0 : proposal.IMS_SANCTIONED_BS_AMT))



                                 : (proposal.IMS_SANCTIONED_PAV_AMT == null ? 0 : proposal.IMS_SANCTIONED_PAV_AMT)),


                                 IsProposalSent = dbContext.OMMAS_GEPNIC_INTEGRATION.Any(m => m.ROAD_CODE == proposal.IMS_PR_ROAD_CODE && m.GEPNIC_NREGA == "G") ? true : false,
                                 // IsProposalSent = (dbContext.OMMAS_GEPNIC_INTEGRATION.Where(m => m.ROAD_CODE == proposal.IMS_PR_ROAD_CODE).OrderByDescending(z => z.SITE_CODE).FirstOrDefault().GEPNIC_NREGA == "G") ? true : false,
                                 //added by abhinav on 9-july-2019
                                 proposal.IMS_IS_STAGED,
                                 proposal.IMS_STAGE_PHASE,
                             }).ToList();


                totalRecords = query == null ? 0 : query.Count();

                #region Sort Commented for grouping on 05JUL2019
                /*if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "RoadName":
                                query = query.OrderBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "WorkType":
                                query = query.OrderBy(x => x.IMS_PROPOSAL_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "SanctionYear":
                                query = query.OrderBy(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Length":
                                query = query.OrderBy(x => x.IMS_ROAD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Package":
                                query = query.OrderBy(x => x.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Block":
                                query = query.OrderBy(x => x.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                query = query.OrderBy(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                query = query.OrderBy(x => x.IMS_YEAR).ThenBy(x => x.IMS_PACKAGE_ID).ThenBy(x => x.IMS_PROPOSAL_TYPE).ThenBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "RoadName":
                                query = query.OrderByDescending(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "WorkType":
                                query = query.OrderByDescending(x => x.IMS_PROPOSAL_TYPE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "SanctionYear":
                                query = query.OrderByDescending(x => x.IMS_YEAR).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Length":
                                query = query.OrderByDescending(x => x.IMS_ROAD_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Package":
                                query = query.OrderByDescending(x => x.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "Block":
                                query = query.OrderByDescending(x => x.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            case "District":
                                query = query.OrderByDescending(x => x.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                query = query.OrderByDescending(x => x.IMS_YEAR).ThenBy(x => x.IMS_PACKAGE_ID).ThenBy(x => x.IMS_PROPOSAL_TYPE).ThenBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }

                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_YEAR).ThenBy(x => x.IMS_PACKAGE_ID).ThenBy(x => x.IMS_PROPOSAL_TYPE).ThenBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }*/
                #endregion
                //added by abhinav for Sorting 17JUL2019
                //query = query.OrderBy(x => x.IMS_YEAR).ThenBy(x => x.IMS_PACKAGE_ID).ThenBy(x => x.IMS_PROPOSAL_TYPE).ThenBy(x => x.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();

                query = query.OrderBy(x => x.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();

                var result = query.Select(imsSanctionedProjectDetails => new
                {
                    imsSanctionedProjectDetails.IMS_PR_ROAD_CODE,
                    imsSanctionedProjectDetails.MAST_DISTRICT_NAME,
                    imsSanctionedProjectDetails.IMS_ROAD_NAME,
                    imsSanctionedProjectDetails.IMS_YEAR,
                    imsSanctionedProjectDetails.IMS_SANCTION_COST,
                    imsSanctionedProjectDetails.IMS_PACKAGE_ID,
                    imsSanctionedProjectDetails.IMS_PROPOSAL_TYPE,
                    imsSanctionedProjectDetails.IMS_ROAD_LENGTH,
                    imsSanctionedProjectDetails.MAST_BLOCK_NAME,
                    imsSanctionedProjectDetails.IsProposalSent,
                    //added by abhinav on 9-july-2019
                    imsSanctionedProjectDetails.IMS_IS_STAGED,
                    imsSanctionedProjectDetails.IMS_STAGE_PHASE
                }).ToArray();

                List<long> RefNoList = dbContext.OMMAS_GEPNIC_UNIQUE_REF_AVAILABILITY.Select(m => m.REF_NO).ToList();

                return result.Select(imsSanctionedProjectDetails => new
                {
                    id = imsSanctionedProjectDetails.IMS_PR_ROAD_CODE.ToString(),//URLEncrypt.EncryptParameters1(new string[] { "IMSPRRoadCode =" + imsSanctionedProjectDetails.IMS_PR_ROAD_CODE.ToString() }),
                    cell = new[] {  
                                    //URLEncrypt.EncryptParameters1(new string[] { "IMSPRRoadCode =" + imsSanctionedProjectDetails.IMS_PR_ROAD_CODE.ToString()}),
                                    imsSanctionedProjectDetails.IMS_PROPOSAL_TYPE.ToString(),                                                     
                                    imsSanctionedProjectDetails.MAST_DISTRICT_NAME == null?"-":imsSanctionedProjectDetails.MAST_DISTRICT_NAME.ToString(),            
                                    imsSanctionedProjectDetails.MAST_BLOCK_NAME == null?"-":imsSanctionedProjectDetails.MAST_BLOCK_NAME.ToString(),
                                    (imsSanctionedProjectDetails.IMS_YEAR + " - " + (imsSanctionedProjectDetails.IMS_YEAR + 1)).ToString(),
                                    imsSanctionedProjectDetails.IMS_PACKAGE_ID,                
                                    imsSanctionedProjectDetails.IMS_ROAD_NAME.ToString(),
                                    imsSanctionedProjectDetails.IMS_ROAD_LENGTH.ToString(),
                                    imsSanctionedProjectDetails.IMS_SANCTION_COST.ToString(),
                                    //added by abhinav
                                     imsSanctionedProjectDetails.IMS_IS_STAGED == "C" ? "Complete" : imsSanctionedProjectDetails.IMS_IS_STAGED == "S" ? (
                                    imsSanctionedProjectDetails.IMS_STAGE_PHASE !=null && imsSanctionedProjectDetails.IMS_STAGE_PHASE == "S1" ? "Stage 1" :
                                    imsSanctionedProjectDetails.IMS_STAGE_PHASE !=null && imsSanctionedProjectDetails.IMS_STAGE_PHASE == "S2" ? "Stage 2" : "-"
                                    ) : "-",
                                     imsSanctionedProjectDetails.IsProposalSent==true?"<span style='color:green;'>Proposal sent to Gepnic</span>":"<span style='color:red;'>Proposal not yet sent to Gepnic</span>",

                                    //imsSanctionedProjectDetails.IsProposalSent.ToString(),
                                    //dbContext.OMMAS_GEPNIC_INTEGRATION.Any(m => m.ROAD_CODE == imsSanctionedProjectDetails.IMS_PR_ROAD_CODE && m.GEPNIC_NREGA=="G") ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + imsSanctionedProjectDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Click here for enabling Proposal for repushing to Gepnic</a>"  : "-"  
                                   // (dbContext.OMMAS_GEPNIC_INTEGRATION.Where(m => m.ROAD_CODE == imsSanctionedProjectDetails.IMS_PR_ROAD_CODE).OrderByDescending(z=>z.SITE_CODE).FirstOrDefault() != null 
                                   // && dbContext.OMMAS_GEPNIC_INTEGRATION.Where(m => m.ROAD_CODE == imsSanctionedProjectDetails.IMS_PR_ROAD_CODE).OrderByDescending(z=>z.SITE_CODE).FirstOrDefault().GEPNIC_NREGA == "G" && dbContext.OMMAS_GEPNIC_INTEGRATION.Where(x => RefNoList.Contains(x.REF_NO) && x.GEPNIC_NREGA == "G").Any()) ? "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + imsSanctionedProjectDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Click here for enabling Proposal for repushing to Gepnic</a>"  : "-"  
                                    
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetGepnicProposals().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool InsertGepnicProposalDetails(/*string[] proposals*/ GepnicOrganisationsViewModel gepModel, ref string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                string[] proposals = gepModel.proposalsIds.Split(',');
                StringBuilder strProposals = new StringBuilder();
                foreach (var item in proposals)
                {
                    //string[] encryptedParameters = item.Split('/');
                    //Dictionary<string, string> decryptedParameters = new Dictionary<string, string>();
                    //decryptedParameters = URLEncrypt.DecryptParameters1(new string[] { encryptedParameters[0], encryptedParameters[1], encryptedParameters[2] });
                    strProposals.Append(',');///Added by SAMMED A. PATIL on 28DEC2017
                    strProposals.Append(item);
                    strProposals.Append(',');
                }

                //Package No. validation
                if (proposals != null)
                {
                    int prRoadCode = Convert.ToInt32(proposals[0]);
                    string packageNo = dbContext.IMS_SANCTIONED_PROJECTS.Where(z => z.IMS_PR_ROAD_CODE == prRoadCode).Select(c => c.IMS_PACKAGE_ID).FirstOrDefault();

                    if (dbContext.OMMAS_GEPNIC_INTEGRATION.Where(x => x.PACKAGE_NUMBER == packageNo && x.GEPNIC_NREGA == "G").Any())
                    {
                        message = "Package details already pushed to Gepnic";
                        return false;
                    }

                    using (TransactionScope ts = new TransactionScope())
                    {
                        ObjectParameter outParam = new ObjectParameter("refNo", typeof(Int64?));

                        dbContext.USP_PROP_NERAGA_INTEGRATION_INSERT_DATA(0, 0, 0, 0, "", 0, strProposals.ToString(), outParam, "G", gepModel.organisationCode);

                        Int64 refNo = Convert.ToInt64(outParam.Value);
                        //string uniqueReferenceNo = refNo.ToString();

                        #region Added by SAMMED A. PATIL on 28DEC2017 to consume Gepnic Web Service
                        int cntTotalRecords = 0;
                        string xmlString = string.Empty;
                        string result = string.Empty;

                        List<USP_PROP_NERAGA_INTEGRATION_DATA_Result> itemList = new List<USP_PROP_NERAGA_INTEGRATION_DATA_Result>();
                        itemList = dbContext.USP_PROP_NERAGA_INTEGRATION_DATA(refNo, "G").ToList<USP_PROP_NERAGA_INTEGRATION_DATA_Result>();
                        //List<USP_PROP_GEPNIC_INTEGRATION_DATA_Result> itemList = new List<USP_PROP_GEPNIC_INTEGRATION_DATA_Result>();
                        //itemList = dbContext.USP_PROP_GEPNIC_INTEGRATION_DATA(refNo, "G").ToList<USP_PROP_GEPNIC_INTEGRATION_DATA_Result>();
                        cntTotalRecords = itemList.Count;
                        //if (agencyFlag.Equals("G"))
                        //{
                        //    foreach (var item in itemList)
                        //    {
                        //        item.CARRIAGED_WIDTH = Convert.ToInt32(item.CARRIAGED_WIDTH);
                        //    }
                        //}


                        if (cntTotalRecords == 0)
                        {
                            message = "Package details can not be pushed to Gepnic. Please try after some time.";
                            return false;
                        
                        }

                        PACKAGEINFO model = new PACKAGEINFO();
                        if (cntTotalRecords > 0)
                        {
                            #region Old Code
                            //model.PACKAGES = new PACKAGES();

                            //model.PACKAGES.PACKAGE_REF_NO = refNo;
                            //model.PACKAGES.PACKAGE_NUMBER = itemList[0].PACKAGE_NUMBER;
                            //model.PACKAGES.ACTUAL_ORGID = itemList[0].ACTUAL_ORGID;
                            //model.PACKAGES.STATE_NAME = itemList[0].STATE_NAME;
                            //model.PACKAGES.DISTRICT_NAME = itemList[0].DISTRICT_NAME;
                            //model.PACKAGES.DPIU_NAME = itemList[0].DPIU_NAME;
                            //model.PACKAGES.CREATOR_NAME = itemList[0].CREATOR_NAME;
                            //model.PACKAGES.CREATOR_REFERENCE = itemList[0].CREATOR_REFERENCE;

                            //model.PACKAGES.ROADINFO = new List<ROADDETAIL>();
                            //foreach (var itm in itemList)
                            //{
                            //    model.PACKAGES.ROADINFO.Add(new ROADDETAIL { ROAD_CODE = itm.ROAD_CODE, ROAD_NAME = itm.ROAD_NAME, ROAD_LENGTH = itm.ROAD_LENGTH, BLOCK_CODE = itm.BLOCK_CODE, BLOCK_NAME = itm.BLOCK_NAME, TOTAL_COST = itm.TOTAL_COST });
                            //}
                            #endregion

                            model.PACKAGES1 = new List<PACKAGES>();

                            var grpResult = itemList.GroupBy(x => x.PACKAGE_NUMBER);
                            int i = 0;
                            string pkgRefNo;
                            //iterate each group        
                            foreach (var pkgGroup in grpResult)
                            {
                                i = 0;
                                if (model.PACKAGES1.Count == 0)
                                {
                                    pkgRefNo = Convert.ToString(refNo);
                                }
                                else
                                {
                                    pkgRefNo = refNo + "-" + (model.PACKAGES1.Count + 1);
                                }
                                foreach (var itm in pkgGroup) // Each group has inner collection
                                {
                                    if (i == 0)
                                    {
                                        model.PACKAGES1.Add(new PACKAGES { PACKAGE_REF_NO = pkgRefNo, PACKAGE_NUMBER = itm.PACKAGE_NUMBER, ACTUAL_ORGID = itm.ACTUAL_ORGID, STATE_NAME = itm.STATE_NAME, DISTRICT_NAME = itm.DISTRICT_NAME, DPIU_NAME = itm.DPIU_NAME, CREATOR_NAME = itm.CREATOR_NAME, CREATOR_REFERENCE = itm.CREATOR_REFERENCE });
                                        model.PACKAGES1[model.PACKAGES1.Count - 1].ROADINFO = new List<ROADDETAIL>();
                                    }

                                    model.PACKAGES1[model.PACKAGES1.Count - 1].ROADINFO.Add(new ROADDETAIL { ROAD_CODE = itm.ROAD_CODE, ROAD_NAME = itm.ROAD_NAME, ROAD_LENGTH = itm.ROAD_LENGTH, BLOCK_CODE = itm.BLOCK_CODE, BLOCK_NAME = itm.BLOCK_NAME, TOTAL_COST = itm.TOTAL_COST });
                                    i++;
                                }
                            }
                        }

                        PMGSY.NERAGA.OmmasIntegrationDAL objDAL = new PMGSY.NERAGA.OmmasIntegrationDAL();
                        if (itemList.Count > 0)
                        {
                            //xmlString = objDAL.GetXMLFromObject(itemList).Replace("&amp;", " and ").Replace(System.Environment.NewLine, " ").Replace("<", "/&lt;/g").Replace(">", "/&gt;/g");
                            xmlString = objDAL.GetXMLFromObject(model);

                            //xmlString = @"<![CDATA["+ xmlString +"]]>";
                        }
                        xmlString = xmlString.Replace("<PACKAGES1>", string.Empty);
                        xmlString = xmlString.Replace("</PACKAGES1>", string.Empty);

                        string xmlPath = ConfigurationManager.AppSettings["GepnicProposals"];//@"D:\Gepnic\";
                        if (!Directory.Exists(xmlPath))
                            Directory.CreateDirectory(xmlPath);
                        System.IO.File.WriteAllText(xmlPath + refNo + ".xml", xmlString);

                        string successMsg = "Error";
                        //ServicePointManager.SecurityProtocol = ((SecurityProtocolType)3072 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12);
                       
                        ServicePointManager.SecurityProtocol = ((SecurityProtocolType)3072 | SecurityProtocolType.Ssl3);
                        ServicePointManager.ServerCertificateValidationCallback += (Sender, cert, chain, sslPolicyError) => true;

                        //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        var refToGepnicService = new GePNICWebReference.PullTenderService();
                        // --- Call to Gepnic WebMethod
                        var successMsgGepnic = refToGepnicService.getPreTenderXML(Convert.ToString(refNo), xmlString);
                        if (successMsgGepnic.Equals("Success"))
                        {
                            result = objDAL.UpdateRecordCount(Convert.ToString(refNo), "G"); //G for Gepnic
                            successMsg = "Gepnic Message : " + "Success";
                        }
                        #endregion
                        message = "Proposal details updated successfully";
                        ts.Complete();
                        return true;
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                message = "Error occurred while processing your request.";
                ErrorLog.LogError(ex, "InsertGepnicProposalDetails().DAL");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public List<SelectListItem> PopulateGepnicOrganisationsDAL(int stateCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                List<SelectListItem> lstOrgIds = new SelectList(dbContext.OMMAS_GEPNIC_ORGANISATION_MASTER.Where(x => x.MAST_STATE_CODE == stateCode), "ORGANISATION_ID", "ORGANISATION_NAME").ToList();
                lstOrgIds.Insert(0, (new SelectListItem { Text = "Select Organisation", Value = "0" }));
                return lstOrgIds;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ProposalDAL.PopulateGepnicOrganisationsDAL()");
                return null;
            }
        }
        #endregion

        #region ADDITIONAL_PROGRESS_LENGTH

        public Array GetProposalAdditionalLengthListDAL(int stateCode, int districtCode, int blockCode, int yearCode, string packageCode, string proposalCode, int batchCode, int streamCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstParantNd = (dbContext.ADMIN_DEPARTMENT.Where(a => a.MAST_PARENT_ND_CODE == (PMGSYSession.Current.AdminNdCode == 0 ? a.MAST_PARENT_ND_CODE : PMGSYSession.Current.AdminNdCode)).Select(a => a.ADMIN_ND_CODE).ToList());

                var lstRoads = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Select(x => x.IMS_PR_ROAD_CODE).ToList();
                var lstProposal = (from item in dbContext.IMS_SANCTIONED_PROJECTS
                                   //commented by Vikram as suggested by Srinivas sir for the issue of Orissa SRRDA as they were not getting the Packages whose proposals were sanctioned only and no agreement were made on that.
                                   //join details in dbContext.TEND_AGREEMENT_DETAIL on item.IMS_PR_ROAD_CODE equals details.IMS_PR_ROAD_CODE
                                   //join master in dbContext.TEND_AGREEMENT_MASTER on details.TEND_AGREEMENT_CODE equals master.TEND_AGREEMENT_CODE
                                   //new condition added by Vikram as suggested by Srinivasa sir on 17 July 2015
                                   join execution in dbContext.EXEC_ROADS_MONTHLY_STATUS on item.IMS_PR_ROAD_CODE equals execution.IMS_PR_ROAD_CODE into exec
                                   from e in exec.DefaultIfEmpty()
                                   //join state in dbContext.MASTER_STATE on item.MAST_STATE_CODE equals state.MAST_STATE_CODE
                                   //join district in dbContext.MASTER_DISTRICT on item.MAST_DISTRICT_CODE equals district.MAST_DISTRICT_CODE
                                   //join block in dbContext.MASTER_BLOCK on item.MAST_BLOCK_CODE equals block.MAST_BLOCK_CODE
                                   //join year in dbContext.MASTER_YEAR on item.IMS_YEAR equals year.MAST_YEAR_CODE
                                   where
                                       //master.TEND_IS_AGREEMENT_FINALIZED == "Y" &&
                                   item.IMS_SANCTIONED == "Y" &&
                                       //master.TEND_AGREEMENT_TYPE == "C" &&
                                   (stateCode <= 0 ? 1 : item.MAST_STATE_CODE) == (stateCode <= 0 ? 1 : stateCode) &&
                                   (districtCode <= 0 ? 1 : item.MAST_DISTRICT_CODE) == (districtCode <= 0 ? 1 : districtCode) &&
                                       //e.EXEC_ISCOMPLETED == null ? "" == "" : e.EXEC_ISCOMPLETED != "C" &&
                                       //e.EXEC_ISCOMPLETED != "C" &&
                                   (yearCode <= 0 ? 1 : item.IMS_YEAR) == (yearCode <= 0 ? 1 : yearCode) &&
                                   (blockCode <= 0 ? 1 : item.MAST_BLOCK_CODE) == (blockCode <= 0 ? 1 : blockCode) &&
                                   (batchCode <= 0 ? 1 : item.IMS_BATCH) == (batchCode <= 0 ? 1 : batchCode) &&
                                   (streamCode <= 0 ? 1 : item.IMS_COLLABORATION) == (streamCode <= 0 ? 1 : streamCode) &&
                                   (packageCode == "All" ? "%" : item.IMS_PACKAGE_ID) == (packageCode == "All" ? "%" : packageCode) &&
                                   (proposalCode == "A" ? "%" : item.IMS_PROPOSAL_TYPE) == (proposalCode == "A" ? "%" : proposalCode) &&
                                   (lstParantNd.Contains(item.MAST_DPIU_CODE)) &&
                                   item.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme //new change done by Vikram on 10 Feb 2014
                                   && item.IMS_DPR_STATUS == "N" //new change done by Vikram 
                                   && (PMGSYSession.Current.RoleCode == 25 ? lstRoads.Contains(item.IMS_PR_ROAD_CODE) : (1 == 1))
                                   && ((upgradationType == "0" ? "%" : item.IMS_UPGRADE_CONNECT) == (upgradationType == "0" ? "%" : upgradationType))
                                   select new
                                   {

                                       item.MASTER_STATE.MAST_STATE_NAME,
                                       item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                       item.MASTER_BLOCK.MAST_BLOCK_NAME,
                                       item.IMS_PACKAGE_ID,
                                       item.IMS_BATCH,
                                       item.IMS_PR_ROAD_CODE,
                                       item.IMS_ROAD_NAME,
                                       item.IMS_YEAR,
                                       item.IMS_LOCK_STATUS,
                                       item.IMS_NO_OF_CDWORKS,
                                       item.IMS_NO_OF_BRIDGEWRKS,
                                       item.IMS_PROPOSAL_TYPE,
                                       ROAD_LENGTH = item.IMS_PROPOSAL_TYPE == "P" ? item.IMS_PAV_LENGTH : item.IMS_BRIDGE_LENGTH,
                                       ROAD_COST = item.IMS_PROPOSAL_TYPE == "P" ? (item.IMS_SANCTIONED_PAV_AMT + item.IMS_SANCTIONED_CD_AMT + item.IMS_SANCTIONED_PW_AMT +
                                                    item.IMS_SANCTIONED_OW_AMT + item.IMS_SANCTIONED_RS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)) : (item.IMS_SANCTIONED_BW_AMT + item.IMS_SANCTIONED_BS_AMT + (item.IMS_SANCTIONED_HS_AMT.HasValue ? item.IMS_SANCTIONED_HS_AMT.Value : 0)),
                                       //MAINTENANCE_COST = (item.IMS_MAINTENANCE_YEAR1 + item.IMS_MAINTENANCE_YEAR2 + item.IMS_MAINTENANCE_YEAR3 + item.IMS_MAINTENANCE_YEAR4 + item.IMS_MAINTENANCE_YEAR5),
                                       ///Changed by SAMMED A. PATIL on 17JULY2017 for upfatehpur issue pkg UP2598
                                       MAINTENANCE_COST = (item.IMS_SANCTIONED_MAN_AMT1 + item.IMS_SANCTIONED_MAN_AMT2 + item.IMS_SANCTIONED_MAN_AMT3 + item.IMS_SANCTIONED_MAN_AMT4 + item.IMS_SANCTIONED_MAN_AMT5),
                                       IMS_IS_MRD_APPROVED = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(x => x.IMS_PR_ROAD_CODE == item.IMS_PR_ROAD_CODE).Select(x => x.IMS_IS_MRD_APPROVED).FirstOrDefault()
                                   }).Distinct();
                totalRecords = lstProposal.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstProposal = lstProposal.OrderBy(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstProposal = lstProposal.OrderBy(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstProposal = lstProposal.OrderBy(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_STATE_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_DISTRICT_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_DISTRICT_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "MAST_BLOCK_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_PACKAGE_ID":
                                lstProposal = lstProposal.OrderByDescending(m => m.IMS_PACKAGE_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            case "IMS_ROAD_NAME":
                                lstProposal = lstProposal.OrderByDescending(m => m.IMS_ROAD_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstProposal = lstProposal.OrderByDescending(m => m.MAST_BLOCK_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstProposal = lstProposal.OrderBy(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstProposal.Select(executionDetails => new
                {
                    executionDetails.MAST_BLOCK_NAME,
                    executionDetails.IMS_ROAD_NAME,
                    executionDetails.IMS_PACKAGE_ID,
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_NO_OF_CDWORKS,
                    executionDetails.IMS_NO_OF_BRIDGEWRKS,
                    executionDetails.IMS_PROPOSAL_TYPE,
                    executionDetails.IMS_LOCK_STATUS,
                    executionDetails.ROAD_COST,
                    executionDetails.ROAD_LENGTH,
                    executionDetails.MAINTENANCE_COST,
                    executionDetails.IMS_BATCH,
                    executionDetails.IMS_YEAR,
                    executionDetails.MAST_STATE_NAME,
                    executionDetails.MAST_DISTRICT_NAME,
                    executionDetails.IMS_IS_MRD_APPROVED
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] 
                    {
                        m.MAST_STATE_NAME == null?string.Empty:m.MAST_STATE_NAME.ToString(),                         
                        m.MAST_DISTRICT_NAME == null?string.Empty:m.MAST_DISTRICT_NAME.ToString(),                         
                        m.MAST_BLOCK_NAME == null?string.Empty:m.MAST_BLOCK_NAME.ToString(),
                        m.IMS_YEAR == null?string.Empty:(m.IMS_YEAR + " - " + (m.IMS_YEAR + 1)).ToString(),
                        m.IMS_BATCH == null?string.Empty:("Batch :"+ m.IMS_BATCH).ToString(),
                        m.IMS_PACKAGE_ID == null?string.Empty:m.IMS_PACKAGE_ID.ToString(),
                        m.IMS_ROAD_NAME == null?string.Empty:m.IMS_ROAD_NAME.ToString(),
                        m.ROAD_COST.ToString(),
                        m.ROAD_LENGTH.ToString(),
                        m.MAINTENANCE_COST.ToString(),
                       // "<a href='#' title='Click here to add Additonal Cost Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddAdditionalCostDetail('" + URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add</a>",
                       m.IMS_IS_MRD_APPROVED == null ? "-" : m.IMS_IS_MRD_APPROVED.ToString() == "Y" ? "Yes" : m.IMS_IS_MRD_APPROVED.ToString() == "N" ? "No" :m.IMS_IS_MRD_APPROVED.ToString() == "P" ? "Pending" : "-",
                        "<a href='#' title='Click here to add Additional Length Details' class='ui-icon ui-icon-plusthick ui-align-center' onClick=AddAdditionalLengthDetail('" + URLEncrypt.EncryptParameters1(new string[]{"IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim()}) +"'); return false;'>Add</a>",
                                }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalAdditionalLengthListDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool SaveAdditionalLengthDetails(AdditionalLengthViewModel model)
        {
            try
            {
                dbContext = new PMGSYEntities();

                IMS_PROGRESS_LENGTH_COMPLETION lengthDetails = new IMS_PROGRESS_LENGTH_COMPLETION();
                if (dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE))
                {
                    lengthDetails.IMS_TRANSACTION_CODE = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE).Max(m => m.IMS_TRANSACTION_CODE) + 1;
                }
                else
                {
                    lengthDetails.IMS_TRANSACTION_CODE = 1;
                }

                lengthDetails.IMS_PR_ROAD_CODE = model.IMS_PR_ROAD_CODE;
                lengthDetails.IMS_CHANGE_TYPE = model.IMS_CHANGE_TYPE;
                lengthDetails.IMS_CHANGED_LENGTH = model.IMS_CHANGED_LENGTH;
                lengthDetails.IMS_IS_MRD_APPROVED = "P";
                lengthDetails.IMS_LENGTH_CHANGE_REQUEST_DATE = DateTime.Now;
                lengthDetails.IMS_MRD_APPROVED_DATE = null;
                lengthDetails.IMS_PERCENTAGE_CHANGE = model.IMS_PERCENTAGE_CHANGE;
                lengthDetails.USERID = PMGSYSession.Current.UserId;
                lengthDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                lengthDetails.APPROVE_IPADD = null;
                lengthDetails.APPROVE_USERID = null;
                dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Add(lengthDetails);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "SaveAdditionalLengthDetails().DAL");
                return false;
            }
        }

        public bool UpdateAdditionalLengthDetails(AdditionalLengthViewModel model)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Any(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE && m.IMS_TRANSACTION_CODE == model.IMS_TRANSACTION_CODE))
                {
                    IMS_PROGRESS_LENGTH_COMPLETION lengthDetails = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == model.IMS_PR_ROAD_CODE && m.IMS_TRANSACTION_CODE == model.IMS_TRANSACTION_CODE).FirstOrDefault();
                    if (lengthDetails != null)
                    {
                        lengthDetails.IMS_CHANGE_TYPE = model.IMS_CHANGE_TYPE;
                        lengthDetails.IMS_CHANGED_LENGTH = model.IMS_CHANGED_LENGTH;
                        lengthDetails.IMS_IS_MRD_APPROVED = "P";
                        lengthDetails.IMS_PERCENTAGE_CHANGE = model.IMS_PERCENTAGE_CHANGE;
                        dbContext.Entry(lengthDetails).State = EntityState.Modified;
                        dbContext.SaveChanges();
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateAdditionalLengthDetails().DAL");
                return false;
            }
        }

        public AdditionalLengthViewModel GetAdditionalProgressLengthDetails(int proposalCode, int transactionCode)
        {
            try
            {
                dbContext = new PMGSYEntities();

                AdditionalLengthViewModel model = new AdditionalLengthViewModel();

                if (dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE == transactionCode))
                {
                    IMS_PROGRESS_LENGTH_COMPLETION lengthDetails = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE == transactionCode).FirstOrDefault();

                    if (lengthDetails != null)
                    {
                        model.IMS_TRANSACTION_CODE = transactionCode;
                        model.IMS_PR_ROAD_CODE = proposalCode;
                        model.IMS_CHANGED_LENGTH = lengthDetails.IMS_CHANGED_LENGTH;
                        model.IMS_PERCENTAGE_CHANGE = lengthDetails.IMS_PERCENTAGE_CHANGE;
                        return model;
                    }
                    else
                    {
                        return null;
                    }

                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetAdditionalProgressLengthDetails().DAL");
                return null;
            }
        }

        public bool DeleteAdditionLengthDetails(int transactionCode, int proposalCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                if (dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE == transactionCode))
                {
                    IMS_PROGRESS_LENGTH_COMPLETION lengthDetails = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE == transactionCode).FirstOrDefault();
                    dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Remove(lengthDetails);
                    dbContext.SaveChanges();
                    return true;
                }
                else
                {
                    return false;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteAdditionLengthDetails().DAL");
                return false;
            }
        }

        public Array GetAdditionalLengthListDAL(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords)
        {
            PMGSYEntities dbContext = new PMGSYEntities();
            try
            {
                var lstExecution = (from cost in dbContext.IMS_PROGRESS_LENGTH_COMPLETION
                                    where
                                    cost.IMS_PR_ROAD_CODE == roadCode

                                    select new
                                    {
                                        cost.IMS_PR_ROAD_CODE,
                                        cost.IMS_TRANSACTION_CODE,
                                        cost.IMS_CHANGE_TYPE,
                                        cost.IMS_CHANGED_LENGTH,
                                        cost.IMS_IS_MRD_APPROVED,
                                        cost.IMS_PERCENTAGE_CHANGE,
                                        cost.IMS_MRD_APPROVED_DATE
                                    }).Distinct();
                totalRecords = lstExecution.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "IMS_CHANGED_LENGTH":
                                lstExecution = lstExecution.OrderBy(m => m.IMS_CHANGED_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderBy(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_CHANGED_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {

                            case "IMS_CHANGED_LENGTH":
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_CHANGED_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                            default:
                                lstExecution = lstExecution.OrderByDescending(m => m.IMS_TRANSACTION_CODE).ThenBy(x => x.IMS_CHANGED_LENGTH).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                                break;
                        }
                    }
                }
                else
                {
                    lstExecution = lstExecution.OrderByDescending(m => m.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                var result = lstExecution.Select(executionDetails => new
                {
                    executionDetails.IMS_PR_ROAD_CODE,
                    executionDetails.IMS_TRANSACTION_CODE,
                    executionDetails.IMS_CHANGE_TYPE,
                    executionDetails.IMS_CHANGED_LENGTH,
                    executionDetails.IMS_IS_MRD_APPROVED,
                    executionDetails.IMS_MRD_APPROVED_DATE,
                    executionDetails.IMS_PERCENTAGE_CHANGE,

                }).ToArray();

                return result.Select(m => new
                {
                    id = URLEncrypt.EncryptParameters1(new string[] { "IMS_PR_ROAD_CODE=" + m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }),
                    cell = new[] 
                    {                      
                        //m.IMS_TRANSACTION_CODE.ToString(),
                        m.IMS_CHANGE_TYPE == "I" ? "Increase" : "Decrease",
                        m.IMS_PERCENTAGE_CHANGE.ToString(),
                        m.IMS_CHANGED_LENGTH.ToString(),
                        m.IMS_IS_MRD_APPROVED == "Y" ? "Yes" : "No",
                        m.IMS_MRD_APPROVED_DATE == null ? "-" : ConvertDateToString(m.IMS_MRD_APPROVED_DATE),
                        "<center><a href='#' class='ui-icon ui-icon-pencil' onclick='EditLengthDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }) + "\"); return false;'>Edit</a></center>",
                        "<center><a href='#' class='ui-icon ui-icon-trash' onclick='DeleteLengthDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }) + "\"); return false;'>Delete</a></center>",
                        m.IMS_IS_MRD_APPROVED == "P" ? "<center><a href='#' class='ui-icon ui-icon-unlocked' onclick='ApproveLengthDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }) + "\"); return false;'>Delete</a></center>" : "-",
                        m.IMS_IS_MRD_APPROVED == "P" ? "<center><a href='#' class='ui-icon ui-icon-locked' onclick='DiscardLengthDetails(\"" +  URLEncrypt.EncryptParameters1(new string[]{ "IMS_PR_ROAD_CODE="+m.IMS_PR_ROAD_CODE.ToString().Trim(), "TransactionCode =" + m.IMS_TRANSACTION_CODE.ToString().Replace("/", "") }) + "\"); return false;'>Delete</a></center>": "-"
                     }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetAdditionalLengthListDAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool ApproveRejectAdditionalLengthDetails(int proposalCode, int transactionCode, string approveReject)
        {
            dbContext = new PMGSYEntities();

            try
            {
                if (dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Any(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE == transactionCode))
                {
                    IMS_PROGRESS_LENGTH_COMPLETION lengthDetails = dbContext.IMS_PROGRESS_LENGTH_COMPLETION.Where(m => m.IMS_PR_ROAD_CODE == proposalCode && m.IMS_TRANSACTION_CODE == transactionCode).FirstOrDefault();
                    if (approveReject == "N")
                    {
                        lengthDetails.IMS_IS_MRD_APPROVED = "N";
                        lengthDetails.APPROVE_USERID = PMGSYSession.Current.UserId;
                        lengthDetails.APPROVE_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(lengthDetails).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                    else if (approveReject == "Y")
                    {
                        lengthDetails.IMS_IS_MRD_APPROVED = "Y";
                        lengthDetails.APPROVE_USERID = PMGSYSession.Current.UserId;
                        lengthDetails.APPROVE_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.Entry(lengthDetails).State = EntityState.Modified;
                        lengthDetails.IMS_MRD_APPROVED_DATE = DateTime.Now;
                        dbContext.SaveChanges();
                    }
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ApproveRejectAdditionalLengthDetails().DAL");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Dropped Proposal[by Pradip Patil (10/04/2017)]

        public Array GetDroppingProposalsForSRRDADAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                //List<pr_get_proposals_for_srrda_Result> itemList = new List<pr_get_proposals_for_srrda_Result>();

                //List<USP_GET_PROPOSAL_LIST_Result> itemList = new List<USP_GET_PROPOSAL_LIST_Result>();
                List<USP_GET_PROPOSAL_LIST_DROPPING_Result> itemList = new List<USP_GET_PROPOSAL_LIST_DROPPING_Result>();
                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "N";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "Y";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }


                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();

                //itemList = dbContext.USP_GET_PROPOSAL_LIST(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();
                itemList = dbContext.USP_GET_PROPOSAL_LIST_DROPPING(MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, ProposalType, (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_DROPPING_Result>();

                totalRecords = itemList.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = itemList.Sum(m => m.TOTAL_COST).HasValue ? itemList.Sum(m => m.TOTAL_COST).Value : 0; ;//itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = itemList.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = itemList.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = itemList.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = itemList.Sum(m => m.POP999);
                colTotal.TOT_HABS = itemList.Sum(m => m.TOTAL_HABS).HasValue ? itemList.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = itemList.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = itemList.Sum(m => m.MAINT_AMT).HasValue ? itemList.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = itemList.Sum(m => m.ROAD_LENGTH).HasValue ? itemList.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = itemList.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = itemList.Sum(m => m.ROAD_STATE).HasValue ? itemList.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = itemList.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = itemList.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = itemList.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = itemList.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }


                itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).ToList();

                string adminNdCode = string.Empty, expIncurred = string.Empty;

                return itemList.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {     
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    //(propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT + propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    //propDetails.STA_SANCTIONED_BY.ToString(),
                                    //propDetails.STA_SANCTIONED_DATE.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    //propDetails.PTA_SANCTIONED_BY.ToString(),
                                    //propDetails.PTA_SANCTIONED_DATE.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    
                                    ///Added by SAMMED A. PATIL on 07SEP2017 to display expenditure incurred
                                    //string.IsNullOrEmpty(Convert.ToString(dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(t=>t.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(x=>x.EXP_INCURRED).FirstOrDefault())) ? "-" : Convert.ToString(dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(t=>t.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(x=>x.EXP_INCURRED).FirstOrDefault()),
                                    //dbContext.UDF_ACC_RPT_GET_ROAD_EXPN_AMT(adminNdCode,DateTime.Now.Month,DateTime.Now.Year, "P", 0,0, propDetails.IMS_PR_ROAD_CODE),

                                    //adminNdCode = Convert.ToString(dbContext.IMS_SANCTIONED_PROJECTS.Where(x=>x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(x=>x.MAST_DPIU_CODE).FirstOrDefault()),
                                    //expIncurred = getExpenditureIncurred(adminNdCode, propDetails.IMS_PR_ROAD_CODE.ToString()),

                                    adminNdCode = Convert.ToString(propDetails.MAST_DPIU_CODE),
                                    expIncurred = Convert.ToString(propDetails.Expn_Amt),

                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + /*"$" + propDetails.IMS_LOCK_STATUS +*/ "\"); return false;'>Show Details</a>",
                                    propDetails.IMS_SANCTIONED !="Y"?"-"
                                    :(dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(t=>t.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).FirstOrDefault() ==null)
                                     ?"<input id='cbx_'"+ propDetails.IMS_PR_ROAD_CODE +" class='cbxDrop' type='checkbox' title='Proposal is dropped.' name='isDropped' value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+propDetails.IMS_PR_ROAD_CODE.ToString()})+"'>"
                                     :(dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any(t=>t.IMS_PR_ROAD_CODE== propDetails.IMS_PR_ROAD_CODE && t.MORD_APPROVED=="N" && t.APPROVED_DATE_TIME!=null && t.DROP_PROJ_PDF_CODE==null)
                                     ?(dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any(t=>t.IMS_PR_ROAD_CODE== propDetails.IMS_PR_ROAD_CODE && t.MORD_APPROVED=="N" && t.APPROVED_DATE_TIME==null)? "<input type='checkbox' checked='checked' disabled='disabled' title='Proposal is re-assigned for dropping.' name='isDropped'  value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+propDetails.IMS_PR_ROAD_CODE.ToString()})+"'>":"<input id='cbx_'"+ propDetails.IMS_PR_ROAD_CODE +" class='cbxDrop' type='checkbox' title='Proposal drop request is Rejected.' name='isDropped' value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+propDetails.IMS_PR_ROAD_CODE.ToString()})+"'>" )
                                     
                                     :"<input type='checkbox' checked='checked' disabled='disabled' title='Proposal is assigned for dropping.' name='isDropped'  value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+propDetails.IMS_PR_ROAD_CODE.ToString()})+"'>"),  
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetDroppingProposalsForSRRDADAL()");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string getExpenditureIncurred(string adminNdCode, string prRoadCode)
        {
            try
            {
                string sqlQuery = "SELECT [omms].[UDF_ACC_RPT_GET_ROAD_EXPN_AMT] ({0},{1},{2},{3},{4},{5},{6})";
                Object[] parameters = { adminNdCode, DateTime.Now.Month, DateTime.Now.Year, "P", 0, 0, prRoadCode };
                decimal activityCount = dbContext.Database.SqlQuery<decimal>(sqlQuery, parameters).FirstOrDefault();

                activityCount = (activityCount > 0) ? (activityCount / 100000) : activityCount;

                return Convert.ToString(Math.Round(activityCount, 2));
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "getExpenditureIncurred()");
                return string.Empty;
            }
        }

        public List<SelectListItem> PopulateFinancialYearsByStateForDroppingDAL(int stateCode, bool isAllSelected = false)
        {
            List<SelectListItem> lstYears = new List<SelectListItem>();
            SelectListItem item;

            try
            {
                dbContext = new PMGSYEntities();
                var query = (from ISP in dbContext.IMS_SANCTIONED_PROJECTS
                             join DP in dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS on ISP.IMS_PR_ROAD_CODE equals DP.IMS_PR_ROAD_CODE
                             where ISP.MAST_STATE_CODE == stateCode
                             select new
                             {
                                 Text = ISP.IMS_YEAR,//ma.MAST_AGENCY_NAME,
                                 Value = ISP.IMS_YEAR,
                                 //Selected = (ma.MAST_AGENCY_TYPE == "G" ? true : false)
                             }).OrderByDescending(c => c.Text).ToList().Distinct();

                foreach (var data in query)
                {
                    item = new SelectListItem();
                    item.Text = data.Text + "-" + (data.Text + 1);
                    item.Value = data.Value.ToString();
                    //item.Selected = data.Selected;
                    lstYears.Add(item);
                }

                if (isAllSelected == false)
                {
                    lstYears.Insert(0, (new SelectListItem { Text = "Select Year", Value = "-1", Selected = true }));
                }
                else if (isAllSelected == true)
                {
                    lstYears.Insert(0, (new SelectListItem { Text = "All Years", Value = "0", Selected = true }));
                }

                return lstYears;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulateFinancialYearsByStateForDroppingDAL()");
                return lstYears;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool AddDropProposalDAL(AddDropOrderViewModel model, out String result)
        {
            Boolean Status = false;
            Boolean StatusReject = false;
            try
            {
                using (var dbContext = new PMGSYEntities())
                {


                    //if (dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any(m => m.IMS_PR_ROAD_CODE == model.imsPrRoadCode && m.MORD_APPROVED == "N" && m.APPROVED_DATE_TIME != null && m.DROP_PROJ_PDF_CODE == null))
                    //{
                    //    IMS_PROPOSAL_DROP_REQUEST_DETAILS masterModel = new IMS_PROPOSAL_DROP_REQUEST_DETAILS();
                    //    masterModel = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == model.imsPrRoadCode && m.MORD_APPROVED == "N" && m.APPROVED_DATE_TIME != null && m.DROP_PROJ_PDF_CODE == null).FirstOrDefault();

                    //    if (masterModel != null)
                    //    {
                    //        masterModel.APPROVED_DATE_TIME = null;

                    //        masterModel.IMS_PR_ROAD_CODE = model.imsPrRoadCode;

                    //        masterModel.RECOUP_AMOUNT = Convert.ToDouble(model.recoupAmt);
                    //        masterModel.EXP_INCURRED = Convert.ToDouble(model.expenditureIncurred);
                    //        masterModel.DROP_REASON = model.dropReason;
                    //        dbContext.Entry(masterModel).State = EntityState.Modified;


                    //        dbContext.SaveChanges();

                    //        result = "Work is resubmitted after Rejection for dropping Successfully";
                    //        return true;
                    //    }

                    //}

                    StatusReject = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any(s => s.IMS_PR_ROAD_CODE == model.imsPrRoadCode &&  s.MORD_APPROVED=="N" && s.APPROVED_DATE_TIME!=null);

                    Status = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any(s => s.IMS_PR_ROAD_CODE == model.imsPrRoadCode);

                    if (StatusReject)
                    { 
                    }
                    else 
                    {
                        if (Status)
                        {
                            result = "Work already submitted for dropping."; ;
                            return false;
                        }
                    }

                   

                    if (model.imsPrRoadCode > 0)
                    {
                        //IMS_PROPOSAL_DROP_REQUEST dropReqMaster = new IMS_PROPOSAL_DROP_REQUEST();
                        //dropReqMaster.REQUEST_DATE_TIME = DateTime.Now;

                        //dropReqMaster.REQUEST_USERID = PMGSYSession.Current.UserId;
                        //dropReqMaster.REQUEST_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        //dbContext.IMS_PROPOSAL_DROP_REQUEST.Add(dropReqMaster);
                        //dbContext.SaveChanges();

                        //int DropCode = dropReqMaster.DROP_REQ_CODE;

                        IMS_PROPOSAL_DROP_REQUEST_DETAILS dropReqdetails = new IMS_PROPOSAL_DROP_REQUEST_DETAILS();
                        dropReqdetails.DROP_REQ_ID = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any() == false ? 1 : dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Max(i => i.DROP_REQ_ID) + 1;
                        dropReqdetails.DROP_REQ_CODE = null;
                        dropReqdetails.MORD_APPROVED = "N";
                        dropReqdetails.APPROVED_DATE_TIME = null;
                        dropReqdetails.APPROVED_IPADD = null;
                        dropReqdetails.APPROVED_USERID = null;
                        dropReqdetails.DROP_PROJ_PDF_CODE = null;
                        dropReqdetails.IMS_PR_ROAD_CODE = model.imsPrRoadCode;

                        dropReqdetails.RECOUP_AMOUNT = Convert.ToDouble(model.recoupAmt);
                        dropReqdetails.EXP_INCURRED = Convert.ToDouble(model.expenditureIncurred);
                        dropReqdetails.DROP_REASON = model.dropReason;

                        dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Add(dropReqdetails);
                        dbContext.SaveChanges();

                        result = "Work submitted for dropping successfully.";
                        return true;
                    }
                    else
                    {
                        result = "Error occured while assigning proposal for dropping.";
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DropProposalDAL()");
                result = "Error occured while assigning proposal for dropping."; ;
                return false;
            }
        }

        /// <summary>
        /// List Matrix Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListDropppingWorksDAL(int stateCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int serialNumber = 0;
                var dropWorks = (from item in dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS
                                 where item.IMS_SANCTIONED_PROJECTS.MAST_STATE_CODE == stateCode &&
                                 (PMGSYSession.Current.RoleCode == 25 ? (item.DROP_REQ_CODE != null) : (1 == 1))
                                 && item.IMS_SANCTIONED_PROJECTS.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                 orderby item.DROP_REQ_ID
                                 select new
                                 {
                                     item.IMS_SANCTIONED_PROJECTS.MASTER_STATE.MAST_STATE_NAME,
                                     item.IMS_PROPOSAL_DROP_REQUEST.REQUEST_LETTER_NO,
                                     //item.IMS_PROPOSAL_DROP_REQUEST.DROP_LETTER_NO,
                                     DROP_REQ_DATE = EntityFunctions.TruncateTime(item.DROP_REQ_DATE),
                                     item.IMS_PROPOSAL_DROP_REQUEST.NO_WORKS_REQUESTED,
                                     item.IMS_PROPOSAL_DROP_REQUEST.NO_WORKS_APPROVED,
                                     //item.MORD_APPROVED,
                                     //item.DROP_REQ_ID,
                                     item.DROP_REQ_CODE
                                 }).Distinct().ToList();
                totalRecords = dropWorks.Count();
                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "DROP_REQ_ID":
                                dropWorks = dropWorks.OrderBy(x => x.DROP_REQ_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                dropWorks = dropWorks.OrderBy(x => x.DROP_REQ_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "DROP_REQ_ID":
                                dropWorks = dropWorks.OrderByDescending(x => x.DROP_REQ_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                dropWorks = dropWorks.OrderByDescending(x => x.DROP_REQ_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                //var result = dropWorks.Select(m => new
                //{

                //    m.DROP_REQ_ID,
                //}).ToArray();

                return dropWorks.Select(Details => new
                {
                    id = ++serialNumber,
                    cell = new[]{                              
                      Details.MAST_STATE_NAME,
                      string.IsNullOrEmpty(Details.REQUEST_LETTER_NO) ? "-" : Details.REQUEST_LETTER_NO,
                      //string.IsNullOrEmpty(Details.DROP_LETTER_NO) ? "-" : Details.DROP_LETTER_NO,
                      (Details.DROP_REQ_DATE.HasValue) ? Details.DROP_REQ_DATE.Value.ToString("dd/MM/yyyy") : "-",
                      Details.NO_WORKS_REQUESTED.HasValue ? Details.NO_WORKS_REQUESTED.Value.ToString() : "-",
                      Details.NO_WORKS_APPROVED.HasValue ? Details.NO_WORKS_APPROVED.Value.ToString() : "-",
                      //Details.MORD_APPROVED == "N" ? "No" : "Yes",
                      Details.DROP_REQ_CODE > 0 ? "-" : "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='LoadProposalsToDropList(\"" /*+ Details.DROP_REQ_CODE.ToString().Trim() */ + "\"); return false;'>Add Request Details</a>",
                      //Details.DROP_REQ_CODE > 0 ? "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowLetter(\"" + Details.DROP_REQ_CODE.ToString().Trim() /*+ "$"  + propDetails.IMS_LOCK_STATUS */ + "\"); return false;'>View Letter</a>" : "-",
                      //dbContext.IMS_DROPPED_PROJECTS_PDF.Any(r=>r.DROP_REQ_CODE== m.ReqCode)==false?"-":"<a href='/Proposal/GetDropOrder?id="+m.scheme+"$"+dbContext.IMS_DROPPED_PROJECTS_PDF.Where(s=>s.DROP_REQ_CODE==m.ReqCode && s.DROP_PROJ_PDF_CODE==m.pdfCode).FirstOrDefault().IMS_PDF_NAME+"' title='Click here to view Drop Order Details' class='ui-icon ui-icon-zoomin ui-align-center' target=_blank></a>"                                                                                                                    
                      dbContext.IMS_DROPPED_PROJECTS_PDF.Any(r=>r.DROP_REQ_CODE == Details.DROP_REQ_CODE && r.DROP_ORDER_BY=="S") == false ? "-" : "<a href='/Proposal/GetDropRequestPDF?id="+ dbContext.IMS_DROPPED_PROJECTS_PDF.Where(s=>s.DROP_REQ_CODE == Details.DROP_REQ_CODE && s.DROP_ORDER_BY == "S").FirstOrDefault().IMS_PDF_NAME+"' title='Click here to view Drop Order Details' class='ui-icon ui-icon-zoomin ui-align-center' target=_blank></a>" ,
                      "<a href='#' title='View Details'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDroppedProposelDetails(\"" + Details.DROP_REQ_CODE+ "\"); return false;'>Show Details</a>",
                      dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(p=>p.DROP_REQ_CODE==Details.DROP_REQ_CODE).All(p=> p.DROP_PROJ_PDF_CODE ==null && p.MORD_APPROVED=="N") ? "Rejected" :
                     (dbContext.IMS_DROPPED_PROJECTS_PDF.Any(r=>r.DROP_REQ_CODE == Details.DROP_REQ_CODE && r.DROP_ORDER_BY=="M") == false?"-":"<a href='#' title='View Orders' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetailDroppedProposelDetails(\"" + Details.DROP_REQ_CODE+ "\"); return false;'>View Order</a>"),
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ListDropppingWorksDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// List Matrix Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListWorksForDropppingDAL(int reqCode, int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int serialNumber = 0;
                var dropWorks = (from item in dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS
                                 where item.DROP_REQ_CODE == null
                                 && item.IMS_SANCTIONED_PROJECTS.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                                 && item.IMS_SANCTIONED_PROJECTS.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                 orderby item.DROP_REQ_ID
                                 select new
                                 {
                                     item.DROP_REQ_ID,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_PR_ROAD_CODE,
                                     item.IMS_SANCTIONED_PROJECTS.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                     item.IMS_SANCTIONED_PROJECTS.MASTER_BLOCK.MAST_BLOCK_NAME,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_ROAD_NAME,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_PAV_LENGTH,
                                     item.EXP_INCURRED,
                                     item.RECOUP_AMOUNT,
                                     ///Added by SAMMED A. PATIL on 08SEP2017 to display Total Cost
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_PAV_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_PW_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_OW_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_CD_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_FC_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_HS_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_BW_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_BS_AMT,
                                     item.IMS_SANCTIONED_PROJECTS.IMS_SANCTIONED_RS_AMT
                                 }).ToList();
                totalRecords = dropWorks.Count();
                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "DROP_REQ_ID":
                                dropWorks = dropWorks.OrderBy(x => x.DROP_REQ_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                dropWorks = dropWorks.OrderBy(x => x.DROP_REQ_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "DROP_REQ_ID":
                                dropWorks = dropWorks.OrderByDescending(x => x.DROP_REQ_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                dropWorks = dropWorks.OrderByDescending(x => x.DROP_REQ_ID).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                var result = dropWorks.Select(m => new
                {

                    m.DROP_REQ_ID,
                    m.IMS_PR_ROAD_CODE,
                    m.MAST_DISTRICT_NAME,
                    m.MAST_BLOCK_NAME,
                    m.IMS_ROAD_NAME,
                    m.IMS_PAV_LENGTH,
                    m.EXP_INCURRED,
                    m.RECOUP_AMOUNT,
                    ///Added by SAMMED A. PATIL on 08SEP2017 to display Total Cost
                    IMS_TOTAL_COST = Convert.ToString((PMGSYSession.Current.PMGSYScheme == 1 || PMGSYSession.Current.PMGSYScheme == 3)
                                     ? ((m.IMS_SANCTIONED_PAV_AMT == null ? 0 : m.IMS_SANCTIONED_PAV_AMT) + (m.IMS_SANCTIONED_PW_AMT == null ? 0 : m.IMS_SANCTIONED_PW_AMT) + (m.IMS_SANCTIONED_OW_AMT == null ? 0 : m.IMS_SANCTIONED_OW_AMT) + (m.IMS_SANCTIONED_CD_AMT == null ? 0 : m.IMS_SANCTIONED_CD_AMT) + (m.IMS_SANCTIONED_BW_AMT == null ? 0 : m.IMS_SANCTIONED_BW_AMT) + (m.IMS_SANCTIONED_BS_AMT == null ? 0 : m.IMS_SANCTIONED_BS_AMT) + (m.IMS_SANCTIONED_RS_AMT == null ? 0 : m.IMS_SANCTIONED_RS_AMT))
                                     : ((m.IMS_SANCTIONED_PAV_AMT == null ? 0 : m.IMS_SANCTIONED_PAV_AMT) + (m.IMS_SANCTIONED_PW_AMT == null ? 0 : m.IMS_SANCTIONED_PW_AMT) + (m.IMS_SANCTIONED_OW_AMT == null ? 0 : m.IMS_SANCTIONED_OW_AMT) + (m.IMS_SANCTIONED_CD_AMT == null ? 0 : m.IMS_SANCTIONED_CD_AMT) + (m.IMS_SANCTIONED_FC_AMT == null ? 0 : m.IMS_SANCTIONED_FC_AMT) + (m.IMS_SANCTIONED_HS_AMT == null ? 0 : m.IMS_SANCTIONED_HS_AMT) + (m.IMS_SANCTIONED_BW_AMT == null ? 0 : m.IMS_SANCTIONED_BW_AMT) + (m.IMS_SANCTIONED_BS_AMT == null ? 0 : m.IMS_SANCTIONED_BS_AMT)))
                }).ToArray();

                return result.Select(Details => new
                {
                    id = ++serialNumber,
                    cell = new[]{                              
                      Details.DROP_REQ_ID.ToString(),
                      Details.IMS_PR_ROAD_CODE.ToString(),
                      Details.MAST_DISTRICT_NAME,
                      Details.MAST_BLOCK_NAME,
                      Details.IMS_ROAD_NAME,
                      Details.IMS_PAV_LENGTH.ToString(),
                      Convert.ToString((Math.Round(Convert.ToDecimal(Details.IMS_TOTAL_COST), 2))),
                      //IMS_TOTAL_COST = Convert.ToString((PMGSYSession.Current.PMGSYScheme == 1 || PMGSYSession.Current.PMGSYScheme == 3)
                      //               ? ((Details.IMS_SANCTIONED_PAV_AMT == null ? 0 : Details.IMS_SANCTIONED_PAV_AMT) + (Details.IMS_SANCTIONED_PW_AMT == null ? 0 : Details.IMS_SANCTIONED_PW_AMT) + (Details.IMS_SANCTIONED_OW_AMT == null ? 0 : Details.IMS_SANCTIONED_OW_AMT) + (Details.IMS_SANCTIONED_CD_AMT == null ? 0 : Details.IMS_SANCTIONED_CD_AMT) + (Details.IMS_SANCTIONED_BW_AMT == null ? 0 : Details.IMS_SANCTIONED_BW_AMT) + (Details.IMS_SANCTIONED_BS_AMT == null ? 0 : Details.IMS_SANCTIONED_BS_AMT) + (Details.IMS_SANCTIONED_RS_AMT == null ? 0 : Details.IMS_SANCTIONED_RS_AMT))
                      //               : ((Details.IMS_SANCTIONED_PAV_AMT == null ? 0 : Details.IMS_SANCTIONED_PAV_AMT) + (Details.IMS_SANCTIONED_PW_AMT == null ? 0 : Details.IMS_SANCTIONED_PW_AMT) + (Details.IMS_SANCTIONED_OW_AMT == null ? 0 : Details.IMS_SANCTIONED_OW_AMT) + (Details.IMS_SANCTIONED_CD_AMT == null ? 0 : Details.IMS_SANCTIONED_CD_AMT) + (Details.IMS_SANCTIONED_FC_AMT == null ? 0 : Details.IMS_SANCTIONED_FC_AMT) + (Details.IMS_SANCTIONED_HS_AMT == null ? 0 : Details.IMS_SANCTIONED_HS_AMT) + (Details.IMS_SANCTIONED_BW_AMT == null ? 0 : Details.IMS_SANCTIONED_BW_AMT) + (Details.IMS_SANCTIONED_BS_AMT == null ? 0 : Details.IMS_SANCTIONED_BS_AMT))),
                      Details.EXP_INCURRED.HasValue ? Convert.ToString(Math.Round(Details.EXP_INCURRED.Value, 2)) : "-",
                      Details.RECOUP_AMOUNT.HasValue ? Convert.ToString(Math.Round(Details.RECOUP_AMOUNT.Value, 2)) : "-",
                       URLEncrypt.EncryptParameters1(new String[]{"DropReqID="+Details.DROP_REQ_ID.ToString()})
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ListWorksForDropppingDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool AddDropRequestDetailsDAL(string[] dropDetails, string letterNo, out String result)
        {
            List<string> lstParams = new List<string>();
            Boolean Status = false;
            string[] item = null;
            int prRoadCode = 0, reqId = 0, dropReqCode = 0, dropPDFCode = 0;
            decimal expIncurred = 0, recoupAmount = 0;
            string pdfName = string.Empty;
            try
            {
                using (var dbContext = new PMGSYEntities())
                {
                    if (dropDetails.Length > 0)
                    {
                        for (int i = 0; i < dropDetails.Length; i++)
                        {
                            item = dropDetails[i].Split(',');

                            reqId = Convert.ToInt32(item[0]);
                            prRoadCode = Convert.ToInt32(item[1]);
                            expIncurred = Convert.ToDecimal(item[2]);
                            recoupAmount = Convert.ToDecimal(item[3]);

                            if (i == 0)
                            {
                                IMS_PROPOSAL_DROP_REQUEST dropReqMaster = new IMS_PROPOSAL_DROP_REQUEST();
                                dropReqCode = dbContext.IMS_PROPOSAL_DROP_REQUEST.Any() ? (dbContext.IMS_PROPOSAL_DROP_REQUEST.Max(x => x.DROP_REQ_CODE) + 1) : 1;
                                dropReqMaster.DROP_REQ_CODE = dropReqCode;
                                dropReqMaster.REQUEST_DATE_TIME = DateTime.Now;

                                dropReqMaster.REQUEST_LETTER_NO = letterNo.Trim();
                                dropReqMaster.NO_WORKS_REQUESTED = dropDetails.Length;

                                dropReqMaster.REQUEST_USERID = PMGSYSession.Current.UserId;
                                dropReqMaster.REQUEST_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                dbContext.IMS_PROPOSAL_DROP_REQUEST.Add(dropReqMaster);

                                IMS_DROPPED_PROJECTS_PDF DropDetails = new IMS_DROPPED_PROJECTS_PDF();

                                dropPDFCode = dbContext.IMS_DROPPED_PROJECTS_PDF.Any() == false ? 1 : dbContext.IMS_DROPPED_PROJECTS_PDF.Max(p => p.DROP_PROJ_PDF_CODE) + 1;
                                DropDetails.DROP_PROJ_PDF_CODE = dropPDFCode;

                                DropDetails.DROP_REQ_CODE = dropReqCode;
                                DropDetails.IMS_GENERATION_DATE = DateTime.Now;

                                DropDetails.IMS_ORDER_DATE = null;
                                DropDetails.IMS_ORDER_NUMBER = letterNo;
                                pdfName = (dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(m => m.MAST_STATE_SHORT_CODE).FirstOrDefault()) + "_" + dropReqCode + "_" + "PDF_" + DropDetails.DROP_PROJ_PDF_CODE + "_" + DateTime.Now.ToString("dd-MM-yyyy_hh_mm_tt") + ".pdf";
                                DropDetails.IMS_PDF_NAME = pdfName;
                                DropDetails.DROP_ORDER_BY = "S";
                                DropDetails.USERID = PMGSYSession.Current.UserId;
                                DropDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                                dbContext.IMS_DROPPED_PROJECTS_PDF.Add(DropDetails);
                            }

                            IMS_PROPOSAL_DROP_REQUEST_DETAILS dropReqdetails = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(x => x.DROP_REQ_ID == reqId).FirstOrDefault();

                            dropReqdetails.DROP_PROJ_PDF_CODE = dropPDFCode;
                            dropReqdetails.DROP_REQ_CODE = dropReqCode;
                            dropReqdetails.USERID = PMGSYSession.Current.UserId;
                            dropReqdetails.DROP_REQ_DATE = DateTime.Now;
                            //dbContext.SaveChanges();
                        }
                        dbContext.SaveChanges();
                        result = "Work submitted for dropping successfully.";

                        dropReqCode = (int)dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(x => x.DROP_REQ_ID == reqId).Select(c => c.DROP_REQ_CODE).FirstOrDefault();

                        lstParams.Add(PMGSYSession.Current.StateCode.ToString());
                        lstParams.Add(PMGSYSession.Current.StateName);
                        lstParams.Add(dropReqCode.ToString());
                        lstParams.Add(PMGSYSession.Current.PMGSYScheme.ToString());
                        lstParams.Add(letterNo);
                        lstParams.Add(dropPDFCode.ToString());
                        lstParams.Add(pdfName);
                        GenerateDropRequestFile(lstParams);
                        return true;
                    }
                    else
                    {
                        result = "Error occured while assigning proposal for dropping.";
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DropProposalDAL()");
                result = "Error occured while assigning proposal for dropping."; ;
                return false;
            }
        }

        public bool DropProposalDAL(List<int> imsRoadCodeList, out String result)
        {
            Boolean Status = false;
            try
            {
                using (var dbContext = new PMGSYEntities())
                {
                    foreach (var item in imsRoadCodeList)
                    {
                        Status = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any(s => s.IMS_PR_ROAD_CODE == item);
                        if (Status)
                        {
                            result = "Work(s) already submitted for dropping."; ;
                            return false;
                        }
                    }

                    if (imsRoadCodeList.Count > 0)
                    {
                        IMS_PROPOSAL_DROP_REQUEST dropReqMaster = new IMS_PROPOSAL_DROP_REQUEST();
                        dropReqMaster.REQUEST_DATE_TIME = DateTime.Now;

                        dropReqMaster.REQUEST_USERID = PMGSYSession.Current.UserId;
                        dropReqMaster.REQUEST_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbContext.IMS_PROPOSAL_DROP_REQUEST.Add(dropReqMaster);
                        dbContext.SaveChanges();

                        int DropCode = dropReqMaster.DROP_REQ_CODE;
                        for (int item = 0; item < imsRoadCodeList.Count; item++)
                        {
                            IMS_PROPOSAL_DROP_REQUEST_DETAILS dropReqdetails = new IMS_PROPOSAL_DROP_REQUEST_DETAILS();
                            dropReqdetails.DROP_REQ_ID = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any() == false ? 1 : dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Max(i => i.DROP_REQ_ID) + 1;
                            dropReqdetails.DROP_REQ_CODE = DropCode;
                            dropReqdetails.MORD_APPROVED = "N";
                            dropReqdetails.APPROVED_DATE_TIME = null;
                            dropReqdetails.APPROVED_IPADD = null;
                            dropReqdetails.APPROVED_USERID = null;
                            dropReqdetails.DROP_PROJ_PDF_CODE = null;
                            dropReqdetails.IMS_PR_ROAD_CODE = imsRoadCodeList[item];
                            dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Add(dropReqdetails);
                            dbContext.SaveChanges();
                        }

                        result = "Work(s) submitted for dropping successfully.";
                        return true;
                    }
                    else
                    {
                        result = "Error occured while assigning proposal for dropping.";
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DropProposalDAL()");
                result = "Error occured while assigning proposal for dropping."; ;
                return false;
            }

        }

        public Array GetProposalsForDroppedOrder(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int batch, int scheme, string proposalType, out bool IsDOGenerated, string reqCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int RequestCode = Convert.ToInt32(reqCode);
                var lstdroporder = (from DR in dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS
                                    join IMS in dbContext.IMS_SANCTIONED_PROJECTS on DR.IMS_PR_ROAD_CODE equals IMS.IMS_PR_ROAD_CODE
                                    where DR.DROP_REQ_CODE == RequestCode
                                    && IMS.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                    select new
                                    {
                                        ReqCode = DR.DROP_REQ_CODE,
                                        ImsRoadCode = DR.IMS_PR_ROAD_CODE,
                                        State = IMS.MASTER_STATE.MAST_STATE_NAME,
                                        District = IMS.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                        block = IMS.MASTER_BLOCK.MAST_BLOCK_NAME,
                                        Year = IMS.IMS_YEAR,
                                        Batch = IMS.IMS_BATCH,
                                        Collaboration = IMS.IMS_COLLABORATION,
                                        Package = IMS.IMS_PACKAGE_ID,
                                        RoadName = IMS.IMS_ROAD_NAME,
                                        ProposalType = IMS.IMS_PROPOSAL_TYPE,
                                        RoadLength = IMS.IMS_PAV_LENGTH,
                                        BridgeLength = IMS.IMS_BRIDGE_LENGTH,
                                        IsComplete = IMS.IMS_ISCOMPLETED,
                                        DR.EXP_INCURRED,
                                        DR.RECOUP_AMOUNT,
                                        DR.MASTER_REASON.MAST_REASON_NAME,
                                        ///Added by SAMMED A. PATIL on 08SEP2017 to display Total Cost
                                        IMS.IMS_SANCTIONED_PAV_AMT,
                                        IMS.IMS_SANCTIONED_PW_AMT,
                                        IMS.IMS_SANCTIONED_OW_AMT,
                                        IMS.IMS_SANCTIONED_CD_AMT,
                                        IMS.IMS_SANCTIONED_FC_AMT,
                                        IMS.IMS_SANCTIONED_HS_AMT,
                                        IMS.IMS_SANCTIONED_BW_AMT,
                                        IMS.IMS_SANCTIONED_BS_AMT,
                                        IMS.IMS_SANCTIONED_RS_AMT
                                    }).ToList();

                totalRecords = lstdroporder.Count;
                IsDOGenerated = dbContext.IMS_DROPPED_PROJECTS_PDF.Any(s => s.DROP_REQ_CODE == RequestCode);

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        lstdroporder = lstdroporder.OrderBy(x => x.State).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        lstdroporder = lstdroporder.OrderByDescending(x => x.State).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    lstdroporder = lstdroporder.OrderBy(x => x.State).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }


                lstdroporder = lstdroporder.OrderByDescending(x => x.State).ToList();

                var result = lstdroporder.Select(m => new
                {

                    m.ReqCode,
                    m.ImsRoadCode,
                    m.State,
                    m.District,
                    m.block,
                    m.Year,
                    m.Batch,
                    m.Collaboration,
                    m.Package,
                    m.RoadName,
                    m.ProposalType,
                    m.RoadLength,
                    m.BridgeLength,
                    m.IsComplete,
                    RECOUP_AMOUNT = string.IsNullOrEmpty(Convert.ToString(m.RECOUP_AMOUNT)) ? "-" : Convert.ToString(m.RECOUP_AMOUNT.Value),
                    EXP_INCURRED = string.IsNullOrEmpty(Convert.ToString(m.EXP_INCURRED)) ? "-" : Convert.ToString(m.EXP_INCURRED.Value),
                    m.MAST_REASON_NAME,
                    ///Added by SAMMED A. PATIL on 08SEP2017 to display Total Cost
                    IMS_TOTAL_COST = Convert.ToString((PMGSYSession.Current.PMGSYScheme == 1 || PMGSYSession.Current.PMGSYScheme == 3)
                                     ? ((m.IMS_SANCTIONED_PAV_AMT == null ? 0 : m.IMS_SANCTIONED_PAV_AMT) + (m.IMS_SANCTIONED_PW_AMT == null ? 0 : m.IMS_SANCTIONED_PW_AMT) + (m.IMS_SANCTIONED_OW_AMT == null ? 0 : m.IMS_SANCTIONED_OW_AMT) + (m.IMS_SANCTIONED_CD_AMT == null ? 0 : m.IMS_SANCTIONED_CD_AMT) + (m.IMS_SANCTIONED_BW_AMT == null ? 0 : m.IMS_SANCTIONED_BW_AMT) + (m.IMS_SANCTIONED_BS_AMT == null ? 0 : m.IMS_SANCTIONED_BS_AMT) + (m.IMS_SANCTIONED_RS_AMT == null ? 0 : m.IMS_SANCTIONED_RS_AMT))
                                     : ((m.IMS_SANCTIONED_PAV_AMT == null ? 0 : m.IMS_SANCTIONED_PAV_AMT) + (m.IMS_SANCTIONED_PW_AMT == null ? 0 : m.IMS_SANCTIONED_PW_AMT) + (m.IMS_SANCTIONED_OW_AMT == null ? 0 : m.IMS_SANCTIONED_OW_AMT) + (m.IMS_SANCTIONED_CD_AMT == null ? 0 : m.IMS_SANCTIONED_CD_AMT) + (m.IMS_SANCTIONED_FC_AMT == null ? 0 : m.IMS_SANCTIONED_FC_AMT) + (m.IMS_SANCTIONED_HS_AMT == null ? 0 : m.IMS_SANCTIONED_HS_AMT) + (m.IMS_SANCTIONED_BW_AMT == null ? 0 : m.IMS_SANCTIONED_BW_AMT) + (m.IMS_SANCTIONED_BS_AMT == null ? 0 : m.IMS_SANCTIONED_BS_AMT)))
                }).ToArray();

                return result.Select(m => new
                {
                    id = m.ImsRoadCode,
                    cell = new[] 
                    {
                        m.State.ToString(),
                        m.District.ToString(),
                        m.block.ToString(),
                        m.Year + "-"+(m.Year+1),
                        "Batch -"+m.Batch,
                        m.Package.ToString(),
                        m.RoadName,
                        m.ProposalType=="P"?m.RoadLength.ToString():m.ProposalType=="L"?m.BridgeLength.ToString():"-",
                        Convert.ToString((Math.Round(Convert.ToDecimal(m.IMS_TOTAL_COST), 2))),
                        m.EXP_INCURRED,
                        m.RECOUP_AMOUNT,
                        m.MAST_REASON_NAME,
                        m.IsComplete=="M"?"Sanctioned":m.IsComplete=="G"?"Aggrement":m.IsComplete=="P"?"Progress":m.IsComplete=="C"?"Completed":m.IsComplete=="X"?"Maintenance":"-",
                       // ((dbContext.IMS_DROPPED_PROJECTS_PDF.Any(s => s.DROP_REQ_CODE == m.ReqCode)==true) && (dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(p=>p.DROP_REQ_CODE==m.ReqCode)).FirstOrDefault().MORD_APPROVED == "Y")? "<input type='checkbox' class='dropped' checked='checked' disabled='disabled'  title='check button for approve drop order.' name='Approve' value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+m.ImsRoadCode.ToString()})+"'>": "<input type='checkbox' class='dropped' title='check button for approve drop order.' name='Approve' value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+m.ImsRoadCode.ToString()})+"'>",
                        (dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(p=>p.IMS_PR_ROAD_CODE==m.ImsRoadCode &&  p.DROP_REQ_CODE==RequestCode)).FirstOrDefault().MORD_APPROVED == "Y"
                        ? "<input type='checkbox' class='dropped' checked='checked' disabled='disabled'  title='check button for approve / reject drop order.' name='Approve' value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+m.ImsRoadCode.ToString()})+"'>"
                        :(
                        dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Any(p=>p.IMS_PR_ROAD_CODE==m.ImsRoadCode && p.DROP_PROJ_PDF_CODE ==null && p.MORD_APPROVED=="N" && p.DROP_REQ_CODE==RequestCode)
                        ?"Rejected"
                        :"<input type='checkbox' class='dropped' title='check button for approve / reject drop order.' name='Approve' value='"+URLEncrypt.EncryptParameters1(new string[]{"ImsRoadCode="+m.ImsRoadCode.ToString()})+"'>"
                        ),
                        m.ReqCode.ToString(),
                        m.Collaboration.ToString()
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                totalRecords = 0;
                IsDOGenerated = false;
                ErrorLog.LogError(ex, "GetProposalsForDroppedOrder()");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string getRequestLetterDateDAL(int dropReqCode)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions comm = new CommonFunctions();
            string requestDate = string.Empty;
            try
            {
                var reqDate = dbContext.IMS_PROPOSAL_DROP_REQUEST.Where(x => x.DROP_REQ_CODE == dropReqCode).Select(x => x.REQUEST_DATE_TIME).FirstOrDefault();
                requestDate = comm.GetDateTimeToString(reqDate);
                return requestDate;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "getRequestLetterDateDAL()");
                return string.Empty;
            }
        }

        #region AddDropOrder NEW
        public bool AddDropOrderDAL(DropOrderViewModel model, List<int> mrdselectedroadList, ref string message)
        {
            dbContext = new PMGSYEntities();

            CommonFunctions objCommon = new CommonFunctions();
            SanctionOrderFilterModel sanModel = new SanctionOrderFilterModel();
            SqlConnection storeConnection = null;
            SqlCommand command = null;
            try
            {
                string connString = ConfigurationManager.ConnectionStrings["PMGSYConnection"].ConnectionString;
                using (storeConnection = new SqlConnection(connString))
                {
                    storeConnection.Open();

                    using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Suppress))
                    {
                        IMS_DROPPED_PROJECTS_PDF DropDetails = new IMS_DROPPED_PROJECTS_PDF();

                        //DropDetails.IMS_BATCH = model.BatchCode;
                        DropDetails.DROP_PROJ_PDF_CODE = dbContext.IMS_DROPPED_PROJECTS_PDF.Any() == false ? 1 : dbContext.IMS_DROPPED_PROJECTS_PDF.Max(p => p.DROP_PROJ_PDF_CODE) + 1;
                        DropDetails.DROP_REQ_CODE = model.RequestCode;
                        //DropDetails.IMS_COLLABORATION = model.StreamCode;
                        DropDetails.IMS_GENERATION_DATE = DateTime.Now;
                        //DropDetails.MAST_PMGSY_SCHEME = model.PMGSYScheme;
                        DropDetails.IMS_ORDER_DATE = objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);
                        DropDetails.IMS_ORDER_NUMBER = model.IMS_DROP_ORDER_NUMBER;
                        //DropDetails.MAST_STATE_CODE = model.StateCode;
                        DropDetails.IMS_PDF_NAME = (dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_SHORT_CODE).FirstOrDefault()) + "_" + (dbContext.MASTER_YEAR.Where(m => m.MAST_YEAR_CODE == model.YearCode).Select(m => m.MAST_YEAR_TEXT).FirstOrDefault()) + "_BATCH" + model.BatchCode + "_" + (dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault()) + "_SCHEME" + model.PMGSYScheme + "_" + "PDF_" + DropDetails.DROP_PROJ_PDF_CODE + "_" + DateTime.Now.ToString("dd-MM-yyyy_hh_mm_tt") + ".pdf";
                        //DropDetails.IMS_YEAR = model.YearCode;
                        DropDetails.DROP_ORDER_BY = "M";
                        DropDetails.USERID = PMGSYSession.Current.UserId;
                        DropDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        dbContext.IMS_DROPPED_PROJECTS_PDF.Add(DropDetails);

                        ///Update the entries in IMS_PROPOSAL_DROP_REQUEST 
                        IMS_PROPOSAL_DROP_REQUEST imsDropReq = dbContext.IMS_PROPOSAL_DROP_REQUEST.Where(d => d.DROP_REQ_CODE == model.RequestCode).FirstOrDefault();
                        if (imsDropReq != null)
                        {
                            imsDropReq.NO_WORKS_APPROVED = (imsDropReq.NO_WORKS_APPROVED.HasValue && Convert.ToInt32(imsDropReq.NO_WORKS_APPROVED) > 0) ? (Convert.ToInt32(imsDropReq.NO_WORKS_APPROVED) + mrdselectedroadList.Count) : mrdselectedroadList.Count;
                            imsDropReq.DROP_LETTER_NO = model.IMS_DROP_ORDER_NUMBER;
                            imsDropReq.DROP_APPROVED_DATE = objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);
                            dbContext.Entry(imsDropReq).State = EntityState.Modified;
                        }

                        // Changee the entry as 'Yes' for approved by MORD for drop request ==>
                        foreach (var item in mrdselectedroadList)
                        {                                                                                                                                   //  d.APPROVED_USERID ==null is added on 16 Sept 2020
                            IMS_PROPOSAL_DROP_REQUEST_DETAILS DropReq = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(d => d.IMS_PR_ROAD_CODE == item && d.APPROVED_USERID ==null).FirstOrDefault();
                            DropReq.MORD_APPROVED = "Y";
                            DropReq.APPROVED_DATE_TIME = DateTime.Now;
                            DropReq.APPROVED_USERID = PMGSYSession.Current.UserId;
                            DropReq.APPROVED_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            DropReq.DROP_PROJ_PDF_CODE = DropDetails.DROP_PROJ_PDF_CODE;
                            dbContext.Entry(DropReq).State = EntityState.Modified;
                        }
                        //<==


                        // Change the Status as Dropped  ==>

                        // var RoadCodeList = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(m => m. DROP_REQ_CODE == model.RequestCode).Select(s => s.IMS_PR_ROAD_CODE).ToList(); 
                        // foreach (var item in RoadCodeList)

                        foreach (var item in mrdselectedroadList)
                        {
                            int dropReason = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(c => c.DROP_REQ_CODE.Value == model.RequestCode).Select(x => x.DROP_REASON.Value).FirstOrDefault();

                            IMS_SANCTIONED_PROJECTS sanproject = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == item).FirstOrDefault();
                            sanproject.IMS_SANCTIONED = "D";

                            sanproject.IMS_REASON = ((dropReason == 3181) || (dropReason == 3182)) ? dropReason : 3183;

                            sanproject.IMS_SANCTIONED_DATE = objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);
                            dbContext.Entry(sanproject).State = EntityState.Modified;
                        }
                        //<==

                        #region Commented
                        //IMS_FREEZE_DETAILS freezeDetails = new IMS_FREEZE_DETAILS();
                        //if (dbContext.IMS_FREEZE_DETAILS.Any(m => m.IMS_BATCH == model.BatchCode && m.IMS_YEAR == model.YearCode && m.MAST_PMGSY_SCHEME == model.PMGSYScheme && m.MAST_STATE_CODE == model.StateCode))
                        //{
                        //    freezeDetails.IMS_TRANSACTION_NO = dbContext.IMS_FREEZE_DETAILS.Where(m => m.IMS_BATCH == model.BatchCode && m.IMS_YEAR == model.YearCode && m.MAST_PMGSY_SCHEME == model.PMGSYScheme && m.MAST_STATE_CODE == model.StateCode).Max(m => m.IMS_TRANSACTION_NO) + 1;
                        //}
                        //else
                        //{
                        //    freezeDetails.IMS_TRANSACTION_NO = 1;
                        //}
                        //freezeDetails.IMS_BATCH = model.BatchCode;
                        //freezeDetails.IMS_FREEZE_DATE = DateTime.Now;
                        //freezeDetails.IMS_FREEZE_STATUS = "F";
                        //freezeDetails.IMS_YEAR = model.YearCode;
                        //freezeDetails.MAST_PMGSY_SCHEME = (Byte)model.PMGSYScheme;
                        //freezeDetails.MAST_STATE_CODE = model.StateCode;
                        //freezeDetails.USERID = PMGSYSession.Current.UserId;
                        //freezeDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        //dbContext.IMS_FREEZE_DETAILS.Add(freezeDetails);
                        #endregion

                        sanModel.State = model.StateCode;
                        sanModel.Batch = model.BatchCode;
                        sanModel.Stream = model.StreamCode;
                        sanModel.PMGSYScheme = model.PMGSYScheme;
                        sanModel.Year = model.YearCode;
                        sanModel.DropOrderDate = objCommon.GetDateTimeToString(DropDetails.IMS_ORDER_DATE.Value);
                        sanModel.DropOrderNo = DropDetails.IMS_ORDER_NUMBER;
                        sanModel.StateName = dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_NAME).FirstOrDefault();
                        sanModel.CollaborationName = dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault();
                        sanModel.BatchName = dbContext.MASTER_BATCH.Where(m => m.MAST_BATCH_CODE == model.BatchCode).Select(m => m.MAST_BATCH_NAME).FirstOrDefault();
                        #region
                        //int recordCount = 0;
                        //List<int> lstRoadCodes = proposalList.Select(x => x.IMS_PR_ROAD_CODE).ToArray().ToList<int>();

                        ////code for updating the Proposals in bulk using Table Valued Parameters

                        //IEnumerable<SqlDataRecord> sqlDataRecords = new List<SqlDataRecord>();
                        //SqlDataRecord record = new SqlDataRecord(new SqlMetaData[] { new SqlMetaData("IMS_PR_ROAD_CODE", SqlDbType.Int) });
                        //List<SqlDataRecord> recordList = new List<SqlDataRecord>();

                        //DataTable ProposalTable = new DataTable();
                        //ProposalTable.Columns.Add("IMS_PR_ROAD_CODE", typeof(int));
                        //string RoadCodes = string.Empty;
                        //int j = 0;
                        //foreach (var item in lstRoadCodes)
                        //{
                        //    int i = 0;
                        //    record.SetInt32(i, Convert.ToInt32(item));
                        //    ProposalTable.Rows.Add(new object[] { Convert.ToInt32(item) });
                        //    i++;
                        //    recordList.Add(record);

                        //    if (j == 0)
                        //    {
                        //        RoadCodes = Convert.ToString(item);
                        //    }
                        //    else
                        //    {
                        //        RoadCodes = RoadCodes + "," + Convert.ToString(item);
                        //    }
                        //    j++;
                        //}

                        //sqlDataRecords = recordList;


                        //using (command = storeConnection.CreateCommand())
                        //{
                        //    command.Connection = storeConnection;

                        //    command.CommandText = "omms.USP_UPDATE_BULK_DROP_DETAILS";
                        //    command.CommandType = CommandType.StoredProcedure;
                        //    command.Parameters.Add(new SqlParameter("@ImsSanctioned", SqlDbType.Char)).Value = "D"; // status is Dropped
                        //    command.Parameters.Add(new SqlParameter("@ImsSanctionedBy", SqlDbType.VarChar)).Value = PMGSYSession.Current.UserName;
                        //    command.Parameters.Add(new SqlParameter("@SanctionDate", SqlDbType.DateTime)).Value = objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);// this value is not affect any field in SP
                        //    command.Parameters.Add(new SqlParameter("@IsCompleted", SqlDbType.Char)).Value = "M"; // this value is not affect any field in SP
                        //    //command.Parameters.Add(new SqlParameter("@UserId", SqlDbType.Int)).Value = PMGSYSession.Current.UserId;
                        //    //command.Parameters.Add(new SqlParameter("@IpAdd", SqlDbType.VarChar)).Value = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        //    command.Parameters.AddWithValue("@Proposals", ProposalTable).SqlDbType = SqlDbType.Structured;

                        //    recordCount = (int)command.ExecuteScalar();

                        //    if (recordCount == 0)
                        //    {
                        //        throw new Exception("");
                        //        //return string.Empty;
                        //    }

                        //}
                        #endregion

                        dbContext.SaveChanges();
                        message = "Drop Order Generated Successfully.";
                        GenerateDropOrderFile(sanModel, DropDetails, model.RequestCode);

                        //if (Status)
                        //{

                        //    
                        //    return true;
                        //}
                        //else
                        //{
                        //    message = "Error occurred while processing your request.";
                        //    return false;

                        //}

                        ts.Complete();
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                message = "Error occurred while processing your request.";
                ErrorLog.LogError(ex, "AddDropOrderDAL()");
                return false;

            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion
        #region AddDropOrder OLD
        //public bool AddDropOrderDAL(DropOrderViewModel model, string []dropApprovedArray,ref string message)
        //{
        //    dbContext = new PMGSYEntities();
        //    CommonFunctions objCommon = new CommonFunctions();
        //    SanctionOrderFilterModel sanModel = new SanctionOrderFilterModel();

        //    SqlConnection storeConnection = null;
        //    SqlCommand command = null;
        //    try
        //    {
        //        var proposalList = dbContext.USP_PROP_DROP_LIST(model.StateCode, 0, 0, model.YearCode, model.BatchCode, model.StreamCode, "%", Convert.ToByte(model.PMGSYScheme)).ToList();

        //        string connString = ConfigurationManager.ConnectionStrings["PMGSYConnection"].ConnectionString;
        //        //+ "MultipleActiveResultSets=True;App=EntityFramework";

        //        //SqlConnection storeConnection = new SqlConnection(dbContext.Database.Connection.ConnectionString);

        //          int roadCode = Convert.ToInt32(dropApprovedArray[0]);
        //        using (storeConnection = new SqlConnection(connString))
        //        {
        //            storeConnection.Open();

        //            using (TransactionScope ts = new TransactionScope())
        //            {
        //                IMS_DROPPED_PROJECTS_PDF DropDetails = new IMS_DROPPED_PROJECTS_PDF();
        //                DropDetails.DROP_PROJ_PDF_CODE = dbContext.IMS_DROPPED_PROJECTS_PDF.Any() == false ? 1: dbContext.IMS_DROPPED_PROJECTS_PDF.Max(p => p.DROP_PROJ_PDF_CODE) + 1;
        //                DropDetails.DROP_REQ_CODE = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(s => s.IMS_PR_ROAD_CODE == roadCode).FirstOrDefault().DROP_REQ_CODE;
        //                DropDetails.IMS_BATCH = model.BatchCode;
        //                DropDetails.IMS_COLLABORATION = model.StreamCode;
        //                DropDetails.IMS_GENERATION_DATE = DateTime.Now;
        //                DropDetails.MAST_PMGSY_SCHEME = model.PMGSYScheme;
        //                DropDetails.IMS_ORDER_DATE = DateTime.Now;
        //                DropDetails.IMS_ORDER_NUMBER = model.IMS_DROP_ORDER_NUMBER == null ? "NA" : model.IMS_DROP_ORDER_NUMBER;
        //                DropDetails.MAST_STATE_CODE = model.StateCode;
        //                DropDetails.IMS_PDF_NAME = (dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_SHORT_CODE).FirstOrDefault()) + "_" + (dbContext.MASTER_YEAR.Where(m => m.MAST_YEAR_CODE == model.YearCode).Select(m => m.MAST_YEAR_TEXT).FirstOrDefault()) + "_BATCH" + model.BatchCode + "_" + (dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault()) + "_SCHEME" + model.PMGSYScheme +"_"+DateTime.Now +".pdf";
        //                DropDetails.IMS_YEAR = model.YearCode;
        //                DropDetails.USERID = PMGSYSession.Current.UserId;
        //                DropDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
        //                dbContext.IMS_DROPPED_PROJECTS_PDF.Add(DropDetails);

        //                //IMS_FREEZE_DETAILS freezeDetails = new IMS_FREEZE_DETAILS();
        //                //if (dbContext.IMS_FREEZE_DETAILS.Any(m => m.IMS_BATCH == model.BatchCode && m.IMS_YEAR == model.YearCode && m.MAST_PMGSY_SCHEME == model.PMGSYScheme && m.MAST_STATE_CODE == model.StateCode))
        //                //{
        //                //    freezeDetails.IMS_TRANSACTION_NO = dbContext.IMS_FREEZE_DETAILS.Where(m => m.IMS_BATCH == model.BatchCode && m.IMS_YEAR == model.YearCode && m.MAST_PMGSY_SCHEME == model.PMGSYScheme && m.MAST_STATE_CODE == model.StateCode).Max(m => m.IMS_TRANSACTION_NO) + 1;
        //                //}
        //                //else
        //                //{
        //                //    freezeDetails.IMS_TRANSACTION_NO = 1;
        //                //}
        //                //freezeDetails.IMS_BATCH = model.BatchCode;
        //                //freezeDetails.IMS_FREEZE_DATE = DateTime.Now;
        //                //freezeDetails.IMS_FREEZE_STATUS = "F";
        //                //freezeDetails.IMS_YEAR = model.YearCode;
        //                //freezeDetails.MAST_PMGSY_SCHEME = (Byte)model.PMGSYScheme;
        //                //freezeDetails.MAST_STATE_CODE = model.StateCode;
        //                //freezeDetails.USERID = PMGSYSession.Current.UserId;
        //                //freezeDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
        //                //dbContext.IMS_FREEZE_DETAILS.Add(freezeDetails);
        //                dbContext.SaveChanges();
        //                sanModel.State = model.StateCode;
        //                sanModel.Batch = model.BatchCode;
        //                sanModel.Stream = model.StreamCode;
        //                sanModel.PMGSYScheme = model.PMGSYScheme;
        //                sanModel.Year = model.YearCode;
        //                //sanModel.DropOrderDate = objCommon.GetDateTimeToString(DropDetails.IMS_ORDER_DATE);
        //                sanModel.DropOrderDate = objCommon.GetDateTimeToString(DateTime.Now);
        //                sanModel.DropOrderNo = "ABC-123"; //DropDetails.IMS_ORDER_NUMBER;
        //                sanModel.StateName = dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_NAME).FirstOrDefault();
        //                sanModel.CollaborationName = dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault();
        //                sanModel.BatchName = dbContext.MASTER_BATCH.Where(m => m.MAST_BATCH_CODE == model.BatchCode).Select(m => m.MAST_BATCH_NAME).FirstOrDefault();
        //                #region
        //                //int recordCount = 0;
        //                //List<int> lstRoadCodes = proposalList.Select(x => x.IMS_PR_ROAD_CODE).ToArray().ToList<int>();

        //                ////code for updating the Proposals in bulk using Table Valued Parameters

        //                //IEnumerable<SqlDataRecord> sqlDataRecords = new List<SqlDataRecord>();
        //                //SqlDataRecord record = new SqlDataRecord(new SqlMetaData[] { new SqlMetaData("IMS_PR_ROAD_CODE", SqlDbType.Int) });
        //                //List<SqlDataRecord> recordList = new List<SqlDataRecord>();

        //                //DataTable ProposalTable = new DataTable();
        //                //ProposalTable.Columns.Add("IMS_PR_ROAD_CODE", typeof(int));
        //                //string RoadCodes = string.Empty;
        //                //int j = 0;
        //                //foreach (var item in lstRoadCodes)
        //                //{
        //                //    int i = 0;
        //                //    record.SetInt32(i, Convert.ToInt32(item));
        //                //    ProposalTable.Rows.Add(new object[] { Convert.ToInt32(item) });
        //                //    i++;
        //                //    recordList.Add(record);

        //                //    if (j == 0)
        //                //    {
        //                //        RoadCodes = Convert.ToString(item);
        //                //    }
        //                //    else
        //                //    {
        //                //        RoadCodes = RoadCodes + "," + Convert.ToString(item);
        //                //    }
        //                //    j++;
        //                //}

        //                //sqlDataRecords = recordList;


        //                // using (command = storeConnection.CreateCommand())
        //                //{
        //                //    command.Connection = storeConnection;

        //                //    command.CommandText = "omms.USP_UPDATE_BULK_DROP_DETAILS";
        //                //    command.CommandType = CommandType.StoredProcedure;
        //                //    command.Parameters.Add(new SqlParameter("@ImsSanctioned", SqlDbType.Char)).Value = "D"; // status is Dropped
        //                //    command.Parameters.Add(new SqlParameter("@ImsSanctionedBy", SqlDbType.VarChar)).Value = PMGSYSession.Current.UserName;
        //                //    command.Parameters.Add(new SqlParameter("@SanctionDate", SqlDbType.DateTime)).Value = objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);// this value is not affect any field in SP
        //                //    command.Parameters.Add(new SqlParameter("@IsCompleted", SqlDbType.Char)).Value = "M"; // this value is not affect any field in SP
        //                //    //command.Parameters.Add(new SqlParameter("@UserId", SqlDbType.Int)).Value = PMGSYSession.Current.UserId;
        //                //    //command.Parameters.Add(new SqlParameter("@IpAdd", SqlDbType.VarChar)).Value = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
        //                //    command.Parameters.AddWithValue("@Proposals", ProposalTable).SqlDbType = SqlDbType.Structured;

        //                //    recordCount = (int)command.ExecuteScalar();

        //                //    if (recordCount == 0)
        //                //    {
        //                //        throw new Exception("");
        //                //        //return string.Empty;
        //                //    }

        //                //}
        //                #endregion
        //                dbContext.SaveChanges();

        //                GenerateDropOrderFile(sanModel, DropDetails);
        //                ts.Complete();
        //            }
        //        }
        //        return true;
        //    }
        //    catch (Exception ex)
        //    {
        //        message = "Error occurred while processing your request.";
        //        ErrorLog.LogError(ex, "AddDropOrderDAL()");
        //        return false;

        //    }
        //    finally
        //    {
        //        dbContext.Dispose();
        //    }
        //}
        #endregion

        public void GenerateDropOrderFile(SanctionOrderFilterModel model, IMS_DROPPED_PROJECTS_PDF DropDetails, int reqCode)
        {
            //dbContext = new PMGSYEntities();

            try
            {
                Microsoft.Reporting.WebForms.ReportViewer rview = new Microsoft.Reporting.WebForms.ReportViewer();
                rview.ServerReport.ReportServerUrl = new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.ReportServerUrl"]);
                System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter> paramList = new System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter>();
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("State", model.State.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("District", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Block", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Year", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Batch", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Collaboration", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("ReqId", reqCode.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("PMGSY", PMGSYSession.Current.PMGSYScheme.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("StateName", model.StateName));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("BatchName", "All Batches"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("CollaborationName", "All Collaborations"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("DropLetterNo", (model.DropOrderNo == null ? "-" : model.DropOrderNo)));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("DropDate", (model.DropOrderDate == null ? "-" : model.DropOrderDate)));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("DropCode", DropDetails.DROP_PROJ_PDF_CODE.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("UserId", PMGSY.Extensions.PMGSYSession.Current.UserId.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("IsApproved", "Y"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("ApprovedDate", DateTime.Now.ToString("dd/MM/yyyy")));
                Microsoft.Reporting.WebForms.IReportServerCredentials irsc = new CustomReportCredentials(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Username"], System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Password"]);
                rview.ServerReport.ReportServerCredentials = irsc;
                rview.ServerReport.ReportPath = "/PMGSYCitizen/DropProposalList";
                rview.ServerReport.SetParameters(paramList);
                string mimeType, encoding, extension, deviceInfo;
                string[] streamids;
                Microsoft.Reporting.WebForms.Warning[] warnings;
                string format = "PDF"; //Desired format goes here (PDF, Excel, or Image)
                deviceInfo = "<DeviceInfo>" + "<SimplePageHeaders>True</SimplePageHeaders>" + "</DeviceInfo>";
                byte[] bytes = rview.ServerReport.Render(format, deviceInfo, out mimeType, out encoding, out extension, out streamids, out warnings);


                //MASTER_STATE state =dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.State).FirstOrDefault();

                //String fileName = state.MAST_STATE_SHORT_CODE + "_" + (model.Year + "-" + (model.Year + 1)) + "_BATCH" + model.Batch + "_" + (model.CollaborationName) + "_SCHEME" + model.PMGSYScheme + "_" + "REQ_" + DropDetails.DROP_REQ_CODE + "_" + DateTime.Now.ToString("dd-MM-yyyy_hh_mm_tt");

                String fileName = DropDetails.IMS_PDF_NAME;

                String DirectoryPath = model.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYI"].ToString() : model.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYII"].ToString() : model.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_RCPLWE"].ToString() : ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYIII"].ToString();
                if (!Directory.Exists(DirectoryPath))
                    Directory.CreateDirectory(DirectoryPath);

                //string filePath = model.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYI"].ToString() + fileName + ".pdf" : ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYII"].ToString() + fileName + ".pdf";
                string filePath = model.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYI"].ToString() + fileName : model.PMGSYScheme == 2 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYII"].ToString() + fileName : model.PMGSYScheme == 3 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_RCPLWE"].ToString() + fileName : ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYIII"].ToString() + fileName;
                System.IO.File.WriteAllBytes(filePath, bytes);
                //  return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GenerateDropOrderFile()");
                //  return false;

            }
            //finally
            //{
            //    //if (dbContext != null)
            //    //{
            //    //    dbContext.Dispose();
            //    //}
            //}

        }

        public void GenerateDropRequestFile(List<string> rptParams)
        {
            //dbContext = new PMGSYEntities();
            try
            {
                Microsoft.Reporting.WebForms.ReportViewer rview = new Microsoft.Reporting.WebForms.ReportViewer();
                rview.ServerReport.ReportServerUrl = new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.ReportServerUrl"]);
                System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter> paramList = new System.Collections.Generic.List<Microsoft.Reporting.WebForms.ReportParameter>();
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("State", rptParams[0]));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("District", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Block", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Year", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Batch", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("Collaboration", "0"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("ReqId", rptParams[2]));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("PMGSY", rptParams[3]));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("StateName", rptParams[1]));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("BatchName", "All Batches"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("CollaborationName", "All Collaborations"));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("DropLetterNo", rptParams[4]));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("DropDate", DateTime.Now.ToString()));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("DropCode", rptParams[5]));
                paramList.Add(new Microsoft.Reporting.WebForms.ReportParameter("UserId", PMGSY.Extensions.PMGSYSession.Current.UserId.ToString()));
                Microsoft.Reporting.WebForms.IReportServerCredentials irsc = new CustomReportCredentials(System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Username"], System.Web.Configuration.WebConfigurationManager.AppSettings["MvcReportViewer.Password"]);
                rview.ServerReport.ReportServerCredentials = irsc;
                rview.ServerReport.ReportPath = "/PMGSYCitizen/DropRequestProposalList";
                rview.ServerReport.SetParameters(paramList);
                string mimeType, encoding, extension, deviceInfo;
                string[] streamids;
                Microsoft.Reporting.WebForms.Warning[] warnings;
                string format = "PDF"; //Desired format goes here (PDF, Excel, or Image)
                deviceInfo = "<DeviceInfo>" + "<SimplePageHeaders>True</SimplePageHeaders>" + "</DeviceInfo>";
                byte[] bytes = rview.ServerReport.Render(format, deviceInfo, out mimeType, out encoding, out extension, out streamids, out warnings);


                //MASTER_STATE state =dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.State).FirstOrDefault();

                //String fileName = state.MAST_STATE_SHORT_CODE + "_" + (model.Year + "-" + (model.Year + 1)) + "_BATCH" + model.Batch + "_" + (model.CollaborationName) + "_SCHEME" + model.PMGSYScheme + "_" + "REQ_" + DropDetails.DROP_REQ_CODE + "_" + DateTime.Now.ToString("dd-MM-yyyy_hh_mm_tt");

                String fileName = rptParams[6];

                String DirectoryPath = Convert.ToInt32(rptParams[3]) == 1 ? ConfigurationManager.AppSettings["DROP_REQUEST_PDF_PMGSYI"].ToString() : Convert.ToInt32(rptParams[3]) == 2 ? ConfigurationManager.AppSettings["DROP_REQUEST_PDF_PMGSYII"].ToString() : Convert.ToInt32(rptParams[3]) == 3 ? ConfigurationManager.AppSettings["DROP_REQUEST_PDF_RCPLWE"].ToString() : ConfigurationManager.AppSettings["DROP_REQUEST_PDF_PMGSYIII"].ToString();
                if (!Directory.Exists(DirectoryPath))
                    Directory.CreateDirectory(DirectoryPath);

                //string filePath = model.PMGSYScheme == 1 ? ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYI"].ToString() + fileName + ".pdf" : ConfigurationManager.AppSettings["DROP_ORDER_PDF_PMGSYII"].ToString() + fileName + ".pdf";
                string filePath = Convert.ToInt32(rptParams[3]) == 1 ? ConfigurationManager.AppSettings["DROP_REQUEST_PDF_PMGSYI"].ToString() + fileName : Convert.ToInt32(rptParams[3]) == 2 ? ConfigurationManager.AppSettings["DROP_REQUEST_PDF_PMGSYII"].ToString() + fileName : Convert.ToInt32(rptParams[3]) == 3 ? ConfigurationManager.AppSettings["DROP_REQUEST_PDF_RCPLWE"].ToString() + fileName : ConfigurationManager.AppSettings["DROP_REQUEST_PDF_PMGSYIII"].ToString() + fileName;
                System.IO.File.WriteAllBytes(filePath, bytes);
                //  return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GenerateDropOrderFile()");
                //  return false;

            }
            //finally
            //{
            //    //if (dbContext != null)
            //    //{
            //    //    dbContext.Dispose();
            //    //}
            //}

        }

        public bool IsDropOrderGenerated(DropOrderViewModel model)
        {
            dbContext = new PMGSYEntities();

            try
            {
                //if (dbContext.IMS_DROPPED_PROJECTS_PDF.Any(m => m.IMS_BATCH == model.BatchCode && m.IMS_COLLABORATION == model.StreamCode && m.IMS_YEAR == model.YearCode && m.MAST_STATE_CODE == model.StateCode))
                if (dbContext.IMS_DROPPED_PROJECTS_PDF.Any(m => m.DROP_REQ_CODE == model.RequestCode))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "IsDropOrderGenerated()");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetDropOrderListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int batch, int scheme, string proposalType, String Status)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var DroppedRecords = (from IMS in dbContext.IMS_SANCTIONED_PROJECTS
                                      join DP in dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS on IMS.IMS_PR_ROAD_CODE equals DP.IMS_PR_ROAD_CODE
                                      join DR in dbContext.IMS_PROPOSAL_DROP_REQUEST on DP.DROP_REQ_CODE equals DR.DROP_REQ_CODE
                                      where IMS.MAST_STATE_CODE == stateCode && IMS.IMS_YEAR == year && IMS.MAST_PMGSY_SCHEME == scheme
                                      select new
                                      {
                                          IMS_PROPOSAL_TYPE = IMS.IMS_PROPOSAL_TYPE,
                                          IMS_PR_ROAD_CODE = DP.IMS_PR_ROAD_CODE,
                                          STATECODE = IMS.MAST_STATE_CODE,
                                          YEAR = IMS.IMS_YEAR,
                                          BATCH = IMS.IMS_BATCH,
                                          STREAMCODE = IMS.MASTER_FUNDING_AGENCY.MAST_FUNDING_AGENCY_CODE,
                                          COLLABORATION = IMS.MASTER_FUNDING_AGENCY.MAST_FUNDING_AGENCY_NAME,
                                          SCHEME = IMS.MAST_PMGSY_SCHEME,
                                          REQDATE = DR.REQUEST_DATE_TIME,
                                          REQCODE = DR.DROP_REQ_CODE,
                                          ISDROPPED = DP.MORD_APPROVED,
                                          APPROVEDATE = DP.APPROVED_DATE_TIME
                                      }).GroupBy(g => g.REQCODE).ToList();
                totalRecords = DroppedRecords.Count();
                List<DropProposalModel> lstdropRecods = new List<DropProposalModel>();
                foreach (var item in DroppedRecords)
                {
                    int key = item.Key;
                    int stcode = item.Select(p => p.STATECODE).FirstOrDefault();
                    int reqCode = item.Select(s => s.REQCODE).FirstOrDefault();
                    string stname = dbContext.MASTER_STATE.Where(s => s.MAST_STATE_CODE == stcode).FirstOrDefault().MAST_STATE_NAME;
                    DropProposalModel model = new DropProposalModel();
                    model.State = stname; //stname;
                    model.StateCode = stcode;
                    model.Year = item.Select(s => s.YEAR).FirstOrDefault();
                    model.Batch = item.Select(s => s.BATCH).FirstOrDefault();
                    model.Collabortion = item.Select(s => s.COLLABORATION).FirstOrDefault();
                    model.Stream = item.Select(s => s.STREAMCODE).FirstOrDefault();
                    model.Scheme = item.Select(s => s.SCHEME).FirstOrDefault();
                    model.Count = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(p => p.DROP_REQ_CODE == reqCode).Count();
                    model.ReqDate = item.Select(s => s.REQDATE).FirstOrDefault();
                    model.ReqCode = item.Select(m => m.REQCODE).FirstOrDefault();
                    model.Isdropped = item.Select(s => s.ISDROPPED).FirstOrDefault();
                    model.ApproveDate = item.Select(s => s.APPROVEDATE).FirstOrDefault();
                    model.ImsRoadCode = item.Select(s => s.IMS_PR_ROAD_CODE).FirstOrDefault();
                    model.ProposalType = item.Select(s => s.IMS_PROPOSAL_TYPE).FirstOrDefault();
                    lstdropRecods.Add(model);
                }
                if (proposalType != "%" && Status != "%")
                {
                    lstdropRecods = lstdropRecods.Where(s => s.Isdropped == Status && s.ProposalType == proposalType).ToList();
                }
                if (proposalType != "%")
                {
                    lstdropRecods = lstdropRecods.Where(s => s.ProposalType == proposalType).ToList();
                }
                if (Status != "%")
                {
                    lstdropRecods = lstdropRecods.Where(s => s.Isdropped == Status).ToList();
                }
                if (stream != 0 && batch != 0)
                {
                    lstdropRecods = lstdropRecods.Where(s => s.Stream == stream && s.Batch == batch).ToList();
                }
                if (stream != 0)
                {
                    lstdropRecods = lstdropRecods.Where(s => s.Stream == stream).ToList();
                }
                if (batch != 0)
                {
                    lstdropRecods = lstdropRecods.Where(s => s.Batch == batch).ToList();
                }

                if (sidx.Trim() != String.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "REQDATE":
                                lstdropRecods = lstdropRecods.OrderBy(s => s.ReqDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstdropRecods = lstdropRecods.OrderBy(s => s.ReqDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "REQDATE":
                                lstdropRecods = lstdropRecods.OrderByDescending(s => s.ReqDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstdropRecods = lstdropRecods.OrderByDescending(s => s.ReqDate).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                return lstdropRecods.Select(m => new
                {
                    cell = new[]
                   {
                     m.State,
                     m.Year +"-"+(m.Year+1),
                     "Batch-"+ m.Batch.ToString(),
                     m.Collabortion,
                     "PMGSY-"+m.Scheme,
                     m.Count.ToString(),
                     m.ReqDate.ToString("dd/MM/yyyy"),
                    // m.Isdropped=="Y"?"Yes":"No",
                     //m.ApproveDate == null ? "-" : Convert.ToDateTime(m.ApproveDate).ToString("dd/MM/yyyy"),
                     "<a href='#' title='View Details'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDroppedProposelDetails(\"" + m.ReqCode+ "\"); return false;'>Show Details</a>",
                     //dbContext.IMS_DROPPED_PROJECTS_PDF.Any(r=>r.DROP_REQ_CODE== m.ReqCode)==false?"-":"<a href='/Proposal/GetDropOrder?id="+m.StateCode +"$"+m.Batch+"$"+m.Collabortion+"$"+m.Year+"$"+m.Scheme+"$"+dbContext.IMS_DROPPED_PROJECTS_PDF.Where(s=>s.DROP_REQ_CODE==m.ReqCode).FirstOrDefault().IMS_PDF_NAME+"' title='Click here to view Sanction Order Details' class='ui-icon ui-icon-zoomin ui-align-center' target=_blank></a>"
                      // dbContext.IMS_DROPPED_PROJECTS_PDF.Any(r=>r.DROP_REQ_CODE== m.ReqCode)==false?"-":"<a href='/Proposal/GetDropOrder?id="+m.Scheme+"$"+dbContext.IMS_DROPPED_PROJECTS_PDF.Where(s=>s.DROP_REQ_CODE==m.ReqCode).FirstOrDefault().IMS_PDF_NAME+"' title='Click here to view Sanction Order Details' class='ui-icon ui-icon-zoomin ui-align-center' target=_blank></a>"                                                                                                                    
                    dbContext.IMS_DROPPED_PROJECTS_PDF.Any(r=>r.DROP_REQ_CODE== m.ReqCode)==false?"-":"<a href='#' title='View Orders' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetailDroppedProposelDetails(\"" + m.ReqCode+ "\"); return false;'>Show Details</a>",
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetDropOrderListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetDetailDropOrderListBAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int RequestCode, int scheme)
        {
            dbContext = new PMGSYEntities();
            try
            {

                var DroppedDetailRecords = (from PDF in dbContext.IMS_DROPPED_PROJECTS_PDF
                                            where PDF.DROP_REQ_CODE == RequestCode
                                            && PDF.DROP_ORDER_BY == "M"
                                            select new
                                            {
                                                ORDERNO = PDF.IMS_ORDER_NUMBER,
                                                ORDERDATE = PDF.IMS_ORDER_DATE,
                                                PDFCODE = PDF.DROP_PROJ_PDF_CODE
                                            }).ToList();


                List<DropOrderDetailModel> lstdropRecods = new List<DropOrderDetailModel>();

                foreach (var item in DroppedDetailRecords)
                {
                    DropOrderDetailModel DetailModel = new DropOrderDetailModel();
                    DetailModel.OrderDate = item.ORDERDATE.Value;
                    DetailModel.OrderNumber = item.ORDERNO;
                    DetailModel.ReqCode = RequestCode;
                    DetailModel.scheme = scheme;
                    DetailModel.pdfCode = item.PDFCODE;
                    DetailModel.Count = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(s => s.DROP_PROJ_PDF_CODE == item.PDFCODE).Count();
                    lstdropRecods.Add(DetailModel);
                }

                if (sidx.Trim() != String.Empty)
                {

                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "OrderNo":
                                lstdropRecods = lstdropRecods.OrderBy(s => s.OrderNumber).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstdropRecods = lstdropRecods.OrderBy(s => s.OrderNumber).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "OrderNo":
                                lstdropRecods = lstdropRecods.OrderByDescending(s => s.OrderNumber).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                            default:
                                lstdropRecods = lstdropRecods.OrderByDescending(s => s.OrderNumber).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                                break;
                        }
                    }
                }
                totalRecords = lstdropRecods.Count;
                return lstdropRecods.Select(m => new
                {
                    cell = new[]
                   {
                     m.Count.ToString(),
                     m.OrderNumber,
                     m.OrderDate.ToString("dd/MM/yyyy"),
                    Convert.ToDateTime( dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(s=>s.DROP_PROJ_PDF_CODE==m.pdfCode).FirstOrDefault().APPROVED_DATE_TIME).ToString("dd/MM/yyyy"),
                     dbContext.IMS_DROPPED_PROJECTS_PDF.Any(r=>r.DROP_REQ_CODE== m.ReqCode)==false?"-":"<a href='/Proposal/GetDropOrder?id="+m.scheme+"$"+dbContext.IMS_DROPPED_PROJECTS_PDF.Where(s=>s.DROP_REQ_CODE==m.ReqCode && s.DROP_PROJ_PDF_CODE==m.pdfCode).FirstOrDefault().IMS_PDF_NAME+"' title='Click here to view Drop Order Details' class='ui-icon ui-icon-zoomin ui-align-center' target=_blank></a>"                                                                                                                    
                   }
                }).ToArray();


            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetDropOrderListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region MATRIX PARAMETERS

        public bool checkIsStateEntered()
        {
            bool status = false;
            try
            {
                dbContext = new Models.PMGSYEntities();
                if (dbContext.MASTER_MATRIX.Where(x => x.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Any())
                {
                    status = true;
                }
                return status;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "checkIsStateEntered");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// List Matrix Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListMatrixParametersDetailsDAL(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int serialNumber = 0;
                var matrixParams = (from item in dbContext.MASTER_GROWTH_SCORE
                                    orderby item.MAST_MATRIX_NO
                                    select new
                                    {
                                        item.MAST_MATRIX_NO,
                                        item.MAST_SCORE_NAME,
                                        item.MAST_SCORE_TYPE,
                                        item.MAST_PARENT_ID,
                                        item.MAST_SCORE_VALUE,
                                        item.MAST_SCORE_ID,
                                    }).ToList();
                totalRecords = matrixParams.Count();
                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_MATRIX_NO":
                                matrixParams = matrixParams.OrderBy(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                matrixParams = matrixParams.OrderBy(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_MATRIX_NO":
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                return matrixParams.Select(Details => new
                {
                    id = ++serialNumber,
                    cell = new[]{                                        
                      Details.MAST_MATRIX_NO,
                      Details.MAST_SCORE_NAME,
                      Details.MAST_PARENT_ID == 0 ? (Details.MAST_SCORE_TYPE == "C" ? "Cumulative" : "Highest") : "-",
                      //dbContext.MASTER_MATRIX.Where(x=>x.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Any() ? Details.MAST_SCORE_VALUE.ToString() : ((Details.MAST_PARENT_ID == 0) ? "<span id='"+Details.MAST_MATRIX_NO.Substring(0,1)+"parent" +"' >"+ Details.MAST_SCORE_VALUE.ToString()+"</span>" : "<input type='textbox' id='"+ Details.MAST_MATRIX_NO.ToString() +"' class='"+ Details.MAST_MATRIX_NO.Substring(0,1) +"' onkeypress='return (event.charCode == 8 || event.charCode == 0) ? null : (event.charCode >= 48 && event.charCode <= 57) || (event.charCode == 110)' value='"+ Details.MAST_SCORE_VALUE.ToString() +"' maxlength='5'>"),
                      dbContext.MASTER_MATRIX.Where(x=>x.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Any() ? Details.MAST_SCORE_VALUE.ToString() : ((Details.MAST_PARENT_ID == 0) ? "<span id='"+Details.MAST_MATRIX_NO.Substring(0,1)+"parent" +"' >"+ Details.MAST_SCORE_VALUE.ToString()+"</span>" : "<input type='textbox' id='"+ Details.MAST_MATRIX_NO.ToString() +"' class='"+ Details.MAST_MATRIX_NO.Substring(0,1) +"'onkeypress='return isNumberKey(event)' value='"+ Details.MAST_SCORE_VALUE.ToString() +"' maxlength='5'>"),
                      Details.MAST_SCORE_ID.ToString(),//serialNumber.ToString(), 
                      //URLEncrypt.EncryptParameters1(new String[]{"MatrixCode="+Details.MAST_MATRIX_ID.ToString()}),
                    //URLEncrypt.EncryptParameters1(new String[]{"MatrixCode="+Details.MAST_MATRIX_ID.ToString()}),
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ListMatrixParametersDetailsDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// List Matrix Weightage Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListMatrixParametersWeightageDetailsDAL(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var matrixParams = (from item in dbContext.MATRIX_HEAD_WEIGHTAGE
                                    where item.MASTER_MATRIX.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                                    orderby item.MASTER_GROWTH_SCORE.MAST_MATRIX_NO
                                    select new
                                    {
                                        item.MAST_MATRIX_ID,
                                        MAST_MATRIX_NO = item.MASTER_GROWTH_SCORE.MAST_MATRIX_NO,
                                        item.MASTER_GROWTH_SCORE.MAST_SCORE_NAME,
                                        item.MASTER_GROWTH_SCORE.MAST_PARENT_ID,
                                        item.MASTER_GROWTH_SCORE.MAST_SCORE_TYPE,
                                        item.WEIGHTAGE,
                                    }).ToList();
                totalRecords = matrixParams.Count();
                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_MATRIX_NO":
                                matrixParams = matrixParams.OrderBy(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;

                            default:
                                matrixParams = matrixParams.OrderBy(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_MATRIX_NO":
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_MATRIX_NO).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                return matrixParams.Select(Details => new
                {
                    id = Details.MAST_MATRIX_ID,
                    cell = new[]{                                        
                      Details.MAST_MATRIX_ID.ToString(),                    
                      Details.MAST_MATRIX_NO,
                      Details.MAST_SCORE_NAME,
                      //Details.MAST_PARENT_ID.ToString(),
                      Details.MAST_PARENT_ID == 0 ? (Details.MAST_SCORE_TYPE == "C" ? "Cumulative" : "Highest") : "-",
                      Details.WEIGHTAGE.ToString(),
                    //URLEncrypt.EncryptParameters1(new String[]{"MatrixCode="+Details.MAST_MATRIX_ID.ToString()}),
                    //URLEncrypt.EncryptParameters1(new String[]{"MatrixCode="+Details.MAST_MATRIX_ID.ToString()}),
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ListMatrixParametersWeightageDetailsDAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// saves the Matrix Details
        /// </summary>
        /// <param name="model"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool AddMatrixDetailsDAL(string[] MatrixParams, ref string message)
        {
            int mast_matrix_id = 0;
            int mast_matrix_assg_id = 0, matrix_weightage_id = 0;
            decimal weightage = 0;
            string[] item = null;
            dbContext = new PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    ///Insert Values in MASTER_MATRIX
                    MASTER_MATRIX master_matrix = new MASTER_MATRIX();
                    mast_matrix_assg_id = dbContext.MASTER_MATRIX.Any() ? dbContext.MASTER_MATRIX.Max(x => x.MAST_MATRIX_ASSG_ID) + 1 : 1;
                    master_matrix.MAST_MATRIX_ASSG_ID = mast_matrix_assg_id;
                    master_matrix.MATRIX_CODE = 1; //1 For Noramal, 2 for Special Area
                    master_matrix.MAST_STATE_CODE = PMGSYSession.Current.StateCode;
                    dbContext.MASTER_MATRIX.Add(master_matrix);
                    //dbContext.SaveChanges();
                    for (int i = 0; i < MatrixParams.Length; i++)
                    {
                        item = MatrixParams[i].Split(',');
                        mast_matrix_id = Convert.ToInt32(item[0]);
                        weightage = Convert.ToDecimal(item[2]);

                        ///Update Parameters Values in MASTER_MATRIX_PARAMETERS
                        //MASTER_MATRIX_PARAMETERS master_matrix_parameters = dbContext.MASTER_MATRIX_PARAMETERS.Where(x=>x.MAST_MATRIX_ID == mast_matrix_id).FirstOrDefault();
                        //master_matrix_parameters.MAST_MATRIX_WEIGHT = Convert.ToInt32(item[2]);
                        //dbContext.Entry(master_matrix_parameters).State = EntityState.Modified;
                        //dbContext.SaveChanges();

                        ///Insert Values in MATRIX_HEAD_WEIGHTAGE
                        MATRIX_HEAD_WEIGHTAGE matrix_head_weightage = new MATRIX_HEAD_WEIGHTAGE();

                        if (i == 0)
                        {
                            matrix_weightage_id = dbContext.MATRIX_HEAD_WEIGHTAGE.Any() ? dbContext.MATRIX_HEAD_WEIGHTAGE.Max(x => x.MATRIX_WEIGHTAGE_ID) + 1 : 1;
                        }
                        else
                        {
                            matrix_weightage_id++;
                        }

                        matrix_head_weightage.MATRIX_WEIGHTAGE_ID = matrix_weightage_id;
                        matrix_head_weightage.MAST_MATRIX_ID = mast_matrix_id;
                        matrix_head_weightage.WEIGHTAGE = weightage;
                        matrix_head_weightage.WEIGHTAGE_TYPE = 1; //1=Score of the Highest, 2= Commulative Score
                        matrix_head_weightage.Popultion_Condition = null;
                        matrix_head_weightage.MAST_MATRIX_ASSG_ID = mast_matrix_assg_id;
                        dbContext.MATRIX_HEAD_WEIGHTAGE.Add(matrix_head_weightage);

                    }
                    dbContext.SaveChanges();
                    message = "Matrix details added successfully.";
                    ts.Complete();
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "AddMatrixDetailsDAL()");
                message = "Error occurred while processing your request.";
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Boolean SaveDistrictMappinDetailsDAL(DistrictMappingModel model, out String messge)
        {
            dbContext = new PMGSYEntities();
            int matrix_district_mapping_id = 0, i = 0;
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    String[] DistCodes = model.hiddenDistrictCode.Split(',');
                    Int32 MatrixId = dbContext.MASTER_MATRIX.Where(s => s.MAST_STATE_CODE == PMGSYSession.Current.StateCode).FirstOrDefault().MAST_MATRIX_ASSG_ID;
                    foreach (var item in DistCodes)
                    {
                        MATRIX_DISTRICT_MAPPING distModel = new MATRIX_DISTRICT_MAPPING();
                        if (i == 0)
                        {
                            matrix_district_mapping_id = dbContext.MATRIX_DISTRICT_MAPPING.Any() == false ? 1 : dbContext.MATRIX_DISTRICT_MAPPING.Max(x => x.MATRIX_DISTRICT_MAPPING_ID) + 1;
                        }
                        else
                        {
                            matrix_district_mapping_id++;
                        }
                        distModel.MATRIX_DISTRICT_MAPPING_ID = matrix_district_mapping_id;
                        distModel.MAST_STATE_CODE = PMGSYSession.Current.StateCode;
                        distModel.MAST_DISTRICT_CODE = Convert.ToInt32(item);
                        distModel.MAST_MATRIX_ASSG_ID = MatrixId;
                        dbContext.MATRIX_DISTRICT_MAPPING.Add(distModel);
                        i++;
                    }
                    dbContext.SaveChanges();
                    messge = "District mapped successfully";
                    ts.Complete();
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "SaveDistrictMappinDetailsDAL()");
                messge = "Error occured while processing your request.";
                return false;
            }
        }

        public List<SelectListItem> PopulateDistrict(int StateCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                List<int> MappedDist = dbContext.MATRIX_DISTRICT_MAPPING.Where(s => s.MAST_STATE_CODE == StateCode).Select(x => x.MAST_DISTRICT_CODE).ToList();
                List<SelectListItem> Distlst = new SelectList(dbContext.MASTER_DISTRICT.Where(s => s.MAST_STATE_CODE == StateCode && !(MappedDist).Contains(s.MAST_DISTRICT_CODE)).ToList(), "MAST_DISTRICT_CODE", "MAST_DISTRICT_NAME").ToList<SelectListItem>();
                return Distlst;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "PopulateDistrict()");
                return null;
            }
        }

        /// <summary>
        /// List Mapped Districts Details
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public Array ListMappedDistrictDetailsDAL(int? page, int? rows, string sidx, string sord, out long totalRecords)
        {
            dbContext = new PMGSYEntities();
            try
            {
                var matrixParams = (from item in dbContext.MATRIX_DISTRICT_MAPPING
                                    where item.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                                    select new
                                    {
                                        item.MAST_DISTRICT_CODE,
                                        item.MATRIX_DISTRICT_MAPPING_ID,
                                        item.MASTER_DISTRICT.MAST_DISTRICT_NAME,
                                    }).ToList();
                totalRecords = matrixParams.Count();
                if (sidx.Trim() != String.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        switch (sidx)
                        {
                            case "MAST_DISTRICT_CODE":
                                matrixParams = matrixParams.OrderBy(x => x.MAST_DISTRICT_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                matrixParams = matrixParams.OrderBy(x => x.MAST_DISTRICT_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                    else
                    {
                        switch (sidx)
                        {
                            case "MAST_DISTRICT_CODE":
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_DISTRICT_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                            default:
                                matrixParams = matrixParams.OrderByDescending(x => x.MAST_DISTRICT_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows)).ToList();
                                break;
                        }
                    }
                }
                return matrixParams.Select(Details => new
                {
                    id = Details.MAST_DISTRICT_CODE,
                    cell = new[]{                                        
                      Details.MAST_DISTRICT_CODE.ToString(),          
                      Details.MATRIX_DISTRICT_MAPPING_ID.ToString(),
                      Details.MAST_DISTRICT_NAME,
                      //"<a href='#' title='Click here to delete Mapped District Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeleteMappedDistrictDetails('" + URLEncrypt.EncryptParameters1(new string[]{"DistrictMappingId=" + Details.MATRIX_DISTRICT_MAPPING_ID.ToString().Trim() }) +"'); return false;'>Delete Mapped District Details</a>",
                      "<a href='#' title='Click here to delete Mapped District Details' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteMappedDistrictDetails(\""+ URLEncrypt.EncryptParameters1(new string[] {"DistrictMappingId=" +  Details.MATRIX_DISTRICT_MAPPING_ID.ToString().Trim()  })  +"\"); return false;'>Delete Mapped District Details</a>" 
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ListMappedDistrictDetailsDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        /// <summary>
        /// Deleting mapped Districts
        /// </summary>
        /// <param name="habitationCode">habitation id</param>
        /// <param name="roadCode">existing road code</param>
        /// <returns></returns>
        public bool DeleteMappedDistrictsDAL(int districtId, out string message)
        {
            using (TransactionScope ts = new TransactionScope())
            {
                try
                {
                    dbContext = new PMGSYEntities();
                    MATRIX_DISTRICT_MAPPING matrix_district_mapping = dbContext.MATRIX_DISTRICT_MAPPING.Where(m => m.MATRIX_DISTRICT_MAPPING_ID == districtId).FirstOrDefault();
                    dbContext.MATRIX_DISTRICT_MAPPING.Remove(matrix_district_mapping);
                    dbContext.SaveChanges();
                    message = String.Empty;
                    ts.Complete();
                    return true;
                }
                catch (DbEntityValidationException ex)
                {
                    ts.Dispose();
                    ErrorLog.LogError(ex, "DeleteMappedDistrictsDAL().DbEntityValidationException");
                    message = String.Empty;
                    return false;
                }
                catch (Exception ex)
                {
                    ts.Dispose();
                    ErrorLog.LogError(ex, "DeleteMappedDistrictsDAL().Exception");
                    message = String.Empty;
                    return false;
                }
                finally
                {
                    dbContext.Dispose();
                }
            }
        }

        #endregion

        #region LWE Listing
        public Array GetMordProposalsLWEDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_YEAR, int MAST_STATE_CODE, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS, int IMS_AGENCY, string IMS_UPGRADE_CONNECT, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();

                string MRDStatus = string.Empty;
                string STAStatus = string.Empty;
                string PIUStatus = string.Empty;

                switch (IMS_PROPOSAL_STATUS)
                {
                    case "N":
                        MRDStatus = "N";
                        STAStatus = "Y";
                        break;
                    case "Y":
                        MRDStatus = "Y";
                        STAStatus = "%";
                        break;
                    case "U":
                        MRDStatus = "U";
                        STAStatus = "%";
                        break;
                    case "R":
                        MRDStatus = "R";
                        STAStatus = "%";
                        break;
                    case "D":
                        MRDStatus = "D";
                        STAStatus = "%";
                        break;
                    case "S":
                        MRDStatus = "N";
                        STAStatus = "N";
                        PIUStatus = "D";
                        break;
                    case "A":
                        MRDStatus = "%";
                        STAStatus = "%";
                        break;
                    default:
                        MRDStatus = "%";
                        STAStatus = "%";
                        break;
                }
                //if (IMS_PROPOSAL_STATUS == "A")
                //{
                //    IMS_PROPOSAL_STATUS = "%";
                //}
                if (PMGSYSession.Current.RoleCode == 36 || PMGSYSession.Current.RoleCode == 47)
                {
                    var queryAgency = (from ma in dbContext.MASTER_AGENCY
                                       join md in dbContext.ADMIN_DEPARTMENT on ma.MAST_AGENCY_CODE equals md.MAST_AGENCY_CODE
                                       where md.MAST_STATE_CODE == PMGSYSession.Current.StateCode &&
                                       md.MAST_ND_TYPE == "S" &&
                                       md.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode
                                       select new
                                       {
                                           ma.MAST_AGENCY_CODE
                                       }).FirstOrDefault();
                    IMS_AGENCY = queryAgency == null ? 0 : queryAgency.MAST_AGENCY_CODE;
                }
                var listProposals = dbContext.USP_GET_PROPOSAL_LIST_LWE(1, MAST_STATE_CODE, (MAST_DISTRICT_ID < 0 ? 0 : MAST_DISTRICT_ID), 0, (IMS_YEAR < 0 ? 0 : IMS_YEAR), (IMS_BATCH < 0 ? 0 : IMS_BATCH), (IMS_STREAMS < 0 ? 0 : IMS_STREAMS), IMS_AGENCY, 0, 0, "%", "%", (PIUStatus == string.Empty ? "%" : PIUStatus), "%", STAStatus, MRDStatus, "P", ((IMS_UPGRADE_CONNECT == "0" || IMS_UPGRADE_CONNECT == null) ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList();
                IQueryable<USP_GET_PROPOSAL_LIST_LWE_Result> query = listProposals.AsQueryable<USP_GET_PROPOSAL_LIST_LWE_Result>();
                totalRecords = listProposals.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = listProposals.Sum(m => m.TOTAL_COST).HasValue ? listProposals.Sum(m => m.TOTAL_COST).Value : 0;//listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = listProposals.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = listProposals.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = listProposals.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = listProposals.Sum(m => m.POP999);
                colTotal.TOT_HABS = listProposals.Sum(m => m.TOTAL_HABS).HasValue ? listProposals.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = listProposals.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = listProposals.Sum(m => m.MAINT_AMT).HasValue ? listProposals.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = listProposals.Sum(m => m.ROAD_LENGTH).HasValue ? listProposals.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = listProposals.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = listProposals.Sum(m => m.ROAD_STATE).HasValue ? listProposals.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = listProposals.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = listProposals.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = listProposals.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = listProposals.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    //(propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT + propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    //propDetails.STA_SANCTIONED_BY.ToString(),
                                    //propDetails.STA_SANCTIONED_DATE.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    //propDetails.PTA_SANCTIONED_BY.ToString(),
                                    //propDetails.PTA_SANCTIONED_DATE.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>"
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetMordProposalsLWEDAL()");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <summary>
        /// Populate List of LSB Proposals for MoRD 
        /// </summary>
        /// <param name="formCollection"></param>
        /// <returns></returns>
        public Array GetMordLSBProposalsLWEDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_YEAR, int MAST_STATE_CODE, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS, int IMS_AGENCY, string IMS_UPGRADE_CONNECT, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();

                string MRDStatus = string.Empty;
                string STAStatus = string.Empty;

                switch (IMS_PROPOSAL_STATUS)
                {
                    case "N":
                        MRDStatus = "N";
                        STAStatus = "Y";
                        break;
                    case "Y":
                        MRDStatus = "Y";
                        STAStatus = "%";
                        break;
                    case "U":
                        MRDStatus = "U";
                        STAStatus = "%";
                        break;
                    case "R":
                        MRDStatus = "R";
                        STAStatus = "%";
                        break;
                    case "D":
                        MRDStatus = "D";
                        STAStatus = "%";
                        break;
                    case "S":
                        MRDStatus = "N";
                        STAStatus = "N";
                        break;
                    case "A":
                        MRDStatus = "%";
                        STAStatus = "Y";
                        break;
                    default:
                        MRDStatus = "%";
                        STAStatus = "%";
                        break;
                }

                if (PMGSYSession.Current.RoleCode == 36 || PMGSYSession.Current.RoleCode == 47)
                {
                    var queryAgency = (from ma in dbContext.MASTER_AGENCY
                                       join md in dbContext.ADMIN_DEPARTMENT on ma.MAST_AGENCY_CODE equals md.MAST_AGENCY_CODE
                                       where md.MAST_STATE_CODE == PMGSYSession.Current.StateCode &&
                                       md.MAST_ND_TYPE == "S" &&
                                       md.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode
                                       select new
                                       {
                                           ma.MAST_AGENCY_CODE
                                       }).FirstOrDefault();
                    IMS_AGENCY = queryAgency == null ? 0 : queryAgency.MAST_AGENCY_CODE;
                }
                var listProposals = dbContext.USP_GET_PROPOSAL_LIST_LWE(1, MAST_STATE_CODE, (MAST_DISTRICT_ID < 0 ? 0 : MAST_DISTRICT_ID), 0, (IMS_YEAR < 0 ? 0 : IMS_YEAR), (IMS_BATCH < 0 ? 0 : IMS_BATCH), (IMS_STREAMS < 0 ? 0 : IMS_STREAMS), IMS_AGENCY, 0, 0, "%", "%", "%", "%", STAStatus, MRDStatus, "L", ((IMS_UPGRADE_CONNECT == "0" || IMS_UPGRADE_CONNECT == null) ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList();
                IQueryable<USP_GET_PROPOSAL_LIST_LWE_Result> query = listProposals.AsQueryable<USP_GET_PROPOSAL_LIST_LWE_Result>();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = listProposals.Sum(m => m.TOTAL_COST).HasValue ? listProposals.Sum(m => m.TOTAL_COST).Value : 0; ;//listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = listProposals.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = listProposals.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = listProposals.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = listProposals.Sum(m => m.POP999);
                colTotal.TOT_HABS = listProposals.Sum(m => m.TOTAL_HABS).HasValue ? listProposals.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = listProposals.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = listProposals.Sum(m => m.MAINT_AMT).HasValue ? listProposals.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = listProposals.Sum(m => m.BRIDGE_AMT).Value;
                colTotal.TOT_PAV_LENGTH = listProposals.Sum(m => m.ROAD_LENGTH).HasValue ? listProposals.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = listProposals.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = listProposals.Sum(m => m.BRIDGE_STATE).HasValue ? (decimal)listProposals.Sum(m => m.BRIDGE_STATE) : 0;

                colTotal.STATE_SHARE_COST = listProposals.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = listProposals.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = listProposals.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = listProposals.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;


                totalRecords = listProposals.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }
                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),             
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.IMS_ROAD_NAME.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.BRIDGE_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.BRIDGE_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.BRIDGE_AMT + propDetails.BRIDGE_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowLSBDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>"
                    }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ProposalsDAL.GetMordLSBProposalsDAL");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public Array GetProposalsForSRRDALWEDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                //List<pr_get_proposals_for_srrda_Result> itemList = new List<pr_get_proposals_for_srrda_Result>();
                List<USP_GET_PROPOSAL_LIST_LWE_Result> itemList = new List<USP_GET_PROPOSAL_LIST_LWE_Result>();
                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "N";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "Y";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }

                //itemList = dbContext.pr_get_proposals_for_srrda(MAST_STATE_CODE, MAST_DISTRICT_CODE, PMGSYSession.Current.AdminNdCode, IMS_YEAR, IMS_BATCH, IMS_STREAMS, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), STAStatus, PTAStatus, MRDStatus, Status, PMGSYSession.Current.PMGSYScheme).ToList<pr_get_proposals_for_srrda_Result>();

                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();
                ///Changes for RCPLWE
                itemList = dbContext.USP_GET_PROPOSAL_LIST_LWE(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_LWE_Result>();

                totalRecords = itemList.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = itemList.Sum(m => m.TOTAL_COST).HasValue ? itemList.Sum(m => m.TOTAL_COST).Value : 0; ;//itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = itemList.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = itemList.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = itemList.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = itemList.Sum(m => m.POP999);
                colTotal.TOT_HABS = itemList.Sum(m => m.TOTAL_HABS).HasValue ? itemList.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = itemList.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = itemList.Sum(m => m.MAINT_AMT).HasValue ? itemList.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = itemList.Sum(m => m.ROAD_LENGTH).HasValue ? itemList.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = itemList.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = itemList.Sum(m => m.ROAD_STATE).HasValue ? itemList.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = itemList.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = itemList.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = itemList.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = itemList.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).ToList();

                return itemList.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {     
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    //(propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT + propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    //propDetails.STA_SANCTIONED_BY.ToString(),
                                    //propDetails.STA_SANCTIONED_DATE.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    //propDetails.PTA_SANCTIONED_BY.ToString(),
                                    //propDetails.PTA_SANCTIONED_DATE.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"  + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>",
                                    "<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteLWE(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>Delete</a>" 
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ProposalDAL.GetProposalsForSRRDALWEDAL()");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        /// <returns></returns>
        public Array GetLSBProposalsForSRRDALWEDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, out ProposalColumnsTotal model)
        {
            dbContext = new Models.PMGSYEntities();

            try
            {
                dbContext = new Models.PMGSYEntities();
                List<USP_GET_PROPOSAL_LIST_LWE_Result> itemList = new List<USP_GET_PROPOSAL_LIST_LWE_Result>();

                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "N";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "Y";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }

                //itemList = dbContext.pr_get_proposals_for_srrda(MAST_STATE_CODE, MAST_DISTRICT_CODE, PMGSYSession.Current.AdminNdCode, IMS_YEAR, IMS_BATCH, IMS_STREAMS, "L",(IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT),STAStatus,PTAStatus,MRDStatus,Status, PMGSYSession.Current.PMGSYScheme).ToList<pr_get_proposals_for_srrda_Result>();
                //totalRecords = itemList.Count();
                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();
                ///Changes for RCPLWE
                //itemList = dbContext.USP_GET_PROPOSAL_LIST(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), (PMGSYSession.Current.PMGSYScheme == 3 ? 0 : agencyCode), 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "L", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), (PMGSYSession.Current.PMGSYScheme == 3 ? (byte)1 : PMGSYSession.Current.PMGSYScheme), (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                itemList = dbContext.USP_GET_PROPOSAL_LIST_LWE(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "L", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_LWE_Result>();

                totalRecords = itemList.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = itemList.Sum(m => m.TOTAL_COST).HasValue ? itemList.Sum(m => m.TOTAL_COST).Value : 0; //itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = itemList.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = itemList.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = itemList.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = itemList.Sum(m => m.POP999);
                colTotal.TOT_HABS = itemList.Sum(m => m.TOTAL_HABS).HasValue ? itemList.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = itemList.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = itemList.Sum(m => m.MAINT_AMT).HasValue ? itemList.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = itemList.Sum(m => m.BRIDGE_AMT).Value;
                colTotal.TOT_PAV_LENGTH = itemList.Sum(m => m.ROAD_LENGTH).HasValue ? itemList.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = itemList.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = itemList.Sum(m => m.BRIDGE_STATE).HasValue ? (decimal)itemList.Sum(m => m.BRIDGE_STATE) : 0;//itemList.Sum(m => m.BRIDGE_STATE);

                colTotal.STATE_SHARE_COST = itemList.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = itemList.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = itemList.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = itemList.Sum(m => m.TOTAL_SHARE_COST);

                model = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).ToList();

                return itemList.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {    
                                    propDetails.MAST_DISTRICT_NAME.Trim(),
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID,
                                    propDetails.IMS_ROAD_NAME == null ? "NA" :  propDetails.IMS_ROAD_NAME,
                                    propDetails.ROAD_NAME == null ? "NA" : propDetails.ROAD_NAME,
                                    propDetails.ROAD_LENGTH.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.BRIDGE_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.BRIDGE_AMT),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.BRIDGE_AMT + propDetails.BRIDGE_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    //Added By Pankaj To display Higher Specification Amount 
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                     "<a href='#'title='Click here to view the proposal details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowLSBDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS  + "\"); return false;'>Show Details</a>",
                                     "<a href='#' class='ui-icon ui-icon-trash ui-align-center' onclick='DeleteLWE(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>Delete</a>" 
                   }
                }).ToArray();

            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ProposalDAL.GetLSBProposalsForSRRDALWEDAL");
                totalRecords = 0;
                model = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteLWEDAL(int ImsPrRoadCode)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTIONED_PROJECTS_LWE ims_sanctioned_projects_lwe = dbContext.IMS_SANCTIONED_PROJECTS_LWE.Where(m => m.IMS_PR_ROAD_CODE == ImsPrRoadCode).FirstOrDefault();

                if (ims_sanctioned_projects_lwe != null)
                {
                    ims_sanctioned_projects_lwe.ISLWE = "N";
                    ims_sanctioned_projects_lwe.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_projects_lwe.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_projects_lwe).State = EntityState.Modified;
                    dbContext.SaveChanges();
                }
                return true;
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "ProposalDAL.DeleteLWEDAL()");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion

        #region PMGSY3
        public List<SelectListItem> PopulateHabitationsPMGSY3DAL(int PLAN_CN_ROAD_CODE, int IMS_PR_ROAD_CODE)
        {
            dbContext = new PMGSYEntities();
            List<SelectListItem> HabList = new List<SelectListItem>();
            SelectListItem item = new SelectListItem();

            IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Find(Convert.ToInt32(IMS_PR_ROAD_CODE));

            var habitatioms = (from mh in dbContext.MASTER_HABITATIONS
                               join mhd in dbContext.MASTER_HABITATIONS_DETAILS
                               on mh.MAST_HAB_CODE equals mhd.MAST_HAB_CODE
                               join prh in dbContext.PLAN_ROAD_HABITATION_PMGSY3
                               on mh.MAST_HAB_CODE equals prh.MAST_HAB_CODE
                               where
                                   /*!(
                                     from ims in dbContext.IMS_SANCTIONED_PROJECTS
                                     join bh in dbContext.IMS_BENEFITED_HABS
                                     on ims.IMS_PR_ROAD_CODE equals bh.IMS_PR_ROAD_CODE
                                     where ims.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                     select bh.MAST_HAB_CODE
                                   ).Contains(prh.MAST_HAB_CODE)
                                   &&*/ prh.PLAN_CN_ROAD_CODE == PLAN_CN_ROAD_CODE
                               && mhd.MAST_YEAR == 2011//Changes for PMGSY3
                               select new
                               {
                                   Value = mh.MAST_HAB_CODE,
                                   Text = mh.MAST_HAB_NAME,
                                   Population = mhd.MAST_HAB_TOT_POP,
                                   Village = mh.MASTER_VILLAGE.MAST_VILLAGE_NAME,
                                   //Hab_Direct = prh.MAST_HAB_CODE_DIRECT,
                                   //Hab_Verified = prh.MAST_HAB_CODE_VERIFIED,
                               }).OrderBy(m => m.Text).Distinct();

          //  var habitatioms = habitatioms1.Distinct();

            foreach (var data in habitatioms)
            {
                item = new SelectListItem();
                item.Text = data.Text + "  ( Population :" + data.Population + " Village : " + data.Village + ")";
                item.Value = data.Value.ToString();
                HabList.Add(item);
            }

            return HabList;
        }

        public string SaveRoadProposalPMGSY3DAL(IMS_SANCTIONED_PROJECTS objProposal, ProposalViewModelPMGSY3 ims_sanctioned_projects)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                Int32? MaxID;
                using (TransactionScope ts = new TransactionScope())
                {
                    if (!dbContext.IMS_SANCTIONED_PROJECTS.Any())
                    {
                        MaxID = 0;
                    }
                    else
                    {
                        MaxID = (from c in dbContext.IMS_SANCTIONED_PROJECTS select (Int32?)c.IMS_PR_ROAD_CODE ?? 0).Max();
                    }

                    objProposal.IMS_PR_ROAD_CODE = Convert.ToInt32(MaxID) + 1;
                    objProposal.USERID = PMGSYSession.Current.UserId;
                    objProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    objProposal.IMS_UPGRADE_CONNECT = PMGSYSession.Current.PMGSYScheme == 2 ? "U" : objProposal.IMS_UPGRADE_CONNECT;

                    dbContext.IMS_SANCTIONED_PROJECTS.Add(objProposal);

                    // For Stage 2 Propsoals Copy the Habitation Details of Stage 1 to Stage 2
                    if (objProposal.IMS_STAGE_PHASE == "S2")
                    {
                        try
                        {
                            CopyHabitationDetails(Convert.ToInt32(objProposal.IMS_STAGED_ROAD_ID), objProposal.IMS_PR_ROAD_CODE);
                        }
                        catch (Exception ex)
                        {
                            //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                            ErrorLog.LogError(ex, "SaveRoadProposalDAL().StagePhase.S2");
                            return "Proposal Saved Successfully, But Habitation Details are not Mapped.";
                        }
                    }

                    IMS_COST_COMPONENT imsCostComponent = new IMS_COST_COMPONENT();
                    imsCostComponent.IMS_COMPONENT_ID = (dbContext.IMS_COST_COMPONENT.Any() ? dbContext.IMS_COST_COMPONENT.Max(z => z.IMS_COMPONENT_ID) : 0) + 1;
                    imsCostComponent.IMS_PR_ROAD_CODE = objProposal.IMS_PR_ROAD_CODE;
                    imsCostComponent.IMS_CLEARING = ims_sanctioned_projects.ImsClearing;
                    imsCostComponent.IMS_EXCAVATION = ims_sanctioned_projects.ImsExcavation;
                    imsCostComponent.IMS_FILLING = ims_sanctioned_projects.ImsFilling;
                    imsCostComponent.IMS_SUB_GRADE = ims_sanctioned_projects.ImsSubGrade;
                    imsCostComponent.IMS_SHOULDER = ims_sanctioned_projects.ImsShoulder;
                    imsCostComponent.IMS_GRANULAR_SUB_BASE = ims_sanctioned_projects.ImsGranularSubBase;
                    imsCostComponent.IMS_SOIL_AGGREGATE = ims_sanctioned_projects.ImsSoilAggregate;
                    imsCostComponent.IMS_WBM_GRADE_II = ims_sanctioned_projects.ImsWBMGradeII;
                    imsCostComponent.IMS_WBM_GRADE_III = ims_sanctioned_projects.ImsWBMGradeIII;
                    imsCostComponent.IMS_WMM = ims_sanctioned_projects.ImsWMM;
                    imsCostComponent.IMS_PRIME_COAT = ims_sanctioned_projects.ImsPrimeCoat;
                    imsCostComponent.IMS_TACK_COAT = ims_sanctioned_projects.ImsTackCoat;
                    imsCostComponent.IMS_BM_DBM = ims_sanctioned_projects.ImsBMDBM;
                    imsCostComponent.IMS_OGPC_SDBC_BC = ims_sanctioned_projects.ImsOGPC_SDBC_BC;
                    imsCostComponent.IMS_SEAL_COAT = ims_sanctioned_projects.ImsSealCoat;
                    imsCostComponent.IMS_SURFACE_DRESSING = ims_sanctioned_projects.ImsSurfaceDressing;
                    imsCostComponent.IMS_DRY_LEAN_CONCRETE = ims_sanctioned_projects.ImsDryLeanConcrete;
                    imsCostComponent.IMS_CONCRETE_PAVEMENT = ims_sanctioned_projects.ImsConcretePavement;

                    imsCostComponent.USERID = PMGSYSession.Current.UserId;
                    imsCostComponent.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.IMS_COST_COMPONENT.Add(imsCostComponent);

                    dbContext.SaveChanges();
                    ts.Complete();
                }
                return string.Empty;
            }
            catch (DbEntityValidationException e)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(e, HttpContext.Current);
                ErrorLog.LogError(e, "SaveRoadProposalPMGSY3DAL(DbEntityValidationException ex).DAL");
                ModelStateDictionary modelstate = new ModelStateDictionary();

                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        modelstate.AddModelError(ve.ErrorMessage, ve.ErrorMessage);
                    }
                }
                return new CommonFunctions().FormatErrorMessage(modelstate);
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveRoadProposalPMGSY3DAL(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveRoadProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "SaveRoadProposalPMGSY3DAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string UpdateRoadProposalDALPMGSY3(Models.Proposal.ProposalViewModelPMGSY3 ims_sanctioned_projects)
        {
            try
            {
                dbContext = new PMGSYEntities();

                decimal? totalCnLength = 0;

                if (PMGSYSession.Current.PMGSYScheme == 1)
                {
                    totalCnLength = (from c in dbContext.PLAN_ROAD
                                     where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                     select c.PLAN_RD_LENGTH).First();
                }
                else if (PMGSYSession.Current.PMGSYScheme == 2 || PMGSYSession.Current.PMGSYScheme == 3 || PMGSYSession.Current.PMGSYScheme == 4)///Changes for RCPLWE and PMGSY3
                {
                    // For scheme 3 - RCPLWE Road can be combination of roads so,
                    // For scheme 2 - Candidate Road can be combination of roads so,
                    // Length is considered as Total Length i.e. PLAN_RD_TOTAL_LEN
                    totalCnLength = (from c in dbContext.PLAN_ROAD
                                     where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                     select c.PLAN_RD_TOTAL_LEN).First();
                }

                decimal? ProposedLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                           where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                           && c.IMS_PROPOSAL_TYPE == "P"
                                           && c.IMS_SANCTIONED != "D"
                                           && ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                           select (decimal?)c.IMS_PAV_LENGTH).Sum();

                decimal? remainingLength = Convert.ToDecimal(totalCnLength) - Convert.ToDecimal(ProposedLength);

                if (ims_sanctioned_projects.IMS_PAV_LENGTH > (totalCnLength + (totalCnLength * Convert.ToDecimal(0.5))))
                {
                    //return "Proposed Length can not be more than 20% of Core-Network Length.";
                    return "variation in Proposed Length can be upto 50 % CN Length";
                }


                IMS_SANCTIONED_PROJECTS objProposal = new IMS_SANCTIONED_PROJECTS();

                string StateShortCode = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == PMGSY.Extensions.PMGSYSession.Current.StateCode).Select(c => c.MAST_STATE_SHORT_CODE).First();


                objProposal = dbContext.IMS_SANCTIONED_PROJECTS.Find(ims_sanctioned_projects.IMS_PR_ROAD_CODE);

                #region Assign Properties


                // Below 2 Fields are  Added on 18 March 2021
                objProposal.EXISTING_CARRIAGEWAY_WIDTH = ims_sanctioned_projects.EXISTING_CARRIAGEWAY_WIDTH;
                objProposal.EXISTING_CARRIAGEWAY_PUC = ims_sanctioned_projects.EXISTING_CARRIAGEWAY_PUC;

                //objProposal.MAST_STATE_CODE = PMGSYSession.Current.StateCode;
                //objProposal.MAST_DISTRICT_CODE = PMGSYSession.Current.DistrictCode;
                //objProposal.MAST_DPIU_CODE = PMGSYSession.Current.NDCode;

                objProposal.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                objProposal.IMS_PR_ROAD_CODE = ims_sanctioned_projects.IMS_PR_ROAD_CODE;

                objProposal.IMS_UPGRADE_CONNECT = ims_sanctioned_projects.IMS_UPGRADE_CONNECT;

                // Upgradation Proposal
                if (ims_sanctioned_projects.IMS_UPGRADE_CONNECT.ToUpper() == "U")
                {
                    objProposal.MAST_EXISTING_SURFACE_CODE = ims_sanctioned_projects.MAST_EXISTING_SURFACE_CODE;

                    if (ims_sanctioned_projects.IMS_ISBENEFITTED_HABS != null)
                    {
                        // is Habitations Benefited
                        if (ims_sanctioned_projects.IMS_ISBENEFITTED_HABS.ToUpper() == "N")
                        {
                            objProposal.IMS_ISBENEFITTED_HABS = ims_sanctioned_projects.IMS_ISBENEFITTED_HABS;
                            objProposal.IMS_HABS_REASON = ims_sanctioned_projects.IMS_HABS_REASON;
                        }
                        else
                        {
                            objProposal.IMS_ISBENEFITTED_HABS = ims_sanctioned_projects.IMS_ISBENEFITTED_HABS;
                        }
                    }
                }
                // New Package or Exising Package
                //if (ims_sanctioned_projects.IMS_EXISTING_PACKAGE.ToUpper() == "N")
                //{
                //    objProposal.IMS_PACKAGE_ID =    StateShortCode + ims_sanctioned_projects.IMS_PACKAGE_ID;
                //}
                //else
                //{
                //    objProposal.IMS_PACKAGE_ID =  ims_sanctioned_projects.EXISTING_IMS_PACKAGE_ID;
                //}

                // New Package or Exising Package
                if (ims_sanctioned_projects.IMS_EXISTING_PACKAGE.ToUpper() == "N")
                {
                    objProposal.IMS_PACKAGE_ID = ims_sanctioned_projects.PACKAGE_PREFIX + ims_sanctioned_projects.IMS_PACKAGE_ID;
                }
                else
                {
                    objProposal.IMS_PACKAGE_ID = ims_sanctioned_projects.EXISTING_IMS_PACKAGE_ID;
                }

                // Staged Proposal or Complete Proposal
                if (ims_sanctioned_projects.IMS_IS_STAGED.ToUpper() == "S")
                {
                    objProposal.IMS_IS_STAGED = "S";
                    //Stage I Proposal
                    if (ims_sanctioned_projects.IMS_STAGE_PHASE == "1")
                    {
                        objProposal.IMS_STAGE_PHASE = "S1";
                    }
                    if (ims_sanctioned_projects.IMS_STAGE_PHASE == "2")
                    {
                        objProposal.IMS_STAGE_PHASE = "S2";

                        //IMS_YEAR_Staged
                        var data = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                    where
                                        c.IMS_PACKAGE_ID == ims_sanctioned_projects.Stage_2_Package_ID
                                        &&
                                        c.IMS_YEAR == ims_sanctioned_projects.Stage_2_Year
                                        &&
                                        c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                    select new
                                    {
                                        Package_ID = ims_sanctioned_projects.Stage_2_Package_ID,
                                        Year = ims_sanctioned_projects.Stage_2_Year,
                                        Road_ID = c.IMS_PR_ROAD_CODE
                                    }).ToList();
                        // Self Referencing Columns
                        foreach (var RowData in data)
                        {
                            objProposal.IMS_STAGED_YEAR = RowData.Year;
                            objProposal.IMS_STAGED_PACKAGE_ID = RowData.Package_ID.ToString();
                            objProposal.IMS_STAGED_ROAD_ID = RowData.Road_ID;
                        }

                        //validation for checking the total length of stage 2 proposals should not exceed the stage 1 proposal

                        //if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE))
                        if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE))
                        {
                            //decimal sumOfPavLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH) == null ? 0 : dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == objProposal.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH);

                            decimal sumOfPavLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != ims_sanctioned_projects.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH) == null ? 0 : dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != ims_sanctioned_projects.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH);

                            sumOfPavLength += ims_sanctioned_projects.IMS_PAV_LENGTH.Value;

                            if (sumOfPavLength > (dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == objProposal.IMS_STAGED_ROAD_ID.Value).Select(m => m.IMS_PAV_LENGTH).FirstOrDefault()))
                            {
                                //return "Sum of Pavement Length of Stage 2 Proposals is exceeding the Pavement Length of Stage 1 Proposal.";
                                var stage2Roads = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2").Select(x => new { imsYear = x.IMS_YEAR, imsPackage = x.IMS_PACKAGE_ID, blockName = x.MASTER_BLOCK.MAST_BLOCK_NAME }).ToList();

                                string stage2Year = string.Join(",", stage2Roads[0].imsYear);
                                string stage2Package = string.Join(",", stage2Roads[0].imsPackage);
                                string stage2Block = string.Join(",", stage2Roads[0].blockName);

                                return "Sum of Pavement Length of Stage 2 Proposals is exceeding the Pavement Length of Stage 1 Proposal.<br/> Package=[" + stage2Package + "]     Year=[" + stage2Year + "]     Block=[" + stage2Block + "]";
                            }

                        }


                        CopyHabitationDetails(objProposal.IMS_STAGED_ROAD_ID.Value, objProposal.IMS_PR_ROAD_CODE);
                    }
                }
                else // Complete Proposal
                {
                    objProposal.IMS_IS_STAGED = "C";
                }


                objProposal.IMS_YEAR = ims_sanctioned_projects.IMS_YEAR;
                objProposal.IMS_BATCH = ims_sanctioned_projects.IMS_BATCH;
                objProposal.MAST_BLOCK_CODE = ims_sanctioned_projects.MAST_BLOCK_CODE;

                //FUNDING AGENCY
                objProposal.IMS_COLLABORATION = ims_sanctioned_projects.IMS_COLLABORATION;
                //STREAM
                if (ims_sanctioned_projects.isPaymentDone == false)
                {
                    objProposal.IMS_STREAMS = ims_sanctioned_projects.IMS_STREAMS;
                }
                // Link/Through Route Name
                objProposal.PLAN_CN_ROAD_CODE = ims_sanctioned_projects.PLAN_CN_ROAD_CODE != null ? Convert.ToInt32(ims_sanctioned_projects.PLAN_CN_ROAD_CODE) : 0;

                objProposal.IMS_ROAD_FROM = ims_sanctioned_projects.IMS_ROAD_FROM;
                objProposal.IMS_ROAD_TO = ims_sanctioned_projects.IMS_ROAD_TO;
                //objProposal.IMS_ROAD_NAME = ims_sanctioned_projects.IMS_ROAD_FROM + " " + ims_sanctioned_projects.IMS_ROAD_TO;
                objProposal.IMS_ROAD_NAME = dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_CN_ROAD_NUMBER).FirstOrDefault() + "-" + dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_RD_NAME).FirstOrDefault();

                objProposal.IMS_PARTIAL_LEN = ims_sanctioned_projects.IMS_PARTIAL_LEN;
                objProposal.IMS_PAV_LENGTH = ims_sanctioned_projects.IMS_PAV_LENGTH != null ? Convert.ToDecimal(ims_sanctioned_projects.IMS_PAV_LENGTH) : 0;
                objProposal.IMS_CC_LENGTH = ims_sanctioned_projects.IMS_CC_LENGTH;
                objProposal.IMS_BT_LENGTH = ims_sanctioned_projects.IMS_BT_LENGTH;

                objProposal.IMS_NO_OF_CDWORKS = ims_sanctioned_projects.IMS_NO_OF_CDWORKS == null ? 0 : Convert.ToInt32(ims_sanctioned_projects.IMS_NO_OF_CDWORKS);
                objProposal.IMS_ZP_RESO_OBTAINED = ims_sanctioned_projects.IMS_ZP_RESO_OBTAINED;

                // All Costs Estimated
                objProposal.IMS_PAV_EST_COST = ims_sanctioned_projects.IMS_SANCTIONED_PAV_AMT;
                objProposal.IMS_CD_WORKS_EST_COST = ims_sanctioned_projects.IMS_SANCTIONED_CD_AMT;
                objProposal.IMS_PROTECTION_WORKS = ims_sanctioned_projects.IMS_SANCTIONED_PW_AMT;
                objProposal.IMS_OTHER_WORK_COST = ims_sanctioned_projects.IMS_SANCTIONED_OW_AMT;
                objProposal.IMS_STATE_SHARE = Convert.ToDecimal(ims_sanctioned_projects.IMS_STATE_SHARE);

                //PMGSY Scheme-II
                objProposal.IMS_IS_HIGHER_SPECIFICATION = ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION;
                if (ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION != null && ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION.Equals("Y"))
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = ims_sanctioned_projects.IMS_HIGHER_SPECIFICATION_COST;
                }
                else
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = null;
                }
                objProposal.IMS_FURNITURE_COST = ims_sanctioned_projects.IMS_FURNITURE_COST;
                objProposal.IMS_SHARE_PERCENT = ims_sanctioned_projects.IMS_SHARE_PERCENT;

                objProposal.IMS_MAINTENANCE_YEAR1 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT1;
                objProposal.IMS_MAINTENANCE_YEAR2 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT2;
                objProposal.IMS_MAINTENANCE_YEAR3 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT3;
                objProposal.IMS_MAINTENANCE_YEAR4 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT4;
                objProposal.IMS_MAINTENANCE_YEAR5 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT5;

                //PMGSY Scheme-II
                objProposal.IMS_RENEWAL_COST = ims_sanctioned_projects.IMS_RENEWAL_COST;

                // All Costs Sanctioned
                objProposal.IMS_SANCTIONED_PAV_AMT = ims_sanctioned_projects.IMS_SANCTIONED_PAV_AMT;
                objProposal.IMS_SANCTIONED_CD_AMT = ims_sanctioned_projects.IMS_SANCTIONED_CD_AMT;
                objProposal.IMS_SANCTIONED_PW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_PW_AMT;
                objProposal.IMS_SANCTIONED_OW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_OW_AMT;
                objProposal.IMS_SANCTIONED_RS_AMT = Convert.ToDecimal(ims_sanctioned_projects.IMS_STATE_SHARE);


                //PMGSY Scheme-II
                if (ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION != null && ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION.Equals("Y"))
                {
                    objProposal.IMS_SANCTIONED_HS_AMT = ims_sanctioned_projects.IMS_HIGHER_SPECIFICATION_COST;
                }
                else
                {
                    objProposal.IMS_SANCTIONED_HS_AMT = null;
                }
                objProposal.IMS_SANCTIONED_FC_AMT = ims_sanctioned_projects.IMS_FURNITURE_COST;

                objProposal.IMS_SANCTIONED_MAN_AMT1 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT1;
                objProposal.IMS_SANCTIONED_MAN_AMT2 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT2;
                objProposal.IMS_SANCTIONED_MAN_AMT3 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT3;
                objProposal.IMS_SANCTIONED_MAN_AMT4 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT4;
                objProposal.IMS_SANCTIONED_MAN_AMT5 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT5;

                //PMGSY Scheme-II
                objProposal.IMS_SANCTIONED_RENEWAL_AMT = ims_sanctioned_projects.IMS_RENEWAL_COST;

                objProposal.MAST_MP_CONST_CODE = ims_sanctioned_projects.MAST_MP_CONST_CODE > 0 ? ims_sanctioned_projects.MAST_MP_CONST_CODE : null;
                objProposal.MAST_MLA_CONST_CODE = ims_sanctioned_projects.MAST_MLA_CONST_CODE > 0 ? ims_sanctioned_projects.MAST_MLA_CONST_CODE : null;


                objProposal.IMS_CARRIAGED_WIDTH = ims_sanctioned_projects.IMS_CARRIAGED_WIDTH;

                // Traffic Catagory
                objProposal.IMS_TRAFFIC_TYPE = ims_sanctioned_projects.IMS_TRAFFIC_TYPE == 0 ? null : ims_sanctioned_projects.IMS_TRAFFIC_TYPE;

                objProposal.IMS_PROPOSED_SURFACE = ims_sanctioned_projects.IMS_PROPOSED_SURFACE;


                objProposal.MAST_EXISTING_SURFACE_CODE = ims_sanctioned_projects.MAST_EXISTING_SURFACE_CODE;
                objProposal.IMS_REMARKS = ims_sanctioned_projects.IMS_REMARKS;

                #region Sanctioned
                IMS_SANCTIONED_PROJECTS ims_sanctioned_projects1 = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == ims_sanctioned_projects.IMS_PR_ROAD_CODE).FirstOrDefault();

                //STA Details
                objProposal.STA_SANCTIONED = ims_sanctioned_projects1.STA_SANCTIONED;
                objProposal.STA_SANCTIONED_BY = ims_sanctioned_projects1.STA_SANCTIONED_BY;

                //objProposal.STA_SANCTIONED_BY = (ims_sanctioned_projects1.STA_SANCTIONED_BY != null && ims_sanctioned_projects1.STA_SANCTIONED_BY != "") ? dbContext.ADMIN_TECHNICAL_AGENCY.Where(b => b.ADMIN_USER_ID == dbContext.UM_User_Master.Where(a => a.UserName == ims_sanctioned_projects1.STA_SANCTIONED_BY).Select(a => a.UserID).FirstOrDefault()).Any() ? dbContext.ADMIN_TECHNICAL_AGENCY.Where(b => b.ADMIN_USER_ID == dbContext.UM_User_Master.Where(a => a.UserName == ims_sanctioned_projects1.STA_SANCTIONED_BY).Select(a => a.UserID).FirstOrDefault()).Select(b => b.ADMIN_TA_NAME).First() : (ims_sanctioned_projects1.STA_SANCTIONED_BY == null ? "NA" : ims_sanctioned_projects1.STA_SANCTIONED_BY.ToString()) : (ims_sanctioned_projects1.STA_SANCTIONED_BY == null ? "NA" : ims_sanctioned_projects1.STA_SANCTIONED_BY.ToString()); //change done by Vikram on 26/05/2014 as if no data found in Admin Technical Agency then show the STA Name as it is from IMS_SANCTIONED_PROJECTS

                if (ims_sanctioned_projects1.STA_SANCTIONED_DATE != null && Convert.ToDateTime(ims_sanctioned_projects.STA_SANCTIONED_DATE).Year != 0)
                {
                    DateTime dateTime = new DateTime();
                    dateTime = Convert.ToDateTime(ims_sanctioned_projects1.STA_SANCTIONED_DATE);
                    objProposal.STA_SANCTIONED_DATE = System.DateTime.Now;//dateTime.ToString("dd-MMM-yyyy");
                }
                objProposal.IMS_STA_REMARKS = ims_sanctioned_projects1.IMS_STA_REMARKS;


                //PTA Details
                objProposal.PTA_SANCTIONED = ims_sanctioned_projects1.PTA_SANCTIONED;
                objProposal.PTA_SANCTIONED_BY = ims_sanctioned_projects1.PTA_SANCTIONED_BY == null ? dbContext.ADMIN_TECHNICAL_AGENCY.Where(b => b.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(a => a.ADMIN_TA_CODE).FirstOrDefault() : ims_sanctioned_projects1.PTA_SANCTIONED_BY;
                //objProposal.NAME_OF_PTA = ims_sanctioned_projects1.PTA_SANCTIONED_BY == null
                //                                        ? db.ADMIN_TECHNICAL_AGENCY.Where(a => a.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(a => a.ADMIN_TA_NAME).FirstOrDefault()
                //                                        : db.ADMIN_TECHNICAL_AGENCY.Where(a => a.ADMIN_TA_CODE == ims_sanctioned_projects1.PTA_SANCTIONED_BY).Select(a => a.ADMIN_TA_NAME).FirstOrDefault();

                if (ims_sanctioned_projects1.PTA_SANCTIONED_DATE != null && Convert.ToDateTime(ims_sanctioned_projects1.PTA_SANCTIONED_DATE).Year != 0)
                {
                    DateTime dateTime = new DateTime();
                    dateTime = Convert.ToDateTime(ims_sanctioned_projects1.PTA_SANCTIONED_DATE);
                    objProposal.PTA_SANCTIONED_DATE = System.DateTime.Now;//dateTime.ToString("dd-MMM-yyyy");
                }
                objProposal.IMS_PTA_REMARKS = ims_sanctioned_projects1.IMS_PTA_REMARKS;


                objProposal.IMS_SANCTIONED = ims_sanctioned_projects1.IMS_SANCTIONED;
                objProposal.IMS_SANCTIONED_BY = ims_sanctioned_projects1.IMS_SANCTIONED_BY;
                if (ims_sanctioned_projects1.IMS_SANCTIONED_DATE != null && Convert.ToDateTime(ims_sanctioned_projects1.IMS_SANCTIONED_DATE).Year != 0)
                {
                    DateTime dateTime = new DateTime();
                    dateTime = Convert.ToDateTime(ims_sanctioned_projects1.IMS_SANCTIONED_DATE);
                    objProposal.IMS_SANCTIONED_DATE = System.DateTime.Now;//dateTime.ToString("dd-MMM-yyyy");
                }
                objProposal.IMS_PROG_REMARKS = ims_sanctioned_projects1.IMS_PROG_REMARKS;

                #endregion

                if (objProposal.STA_SANCTIONED.Trim() == "N")
                {
                    // For Stage II Proposal Set this Flag to "H" because if Stage II Proposal is Edited then there is no way to Finalize the Habitation
                    if (ims_sanctioned_projects.IMS_IS_STAGED.ToUpper() == "S" && ims_sanctioned_projects.IMS_STAGE_PHASE == "2")
                    {
                        objProposal.IMS_ISCOMPLETED = "H";
                    }
                    else
                    {
                        //Flags set on Edit before DPIU Finaliation as wel as reset after Mord Reconsider
                        objProposal.IMS_ISCOMPLETED = "E";
                    }

                    /// STA Flags
                    objProposal.STA_SANCTIONED = "N";
                    objProposal.STA_SANCTIONED_BY = null;
                    objProposal.STA_SANCTIONED_DATE = null;
                    objProposal.IMS_STA_REMARKS = string.Empty;

                    ///MoRD Flags
                    objProposal.IMS_SANCTIONED = "N";
                    objProposal.IMS_SANCTIONED_BY = null;
                    objProposal.IMS_SANCTIONED_DATE = null;
                    objProposal.IMS_PROG_REMARKS = string.Empty;

                    objProposal.IMS_SHIFT_STATUS = "N";
                    objProposal.PTA_SANCTIONED = "N";
                }
                #endregion

                #region FUND_SHARING_RATIO_PMGSY_SCHEME_1

                objProposal.IMS_STATE_SHARE_2015 = ims_sanctioned_projects.IMS_STATE_SHARE_2015;
                objProposal.IMS_MORD_SHARE_2015 = ims_sanctioned_projects.IMS_MORD_SHARE_2015;
                objProposal.IMS_SHARE_PERCENT_2015 = ims_sanctioned_projects.IMS_SHARE_PERCENT_2015;

                #endregion

                using (TransactionScope ts = new TransactionScope())
                {
                    objProposal.USERID = PMGSYSession.Current.UserId;
                    objProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(objProposal).State = System.Data.Entity.EntityState.Modified;;

                    //PMGSY3
                    if (PMGSYSession.Current.PMGSYScheme == 4)
                    {
                        objProposal.IMS_RIDING_QUALITY_LENGTH = ims_sanctioned_projects.ImsRidingQualityLength;
                        objProposal.IMS_PUCCA_SIDE_DRAINS = ims_sanctioned_projects.ImsPuccaSideDrains;
                        objProposal.IMS_GST_COST = ims_sanctioned_projects.ImsGSTCost;

                        //Added by Aditi on 6 ,10,11 August 2020
                        #region For Post DPL Maintenance Cost
                        objProposal.IMS_MAINTENANCE_YEAR6 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR6;
                        objProposal.IMS_MAINTENANCE_YEAR7 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR7;
                        objProposal.IMS_MAINTENANCE_YEAR8 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR8;
                        objProposal.IMS_MAINTENANCE_YEAR9 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR9;
                        objProposal.IMS_MAINTENANCE_YEAR10 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR10;
                        #endregion

                        objProposal.PUCCA_SIDE_DRAIN_LENGTH = ims_sanctioned_projects.PUCCA_SIDE_DRAIN_LENGTH;
                        objProposal.PROTECTION_LENGTH = ims_sanctioned_projects.PROTECTION_LENGTH;

                        #region Existing Surface Details
                        objProposal.SURFACE_BRICK_SOLLING = ims_sanctioned_projects.SURFACE_BRICK_SOLLING;
                        objProposal.SURFACE_BT = ims_sanctioned_projects.SURFACE_BT;
                        objProposal.SURFACE_CC = ims_sanctioned_projects.SURFACE_CC;
                        objProposal.SURFACE_GRAVEL = ims_sanctioned_projects.SURFACE_GRAVEL;
                        objProposal.SURFACE_MOORUM = ims_sanctioned_projects.SURFACE_MOORUM;
                        objProposal.SURFACE_TRACK = ims_sanctioned_projects.SURFACE_TRACK;
                        objProposal.SURFACE_WBM = ims_sanctioned_projects.SURFACE_WBM;

                        decimal TotalSurfaceLength = Convert.ToDecimal(objProposal.SURFACE_BRICK_SOLLING + objProposal.SURFACE_BT + objProposal.SURFACE_CC + objProposal.SURFACE_GRAVEL + objProposal.SURFACE_MOORUM + objProposal.SURFACE_TRACK + objProposal.SURFACE_WBM);

                        if (ims_sanctioned_projects.IMS_PAV_LENGTH != TotalSurfaceLength)
                        {
                            return "Sum of all the Existing Surface Lengths should be equal to the Pavement Length";
                        }

                        #endregion

                    }
                    IMS_COST_COMPONENT imsCostComponent = dbContext.IMS_COST_COMPONENT.Where(z => z.IMS_COMPONENT_ID == ims_sanctioned_projects.imsComponentId).FirstOrDefault();
                    //imsCostComponent.IMS_COMPONENT_ID = (dbContext.IMS_COST_COMPONENT.Any() ? dbContext.IMS_COST_COMPONENT.Max(z => z.IMS_COMPONENT_ID) : 0) + 1;
                    imsCostComponent.IMS_PR_ROAD_CODE = objProposal.IMS_PR_ROAD_CODE;
                    imsCostComponent.IMS_CLEARING = ims_sanctioned_projects.ImsClearing;
                    imsCostComponent.IMS_EXCAVATION = ims_sanctioned_projects.ImsExcavation;
                    imsCostComponent.IMS_FILLING = ims_sanctioned_projects.ImsFilling;
                    imsCostComponent.IMS_SUB_GRADE = ims_sanctioned_projects.ImsSubGrade;
                    imsCostComponent.IMS_SHOULDER = ims_sanctioned_projects.ImsShoulder;
                    imsCostComponent.IMS_GRANULAR_SUB_BASE = ims_sanctioned_projects.ImsGranularSubBase;
                    imsCostComponent.IMS_SOIL_AGGREGATE = ims_sanctioned_projects.ImsSoilAggregate;
                    imsCostComponent.IMS_WBM_GRADE_II = ims_sanctioned_projects.ImsWBMGradeII;
                    imsCostComponent.IMS_WBM_GRADE_III = ims_sanctioned_projects.ImsWBMGradeIII;
                    imsCostComponent.IMS_WMM = ims_sanctioned_projects.ImsWMM;
                    imsCostComponent.IMS_PRIME_COAT = ims_sanctioned_projects.ImsPrimeCoat;
                    imsCostComponent.IMS_TACK_COAT = ims_sanctioned_projects.ImsTackCoat;
                    imsCostComponent.IMS_BM_DBM = ims_sanctioned_projects.ImsBMDBM;
                    imsCostComponent.IMS_OGPC_SDBC_BC = ims_sanctioned_projects.ImsOGPC_SDBC_BC;
                    imsCostComponent.IMS_SEAL_COAT = ims_sanctioned_projects.ImsSealCoat;
                    imsCostComponent.IMS_SURFACE_DRESSING = ims_sanctioned_projects.ImsSurfaceDressing;
                    imsCostComponent.IMS_DRY_LEAN_CONCRETE = ims_sanctioned_projects.ImsDryLeanConcrete;
                    imsCostComponent.IMS_CONCRETE_PAVEMENT = ims_sanctioned_projects.ImsConcretePavement;
                    imsCostComponent.USERID = PMGSYSession.Current.UserId;
                    imsCostComponent.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(imsCostComponent).State = System.Data.Entity.EntityState.Modified;;

                    dbContext.SaveChanges();
                    ts.Complete();
                }
                return string.Empty;
            }
            catch (DbEntityValidationException e)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(e, HttpContext.Current);
                ErrorLog.LogError(e, "UpdateRoadProposalDAL(DbEntityValidationException ex).DAL");
                ModelStateDictionary modelstate = new ModelStateDictionary();

                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        modelstate.AddModelError(ve.ErrorMessage, ve.ErrorMessage);
                    }
                }
                return new CommonFunctions().FormatErrorMessage(modelstate);
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateRoadProposalDAL(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateRoadProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "UpdateRoadProposalDAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string DeleteRoadProposalPMGSY3DAL(int IMS_PR_ROAD_CODE)
        {
            try
            {
                using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, TimeSpan.FromMinutes(10)))
                {
                    dbContext = new PMGSYEntities();

                    var adapter = (IObjectContextAdapter)dbContext;
                    var objectContext = adapter.ObjectContext;
                    objectContext.CommandTimeout = 0;

                    IMS_SANCTIONED_PROJECTS ims_sanctioned_projects = dbContext.IMS_SANCTIONED_PROJECTS.Find(IMS_PR_ROAD_CODE);
                    ims_sanctioned_projects.USERID = PMGSYSession.Current.UserId;
                    ims_sanctioned_projects.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(ims_sanctioned_projects).State = EntityState.Modified;
                    dbContext.SaveChanges();

                    ///Changed by SAMMED A. PATIL on 22JUNE2017 to delete record from IMS_UNLOCK_DETAILS and IMS_PROPOSAL_TRACKING if record is not sanctioned
                    if (ims_sanctioned_projects.IMS_SANCTIONED == "N")
                    {
                        if (dbContext.IMS_UNLOCK_DETAILS.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE))
                        {
                            List<IMS_UNLOCK_DETAILS> lstUnlockDetails = dbContext.IMS_UNLOCK_DETAILS.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();
                            foreach (var item in lstUnlockDetails)
                            {
                                dbContext.IMS_UNLOCK_DETAILS.Remove(item);
                                dbContext.SaveChanges();
                            }
                        }

                        if (dbContext.IMS_PROPOSAL_TRACKING.Any(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE))
                        {
                            List<IMS_PROPOSAL_TRACKING> lstTrackingDetails = dbContext.IMS_PROPOSAL_TRACKING.Where(m => m.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();
                            foreach (var item in lstTrackingDetails)
                            {
                                dbContext.IMS_PROPOSAL_TRACKING.Remove(item);
                                dbContext.SaveChanges();
                            }
                        }
                    }

                    IMS_COST_COMPONENT ims_cost_component = dbContext.IMS_COST_COMPONENT.Where(z => z.IMS_PR_ROAD_CODE == ims_sanctioned_projects.IMS_PR_ROAD_CODE).FirstOrDefault();
                    if (ims_cost_component != null)
                    {
                        dbContext.IMS_COST_COMPONENT.Remove(ims_cost_component);
                    }

                    dbContext.IMS_SANCTIONED_PROJECTS.Remove(ims_sanctioned_projects);
                    dbContext.SaveChanges();
                    ts.Complete();
                    return string.Empty;
                }
            }
            catch (DbUpdateException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteRoadProposalPMGSY3DAL(DbUpdateException ex).DAL");
                return ("An Update Error Occurred While Processing Your Request.");
                //return ex.Message.ToString();
            }
            catch (OptimisticConcurrencyException ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteRoadProposalPMGSY3DAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "DeleteRoadProposalPMGSY3DAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region PMGSY3 proposal PDF Upload

        public bool SavePDFFileDAL(int IMS_PR_ROAD_CODE, string FileName, HttpPostedFileBase filebase/*, string remark*/)
        {
            PMGSY.Models.PMGSYEntities dbcontext = new Models.PMGSYEntities();
            try
            {
                IMS_SANCTION_FOREST_CLEARANCE dbmodel = new IMS_SANCTION_FOREST_CLEARANCE();
                int maxid = 0;
                if (dbcontext.IMS_SANCTION_FOREST_CLEARANCE.Any())
                    maxid = dbcontext.IMS_SANCTION_FOREST_CLEARANCE.Select(x => x.IMS_FOREST_CLR_ID).Max() + 1;

                else
                    maxid = 1;

                //var Entry = dbcontext.IMS_SANCTION_FOREST_CLEARANCE.Where(x => x. == ).FirstOrDefault();
                //var RoadCode = Entry.PLAN_CN_ROAD_CODE;
                //var ErCode = Entry.MAST_ER_ROAD_CODE;

                if (dbmodel != null)
                {

                    var timestampArray = System.DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss.fff").Replace('.', '_').Split(' ');
                    string timestamp = timestampArray[0].ToString() + "_" + timestampArray[1].ToString();
                    FileName = IMS_PR_ROAD_CODE.ToString() + "_" + timestamp.Replace('/', '_').Replace(':', '_');
                    bool isEntrySaved = false;
                    using (TransactionScope ts = new TransactionScope())
                    {
                        dbmodel.IMS_FOREST_CLR_ID = maxid;
                        dbmodel.IMS_PR_ROAD_CODE = IMS_PR_ROAD_CODE;
                        dbmodel.IMS_IS_FOREST_CLR_REQ = "Y";
                        dbmodel.IMS_IS_FOREST_CLR_OBT = "Y";
                        dbmodel.IMS_FOREST_CLR_FILE_NAME = FileName;
                        dbmodel.IMS_FOREST_CLR_FILE_UPLOAD_DATE = DateTime.Now;
                        dbmodel.USERID = PMGSYSession.Current.UserId;
                        dbmodel.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                        dbcontext.Entry(dbmodel).State = EntityState.Added;

                        dbcontext.SaveChanges();
                        ts.Complete();
                        isEntrySaved = true;
                    }

                    if (isEntrySaved)
                        filebase.SaveAs(Path.Combine(ConfigurationManager.AppSettings["PROPOSAL_PMGSY3_FILE_UPLOAD"], FileName));

                    return true;

                }
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "MasterEntryDAL/SavePhotoGraph");
                return false;
            }
        }

        public Array PMGSYIIIGetPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE)
        {
            try
            {
                dbContext = new PMGSYEntities();

                List<IMS_SANCTION_FOREST_CLEARANCE> listProposalFiles = dbContext.IMS_SANCTION_FOREST_CLEARANCE.Where(p => p.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).ToList();

                IQueryable<IMS_SANCTION_FOREST_CLEARANCE> query = listProposalFiles.AsQueryable<IMS_SANCTION_FOREST_CLEARANCE>();

                totalRecords = listProposalFiles.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.IMS_PR_ROAD_CODE).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                string VirtualDirectoryUrl = ConfigurationManager.AppSettings["PROPOSAL_PDF_FILE_UPLOAD_VIRTUAL_DIR_PATH"];
                string PhysicalPath = ConfigurationManager.AppSettings["PROPOSAL_PMGSY3_FILE_UPLOAD"];


                return query.Select(fileDetails => new
                {
                    id = fileDetails.IMS_FOREST_CLR_ID + "$" + fileDetails.IMS_PR_ROAD_CODE,
                    cell = new[] {                                       
                                    URLEncrypt.EncryptParameters(new string[] { fileDetails.IMS_FOREST_CLR_FILE_NAME  }),                                                                                                      
                                    //"<a href='#' title='Click here to Edit the File Details' class='ui-icon ui-icon-pencil ui-align-center' onClick=EditPDFDetails('" +  fileDetails.IMS_FOREST_CLR_ID.ToString().Trim()  + "$" +                                                                   fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() +"'); return false;>Edit</a>",

                                    dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == fileDetails.IMS_PR_ROAD_CODE).FirstOrDefault().IMS_ROAD_NAME,

                                    "<a href='#' title='Click here to delete the File and File Details' class='ui-icon ui-icon-trash ui-align-center' onClick=DeletePDFFileDetails('" + fileDetails.IMS_FOREST_CLR_ID.ToString().Trim()  + "$" +                                                    fileDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + fileDetails.IMS_FOREST_CLR_FILE_NAME +"'); return false;'>Delete</a>",
                                    
                    //                "<center><table><tr><td style='border-color:white'><a href='#' style='float:left' id='btnSave"+  fileDetails.IMS_FOREST_CLR_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"'                                                   title='Click here to Save the File Details' class='ui-icon ui-icon-disk ui-align-center' onClick=SavePDFDetails('" +  fileDetails.IMS_FOREST_CLR_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString                                             ().Trim() + "');></a><a href='#' style='float:right' id='btnCancel" +  fileDetails.IMS_FOREST_CLR_ID.ToString().Trim()  + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()  +"' title='Click here to Cancel                                                 the File Edit' class='ui-icon ui-icon-closethick ui-align-center' onClick= CancelSavePDFDetails('" +  fileDetails.IMS_FOREST_CLR_ID.ToString().Trim() + "$" + fileDetails.IMS_PR_ROAD_CODE.ToString().Trim()                                                    + "');></a></td></tr></table></center>"
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                ErrorLog.LogError(ex, "GetPDFFilesListDAL()");
                totalRecords = 0;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }

        }

        public string DeletePDFFileDetailsDAL(int IMS_FILE_ID, int IMS_PR_ROAD_CODE, string IMS_FILE_NAME)
        {
            try
            {
                dbContext = new PMGSYEntities();
                IMS_SANCTION_FOREST_CLEARANCE IMS_SANCTION_FOREST_CLEARANCE = dbContext.IMS_SANCTION_FOREST_CLEARANCE.Where(x => x.IMS_FOREST_CLR_ID == IMS_FILE_ID && x.IMS_PR_ROAD_CODE == IMS_PR_ROAD_CODE).FirstOrDefault();

                using (TransactionScope ts = new TransactionScope())
                {
                    if (IMS_SANCTION_FOREST_CLEARANCE != null)
                    {
                        dbContext.IMS_SANCTION_FOREST_CLEARANCE.Remove(IMS_SANCTION_FOREST_CLEARANCE);
                        dbContext.SaveChanges();
                        ts.Complete();
                        return string.Empty;
                    }

                }
                return "failed";

            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter sw = System.IO.File.AppendText(System.IO.Path.Combine("D:\\ErrorLog\\OMMASErrorLog_" + System.DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt", "")))
                {
                    sw.WriteLine("IMS_PR_ROAD_CODE :" + IMS_PR_ROAD_CODE);
                    sw.WriteLine("IMS_FOREST_CLR_ID :" + IMS_FILE_ID);
                    sw.WriteLine("IMS_FILE_NAME :" + IMS_FILE_NAME);
                    sw.WriteLine("======================================================================");
                    sw.WriteLine("Date :" + DateTime.Now.ToString());
                    sw.WriteLine("Method : " + "DeletePDFFileDetailsDAL()");
                    if (ex != null)
                        sw.WriteLine("Exception : " + ex.ToString());
                    if (ex.InnerException != null)
                        sw.WriteLine("innerException : " + ex.InnerException.ToString());
                    if (ex.InnerException.InnerException != null)
                        sw.WriteLine("ex.InnerException.InnerException : " + ex.InnerException.InnerException.ToString());
                    sw.WriteLine("---------------------------------------------------------------------------------------");
                    sw.Close();
                }

                return "There is an error while processing request.";
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Proposal Shifting
        public Array GetProposalsForITNOForShiftingDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                List<USP_GET_PROPOSAL_LIST_Result> itemList = new List<USP_GET_PROPOSAL_LIST_Result>();
                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "N";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "Y";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }

                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();
                ///Changes for RCPLWE
                itemList = dbContext.USP_GET_PROPOSAL_LIST(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                totalRecords = itemList.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = itemList.Sum(m => m.TOTAL_COST).HasValue ? itemList.Sum(m => m.TOTAL_COST).Value : 0; ;//itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = itemList.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = itemList.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = itemList.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = itemList.Sum(m => m.POP999);
                colTotal.TOT_HABS = itemList.Sum(m => m.TOTAL_HABS).HasValue ? itemList.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = itemList.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = itemList.Sum(m => m.MAINT_AMT).HasValue ? itemList.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = itemList.Sum(m => m.ROAD_LENGTH).HasValue ? itemList.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = itemList.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = itemList.Sum(m => m.ROAD_STATE).HasValue ? itemList.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = itemList.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = itemList.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = itemList.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = itemList.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }



                itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).ToList();

                return itemList.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {     
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    //(propDetails.IMS_ISBENEFITTED_HABS == "Y") ? (dbContext.IMS_BENEFITED_HABS.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Count()).ToString() : "0",
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT + propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"  + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>",
                                    "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>",
                                    URLEncrypt.EncryptParameters1(new string[] {  "ProposalCode =" + propDetails.IMS_PR_ROAD_CODE.ToString() })
                   
                    
                    }
                }).ToArray();
            }
            catch (Exception ex)
            {

                ErrorLog.LogError(ex, "ProposalDAL().GetProposalsForITNOForShiftingDAL()");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool ShiftProposalDAL(string encryptedEReCode, string newBlockCode, string newDistrictCode, string ProposalCode)
        {
            Models.PMGSYEntities dbContext = new Models.PMGSYEntities();
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    Int32 RoadCode = Convert.ToInt32(ProposalCode);
                    IMS_SANCTIONED_PROJECTS isp = new IMS_SANCTIONED_PROJECTS();
                    isp = dbContext.IMS_SANCTIONED_PROJECTS.Find(RoadCode);
                    Int32 OldDistrictCode = isp.MAST_DISTRICT_CODE;
                    Int32 OldBlockCode = isp.MAST_BLOCK_CODE;
                    Int32 NewDistrictCode = Convert.ToInt32(newDistrictCode);
                    Int32 NewBlockCode = Convert.ToInt32(newBlockCode);

                    int UserID = PMGSYSession.Current.UserId;
                    string IPADDRESS = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    Int32? result = (from shiftProposal in dbContext.SP_SHIFT_SANCTION_ROAD(OldDistrictCode, OldBlockCode, NewDistrictCode, NewBlockCode, RoadCode, UserID, IPADDRESS) select (Int32)shiftProposal).FirstOrDefault();
                    if (result == 1)
                    {
                        return false;
                    }

                    ts.Complete();
                    return true;
                }

            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "ProposalDAL().ShiftProposalDAL() [OptimisticConcurrencyException]");
                return false;
            }
            catch (UpdateException ex)
            {
                ErrorLog.LogError(ex, "ProposalDAL().ShiftProposalDAL() [UpdateException]");
                return false;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ProposalDAL().ShiftProposalDAL() [Exception]");
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }



        public Array GetLSBDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, out ProposalColumnsTotal model)
        {
            dbContext = new Models.PMGSYEntities();

            try
            {
                dbContext = new Models.PMGSYEntities();
                List<USP_GET_PROPOSAL_LIST_Result> itemList = new List<USP_GET_PROPOSAL_LIST_Result>();

                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "N";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "Y";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }

                //itemList = dbContext.pr_get_proposals_for_srrda(MAST_STATE_CODE, MAST_DISTRICT_CODE, PMGSYSession.Current.AdminNdCode, IMS_YEAR, IMS_BATCH, IMS_STREAMS, "L",(IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT),STAStatus,PTAStatus,MRDStatus,Status, PMGSYSession.Current.PMGSYScheme).ToList<pr_get_proposals_for_srrda_Result>();
                //totalRecords = itemList.Count();
                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();
                ///Changes for RCPLWE
                //itemList = dbContext.USP_GET_PROPOSAL_LIST(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), (PMGSYSession.Current.PMGSYScheme == 3 ? 0 : agencyCode), 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "L", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), (PMGSYSession.Current.PMGSYScheme == 3 ? (byte)1 : PMGSYSession.Current.PMGSYScheme), (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                itemList = dbContext.USP_GET_PROPOSAL_LIST(2, MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "L", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                totalRecords = itemList.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = itemList.Sum(m => m.TOTAL_COST).HasValue ? itemList.Sum(m => m.TOTAL_COST).Value : 0; //itemList.Sum(m => m.ROAD_AMT).HasValue ? itemList.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = itemList.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = itemList.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = itemList.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = itemList.Sum(m => m.POP999);
                colTotal.TOT_HABS = itemList.Sum(m => m.TOTAL_HABS).HasValue ? itemList.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = itemList.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = itemList.Sum(m => m.MAINT_AMT).HasValue ? itemList.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = itemList.Sum(m => m.BRIDGE_AMT).Value;
                colTotal.TOT_PAV_LENGTH = itemList.Sum(m => m.ROAD_LENGTH).HasValue ? itemList.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = itemList.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = itemList.Sum(m => m.BRIDGE_STATE).HasValue ? (decimal)itemList.Sum(m => m.BRIDGE_STATE) : 0;//itemList.Sum(m => m.BRIDGE_STATE);

                colTotal.STATE_SHARE_COST = itemList.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = itemList.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = itemList.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = itemList.Sum(m => m.TOTAL_SHARE_COST);

                model = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).ToList();

                return itemList.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {    
                                    propDetails.MAST_DISTRICT_NAME.Trim(),
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID,
                                    propDetails.IMS_ROAD_NAME == null ? "NA" :  propDetails.IMS_ROAD_NAME,
                                    propDetails.ROAD_NAME == null ? "NA" : propDetails.ROAD_NAME,
                                    propDetails.ROAD_LENGTH.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.BRIDGE_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.BRIDGE_AMT),2).ToString(),
                                    //Math.Round(Convert.ToDecimal(propDetails.BRIDGE_AMT + propDetails.BRIDGE_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    //Added By Pankaj To display Higher Specification Amount 
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                     "<a href='#'title='Click here to view the proposal details' class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowLSBDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$" + propDetails.IMS_LOCK_STATUS  + "\"); return false;'>Show Details</a>",
                                     "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" ,
                                    URLEncrypt.EncryptParameters1(new string[] {  "ProposalCode =" + propDetails.IMS_PR_ROAD_CODE.ToString() })
                   }
                }).ToArray();

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ProposalDAL().GetLSBDAL() [Exception]");

                totalRecords = 0;
                model = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        // GetPropDetailsDAL
        public ShiftProposalModel GetPropDetailsDAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                ShiftProposalModel model = new ShiftProposalModel();
                IMS_SANCTIONED_PROJECTS isp = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                model.StateCode = isp.MAST_STATE_CODE;
                model.DistrictCode = isp.MAST_DISTRICT_CODE;
                model.BlockCode = isp.MAST_BLOCK_CODE;
                model.StateName = dbContext.MASTER_STATE.Where(s => s.MAST_STATE_CODE == model.StateCode).Select(s => s.MAST_STATE_NAME).FirstOrDefault();
                model.DistrictName = dbContext.MASTER_DISTRICT.Where(d => d.MAST_DISTRICT_CODE == model.DistrictCode).Select(d => d.MAST_DISTRICT_NAME).FirstOrDefault();
                model.BlockName = dbContext.MASTER_BLOCK.Where(b => b.MAST_BLOCK_CODE == model.BlockCode).Select(b => b.MAST_BLOCK_NAME).FirstOrDefault();
                return model;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ProposalDAL().GetPropDetailsDAL()");
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion

        #region Update Proposal PMGSY3
        public Array GetProposalsForUpdatePMGSY3DAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, int IMS_YEAR, int MAST_BLOCK_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, int adminCode, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT)
        {
            dbContext = new PMGSYEntities();
            try
            {
                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);


                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "N";
                                MRDStatus = "N";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "S";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }

                List<string> lstStateTypes = new List<string>();
                lstStateTypes.Add("N");
                lstStateTypes.Add("H");
                lstStateTypes.Add("X");
                lstStateTypes.Add("D");

                int agencyCode = dbContext.ADMIN_DEPARTMENT.Where(m => m.ADMIN_ND_CODE == PMGSYSession.Current.AdminNdCode).Select(m => m.MAST_AGENCY_CODE).FirstOrDefault();

                //var listProposals = dbContext.USP_GET_PROPOSAL_LIST(2, stateCode, (districtCode <= 0 ? 0 : districtCode), (MAST_BLOCK_ID <= 0 ? 0 : MAST_BLOCK_ID), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, (IMS_PROPOSAL_TYPE == "A" ? "%" : IMS_PROPOSAL_TYPE), (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                var listProposals = dbContext.USP_GET_PROPOSAL_LIST(1, stateCode, (districtCode <= 0 ? 0 : districtCode), (MAST_BLOCK_ID <= 0 ? 0 : MAST_BLOCK_ID), (IMS_YEAR <= 0 ? 0 : IMS_YEAR), (IMS_BATCH <= 0 ? 0 : IMS_BATCH), (IMS_STREAMS <= 0 ? 0 : IMS_STREAMS), agencyCode, 0, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, (IMS_PROPOSAL_TYPE == "A" ? "%" : IMS_PROPOSAL_TYPE), (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, (short)PMGSYSession.Current.RoleCode).ToList<USP_GET_PROPOSAL_LIST_Result>();

                IQueryable<USP_GET_PROPOSAL_LIST_Result> query = listProposals.AsQueryable<USP_GET_PROPOSAL_LIST_Result>();
                totalRecords = listProposals.Count();
                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {         
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    (dbContext.IMS_SANCTIONED_PROJECTS.Where(m=>m.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Select(m=>m.ADMIN_DEPARTMENT.ADMIN_ND_NAME).FirstOrDefault()),
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    //propDetails.IMS_PACKAGE_ID.ToString(),  
                                    "<button type='button' title='Click here to change PIU' value='"+propDetails.IMS_PACKAGE_ID.ToString()+"' onClick='ChangePIU(\""+propDetails.IMS_PR_ROAD_CODE.ToString()+"\");return false;'>"+ propDetails.IMS_PACKAGE_ID.ToString()+"</button>", // propDetails.IMS_PACKAGE_ID.ToString()+ "$" +
                                   // "<button type='button' title='Click here to change PIU' value='"+propDetails.IMS_PACKAGE_ID.ToString()+"' onClick='ChangePIU(\""+propDetails.IMS_PACKAGE_ID.ToString()+"\");return false;'>"+propDetails.IMS_PACKAGE_ID.ToString()+"</button>",                                  
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),
                                    (propDetails.IMS_LOCK_STATUS == "M" || propDetails.IMS_SANCTIONED == "N") ? "<a href='#' title='Click here to edit the proposal' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>" : "<span style='text-align:center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((((dbContext.MASTER_DISTRICT.Where(m=>m.MAST_DISTRICT_CODE == propDetails.MAST_DISTRICT_CODE).Select(m=>m.MAST_IAP_DISTRICT).FirstOrDefault() == "Y") || (dbContext.MASTER_BLOCK.Where(m=>m.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE).Select(m=>m.MAST_SCHEDULE5).FirstOrDefault() == "Y") || lstStateTypes.Contains(dbContext.MASTER_STATE.Where(m=>m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(m=>m.MAST_STATE_TYPE).FirstOrDefault())) && (propDetails.IMS_IS_STAGED != "S")) ? "<a href='#' title='Click here to change status the proposal' onClick='ChangeCompleteProposalToStaged(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Stage I</a>": "<span style='text-align:center'>-</span>"):"<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((propDetails.IMS_IS_STAGED == "S" && propDetails.STAGE_CONST == "Stage I") ? "<a href='#' title='Click here to change status to complete' onClick='ChangeStagedProposalToComplete(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Complete</a>": "<span style='text-align:center'>-</span>"): "<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((((dbContext.MASTER_DISTRICT.Where(m=>m.MAST_DISTRICT_CODE == propDetails.MAST_DISTRICT_CODE).Select(m=>m.MAST_IAP_DISTRICT).FirstOrDefault() == "Y") || (dbContext.MASTER_BLOCK.Where(m=>m.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE).Select(m=>m.MAST_SCHEDULE5).FirstOrDefault() == "Y") || lstStateTypes.Contains(dbContext.MASTER_STATE.Where(m=>m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(m=>m.MAST_STATE_TYPE).FirstOrDefault()))) && (propDetails.IMS_IS_STAGED == "S" && propDetails.STAGE_CONST == "Stage I") ? "<a href='#' title='Click here to change status to Stage2' onClick='ChangeStage1ProposalToStage2(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Stage 2</a>": "<span style='text-align:center'>-</span>") : "<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    propDetails.IMS_LOCK_STATUS == "M" ? ((((dbContext.MASTER_DISTRICT.Where(m=>m.MAST_DISTRICT_CODE == propDetails.MAST_DISTRICT_CODE).Select(m=>m.MAST_IAP_DISTRICT).FirstOrDefault() == "Y") || (dbContext.MASTER_BLOCK.Where(m=>m.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE).Select(m=>m.MAST_SCHEDULE5).FirstOrDefault() == "Y") || lstStateTypes.Contains(dbContext.MASTER_STATE.Where(m=>m.MAST_STATE_CODE == PMGSYSession.Current.StateCode).Select(m=>m.MAST_STATE_TYPE).FirstOrDefault()))) && (propDetails.IMS_IS_STAGED == "C") ? "<a href='#' title='Click here to change status to Stage 2' onClick='ChangeCompleteProposalToStage2(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Stage 2</a>": "<span style='text-align:center'>-</span>") : "<span class='ui-icon ui-icon-locked ui-align-center'>-</span>",
                                    "<input type='checkbox' name='piuUpdation' class='piuupdate' role='checkbox' value='"+propDetails.IMS_PR_ROAD_CODE+"'>",
                                    "<input type='checkbox' name='blockUpdation' class='blockupdate' role='checkbox' value='"+propDetails.IMS_PR_ROAD_CODE+"'>"
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalsForUpdatePMGSY3DAL().DAL");
                totalRecords = 0;
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public bool UpdateProposalDetailsPMGSY3DAL(ProposalUpdateViewModelPMGSY3 model, out string message)
        {
            dbContext = new PMGSYEntities();
            try
            {
                int proposalCode = 0;
                string[] encryptedParams = model.EncryptedProposalCode.Split('/');
                if (encryptedParams.Count() == 3)
                {
                    string[] decryptedParams = URLEncrypt.DecryptParameters(new string[] { encryptedParams[0], encryptedParams[1], encryptedParams[2] });
                    proposalCode = Convert.ToInt32(decryptedParams[0]);
                }

                IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == proposalCode))
                {
                    if (imsMaster.IMS_YEAR != model.Year)
                    {

                        //commented by Vikram on 26 Sept 2014
                        //message = "Staged construction or LSB is present against this Proposal . so year can not be changed.";
                        //return false;

                        var proposals = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == proposalCode).ToList();
                        if (proposals.Count() > 0)
                        {
                            proposals.ForEach(m => m.IMS_STAGED_YEAR = model.Year);
                            dbContext.SaveChanges();
                        }
                    }
                }

                if (imsMaster != null)
                {
                    imsMaster.IMS_BATCH = model.Batch;
                    imsMaster.IMS_YEAR = model.Year;
                    imsMaster.IMS_COLLABORATION = model.Collaboration;
                    imsMaster.USERID = PMGSYSession.Current.UserId;
                    imsMaster.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(imsMaster).State = EntityState.Modified;
                    dbContext.SaveChanges();
                    message = "Proposal details updated successfully.";
                    return true;
                }
                else
                {
                    message = "Error occurred while updating the details.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateProposalDetailsPMGSY3DAL().DAL");
                message = "Error occurred while updating the details.";
                return false;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }

        public ProposalUpdateViewModelPMGSY3 GetOldProposalDetailsPMGSY3DAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            CommonFunctions objCommon = new CommonFunctions();
            ProposalUpdateViewModelPMGSY3 model = new ProposalUpdateViewModelPMGSY3();
            try
            {
                if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_PR_ROAD_CODE == proposalCode))
                {
                    IMS_SANCTIONED_PROJECTS imsMaster = dbContext.IMS_SANCTIONED_PROJECTS.Find(proposalCode);
                    model.Batch = imsMaster.IMS_BATCH;
                    model.Year = imsMaster.IMS_YEAR;
                    model.lstBatchs = objCommon.PopulateUnFreezedBatch(PMGSYSession.Current.StateCode, model.Year, false);
                    if (!model.lstBatchs.Any(m => m.Value == model.Batch.ToString()))
                    {
                        model.lstBatchs.Add(new SelectListItem { Value = model.Batch.ToString(), Text = "Batch " + model.Batch });
                    }
                    model.lstYears = new SelectList(objCommon.PopulateFinancialYear(false, false).ToList(), "Value", "Text").ToList();

                    model.Collaboration = Convert.ToInt32(imsMaster.IMS_COLLABORATION);
                    model.lstCollaboration = objCommon.PopulateFundingAgency(true);
                    return model;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetOldProposalDetailsPMGSY3DAL().DAL");
                return null;
            }
            finally
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
        #endregion


        #region Delete Non Sanctioned and Non Dropped MORD Proposals
        public bool DeleteNonSanctionedAndNonDroppedProposalDAL(int proposalCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                //List<IMS_SANCTIONED_PROJECTS> isp = new List<IMS_SANCTIONED_PROJECTS>();
                //dbContext.Database.Connection.ConnectionTimeout = 180;
                var isp = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_SANCTIONED != "Y" && m.IMS_SANCTIONED != "D" && m.IMS_PR_ROAD_CODE == proposalCode).FirstOrDefault();
                dbContext.IMS_SANCTIONED_PROJECTS.Attach(isp);

                if (isp != null)
                {
                    using (TransactionScope ts = new TransactionScope())
                    {
                        //dbContext = new PMGSYEntities();

                        List<IMS_PROPOSAL_TECH> ProposalTech = new List<IMS_PROPOSAL_TECH>();
                        ProposalTech = dbContext.IMS_PROPOSAL_TECH.Where(m=>m.IMS_PR_ROAD_CODE==proposalCode).ToList();
                        if (ProposalTech != null)
                        {
                            dbContext.IMS_PROPOSAL_TECH.DeleteMany(ProposalTech, dbContext);
                         //   dbContext.Entry(ProposalTech).State = EntityState.Deleted;                      
                        }


                        List<IMS_COST_COMPONENT> CostComponent = new List<IMS_COST_COMPONENT>();
                        CostComponent =dbContext.IMS_COST_COMPONENT.Where(m=>m.IMS_PR_ROAD_CODE==proposalCode).ToList();
                        if (CostComponent != null)
                        {
                            dbContext.IMS_COST_COMPONENT.DeleteMany(CostComponent, dbContext);
                           // dbContext.Entry(CostComponent).State = EntityState.Deleted;
                        }

                        List<IMS_PROPOSAL_FILES> ProposalFiles = new List<IMS_PROPOSAL_FILES>();
                        ProposalFiles =dbContext.IMS_PROPOSAL_FILES.Where(m=>m.IMS_PR_ROAD_CODE==proposalCode).ToList();
                        if (ProposalFiles != null)
                        {
                            dbContext.IMS_PROPOSAL_FILES.DeleteMany(ProposalFiles, dbContext);
                           // dbContext.Entry(ProposalFiles).State = EntityState.Deleted;
                        }

                        List<IMS_BENEFITED_HABS> BenefitedHabs = new List<IMS_BENEFITED_HABS>();
                        BenefitedHabs =dbContext.IMS_BENEFITED_HABS.Where(m=>m.IMS_PR_ROAD_CODE==proposalCode).ToList();
                        if (BenefitedHabs != null)
                        {
                            dbContext.IMS_BENEFITED_HABS.DeleteMany(BenefitedHabs, dbContext);
                          //  dbContext.Entry(BenefitedHabs).State = EntityState.Deleted;                          
                        }

                        List<IMS_TRAFFIC_INTENSITY> TrafficeIntensity = new List<IMS_TRAFFIC_INTENSITY>();
                        TrafficeIntensity =dbContext.IMS_TRAFFIC_INTENSITY.Where(m=>m.IMS_PR_ROAD_CODE==proposalCode).ToList();
                        if (TrafficeIntensity != null)
                        {
                            dbContext.IMS_TRAFFIC_INTENSITY.DeleteMany(TrafficeIntensity, dbContext);
                           // dbContext.Entry(TrafficeIntensity).State = EntityState.Deleted;                            
                        }


                        List<IMS_CBR_VALUE> CbrValue = new List<IMS_CBR_VALUE>();
                        CbrValue =dbContext.IMS_CBR_VALUE.Where(m=>m.IMS_PR_ROAD_CODE==proposalCode).ToList();
                     
                        if (CbrValue != null)
                        {
                            dbContext.IMS_CBR_VALUE.DeleteMany(CbrValue, dbContext);
                          //  dbContext.Entry(CbrValue).State = EntityState.Deleted;
                        }
                        

                        // Delete From omms.IMS_SANCTIONED_PROJECTS
                        dbContext.IMS_SANCTIONED_PROJECTS.Remove(isp);
                        dbContext.SaveChanges();
                        ts.Complete();
                        return true;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (InvalidOperationException ex)
            {
                var keys = ex.Data;
                var keystring = keys.Keys;
                var value = keys.Values;
                var SourceObj = ex.Source;
                ErrorLog.LogError(ex, "DeleteNonSanctionedAndNonDroppedProposalDAL()");
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;

            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteNonSanctionedAndNonDroppedProposalDAL()");
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex, HttpContext.Current);
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }
        #endregion


        #region Freeze Unfreeze
        public Array GetProposalForSRRDAFreezeUnfreezeDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();

                List<USP_FREEZE_UNFREEZE_PROPOSALS_Result> itemList = new List<USP_FREEZE_UNFREEZE_PROPOSALS_Result>();
               
                if (PMGSYSession.Current.RoleCode == 25)
                {
                    itemList = dbContext.USP_FREEZE_UNFREEZE_PROPOSALS(MAST_STATE_CODE, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR)).ToList<USP_FREEZE_UNFREEZE_PROPOSALS_Result>();
                }
                else
                {
                    itemList = dbContext.USP_FREEZE_UNFREEZE_PROPOSALS(PMGSYSession.Current.StateCode, (MAST_DISTRICT_CODE <= 0 ? 0 : MAST_DISTRICT_CODE), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR <= 0 ? 0 : IMS_YEAR)).ToList<USP_FREEZE_UNFREEZE_PROPOSALS_Result>();
                }
               


                totalRecords = itemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }



                itemList = itemList.OrderByDescending(x => x.MAST_STATE_NAME).ToList();
                totalColModel = null;
                return itemList.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] { 
                                    propDetails.MAST_STATE_NAME.Trim(),
                                    propDetails.MAST_DISTRICT_NAME.Trim(),                            
                                    propDetails.MAST_BLOCK_NAME.Trim(),

                                    propDetails.IMS_PACKAGE_ID.ToString(),                                    
                                    propDetails.MAST_PMGSY_SCHEME.ToString(),

                                   (propDetails.IMS_YEAR + "-" + (propDetails.IMS_YEAR + 1)).ToString(),
                                    //  propDetails.IMS_YEAR.ToString(),

                                    propDetails.ROAD_NAME.ToString(),
                                    propDetails.ROAD_LENGTH.ToString(),
                                    "0.00", // Expenditure

                                    propDetails.IMS_BRIDGE_NAME.ToString(),
                                    propDetails.BRIDGE_LENGTH.ToString(),

                                    //dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_PROGRESS_STATUS_FREEZE==null).Any()?"-":(dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_PROGRESS_STATUS_FREEZE=="Y").Any()?"Freezed":"Unfreezed"),
                                    //Below line added on 13-oct-2021 as per Pankaj Sir instructions 
                                    dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_FREEZE_STATUS==null).Any()?"-":(dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_FREEZE_STATUS=="Y").Any()?"UnFreezed":"Freezed"),

                                   //  dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_PROGRESS_STATUS_FREEZE==null).Any()? "<a href='#' title='Click here to Freeze Proposal Details' class='ui-icon ui-icon-unlocked ui-align-center' onClick=FreezeDetails('" +propDetails.IMS_PR_ROAD_CODE+ "'); return false;>FreezeUnfreeze</a>":(   dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_PROGRESS_STATUS_FREEZE=="Y").Any()? "<a href='#' title='Click here to Unfreeze Proposal Details' class='ui-icon ui-icon-locked ui-align-center' onClick=UnFreezeDetails('" +propDetails.IMS_PR_ROAD_CODE+ "'); return false;>FreezeUnfreeze</a>": "<a href='#' title='Click here to Freeze Proposal Details' class='ui-icon ui-icon-unlocked ui-align-center' onClick=FreezeDetails('" +propDetails.IMS_PR_ROAD_CODE+ "'); return false;>FreezeUnfreeze</a>"),
                                   //Below line added on 13-oct-2021 as per Pankaj Sir instructions 
                                     dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_FREEZE_STATUS==null).Any()? "<a href='#' title='Click here to Freeze Proposal Details' class='ui-icon ui-icon-locked ui-align-center' onClick=UnFreezeDetails('" +propDetails.IMS_PR_ROAD_CODE+ "'); return false;>FreezeUnfreeze</a>":(   dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE && x.IMS_FREEZE_STATUS=="Y").Any()? "<a href='#' title='Click here to freeze Proposal Details' class='ui-icon ui-icon-unlocked ui-align-center' onClick=UnFreezeDetails('" +propDetails.IMS_PR_ROAD_CODE+ "'); return false;>FreezeUnfreeze</a>": "<a href='#' title='Click here to unFreeze Proposal Details' class='ui-icon ui-icon-locked ui-align-center' onClick=UnFreezeDetails('" +propDetails.IMS_PR_ROAD_CODE+ "'); return false;>FreezeUnfreeze</a>"),

                                  //  "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"  + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>",
                                   // "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>" 
                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
              

                ErrorLog.LogError(ex, "ProposalDAL()GetProposalForSRRDAFreezeUnfreezeDAL()");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
               

                dbContext.Dispose();
            }
        }

        #endregion

        #region Reject Drop Order

        public bool AddRejectDropOrderDAL(DropOrderViewModel model, List<int> mrdselectedroadList, ref string message)
        {
            dbContext = new PMGSYEntities();

            CommonFunctions objCommon = new CommonFunctions();
            SanctionOrderFilterModel sanModel = new SanctionOrderFilterModel();
            SqlConnection storeConnection = null;
            SqlCommand command = null;
            try
            {
                string connString = ConfigurationManager.ConnectionStrings["PMGSYConnection"].ConnectionString;
                using (storeConnection = new SqlConnection(connString))
                {
                    storeConnection.Open();

                    using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Suppress))
                    {
                        //IMS_DROPPED_PROJECTS_PDF DropDetails = new IMS_DROPPED_PROJECTS_PDF();
                        //DropDetails.DROP_PROJ_PDF_CODE = dbContext.IMS_DROPPED_PROJECTS_PDF.Any() == false ? 1 : dbContext.IMS_DROPPED_PROJECTS_PDF.Max(p => p.DROP_PROJ_PDF_CODE) + 1;
                        //DropDetails.DROP_REQ_CODE = model.RequestCode;
                        //DropDetails.IMS_GENERATION_DATE = DateTime.Now;
                        //DropDetails.IMS_ORDER_DATE = objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);
                        //DropDetails.IMS_ORDER_NUMBER = model.IMS_DROP_ORDER_NUMBER;
                        //DropDetails.IMS_PDF_NAME = (dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_SHORT_CODE).FirstOrDefault()) + "_" + (dbContext.MASTER_YEAR.Where(m => m.MAST_YEAR_CODE == model.YearCode).Select(m => m.MAST_YEAR_TEXT).FirstOrDefault()) + "_BATCH" + model.BatchCode + "_" + (dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault()) + "_SCHEME" + model.PMGSYScheme + "_" + "PDF_" + DropDetails.DROP_PROJ_PDF_CODE + "_" + DateTime.Now.ToString("dd-MM-yyyy_hh_mm_tt") + ".pdf";
                        //DropDetails.DROP_ORDER_BY = "M";
                        //DropDetails.USERID = PMGSYSession.Current.UserId;
                        //DropDetails.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                        //dbContext.IMS_DROPPED_PROJECTS_PDF.Add(DropDetails);


                        IMS_PROPOSAL_DROP_REQUEST imsDropReq = dbContext.IMS_PROPOSAL_DROP_REQUEST.Where(d => d.DROP_REQ_CODE == model.RequestCode).FirstOrDefault();
                        if (imsDropReq != null)
                        {
                            imsDropReq.NO_WORKS_APPROVED = 0;//(imsDropReq.NO_WORKS_APPROVED.HasValue && Convert.ToInt32(imsDropReq.NO_WORKS_APPROVED) > 0) ? (Convert.ToInt32(imsDropReq.NO_WORKS_APPROVED) + mrdselectedroadList.Count) : mrdselectedroadList.Count;
                            imsDropReq.DROP_LETTER_NO = null; //model.IMS_DROP_ORDER_NUMBER;
                            imsDropReq.DROP_APPROVED_DATE = DateTime.Now; //objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);
                            dbContext.Entry(imsDropReq).State = EntityState.Modified;
                        }


                        foreach (var item in mrdselectedroadList)
                        {
                            IMS_PROPOSAL_DROP_REQUEST_DETAILS DropReq = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(d => d.IMS_PR_ROAD_CODE == item).FirstOrDefault();
                            DropReq.MORD_APPROVED = "N";
                            DropReq.APPROVED_DATE_TIME = DateTime.Now;
                            DropReq.APPROVED_USERID = PMGSYSession.Current.UserId;
                            DropReq.APPROVED_IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                            DropReq.DROP_PROJ_PDF_CODE = null;
                            dbContext.Entry(DropReq).State = EntityState.Modified;
                        }


                        //foreach (var item in mrdselectedroadList)
                        //{
                        //    int dropReason = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Where(c => c.DROP_REQ_CODE.Value == model.RequestCode).Select(x => x.DROP_REASON.Value).FirstOrDefault();

                        //    IMS_SANCTIONED_PROJECTS sanproject = dbContext.IMS_SANCTIONED_PROJECTS.Where(s => s.IMS_PR_ROAD_CODE == item).FirstOrDefault();
                        //    sanproject.IMS_SANCTIONED = "D";

                        //    sanproject.IMS_REASON = ((dropReason == 3181) || (dropReason == 3182)) ? dropReason : 3183;

                        //    sanproject.IMS_SANCTIONED_DATE = objCommon.GetStringToDateTime(model.IMS_DROP_ORDER_DATE);
                        //    dbContext.Entry(sanproject).State = EntityState.Modified;
                        //}




                        //sanModel.State = model.StateCode;
                        //sanModel.Batch = model.BatchCode;
                        //sanModel.Stream = model.StreamCode;
                        //sanModel.PMGSYScheme = model.PMGSYScheme;
                        //sanModel.Year = model.YearCode;
                        //sanModel.DropOrderDate = objCommon.GetDateTimeToString(DropDetails.IMS_ORDER_DATE.Value);
                        //sanModel.DropOrderNo = DropDetails.IMS_ORDER_NUMBER;
                        //sanModel.StateName = dbContext.MASTER_STATE.Where(m => m.MAST_STATE_CODE == model.StateCode).Select(m => m.MAST_STATE_NAME).FirstOrDefault();
                        //sanModel.CollaborationName = dbContext.MASTER_FUNDING_AGENCY.Where(m => m.MAST_FUNDING_AGENCY_CODE == model.StreamCode).Select(m => m.MAST_FUNDING_AGENCY_NAME).FirstOrDefault();
                        //sanModel.BatchName = dbContext.MASTER_BATCH.Where(m => m.MAST_BATCH_CODE == model.BatchCode).Select(m => m.MAST_BATCH_NAME).FirstOrDefault();


                        dbContext.SaveChanges();
                        message = "Drop Order Rejected Successfully.";
                        // GenerateDropOrderFile(sanModel, DropDetails, model.RequestCode);

                        ts.Complete();
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                message = "Error occurred while processing your request.";
                ErrorLog.LogError(ex, "AddDropOrderDAL()");
                return false;

            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public bool DeleteReqDAL(int ReqCode)
        {
            dbContext = new PMGSYEntities();
            try
            {
                IMS_PROPOSAL_DROP_REQUEST_DETAILS reqMaster = dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Find(ReqCode);
                dbContext.IMS_PROPOSAL_DROP_REQUEST_DETAILS.Remove(reqMaster);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "DeleteReqDAL()");
                return false;
            }
            finally
            {
                dbContext.Dispose();
            }
        }


        #endregion
		
		
        #region Freeze Unfreeze New added on 27-12-2021 by Srishti Tyagi

        public Array GetFreezeUnfreezeDAL(int stateCode, int districtCode, int? page, int? rows, string sidx, string sord, out Int32 totalRecords, out List<int> SelectedIdList)
        {

            try
            {
                dbContext = new Models.PMGSYEntities();

                List<USP_FREEZ_AGREEMENT_Result> itemList = new List<USP_FREEZ_AGREEMENT_Result>();

                if (PMGSYSession.Current.RoleCode == 25)
                {
                    itemList = dbContext.USP_FREEZ_AGREEMENT(stateCode, (districtCode <= 0 ? 0 : districtCode)).ToList<USP_FREEZ_AGREEMENT_Result>();

                }

                totalRecords = itemList.Count();

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        itemList = itemList.OrderBy(x => x.State).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                    else
                    {
                        itemList = itemList.OrderByDescending(x => x.State).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                    }
                }
                else
                {
                    itemList = itemList.OrderBy(x => x.State).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt32(rows)).ToList();
                }

                List<int> SelectedIdListInt = new List<int>();
                SelectedIdList = new List<int>();

                int[] roadCode = itemList.Select(y => y.SANCTION_CODE).ToArray();

                foreach (int item in roadCode)
                {
                    SelectedIdList.Add((dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == item && x.IMS_FREEZE_STATUS == "F")).Select(z => z.IMS_PR_ROAD_CODE).FirstOrDefault());
                }

                var result = itemList.Select(propDetails => new
                {
                    propDetails.State,
                    propDetails.District,
                    propDetails.Block,
                    propDetails.SANCTION_YEAR,
                    propDetails.Road_Name,
                    propDetails.Bridge_Name,
                    propDetails.Sanctioned_Length,
                    propDetails.Is_Awarded,
                    propDetails.Completed_Length,
                    propDetails.Expenditure_till_date__Lakhs_,
                    propDetails.SANCTION_CODE,
                    flag = (dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == propDetails.SANCTION_CODE && x.IMS_FREEZE_STATUS == "U").Select(z => z.IMS_FREEZE_STATUS).FirstOrDefault())

                }).ToArray();

                return result.Select(lstcontractorDetails => new
                {
                    id = lstcontractorDetails.State.ToString(),
                    cell = new[] {  
                                    lstcontractorDetails.SANCTION_CODE.ToString(),
                                    lstcontractorDetails.State.Trim(),
                                    lstcontractorDetails.District.Trim(),
                                    lstcontractorDetails.Block.Trim(),
                                    lstcontractorDetails.SANCTION_YEAR.Trim(),
                                    lstcontractorDetails.Road_Name.Trim(),
                                    lstcontractorDetails.Bridge_Name.Trim(),
                                    lstcontractorDetails.Sanctioned_Length.ToString(),
                                    lstcontractorDetails.Is_Awarded.ToString(), 
                                    lstcontractorDetails.Completed_Length.ToString(),
                                    lstcontractorDetails.Expenditure_till_date__Lakhs_.ToString(),  
                                    lstcontractorDetails.flag + "$" + lstcontractorDetails.SANCTION_CODE.ToString()

                    }
                }).ToArray();
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                ErrorLog.LogError(ex, "ProposalDAL()GetFreezeUnfreezeDAL()");
                SelectedIdList = new List<int>();
                return null;
            }
        }


        #endregion



        public List<SelectListItem> RoadCodeCheck(string id)
        {
            try
            {
                List<SelectListItem> roadcode = new List<SelectListItem>();
                dbContext = new PMGSYEntities();

                var road = dbContext.OMMAS_GEPNIC_INTEGRATION.Where(s => s.PACKAGE_NUMBER.Equals(id) && s.GEPNIC_NREGA.Equals("G")).Select(s => new GepnicProposalSearch { Roadcode = s.ROAD_CODE }).ToList();


                foreach (var item in road)
                {
                    roadcode.Add(new SelectListItem { Value = item.Roadcode.ToString().Trim() });
                }

                return roadcode;
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "ProposalDAL.RoadCodeCheck()");
                return null;
            }
        }

        #region Proposals for PMGSY Scheme 5 (Vibrant Village) - Srishti Tyagi 27/06/2023

        public Array GetProposalsVibrantVillageDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int MAST_BLOCK_CODE, int IMS_BATCH, int IMS_STREAMS, String ProposalType, int MAST_DPIU_CODE, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, string Filters, out ProposalColumnsTotal totalColModel)
        {
            try
            {
                dbContext = new Models.PMGSYEntities();
                List<pr_get_proposals_Result> itemList = new List<pr_get_proposals_Result>();

                string PTAStatus = string.Empty;
                string STAStatus = string.Empty;
                string MRDStatus = string.Empty;
                string Status = string.Empty;

                string level = IMS_PROPOSAL_STATUS.Substring(0, 1);
                string flag = IMS_PROPOSAL_STATUS.Substring(1);

                // Added By to unlock Proposal Technology Details
                bool is_TechnologyUnlock = false;
                DateTime serverTime = DateTime.Now; // gives you current Time in server timeZone
                DateTime utcTime = serverTime.ToUniversalTime(); // convert it to Utc using timezone setting of server computer
                TimeZoneInfo tzi = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
                DateTime localTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, tzi);

                switch (level)
                {
                    case "S":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "N";
                                MRDStatus = "N";
                                Status = "D";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "U";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "P":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "Y";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "N";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "S";
                                break;
                            case "U":
                                PTAStatus = "U";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "%";
                                break;
                        }
                        break;
                    case "M":
                        switch (flag)
                        {
                            case "Y":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "Y";
                                Status = "%";
                                break;
                            case "N":
                                PTAStatus = "%";
                                STAStatus = "Y";
                                MRDStatus = "N";
                                Status = "%";
                                break;
                            case "U":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "U";
                                Status = "%";
                                break;
                            case "R":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "R";
                                Status = "%";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "D";
                                Status = "%";
                                break;
                        }
                        break;
                    case "D":
                        switch (flag)
                        {
                            case "E":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "E";
                                break;
                            case "H":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "H";
                                break;
                            case "D":
                                PTAStatus = "%";
                                STAStatus = "%";
                                MRDStatus = "%";
                                Status = "D";
                                break;
                        }
                        break;
                    default:
                        PTAStatus = "%";
                        STAStatus = "%";
                        MRDStatus = "%";
                        Status = "%";
                        break;

                }


                short roleCode = dbContext.UM_User_Master.Where(m => m.UserID == PMGSYSession.Current.UserId).Select(m => m.DefaultRoleID).FirstOrDefault();

                var listProposals = dbContext.USP_GET_PROPOSAL_LIST(4, MAST_STATE_CODE, (PMGSYSession.Current.DistrictCode < 0 ? 0 : PMGSYSession.Current.DistrictCode), (MAST_BLOCK_CODE <= 0 ? 0 : MAST_BLOCK_CODE), (IMS_YEAR < 0 ? 0 : IMS_YEAR), (IMS_BATCH < 0 ? 0 : IMS_BATCH), (IMS_STREAMS < 0 ? 0 : IMS_STREAMS), 0, PMGSYSession.Current.AdminNdCode, 0, "%", "%", Status, PTAStatus, STAStatus, MRDStatus, "P", (IMS_UPGRADE_CONNECT == "0" ? "%" : IMS_UPGRADE_CONNECT), PMGSYSession.Current.PMGSYScheme, roleCode).ToList();
                IQueryable<USP_GET_PROPOSAL_LIST_Result> query = listProposals.AsQueryable<USP_GET_PROPOSAL_LIST_Result>();
                totalRecords = listProposals.Count();

                ProposalColumnsTotal colTotal = new ProposalColumnsTotal();
                colTotal.TOT_COST = listProposals.Sum(m => m.TOTAL_COST).HasValue ? listProposals.Sum(m => m.TOTAL_COST).Value : 0; ;//listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_HAB1000 = listProposals.Sum(m => m.POP1000);
                colTotal.TOT_HAB250 = listProposals.Sum(m => m.POP250);
                colTotal.TOT_HAB499 = listProposals.Sum(m => m.POP499);
                colTotal.TOT_HAB999 = listProposals.Sum(m => m.POP999);
                colTotal.TOT_HABS = listProposals.Sum(m => m.TOTAL_HABS).HasValue ? listProposals.Sum(m => m.TOTAL_HABS).Value : 0;
                colTotal.TOT_HIGHER_SPEC = listProposals.Sum(m => m.HIGHER_SPECS);
                colTotal.TOT_MANE_COST = listProposals.Sum(m => m.MAINT_AMT).HasValue ? listProposals.Sum(m => m.MAINT_AMT).Value : 0;
                colTotal.TOT_MORD_COST = listProposals.Sum(m => m.ROAD_AMT).HasValue ? listProposals.Sum(m => m.ROAD_AMT).Value : 0;
                colTotal.TOT_PAV_LENGTH = listProposals.Sum(m => m.ROAD_LENGTH).HasValue ? listProposals.Sum(m => m.ROAD_LENGTH).Value : 0;
                colTotal.TOT_RENEWAL_COST = listProposals.Sum(m => m.RENEWAL_AMT);
                colTotal.TOT_STATE_COST = listProposals.Sum(m => m.ROAD_STATE).HasValue ? listProposals.Sum(m => m.ROAD_STATE).Value : 0;

                colTotal.STATE_SHARE_COST = listProposals.Sum(m => m.STATE_SHARE_2015);
                colTotal.MORD_SHARE_COST = listProposals.Sum(m => m.MORD_SHARE_2015);
                colTotal.TOTAL_STATE_SHARE = listProposals.Sum(m => m.TOTAL_STATE_SHARE);
                colTotal.TOTAL_SHARE_COST = listProposals.Sum(m => m.TOTAL_SHARE_COST);

                totalColModel = colTotal;

                if (sidx.Trim() != string.Empty)
                {
                    if (sord.ToString() == "asc")
                    {
                        query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                    else
                    {
                        query = query.OrderByDescending(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                    }
                }
                else
                {
                    query = query.OrderBy(x => x.MAST_STATE_NAME).Skip(Convert.ToInt32(page * rows)).Take(Convert.ToInt16(rows));
                }

                // Added By to unlock Proposal Technology Details
                foreach (var propDetails in query)
                {
                    //is_TechnologyUnlock
                    var trnsNo = (from x in dbContext.IMS_UNLOCK_DETAILS
                                  where x.IMS_UNLOCK_TABLE.Equals("PT")
                                          && x.MAST_PMGSY_SCHEME == PMGSYSession.Current.PMGSYScheme
                                          && x.MAST_STATE_CODE == PMGSYSession.Current.StateCode
                                          && (x.MAST_DISTRICT_CODE == null) ? true : x.MAST_DISTRICT_CODE == PMGSYSession.Current.DistrictCode
                                          && ((x.MAST_BLOCK_CODE == null) ? true : x.MAST_BLOCK_CODE == propDetails.MAST_BLOCK_CODE)
                                          && ((x.IMS_PR_ROAD_CODE == null) ? true : x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE)
                                          && ((x.IMS_YEAR == null) ? true : (x.IMS_YEAR.ToString().Equals(propDetails.IMS_YEAR.Substring(0, 4))))
                                          && ((x.IMS_BATCH == null) ? true : x.IMS_BATCH == propDetails.IMS_BATCH)
                                          && (x.IMS_UNLOCK_START_DATE <= localTime)
                                          && (x.IMS_UNLOCK_END_DATE >= localTime)
                                  select new
                                  {
                                      x.IMS_TRANSACTION_NO
                                  }).ToList();
                }

                return query.Select(propDetails => new
                {
                    id = propDetails.IMS_PR_ROAD_CODE.ToString(),
                    cell = new[] {
                                    propDetails.MAST_DISTRICT_NAME.Trim(),
                                    propDetails.MAST_BLOCK_NAME.Trim(),
                                    propDetails.IMS_PACKAGE_ID.ToString(),
                                    propDetails.IMS_YEAR.ToString(),
                                    propDetails.ROAD_NAME.ToString(),
                                    propDetails.POP1000.ToString(),
                                    propDetails.POP999.ToString(),
                                    propDetails.POP499.ToString(),
                                    propDetails.POP250.ToString(),
                                    propDetails.TOTAL_HABS.ToString(),
                                    propDetails.ROAD_LENGTH.ToString() ,
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.ROAD_STATE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.HIGHER_SPECS),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_COST),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MAINT_AMT),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.RENEWAL_AMT),2).ToString(),
                                    propDetails.FUND_SHARING_RATIO.ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.STATE_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.MORD_SHARE_2015),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_STATE_SHARE),2).ToString(),
                                    Math.Round(Convert.ToDecimal(propDetails.TOTAL_SHARE_COST),2).ToString(),
                                    propDetails.STAGE_CONST == null ? "-" : propDetails.STAGE_CONST.ToString(),
                                    propDetails.STA_SCRUTINY.ToString(),
                                    propDetails.PTA_SCRUTINY.ToString(),
                                    propDetails.PROPOSAL_STATUS.ToString(),

                                    (   (propDetails.IMS_ISBENEFITTED_HABS.Trim() != "Y")
                                        ? "<strong>NA</strong>"
                                        : ( (propDetails.IMS_SANCTIONED == "Y") || (propDetails.IMS_SANCTIONED == "D"))
                                                   ? "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                                   : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='EditHabitationsDetails(\""  +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"                                                        + propDetails.IMS_LOCK_STATUS })  + "\"); return false;'>Habitation Details</a>"
                                        ),

                                    ( propDetails.IMS_LOCK_STATUS == "M" )
                                        ? propDetails.IMS_TRAFFIC_TYPE != null
                                            ? "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center'  onclick='EditTrafficDetails(\"" +  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>Traffic Intensity</a>"
                                            : "<strong>NA</strong>"
                                        : ( propDetails.IMS_TRAFFIC_TYPE != null )
                                            ? (propDetails.IMS_LOCK_STATUS.ToUpper() == "N")
                                                ?   ((dbContext.IMS_TRAFFIC_INTENSITY.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any())
                                                    ? "<a href='#' class='ui-icon ui-icon-note ui-align-center'  onclick='EditTrafficDetails(\""
                                                    : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center'  onclick='EditTrafficDetails(\"")+  URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>Traffic Intensity</a>"
                                                : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>"
                                            : "<strong>NA</strong>",



                                    ( propDetails.IMS_LOCK_STATUS == "M" )
                                        ? "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center'  onclick='EditCBRDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>CBR Details</a>"
                                        : ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N")
                                            ? ((dbContext.IMS_CBR_VALUE.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any())
                                                ?  "<a href='#' class='ui-icon ui-icon-note ui-align-center'  onclick='EditCBRDetails(\""
                                                : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center'  onclick='EditCBRDetails(\"" )+ URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) + "\"); return false;'>CBR Details</a>"
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                   ( propDetails.IMS_LOCK_STATUS == "M" )
                                        ?  "<a href='#' class='ui-icon ui-icon-unlocked ui-align-center' onclick='UploadFile(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>"
                                        : ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N")
                                            ? ((dbContext.IMS_PROPOSAL_FILES.Where(a=> a.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any())
                                                ? "<a href='#' class='ui-icon ui-icon-note ui-align-center'  onclick='UploadFile(\""
                                                : "<a href='#' class='ui-icon ui-icon-plusthick ui-align-center' onclick='UploadFile(\"" )+ propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "\"); return false;'>Upload</a>"
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                   (propDetails.IMS_LOCK_STATUS_TECH.ToUpper() == "M" || propDetails.IMS_LOCK_STATUS.ToUpper() =="M" ||  propDetails.IMS_LOCK_STATUS.ToUpper() =="N")
                                     ? "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='AddTechnologyDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString().Trim() }) +  "\"); return false;'>Add Technology Details</a>"
                                      : "<a href='#' title='Locked' class='ui-icon ui-icon-locked ui-align-center' </a>" ,

                               //View Details
                                        "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='ShowDetails(\"" + propDetails.IMS_PR_ROAD_CODE.ToString().Trim() + "$"  + propDetails.IMS_LOCK_STATUS + "\"); return false;'>Show Details</a>",                                    
                              //Edit Proposal
                                    ( propDetails.IMS_LOCK_STATUS == "M" )
                                        ?
                                            ((PMGSYSession.Current.PMGSYScheme == 4)
                                            ? "<a href='#' title='Click here to edit the proposal' class='ui-icon ui-icon-unlocked ui-align-center' onClick='EditDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>"
                                            : "<a href='#' title='Click here to Edit Unlocked Proposal' class='ui-icon ui-icon-unlocked ui-align-center' onClick='EditUnlockedProposal(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>" )
                                        :  ( propDetails.IMS_LOCK_STATUS.ToUpper() == "N")
                                            ? "<a href='#' title='Click here to edit the proposal' class='ui-icon ui-icon-pencil ui-align-center' onClick='EditDetails(\"" + URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Edit Details</a>"
                                            : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",


                                   ( (propDetails.IMS_ISCOMPLETED == "E" || propDetails.IMS_ISCOMPLETED == "H") && propDetails.IMS_LOCK_STATUS.ToUpper() == "N" )
                                        ? "<a href='#' title='Click here to delete the proposal' class='ui-icon ui-icon-trash ui-align-center' onClick='DeleteDetails(\""+ URLEncrypt.EncryptParameters(new string[] { propDetails.IMS_PR_ROAD_CODE.ToString()  })  +"\"); return false;'>Show Details</a>"
                                        : "<a href='#' class='ui-icon ui-icon-locked ui-align-center'>",

                                    propDetails.IMS_ISCOMPLETED ,

                                    //upload pdf docs
                                    
                                    dbContext.IMS_SANCTION_FOREST_CLEARANCE.Where(x => x.IMS_PR_ROAD_CODE == propDetails.IMS_PR_ROAD_CODE).Any() ?
                                    "<a href='#'  class='ui-icon ui-icon-zoomin ui-align-center' onClick='GetPDFUploadView(\"" + URLEncrypt.EncryptParameters(new string[] { "IMS_PR_ROAD_CODE =" + propDetails.IMS_PR_ROAD_CODE.ToString()})  +","
                                    + "yes" +
                                    "\"); return false;'>View Uploaded File</a>"
                                        :
                                        "<a href='#'  class='ui-icon ui-icon-plusthick ui-align-center' onClick='GetPDFUploadView(\"" + URLEncrypt.EncryptParameters(new string[] { "IMS_PR_ROAD_CODE =" + propDetails.IMS_PR_ROAD_CODE.ToString()})  +"\"); return false;'>Upload File</a>"

                   }
                }).ToArray();
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "GetProposalsVibrantVillageDAL().DAL");
                totalRecords = 0;
                totalColModel = null;
                return null;
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string SaveRoadProposalPMGSY5DAL(IMS_SANCTIONED_PROJECTS objProposal, ProposalViewModel ims_sanctioned_projects)
        {
            dbContext = new Models.PMGSYEntities();
            try
            {
                Int32? MaxID;
                using (TransactionScope ts = new TransactionScope())
                {
                    if (!dbContext.IMS_SANCTIONED_PROJECTS.Any())
                    {
                        MaxID = 0;
                    }
                    else
                    {
                        MaxID = (from c in dbContext.IMS_SANCTIONED_PROJECTS select (Int32?)c.IMS_PR_ROAD_CODE ?? 0).Max();
                    }

                    objProposal.IMS_PR_ROAD_CODE = Convert.ToInt32(MaxID) + 1;
                    objProposal.USERID = PMGSYSession.Current.UserId;
                    objProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    objProposal.IMS_UPGRADE_CONNECT = PMGSYSession.Current.PMGSYScheme == 2 ? "U" : objProposal.IMS_UPGRADE_CONNECT;

                    dbContext.IMS_SANCTIONED_PROJECTS.Add(objProposal);

                    // For Stage 2 Propsoals Copy the Habitation Details of Stage 1 to Stage 2
                    if (objProposal.IMS_STAGE_PHASE == "S2")
                    {
                        try
                        {
                            CopyHabitationDetails(Convert.ToInt32(objProposal.IMS_STAGED_ROAD_ID), objProposal.IMS_PR_ROAD_CODE);
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.LogError(ex, "SaveRoadProposalDAL().StagePhase.S2");
                            return "Proposal Saved Successfully, But Habitation Details are not Mapped.";
                        }
                    }

                    IMS_COST_COMPONENT imsCostComponent = new IMS_COST_COMPONENT();
                    imsCostComponent.IMS_COMPONENT_ID = (dbContext.IMS_COST_COMPONENT.Any() ? dbContext.IMS_COST_COMPONENT.Max(z => z.IMS_COMPONENT_ID) : 0) + 1;
                    imsCostComponent.IMS_PR_ROAD_CODE = objProposal.IMS_PR_ROAD_CODE;
                    imsCostComponent.IMS_CLEARING = ims_sanctioned_projects.ImsClearing;
                    imsCostComponent.IMS_EXCAVATION = ims_sanctioned_projects.ImsExcavation;
                    imsCostComponent.IMS_FILLING = ims_sanctioned_projects.ImsFilling;
                    imsCostComponent.IMS_SUB_GRADE = ims_sanctioned_projects.ImsSubGrade;
                    imsCostComponent.IMS_SHOULDER = ims_sanctioned_projects.ImsShoulder;
                    imsCostComponent.IMS_GRANULAR_SUB_BASE = ims_sanctioned_projects.ImsGranularSubBase;
                    imsCostComponent.IMS_SOIL_AGGREGATE = ims_sanctioned_projects.ImsSoilAggregate;
                    imsCostComponent.IMS_WBM_GRADE_II = ims_sanctioned_projects.ImsWBMGradeII;
                    imsCostComponent.IMS_WBM_GRADE_III = ims_sanctioned_projects.ImsWBMGradeIII;
                    imsCostComponent.IMS_WMM = ims_sanctioned_projects.ImsWMM;
                    imsCostComponent.IMS_PRIME_COAT = ims_sanctioned_projects.ImsPrimeCoat;
                    imsCostComponent.IMS_TACK_COAT = ims_sanctioned_projects.ImsTackCoat;
                    imsCostComponent.IMS_BM_DBM = ims_sanctioned_projects.ImsBMDBM;
                    imsCostComponent.IMS_OGPC_SDBC_BC = ims_sanctioned_projects.ImsOGPC_SDBC_BC;
                    imsCostComponent.IMS_SEAL_COAT = ims_sanctioned_projects.ImsSealCoat;
                    imsCostComponent.IMS_SURFACE_DRESSING = ims_sanctioned_projects.ImsSurfaceDressing;
                    imsCostComponent.IMS_DRY_LEAN_CONCRETE = ims_sanctioned_projects.ImsDryLeanConcrete;
                    imsCostComponent.IMS_CONCRETE_PAVEMENT = ims_sanctioned_projects.ImsConcretePavement;

                    imsCostComponent.USERID = PMGSYSession.Current.UserId;
                    imsCostComponent.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    dbContext.IMS_COST_COMPONENT.Add(imsCostComponent);

                    dbContext.SaveChanges();
                    ts.Complete();
                }
                return string.Empty;
            }
            catch (DbEntityValidationException e)
            {
                ErrorLog.LogError(e, "SaveRoadProposalPMGSY3DAL(DbEntityValidationException ex).DAL");
                ModelStateDictionary modelstate = new ModelStateDictionary();

                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        modelstate.AddModelError(ve.ErrorMessage, ve.ErrorMessage);
                    }
                }
                return new CommonFunctions().FormatErrorMessage(modelstate);
            }
            catch (DbUpdateException ex)
            {
                ErrorLog.LogError(ex, "SaveRoadProposalPMGSY3DAL(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "SaveRoadProposalDAL(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "SaveRoadProposalPMGSY3DAL().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        public string UpdateRoadProposalDALPMGSY5(Models.Proposal.ProposalViewModel ims_sanctioned_projects)
        {
            try
            {
                dbContext = new PMGSYEntities();

                decimal? totalCnLength = 0;

                totalCnLength = (from c in dbContext.PLAN_ROAD
                                 where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                 select c.PLAN_RD_TOTAL_LEN).First();

                decimal? ProposedLength = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                           where c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                           && c.IMS_PROPOSAL_TYPE == "P"
                                           && c.IMS_SANCTIONED != "D"
                                           && ((c.IMS_STAGE_PHASE == null ? "1" : c.IMS_STAGE_PHASE) != (c.IMS_STAGE_PHASE == null ? "2" : "S2"))    //condition added by shyam
                                           select (decimal?)c.IMS_PAV_LENGTH).Sum();

                decimal? remainingLength = Convert.ToDecimal(totalCnLength) - Convert.ToDecimal(ProposedLength);

                if (ims_sanctioned_projects.IMS_PAV_LENGTH > (totalCnLength + (totalCnLength * Convert.ToDecimal(0.5))))
                {
                    return "variation in Proposed Length can be upto 50 % CN Length";
                }

                IMS_SANCTIONED_PROJECTS objProposal = new IMS_SANCTIONED_PROJECTS();

                //string StateShortCode = dbContext.MASTER_STATE.Where(a => a.MAST_STATE_CODE == PMGSY.Extensions.PMGSYSession.Current.StateCode).Select(c => c.MAST_STATE_SHORT_CODE).First();

                objProposal = dbContext.IMS_SANCTIONED_PROJECTS.Find(ims_sanctioned_projects.IMS_PR_ROAD_CODE);

                #region Assign Properties

                objProposal.EXISTING_CARRIAGEWAY_WIDTH = ims_sanctioned_projects.EXISTING_CARRIAGEWAY_WIDTH;
                objProposal.EXISTING_CARRIAGEWAY_PUC = ims_sanctioned_projects.EXISTING_CARRIAGEWAY_PUC;

                objProposal.MAST_PMGSY_SCHEME = PMGSYSession.Current.PMGSYScheme;
                objProposal.IMS_PR_ROAD_CODE = ims_sanctioned_projects.IMS_PR_ROAD_CODE;

                objProposal.IMS_UPGRADE_CONNECT = ims_sanctioned_projects.IMS_UPGRADE_CONNECT;

                // Upgradation Proposal
                //if (ims_sanctioned_projects.IMS_UPGRADE_CONNECT.ToUpper() == "U")
                //{
                objProposal.MAST_EXISTING_SURFACE_CODE = ims_sanctioned_projects.MAST_EXISTING_SURFACE_CODE;

                if (ims_sanctioned_projects.IMS_ISBENEFITTED_HABS != null)
                {
                    // is Habitations Benefited
                    if (ims_sanctioned_projects.IMS_ISBENEFITTED_HABS.ToUpper() == "N")
                    {
                        objProposal.IMS_ISBENEFITTED_HABS = ims_sanctioned_projects.IMS_ISBENEFITTED_HABS;
                        objProposal.IMS_HABS_REASON = ims_sanctioned_projects.IMS_HABS_REASON;
                    }
                    else
                    {
                        objProposal.IMS_ISBENEFITTED_HABS = ims_sanctioned_projects.IMS_ISBENEFITTED_HABS;
                    }
                }
                //}

                // New Package or Exising Package
                if (ims_sanctioned_projects.IMS_EXISTING_PACKAGE.ToUpper() == "N")
                {
                    objProposal.IMS_PACKAGE_ID = ims_sanctioned_projects.PACKAGE_PREFIX + ims_sanctioned_projects.IMS_PACKAGE_ID;
                }
                else
                {
                    objProposal.IMS_PACKAGE_ID = ims_sanctioned_projects.EXISTING_IMS_PACKAGE_ID;
                }

                // Staged Proposal or Complete Proposal
                if (ims_sanctioned_projects.IMS_IS_STAGED.ToUpper() == "S")
                {
                    objProposal.IMS_IS_STAGED = "S";
                    //Stage I Proposal
                    if (ims_sanctioned_projects.IMS_STAGE_PHASE == "1")
                    {
                        objProposal.IMS_STAGE_PHASE = "S1";
                    }
                    if (ims_sanctioned_projects.IMS_STAGE_PHASE == "2")
                    {
                        objProposal.IMS_STAGE_PHASE = "S2";

                        //IMS_YEAR_Staged
                        var data = (from c in dbContext.IMS_SANCTIONED_PROJECTS
                                    where
                                        c.IMS_PACKAGE_ID == ims_sanctioned_projects.Stage_2_Package_ID
                                        &&
                                        c.IMS_YEAR == ims_sanctioned_projects.Stage_2_Year
                                        &&
                                        c.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE
                                    select new
                                    {
                                        Package_ID = ims_sanctioned_projects.Stage_2_Package_ID,
                                        Year = ims_sanctioned_projects.Stage_2_Year,
                                        Road_ID = c.IMS_PR_ROAD_CODE
                                    }).ToList();
                        // Self Referencing Columns
                        foreach (var RowData in data)
                        {
                            objProposal.IMS_STAGED_YEAR = RowData.Year;
                            objProposal.IMS_STAGED_PACKAGE_ID = RowData.Package_ID.ToString();
                            objProposal.IMS_STAGED_ROAD_ID = RowData.Road_ID;
                        }

                        //validation for checking the total length of stage 2 proposals should not exceed the stage 1 proposal

                        if (dbContext.IMS_SANCTIONED_PROJECTS.Any(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != objProposal.IMS_PR_ROAD_CODE))
                        {
                            decimal sumOfPavLength = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != ims_sanctioned_projects.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH) == null ? 0 : dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2" && m.IMS_PR_ROAD_CODE != ims_sanctioned_projects.IMS_PR_ROAD_CODE).Sum(m => m.IMS_PAV_LENGTH);

                            sumOfPavLength += ims_sanctioned_projects.IMS_PAV_LENGTH.Value;

                            if (sumOfPavLength > (dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_PR_ROAD_CODE == objProposal.IMS_STAGED_ROAD_ID.Value).Select(m => m.IMS_PAV_LENGTH).FirstOrDefault()))
                            {
                                var stage2Roads = dbContext.IMS_SANCTIONED_PROJECTS.Where(m => m.IMS_STAGED_ROAD_ID == ims_sanctioned_projects.IMS_STAGED_ROAD_ID && m.IMS_STAGE_PHASE == "S2").Select(x => new { imsYear = x.IMS_YEAR, imsPackage = x.IMS_PACKAGE_ID, blockName = x.MASTER_BLOCK.MAST_BLOCK_NAME }).ToList();

                                string stage2Year = string.Join(",", stage2Roads[0].imsYear);
                                string stage2Package = string.Join(",", stage2Roads[0].imsPackage);
                                string stage2Block = string.Join(",", stage2Roads[0].blockName);

                                return "Sum of Pavement Length of Stage 2 Proposals is exceeding the Pavement Length of Stage 1 Proposal.<br/> Package=[" + stage2Package + "]     Year=[" + stage2Year + "]     Block=[" + stage2Block + "]";
                            }
                        }

                        CopyHabitationDetails(objProposal.IMS_STAGED_ROAD_ID.Value, objProposal.IMS_PR_ROAD_CODE);
                    }
                }
                else // Complete Proposal
                {
                    objProposal.IMS_IS_STAGED = "C";
                }

                objProposal.IMS_YEAR = ims_sanctioned_projects.IMS_YEAR;
                objProposal.IMS_BATCH = ims_sanctioned_projects.IMS_BATCH;
                objProposal.MAST_BLOCK_CODE = ims_sanctioned_projects.MAST_BLOCK_CODE;

                //FUNDING AGENCY
                objProposal.IMS_COLLABORATION = ims_sanctioned_projects.IMS_COLLABORATION;
                //STREAM
                if (ims_sanctioned_projects.isPaymentDone == false)
                {
                    objProposal.IMS_STREAMS = ims_sanctioned_projects.IMS_STREAMS;
                }
                // Link/Through Route Name
                objProposal.PLAN_CN_ROAD_CODE = ims_sanctioned_projects.PLAN_CN_ROAD_CODE != null ? Convert.ToInt32(ims_sanctioned_projects.PLAN_CN_ROAD_CODE) : 0;

                objProposal.IMS_ROAD_FROM = ims_sanctioned_projects.IMS_ROAD_FROM;
                objProposal.IMS_ROAD_TO = ims_sanctioned_projects.IMS_ROAD_TO;
                objProposal.IMS_ROAD_NAME = dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_CN_ROAD_NUMBER).FirstOrDefault() + "-" + dbContext.PLAN_ROAD.Where(m => m.PLAN_CN_ROAD_CODE == ims_sanctioned_projects.PLAN_CN_ROAD_CODE).Select(m => m.PLAN_RD_NAME).FirstOrDefault();

                objProposal.IMS_PARTIAL_LEN = ims_sanctioned_projects.IMS_PARTIAL_LEN;
                objProposal.IMS_PAV_LENGTH = ims_sanctioned_projects.IMS_PAV_LENGTH != null ? Convert.ToDecimal(ims_sanctioned_projects.IMS_PAV_LENGTH) : 0;
                objProposal.IMS_CC_LENGTH = ims_sanctioned_projects.IMS_CC_LENGTH;
                objProposal.IMS_BT_LENGTH = ims_sanctioned_projects.IMS_BT_LENGTH;

                objProposal.IMS_NO_OF_CDWORKS = ims_sanctioned_projects.IMS_NO_OF_CDWORKS == null ? 0 : Convert.ToInt32(ims_sanctioned_projects.IMS_NO_OF_CDWORKS);
                objProposal.IMS_ZP_RESO_OBTAINED = ims_sanctioned_projects.IMS_ZP_RESO_OBTAINED;

                // All Costs Estimated
                objProposal.IMS_PAV_EST_COST = ims_sanctioned_projects.IMS_SANCTIONED_PAV_AMT;
                objProposal.IMS_CD_WORKS_EST_COST = ims_sanctioned_projects.IMS_SANCTIONED_CD_AMT;
                objProposal.IMS_PROTECTION_WORKS = ims_sanctioned_projects.IMS_SANCTIONED_PW_AMT;
                objProposal.IMS_OTHER_WORK_COST = ims_sanctioned_projects.IMS_SANCTIONED_OW_AMT;
                objProposal.IMS_STATE_SHARE = Convert.ToDecimal(ims_sanctioned_projects.IMS_STATE_SHARE);

                //PMGSY Scheme-II
                objProposal.IMS_IS_HIGHER_SPECIFICATION = ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION;
                if (ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION != null && ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION.Equals("Y"))
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = ims_sanctioned_projects.IMS_HIGHER_SPECIFICATION_COST;
                }
                else
                {
                    objProposal.IMS_HIGHER_SPECIFICATION_COST = null;
                }
                objProposal.IMS_FURNITURE_COST = ims_sanctioned_projects.IMS_FURNITURE_COST;
                objProposal.IMS_SHARE_PERCENT = ims_sanctioned_projects.IMS_SHARE_PERCENT;

                objProposal.IMS_MAINTENANCE_YEAR1 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT1;
                objProposal.IMS_MAINTENANCE_YEAR2 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT2;
                objProposal.IMS_MAINTENANCE_YEAR3 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT3;
                objProposal.IMS_MAINTENANCE_YEAR4 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT4;
                objProposal.IMS_MAINTENANCE_YEAR5 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT5;
                objProposal.IMS_RENEWAL_COST = ims_sanctioned_projects.IMS_RENEWAL_COST;

                // All Costs Sanctioned
                objProposal.IMS_SANCTIONED_PAV_AMT = ims_sanctioned_projects.IMS_SANCTIONED_PAV_AMT;
                objProposal.IMS_SANCTIONED_CD_AMT = ims_sanctioned_projects.IMS_SANCTIONED_CD_AMT;
                objProposal.IMS_SANCTIONED_PW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_PW_AMT;
                objProposal.IMS_SANCTIONED_OW_AMT = ims_sanctioned_projects.IMS_SANCTIONED_OW_AMT;
                objProposal.IMS_SANCTIONED_RS_AMT = Convert.ToDecimal(ims_sanctioned_projects.IMS_STATE_SHARE);

                if (ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION != null && ims_sanctioned_projects.IMS_IS_HIGHER_SPECIFICATION.Equals("Y"))
                {
                    objProposal.IMS_SANCTIONED_HS_AMT = ims_sanctioned_projects.IMS_HIGHER_SPECIFICATION_COST;
                }
                else
                {
                    objProposal.IMS_SANCTIONED_HS_AMT = null;
                }
                objProposal.IMS_SANCTIONED_FC_AMT = ims_sanctioned_projects.IMS_FURNITURE_COST;

                objProposal.IMS_SANCTIONED_MAN_AMT1 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT1;
                objProposal.IMS_SANCTIONED_MAN_AMT2 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT2;
                objProposal.IMS_SANCTIONED_MAN_AMT3 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT3;
                objProposal.IMS_SANCTIONED_MAN_AMT4 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT4;
                objProposal.IMS_SANCTIONED_MAN_AMT5 = ims_sanctioned_projects.IMS_SANCTIONED_MAN_AMT5;

                objProposal.IMS_SANCTIONED_RENEWAL_AMT = ims_sanctioned_projects.IMS_RENEWAL_COST;
                objProposal.MAST_MP_CONST_CODE = ims_sanctioned_projects.MAST_MP_CONST_CODE > 0 ? ims_sanctioned_projects.MAST_MP_CONST_CODE : null;
                objProposal.MAST_MLA_CONST_CODE = ims_sanctioned_projects.MAST_MLA_CONST_CODE > 0 ? ims_sanctioned_projects.MAST_MLA_CONST_CODE : null;
                objProposal.IMS_CARRIAGED_WIDTH = ims_sanctioned_projects.IMS_CARRIAGED_WIDTH;
                objProposal.IMS_TRAFFIC_TYPE = ims_sanctioned_projects.IMS_TRAFFIC_TYPE == 0 ? null : ims_sanctioned_projects.IMS_TRAFFIC_TYPE;
                objProposal.IMS_PROPOSED_SURFACE = ims_sanctioned_projects.IMS_PROPOSED_SURFACE;
                objProposal.MAST_EXISTING_SURFACE_CODE = ims_sanctioned_projects.MAST_EXISTING_SURFACE_CODE;
                objProposal.IMS_REMARKS = ims_sanctioned_projects.IMS_REMARKS;

                #region Sanctioned
                IMS_SANCTIONED_PROJECTS ims_sanctioned_projects1 = dbContext.IMS_SANCTIONED_PROJECTS.Where(x => x.IMS_PR_ROAD_CODE == ims_sanctioned_projects.IMS_PR_ROAD_CODE).FirstOrDefault();

                //STA Details
                objProposal.STA_SANCTIONED = ims_sanctioned_projects1.STA_SANCTIONED;
                objProposal.STA_SANCTIONED_BY = ims_sanctioned_projects1.STA_SANCTIONED_BY;

                if (ims_sanctioned_projects1.STA_SANCTIONED_DATE != null && Convert.ToDateTime(ims_sanctioned_projects.STA_SANCTIONED_DATE).Year != 0)
                {
                    DateTime dateTime = new DateTime();
                    dateTime = Convert.ToDateTime(ims_sanctioned_projects1.STA_SANCTIONED_DATE);
                    objProposal.STA_SANCTIONED_DATE = System.DateTime.Now;
                }
                objProposal.IMS_STA_REMARKS = ims_sanctioned_projects1.IMS_STA_REMARKS;

                //PTA Details
                objProposal.PTA_SANCTIONED = ims_sanctioned_projects1.PTA_SANCTIONED;
                objProposal.PTA_SANCTIONED_BY = ims_sanctioned_projects1.PTA_SANCTIONED_BY == null ? dbContext.ADMIN_TECHNICAL_AGENCY.Where(b => b.ADMIN_USER_ID == PMGSYSession.Current.UserId).Select(a => a.ADMIN_TA_CODE).FirstOrDefault() : ims_sanctioned_projects1.PTA_SANCTIONED_BY;

                if (ims_sanctioned_projects1.PTA_SANCTIONED_DATE != null && Convert.ToDateTime(ims_sanctioned_projects1.PTA_SANCTIONED_DATE).Year != 0)
                {
                    DateTime dateTime = new DateTime();
                    dateTime = Convert.ToDateTime(ims_sanctioned_projects1.PTA_SANCTIONED_DATE);
                    objProposal.PTA_SANCTIONED_DATE = System.DateTime.Now;
                }

                objProposal.IMS_PTA_REMARKS = ims_sanctioned_projects1.IMS_PTA_REMARKS;

                objProposal.IMS_SANCTIONED = ims_sanctioned_projects1.IMS_SANCTIONED;
                objProposal.IMS_SANCTIONED_BY = ims_sanctioned_projects1.IMS_SANCTIONED_BY;

                if (ims_sanctioned_projects1.IMS_SANCTIONED_DATE != null && Convert.ToDateTime(ims_sanctioned_projects1.IMS_SANCTIONED_DATE).Year != 0)
                {
                    DateTime dateTime = new DateTime();
                    dateTime = Convert.ToDateTime(ims_sanctioned_projects1.IMS_SANCTIONED_DATE);
                    objProposal.IMS_SANCTIONED_DATE = System.DateTime.Now;//dateTime.ToString("dd-MMM-yyyy");
                }
                objProposal.IMS_PROG_REMARKS = ims_sanctioned_projects1.IMS_PROG_REMARKS;

                #endregion

                if (objProposal.STA_SANCTIONED.Trim() == "N")
                {
                    // For Stage II Proposal Set this Flag to "H" because if Stage II Proposal is Edited then there is no way to Finalize the Habitation
                    if (ims_sanctioned_projects.IMS_IS_STAGED.ToUpper() == "S" && ims_sanctioned_projects.IMS_STAGE_PHASE == "2")
                    {
                        objProposal.IMS_ISCOMPLETED = "H";
                    }
                    else
                    {
                        //Flags set on Edit before DPIU Finaliation as well as reset after Mord Reconsider
                        objProposal.IMS_ISCOMPLETED = "E";
                    }

                    /// STA Flags
                    objProposal.STA_SANCTIONED = "N";
                    objProposal.STA_SANCTIONED_BY = null;
                    objProposal.STA_SANCTIONED_DATE = null;
                    objProposal.IMS_STA_REMARKS = string.Empty;

                    ///MoRD Flags
                    objProposal.IMS_SANCTIONED = "N";
                    objProposal.IMS_SANCTIONED_BY = null;
                    objProposal.IMS_SANCTIONED_DATE = null;
                    objProposal.IMS_PROG_REMARKS = string.Empty;

                    objProposal.IMS_SHIFT_STATUS = "N";
                    objProposal.PTA_SANCTIONED = "N";
                }
                #endregion

                #region FUND_SHARING_RATIO_PMGSY_SCHEME_1

                objProposal.IMS_STATE_SHARE_2015 = ims_sanctioned_projects.IMS_STATE_SHARE_2015;
                objProposal.IMS_MORD_SHARE_2015 = ims_sanctioned_projects.IMS_MORD_SHARE_2015;
                objProposal.IMS_SHARE_PERCENT_2015 = ims_sanctioned_projects.IMS_SHARE_PERCENT_2015;

                #endregion

                using (TransactionScope ts = new TransactionScope())
                {
                    objProposal.USERID = PMGSYSession.Current.UserId;
                    objProposal.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(objProposal).State = System.Data.Entity.EntityState.Modified; ;

                    objProposal.IMS_RIDING_QUALITY_LENGTH = ims_sanctioned_projects.ImsRidingQualityLength;
                    objProposal.IMS_PUCCA_SIDE_DRAINS = ims_sanctioned_projects.ImsPuccaSideDrains;
                    objProposal.IMS_GST_COST = ims_sanctioned_projects.ImsGSTCost;

                    #region For Post DPL Maintenance Cost
                    objProposal.IMS_MAINTENANCE_YEAR6 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR6;
                    objProposal.IMS_MAINTENANCE_YEAR7 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR7;
                    objProposal.IMS_MAINTENANCE_YEAR8 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR8;
                    objProposal.IMS_MAINTENANCE_YEAR9 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR9;
                    objProposal.IMS_MAINTENANCE_YEAR10 = ims_sanctioned_projects.IMS_MAINTENANCE_YEAR10;
                    #endregion

                    objProposal.PUCCA_SIDE_DRAIN_LENGTH = ims_sanctioned_projects.PUCCA_SIDE_DRAIN_LENGTH;
                    objProposal.PROTECTION_LENGTH = ims_sanctioned_projects.PROTECTION_LENGTH;

                    #region Existing Surface Details
                    objProposal.SURFACE_BRICK_SOLLING = ims_sanctioned_projects.SURFACE_BRICK_SOLLING;
                    objProposal.SURFACE_BT = ims_sanctioned_projects.SURFACE_BT;
                    objProposal.SURFACE_CC = ims_sanctioned_projects.SURFACE_CC;
                    objProposal.SURFACE_GRAVEL = ims_sanctioned_projects.SURFACE_GRAVEL;
                    objProposal.SURFACE_MOORUM = ims_sanctioned_projects.SURFACE_MOORUM;
                    objProposal.SURFACE_TRACK = ims_sanctioned_projects.SURFACE_TRACK;
                    objProposal.SURFACE_WBM = ims_sanctioned_projects.SURFACE_WBM;

                    decimal TotalSurfaceLength = Convert.ToDecimal(objProposal.SURFACE_BRICK_SOLLING + objProposal.SURFACE_BT + objProposal.SURFACE_CC + objProposal.SURFACE_GRAVEL + objProposal.SURFACE_MOORUM + objProposal.SURFACE_TRACK + objProposal.SURFACE_WBM);

                    if (ims_sanctioned_projects.IMS_PAV_LENGTH != TotalSurfaceLength)
                    {
                        return "Sum of all the Existing Surface Lengths should be equal to the Pavement Length";
                    }

                    #endregion

                    IMS_COST_COMPONENT imsCostComponent = dbContext.IMS_COST_COMPONENT.Where(z => z.IMS_COMPONENT_ID == ims_sanctioned_projects.imsComponentId).FirstOrDefault();
                    imsCostComponent.IMS_PR_ROAD_CODE = objProposal.IMS_PR_ROAD_CODE;
                    imsCostComponent.IMS_CLEARING = ims_sanctioned_projects.ImsClearing;
                    imsCostComponent.IMS_EXCAVATION = ims_sanctioned_projects.ImsExcavation;
                    imsCostComponent.IMS_FILLING = ims_sanctioned_projects.ImsFilling;
                    imsCostComponent.IMS_SUB_GRADE = ims_sanctioned_projects.ImsSubGrade;
                    imsCostComponent.IMS_SHOULDER = ims_sanctioned_projects.ImsShoulder;
                    imsCostComponent.IMS_GRANULAR_SUB_BASE = ims_sanctioned_projects.ImsGranularSubBase;
                    imsCostComponent.IMS_SOIL_AGGREGATE = ims_sanctioned_projects.ImsSoilAggregate;
                    imsCostComponent.IMS_WBM_GRADE_II = ims_sanctioned_projects.ImsWBMGradeII;
                    imsCostComponent.IMS_WBM_GRADE_III = ims_sanctioned_projects.ImsWBMGradeIII;
                    imsCostComponent.IMS_WMM = ims_sanctioned_projects.ImsWMM;
                    imsCostComponent.IMS_PRIME_COAT = ims_sanctioned_projects.ImsPrimeCoat;
                    imsCostComponent.IMS_TACK_COAT = ims_sanctioned_projects.ImsTackCoat;
                    imsCostComponent.IMS_BM_DBM = ims_sanctioned_projects.ImsBMDBM;
                    imsCostComponent.IMS_OGPC_SDBC_BC = ims_sanctioned_projects.ImsOGPC_SDBC_BC;
                    imsCostComponent.IMS_SEAL_COAT = ims_sanctioned_projects.ImsSealCoat;
                    imsCostComponent.IMS_SURFACE_DRESSING = ims_sanctioned_projects.ImsSurfaceDressing;
                    imsCostComponent.IMS_DRY_LEAN_CONCRETE = ims_sanctioned_projects.ImsDryLeanConcrete;
                    imsCostComponent.IMS_CONCRETE_PAVEMENT = ims_sanctioned_projects.ImsConcretePavement;
                    imsCostComponent.USERID = PMGSYSession.Current.UserId;
                    imsCostComponent.IPADD = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                    dbContext.Entry(imsCostComponent).State = System.Data.Entity.EntityState.Modified; ;

                    dbContext.SaveChanges();
                    ts.Complete();
                }
                return string.Empty;
            }
            catch (DbEntityValidationException e)
            {
                ErrorLog.LogError(e, "UpdateRoadProposalDALPMGSY5(DbEntityValidationException ex).DAL");
                ModelStateDictionary modelstate = new ModelStateDictionary();

                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        modelstate.AddModelError(ve.ErrorMessage, ve.ErrorMessage);
                    }
                }
                return new CommonFunctions().FormatErrorMessage(modelstate);
            }
            catch (DbUpdateException ex)
            {
                ErrorLog.LogError(ex, "UpdateRoadProposalDALPMGSY5(DbUpdateException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (OptimisticConcurrencyException ex)
            {
                ErrorLog.LogError(ex, "UpdateRoadProposalDALPMGSY5(OptimisticConcurrencyException ex).DAL");
                return ("An Error Occurred While Processing Your Request.");
            }
            catch (Exception ex)
            {
                ErrorLog.LogError(ex, "UpdateRoadProposalDALPMGSY5().DAL");
                return ("Error Occurred While Processing Request.");
            }
            finally
            {
                dbContext.Dispose();
            }
        }

        #endregion
    }

    public interface IProposalDAL
    {
        bool checkIsPaymentDAL(int prRoadCode);

        #region Road Proposal Data Entry

        Array GetProposalsDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int MAST_BLOCK_CODE, int IMS_BATCH, int IMS_STREAMS, String ProposalType, int MAST_DPIU_CODE, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, string Filters, out ProposalColumnsTotal totalColModel);
        Array GetProposalsForSRRDADAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel);
        String SaveRoadProposalDAL(IMS_SANCTIONED_PROJECTS objProposal);
        string DPIUFinalizeProposalDAL(int IMS_PR_ROAD_CODE);
        //delete this method (mentioned below)
        string UpdateProposalDAL(IMS_SANCTIONED_PROJECTS ims_sanctioned_projects);
        string UpdateRoadProposalDAL(Models.Proposal.ProposalViewModel ims_sanctioned_projects);
        string DeleteRoadProposalDAL(int IMS_PR_ROAD_CODE);
        string GetRoadDetailsDAL(int PLAN_CN_ROAD_CODE, bool isStageTwoProposal, int IMS_PR_ROAD_CODE, int IMS_STAGED_ROAD_ID);
        string GetRoadDetailsForUpdateDAL(int IMS_PR_ROAD_CODE, int PLAN_CN_ROAD_CODE);
        string GetRoadDetailsForStageTwoProposalDAL(int IMS_PR_ROAD_CODE, int PLAN_CN_ROAD_CODE);
        bool IsProposalFinanciallyClosed(int proposalCode);

        #endregion

        #region Habitataion and Cluster

        Array GetHabitationListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE);
        string AddHabitationDetailsDAL(HabitationViewModel habModel);
        int CreateClusterDAL(string[] clusterArray, int IMS_PR_ROAD_CODE);
        string UpdateClusterDAL(int[] HabitationArray, int[] ClusterArray, int IMS_PR_ROAD_CODE);
        int UnMapHabitationDAL(int IMS_PR_ROAD_CODE, int IMS_HAB_CODE);
        string FinalizeHabitationDAL(HabitationViewModel habitationViewModel);
        int UnMapHabitationClusterDAL(int IMS_PR_ROAD_CODE, int IMS_HAB_CODE, int MAST_CLUSTER_CODE);
        string CopyHabitationDetails(int STAGE_1_IMS_PR_ROAD_CODE, int STAGE_2_IMS_PR_ROAD_CODE);
        string AddHabitationClusterDetailDAL(HabitationClusterViewModel habModel);
        #endregion

        #region Traffic Intensity
        Array GetTrafficListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE);
        int SaveTrafficIntesityDAL(IMS_TRAFFIC_INTENSITY ims_traffic_intensity);
        int UpdateTrafficIntesityDAL(IMS_TRAFFIC_INTENSITY ims_traffic_intensity);
        int DeleteTrafficIntensityDetailsDAL(IMS_TRAFFIC_INTENSITY ims_traffic_intensity);
        #endregion

        #region CBR Details
        string SaveCBRValueDAL(IMS_CBR_VALUE ims_cbr_value);
        string UpdateCBRVAlueDAL(IMS_CBR_VALUE ims_cbr_value);
        string DeleteCBRValueDAL(IMS_CBR_VALUE ims_cbr_value);
        Array GetCBRListDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int IMS_PR_ROAD_CODE);
        #endregion

        #region Upload File Details
        Array GetFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE);
        Array GetPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE);
        Array GetSTASRRDAPDFFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE);
        string AddFileUploadDetailsDAL(List<IMS_PROPOSAL_FILES> lst_ims_proposal_files);
        string UpdateImageDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files);
        string UpdatePDFDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files);
        string DeleteFileDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files);

        Array GetJIFilesListDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_PR_ROAD_CODE);
        //string UpdateJIDetailsDAL(IMS_PROPOSAL_FILES ims_proposal_files);
        #endregion

        #region UnLockProposal
        string UpdateUnlockedProposedDAL(UnlockProposalViewModel proposalViewModel);
        string DPIUFinalizeUnlockedProposalDAL(int IMS_PR_ROAD_CODE);
        #endregion

        #region STA Road Proposal
        Array GetSTAProposalsDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MAST_STATE_CODE, int IMS_YEAR, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS);
        string STAFinalizeProposalDAL(StaSanctionViewModel staSanctionViewModel, String ProposalStatus);
        #endregion

        #region PTA
        string PTAFinalizeProposalDAL(PtaSanctionViewModel ptaSanctionViewModel, string ProposalStatus);
        #endregion

        #region Mord Road Proposal
        Array GetMordProposalsDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_YEAR, int MAST_STATE_ID, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS, int IMS_AGENCY, string IMS_UPGRADE_CONNECT, out ProposalColumnsTotal totalColModel);
        string UpdateMordSanctionDetailsDAL(MordSanctionViewModel mordSanctionViewModel);
        MordSanctionViewModel GetBulkMordDetailDAL(string IMS_PR_ROAD_CODES);
        string BulkMordDetailDAL(MordSanctionViewModel mordSanctionViewModel);
        #endregion

        #region Habitation Finalization
        Array GetMordProposalsforHabFinalizationDAL(int page, int rows, string sidx, string sord, out int totalRecords, int IMS_YEAR, int MAST_STATE_ID, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, string IMS_PROPOSAL_STATUS, int IMS_AGENCY, string IMS_UPGRADE_CONNECT);
        bool DefinalizeHabitationDAL(int proposalCode);
        #endregion

        #region REVISION

        RevisedCostLengthViewModel GetOldRevisedCostLengthDAL(int proposalCode);
        Array GetRevisedCostLengthListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode);
        bool AddRevisedCostLengthDAL(RevisedCostLengthViewModel model, ref string message);
        RevisedCostLengthViewModel GetRevisionDetailsDAL(int proposalCode, int revisionCode);
        Array GetRevisionBridgeListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode);
        bool EditRevisionDetailsDAL(RevisedCostLengthViewModel model, ref string message);


        #endregion

        #region TECHNOLOGY

        bool AddTechnologyDetailsDAL(TechnologyDetailsViewModel model, ref string message);
        bool EditTechnologyDetailsDAL(TechnologyDetailsViewModel model, ref string message);
        bool DeleteTechnologyDetails(int proposalCode, int segmentCode);
        Array GetTechnologyDetailsListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int proposalCode);
        TechnologyDetailsViewModel GetTechnologyDetails(int proposalCode, int segmentCode);
        decimal? GetTechnologyStartChainage(int proposalCode, int techCode, int layerCode);


        #endregion

        #region Test Result Details
        List<SelectListItem> PopulateSamples();
        List<SelectListItem> PopulateTestNames();
        Array TestResultDetails(int IMS_PR_ROAD_CODE, int? page, int? rows, string sidx, string sord, out long totalRecords);
        Array TestResultSampleDetails(int IMS_PR_ROAD_CODE, int? page, int? rows, string sidx, string sord, out long totalRecords);
        bool AddTestResultDetails(TestResultViewModel testResultViewModel, ref string message);
        TestResultViewModel EditTestResultDetails(int ResultCode, int ImsPrRoadCode);
        bool UpdateTestResultDetails(TestResultViewModel testResultViewModel, ref string message);
        bool DeleteTestResultDetails(int resultCode, int imsPrRoadCode, ref string message);
        Array GetItnoProposalsDAL(int page, int rows, string sidx, string sord, out int totalRecords, int MAST_STATE_CODE, int IMS_YEAR, int MAST_DISTRICT_ID, int IMS_BATCH, int IMS_STREAMS);
        IMS_SANCTIONED_PROJECTS GetRoadDetails(int IMS_PR_ROAD_CODE);
        #endregion

        #region SANCTION_ORDER_GENERATION

        Array GetProposalsForSanctionOrder(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int agency, int batch, int scheme, string proposalType, out bool IsSOGenerated);

        bool AddSanctionOrderDAL(SanctionOrderViewModel model, ref string message);

        Array GetSanctionOrderListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int agency, int batch, int scheme, string proposalType);

        #endregion

        #region REPACKAGING

        Array GetProposalsForRepackaging(int? page, int? rows, string sidx, string sord, out long totalRecords, int year, int batch, int block, string package, int collaboration, string proposalType, string upgradationType);
        bool AddRepackagingDetails(RepackagingDetailsViewModel model);

        #endregion

        #region DPR_LIST

        Array GetDPRProposalListDAL(int stateCode, int districtCode, int blockCode, int year, int batch, int collaboStream, string proposalType, string proposalStatus, string packageId, string connectivity, int? page, int? rows, string sidx, string sord, out long totalRecords);
        bool DeleteDPRProposalDAL(int proposalCode);
        #endregion

        #region OLD_PROPOSAL_UPDATE

        Array GetProposalsForUpdateDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, int IMS_YEAR, int MAST_BLOCK_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, int adminCode, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT);
        Array GetProposalsForCNMappingDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int districtCode, int IMS_YEAR, int MAST_BLOCK_ID, int IMS_BATCH, int IMS_STREAMS, string IMS_PROPOSAL_TYPE, int adminCode, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT);
        bool UpdateProposalDetailsDAL(ProposalUpdateViewModel model, out string message);
        ProposalUpdateViewModel GetOldProposalDetailsDAL(int proposalCode);
        bool ChangeCompleteProposalToStagedDAL(int proposalCode, out string message);
        bool ChangeStagedProposalToCompleteDAL(int proposalCode, out string message);
        bool MapCoreNetworkDetailsDAL(CoreNetworkMappingViewModel model);
        bool ChangeStage1ProposalToStage2DAL(Stage1ToStage2ViewModel model);
        bool ChangeCompleteProposalsToStage2DAL(Stage1ToStage2ViewModel model);
        //bool UpdateProposalPIUDetailsDAL(ProposalPIUUpdateViewModel model);
        string UpdateProposalPIUDetailsDAL(ProposalPIUUpdateViewModel_New model);
        bool UpdateProposalDetailsBlockDAL(ProposalUpdateBlockViewModel model);

        #endregion

        #region CHANGING_CORE_NETWORK

        bool UpdateCoreNetworkDetailsDAL(CoreNetworkUpdateViewModel model);
        bool UpdateBlockDetailsDAL(ProposalBlockUpdateViewModel model);

        #endregion

        #region Proposal Additional Cost
        Array GetProposalAdditionalCostListDAL(int stateCode, int districtCode, int blockCode, int yearCode, string packageCode, string proposalCode, int batchCode, int streamCode, string upgradationType, int page, int rows, string sidx, string sord, out long totalRecords);
        Array GetAdditionalCostListDAL(int roadCode, int page, int rows, string sidx, string sord, out long totalRecords);
        bool AddAdditionalCostDetailsDAL(ProposalAdditionalCostModel proposalAdditionalCostModel, ref string message);
        ProposalAdditionalCostModel EditAdditionalCostDetailsDAL(int TransctionCode, int ImsPrRoadCode);
        bool UpdateAdditionalCostDetailsDAL(ProposalAdditionalCostModel proposalAdditionalCostModel, ref string message);
        bool DeleteAdditionalCostDetailsDAL(int transactionCode, int imsPrRoadCode, ref string message);
        #endregion

        #region  Upload Sanction Order MRD CLEARANCE LETTERS
        bool AddMrdClearanceDAL(MrdClearenceViewModel mrdClearanceViewModel, ref string message);
        Array ListMrdClearanceDAL(int stateCode, int year, int batch, int agencyCode, int collaboration, int page, int rows, string sidx, string sord, out long totalRecords);
        Array ListMrdClearanceFileDAL(int cleranceCode, string clearanceStatus, int page, int rows, string sidx, string sord, out long totalRecords);
        Array ListMrdClearanceRevisionDAL(int clearanceCode, int page, int rows, string sidx, string sord, out long totalRecords);
        Array ListOriginalMrdClearanceDAL(int clearanceCode, int page, int rows, string sidx, string sord, out long totalRecords);
        bool DeleteMrdClearanceDAL(int clearanceCode, ref string message);
        bool EditMrdClearanceDAL(MrdClearenceViewModel mrdClearanceViewModel, ref string message);
        MrdClearenceViewModel GetMrdClearanceDetailsDAL(int clearanceCode);

        bool AddMrdClearanceRevisionDAL(MrdClearenceRevisionViewModel mrdClearanceRevisionViewModel, ref string message);
        bool DeleteMrdClearanceRevisionDAL(int clearanceCode, ref string message);
        MrdClearenceRevisionViewModel GetMrdClearanceRevisionDetailsDAL(int clearanceCode, string action);
        bool EditMrdClearanceRevsionDAL(MrdClearenceRevisionViewModel mrdClearanceRevsionViewModel, ref string message);
        bool EditDeleteMrdClearanceFileDAL(int clearanceCode, string fileType, string fileName, ref string message);

        #endregion

        #region GEPNIC_INTEGRATION

        Array GetGepnicProposals(int page, int rows, string sidx, string sord, out int totalRecords, int State, int District, int Year, int Block, string ProposalType, string Package);

        #endregion

        #region Dropped Proposal[by Pradip Patil (10/04/2017)]

        Array GetDroppingProposalsForSRRDADAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel);

        bool DropProposalDAL(List<int> imsRoadCodeList, out String result);

        Array GetProposalsForDroppedOrder(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int batch, int scheme, string proposalType, out bool IsSOGenerated, string reqCode);

        bool AddDropOrderDAL(DropOrderViewModel model, List<int> mrdselectedroadList, ref string message);

        //bool AddDropOrderDAL(DropOrderViewModel model,string [] dropApprovArray, ref string message);

        Array GetDropOrderListDAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int stateCode, int year, int stream, int batch, int scheme, string proposalType, String Status);

        Array GetDetailDropOrderListBAL(int? page, int? rows, string sidx, string sord, out long totalRecords, int RequestCode, int scheme);

        bool AddDropProposalDAL(AddDropOrderViewModel model, out String result);

        Array ListDropppingWorksDAL(int stateCode, int? page, int? rows, string sidx, string sord, out long totalRecords);
        Array ListWorksForDropppingDAL(int reqCode, int? page, int? rows, string sidx, string sord, out long totalRecords);
        bool AddDropRequestDetailsDAL(string[] dropDetails, string letterNo, out String result);
        #endregion

        #region Matrix Master
        Array ListMatrixParametersDetailsDAL(int? page, int? rows, string sidx, string sord, out long totalRecords);
        Array ListMatrixParametersWeightageDetailsDAL(int? page, int? rows, string sidx, string sord, out long totalRecords);
        bool AddMatrixDetailsDAL(string[] MatrixParams, ref string message);
        Boolean SaveDistrictMappinDetailsDAL(DistrictMappingModel model, out String messge);
        Array ListMappedDistrictDetailsDAL(int? page, int? rows, string sidx, string sord, out long totalRecords);
        bool DeleteMappedDistrictsDAL(int districtId, out string message);
        #endregion


        #region Proposal Shifting
        Array GetProposalsForITNOForShiftingDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, string Filters, out ProposalColumnsTotal totalColModel);

        bool ShiftProposalDAL(string encryptedVillageCode, string newBlockCode, string newDistrictCode, string ProposalCode);

        Array GetLSBDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int IMS_BATCH, int IMS_STREAMS, String ProposalType, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, int MAST_BLOCK_CODE, out ProposalColumnsTotal model);


        ShiftProposalModel GetPropDetailsDAL(int proposalCode);
        #endregion

        #region Proposals for PMGSY Scheme 5 (Vibrant Village) - Srishti Tyagi 27/06/2023

        Array GetProposalsVibrantVillageDAL(int? page, int? rows, string sidx, string sord, out Int32 totalRecords, int MAST_STATE_CODE, int MAST_DISTRICT_CODE, int IMS_YEAR, int MAST_BLOCK_CODE, int IMS_BATCH, int IMS_STREAMS, String ProposalType, int MAST_DPIU_CODE, string IMS_PROPOSAL_STATUS, string IMS_UPGRADE_CONNECT, string Filters, out ProposalColumnsTotal totalColModel);

        String SaveRoadProposalPMGSY5DAL(IMS_SANCTIONED_PROJECTS objProposal, ProposalViewModel ims_sanctioned_projects);

        string UpdateRoadProposalDALPMGSY5(Models.Proposal.ProposalViewModel ims_sanctioned_projects);

        #endregion
    }
}